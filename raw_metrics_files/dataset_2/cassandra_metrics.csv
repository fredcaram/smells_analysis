SmellMetrics,Seg, 4 jun 2018 10:36:43 BRT
Method,CALL,CALLED,IMP,LOC,NBD,NP,STAT,v(G)
"null.add(ByteBuffer)",1,2,n/a,4,0,1,1,1
"null.add(Object)",1,2,n/a,4,0,1,1,1
"null.add(Permission)",1,0,n/a,4,0,1,1,1
"null.addIndexClusteringColumns(Builder,CFMetaData,ColumnDefinition)",4,0,n/a,10,0,3,4,2
"null.allocate(int)",1,1,n/a,4,0,1,1,1
"null.allowClusteringColumnSlices()",0,2,n/a,5,0,0,1,1
"null.allowNonPrimaryKeyInWhereClause()",0,1,n/a,5,0,0,1,1
"null.allowPartitionKeyRanges()",0,1,n/a,5,0,0,1,1
"null.allowUseOfSecondaryIndices()",0,1,n/a,5,0,0,1,1
"null.apply(ColumnDefinition)",1,0,n/a,4,0,1,1,1
"null.apply(IMutation,Iterable<InetAddress>,AbstractWriteResponseHandler<IMutation>,String,ConsistencyLevel)",3,1,n/a,9,0,5,1,1
"null.apply(InetAddress)",1,0,n/a,4,0,1,1,1
"null.apply(Row)",4,0,n/a,7,0,1,1,1
"null.apply(SSTableReader)",1,0,n/a,4,0,1,1,1
"null.apply(String)",1,0,n/a,4,0,1,1,1
"null.apply(Term)",1,0,n/a,4,0,1,1,1
"null.avgSize(List<SSTableReader>)",2,2,n/a,7,0,1,4,2
"null.bind(QueryOptions)",0,0,n/a,6,0,1,1,1
"null.build()",0,2,n/a,4,0,0,1,1
"null.buildBound(boolean,boolean)",1,0,n/a,4,0,2,1,1
"null.buildBoundWith(ByteBuffer,boolean,boolean)",1,0,n/a,4,0,3,1,1
"null.buildBoundWith(List<ByteBuffer>,boolean,boolean)",1,0,n/a,4,0,3,1,1
"null.buildSlice()",1,1,n/a,4,0,0,1,1
"null.buildWith(ByteBuffer)",1,0,n/a,4,0,1,1,1
"null.buildWith(List<ByteBuffer>)",1,0,n/a,4,0,1,1,1
"null.cancel()",0,1,n/a,3,0,0,0,1
"null.commit()",0,1,n/a,3,0,0,0,1
"null.comparator()",1,0,n/a,4,0,0,1,1
"null.compare(ColumnDefinition,ColumnDefinition)",4,0,n/a,6,0,2,2,2
"null.compare(DecoratedKey,DecoratedKey)",1,0,n/a,4,0,2,1,1
"null.compare(InetAddress,InetAddress)",5,0,n/a,4,0,2,1,1
"null.compare(Interval<Comparable, Object>,Interval<Comparable, Object>)",1,0,n/a,4,0,2,1,1
"null.compare(Pair<List<SSTableReader>, Double>,Pair<List<SSTableReader>, Double>)",4,0,n/a,9,0,2,4,2
"null.compare(Partition,Partition)",3,0,n/a,4,0,2,1,1
"null.compare(ReplayPosition,ReplayPosition)",2,0,n/a,6,0,2,3,2
"null.compare(SSTableReader,SSTableReader)",1,0,n/a,4,0,2,1,1
"null.compare(StreamMessage,StreamMessage)",2,0,n/a,4,0,2,1,1
"null.compareAsymmetric(Interval<Comparable, Object>,Comparable)",1,0,n/a,4,0,2,1,1
"null.count()",0,0,n/a,4,0,0,1,1
"null.decode(ByteBuf,int)",2,0,n/a,5,0,2,2,1
"null.deserialize(ReadableByteChannel,int,StreamSession)",1,0,n/a,4,0,3,1,1
"null.elements()",1,0,n/a,4,0,0,1,1
"null.encode(AuthChallenge,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encode(AuthResponse,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encode(AuthSuccess,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encode(AuthenticateMessage,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encode(BatchMessage,ByteBuf,int)",13,0,n/a,20,1,3,15,5
"null.encode(CredentialsMessage,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encode(ErrorMessage,ByteBuf,int)",30,0,n/a,57,2,3,48,11
"null.encode(EventMessage,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encode(ExecuteMessage,ByteBuf,int)",6,0,n/a,13,1,3,5,2
"null.encode(OptionsMessage,ByteBuf,int)",0,0,n/a,3,0,3,0,1
"null.encode(PrepareMessage,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encode(QueryMessage,ByteBuf,int)",4,0,n/a,8,0,3,4,2
"null.encode(ReadyMessage,ByteBuf,int)",0,0,n/a,3,0,3,0,1
"null.encode(RegisterMessage,ByteBuf,int)",3,0,n/a,6,0,3,3,2
"null.encode(ResultMessage,ByteBuf,int)",1,0,n/a,6,0,3,3,1
"null.encode(StartupMessage,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encode(SupportedMessage,ByteBuf,int)",1,0,n/a,4,0,3,1,1
"null.encodedSize(AuthChallenge,int)",1,0,n/a,4,0,2,1,1
"null.encodedSize(AuthResponse,int)",1,0,n/a,4,0,2,1,1
"null.encodedSize(AuthSuccess,int)",1,0,n/a,4,0,2,1,1
"null.encodedSize(AuthenticateMessage,int)",1,0,n/a,4,0,2,1,1
"null.encodedSize(BatchMessage,int)",9,0,n/a,16,1,2,9,4
"null.encodedSize(CredentialsMessage,int)",1,0,n/a,4,0,2,1,1
"null.encodedSize(ErrorMessage,int)",19,0,n/a,44,2,2,37,9
"null.encodedSize(EventMessage,int)",1,0,n/a,4,0,2,1,1
"null.encodedSize(ExecuteMessage,int)",6,0,n/a,15,1,2,7,2
"null.encodedSize(OptionsMessage,int)",0,0,n/a,4,0,2,1,1
"null.encodedSize(PrepareMessage,int)",1,0,n/a,4,0,2,1,1
"null.encodedSize(QueryMessage,int)",4,0,n/a,13,1,2,5,2
"null.encodedSize(ReadyMessage,int)",0,0,n/a,4,0,2,1,1
"null.encodedSize(RegisterMessage,int)",1,0,n/a,7,0,2,4,2
"null.encodedSize(ResultMessage,int)",1,0,n/a,6,0,2,3,1
"null.encodedSize(StartupMessage,int)",1,0,n/a,4,0,2,1,1
"null.encodedSize(SupportedMessage,int)",1,0,n/a,4,0,2,1,1
"null.execute()",4,0,n/a,16,1,0,5,3
"null.execute(ConsistencyLevel,ClientState)",1,0,n/a,4,0,2,1,1
"null.execute(int,List<ByteBuffer>)",1,0,n/a,4,0,2,1,1
"null.executeInternal(ReadOrderGroup)",1,0,n/a,4,0,1,1,1
"null.fetchPage(int,ConsistencyLevel,ClientState)",1,1,n/a,4,0,3,1,1
"null.fetchPageInternal(int,ReadOrderGroup)",1,6,n/a,4,0,2,1,1
"null.filter(UnfilteredPartitionIterator,int)",0,0,n/a,5,0,2,1,1
"null.filter(UnfilteredRowIterator,int)",0,0,n/a,5,0,2,1,1
"null.fromByteArray(ByteBuffer)",3,0,n/a,11,1,1,3,2
"null.fromString(String)",1,0,n/a,4,0,1,1,1
"null.fromType(Type)",1,1,n/a,11,1,1,9,5
"null.get()",2,0,n/a,7,0,0,3,1
"null.getIndexedValueType(ColumnDefinition)",3,0,n/a,5,0,1,2,1
"null.getInputStream(File,File)",2,1,n/a,4,0,2,1,1
"null.getLocalPager()",0,0,n/a,4,0,0,1,1
"null.getOutputStream(File,File)",2,1,n/a,4,0,2,1,1
"null.getPager(PagingState,int)",0,0,n/a,4,0,2,1,1
"null.getPermissions(CodeSource)",6,0,n/a,16,1,1,8,4
"null.getPermissions(ProtectionDomain)",2,0,n/a,4,0,1,1,1
"null.hasEnoughLiveData(CachedPartition,int)",0,2,n/a,5,0,2,1,1
"null.implies(Permission)",0,0,n/a,4,0,1,1,1
"null.implies(ProtectionDomain,Permission)",4,0,n/a,14,1,2,7,4
"null.includes(Clustering)",0,1,n/a,4,0,1,1,1
"null.initialValue()",1,0,n/a,4,0,0,1,1
"null.intersects(ClusteringComparator,List<ByteBuffer>,List<ByteBuffer>)",0,0,n/a,5,0,3,1,1
"null.isDone()",0,0,n/a,4,0,0,1,1
"null.isExhausted()",0,41,n/a,4,0,0,1,1
"null.kind()",0,0,n/a,5,0,0,1,1
"null.limits()",1,0,n/a,7,0,0,1,1
"null.load(InetAddress)",1,0,n/a,4,0,1,1,1
"null.makeCollectionReceiver(ColumnSpecification,boolean)",1,1,n/a,4,0,2,1,1
"null.maxRemaining()",0,0,n/a,4,0,0,1,1
"null.nanoTime()",1,1,n/a,4,0,0,1,1
"null.newAggregate()",8,0,n/a,9,2,0,11,3
"null.newConnection(Channel,int)",0,0,n/a,4,0,2,1,1
"null.newIndexInstance(ColumnFamilyStore,IndexMetadata)",1,0,n/a,4,0,2,1,1
"null.newInstance()",1,3,n/a,5,0,0,1,1
"null.onEviction(Integer,Prepared)",2,0,n/a,5,0,2,2,1
"null.onEviction(MD5Digest,Prepared)",2,0,n/a,5,0,2,2,1
"null.onInserted(Row)",0,1,n/a,1,0,1,0,1
"null.onMeterAdded(String,Meter)",6,0,n/a,11,0,2,5,1
"null.onPartitionDeletion(DeletionTime)",0,0,n/a,1,0,1,0,1
"null.onRangeTombstone(RangeTombstone)",0,1,n/a,1,0,1,0,1
"null.onRowDelete(Row)",0,0,n/a,1,0,1,0,1
"null.onRowMerge(Row,Row...)",0,0,n/a,1,0,2,0,1
"null.onUpdated(Row,Row)",0,1,n/a,1,0,2,0,1
"null.openConnection(URL)",0,0,n/a,4,0,1,1,1
"null.park(long)",1,2,n/a,5,0,1,1,1
"null.reclaim(Row)",0,1,n/a,4,0,1,1,1
"null.reclaimImmediately(DecoratedKey)",0,1,n/a,4,0,1,1,1
"null.reclaimImmediately(Row)",0,1,n/a,4,0,1,1,1
"null.rejectedExecution(Runnable,ThreadPoolExecutor)",6,0,n/a,16,1,2,7,4
"null.remainingCount()",0,0,n/a,4,0,0,1,1
"null.run()",5,0,n/a,21,3,0,6,3
"null.selects(ClusteringComparator,Clustering)",0,0,n/a,5,0,2,1,1
"null.selectsClustering(DecoratedKey,Clustering)",0,0,n/a,4,0,2,1,1
"null.selectsKey(DecoratedKey)",0,0,n/a,4,0,1,1,1
"null.serialize(CompleteMessage,DataOutputStreamPlus,int,StreamSession)",0,0,n/a,1,0,4,0,1
"null.serialize(IncomingFileMessage,DataOutputStreamPlus,int,StreamSession)",1,0,n/a,4,0,4,1,1
"null.serialize(OutgoingFileMessage,DataOutputStreamPlus,int,StreamSession)",2,0,n/a,5,0,4,2,1
"null.serialize(PrepareMessage,DataOutputStreamPlus,int,StreamSession)",6,0,n/a,11,0,4,6,3
"null.serialize(ReceivedMessage,DataOutputStreamPlus,int,StreamSession)",2,0,n/a,5,0,4,2,1
"null.serialize(RetryMessage,DataOutputStreamPlus,int,StreamSession)",2,0,n/a,5,0,4,2,1
"null.serialize(SessionFailedMessage,DataOutputStreamPlus,int,StreamSession)",0,0,n/a,1,0,4,0,1
"null.start()",0,0,n/a,1,0,0,0,1
"null.startOrderGroup()",1,5,n/a,4,0,0,1,1
"null.state()",0,2,n/a,4,0,0,1,1
"null.toByteArray(Token)",1,0,n/a,5,0,1,2,1
"null.toString()",0,0,n/a,5,0,0,1,1
"null.toString(CFMetaData)",0,0,n/a,5,0,1,1,1
"null.toString(ClusteringComparator)",0,1,n/a,5,0,1,1,1
"null.toString(Token)",0,0,n/a,5,0,1,2,1
"null.toType(byte)",1,1,n/a,11,0,1,7,4
"null.update(Checksum,ByteBuffer)",1,0,n/a,5,0,2,1,1
"null.validate(String)",2,0,n/a,5,0,1,2,2
"null.weightOf(Integer,Prepared)",4,0,n/a,5,0,2,1,1
"null.weightOf(MD5Digest,Prepared)",4,0,n/a,5,0,2,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.Negotiator.evaluateResponse(byte[])",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.Negotiator.getAuthenticatedUser()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.Negotiator.isComplete()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.legacyAuthenticate(Map<String, String>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.newSaslNegotiator(InetAddress)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.protectedResources()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.requireAuthentication()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.AllowAllAuthenticator.setup()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.AllowAllAuthenticator.validateConfiguration()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.AllowAllAuthorizer.authorize(AuthenticatedUser,IResource)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.grant(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.list(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.protectedResources()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.revoke(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.auth.AllowAllAuthorizer.revokeAllFrom(RoleResource)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.auth.AllowAllAuthorizer.revokeAllOn(IResource)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.auth.AllowAllAuthorizer.setup()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.AllowAllAuthorizer.validateConfiguration()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.AllowAllInternodeAuthenticator.authenticate(InetAddress,int)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.auth.AllowAllInternodeAuthenticator.validateConfiguration()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.AuthKeyspace.AuthKeyspace()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.AuthKeyspace.compile(String,String,String)",5,4,n/a,6,0,3,1,1
"org.apache.cassandra.auth.AuthKeyspace.metadata()",3,2,n/a,4,0,0,1,1
"org.apache.cassandra.auth.AuthMigrationListener.onDropColumnFamily(String,String)",3,1,n/a,4,0,2,1,1
"org.apache.cassandra.auth.AuthMigrationListener.onDropFunction(String,String,List<AbstractType<?>>)",3,0,n/a,5,0,3,1,1
"org.apache.cassandra.auth.AuthMigrationListener.onDropKeyspace(String)",6,0,n/a,5,0,1,2,1
"org.apache.cassandra.auth.AuthenticatedUser.AuthenticatedUser(String)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.auth.AuthenticatedUser.equals(Object)",1,0,n/a,10,0,1,6,3
"org.apache.cassandra.auth.AuthenticatedUser.getName()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.AuthenticatedUser.getPermissions(IResource)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.AuthenticatedUser.getPrimaryRole()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.AuthenticatedUser.getRoles()",1,0,n/a,9,0,0,1,1
"org.apache.cassandra.auth.AuthenticatedUser.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.AuthenticatedUser.isAnonymous()",0,2,n/a,7,0,0,1,1
"org.apache.cassandra.auth.AuthenticatedUser.isSuper()",2,0,n/a,10,0,0,1,2
"org.apache.cassandra.auth.AuthenticatedUser.isSystem()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.auth.AuthenticatedUser.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.CassandraAuthorizer()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.CassandraAuthorizer.addLookupEntry(IResource,RoleResource)",6,1,n/a,9,0,2,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.addPermissionsForRole(Set<Permission>,IResource,RoleResource)",17,1,n/a,22,2,3,7,5
"org.apache.cassandra.auth.CassandraAuthorizer.authorize(AuthenticatedUser,IResource)",8,0,n/a,23,1,2,10,5
"org.apache.cassandra.auth.CassandraAuthorizer.buildListQuery(IResource,RoleResource,boolean)",14,1,n/a,23,1,3,16,8
"org.apache.cassandra.auth.CassandraAuthorizer.convertLegacyData()",36,1,n/a,4,5,0,18,4
"org.apache.cassandra.auth.CassandraAuthorizer.escape(String)",1,16,n/a,5,0,1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.executeLoggedBatch(List<CQLStatement>)",7,2,n/a,11,0,1,2,1
"org.apache.cassandra.auth.CassandraAuthorizer.grant(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",2,0,n/a,6,0,4,2,1
"org.apache.cassandra.auth.CassandraAuthorizer.list(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",12,0,n/a,21,0,4,9,6
"org.apache.cassandra.auth.CassandraAuthorizer.listPermissionsForRole(Set<Permission>,IResource,RoleResource)",13,2,n/a,26,3,3,10,6
"org.apache.cassandra.auth.CassandraAuthorizer.modifyRolePermissions(Set<Permission>,IResource,RoleResource,String)",7,2,n/a,12,0,4,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.prepare(String,String)",3,2,n/a,8,0,2,2,1
"org.apache.cassandra.auth.CassandraAuthorizer.process(String)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.protectedResources()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.removeLookupEntry(IResource,RoleResource)",6,1,n/a,9,0,2,1,1
"org.apache.cassandra.auth.CassandraAuthorizer.revoke(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",2,0,n/a,6,0,4,2,1
"org.apache.cassandra.auth.CassandraAuthorizer.revokeAllFrom(RoleResource)",22,0,n/a,36,2,1,8,3
"org.apache.cassandra.auth.CassandraAuthorizer.revokeAllOn(IResource)",21,0,n/a,34,2,1,9,3
"org.apache.cassandra.auth.CassandraAuthorizer.setup()",6,0,n/a,4,3,0,5,2
"org.apache.cassandra.auth.CassandraAuthorizer.validateConfiguration()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.CassandraRoleManager.CassandraRoleManager()",9,0,n/a,9,0,0,2,3
"org.apache.cassandra.auth.CassandraRoleManager.Role.Role(String,boolean,boolean,Set<String>)",0,3,n/a,7,0,4,4,1
"org.apache.cassandra.auth.CassandraRoleManager.Role.equals(Object)",1,2,n/a,9,0,1,6,3
"org.apache.cassandra.auth.CassandraRoleManager.Role.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.CassandraRoleManager.alterRole(AuthenticatedUser,RoleResource,RoleOptions)",13,0,n/a,16,1,3,3,2
"org.apache.cassandra.auth.CassandraRoleManager.alterableOptions()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.CassandraRoleManager.canLogin(RoleResource)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.collectRoles(Role,Set<RoleResource>,boolean)",5,2,n/a,16,1,3,7,4
"org.apache.cassandra.auth.CassandraRoleManager.consistencyForRole(String)",1,12,n/a,7,0,1,3,2
"org.apache.cassandra.auth.CassandraRoleManager.convertLegacyData()",23,1,n/a,50,3,0,19,6
"org.apache.cassandra.auth.CassandraRoleManager.createRole(AuthenticatedUser,RoleResource,RoleOptions)",23,1,n/a,19,0,3,2,2
"org.apache.cassandra.auth.CassandraRoleManager.dropRole(AuthenticatedUser,RoleResource)",8,0,n/a,9,0,2,2,1
"org.apache.cassandra.auth.CassandraRoleManager.escape(String)",1,15,n/a,4,0,1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.getAllRoles()",9,0,n/a,4,2,0,4,1
"org.apache.cassandra.auth.CassandraRoleManager.getCustomOptions(RoleResource)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.getGensaltLogRounds()",3,1,n/a,9,0,0,4,3
"org.apache.cassandra.auth.CassandraRoleManager.getRole(String)",4,5,n/a,21,1,1,3,3
"org.apache.cassandra.auth.CassandraRoleManager.getRoleFromTable(String,SelectStatement,Function<Row, Role>)",10,2,n/a,11,0,3,4,2
"org.apache.cassandra.auth.CassandraRoleManager.getRoles(RoleResource,boolean)",7,3,n/a,11,1,2,6,2
"org.apache.cassandra.auth.CassandraRoleManager.grantRole(AuthenticatedUser,RoleResource,RoleResource)",23,0,n/a,19,0,3,6,3
"org.apache.cassandra.auth.CassandraRoleManager.hasExistingRoles()",8,1,n/a,9,0,0,3,3
"org.apache.cassandra.auth.CassandraRoleManager.hashpw(String)",2,3,n/a,4,0,1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.isExistingRole(RoleResource)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.isSuper(RoleResource)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.CassandraRoleManager.modifyRoleMembership(String,String,String)",5,3,n/a,15,0,3,1,1
"org.apache.cassandra.auth.CassandraRoleManager.optionsToAssignments(Map<Option, Object>)",12,1,n/a,14,3,1,10,5
"org.apache.cassandra.auth.CassandraRoleManager.prepare(String,String,String)",4,2,n/a,11,1,3,3,2
"org.apache.cassandra.auth.CassandraRoleManager.process(String,ConsistencyLevel)",2,9,n/a,13,0,2,3,2
"org.apache.cassandra.auth.CassandraRoleManager.protectedResources()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.CassandraRoleManager.removeAllMembers(String)",11,1,n/a,23,0,1,6,3
"org.apache.cassandra.auth.CassandraRoleManager.revokeRole(AuthenticatedUser,RoleResource,RoleResource)",17,0,n/a,15,0,3,4,2
"org.apache.cassandra.auth.CassandraRoleManager.scheduleSetupTask(Callable<Void>)",9,4,n/a,22,3,1,10,3
"org.apache.cassandra.auth.CassandraRoleManager.setup()",7,0,n/a,28,2,0,9,2
"org.apache.cassandra.auth.CassandraRoleManager.setupDefaultRole()",8,1,n/a,27,2,0,6,3
"org.apache.cassandra.auth.CassandraRoleManager.supportedOptions()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.CassandraRoleManager.validateConfiguration()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.DataResource.DataResource()",0,1,n/a,6,0,0,3,1
"org.apache.cassandra.auth.DataResource.DataResource(String)",0,1,n/a,6,0,1,3,1
"org.apache.cassandra.auth.DataResource.DataResource(String,String)",0,1,n/a,6,0,2,3,1
"org.apache.cassandra.auth.DataResource.applicablePermissions()",1,0,n/a,12,1,0,7,3
"org.apache.cassandra.auth.DataResource.equals(Object)",3,0,n/a,12,0,1,6,5
"org.apache.cassandra.auth.DataResource.exists()",4,0,n/a,16,1,0,8,4
"org.apache.cassandra.auth.DataResource.fromName(String)",7,0,n/a,17,0,1,8,5
"org.apache.cassandra.auth.DataResource.getKeyspace()",2,1,n/a,9,0,0,3,2
"org.apache.cassandra.auth.DataResource.getName()",3,0,n/a,16,1,0,8,4
"org.apache.cassandra.auth.DataResource.getParent()",3,0,n/a,14,1,0,6,3
"org.apache.cassandra.auth.DataResource.getTable()",3,1,n/a,9,0,0,3,2
"org.apache.cassandra.auth.DataResource.hasParent()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.auth.DataResource.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.DataResource.isKeyspaceLevel()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.DataResource.isRootLevel()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.auth.DataResource.isTableLevel()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.auth.DataResource.keyspace(String)",1,2,n/a,10,0,1,1,1
"org.apache.cassandra.auth.DataResource.root()",0,2,n/a,7,0,0,1,1
"org.apache.cassandra.auth.DataResource.table(String,String)",1,2,n/a,11,0,2,1,1
"org.apache.cassandra.auth.DataResource.toString()",3,0,n/a,14,1,0,8,4
"org.apache.cassandra.auth.FunctionResource.FunctionResource()",0,1,n/a,7,0,0,4,1
"org.apache.cassandra.auth.FunctionResource.FunctionResource(String)",0,1,n/a,7,0,1,4,1
"org.apache.cassandra.auth.FunctionResource.FunctionResource(String,String,List<AbstractType<?>>)",0,2,n/a,7,0,3,4,1
"org.apache.cassandra.auth.FunctionResource.applicablePermissions()",7,0,n/a,16,2,0,9,4
"org.apache.cassandra.auth.FunctionResource.argListAsString()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.auth.FunctionResource.argsListFromString(String)",7,1,n/a,7,0,1,4,2
"org.apache.cassandra.auth.FunctionResource.compareTo(FunctionResource)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.FunctionResource.equals(Object)",4,0,n/a,13,0,1,6,6
"org.apache.cassandra.auth.FunctionResource.exists()",6,0,n/a,13,1,0,8,4
"org.apache.cassandra.auth.FunctionResource.fromName(String)",9,0,n/a,18,0,1,9,5
"org.apache.cassandra.auth.FunctionResource.function(String,String,List<AbstractType<?>>)",1,2,n/a,12,0,3,1,1
"org.apache.cassandra.auth.FunctionResource.functionFromCql(String,String,List<Raw>)",5,0,n/a,18,0,3,4,2
"org.apache.cassandra.auth.FunctionResource.getFunctionName()",3,2,n/a,10,0,0,3,2
"org.apache.cassandra.auth.FunctionResource.getKeyspace()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.auth.FunctionResource.getName()",4,0,n/a,16,1,0,8,4
"org.apache.cassandra.auth.FunctionResource.getParent()",3,0,n/a,14,1,0,6,3
"org.apache.cassandra.auth.FunctionResource.hasParent()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.FunctionResource.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.FunctionResource.keyspace(String)",1,2,n/a,11,0,1,1,1
"org.apache.cassandra.auth.FunctionResource.root()",0,2,n/a,7,0,0,1,1
"org.apache.cassandra.auth.FunctionResource.toString()",6,1,n/a,17,1,0,8,4
"org.apache.cassandra.auth.IAuthenticator.SaslNegotiator.evaluateResponse(byte[])",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IAuthenticator.SaslNegotiator.getAuthenticatedUser()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IAuthenticator.SaslNegotiator.isComplete()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IAuthenticator.legacyAuthenticate(Map<String, String>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IAuthenticator.newSaslNegotiator(InetAddress)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IAuthenticator.protectedResources()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IAuthenticator.requireAuthentication()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IAuthenticator.setup()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IAuthenticator.validateConfiguration()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.authorize(AuthenticatedUser,IResource)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.grant(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.list(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.protectedResources()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.revoke(AuthenticatedUser,Set<Permission>,IResource,RoleResource)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.revokeAllFrom(RoleResource)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.revokeAllOn(IResource)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.setup()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IAuthorizer.validateConfiguration()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IInternodeAuthenticator.authenticate(InetAddress,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.auth.IInternodeAuthenticator.validateConfiguration()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IResource.applicablePermissions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IResource.exists()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IResource.getName()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IResource.getParent()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IResource.hasParent()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.alterRole(AuthenticatedUser,RoleResource,RoleOptions)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.alterableOptions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.canLogin(RoleResource)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.createRole(AuthenticatedUser,RoleResource,RoleOptions)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.dropRole(AuthenticatedUser,RoleResource)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.getAllRoles()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.getCustomOptions(RoleResource)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.getRoles(RoleResource,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.grantRole(AuthenticatedUser,RoleResource,RoleResource)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.isExistingRole(RoleResource)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.isSuper(RoleResource)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.protectedResources()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.revokeRole(AuthenticatedUser,RoleResource,RoleResource)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.setup()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.supportedOptions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.IRoleManager.validateConfiguration()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator.decodeCredentials(byte[])",7,1,n/a,37,2,1,19,7
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator.evaluateResponse(byte[])",1,0,n/a,6,0,1,3,1
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator.getAuthenticatedUser()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator.isComplete()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.authenticate(String,String)",5,2,n/a,17,1,2,5,3
"org.apache.cassandra.auth.PasswordAuthenticator.doAuthenticate(String,String,SelectStatement)",15,1,n/a,11,0,3,5,4
"org.apache.cassandra.auth.PasswordAuthenticator.legacyAuthenticate(Map<String, String>)",7,0,n/a,10,0,1,7,3
"org.apache.cassandra.auth.PasswordAuthenticator.newSaslNegotiator(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.prepare(String)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.protectedResources()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.requireAuthentication()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.PasswordAuthenticator.setup()",5,0,n/a,16,1,0,5,2
"org.apache.cassandra.auth.PasswordAuthenticator.validateConfiguration()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.auth.PermissionDetails.PermissionDetails(String,IResource,Permission)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.auth.PermissionDetails.compareTo(PermissionDetails)",7,0,n/a,9,0,1,1,1
"org.apache.cassandra.auth.PermissionDetails.equals(Object)",3,0,n/a,12,0,1,6,5
"org.apache.cassandra.auth.PermissionDetails.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.PermissionDetails.toString()",2,0,n/a,8,0,0,1,1
"org.apache.cassandra.auth.PermissionsCache.PermissionsCache(IAuthorizer)",5,0,n/a,14,1,1,6,2
"org.apache.cassandra.auth.PermissionsCache.getPermissions(AuthenticatedUser,IResource)",4,0,n/a,13,1,2,5,3
"org.apache.cassandra.auth.PermissionsCache.getUpdateInterval()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.PermissionsCache.getValidity()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.PermissionsCache.initCache(LoadingCache<Pair<AuthenticatedUser, IResource>, Set<Permission>>)",18,4,n/a,12,5,1,16,5
"org.apache.cassandra.auth.PermissionsCache.invalidate()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.PermissionsCache.setUpdateInterval(int)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.auth.PermissionsCache.setValidity(int)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.auth.PermissionsCacheMBean.getUpdateInterval()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.PermissionsCacheMBean.getValidity()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.PermissionsCacheMBean.invalidate()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.PermissionsCacheMBean.setUpdateInterval(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.PermissionsCacheMBean.setValidity(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.Resources.chain(IResource)",4,0,n/a,18,1,1,7,3
"org.apache.cassandra.auth.Resources.fromName(String)",14,0,n/a,18,0,1,7,4
"org.apache.cassandra.auth.Resources.toString(List<Object>)",6,0,n/a,14,1,1,7,3
"org.apache.cassandra.auth.RoleOptions.getCustomOptions()",2,0,n/a,12,0,0,1,1
"org.apache.cassandra.auth.RoleOptions.getLogin()",2,0,n/a,8,0,0,1,1
"org.apache.cassandra.auth.RoleOptions.getOptions()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.auth.RoleOptions.getPassword()",2,0,n/a,8,0,0,1,1
"org.apache.cassandra.auth.RoleOptions.getSuperuser()",2,0,n/a,8,0,0,1,1
"org.apache.cassandra.auth.RoleOptions.isEmpty()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.auth.RoleOptions.setOption(Option,Object)",5,0,n/a,12,0,2,3,2
"org.apache.cassandra.auth.RoleOptions.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.RoleOptions.validate()",24,0,n/a,42,2,0,17,9
"org.apache.cassandra.auth.RoleResource.RoleResource()",0,1,n/a,5,0,0,2,1
"org.apache.cassandra.auth.RoleResource.RoleResource(String)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.auth.RoleResource.applicablePermissions()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.auth.RoleResource.compareTo(RoleResource)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.auth.RoleResource.equals(Object)",2,0,n/a,10,0,1,6,4
"org.apache.cassandra.auth.RoleResource.exists()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.auth.RoleResource.fromName(String)",6,0,n/a,15,0,1,6,4
"org.apache.cassandra.auth.RoleResource.getName()",1,0,n/a,7,0,0,1,2
"org.apache.cassandra.auth.RoleResource.getParent()",2,0,n/a,9,0,0,3,2
"org.apache.cassandra.auth.RoleResource.getRoleName()",2,2,n/a,10,0,0,3,2
"org.apache.cassandra.auth.RoleResource.hasParent()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.RoleResource.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.auth.RoleResource.role(String)",1,3,n/a,9,0,1,1,1
"org.apache.cassandra.auth.RoleResource.root()",0,2,n/a,7,0,0,1,1
"org.apache.cassandra.auth.RoleResource.toString()",1,0,n/a,5,0,0,1,2
"org.apache.cassandra.auth.Roles.getRoles(RoleResource)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.auth.Roles.hasSuperuserStatus(RoleResource)",3,0,n/a,15,0,1,5,3
"org.apache.cassandra.auth.RolesCache.RolesCache(IRoleManager)",5,0,n/a,14,1,1,6,2
"org.apache.cassandra.auth.RolesCache.getRoles(RoleResource)",3,0,n/a,13,1,1,5,3
"org.apache.cassandra.auth.RolesCache.getUpdateInterval()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.RolesCache.getValidity()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.RolesCache.initCache(LoadingCache<RoleResource, Set<RoleResource>>)",20,4,n/a,11,5,1,17,5
"org.apache.cassandra.auth.RolesCache.invalidate()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.auth.RolesCache.setUpdateInterval(int)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.auth.RolesCache.setValidity(int)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.auth.RolesCacheMBean.getUpdateInterval()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.RolesCacheMBean.getValidity()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.RolesCacheMBean.invalidate()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.auth.RolesCacheMBean.setUpdateInterval(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.auth.RolesCacheMBean.setValidity(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.batchlog.Batch.Batch(UUID,long,Collection<Mutation>,Collection<ByteBuffer>)",0,2,n/a,7,0,4,4,1
"org.apache.cassandra.batchlog.Batch.Serializer.decodeMutations(DataInputPlus,int)",5,1,n/a,11,1,2,8,2
"org.apache.cassandra.batchlog.Batch.Serializer.deserialize(DataInputPlus,int)",6,21,n/a,12,0,2,3,2
"org.apache.cassandra.batchlog.Batch.Serializer.readEncodedMutations(DataInputPlus)",4,1,n/a,8,0,1,7,2
"org.apache.cassandra.batchlog.Batch.Serializer.serialize(Batch,DataOutputPlus,int)",8,22,n/a,12,1,3,7,2
"org.apache.cassandra.batchlog.Batch.Serializer.serializedSize(Batch,int)",7,19,n/a,14,1,2,9,2
"org.apache.cassandra.batchlog.Batch.createLocal(UUID,long,Collection<Mutation>)",2,4,n/a,7,0,3,1,1
"org.apache.cassandra.batchlog.Batch.createRemote(UUID,long,Collection<ByteBuffer>)",2,1,n/a,9,0,3,1,1
"org.apache.cassandra.batchlog.Batch.size()",2,1,n/a,7,0,0,1,1
"org.apache.cassandra.batchlog.BatchRemoveVerbHandler.doVerb(MessageIn<UUID>,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.batchlog.BatchStoreVerbHandler.doVerb(MessageIn<Batch>,int)",4,0,n/a,5,0,2,2,1
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter.EndpointFilter(String,Multimap<String, InetAddress>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter.filter()",36,1,n/a,46,1,0,23,9
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter.getRandomInt(int)",2,1,n/a,5,0,1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter.isValid(InetAddress)",3,1,n/a,5,0,1,1,2
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayWriteResponseHandler.ReplayWriteResponseHandler(Collection<InetAddress>)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayWriteResponseHandler.response(MessageIn<T>)",3,1,n/a,7,0,1,3,2
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayWriteResponseHandler.totalBlockFor()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayingBatch(UUID,int,List<ByteBuffer>)",4,1,n/a,7,0,3,4,1
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.addMutation(Mutation)",5,1,n/a,11,0,1,5,4
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.addMutations(int,List<ByteBuffer>)",4,1,n/a,13,2,2,6,2
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.finish(Set<InetAddress>)",7,1,n/a,19,2,1,10,3
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.gcgs(Collection<Mutation>)",2,2,n/a,7,0,1,4,2
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.replay(RateLimiter,Set<InetAddress>)",8,1,n/a,12,0,2,9,3
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.sendReplays(List<Mutation>,long,Set<InetAddress>)",4,1,n/a,13,1,3,6,3
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.sendSingleReplayMutation(Mutation,long,Set<InetAddress>)",22,1,n/a,39,2,3,17,6
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.writeHintsForUndeliveredEndpoints(int,Set<InetAddress>)",10,1,n/a,18,2,2,11,4
"org.apache.cassandra.batchlog.BatchlogManager.calculatePageSize(ColumnFamilyStore)",3,1,n/a,8,0,1,4,2
"org.apache.cassandra.batchlog.BatchlogManager.countAllBatches()",5,0,n/a,9,0,0,5,3
"org.apache.cassandra.batchlog.BatchlogManager.finishAndClearBatches(ArrayList<ReplayingBatch>,Set<InetAddress>,Set<UUID>)",4,2,n/a,11,1,3,5,2
"org.apache.cassandra.batchlog.BatchlogManager.forceBatchlogReplay()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.batchlog.BatchlogManager.getBatchlogTimeout()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.batchlog.BatchlogManager.getTotalBatchesReplayed()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.batchlog.BatchlogManager.performInitialReplay()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.batchlog.BatchlogManager.processBatchlogEntries(UntypedResultSet,int,RateLimiter)",17,1,n/a,43,3,3,21,5
"org.apache.cassandra.batchlog.BatchlogManager.remove(UUID)",6,4,n/a,8,0,1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.replayFailedBatches()",17,3,n/a,27,1,0,15,3
"org.apache.cassandra.batchlog.BatchlogManager.shutdown()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.batchlog.BatchlogManager.start()",5,1,n/a,16,1,0,5,2
"org.apache.cassandra.batchlog.BatchlogManager.startBatchlogReplay()",1,3,n/a,5,0,0,1,1
"org.apache.cassandra.batchlog.BatchlogManager.store(Batch)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.batchlog.BatchlogManager.store(Batch,boolean)",11,3,n/a,23,2,2,9,4
"org.apache.cassandra.batchlog.BatchlogManagerMBean.countAllBatches()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.batchlog.BatchlogManagerMBean.forceBatchlogReplay()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.batchlog.BatchlogManagerMBean.getTotalBatchesReplayed()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.LegacyBatchlogMigrator()",0,0,n/a,4,0,0,0,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.apply(Row,long)",19,2,n/a,23,1,2,17,6
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.asyncRemoveFromBatchlog(Collection<InetAddress>,UUID)",8,1,n/a,15,1,2,5,2
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.getRemoveMutation(UUID)",5,1,n/a,8,0,1,1,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.getSerializedMutations(int,Collection<Mutation>)",6,1,n/a,14,1,2,6,3
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.getStoreMutation(Batch,int)",8,2,n/a,10,0,2,1,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.handleLegacyMutation(Mutation)",7,1,n/a,7,0,1,3,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.isLegacyBatchlogMutation(Mutation)",3,1,n/a,6,0,1,1,2
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.migrate()",10,1,n/a,22,1,0,13,5
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.store(Batch,int)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator.syncWriteToBatchlog(WriteResponseHandler<?>,Batch,Collection<InetAddress>)",8,1,n/a,13,1,3,4,2
"org.apache.cassandra.cache.AutoSavingCache.AutoSavingCache(ICache<K, V>,CacheType,CacheSerializer<K, V>)",2,0,n/a,6,0,3,3,1
"org.apache.cassandra.cache.AutoSavingCache.CacheSerializer.deserialize(DataInputPlus,ColumnFamilyStore)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cache.AutoSavingCache.CacheSerializer.serialize(K,DataOutputPlus,ColumnFamilyStore)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cache.AutoSavingCache.IStreamFactory.getInputStream(File,File)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cache.AutoSavingCache.IStreamFactory.getOutputStream(File,File)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cache.AutoSavingCache.Writer.Writer(int)",7,1,n/a,29,1,1,15,6
"org.apache.cassandra.cache.AutoSavingCache.Writer.cacheType()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.cache.AutoSavingCache.Writer.deleteOldCacheFiles()",17,1,n/a,25,3,0,12,8
"org.apache.cassandra.cache.AutoSavingCache.Writer.getCompactionInfo()",2,6,n/a,6,0,0,1,1
"org.apache.cassandra.cache.AutoSavingCache.Writer.saveCache()",32,1,n/a,52,2,0,34,10
"org.apache.cassandra.cache.AutoSavingCache.Writer.tempCacheFiles()",9,1,n/a,7,0,0,3,1
"org.apache.cassandra.cache.AutoSavingCache.getCacheCrcPath(String)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.cache.AutoSavingCache.getCacheDataPath(String)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.cache.AutoSavingCache.getWriter(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cache.AutoSavingCache.loadSaved()",53,1,n/a,81,5,0,43,18
"org.apache.cassandra.cache.AutoSavingCache.loadSavedAsync()",15,0,n/a,10,2,0,9,2
"org.apache.cassandra.cache.AutoSavingCache.scheduleSaving(int,int)",4,0,n/a,4,3,2,7,3
"org.apache.cassandra.cache.AutoSavingCache.setStreamFactory(IStreamFactory)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.cache.AutoSavingCache.submitWrite(int)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.cache.CacheKey.CacheKey(Pair<String, String>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.CacheProvider.create()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.ConcurrentLinkedHashCache(ConcurrentLinkedHashMap<K, V>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.capacity()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.clear()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.containsKey(K)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.create(long)",4,0,n/a,6,2,1,4,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.create(long,EntryWeigher<K, V>)",6,1,n/a,12,0,2,2,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.get(K)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.hotKeyIterator(int)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.isEmpty()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.keyIterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.put(K,V)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.putIfAbsent(K,V)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.remove(K)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.replace(K,V,V)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.setCapacity(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.ConcurrentLinkedHashCache.weightedSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.CounterCacheKey.CounterCacheKey(Pair<String, String>,ByteBuffer,ByteBuffer)",3,2,n/a,6,0,3,3,1
"org.apache.cassandra.cache.CounterCacheKey.create(Pair<String, String>,ByteBuffer,Clustering,ColumnDefinition,CellPath)",2,0,n/a,4,0,5,1,1
"org.apache.cassandra.cache.CounterCacheKey.equals(Object)",3,0,n/a,12,0,1,6,5
"org.apache.cassandra.cache.CounterCacheKey.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cache.CounterCacheKey.makeCellName(Clustering,ColumnDefinition,CellPath)",6,1,n/a,12,0,3,13,5
"org.apache.cassandra.cache.CounterCacheKey.toString()",5,0,n/a,8,0,0,1,1
"org.apache.cassandra.cache.CounterCacheKey.unsharedHeapSize()",2,0,n/a,6,0,0,1,1
"org.apache.cassandra.cache.ICache.capacity()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cache.ICache.clear()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cache.ICache.containsKey(K)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cache.ICache.get(K)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cache.ICache.hotKeyIterator(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cache.ICache.keyIterator()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cache.ICache.put(K,V)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cache.ICache.putIfAbsent(K,V)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cache.ICache.remove(K)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cache.ICache.replace(K,V,V)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cache.ICache.setCapacity(long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cache.ICache.size()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cache.ICache.weightedSize()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cache.IMeasurableMemory.unsharedHeapSize()",n/a,0,6,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cache.InstrumentingCache.InstrumentingCache(String,ICache<K, V>)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.cache.InstrumentingCache.clear()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.cache.InstrumentingCache.containsKey(K)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.InstrumentingCache.get(K)",3,1,n/a,8,0,1,5,2
"org.apache.cassandra.cache.InstrumentingCache.getCapacity()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.cache.InstrumentingCache.getInternal(K)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cache.InstrumentingCache.getMetrics()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.InstrumentingCache.hotKeyIterator(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.InstrumentingCache.keyIterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.InstrumentingCache.put(K,V)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cache.InstrumentingCache.putIfAbsent(K,V)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cache.InstrumentingCache.remove(K)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cache.InstrumentingCache.replace(K,V,V)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cache.InstrumentingCache.setCapacity(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.InstrumentingCache.size()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cache.InstrumentingCache.weightedSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.KeyCacheKey.KeyCacheKey(Pair<String, String>,Descriptor,ByteBuffer)",2,5,n/a,7,0,3,4,1
"org.apache.cassandra.cache.KeyCacheKey.equals(Object)",5,0,n/a,8,0,1,6,6
"org.apache.cassandra.cache.KeyCacheKey.hashCode()",3,0,n/a,8,0,0,4,1
"org.apache.cassandra.cache.KeyCacheKey.toString()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.KeyCacheKey.unsharedHeapSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.capacity()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.clear()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.containsKey(RowCacheKey)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.get(RowCacheKey)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.hotKeyIterator(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.keyIterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.put(RowCacheKey,IRowCacheEntry)",0,0,n/a,3,0,2,0,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.putIfAbsent(RowCacheKey,IRowCacheEntry)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.remove(RowCacheKey)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.replace(RowCacheKey,IRowCacheEntry,IRowCacheEntry)",0,0,n/a,4,0,3,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.setCapacity(long)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.size()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache.weightedSize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.NopCacheProvider.create()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.OHCProvider.KeySerializer.deserialize(ByteBuffer)",8,0,n/a,19,1,1,10,2
"org.apache.cassandra.cache.OHCProvider.KeySerializer.serialize(RowCacheKey,ByteBuffer)",6,0,n/a,16,1,2,7,2
"org.apache.cassandra.cache.OHCProvider.KeySerializer.serializedSize(RowCacheKey)",2,0,n/a,7,0,1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.OHCacheAdapter(OHCache<RowCacheKey, IRowCacheEntry>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.capacity()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.clear()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.containsKey(RowCacheKey)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.get(RowCacheKey)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.hotKeyIterator(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.keyIterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.put(RowCacheKey,IRowCacheEntry)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.putIfAbsent(RowCacheKey,IRowCacheEntry)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.remove(RowCacheKey)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.replace(RowCacheKey,IRowCacheEntry,IRowCacheEntry)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.setCapacity(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter.weightedSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.OHCProvider.ValueSerializer.deserialize(ByteBuffer)",6,0,n/a,16,1,1,7,3
"org.apache.cassandra.cache.OHCProvider.ValueSerializer.serialize(IRowCacheEntry,ByteBuffer)",5,0,n/a,17,1,2,8,3
"org.apache.cassandra.cache.OHCProvider.ValueSerializer.serializedSize(IRowCacheEntry)",3,0,n/a,9,0,1,5,2
"org.apache.cassandra.cache.OHCProvider.create()",8,0,n/a,9,0,0,3,1
"org.apache.cassandra.cache.RefCountedMemory.RefCountedMemory(long)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cache.RefCountedMemory.close()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.cache.RefCountedMemory.copy(long)",4,0,n/a,6,0,1,3,1
"org.apache.cassandra.cache.RefCountedMemory.free()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.cache.RefCountedMemory.reference()",2,0,n/a,15,1,0,6,4
"org.apache.cassandra.cache.RefCountedMemory.unreference()",2,1,n/a,6,0,0,2,2
"org.apache.cassandra.cache.RowCacheKey.RowCacheKey(Pair<String, String>,ByteBuffer)",2,2,n/a,6,0,2,3,1
"org.apache.cassandra.cache.RowCacheKey.RowCacheKey(Pair<String, String>,DecoratedKey)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cache.RowCacheKey.RowCacheKey(Pair<String, String>,byte[])",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.cache.RowCacheKey.equals(Object)",4,0,n/a,8,0,1,6,5
"org.apache.cassandra.cache.RowCacheKey.hashCode()",2,0,n/a,7,0,0,3,2
"org.apache.cassandra.cache.RowCacheKey.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cache.RowCacheKey.unsharedHeapSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.RowCacheSentinel.RowCacheSentinel()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cache.RowCacheSentinel.RowCacheSentinel(long)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.RowCacheSentinel.equals(Object)",0,0,n/a,7,0,1,4,2
"org.apache.cassandra.cache.RowCacheSentinel.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cache.SerializingCache.SerializingCache(long,Weigher<RefCountedMemory>,ISerializer<V>)",8,1,n/a,4,2,3,4,1
"org.apache.cassandra.cache.SerializingCache.capacity()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.SerializingCache.clear()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.SerializingCache.containsKey(K)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.SerializingCache.create(long,ISerializer<V>)",3,0,n/a,6,2,2,4,1
"org.apache.cassandra.cache.SerializingCache.create(long,Weigher<RefCountedMemory>,ISerializer<V>)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.cache.SerializingCache.deserialize(RefCountedMemory)",3,2,n/a,12,1,1,4,2
"org.apache.cassandra.cache.SerializingCache.get(K)",4,0,n/a,17,1,1,8,3
"org.apache.cassandra.cache.SerializingCache.hotKeyIterator(int)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.SerializingCache.isEmpty()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.SerializingCache.keyIterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.SerializingCache.put(K,V)",4,0,n/a,19,1,2,10,4
"org.apache.cassandra.cache.SerializingCache.putIfAbsent(K,V)",4,0,n/a,21,1,2,11,4
"org.apache.cassandra.cache.SerializingCache.remove(K)",2,0,n/a,7,0,1,3,2
"org.apache.cassandra.cache.SerializingCache.replace(K,V,V)",10,0,n/a,35,1,3,22,7
"org.apache.cassandra.cache.SerializingCache.serialize(V)",8,3,n/a,25,1,1,12,4
"org.apache.cassandra.cache.SerializingCache.setCapacity(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cache.SerializingCache.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.SerializingCache.weightedSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cache.SerializingCacheProvider.RowCacheSerializer.deserialize(DataInputPlus)",4,8,n/a,7,0,1,4,2
"org.apache.cassandra.cache.SerializingCacheProvider.RowCacheSerializer.serialize(IRowCacheEntry,DataOutputPlus)",3,8,n/a,10,0,2,6,2
"org.apache.cassandra.cache.SerializingCacheProvider.RowCacheSerializer.serializedSize(IRowCacheEntry)",3,8,n/a,9,0,1,5,2
"org.apache.cassandra.cache.SerializingCacheProvider.create()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.client.RingCache.RingCache(Configuration)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.client.RingCache.getEndpoint(ByteBuffer)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.client.RingCache.getEndpoint(Range<Token>)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.client.RingCache.getRange(ByteBuffer)",4,1,n/a,9,0,1,5,3
"org.apache.cassandra.client.RingCache.refreshEndpointMap()",18,1,n/a,36,4,0,15,7
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.FutureTask(Callable<T>)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.FutureTask(Runnable,T)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.cancel(boolean)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.get()",2,0,n/a,8,0,0,5,2
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.get(long,TimeUnit)",3,0,n/a,9,0,2,6,3
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.isCancelled()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.isDone()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask.run()",6,1,n/a,19,1,0,8,2
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.TraceSessionFutureTask.TraceSessionFutureTask(Callable<T>,TraceState)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.TraceSessionFutureTask.TraceSessionFutureTask(Runnable,T,TraceState)",1,1,n/a,5,0,3,2,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.TraceSessionFutureTask.run()",4,1,n/a,13,1,0,5,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.addTask(FutureTask<?>)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.execute(Runnable)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.execute(Runnable,TraceState)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.invokeAll(Collection<? extends Callable<T>>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.invokeAll(Collection<? extends Callable<T>>,long,TimeUnit)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.invokeAny(Collection<? extends Callable<T>>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.invokeAny(Collection<? extends Callable<T>>,long,TimeUnit)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.newTaskFor(Callable<T>)",4,1,n/a,12,1,1,7,4
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.newTaskFor(Runnable,T)",2,3,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.newTaskFor(Runnable,T,TraceState)",2,2,n/a,12,1,3,7,4
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.onCompletion()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.submit(Callable<T>)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.submit(FutureTask<T>)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.submit(Runnable)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.submit(Runnable,T)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.DebuggableScheduledThreadPoolExecutor(String)",2,4,n/a,5,0,1,2,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.DebuggableScheduledThreadPoolExecutor(int,String,int)",3,2,n/a,5,0,3,2,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.DebuggableScheduledThreadPoolExecutor(int,ThreadFactory)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.UncomplainingRunnable.UncomplainingRunnable(Runnable)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.UncomplainingRunnable.run()",3,0,n/a,12,1,0,4,2
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.afterExecute(Runnable,Throwable)",2,0,n/a,7,0,2,2,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.scheduleAtFixedRate(Runnable,long,long,TimeUnit)",2,0,n/a,6,0,4,1,1
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.scheduleWithFixedDelay(Runnable,long,long,TimeUnit)",2,2,n/a,5,0,4,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(String,int)",3,2,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory)",3,3,n/a,11,0,6,3,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.DebuggableThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory)",1,1,n/a,4,0,5,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper.TraceSessionWrapper(Callable<T>)",2,3,n/a,5,0,1,2,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper.TraceSessionWrapper(Runnable,TraceState)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper.reset()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper.setupContext()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.afterExecute(Runnable,Throwable)",3,0,n/a,7,0,2,3,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.beforeExecute(Thread,Runnable)",2,0,n/a,7,0,2,3,2
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createCachedThreadpoolWithMaxSize(String)",3,1,n/a,14,0,1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createWithFixedPoolSize(String,int)",1,3,n/a,12,0,2,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.createWithMaximumPoolSize(String,int,int,TimeUnit)",3,1,n/a,14,0,4,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(Runnable)",4,2,n/a,8,0,1,1,3
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(Runnable,TraceState)",2,0,n/a,6,0,2,1,3
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.extractThrowable(Runnable)",5,2,n/a,31,2,1,7,6
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.handleOrLog(Throwable)",5,3,n/a,10,0,1,3,2
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.logExceptionsAfterExecute(Runnable,Throwable)",4,1,n/a,15,0,2,5,4
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.maybeExecuteImmediately(Runnable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.maybeResetTraceSessionWrapper(Runnable)",1,2,n/a,10,1,1,3,2
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.newTaskFor(Callable<T>)",3,0,n/a,9,1,1,3,3
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.newTaskFor(Runnable,T)",4,0,n/a,9,1,2,3,3
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onFinalAccept(Runnable)",0,1,n/a,1,0,1,0,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onFinalRejection(Runnable)",0,1,n/a,1,0,1,0,1
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.onInitialRejection(Runnable)",0,1,n/a,1,0,1,0,1
"org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutor.JMXConfigurableThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",1,1,n/a,9,0,6,1,1
"org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutorMBean.getCorePoolSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutorMBean.setCorePoolSize(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(NamedThreadFactory,String)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(Stage)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String,String)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(String,int)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",7,4,n/a,22,1,7,8,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.JMXEnabledThreadPoolExecutor(int,long,TimeUnit,BlockingQueue<Runnable>,NamedThreadFactory,String)",1,7,n/a,9,0,6,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getCoreThreads()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getCurrentlyBlockedTasks()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getMaximumThreads()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.getTotalBlockedTasks()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onFinalAccept(Runnable)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onFinalRejection(Runnable)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.onInitialRejection(Runnable)",2,0,n/a,6,0,1,2,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.setCoreThreads(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.setMaximumThreads(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.shutdown()",3,3,n/a,11,1,0,3,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.shutdownNow()",3,0,n/a,11,1,0,3,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor.unregisterMBean()",5,2,n/a,13,1,0,4,2
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutorMBean.getCoreThreads()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutorMBean.getMaximumThreads()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutorMBean.setCoreThreads(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutorMBean.setMaximumThreads(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.concurrent.NamedThreadFactory.NamedThreadFactory(String)",1,12,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.NamedThreadFactory.NamedThreadFactory(String,int)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.NamedThreadFactory.NamedThreadFactory(String,int,ClassLoader,ThreadGroup)",0,3,n/a,7,0,4,4,1
"org.apache.cassandra.concurrent.NamedThreadFactory.newThread(Runnable)",5,0,n/a,10,0,1,7,2
"org.apache.cassandra.concurrent.SEPExecutor.SEPExecutor(SharedExecutorPool,int,int,String,String)",3,0,n/a,8,0,5,5,1
"org.apache.cassandra.concurrent.SEPExecutor.addTask(FutureTask<?>)",17,1,n/a,46,2,1,19,7
"org.apache.cassandra.concurrent.SEPExecutor.awaitTermination(long,TimeUnit)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.concurrent.SEPExecutor.combine(int,int)",0,2,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.SEPExecutor.getActiveCount()",2,3,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPExecutor.getCompletedTasks()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPExecutor.getPendingTasks()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPExecutor.isShutdown()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPExecutor.isTerminated()",1,1,n/a,4,0,0,1,2
"org.apache.cassandra.concurrent.SEPExecutor.maybeExecuteImmediately(Runnable)",6,0,n/a,23,2,1,7,2
"org.apache.cassandra.concurrent.SEPExecutor.maybeSchedule()",4,1,n/a,9,0,0,4,3
"org.apache.cassandra.concurrent.SEPExecutor.onCompletion()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPExecutor.returnWorkPermit()",4,1,n/a,11,1,0,5,3
"org.apache.cassandra.concurrent.SEPExecutor.shutdown()",4,1,n/a,9,0,0,5,2
"org.apache.cassandra.concurrent.SEPExecutor.shutdownNow()",5,0,n/a,8,0,0,5,2
"org.apache.cassandra.concurrent.SEPExecutor.takeTaskPermit()",6,1,n/a,18,2,0,9,6
"org.apache.cassandra.concurrent.SEPExecutor.takeWorkPermit(boolean)",7,3,n/a,19,2,1,11,9
"org.apache.cassandra.concurrent.SEPExecutor.taskPermits(long)",0,5,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.SEPExecutor.updateTaskPermits(long,int)",0,2,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.SEPExecutor.updateWorkPermits(long,int)",0,1,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.SEPExecutor.workPermits(long)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.SEPWorker.SEPWorker(Long,Work,SharedExecutorPool)",4,0,n/a,9,0,3,6,1
"org.apache.cassandra.concurrent.SEPWorker.Work.Work()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.Work(SEPExecutor)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.canAssign(boolean)",1,1,n/a,7,0,1,1,3
"org.apache.cassandra.concurrent.SEPWorker.Work.isAssigned()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.isSpinning()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.isStop()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.isStopped()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPWorker.Work.isWorking()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPWorker.assign(Work,boolean)",12,4,n/a,28,2,2,13,8
"org.apache.cassandra.concurrent.SEPWorker.doWaitSpin()",11,1,n/a,28,0,0,18,3
"org.apache.cassandra.concurrent.SEPWorker.isSpinning()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPWorker.isStopped()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.concurrent.SEPWorker.maybeStop(long,long)",7,1,n/a,34,2,2,10,8
"org.apache.cassandra.concurrent.SEPWorker.run()",26,0,n/a,84,3,0,41,19
"org.apache.cassandra.concurrent.SEPWorker.selfAssign()",7,2,n/a,23,2,0,11,5
"org.apache.cassandra.concurrent.SEPWorker.startSpinning()",3,1,n/a,9,0,0,3,1
"org.apache.cassandra.concurrent.SEPWorker.stop()",3,2,n/a,4,0,0,1,2
"org.apache.cassandra.concurrent.SEPWorker.stopSpinning()",2,1,n/a,9,0,0,4,3
"org.apache.cassandra.concurrent.SharedExecutorPool.SharedExecutorPool(String)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.SharedExecutorPool.maybeStartSpinningWorker()",3,0,n/a,8,0,0,3,3
"org.apache.cassandra.concurrent.SharedExecutorPool.newExecutor(int,int,String,String)",2,1,n/a,6,0,4,3,1
"org.apache.cassandra.concurrent.SharedExecutorPool.schedule(Work)",7,1,n/a,13,0,1,6,5
"org.apache.cassandra.concurrent.Stage.getJmxName()",5,8,n/a,9,1,0,4,2
"org.apache.cassandra.concurrent.Stage.getJmxType()",1,6,n/a,22,1,0,17,4
"org.apache.cassandra.concurrent.Stage.jmxEnabledStages()",4,2,n/a,4,2,0,2,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.ExecuteOnlyExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory,RejectedExecutionHandler)",1,1,n/a,4,0,7,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.execute(Runnable,TraceState)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.maybeExecuteImmediately(Runnable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.submit(Callable<T>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.submit(Runnable)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor.submit(Runnable,T)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.concurrent.StageManager.getStage(Stage)",1,33,n/a,8,0,1,1,1
"org.apache.cassandra.concurrent.StageManager.multiThreadedLowSignalStage(Stage,int)",3,5,n/a,4,0,2,1,1
"org.apache.cassandra.concurrent.StageManager.multiThreadedStage(Stage,int)",5,2,n/a,9,0,2,1,1
"org.apache.cassandra.concurrent.StageManager.shutdownNow()",3,2,n/a,10,1,0,2,2
"org.apache.cassandra.concurrent.StageManager.tracingExecutor()",7,1,n/a,4,2,0,3,1
"org.apache.cassandra.concurrent.TracingAwareExecutorService.execute(Runnable,TraceState)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.concurrent.TracingAwareExecutorService.maybeExecuteImmediately(Runnable)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.config.CFMetaData.Builder.Builder(String,String,boolean,boolean,boolean,boolean,boolean)",1,2,n/a,11,0,7,8,1
"org.apache.cassandra.config.CFMetaData.Builder.addClusteringColumn(ColumnIdentifier,AbstractType)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.config.CFMetaData.Builder.addClusteringColumn(String,AbstractType)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addPartitionKey(ColumnIdentifier,AbstractType)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.config.CFMetaData.Builder.addPartitionKey(String,AbstractType)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addRegularColumn(ColumnIdentifier,AbstractType)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.config.CFMetaData.Builder.addRegularColumn(String,AbstractType)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.config.CFMetaData.Builder.addStaticColumn(ColumnIdentifier,AbstractType)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.config.CFMetaData.Builder.addStaticColumn(String,AbstractType)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.config.CFMetaData.Builder.build()",21,36,n/a,35,1,0,21,7
"org.apache.cassandra.config.CFMetaData.Builder.create(String,String)",1,29,n/a,4,0,2,1,1
"org.apache.cassandra.config.CFMetaData.Builder.create(String,String,boolean,boolean,boolean)",1,5,n/a,4,0,5,1,1
"org.apache.cassandra.config.CFMetaData.Builder.create(String,String,boolean,boolean,boolean,boolean)",1,2,n/a,4,0,6,1,1
"org.apache.cassandra.config.CFMetaData.Builder.createDense(String,String,boolean,boolean)",1,3,n/a,4,0,4,1,1
"org.apache.cassandra.config.CFMetaData.Builder.createSuper(String,String,boolean)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.config.CFMetaData.Builder.createView(String,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.config.CFMetaData.Builder.hasRegulars()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.Builder.usedColumnNames()",9,0,n/a,13,0,0,10,5
"org.apache.cassandra.config.CFMetaData.Builder.withId(UUID)",0,3,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.Builder.withPartitioner(IPartitioner)",0,3,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.CFMetaData(String,String,UUID,boolean,boolean,boolean,boolean,boolean,List<ColumnDefinition>,List<ColumnDefinition>,PartitionColumns,IPartitioner)",17,4,n/a,48,0,12,32,6
"org.apache.cassandra.config.CFMetaData.DroppedColumn.DroppedColumn(String,AbstractType<?>,long)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.config.CFMetaData.DroppedColumn.equals(Object)",2,0,n/a,10,0,1,6,5
"org.apache.cassandra.config.CFMetaData.DroppedColumn.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.config.CFMetaData.DroppedColumn.toString()",5,0,n/a,9,0,0,1,1
"org.apache.cassandra.config.CFMetaData.Serializer.deserialize(DataInputPlus,int)",4,3,n/a,13,1,2,6,2
"org.apache.cassandra.config.CFMetaData.Serializer.serialize(CFMetaData,DataOutputPlus,int)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.config.CFMetaData.Serializer.serializedSize(CFMetaData,int)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.config.CFMetaData.addColumnDefinition(ColumnDefinition)",4,2,n/a,6,0,1,3,2
"org.apache.cassandra.config.CFMetaData.addOrReplaceColumnDefinition(ColumnDefinition)",17,2,n/a,33,1,1,23,8
"org.apache.cassandra.config.CFMetaData.allColumns()",1,11,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.allColumnsInSelectOrder()",17,3,n/a,8,2,0,8,8
"org.apache.cassandra.config.CFMetaData.apply(CFMetaData)",6,1,n/a,27,0,1,15,2
"org.apache.cassandra.config.CFMetaData.bloomFilterFpChance(double)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.caching(CachingParams)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.clusteringColumns()",0,29,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.comment(String)",3,6,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.compactValueColumn()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.compaction(CompactionParams)",3,5,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.compile(String,String)",16,26,n/a,15,0,2,4,1
"org.apache.cassandra.config.CFMetaData.compression(CompressionParams)",3,2,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.copy()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.copy(IPartitioner)",5,0,n/a,16,0,1,1,1
"org.apache.cassandra.config.CFMetaData.copy(List<ColumnDefinition>)",4,7,n/a,7,0,1,4,2
"org.apache.cassandra.config.CFMetaData.copy(PartitionColumns)",4,7,n/a,7,0,1,4,2
"org.apache.cassandra.config.CFMetaData.copy(UUID)",10,8,n/a,22,0,1,1,1
"org.apache.cassandra.config.CFMetaData.copyOpts(CFMetaData,CFMetaData)",5,2,n/a,8,0,2,1,1
"org.apache.cassandra.config.CFMetaData.crcCheckChance(double)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.create(String,String,UUID,boolean,boolean,boolean,boolean,boolean,List<ColumnDefinition>,IPartitioner)",10,1,n/a,44,2,10,17,5
"org.apache.cassandra.config.CFMetaData.createCompactionStrategy(String)",5,0,n/a,8,0,1,5,3
"org.apache.cassandra.config.CFMetaData.createCompactionStrategyInstance(ColumnFamilyStore,CompactionParams)",5,2,n/a,14,1,2,4,2
"org.apache.cassandra.config.CFMetaData.createFake(String,String)",3,2,n/a,9,0,2,1,1
"org.apache.cassandra.config.CFMetaData.dcLocalReadRepairChance(double)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.decorateKey(ByteBuffer)",1,21,n/a,4,0,1,1,1
"org.apache.cassandra.config.CFMetaData.defaultTimeToLive(int)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.droppedColumns(Map<ByteBuffer, DroppedColumn>)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.equals(Object)",11,1,n/a,20,0,1,6,13
"org.apache.cassandra.config.CFMetaData.extensions(Map<String, ByteBuffer>)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.extractTypes(List<ColumnDefinition>)",3,4,n/a,7,0,1,4,2
"org.apache.cassandra.config.CFMetaData.flags()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.flagsFromStrings(Set<String>)",5,1,n/a,7,0,1,1,1
"org.apache.cassandra.config.CFMetaData.flagsToStrings(Set<Flag>)",5,0,n/a,7,0,1,1,1
"org.apache.cassandra.config.CFMetaData.gcGraceSeconds(int)",3,8,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.generateLegacyCfId(String,String)",4,3,n/a,10,0,2,1,1
"org.apache.cassandra.config.CFMetaData.getColumnDefinition(ByteBuffer)",1,47,n/a,8,0,1,1,1
"org.apache.cassandra.config.CFMetaData.getColumnDefinition(ColumnIdentifier)",1,25,n/a,7,0,1,1,1
"org.apache.cassandra.config.CFMetaData.getColumnDefinitionNameComparator(Kind)",3,1,n/a,6,0,1,1,5
"org.apache.cassandra.config.CFMetaData.getColumnMetadata()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.getDroppedColumnDefinition(ByteBuffer)",2,5,n/a,15,0,1,5,3
"org.apache.cassandra.config.CFMetaData.getDroppedColumns()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.getIndexes()",0,16,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.getKeyValidator()",0,15,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.getKeyValidatorAsClusteringComparator()",2,7,n/a,8,0,0,3,2
"org.apache.cassandra.config.CFMetaData.getParentColumnFamilyName()",2,0,n/a,8,0,0,1,2
"org.apache.cassandra.config.CFMetaData.getTriggers()",0,21,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.hasCollectionColumns()",2,1,n/a,7,0,0,4,4
"org.apache.cassandra.config.CFMetaData.hasComplexColumns()",2,0,n/a,7,0,0,4,3
"org.apache.cassandra.config.CFMetaData.hasDroppedCollectionColumns()",3,1,n/a,7,0,0,4,4
"org.apache.cassandra.config.CFMetaData.hasStaticColumns()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.hashCode()",13,0,n/a,17,0,0,1,1
"org.apache.cassandra.config.CFMetaData.indexColumnFamilyName(IndexMetadata)",0,1,n/a,13,0,1,1,1
"org.apache.cassandra.config.CFMetaData.indexes(Indexes)",0,5,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.isCQLTable()",3,4,n/a,4,0,0,1,3
"org.apache.cassandra.config.CFMetaData.isCompactTable()",1,23,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.isCompound()",0,18,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.isCounter()",0,17,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.isDense()",0,20,n/a,7,0,0,1,1
"org.apache.cassandra.config.CFMetaData.isIndex()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.config.CFMetaData.isNameValid(String)",3,5,n/a,4,0,1,1,4
"org.apache.cassandra.config.CFMetaData.isStaticCompactTable()",3,12,n/a,4,0,0,1,3
"org.apache.cassandra.config.CFMetaData.isSuper()",0,20,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.isThriftCompatible()",1,3,n/a,7,0,0,1,1
"org.apache.cassandra.config.CFMetaData.isView()",0,9,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.makeLegacyDefaultValidator()",3,1,n/a,6,0,0,1,3
"org.apache.cassandra.config.CFMetaData.maxIndexInterval(int)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.memtableFlushPeriod(int)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.minIndexInterval(int)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.newReadRepairDecision()",2,0,n/a,9,0,0,6,3
"org.apache.cassandra.config.CFMetaData.params(TableParams)",0,3,n/a,8,0,1,2,1
"org.apache.cassandra.config.CFMetaData.partitionColumns()",0,31,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.partitionKeyColumns()",0,21,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.readRepairChance(double)",3,2,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.rebuild()",14,3,n/a,20,1,0,13,6
"org.apache.cassandra.config.CFMetaData.recordColumnDrop(ColumnDefinition)",4,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.CFMetaData.reloadIndexMetadataProperties(CFMetaData)",9,1,n/a,14,0,1,6,2
"org.apache.cassandra.config.CFMetaData.removeColumnDefinition(ColumnDefinition)",3,3,n/a,8,0,1,5,2
"org.apache.cassandra.config.CFMetaData.renameColumn(ColumnIdentifier,ColumnIdentifier)",27,0,n/a,32,1,2,17,7
"org.apache.cassandra.config.CFMetaData.serializePartitionKey(ClusteringPrefix)",6,6,n/a,13,0,1,8,3
"org.apache.cassandra.config.CFMetaData.serializers()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.CFMetaData.speculativeRetry(SpeculativeRetryParam)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.thriftColumnNameType()",5,3,n/a,12,1,0,6,3
"org.apache.cassandra.config.CFMetaData.toString()",17,0,n/a,20,0,0,1,1
"org.apache.cassandra.config.CFMetaData.triggers(Triggers)",0,10,n/a,5,0,1,2,1
"org.apache.cassandra.config.CFMetaData.validate()",28,3,n/a,43,1,0,30,17
"org.apache.cassandra.config.CFMetaData.validateCompatility(CFMetaData)",16,2,n/a,17,0,1,10,6
"org.apache.cassandra.config.ColumnDefinition.ColumnDefinition(CFMetaData,ByteBuffer,AbstractType<?>,int,Kind)",3,4,n/a,9,0,5,1,1
"org.apache.cassandra.config.ColumnDefinition.ColumnDefinition(String,String,ColumnIdentifier,AbstractType<?>,int,Kind)",12,9,n/a,20,0,6,10,6
"org.apache.cassandra.config.ColumnDefinition.Kind.isPrimaryKeyKind()",0,3,n/a,4,0,0,1,2
"org.apache.cassandra.config.ColumnDefinition.asymmetricCellPathComparator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.cellComparator()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.cellPathComparator()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.cellPathSerializer()",0,11,n/a,5,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.cellValueType()",1,6,n/a,12,0,0,1,2
"org.apache.cassandra.config.ColumnDefinition.clusteringDef(CFMetaData,ByteBuffer,AbstractType<?>,int)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.config.ColumnDefinition.clusteringDef(String,String,String,AbstractType<?>,int)",2,0,n/a,4,0,5,1,1
"org.apache.cassandra.config.ColumnDefinition.clusteringOrder()",2,0,n/a,6,0,0,3,3
"org.apache.cassandra.config.ColumnDefinition.compareTo(ColumnDefinition)",2,4,n/a,8,0,1,5,3
"org.apache.cassandra.config.ColumnDefinition.comparisonOrder(Kind,boolean,long,ColumnIdentifier)",1,1,n/a,8,0,4,2,3
"org.apache.cassandra.config.ColumnDefinition.copy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.equals(Object)",6,4,n/a,15,0,1,6,8
"org.apache.cassandra.config.ColumnDefinition.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.isClusteringColumn()",0,10,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.isComplex()",0,32,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.isOnAllComponents()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.isPartOfCellName(boolean,boolean)",0,0,n/a,16,0,2,5,4
"org.apache.cassandra.config.ColumnDefinition.isPartitionKey()",0,15,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.isPrimaryKeyColumn()",1,18,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.isRegular()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.isSimple()",1,10,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.isStatic()",0,31,n/a,4,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.makeCellPathComparator(Kind,AbstractType<?>)",12,1,n/a,14,3,2,12,12
"org.apache.cassandra.config.ColumnDefinition.partitionKeyDef(CFMetaData,ByteBuffer,AbstractType<?>,int)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.config.ColumnDefinition.partitionKeyDef(String,String,String,AbstractType<?>,int)",2,0,n/a,4,0,5,1,1
"org.apache.cassandra.config.ColumnDefinition.position()",1,34,n/a,8,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.regularDef(CFMetaData,ByteBuffer,AbstractType<?>)",1,11,n/a,4,0,3,1,1
"org.apache.cassandra.config.ColumnDefinition.regularDef(String,String,String,AbstractType<?>)",2,7,n/a,4,0,4,1,1
"org.apache.cassandra.config.ColumnDefinition.staticDef(CFMetaData,ByteBuffer,AbstractType<?>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.config.ColumnDefinition.toCQLString(Iterable<ColumnDefinition>)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.ColumnDefinition.toCQLString(Iterator<ColumnDefinition>)",9,0,n/a,10,0,1,7,3
"org.apache.cassandra.config.ColumnDefinition.toIdentifiers(Collection<ColumnDefinition>)",2,7,n/a,5,2,1,2,1
"org.apache.cassandra.config.ColumnDefinition.toString()",6,0,n/a,10,0,0,1,1
"org.apache.cassandra.config.ColumnDefinition.validateCellPath(CellPath)",5,0,n/a,7,0,1,4,2
"org.apache.cassandra.config.ColumnDefinition.validateCellValue(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.ColumnDefinition.withNewName(ColumnIdentifier)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.ColumnDefinition.withNewType(AbstractType<?>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.Config.getOutboundBindAny()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.Config.isClientMode()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.Config.setClientMode(boolean)",0,7,n/a,4,0,1,1,1
"org.apache.cassandra.config.Config.setOutboundBindAny(boolean)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.ConfigurationLoader.loadConfig()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.config.DatabaseDescriptor.applyAddressConfig(Config)",21,1,n/a,89,2,1,38,19
"org.apache.cassandra.config.DatabaseDescriptor.applyConfig(Config)",157,1,n/a,10,3,1,221,106
"org.apache.cassandra.config.DatabaseDescriptor.createAllDirectories()",13,2,n/a,30,1,0,16,8
"org.apache.cassandra.config.DatabaseDescriptor.createEndpointSnitch(String)",3,1,n/a,7,0,1,4,3
"org.apache.cassandra.config.DatabaseDescriptor.disableHintsForDC(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableHintsForDC(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableScriptedUserDefinedFunctions()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableScriptedUserDefinedFunctions(boolean)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableUserDefinedFunctions()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.enableUserDefinedFunctionsThreads()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.forceStaticInitialization()",0,2,n/a,1,0,0,0,1
"org.apache.cassandra.config.DatabaseDescriptor.getAllDataFileLocations()",0,10,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAllocateTokensForKeyspace()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAuthenticator()",0,10,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAuthorizer()",0,24,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getAutoSnapshot()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeFailThreshold()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeFailThresholdInKB()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBatchSizeWarnThreshold()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBatchlogReplayThrottleInKB()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBroadcastAddress()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBroadcastRpcAddress()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getBufferPoolUseHeapIfExhausted()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCasContentionTimeout()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getClientEncryptionOptions()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getClusterName()",0,9,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getColumnIndexSize()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitFailurePolicy()",0,9,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogCompression()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogLocation()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogMaxCompressionBuffersInPool()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSegmentSize()",0,12,n/a,7,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSync()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSyncBatchWindow()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCommitLogSyncPeriod()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCompactionLargePartitionWarningThreshold()",0,1,n/a,1,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCompactionThroughputMbPerSec()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentCompactors()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentCounterWriters()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentReaders()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentViewWriters()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getConcurrentWriters()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheKeysToSave()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheSavePeriod()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCounterCacheSizeInMB()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getCounterWriteRpcTimeout()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDisableSTCSInL0()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskAccessMode()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskFailurePolicy()",0,7,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskOptimizationEstimatePercentile()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskOptimizationPageCrossChance()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDiskOptimizationStrategy()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicBadnessThreshold()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicResetInterval()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getDynamicUpdateInterval()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getEndpointSnitch()",0,38,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getFileCacheSizeInMB()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getFlushWriters()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getGCWarnThreshold()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getHintedHandoffThrottleInKB()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getHintsDirectory()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getHintsFlushPeriodInMS()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexAccessMode()",0,8,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexSummaryCapacityInMB()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getIndexSummaryResizeIntervalInMinutes()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInitialTokens()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInterDCStreamThroughputOutboundMegabitsPerSec()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInterDCTcpNoDelay()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInternodeAuthenticator()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInternodeRecvBufferSize()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getInternodeSendBufferSize()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheKeysToSave()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheSavePeriod()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getKeyCacheSizeInMB()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getListenAddress()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getLocalComparator()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getLocalDataCenter()",0,13,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxHintWindow()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxHintsDeliveryThreads()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxHintsFileSize()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxMutationSize()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMaxStreamingRetries()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getMemtableAllocatorPool()",10,1,n/a,23,2,0,15,7
"org.apache.cassandra.config.DatabaseDescriptor.getMinRpcTimeout()",7,1,n/a,12,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxConcurrentConnections()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxConcurrentConnectionsPerIp()",0,3,n/a,3,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxFrameSize()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportMaxThreads()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportPort()",3,11,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getNativeTransportPortSSL()",1,2,n/a,4,0,0,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getNetworkInterfaceAddress(String,String,boolean)",8,2,n/a,28,2,3,18,10
"org.apache.cassandra.config.DatabaseDescriptor.getNumTokens()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getOtcCoalescingStrategy()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getOtcCoalescingWindow()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPartitioner()",0,9,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPartitionerName()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPermissionsCacheMaxEntries()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPermissionsUpdateInterval()",0,2,n/a,6,0,0,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getPermissionsValidity()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getPhiConvictThreshold()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRangeRpcTimeout()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getReadRpcTimeout()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getReplaceAddress()",6,1,n/a,15,1,0,7,4
"org.apache.cassandra.config.DatabaseDescriptor.getReplaceNode()",2,0,n/a,10,1,0,3,2
"org.apache.cassandra.config.DatabaseDescriptor.getReplaceTokens()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestScheduler()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestSchedulerId()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRequestSchedulerOptions()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRoleManager()",0,32,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRolesCacheMaxEntries()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRolesUpdateInterval()",0,2,n/a,6,0,0,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getRolesValidity()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRowCacheClassName()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRowCacheKeysToSave()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRowCacheSavePeriod()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRowCacheSizeInMB()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcAddress()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcKeepAlive()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcListenBacklog()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcMaxThreads()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcMinThreads()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcPort()",3,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcRecvBufferSize()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcSendBufferSize()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcServerType()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getRpcTimeout()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSSLStoragePort()",3,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSSTableFormat()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSSTablePreempiveOpenIntervalInMB()",1,2,n/a,4,0,0,1,2
"org.apache.cassandra.config.DatabaseDescriptor.getSavedCachesLocation()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSeeds()",4,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getSerializedCachePath(CacheType,String,String)",2,2,n/a,6,0,3,2,2
"org.apache.cassandra.config.DatabaseDescriptor.getServerEncryptionOptions()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getStoragePort()",3,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getStreamThroughputOutboundMegabitsPerSec()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getStreamingSocketTimeout()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getThriftFramedTransportSize()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTimeout(Verb)",6,5,n/a,26,1,1,20,7
"org.apache.cassandra.config.DatabaseDescriptor.getTombstoneFailureThreshold()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTombstoneWarnThreshold()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTotalCommitlogSpaceInMB()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTracetypeQueryTTL()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTracetypeRepairTTL()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTrickleFsync()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTrickleFsyncIntervalInKb()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getTruncateRpcTimeout()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getUserDefinedFunctionFailTimeout()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getUserDefinedFunctionWarnTimeout()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getUserFunctionTimeoutPolicy()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getWindowsTimerInterval()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.getWriteRpcTimeout()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.guessFileStore(String)",3,2,n/a,18,2,1,7,4
"org.apache.cassandra.config.DatabaseDescriptor.hasCrossNodeTimeout()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.hasLargeAddressSpace()",4,2,n/a,15,2,0,9,5
"org.apache.cassandra.config.DatabaseDescriptor.hintedHandoffDisabledDCs()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.hintedHandoffEnabled()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.internodeCompression()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isAutoBootstrap()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isAutoSnapshot()",0,2,n/a,3,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isIncrementalBackupsEnabled()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.isReplacing()",4,0,n/a,9,1,0,4,3
"org.apache.cassandra.config.DatabaseDescriptor.isSnapshotBeforeCompaction()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.loadConfig()",4,2,n/a,9,0,0,3,2
"org.apache.cassandra.config.DatabaseDescriptor.setAutoSnapshot(boolean)",0,5,n/a,5,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setBatchSizeFailThresholdInKB(int)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setBatchSizeWarnThresholdInKB(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setBroadcastAddress(InetAddress)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setBroadcastRpcAddress(InetAddress)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCasContentionTimeout(Long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitFailurePolicy(CommitFailurePolicy)",0,10,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogCompression(ParameterizedClass)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSegmentSize(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSync(CommitLogSync)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSyncBatchWindow(double)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCommitLogSyncPeriod(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCompactionThroughputMbPerSec(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCounterCacheKeysToSave(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCounterCacheSavePeriod(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setCounterWriteRpcTimeout(Long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDiskAccessMode(DiskAccessMode)",0,2,n/a,6,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDiskFailurePolicy(DiskFailurePolicy)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDiskOptimizationPageCrossChance(double)",0,4,n/a,5,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDiskOptimizationStrategy(DiskOptimizationStrategy)",0,2,n/a,5,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicBadnessThreshold(Double)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicResetInterval(Integer)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setDynamicUpdateInterval(Integer)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setEndpointSnitch(IEndpointSnitch)",0,9,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setHintedHandoffEnabled(boolean)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setHintedHandoffThrottleInKB(Integer)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setIncrementalBackupsEnabled(boolean)",0,6,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setIndexAccessMode(DiskAccessMode)",0,2,n/a,6,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setInterDCStreamThroughputOutboundMegabitsPerSec(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setKeyCacheKeysToSave(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setKeyCacheSavePeriod(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setMaxHintWindow(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportMaxConcurrentConnections(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportMaxConcurrentConnectionsPerIp(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportPort(int)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setNativeTransportPortSSL(Integer)",0,2,n/a,5,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setPartitionerUnsafe(IPartitioner)",0,12,n/a,7,0,1,3,1
"org.apache.cassandra.config.DatabaseDescriptor.setPermissionsUpdateInterval(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setPermissionsValidity(int)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setPhiConvictThreshold(double)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRangeRpcTimeout(Long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setReadRpcTimeout(Long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRolesUpdateInterval(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRolesValidity(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRowCacheKeysToSave(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRowCacheSavePeriod(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRowCacheSizeInMB(long)",0,1,n/a,5,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setRpcTimeout(Long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setStreamThroughputOutboundMegabitsPerSec(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setTombstoneFailureThreshold(int)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setTombstoneWarnThreshold(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setTruncateRpcTimeout(Long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setUserDefinedFunctionFailTimeout(long)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setUserDefinedFunctionWarnTimeout(long)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setUserFunctionTimeoutPolicy(UserFunctionTimeoutPolicy)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.setWriteRpcTimeout(Long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.config.DatabaseDescriptor.startNativeTransport()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.startRpc()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.DatabaseDescriptor.tokensFromString(String)",5,3,n/a,8,0,1,5,3
"org.apache.cassandra.config.ParameterizedClass.ParameterizedClass(Map<String, ?>)",5,0,n/a,6,0,1,1,2
"org.apache.cassandra.config.ParameterizedClass.ParameterizedClass(String,Map<String, String>)",0,9,n/a,5,0,2,2,1
"org.apache.cassandra.config.ParameterizedClass.equals(Object)",1,0,n/a,5,0,1,1,2
"org.apache.cassandra.config.ParameterizedClass.equals(ParameterizedClass)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.config.ParameterizedClass.toString()",1,0,n/a,5,0,0,1,2
"org.apache.cassandra.config.Schema.Schema()",5,1,n/a,11,1,0,3,2
"org.apache.cassandra.config.Schema.addAggregate(UDAggregate)",5,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.addFunction(UDFunction)",5,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.addKeyspace(KeyspaceMetadata)",4,0,n/a,7,0,1,4,1
"org.apache.cassandra.config.Schema.addTable(CFMetaData)",9,0,n/a,14,1,1,7,1
"org.apache.cassandra.config.Schema.addType(UserType)",4,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.addView(ViewDefinition)",11,0,n/a,15,1,1,8,1
"org.apache.cassandra.config.Schema.clear()",6,4,n/a,14,1,0,6,2
"org.apache.cassandra.config.Schema.clearKeyspaceMetadata(KeyspaceMetadata)",1,2,n/a,9,0,1,1,1
"org.apache.cassandra.config.Schema.dropAggregate(UDAggregate)",7,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.dropFunction(UDFunction)",7,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.dropKeyspace(String)",19,0,n/a,25,1,1,17,3
"org.apache.cassandra.config.Schema.dropTable(String,String)",20,0,n/a,20,0,2,15,2
"org.apache.cassandra.config.Schema.dropType(UserType)",4,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.dropView(String,String)",22,0,n/a,21,0,2,16,2
"org.apache.cassandra.config.Schema.findFunction(FunctionName,List<AbstractType<?>>)",6,10,n/a,17,0,2,4,3
"org.apache.cassandra.config.Schema.getCF(UUID)",2,8,n/a,8,0,1,1,1
"org.apache.cassandra.config.Schema.getCFMetaData(Descriptor)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.config.Schema.getCFMetaData(String,String)",2,79,n/a,18,0,2,3,2
"org.apache.cassandra.config.Schema.getCFMetaData(UUID)",2,2,n/a,12,0,1,2,2
"org.apache.cassandra.config.Schema.getColumnFamilyStoreIncludingIndexes(Pair<String, String>)",11,4,n/a,40,0,1,22,7
"org.apache.cassandra.config.Schema.getColumnFamilyStoreInstance(UUID)",4,5,n/a,10,0,1,7,3
"org.apache.cassandra.config.Schema.getFunctions(FunctionName)",6,18,n/a,16,0,1,4,3
"org.apache.cassandra.config.Schema.getId(String,String)",2,6,n/a,12,0,2,1,1
"org.apache.cassandra.config.Schema.getKSMetaData(String)",1,70,n/a,12,0,1,2,1
"org.apache.cassandra.config.Schema.getKeyspaceInstance(String)",1,4,n/a,11,0,1,1,1
"org.apache.cassandra.config.Schema.getKeyspaces()",1,9,n/a,7,0,0,1,1
"org.apache.cassandra.config.Schema.getKeyspaces(Set<String>)",7,0,n/a,9,0,1,3,1
"org.apache.cassandra.config.Schema.getNonSystemKeyspaces()",3,12,n/a,7,0,0,1,1
"org.apache.cassandra.config.Schema.getTablesAndViews(String)",2,5,n/a,14,0,1,4,1
"org.apache.cassandra.config.Schema.getVersion()",0,10,n/a,7,0,0,1,1
"org.apache.cassandra.config.Schema.getView(String,String)",2,3,n/a,6,0,2,3,2
"org.apache.cassandra.config.Schema.hasCF(Pair<String, String>)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.config.Schema.isSystemKeyspace(String)",2,6,n/a,7,0,1,1,1
"org.apache.cassandra.config.Schema.load(CFMetaData)",6,4,n/a,14,0,1,5,2
"org.apache.cassandra.config.Schema.load(Iterable<KeyspaceMetadata>)",1,4,n/a,12,0,1,2,1
"org.apache.cassandra.config.Schema.load(KeyspaceMetadata)",3,4,n/a,14,0,1,4,1
"org.apache.cassandra.config.Schema.load(ViewDefinition)",6,4,n/a,15,0,1,6,2
"org.apache.cassandra.config.Schema.loadFromDisk()",1,1,n/a,8,0,0,1,1
"org.apache.cassandra.config.Schema.loadFromDisk(boolean)",3,9,n/a,12,0,1,4,2
"org.apache.cassandra.config.Schema.removeKeyspaceInstance(String)",1,2,n/a,11,0,1,1,1
"org.apache.cassandra.config.Schema.setKeyspaceMetadata(KeyspaceMetadata)",3,17,n/a,13,0,1,5,2
"org.apache.cassandra.config.Schema.storeKeyspaceInstance(Keyspace)",7,2,n/a,13,0,1,3,2
"org.apache.cassandra.config.Schema.unload(CFMetaData)",2,4,n/a,9,0,1,1,1
"org.apache.cassandra.config.Schema.unload(ViewDefinition)",2,3,n/a,9,0,1,1,1
"org.apache.cassandra.config.Schema.update(String,Function<KeyspaceMetadata, KeyspaceMetadata>)",5,12,n/a,9,0,2,6,2
"org.apache.cassandra.config.Schema.updateAggregate(UDAggregate)",8,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.updateFunction(UDFunction)",8,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.updateKeyspace(String,KeyspaceParams)",3,0,n/a,5,0,2,2,1
"org.apache.cassandra.config.Schema.updateTable(CFMetaData)",6,0,n/a,9,0,1,6,1
"org.apache.cassandra.config.Schema.updateType(UserType)",5,0,n/a,5,0,1,2,1
"org.apache.cassandra.config.Schema.updateVersion()",2,4,n/a,9,0,0,2,1
"org.apache.cassandra.config.Schema.updateVersionAndAnnounce()",2,1,n/a,8,0,0,2,1
"org.apache.cassandra.config.Schema.updateView(ViewDefinition)",10,0,n/a,9,0,1,6,1
"org.apache.cassandra.config.ViewDefinition.ViewDefinition(String,String,UUID,String,boolean,RawStatement,String,CFMetaData)",0,3,n/a,16,0,8,8,1
"org.apache.cassandra.config.ViewDefinition.ViewDefinition(ViewDefinition)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.config.ViewDefinition.baseTableMetadata()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.ViewDefinition.copy()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.config.ViewDefinition.equals(Object)",6,0,n/a,15,0,1,6,8
"org.apache.cassandra.config.ViewDefinition.hashCode()",8,0,n/a,12,0,0,1,1
"org.apache.cassandra.config.ViewDefinition.includes(ColumnIdentifier)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.config.ViewDefinition.renameColumn(ColumnIdentifier,ColumnIdentifier)",15,0,n/a,18,0,2,8,1
"org.apache.cassandra.config.ViewDefinition.toString()",9,0,n/a,13,0,0,1,1
"org.apache.cassandra.config.ViewDefinition.whereClauseToRelations(String)",11,1,n/a,22,1,1,12,2
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.CustomConstructor(Class<?>)",4,1,n/a,7,0,1,4,1
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.createDefaultList(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.createDefaultMap()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.createDefaultSet()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor.createDefaultSet(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.MissingPropertiesChecker.MissingPropertiesChecker()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.MissingPropertiesChecker.check()",2,1,n/a,7,1,0,2,2
"org.apache.cassandra.config.YamlConfigurationLoader.MissingPropertiesChecker.getProperty(Class<? extends Object>,String)",3,0,n/a,10,1,2,4,2
"org.apache.cassandra.config.YamlConfigurationLoader.getStorageConfigURL()",11,1,n/a,33,2,0,16,5
"org.apache.cassandra.config.YamlConfigurationLoader.loadConfig()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.config.YamlConfigurationLoader.loadConfig(URL)",13,1,n/a,29,2,1,15,3
"org.apache.cassandra.config.YamlConfigurationLoader.logConfig(byte[])",10,1,n/a,13,2,1,5,3
"org.apache.cassandra.cql3.AbstractConditions.appliesToRegularColumns()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AbstractConditions.appliesToStaticColumns()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AbstractConditions.getColumns()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AbstractConditions.getFunctions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AbstractConditions.isEmpty()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AbstractConditions.isIfExists()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AbstractConditions.isIfNotExists()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AbstractMarker.AbstractMarker(int,ColumnSpecification)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.AbstractMarker.INRaw.INRaw(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.AbstractMarker.INRaw.makeInReceiver(ColumnSpecification)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.AbstractMarker.INRaw.prepare(String,ColumnSpecification)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw.MultiColumnRaw(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw.getText()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw.prepare(String,ColumnSpecification)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw.testAssignment(String,ColumnSpecification)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.AbstractMarker.Raw.Raw(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.AbstractMarker.Raw.getText()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.AbstractMarker.Raw.prepare(String,ColumnSpecification)",5,0,n/a,12,1,2,10,5
"org.apache.cassandra.cql3.AbstractMarker.Raw.testAssignment(String,ColumnSpecification)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.AbstractMarker.collectMarkerSpecification(VariableSpecifications)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.AbstractMarker.containsBindMarker()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AbstractMarker.getFunctions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AssignmentTestable.TestResult.isAssignable()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AssignmentTestable.TestResult.isExactMatch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.AssignmentTestable.TestResult.testAll(String,ColumnSpecification,Collection<? extends AssignmentTestable>)",1,0,n/a,20,2,3,11,5
"org.apache.cassandra.cql3.AssignmentTestable.testAssignment(String,ColumnSpecification)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Attributes.Attributes(Term,Term)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Attributes.Raw.prepare(String,String)",5,0,n/a,6,0,2,3,3
"org.apache.cassandra.cql3.Attributes.Raw.timeToLiveReceiver(String,String)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Attributes.Raw.timestampReceiver(String,String)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Attributes.collectMarkerSpecification(VariableSpecifications)",2,0,n/a,7,0,1,4,3
"org.apache.cassandra.cql3.Attributes.getFunctions()",6,0,n/a,11,0,0,7,5
"org.apache.cassandra.cql3.Attributes.getTimeToLive(QueryOptions)",8,0,n/a,24,1,1,16,7
"org.apache.cassandra.cql3.Attributes.getTimestamp(long,QueryOptions)",5,0,n/a,19,1,2,11,5
"org.apache.cassandra.cql3.Attributes.isTimeToLiveSet()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Attributes.isTimestampSet()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Attributes.none()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.BatchQueryOptions(QueryOptions,List<Object>)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables.WithPerStatementVariables(QueryOptions,List<List<ByteBuffer>>,List<Object>)",5,1,n/a,4,3,3,5,2
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables.forStatement(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables.isPreparedStatement(int)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables.prepareStatement(int,List<ColumnSpecification>)",6,1,n/a,15,1,2,6,2
"org.apache.cassandra.cql3.BatchQueryOptions.WithoutPerStatementVariables.WithoutPerStatementVariables(QueryOptions,List<Object>)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.WithoutPerStatementVariables.forStatement(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.forStatement(int)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.BatchQueryOptions.getConsistency()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.getQueryOrIdList()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.getSerialConsistency()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.getTimestamp(QueryState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.prepareStatement(int,List<ColumnSpecification>)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.withPerStatementVariables(QueryOptions,List<List<ByteBuffer>>,List<Object>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.BatchQueryOptions.withoutPerStatementVariables(QueryOptions)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CFName.getColumnFamily()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CFName.setColumnFamily(String,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.CFName.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.Collection(CollectionType)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.equals(Object)",1,0,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.CQL3Type.Collection.getType()",0,23,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Collection.toString()",22,0,n/a,28,1,0,22,7
"org.apache.cassandra.cql3.CQL3Type.Custom.Custom(AbstractType<?>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.Custom(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.equals(Object)",1,0,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.CQL3Type.Custom.getType()",0,23,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Custom.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Native.Native(AbstractType<?>)",0,21,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Native.getType()",0,23,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Native.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Native.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.RawCollection(Kind,Raw,Raw)",0,3,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.freeze()",4,7,n/a,8,0,0,5,5
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.prepare(String,Types)",1,7,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.prepare(String,Types,boolean)",21,2,n/a,26,1,3,17,13
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.prepareInternal(String,Types)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.referencesUserType(String)",2,2,n/a,4,0,1,1,3
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.supportsFreezing()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection.toString()",1,0,n/a,13,1,0,10,6
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.RawTuple(List<Raw>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.freeze()",2,8,n/a,7,0,0,4,3
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.prepare(String,Types)",10,7,n/a,13,1,2,8,4
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.referencesUserType(String)",3,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.supportsFreezing()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple.toString()",8,0,n/a,14,1,0,10,3
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.RawType(CQL3Type)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.isCounter()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.prepare(String,Types)",0,7,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.supportsFreezing()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.RawUT(UTName)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.canBeNonFrozen()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.freeze()",0,7,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.keyspace()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.prepare(String,Types)",13,7,n/a,22,1,2,10,5
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.referencesUserType(String)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.supportsFreezing()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.canBeNonFrozen()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.freeze()",2,7,n/a,5,0,0,2,1
"org.apache.cassandra.cql3.CQL3Type.Raw.from(CQL3Type)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.frozen(Raw)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.CQL3Type.Raw.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.isCounter()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.isFrozen()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.keyspace()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.list(Raw)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.map(Raw,Raw)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.prepare(String)",4,5,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.CQL3Type.Raw.prepare(String,Types)",n/a,7,4,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.CQL3Type.Raw.prepareInternal(String,Types)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.referencesUserType(String)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.set(Raw)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.supportsFreezing()",n/a,5,4,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.CQL3Type.Raw.tuple(List<Raw>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Raw.userType(UTName)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.Tuple(TupleType)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.create(TupleType)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.equals(Object)",1,0,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.CQL3Type.Tuple.getType()",0,23,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.Tuple.toString()",9,0,n/a,14,1,0,10,3
"org.apache.cassandra.cql3.CQL3Type.UserDefined.UserDefined(String,UserType)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.create(UserType)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.equals(Object)",1,0,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.CQL3Type.UserDefined.getType()",0,23,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.UserDefined.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CQL3Type.getType()",n/a,23,5,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.CQL3Type.isCollection()",n/a,0,5,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.CQLStatement.checkAccess(ClientState)",n/a,12,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.CQLStatement.execute(QueryState,QueryOptions)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.CQLStatement.executeInternal(QueryState,QueryOptions)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.CQLStatement.getBoundTerms()",n/a,0,4,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.CQLStatement.getFunctions()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.CQLStatement.validate(ClientState)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.ColumnCondition.Bound.Bound(ColumnDefinition,Operator)",0,6,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.ColumnCondition.Bound.appliesTo(Row)",n/a,0,6,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.ColumnCondition.Bound.compareWithOperator(Operator,AbstractType<?>,ByteBuffer,ByteBuffer)",4,6,n/a,24,2,4,13,7
"org.apache.cassandra.cql3.ColumnCondition.Bound.getCollectionElementValue()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnCondition.Bound.isSatisfiedByValue(ByteBuffer,Cell,AbstractType<?>,Operator)",2,4,n/a,4,0,4,1,2
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.CollectionBound(ColumnCondition,QueryOptions)",3,1,n/a,7,0,2,4,2
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.appliesTo(Row)",15,0,n/a,38,2,1,24,10
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.evaluateComparisonWithOperator(int,Operator)",1,3,n/a,19,1,2,13,6
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.listAppliesTo(ListType,Iterator<Cell>,List<ByteBuffer>,Operator)",3,1,n/a,4,0,4,1,1
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.mapAppliesTo(MapType,Iterator<Cell>,Map<ByteBuffer, ByteBuffer>,Operator)",18,1,n/a,23,1,4,15,12
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.setAppliesTo(SetType,Iterator<Cell>,Set<ByteBuffer>,Operator)",8,1,n/a,7,0,4,4,1
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.setOrListAppliesTo(AbstractType<?>,Iterator<Cell>,Iterator<ByteBuffer>,Operator,boolean)",11,2,n/a,17,1,5,10,12
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound.valueAppliesTo(CollectionType,Iterator<Cell>,Terminal,Operator)",5,2,n/a,18,1,4,13,5
"org.apache.cassandra.cql3.ColumnCondition.CollectionInBound.CollectionInBound(ColumnCondition,QueryOptions)",26,1,n/a,51,3,2,27,13
"org.apache.cassandra.cql3.ColumnCondition.CollectionInBound.appliesTo(Row)",7,0,n/a,31,3,1,14,8
"org.apache.cassandra.cql3.ColumnCondition.ColumnCondition(ColumnDefinition,Term,Term,List<Term>,Operator)",0,6,n/a,10,0,5,7,2
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.ElementAccessBound(ColumnCondition,QueryOptions)",3,1,n/a,8,0,2,5,2
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.appliesTo(Row)",26,0,n/a,33,2,1,17,6
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.getCollectionElementValue()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.getListIndex(ByteBuffer)",3,4,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound.getListItem(Iterator<Cell>,int)",4,2,n/a,8,0,2,4,3
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessInBound.ElementAccessInBound(ColumnCondition,QueryOptions)",8,1,n/a,14,1,2,8,4
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessInBound.appliesTo(Row)",24,0,n/a,69,4,1,38,20
"org.apache.cassandra.cql3.ColumnCondition.Raw.Raw(Raw,List<Raw>,INRaw,Raw,Operator)",0,6,n/a,8,0,5,5,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.collectionCondition(Raw,Raw,Operator)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.collectionInCondition(Raw,INRaw)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.collectionInCondition(Raw,List<Raw>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.prepare(String,ColumnDefinition)",32,0,n/a,52,2,2,35,14
"org.apache.cassandra.cql3.ColumnCondition.Raw.simpleCondition(Raw,Operator)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.simpleInCondition(INRaw)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.ColumnCondition.Raw.simpleInCondition(List<Raw>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.ColumnCondition.SimpleBound.SimpleBound(ColumnCondition,QueryOptions)",2,1,n/a,7,0,2,4,2
"org.apache.cassandra.cql3.ColumnCondition.SimpleBound.appliesTo(Row)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.ColumnCondition.SimpleInBound.SimpleInBound(ColumnCondition,QueryOptions)",7,1,n/a,14,1,2,8,4
"org.apache.cassandra.cql3.ColumnCondition.SimpleInBound.appliesTo(Row)",2,0,n/a,10,1,1,5,3
"org.apache.cassandra.cql3.ColumnCondition.bind(QueryOptions)",6,0,n/a,12,1,1,6,6
"org.apache.cassandra.cql3.ColumnCondition.collectMarkerSpecification(VariableSpecifications)",3,0,n/a,20,1,1,6,5
"org.apache.cassandra.cql3.ColumnCondition.condition(ColumnDefinition,Term,Operator)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.ColumnCondition.condition(ColumnDefinition,Term,Term,Operator)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.cql3.ColumnCondition.getCell(Row,ColumnDefinition)",1,8,n/a,6,0,2,1,2
"org.apache.cassandra.cql3.ColumnCondition.getCell(Row,ColumnDefinition,CellPath)",1,2,n/a,6,0,3,1,2
"org.apache.cassandra.cql3.ColumnCondition.getCells(Row,ColumnDefinition)",4,4,n/a,9,0,2,4,3
"org.apache.cassandra.cql3.ColumnCondition.getFunctions()",7,0,n/a,13,0,0,10,6
"org.apache.cassandra.cql3.ColumnCondition.inCondition(ColumnDefinition,List<Term>)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.ColumnCondition.inCondition(ColumnDefinition,Term)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.ColumnCondition.inCondition(ColumnDefinition,Term,List<Term>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.ColumnCondition.inCondition(ColumnDefinition,Term,Term)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.ColumnConditions.Builder.Builder()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.cql3.ColumnConditions.Builder.add(ColumnCondition)",6,0,n/a,22,1,1,10,4
"org.apache.cassandra.cql3.ColumnConditions.Builder.build()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnConditions.ColumnConditions(Builder)",0,1,n/a,8,0,1,2,1
"org.apache.cassandra.cql3.ColumnConditions.addConditionsTo(CQL3CasRequest,Clustering,QueryOptions)",4,0,n/a,16,0,3,4,3
"org.apache.cassandra.cql3.ColumnConditions.appliesToRegularColumns()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.ColumnConditions.appliesToStaticColumns()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.ColumnConditions.getColumns()",6,0,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.ColumnConditions.getFunctions()",9,0,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.ColumnConditions.isEmpty()",2,0,n/a,5,0,0,1,2
"org.apache.cassandra.cql3.ColumnConditions.newBuilder()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifier(ByteBuffer,AbstractType<?>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifier(ByteBuffer,String,boolean)",1,4,n/a,7,0,3,4,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifier(String,boolean)",3,55,n/a,7,0,2,4,2
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.ColumnIdentifierValue(ColumnIdentifier)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.equals(Object)",1,0,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.prepare(CFMetaData)",0,8,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.processesSelection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.toCQLString()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.Literal(String,boolean)",1,0,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.equals(Object)",1,0,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.prepare(CFMetaData)",9,8,n/a,17,1,1,10,5
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.processesSelection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.toCQLString()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Literal.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.Raw.prepare(CFMetaData)",n/a,8,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.ColumnIdentifier.Raw.toCQLString()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.ColumnIdentifier.clone(AbstractAllocator)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.cql3.ColumnIdentifier.compareTo(ColumnIdentifier)",2,0,n/a,9,0,1,6,3
"org.apache.cassandra.cql3.ColumnIdentifier.equals(Object)",1,1,n/a,10,0,1,6,3
"org.apache.cassandra.cql3.ColumnIdentifier.getInterned(ByteBuffer,AbstractType<?>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.getInterned(ByteBuffer,String)",3,3,n/a,9,0,2,6,3
"org.apache.cassandra.cql3.ColumnIdentifier.getInterned(String,boolean)",3,11,n/a,6,0,2,3,2
"org.apache.cassandra.cql3.ColumnIdentifier.hashCode()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.isInterned()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.maybeQuote(String)",3,3,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.ColumnIdentifier.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",5,0,n/a,7,0,2,4,2
"org.apache.cassandra.cql3.ColumnIdentifier.prefixComparison(ByteBuffer)",3,2,n/a,17,1,1,10,3
"org.apache.cassandra.cql3.ColumnIdentifier.toCQLString()",1,2,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.toString()",0,9,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.unsharedHeapSize()",2,0,n/a,6,0,0,1,1
"org.apache.cassandra.cql3.ColumnIdentifier.unsharedHeapSizeExcludingData()",2,0,n/a,6,0,0,1,1
"org.apache.cassandra.cql3.ColumnSpecification.ColumnSpecification(String,String,ColumnIdentifier,AbstractType<?>)",0,4,n/a,7,0,4,4,1
"org.apache.cassandra.cql3.ColumnSpecification.allInSameTable(Collection<ColumnSpecification>)",7,0,n/a,17,1,1,9,6
"org.apache.cassandra.cql3.ColumnSpecification.equals(Object)",4,0,n/a,11,0,1,4,5
"org.apache.cassandra.cql3.ColumnSpecification.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnSpecification.isReversedType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ColumnSpecification.toString()",4,1,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.ColumnSpecification.withAlias(ColumnIdentifier)",1,0,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.Conditions.addConditionsTo(CQL3CasRequest,Clustering,QueryOptions)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.Conditions.appliesToRegularColumns()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Conditions.appliesToStaticColumns()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Conditions.getColumns()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Conditions.getFunctions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Conditions.isEmpty()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Conditions.isIfExists()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Conditions.isIfNotExists()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Constants.Adder.Adder(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Constants.Adder.execute(DecoratedKey,UpdateParameters)",4,0,n/a,10,0,2,7,3
"org.apache.cassandra.cql3.Constants.Deleter.Deleter(ColumnDefinition)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Deleter.execute(DecoratedKey,UpdateParameters)",3,0,n/a,7,0,2,3,2
"org.apache.cassandra.cql3.Constants.Literal.Literal(Type,String)",0,6,n/a,6,0,2,3,2
"org.apache.cassandra.cql3.Constants.Literal.bool(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Literal.floatingPoint(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Literal.getRawText()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Constants.Literal.getText()",1,0,n/a,4,0,0,1,2
"org.apache.cassandra.cql3.Constants.Literal.hex(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Literal.integer(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Literal.parsedValue(AbstractType<?>)",6,1,n/a,18,1,1,9,6
"org.apache.cassandra.cql3.Constants.Literal.prepare(String,ColumnSpecification)",7,0,n/a,6,0,2,3,2
"org.apache.cassandra.cql3.Constants.Literal.string(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Literal.testAssignment(String,ColumnSpecification)",2,1,n/a,75,2,2,57,15
"org.apache.cassandra.cql3.Constants.Literal.uuid(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Marker.Marker(int,ColumnSpecification)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Constants.Marker.bind(QueryOptions)",2,0,n/a,9,0,1,6,3
"org.apache.cassandra.cql3.Constants.Marker.bindAndGet(QueryOptions)",5,1,n/a,15,1,1,6,4
"org.apache.cassandra.cql3.Constants.NullLiteral.getText()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Constants.NullLiteral.prepare(String,ColumnSpecification)",3,0,n/a,6,0,2,3,2
"org.apache.cassandra.cql3.Constants.NullLiteral.testAssignment(String,ColumnSpecification)",0,1,n/a,6,0,2,1,2
"org.apache.cassandra.cql3.Constants.Setter.Setter(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Constants.Setter.execute(DecoratedKey,UpdateParameters)",3,0,n/a,8,0,2,5,3
"org.apache.cassandra.cql3.Constants.Substracter.Substracter(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Constants.Substracter.execute(DecoratedKey,UpdateParameters)",5,0,n/a,12,0,2,9,4
"org.apache.cassandra.cql3.Constants.Value.Value(ByteBuffer)",0,34,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Value.bindAndGet(QueryOptions)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.Constants.Value.get(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Constants.Value.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.getPrepared(MD5Digest)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.getPreparedForThrift(Integer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.prepare(String,QueryState,Map<String, ByteBuffer>)",2,0,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.process(String,QueryState,QueryOptions,Map<String, ByteBuffer>)",2,0,n/a,9,0,4,3,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.processBatch(BatchStatement,QueryState,BatchQueryOptions,Map<String, ByteBuffer>)",2,0,n/a,9,0,4,3,1
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler.processPrepared(CQLStatement,QueryState,QueryOptions,Map<String, ByteBuffer>)",2,0,n/a,9,0,4,3,1
"org.apache.cassandra.cql3.ErrorCollector.ErrorCollector(String)",0,0,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.ErrorCollector.appendQuerySnippet(Parser,StringBuilder)",10,1,n/a,16,0,2,7,1
"org.apache.cassandra.cql3.ErrorCollector.appendSnippet(StringBuilder,Token,Token,Token)",26,1,n/a,32,0,4,20,8
"org.apache.cassandra.cql3.ErrorCollector.areTokensValid(Token...)",1,1,n/a,16,1,1,4,3
"org.apache.cassandra.cql3.ErrorCollector.getLastCharPositionInLine(Token)",2,3,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.ErrorCollector.getLength(Token)",2,1,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.ErrorCollector.getOffendingTokenIndex(int,int)",1,1,n/a,14,0,2,1,1
"org.apache.cassandra.cql3.ErrorCollector.getSnippetFirstTokenIndex(int)",1,1,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.ErrorCollector.getSnippetLastTokenIndex(int,int)",1,1,n/a,11,0,2,1,1
"org.apache.cassandra.cql3.ErrorCollector.highlightToken(String,Token)",4,1,n/a,11,0,2,2,1
"org.apache.cassandra.cql3.ErrorCollector.insertChar(String,int,char)",7,2,n/a,15,0,3,1,1
"org.apache.cassandra.cql3.ErrorCollector.isTokenValid(Token)",2,1,n/a,10,0,1,1,2
"org.apache.cassandra.cql3.ErrorCollector.lineIndex(Token)",1,8,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.ErrorCollector.syntaxError(BaseRecognizer,String)",1,0,n/a,8,0,2,1,1
"org.apache.cassandra.cql3.ErrorCollector.syntaxError(BaseRecognizer,String[],RecognitionException)",9,0,n/a,15,0,3,6,2
"org.apache.cassandra.cql3.ErrorCollector.throwFirstSyntaxError()",3,0,n/a,10,0,0,2,2
"org.apache.cassandra.cql3.ErrorListener.syntaxError(BaseRecognizer,String)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.ErrorListener.syntaxError(BaseRecognizer,String[],RecognitionException)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.IfExistsCondition.addConditionsTo(CQL3CasRequest,Clustering,QueryOptions)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.IfExistsCondition.isIfExists()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.IfNotExistsCondition.addConditionsTo(CQL3CasRequest,Clustering,QueryOptions)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.IfNotExistsCondition.isIfNotExists()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.IndexName.getCfName()",4,1,n/a,7,0,0,4,2
"org.apache.cassandra.cql3.IndexName.getIdx()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.IndexName.setIndex(String,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.IndexName.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Json.ColumnValue.ColumnValue(Term)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Json.ColumnValue.getText()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Json.ColumnValue.prepare(String,ColumnSpecification)",0,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.Json.ColumnValue.testAssignment(String,ColumnSpecification)",0,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.Json.DelayedColumnValue.DelayedColumnValue(PreparedMarker,ColumnDefinition)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Json.DelayedColumnValue.bind(QueryOptions)",3,0,n/a,7,0,1,3,2
"org.apache.cassandra.cql3.Json.DelayedColumnValue.collectMarkerSpecification(VariableSpecifications)",0,0,n/a,5,0,1,0,1
"org.apache.cassandra.cql3.Json.DelayedColumnValue.containsBindMarker()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Json.DelayedColumnValue.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Json.Literal.Literal(String)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Json.Literal.prepareAndCollectMarkers(CFMetaData,Collection<ColumnDefinition>,VariableSpecifications)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.Json.Marker.Marker(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Json.Marker.makeReceiver(CFMetaData)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Json.Marker.prepareAndCollectMarkers(CFMetaData,Collection<ColumnDefinition>,VariableSpecifications)",3,0,n/a,5,0,3,2,1
"org.apache.cassandra.cql3.Json.Prepared.getRawTermForColumn(ColumnDefinition)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.Json.PreparedLiteral.PreparedLiteral(Map<ColumnIdentifier, Term>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Json.PreparedLiteral.getRawTermForColumn(ColumnDefinition)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.cql3.Json.PreparedMarker.PreparedMarker(int,Collection<ColumnDefinition>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Json.PreparedMarker.bind(QueryOptions)",6,1,n/a,10,0,1,6,3
"org.apache.cassandra.cql3.Json.PreparedMarker.getRawTermForColumn(ColumnDefinition)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Json.PreparedMarker.getValue(ColumnDefinition)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Json.Raw.prepareAndCollectMarkers(CFMetaData,Collection<ColumnDefinition>,VariableSpecifications)",n/a,0,2,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue.RawDelayedColumnValue(PreparedMarker,ColumnDefinition)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue.getText()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue.prepare(String,ColumnSpecification)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue.testAssignment(String,ColumnSpecification)",0,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.Json.decodeJson(String)",3,3,n/a,11,1,1,3,2
"org.apache.cassandra.cql3.Json.handleCaseSensitivity(Map<String, Object>)",12,1,n/a,19,2,1,7,5
"org.apache.cassandra.cql3.Json.parseJson(String,Collection<ColumnDefinition>)",24,2,n/a,47,4,2,18,8
"org.apache.cassandra.cql3.KeyspaceElementName.getKeyspace()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.KeyspaceElementName.hasKeyspace()",0,1,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.KeyspaceElementName.setKeyspace(String,boolean)",1,0,n/a,10,0,2,1,1
"org.apache.cassandra.cql3.KeyspaceElementName.toInternalName(String,boolean)",1,1,n/a,11,0,2,1,2
"org.apache.cassandra.cql3.KeyspaceElementName.toString()",2,0,n/a,5,0,0,1,2
"org.apache.cassandra.cql3.Lists.Appender.Appender(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Lists.Appender.doAppend(Terminal,ColumnDefinition,UpdateParameters)",8,2,n/a,23,2,3,9,5
"org.apache.cassandra.cql3.Lists.Appender.execute(DecoratedKey,UpdateParameters)",3,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.Lists.DelayedValue.DelayedValue(List<Term>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Lists.DelayedValue.bind(QueryOptions)",10,1,n/a,19,1,1,11,5
"org.apache.cassandra.cql3.Lists.DelayedValue.collectMarkerSpecification(VariableSpecifications)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.cql3.Lists.DelayedValue.containsBindMarker()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Lists.DelayedValue.getFunctions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Lists.Discarder.Discarder(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Lists.Discarder.execute(DecoratedKey,UpdateParameters)",9,0,n/a,20,1,2,10,7
"org.apache.cassandra.cql3.Lists.Discarder.requiresRead()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Lists.DiscarderByIndex.DiscarderByIndex(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Lists.DiscarderByIndex.execute(DecoratedKey,UpdateParameters)",16,0,n/a,17,0,2,14,6
"org.apache.cassandra.cql3.Lists.DiscarderByIndex.requiresRead()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Lists.Lists()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.cql3.Lists.Literal.Literal(List<Raw>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Lists.Literal.getText()",4,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Lists.Literal.prepare(String,ColumnSpecification)",11,0,n/a,18,1,2,13,5
"org.apache.cassandra.cql3.Lists.Literal.testAssignment(String,ColumnSpecification)",3,0,n/a,10,0,2,6,3
"org.apache.cassandra.cql3.Lists.Literal.validateAssignableTo(String,ColumnSpecification)",9,1,n/a,11,1,2,6,4
"org.apache.cassandra.cql3.Lists.Marker.Marker(int,ColumnSpecification)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Lists.Marker.bind(QueryOptions)",4,0,n/a,9,0,1,6,3
"org.apache.cassandra.cql3.Lists.PrecisionTime.PrecisionTime(long,int)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Lists.PrecisionTime.getNext(long)",5,1,n/a,13,1,1,6,4
"org.apache.cassandra.cql3.Lists.Prepender.Prepender(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Lists.Prepender.execute(DecoratedKey,UpdateParameters)",10,0,n/a,15,1,2,12,4
"org.apache.cassandra.cql3.Lists.Setter.Setter(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Lists.Setter.execute(DecoratedKey,UpdateParameters)",4,0,n/a,10,0,2,6,3
"org.apache.cassandra.cql3.Lists.SetterByIndex.SetterByIndex(ColumnDefinition,Term,Term)",1,0,n/a,5,0,3,2,1
"org.apache.cassandra.cql3.Lists.SetterByIndex.collectMarkerSpecification(VariableSpecifications)",2,0,n/a,6,0,1,2,1
"org.apache.cassandra.cql3.Lists.SetterByIndex.execute(DecoratedKey,UpdateParameters)",21,0,n/a,32,1,2,21,9
"org.apache.cassandra.cql3.Lists.SetterByIndex.requiresRead()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Lists.Value.Value(List<ByteBuffer>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Lists.Value.equals(ListType,Value)",7,0,n/a,9,0,2,8,4
"org.apache.cassandra.cql3.Lists.Value.fromSerialized(ByteBuffer,ListType,int)",10,1,n/a,18,1,3,7,4
"org.apache.cassandra.cql3.Lists.Value.get(int)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Lists.Value.getElements()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Lists.existingSize(Row,ColumnDefinition)",2,2,n/a,7,0,2,4,3
"org.apache.cassandra.cql3.Lists.indexSpecOf(ColumnSpecification)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Lists.valueSpecOf(ColumnSpecification)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Maps.DelayedValue.DelayedValue(Comparator<ByteBuffer>,Map<Term, Term>)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Maps.DelayedValue.bind(QueryOptions)",19,1,n/a,28,1,1,18,8
"org.apache.cassandra.cql3.Maps.DelayedValue.collectMarkerSpecification(VariableSpecifications)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.cql3.Maps.DelayedValue.containsBindMarker()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Maps.DelayedValue.getFunctions()",5,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Maps.DiscarderByKey.DiscarderByKey(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Maps.DiscarderByKey.execute(DecoratedKey,UpdateParameters)",8,0,n/a,10,0,2,7,3
"org.apache.cassandra.cql3.Maps.Literal.Literal(List<Pair<Raw, Raw>>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Maps.Literal.getText()",7,0,n/a,6,0,0,1,1
"org.apache.cassandra.cql3.Maps.Literal.prepare(String,ColumnSpecification)",15,0,n/a,20,1,2,15,7
"org.apache.cassandra.cql3.Maps.Literal.testAssignment(String,ColumnSpecification)",5,0,n/a,22,1,2,15,8
"org.apache.cassandra.cql3.Maps.Literal.validateAssignableTo(String,ColumnSpecification)",15,1,n/a,14,1,2,9,5
"org.apache.cassandra.cql3.Maps.Maps()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.cql3.Maps.Marker.Marker(int,ColumnSpecification)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Maps.Marker.bind(QueryOptions)",4,0,n/a,9,0,1,6,3
"org.apache.cassandra.cql3.Maps.Putter.Putter(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Maps.Putter.doPut(Terminal,ColumnDefinition,UpdateParameters)",9,2,n/a,19,1,3,9,5
"org.apache.cassandra.cql3.Maps.Putter.execute(DecoratedKey,UpdateParameters)",3,0,n/a,7,0,2,4,2
"org.apache.cassandra.cql3.Maps.Setter.Setter(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Maps.Setter.execute(DecoratedKey,UpdateParameters)",4,0,n/a,10,0,2,6,3
"org.apache.cassandra.cql3.Maps.SetterByKey.SetterByKey(ColumnDefinition,Term,Term)",1,0,n/a,5,0,3,2,1
"org.apache.cassandra.cql3.Maps.SetterByKey.collectMarkerSpecification(VariableSpecifications)",2,0,n/a,6,0,1,2,1
"org.apache.cassandra.cql3.Maps.SetterByKey.execute(DecoratedKey,UpdateParameters)",12,0,n/a,24,1,2,14,6
"org.apache.cassandra.cql3.Maps.Value.Value(Map<ByteBuffer, ByteBuffer>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Maps.Value.equals(MapType,Value)",17,0,n/a,16,1,2,10,5
"org.apache.cassandra.cql3.Maps.Value.fromSerialized(ByteBuffer,MapType,int)",15,1,n/a,17,1,3,7,3
"org.apache.cassandra.cql3.Maps.Value.get(int)",9,0,n/a,10,1,1,5,2
"org.apache.cassandra.cql3.Maps.keySpecOf(ColumnSpecification)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Maps.valueSpecOf(ColumnSpecification)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.MultiColumnRelation(List<Raw>,Operator,MultiColumnRaw,List<? extends MultiColumnRaw>,INRaw)",0,4,n/a,8,0,5,5,1
"org.apache.cassandra.cql3.MultiColumnRelation.createInRelation(List<Raw>,List<? extends MultiColumnRaw>)",1,0,n/a,11,0,2,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.createNonInRelation(List<Raw>,Operator,MultiColumnRaw)",1,0,n/a,15,0,3,2,1
"org.apache.cassandra.cql3.MultiColumnRelation.createSingleMarkerInRelation(List<Raw>,INRaw)",1,0,n/a,11,0,2,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.getEntities()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.getInValues()",0,0,n/a,5,0,0,2,1
"org.apache.cassandra.cql3.MultiColumnRelation.getValue()",0,3,n/a,8,0,0,1,2
"org.apache.cassandra.cql3.MultiColumnRelation.isMultiColumn()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.newContainsRestriction(CFMetaData,VariableSpecifications,boolean)",2,0,n/a,7,0,3,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.newEQRestriction(CFMetaData,VariableSpecifications)",4,0,n/a,8,0,2,3,1
"org.apache.cassandra.cql3.MultiColumnRelation.newINRestriction(CFMetaData,VariableSpecifications)",6,0,n/a,13,1,2,6,2
"org.apache.cassandra.cql3.MultiColumnRelation.newIsNotRestriction(CFMetaData,VariableSpecifications)",3,0,n/a,7,0,2,1,1
"org.apache.cassandra.cql3.MultiColumnRelation.newSliceRestriction(CFMetaData,VariableSpecifications,Bound,boolean)",5,0,n/a,10,0,4,3,1
"org.apache.cassandra.cql3.MultiColumnRelation.receivers(CFMetaData)",13,4,n/a,17,1,1,10,3
"org.apache.cassandra.cql3.MultiColumnRelation.renameIdentifier(Raw,Raw)",8,0,n/a,7,0,2,4,3
"org.apache.cassandra.cql3.MultiColumnRelation.toString()",12,0,n/a,16,1,0,4,3
"org.apache.cassandra.cql3.MultiColumnRelation.toTerm(List<? extends ColumnSpecification>,Raw,String,VariableSpecifications)",2,3,n/a,10,0,4,3,1
"org.apache.cassandra.cql3.Operation.Addition.Addition(Raw)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.Addition.isCompatibleWith(RawUpdate)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.Addition.prepare(String,ColumnDefinition)",13,0,n/a,22,1,2,15,7
"org.apache.cassandra.cql3.Operation.Addition.toString(ColumnSpecification)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.ColumnDeletion.ColumnDeletion(Raw)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.ColumnDeletion.affectedColumn()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Operation.ColumnDeletion.prepare(String,ColumnDefinition)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.Operation.ElementDeletion.ElementDeletion(Raw,Raw)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Operation.ElementDeletion.affectedColumn()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Operation.ElementDeletion.prepare(String,ColumnDefinition)",16,0,n/a,20,1,2,15,6
"org.apache.cassandra.cql3.Operation.Operation(ColumnDefinition,Term)",0,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.Operation.Prepend.Prepend(Raw)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.Prepend.isCompatibleWith(RawUpdate)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.Prepend.prepare(String,ColumnDefinition)",9,0,n/a,9,0,2,6,3
"org.apache.cassandra.cql3.Operation.Prepend.toString(ColumnSpecification)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.RawDeletion.affectedColumn()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Operation.RawDeletion.prepare(String,ColumnDefinition)",n/a,0,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Operation.RawUpdate.isCompatibleWith(RawUpdate)",n/a,0,5,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.Operation.RawUpdate.prepare(String,ColumnDefinition)",n/a,0,5,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Operation.SetElement.SetElement(Raw,Raw)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Operation.SetElement.isCompatibleWith(RawUpdate)",0,0,n/a,6,0,1,1,1
"org.apache.cassandra.cql3.Operation.SetElement.prepare(String,ColumnDefinition)",21,0,n/a,21,1,2,16,6
"org.apache.cassandra.cql3.Operation.SetElement.toString(ColumnSpecification)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.SetValue.SetValue(Raw)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.SetValue.isCompatibleWith(RawUpdate)",0,0,n/a,6,0,1,1,1
"org.apache.cassandra.cql3.Operation.SetValue.prepare(String,ColumnDefinition)",9,0,n/a,18,1,2,13,6
"org.apache.cassandra.cql3.Operation.SetValue.toString(ColumnSpecification)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.Substraction.Substraction(Raw)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.Substraction.isCompatibleWith(RawUpdate)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.Substraction.prepare(String,ColumnDefinition)",19,0,n/a,26,1,2,15,7
"org.apache.cassandra.cql3.Operation.Substraction.toString(ColumnSpecification)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operation.collectMarkerSpecification(VariableSpecifications)",1,0,n/a,11,0,1,2,2
"org.apache.cassandra.cql3.Operation.execute(DecoratedKey,UpdateParameters)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Operation.getFunctions()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.cql3.Operation.requiresRead()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.Operations.Operations(StatementType)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Operations.add(Operation)",3,0,n/a,11,0,1,3,2
"org.apache.cassandra.cql3.Operations.appliesToRegularColumns()",3,0,n/a,12,0,0,1,3
"org.apache.cassandra.cql3.Operations.appliesToStaticColumns()",1,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.Operations.getFunctions()",3,0,n/a,7,0,0,4,2
"org.apache.cassandra.cql3.Operations.isEmpty()",2,0,n/a,8,0,0,1,2
"org.apache.cassandra.cql3.Operations.iterator()",3,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.Operations.regularOperations()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.Operations.requiresRead()",1,0,n/a,13,0,0,4,3
"org.apache.cassandra.cql3.Operations.staticOperations()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.Operator.Operator(int)",0,10,n/a,8,0,1,1,1
"org.apache.cassandra.cql3.Operator.getValue()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Operator.isSatisfiedBy(AbstractType<?>,ByteBuffer,ByteBuffer)",37,4,n/a,48,2,3,30,13
"org.apache.cassandra.cql3.Operator.readFrom(DataInput)",4,2,n/a,15,0,1,5,3
"org.apache.cassandra.cql3.Operator.serializedSize()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Operator.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Operator.writeTo(DataOutput)",1,1,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.QueryHandler.getPrepared(MD5Digest)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.QueryHandler.getPreparedForThrift(Integer)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.QueryHandler.prepare(String,QueryState,Map<String, ByteBuffer>)",n/a,1,1,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.QueryHandler.process(String,QueryState,QueryOptions,Map<String, ByteBuffer>)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.cql3.QueryHandler.processBatch(BatchStatement,QueryState,BatchQueryOptions,Map<String, ByteBuffer>)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.cql3.QueryHandler.processPrepared(CQLStatement,QueryState,QueryOptions,Map<String, ByteBuffer>)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.cql3.QueryOptions.Codec.Flag.deserialize(int)",2,1,n/a,10,1,1,7,3
"org.apache.cassandra.cql3.QueryOptions.Codec.Flag.serialize(EnumSet<Flag>)",1,1,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.QueryOptions.Codec.decode(ByteBuf,int)",26,2,n/a,41,2,2,27,10
"org.apache.cassandra.cql3.QueryOptions.Codec.encode(QueryOptions,ByteBuf,int)",21,2,n/a,19,0,3,13,6
"org.apache.cassandra.cql3.QueryOptions.Codec.encodedSize(QueryOptions,int)",15,2,n/a,18,0,2,15,6
"org.apache.cassandra.cql3.QueryOptions.Codec.gatherFlags(QueryOptions)",14,2,n/a,17,0,1,14,7
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.DefaultQueryOptions(ConsistencyLevel,List<ByteBuffer>,boolean,SpecificOptions,int)",0,7,n/a,8,0,5,5,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.getConsistency()",0,12,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.getProtocolVersion()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.getSpecificOptions()",0,7,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.getValues()",0,8,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions.skipMetadata()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithColumnSpecifications.OptionsWithColumnSpecifications(QueryOptions,List<ColumnSpecification>)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithColumnSpecifications.getColumnSpecifications()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithColumnSpecifications.hasColumnSpecifications()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithNames.OptionsWithNames(DefaultQueryOptions,List<String>)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithNames.getValues()",0,8,n/a,6,0,0,2,1
"org.apache.cassandra.cql3.QueryOptions.OptionsWithNames.prepare(List<ColumnSpecification>)",12,3,n/a,19,3,1,13,4
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.QueryOptionsWrapper(QueryOptions)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.getConsistency()",1,12,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.getProtocolVersion()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.getSpecificOptions()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.getValues()",1,8,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.prepare(List<ColumnSpecification>)",1,3,n/a,6,0,1,2,1
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper.skipMetadata()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.SpecificOptions.SpecificOptions(int,PagingState,ConsistencyLevel,long)",0,3,n/a,7,0,4,4,2
"org.apache.cassandra.cql3.QueryOptions.addColumnSpecifications(QueryOptions,List<ColumnSpecification>)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.QueryOptions.create(ConsistencyLevel,List<ByteBuffer>,boolean,int,PagingState,ConsistencyLevel)",2,1,n/a,4,0,6,1,1
"org.apache.cassandra.cql3.QueryOptions.forInternalCalls(ConsistencyLevel,List<ByteBuffer>)",1,5,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.QueryOptions.forInternalCalls(List<ByteBuffer>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.QueryOptions.forProtocolVersion(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.QueryOptions.fromThrift(ConsistencyLevel,List<ByteBuffer>)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.QueryOptions.getColumnSpecifications()",1,0,n/a,16,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.getConsistency()",n/a,12,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.QueryOptions.getPageSize()",1,9,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.getPagingState()",1,3,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.getProtocolVersion()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.QueryOptions.getSerialConsistency()",1,7,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.getSpecificOptions()",n/a,7,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.QueryOptions.getTimestamp(QueryState)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.cql3.QueryOptions.getValues()",n/a,8,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.QueryOptions.hasColumnSpecifications()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.QueryOptions.prepare(List<ColumnSpecification>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.QueryOptions.skipMetadata()",n/a,4,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.QueryProcessor.InternalStateInstance.InternalStateInstance()",3,1,n/a,6,0,0,3,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onCreateAggregate(String,String,List<AbstractType<?>>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onCreateFunction(String,String,List<AbstractType<?>>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onCreateFunctionInternal(String,String,List<AbstractType<?>>)",10,2,n/a,10,1,3,3,2
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropAggregate(String,String,List<AbstractType<?>>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropColumnFamily(String,String)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropFunction(String,String,List<AbstractType<?>>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropFunctionInternal(String,String,List<AbstractType<?>>)",6,2,n/a,5,0,3,2,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onDropKeyspace(String)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.onUpdateColumnFamily(String,String,boolean)",2,0,n/a,6,0,3,3,2
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.removeInvalidPreparedStatements(Iterator<Prepared>,String,String)",4,3,n/a,8,1,3,3,3
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.removeInvalidPreparedStatements(String,String)",9,3,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.removeInvalidPreparedStatementsForFunction(Iterator<Prepared>,String,String)",7,4,n/a,7,0,3,2,2
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber.shouldInvalidate(String,String,CQLStatement)",8,2,n/a,32,2,3,18,8
"org.apache.cassandra.cql3.QueryProcessor.QueryProcessor()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryProcessor.computeId(String,String)",1,2,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.QueryProcessor.computeThriftId(String,String)",1,2,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.QueryProcessor.execute(String,ConsistencyLevel,QueryState,Object...)",5,0,n/a,17,1,4,7,3
"org.apache.cassandra.cql3.QueryProcessor.executeInternal(String,Object...)",5,107,n/a,9,0,2,5,2
"org.apache.cassandra.cql3.QueryProcessor.executeInternalWithPaging(String,int,Object...)",7,2,n/a,9,0,3,6,2
"org.apache.cassandra.cql3.QueryProcessor.executeOnceInternal(String,Object...)",9,5,n/a,14,0,2,6,2
"org.apache.cassandra.cql3.QueryProcessor.getPrepared(MD5Digest)",1,26,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.QueryProcessor.getPreparedForThrift(Integer)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.QueryProcessor.getStatement(String,ClientState)",5,8,n/a,11,0,2,6,2
"org.apache.cassandra.cql3.QueryProcessor.getStoredPreparedStatement(String,String,boolean)",6,1,n/a,16,1,3,7,4
"org.apache.cassandra.cql3.QueryProcessor.internalQueryState()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryProcessor.makeInternalOptions(Prepared,Object[])",1,4,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.QueryProcessor.makeInternalOptions(Prepared,Object[],ConsistencyLevel)",9,1,n/a,13,1,3,10,5
"org.apache.cassandra.cql3.QueryProcessor.measure(Object)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.QueryProcessor.parseStatement(String)",18,3,n/a,36,1,1,15,4
"org.apache.cassandra.cql3.QueryProcessor.parseStatement(String,QueryState)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.QueryProcessor.prepare(String,ClientState,boolean)",9,1,n/a,12,0,3,9,3
"org.apache.cassandra.cql3.QueryProcessor.prepare(String,QueryState)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.QueryProcessor.prepare(String,QueryState,Map<String, ByteBuffer>)",1,0,n/a,6,0,3,1,1
"org.apache.cassandra.cql3.QueryProcessor.prepareInternal(String)",7,3,n/a,11,0,1,7,2
"org.apache.cassandra.cql3.QueryProcessor.preparedStatementsCount()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.QueryProcessor.process(String,ConsistencyLevel)",2,15,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.QueryProcessor.process(String,ConsistencyLevel,List<ByteBuffer>)",4,1,n/a,8,0,3,4,2
"org.apache.cassandra.cql3.QueryProcessor.process(String,ConsistencyLevel,QueryState)",3,1,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.QueryProcessor.process(String,QueryState,QueryOptions)",10,1,n/a,12,0,3,8,3
"org.apache.cassandra.cql3.QueryProcessor.process(String,QueryState,QueryOptions,Map<String, ByteBuffer>)",1,1,n/a,8,0,4,1,1
"org.apache.cassandra.cql3.QueryProcessor.processBatch(BatchStatement,QueryState,BatchQueryOptions)",5,1,n/a,9,0,3,5,1
"org.apache.cassandra.cql3.QueryProcessor.processBatch(BatchStatement,QueryState,BatchQueryOptions,Map<String, ByteBuffer>)",1,1,n/a,8,0,4,1,1
"org.apache.cassandra.cql3.QueryProcessor.processPrepared(CQLStatement,QueryState,QueryOptions)",15,1,n/a,19,1,3,11,6
"org.apache.cassandra.cql3.QueryProcessor.processPrepared(CQLStatement,QueryState,QueryOptions,Map<String, ByteBuffer>)",1,1,n/a,8,0,4,1,1
"org.apache.cassandra.cql3.QueryProcessor.processStatement(CQLStatement,QueryState,QueryOptions)",7,2,n/a,10,0,3,6,2
"org.apache.cassandra.cql3.QueryProcessor.resultify(String,PartitionIterator)",4,0,n/a,9,1,2,4,1
"org.apache.cassandra.cql3.QueryProcessor.resultify(String,RowIterator)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.QueryProcessor.storePreparedStatement(String,String,Prepared,boolean)",9,1,n/a,24,1,4,10,3
"org.apache.cassandra.cql3.QueryProcessor.validateKey(ByteBuffer)",6,1,n/a,15,1,1,6,5
"org.apache.cassandra.cql3.Relation.getInValues()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Relation.getValue()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Relation.isContains()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.Relation.isContainsKey()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.Relation.isEQ()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.Relation.isIN()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.Relation.isMultiColumn()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.Relation.isSlice()",0,0,n/a,12,0,0,1,4
"org.apache.cassandra.cql3.Relation.newContainsRestriction(CFMetaData,VariableSpecifications,boolean)",n/a,2,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.Relation.newEQRestriction(CFMetaData,VariableSpecifications)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Relation.newINRestriction(CFMetaData,VariableSpecifications)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Relation.newIsNotRestriction(CFMetaData,VariableSpecifications)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Relation.newSliceRestriction(CFMetaData,VariableSpecifications,Bound,boolean)",n/a,4,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.cql3.Relation.onToken()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.Relation.operator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Relation.renameIdentifier(Raw,Raw)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Relation.toColumnDefinition(CFMetaData,Raw)",3,0,n/a,17,0,2,5,2
"org.apache.cassandra.cql3.Relation.toRestriction(CFMetaData,VariableSpecifications)",10,0,n/a,25,1,2,21,11
"org.apache.cassandra.cql3.Relation.toTerm(List<? extends ColumnSpecification>,Raw,String,VariableSpecifications)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.cql3.Relation.toTerms(List<? extends ColumnSpecification>,List<? extends Raw>,String,VariableSpecifications)",5,0,n/a,22,0,4,8,3
"org.apache.cassandra.cql3.ResultSet.Codec.decode(ByteBuf,int)",6,1,n/a,17,0,2,9,2
"org.apache.cassandra.cql3.ResultSet.Codec.encode(ResultSet,ByteBuf,int)",5,1,n/a,12,1,3,7,3
"org.apache.cassandra.cql3.ResultSet.Codec.encodedSize(ResultSet,int)",3,1,n/a,10,1,2,7,3
"org.apache.cassandra.cql3.ResultSet.Flag.deserialize(int)",3,2,n/a,11,1,1,8,3
"org.apache.cassandra.cql3.ResultSet.Flag.serialize(EnumSet<Flag>)",1,2,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.Codec.decode(ByteBuf,int)",18,0,n/a,37,2,2,28,8
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.Codec.encode(PreparedMetadata,ByteBuf,int)",18,0,n/a,35,2,3,18,8
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.Codec.encodedSize(PreparedMetadata,int)",11,0,n/a,23,2,2,14,6
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.PreparedMetadata(EnumSet<Flag>,List<ColumnSpecification>,Short[])",0,3,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.PreparedMetadata(List<ColumnSpecification>,Short[])",5,2,n/a,6,0,2,3,3
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.copy()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.equals(Object)",3,0,n/a,10,0,1,4,4
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.toString()",16,0,n/a,23,2,0,15,5
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.Codec.decode(ByteBuf,int)",22,0,n/a,31,1,2,24,7
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.Codec.encode(ResultMetadata,ByteBuf,int)",19,0,n/a,30,3,3,21,8
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.Codec.encodedSize(ResultMetadata,int)",16,0,n/a,29,3,2,20,6
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.ResultMetadata(EnumSet<Flag>,List<ColumnSpecification>,int,PagingState)",0,5,n/a,7,0,4,4,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.ResultMetadata(List<ColumnSpecification>)",6,1,n/a,6,0,1,3,3
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.addNonSerializedColumn(ColumnSpecification)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.copy()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.requestNames()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.setHasMorePages(PagingState)",2,1,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.setSkipMetadata()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.toString()",17,0,n/a,21,2,0,10,4
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.valueCount()",1,3,n/a,5,0,0,1,2
"org.apache.cassandra.cql3.ResultSet.ResultSet(List<ColumnSpecification>)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.ResultSet.ResultSet(ResultMetadata,List<List<ByteBuffer>>)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.ResultSet.addColumnValue(ByteBuffer)",9,3,n/a,6,0,1,3,3
"org.apache.cassandra.cql3.ResultSet.addRow(List<ByteBuffer>)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.ResultSet.isEmpty()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ResultSet.lastRow()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ResultSet.reverse()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ResultSet.size()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.ResultSet.toString()",18,0,n/a,35,4,0,18,6
"org.apache.cassandra.cql3.ResultSet.toThriftResult()",24,1,n/a,33,2,0,24,5
"org.apache.cassandra.cql3.ResultSet.trim(int)",3,0,n/a,9,1,1,6,3
"org.apache.cassandra.cql3.RoleName.getName()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.RoleName.hasName()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.RoleName.setName(String,boolean)",1,0,n/a,4,0,2,1,2
"org.apache.cassandra.cql3.RoleName.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Sets.Adder.Adder(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Sets.Adder.doAdd(Terminal,ColumnDefinition,UpdateParameters)",6,2,n/a,22,2,3,10,6
"org.apache.cassandra.cql3.Sets.Adder.execute(DecoratedKey,UpdateParameters)",3,0,n/a,7,0,2,4,2
"org.apache.cassandra.cql3.Sets.DelayedValue.DelayedValue(Comparator<ByteBuffer>,Set<Term>)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Sets.DelayedValue.bind(QueryOptions)",9,1,n/a,19,1,1,11,5
"org.apache.cassandra.cql3.Sets.DelayedValue.collectMarkerSpecification(VariableSpecifications)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.cql3.Sets.DelayedValue.containsBindMarker()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Sets.DelayedValue.getFunctions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Sets.Discarder.Discarder(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Sets.Discarder.execute(DecoratedKey,UpdateParameters)",7,0,n/a,13,0,2,7,5
"org.apache.cassandra.cql3.Sets.ElementDiscarder.ElementDiscarder(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Sets.ElementDiscarder.execute(DecoratedKey,UpdateParameters)",7,0,n/a,8,0,2,5,2
"org.apache.cassandra.cql3.Sets.Literal.Literal(List<Raw>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Sets.Literal.getText()",4,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Sets.Literal.prepare(String,ColumnSpecification)",15,0,n/a,22,1,2,15,7
"org.apache.cassandra.cql3.Sets.Literal.testAssignment(String,ColumnSpecification)",4,0,n/a,15,1,2,8,5
"org.apache.cassandra.cql3.Sets.Literal.validateAssignableTo(String,ColumnSpecification)",10,1,n/a,17,1,2,8,6
"org.apache.cassandra.cql3.Sets.Marker.Marker(int,ColumnSpecification)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Sets.Marker.bind(QueryOptions)",4,0,n/a,9,0,1,6,3
"org.apache.cassandra.cql3.Sets.Sets()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.cql3.Sets.Setter.Setter(ColumnDefinition,Term)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Sets.Setter.execute(DecoratedKey,UpdateParameters)",4,0,n/a,10,0,2,6,3
"org.apache.cassandra.cql3.Sets.Value.Value(SortedSet<ByteBuffer>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Sets.Value.equals(SetType,Value)",9,0,n/a,12,0,2,9,4
"org.apache.cassandra.cql3.Sets.Value.fromSerialized(ByteBuffer,SetType,int)",10,1,n/a,17,1,3,7,3
"org.apache.cassandra.cql3.Sets.Value.get(int)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Sets.valueSpecOf(ColumnSpecification)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.SingleColumnRelation(Raw,Operator,Raw)",1,2,n/a,11,0,3,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.SingleColumnRelation(Raw,Raw,Operator,Raw)",1,1,n/a,12,0,4,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.SingleColumnRelation(Raw,Raw,Operator,Raw,List<Raw>)",0,3,n/a,10,0,5,7,2
"org.apache.cassandra.cql3.SingleColumnRelation.canHaveOnlyOneValue()",3,1,n/a,4,0,0,1,4
"org.apache.cassandra.cql3.SingleColumnRelation.createInRelation(Raw,List<Raw>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.getEntity()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.getInValues()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.getMapKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.getValue()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.isLegalRelationForNonFrozenCollection()",3,1,n/a,4,0,0,1,3
"org.apache.cassandra.cql3.SingleColumnRelation.isMapEntryEquality()",1,1,n/a,4,0,0,1,2
"org.apache.cassandra.cql3.SingleColumnRelation.makeCollectionReceiver(ColumnSpecification,boolean)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.SingleColumnRelation.newContainsRestriction(CFMetaData,VariableSpecifications,boolean)",5,0,n/a,9,0,3,3,1
"org.apache.cassandra.cql3.SingleColumnRelation.newEQRestriction(CFMetaData,VariableSpecifications)",14,0,n/a,15,1,2,8,2
"org.apache.cassandra.cql3.SingleColumnRelation.newINRestriction(CFMetaData,VariableSpecifications)",7,0,n/a,14,1,2,7,2
"org.apache.cassandra.cql3.SingleColumnRelation.newIsNotRestriction(CFMetaData,VariableSpecifications)",3,0,n/a,9,0,2,3,1
"org.apache.cassandra.cql3.SingleColumnRelation.newSliceRestriction(CFMetaData,VariableSpecifications,Bound,boolean)",5,0,n/a,10,0,4,3,1
"org.apache.cassandra.cql3.SingleColumnRelation.renameIdentifier(Raw,Raw)",3,0,n/a,6,0,2,1,2
"org.apache.cassandra.cql3.SingleColumnRelation.toReceivers(ColumnDefinition,boolean)",38,5,n/a,65,2,2,23,15
"org.apache.cassandra.cql3.SingleColumnRelation.toString()",5,1,n/a,10,0,0,6,3
"org.apache.cassandra.cql3.SingleColumnRelation.toTerm(List<? extends ColumnSpecification>,Raw,String,VariableSpecifications)",4,6,n/a,12,0,4,4,1
"org.apache.cassandra.cql3.SingleColumnRelation.withNonStrictOperator()",2,0,n/a,9,1,0,7,4
"org.apache.cassandra.cql3.Term.MultiColumnRaw.prepare(String,List<? extends ColumnSpecification>)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Term.MultiItemTerminal.getElements()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Term.NonTerminal.bindAndGet(QueryOptions)",3,1,n/a,5,0,1,2,2
"org.apache.cassandra.cql3.Term.Raw.getText()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Term.Raw.prepare(String,ColumnSpecification)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.Term.Raw.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Term.Terminal.bind(QueryOptions)",0,1,n/a,1,0,1,1,1
"org.apache.cassandra.cql3.Term.Terminal.bindAndGet(QueryOptions)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Term.Terminal.collectMarkerSpecification(VariableSpecifications)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.cql3.Term.Terminal.containsBindMarker()",0,0,n/a,6,0,0,1,1
"org.apache.cassandra.cql3.Term.Terminal.get(int)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.Term.Terminal.getFunctions()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Term.bind(QueryOptions)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.Term.bindAndGet(QueryOptions)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.Term.collectMarkerSpecification(VariableSpecifications)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.Term.containsBindMarker()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Term.getFunctions()",n/a,5,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.Terms.getFunctions(Iterable<Term>)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.TokenRelation.TokenRelation(List<Raw>,Operator,Raw)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.TokenRelation.getColumnDefinitions(CFMetaData)",3,2,n/a,16,1,1,4,2
"org.apache.cassandra.cql3.TokenRelation.getInValues()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.TokenRelation.getValue()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.TokenRelation.newContainsRestriction(CFMetaData,VariableSpecifications,boolean)",2,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.TokenRelation.newEQRestriction(CFMetaData,VariableSpecifications)",4,0,n/a,7,0,2,3,1
"org.apache.cassandra.cql3.TokenRelation.newINRestriction(CFMetaData,VariableSpecifications)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.TokenRelation.newIsNotRestriction(CFMetaData,VariableSpecifications)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.TokenRelation.newSliceRestriction(CFMetaData,VariableSpecifications,Bound,boolean)",4,0,n/a,10,0,4,3,1
"org.apache.cassandra.cql3.TokenRelation.onToken()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.TokenRelation.renameIdentifier(Raw,Raw)",8,0,n/a,7,0,2,4,3
"org.apache.cassandra.cql3.TokenRelation.toReceivers(CFMetaData,List<ColumnDefinition>)",18,2,n/a,27,1,2,7,2
"org.apache.cassandra.cql3.TokenRelation.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.TokenRelation.toTerm(List<? extends ColumnSpecification>,Raw,String,VariableSpecifications)",3,2,n/a,10,0,4,3,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.DelayedValue(TupleType,List<Term>)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.bind(QueryOptions)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.bindAndGet(QueryOptions)",2,0,n/a,6,0,1,1,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.bindInternal(QueryOptions)",6,2,n/a,12,1,1,8,3
"org.apache.cassandra.cql3.Tuples.DelayedValue.collectMarkerSpecification(VariableSpecifications)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.cql3.Tuples.DelayedValue.containsBindMarker()",1,0,n/a,7,0,0,4,3
"org.apache.cassandra.cql3.Tuples.DelayedValue.getFunctions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Tuples.DelayedValue.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.Tuples.INRaw.INRaw(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Tuples.INRaw.makeInReceiver(List<? extends ColumnSpecification>)",20,1,n/a,19,1,1,16,5
"org.apache.cassandra.cql3.Tuples.INRaw.prepare(String,List<? extends ColumnSpecification>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Tuples.InMarker.InMarker(int,ColumnSpecification)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.Tuples.InMarker.bind(QueryOptions)",5,0,n/a,7,0,1,4,3
"org.apache.cassandra.cql3.Tuples.InValue.InValue(List<List<ByteBuffer>>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Tuples.InValue.fromSerialized(ByteBuffer,ListType,QueryOptions)",15,1,n/a,20,1,3,9,3
"org.apache.cassandra.cql3.Tuples.InValue.get(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Tuples.InValue.getSplitValues()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Tuples.Literal.Literal(List<Raw>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Tuples.Literal.getText()",4,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Tuples.Literal.prepare(String,ColumnSpecification)",10,0,n/a,15,1,2,12,4
"org.apache.cassandra.cql3.Tuples.Literal.prepare(String,List<? extends ColumnSpecification>)",20,0,n/a,18,1,2,15,5
"org.apache.cassandra.cql3.Tuples.Literal.testAssignment(String,ColumnSpecification)",1,0,n/a,12,1,2,4,2
"org.apache.cassandra.cql3.Tuples.Literal.validateAssignableTo(String,ColumnSpecification)",17,2,n/a,16,1,2,12,5
"org.apache.cassandra.cql3.Tuples.Marker.Marker(int,ColumnSpecification)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Tuples.Marker.bind(QueryOptions)",5,0,n/a,7,0,1,4,3
"org.apache.cassandra.cql3.Tuples.Raw.Raw(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Tuples.Raw.makeReceiver(List<? extends ColumnSpecification>)",16,1,n/a,17,1,1,14,3
"org.apache.cassandra.cql3.Tuples.Raw.prepare(String,List<? extends ColumnSpecification>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Tuples.Tuples()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.cql3.Tuples.Value.Value(ByteBuffer[])",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Tuples.Value.fromSerialized(ByteBuffer,TupleType)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.Tuples.Value.get(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.Tuples.Value.getElements()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.Tuples.componentSpecOf(ColumnSpecification,int)",4,2,n/a,7,0,2,1,1
"org.apache.cassandra.cql3.Tuples.tupleToString(List<?>)",8,1,n/a,12,1,1,9,3
"org.apache.cassandra.cql3.TypeCast.TypeCast(Raw,Raw)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.TypeCast.castedSpecOf(String,ColumnSpecification)",5,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.TypeCast.getText()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.TypeCast.prepare(String,ColumnSpecification)",11,0,n/a,8,0,2,5,3
"org.apache.cassandra.cql3.TypeCast.testAssignment(String,ColumnSpecification)",4,1,n/a,10,0,2,6,3
"org.apache.cassandra.cql3.UTName.UTName(ColumnIdentifier,ColumnIdentifier)",1,0,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.UTName.getKeyspace()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UTName.getStringTypeName()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UTName.getUserTypeName()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UTName.hasKeyspace()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UTName.setKeyspace(String)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UTName.toString()",1,0,n/a,5,0,0,1,2
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.FromPager(SelectStatement,QueryPager,int)",2,1,n/a,7,0,3,4,1
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.iterator()",11,0,n/a,14,4,0,8,4
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.metadata()",0,10,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.one()",1,67,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromPager.size()",1,27,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.FromResultList(List<Map<String, ByteBuffer>>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.iterator()",6,0,n/a,6,2,0,4,2
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.metadata()",1,10,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.one()",5,67,n/a,6,0,0,3,2
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList.size()",1,27,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.FromResultSet(ResultSet)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.iterator()",7,0,n/a,6,2,0,4,2
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.metadata()",1,10,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.one()",6,67,n/a,6,0,0,3,2
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet.size()",1,27,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.Row(List<ColumnSpecification>,List<ByteBuffer>)",6,3,n/a,6,0,2,5,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.Row(Map<String, ByteBuffer>)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.fromInternalRow(CFMetaData,DecoratedKey,Row)",24,1,n/a,26,2,3,16,7
"org.apache.cassandra.cql3.UntypedResultSet.Row.getBlob(String)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getBoolean(String)",2,3,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getByte(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getBytes(String)",1,19,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getColumns()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getDouble(String)",2,5,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getFrozenList(String,AbstractType<T>)",3,0,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getFrozenMap(String,AbstractType<K>,AbstractType<V>)",3,1,n/a,5,0,3,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getFrozenSet(String,AbstractType<T>)",3,0,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getFrozenTextMap(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getInetAddress(String)",2,6,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getInt(String)",2,30,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getList(String,AbstractType<T>)",3,6,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getLong(String)",2,24,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getMap(String,AbstractType<K>,AbstractType<V>)",3,5,n/a,5,0,3,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getSet(String,AbstractType<T>)",3,3,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.UntypedResultSet.Row.getShort(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getString(String)",2,65,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getTextMap(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getTimestamp(String)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.getUUID(String)",2,12,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.has(String)",1,47,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.Row.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.create(List<Map<String, ByteBuffer>>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.create(ResultSet)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UntypedResultSet.create(SelectStatement,QueryPager,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.UntypedResultSet.isEmpty()",1,23,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UntypedResultSet.metadata()",n/a,10,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.UntypedResultSet.one()",n/a,67,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.UntypedResultSet.size()",n/a,27,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.UpdateParameters.UpdateParameters(CFMetaData,PartitionColumns,QueryOptions,long,int,Map<DecoratedKey, Partition>)",4,0,n/a,21,0,6,10,2
"org.apache.cassandra.cql3.UpdateParameters.addCell(ColumnDefinition,ByteBuffer)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.UpdateParameters.addCell(ColumnDefinition,CellPath,ByteBuffer)",3,1,n/a,7,0,3,2,2
"org.apache.cassandra.cql3.UpdateParameters.addCounter(ColumnDefinition,long)",4,0,n/a,13,0,2,2,1
"org.apache.cassandra.cql3.UpdateParameters.addPrimaryKeyLivenessInfo()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UpdateParameters.addRowDeletion()",6,0,n/a,11,0,0,3,3
"org.apache.cassandra.cql3.UpdateParameters.addTombstone(ColumnDefinition)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UpdateParameters.addTombstone(ColumnDefinition,CellPath)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.UpdateParameters.buildRow()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.cql3.UpdateParameters.currentClustering()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UpdateParameters.deletionTime()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UpdateParameters.getPrefetchedRow(DecoratedKey,Clustering)",5,0,n/a,7,0,2,4,3
"org.apache.cassandra.cql3.UpdateParameters.makeRangeTombstone(ClusteringComparator,Clustering)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.UpdateParameters.makeRangeTombstone(Slice)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UpdateParameters.newRow(Clustering)",11,0,n/a,26,1,1,13,8
"org.apache.cassandra.cql3.UpdateParameters.setComplexDeletionTime(ColumnDefinition)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UpdateParameters.setComplexDeletionTimeForOverwrite(ColumnDefinition)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UserTypes.DelayedValue.DelayedValue(UserType,List<Term>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.UserTypes.DelayedValue.bind(QueryOptions)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UserTypes.DelayedValue.bindAndGet(QueryOptions)",2,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.UserTypes.DelayedValue.bindInternal(QueryOptions)",8,1,n/a,12,1,1,8,3
"org.apache.cassandra.cql3.UserTypes.DelayedValue.collectMarkerSpecification(VariableSpecifications)",3,0,n/a,5,0,1,4,2
"org.apache.cassandra.cql3.UserTypes.DelayedValue.containsBindMarker()",1,0,n/a,7,0,0,4,3
"org.apache.cassandra.cql3.UserTypes.DelayedValue.getFunctions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.UserTypes.Literal.Literal(Map<ColumnIdentifier, Raw>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.UserTypes.Literal.getText()",16,0,n/a,15,1,0,10,3
"org.apache.cassandra.cql3.UserTypes.Literal.prepare(String,ColumnSpecification)",19,0,n/a,30,1,2,23,8
"org.apache.cassandra.cql3.UserTypes.Literal.testAssignment(String,ColumnSpecification)",1,0,n/a,12,1,2,4,2
"org.apache.cassandra.cql3.UserTypes.Literal.validateAssignableTo(String,ColumnSpecification)",13,2,n/a,16,1,2,13,5
"org.apache.cassandra.cql3.UserTypes.UserTypes()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.cql3.UserTypes.fieldSpecOf(ColumnSpecification,int)",5,2,n/a,8,0,2,2,1
"org.apache.cassandra.cql3.VariableSpecifications.VariableSpecifications(List<ColumnIdentifier>)",2,1,n/a,6,0,1,3,1
"org.apache.cassandra.cql3.VariableSpecifications.add(int,ColumnSpecification)",2,0,n/a,10,0,2,6,3
"org.apache.cassandra.cql3.VariableSpecifications.empty()",2,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.VariableSpecifications.getPartitionKeyBindIndexes(CFMetaData)",6,0,n/a,26,2,1,12,7
"org.apache.cassandra.cql3.VariableSpecifications.getSpecifications()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.VariableSpecifications.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.VariableSpecifications.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.WhereClause.Builder.add(CustomIndexExpression)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.WhereClause.Builder.add(Relation)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.WhereClause.Builder.build()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.WhereClause.WhereClause(Builder)",2,2,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.WhereClause.containsCustomExpressions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.WhereClause.empty()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.AbstractFunction(FunctionName,List<AbstractType<?>>,AbstractType<?>)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.functions.AbstractFunction.argTypes()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.equals(Object)",3,0,n/a,10,0,1,4,4
"org.apache.cassandra.cql3.functions.AbstractFunction.getFunctions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.hasReferenceTo(Function)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.name()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.returnType()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.AbstractFunction.testAssignment(String,ColumnSpecification)",5,0,n/a,13,0,2,8,4
"org.apache.cassandra.cql3.functions.AbstractFunction.toString()",12,0,n/a,14,1,0,10,3
"org.apache.cassandra.cql3.functions.AggregateFcts.all()",28,0,n/a,34,2,0,24,3
"org.apache.cassandra.cql3.functions.AggregateFcts.isCountRows(Function)",0,1,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.functions.AggregateFcts.makeCountFunction(AbstractType<?>)",5,1,n/a,7,4,1,8,2
"org.apache.cassandra.cql3.functions.AggregateFcts.makeMaxFunction(AbstractType<?>)",5,1,n/a,8,4,1,9,4
"org.apache.cassandra.cql3.functions.AggregateFcts.makeMinFunction(AbstractType<?>)",5,1,n/a,8,4,1,9,4
"org.apache.cassandra.cql3.functions.AggregateFunction.Aggregate.addInput(int,List<ByteBuffer>)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.functions.AggregateFunction.Aggregate.compute(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.functions.AggregateFunction.Aggregate.reset()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.AggregateFunction.newAggregate()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.BytesConversionFcts.all()",10,0,n/a,17,2,0,8,4
"org.apache.cassandra.cql3.functions.BytesConversionFcts.makeFromBlobFunction(AbstractType<?>)",8,1,n/a,15,3,1,8,3
"org.apache.cassandra.cql3.functions.BytesConversionFcts.makeToBlobFunction(AbstractType<?>)",3,1,n/a,4,2,1,3,1
"org.apache.cassandra.cql3.functions.FromJsonFct.FromJsonFct(AbstractType<?>)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.FromJsonFct.execute(int,List<ByteBuffer>)",14,0,n/a,23,1,2,12,5
"org.apache.cassandra.cql3.functions.FromJsonFct.getInstance(AbstractType<?>)",3,0,n/a,10,1,1,5,2
"org.apache.cassandra.cql3.functions.Function.argTypes()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.Function.getFunctions()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.Function.hasReferenceTo(Function)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.functions.Function.isAggregate()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.Function.isNative()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.Function.name()",n/a,7,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.Function.returnType()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.FunctionCall.FunctionCall(ScalarFunction,List<Term>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.functions.FunctionCall.Raw.Raw(FunctionName,List<Raw>)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.functions.FunctionCall.Raw.getText()",4,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.FunctionCall.Raw.prepare(String,ColumnSpecification)",29,0,n/a,25,1,2,17,6
"org.apache.cassandra.cql3.functions.FunctionCall.Raw.testAssignment(String,ColumnSpecification)",7,0,n/a,26,1,2,10,8
"org.apache.cassandra.cql3.functions.FunctionCall.bind(QueryOptions)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.FunctionCall.bindAndGet(QueryOptions)",8,1,n/a,11,1,1,6,2
"org.apache.cassandra.cql3.functions.FunctionCall.collectMarkerSpecification(VariableSpecifications)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.cql3.functions.FunctionCall.containsBindMarker()",1,0,n/a,9,1,0,4,3
"org.apache.cassandra.cql3.functions.FunctionCall.executeInternal(int,ScalarFunction,List<ByteBuffer>)",8,1,n/a,16,1,3,6,3
"org.apache.cassandra.cql3.functions.FunctionCall.getFunctions()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.FunctionCall.makeTerminal(Function,ByteBuffer,int)",10,1,n/a,12,1,3,10,5
"org.apache.cassandra.cql3.functions.FunctionName.FunctionName(String,String)",0,9,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.functions.FunctionName.asNativeFunction()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.FunctionName.equals(Object)",2,0,n/a,9,0,1,4,3
"org.apache.cassandra.cql3.functions.FunctionName.equalsNativeFunction(FunctionName)",4,0,n/a,7,0,1,4,3
"org.apache.cassandra.cql3.functions.FunctionName.hasKeyspace()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.FunctionName.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.functions.FunctionName.nativeFunction(String)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.FunctionName.toString()",0,0,n/a,5,0,0,1,2
"org.apache.cassandra.cql3.functions.FunctionResolver.FunctionResolver()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.cql3.functions.FunctionResolver.format(Collection<Function>)",4,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.FunctionResolver.get(String,FunctionName,List<? extends AssignmentTestable>,String,String,AbstractType<?>)",34,0,n/a,80,2,6,36,15
"org.apache.cassandra.cql3.functions.FunctionResolver.makeArgSpec(String,String,Function,int)",7,2,n/a,7,0,4,1,1
"org.apache.cassandra.cql3.functions.FunctionResolver.matchAguments(String,Function,List<? extends AssignmentTestable>,String,String)",7,1,n/a,27,2,5,17,6
"org.apache.cassandra.cql3.functions.FunctionResolver.validateTypes(String,Function,List<? extends AssignmentTestable>,String,String)",18,1,n/a,23,1,5,11,5
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.EcjCompilationUnit(String,String)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.acceptResult(CompilationResult)",7,0,n/a,17,1,1,8,4
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.cleanup()",0,0,n/a,4,0,0,0,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.findType(String)",9,0,n/a,23,2,1,11,4
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.findType(char[],char[][])",7,0,n/a,16,1,2,11,4
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.findType(char[][])",5,0,n/a,12,1,1,8,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.getContents()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.getFileName()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.getMainTypeName()",3,0,n/a,6,0,0,2,2
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.getPackageName()",4,0,n/a,9,0,0,7,2
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.ignoreOptionalProblems()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.isPackage(String)",3,2,n/a,15,1,1,6,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit.isPackage(char[][],char[])",10,0,n/a,19,1,2,14,7
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.EcjTargetClassLoader()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.addClass(String,byte[])",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.classData(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.findClass(String)",4,0,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader.getPermissions(CodeSource)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.JavaBasedUDFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String)",68,0,n/a,145,5,6,81,25
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.composeMethod(Class<?>)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.countNewlines(StringBuilder)",2,1,n/a,8,0,1,7,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.executeUserDefined(int,List<ByteBuffer>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.executor()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.generateArgumentList(Class<?>[],List<ColumnIdentifier>)",8,1,n/a,14,1,2,8,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.generateArguments(Class<?>[],List<ColumnIdentifier>)",19,1,n/a,17,1,2,10,4
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.generateClassName(FunctionName,char)",18,3,n/a,19,1,2,12,3
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.javaSourceName(Class<?>)",3,3,n/a,5,0,1,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.JavaUDF(DataType,DataType[])",0,16,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.functions.JavaUDF.compose(int,int,ByteBuffer)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.functions.JavaUDF.compose_boolean(int,int,ByteBuffer)",3,0,n/a,6,0,3,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_byte(int,int,ByteBuffer)",3,0,n/a,6,0,3,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_double(int,int,ByteBuffer)",3,0,n/a,6,0,3,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_float(int,int,ByteBuffer)",3,0,n/a,6,0,3,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_int(int,int,ByteBuffer)",3,0,n/a,6,0,3,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_long(int,int,ByteBuffer)",3,0,n/a,6,0,3,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.compose_short(int,int,ByteBuffer)",3,0,n/a,6,0,3,2,2
"org.apache.cassandra.cql3.functions.JavaUDF.decompose(int,Object)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.functions.JavaUDF.executeImpl(int,List<ByteBuffer>)",n/a,0,16,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.functions.NativeAggregateFunction.NativeAggregateFunction(String,AbstractType<?>,AbstractType<?>...)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.functions.NativeAggregateFunction.isAggregate()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.NativeFunction.NativeFunction(String,AbstractType<?>,AbstractType<?>...)",3,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.functions.NativeFunction.isNative()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.NativeScalarFunction.NativeScalarFunction(String,AbstractType<?>,AbstractType<?>...)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.functions.NativeScalarFunction.isAggregate()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.NativeScalarFunction.isCalledOnNullInput()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.ScalarFunction.execute(int,List<ByteBuffer>)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.functions.ScalarFunction.isCalledOnNullInput()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.ScriptBasedUDFunction.ScriptBasedUDFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String,String)",10,0,n/a,26,1,7,9,3
"org.apache.cassandra.cql3.functions.ScriptBasedUDFunction.executeUserDefined(int,List<ByteBuffer>)",38,0,n/a,76,4,2,59,26
"org.apache.cassandra.cql3.functions.ScriptBasedUDFunction.executor()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.SecurityThreadGroup.SecurityThreadGroup(String,Set<String>,ThreadInitializer)",1,0,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.functions.SecurityThreadGroup.ThreadInitializer.initializeThread()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.SecurityThreadGroup.initializeThread()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.SecurityThreadGroup.isPackageAllowed(String)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.ThreadAwareSecurityManager()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkAccess(Thread)",3,0,n/a,8,0,1,3,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkAccess(ThreadGroup)",3,0,n/a,8,0,1,3,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkPackageAccess(String)",7,0,n/a,11,1,1,6,3
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkPermission(Permission)",3,0,n/a,10,0,1,5,3
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.checkPermission(Permission,Object)",2,0,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.install()",2,2,n/a,7,0,0,4,2
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager.isSecuredThread()",6,5,n/a,15,1,0,10,3
"org.apache.cassandra.cql3.functions.TimeFcts.all()",1,0,n/a,15,0,0,1,1
"org.apache.cassandra.cql3.functions.ToJsonFct.ToJsonFct(AbstractType<?>)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.ToJsonFct.execute(int,List<ByteBuffer>)",7,0,n/a,8,0,2,5,2
"org.apache.cassandra.cql3.functions.ToJsonFct.getInstance(List<AbstractType<?>>)",8,0,n/a,13,1,1,8,3
"org.apache.cassandra.cql3.functions.TokenFct.TokenFct(CFMetaData)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.functions.TokenFct.execute(int,List<ByteBuffer>)",10,0,n/a,12,1,2,9,3
"org.apache.cassandra.cql3.functions.TokenFct.getKeyTypes(CFMetaData)",3,1,n/a,8,0,1,5,2
"org.apache.cassandra.cql3.functions.UDAggregate.UDAggregate(FunctionName,List<AbstractType<?>>,AbstractType<?>,ScalarFunction,ScalarFunction,ByteBuffer)",2,2,n/a,13,0,6,5,2
"org.apache.cassandra.cql3.functions.UDAggregate.create(Functions,FunctionName,List<AbstractType<?>>,AbstractType<?>,FunctionName,FunctionName,AbstractType<?>,ByteBuffer)",8,1,n/a,21,0,8,5,2
"org.apache.cassandra.cql3.functions.UDAggregate.createBroken(FunctionName,List<AbstractType<?>>,AbstractType<?>,ByteBuffer,InvalidRequestException)",4,2,n/a,7,2,5,2,1
"org.apache.cassandra.cql3.functions.UDAggregate.equals(Object)",7,0,n/a,14,0,1,4,8
"org.apache.cassandra.cql3.functions.UDAggregate.finalFunction()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.getFunctions()",3,0,n/a,9,0,0,5,3
"org.apache.cassandra.cql3.functions.UDAggregate.hasReferenceTo(Function)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.cql3.functions.UDAggregate.hashCode()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.initialCondition()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.isAggregate()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.isNative()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.newAggregate()",17,0,n/a,6,3,0,22,5
"org.apache.cassandra.cql3.functions.UDAggregate.resolveScalar(Functions,FunctionName,FunctionName,List<AbstractType<?>>)",12,2,n/a,15,0,4,6,3
"org.apache.cassandra.cql3.functions.UDAggregate.stateFunction()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDAggregate.stateType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor.ConstructorVisitor(Set<String>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor.visitInsn(int)",2,0,n/a,8,1,1,3,2
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor.visitInvokeDynamicInsn(String,String,Handle,Object...)",2,0,n/a,5,0,4,2,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor.visitMethodInsn(int,String,String,String,boolean)",5,0,n/a,8,1,5,3,5
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ExecuteImplVisitor.ExecuteImplVisitor(Set<String>)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ExecuteImplVisitor.visitInsn(int)",2,0,n/a,11,1,1,6,2
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ExecuteImplVisitor.visitMethodInsn(int,String,String,String,boolean)",7,0,n/a,17,2,5,8,6
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.UDFByteCodeVerifier()",5,16,n/a,8,0,0,5,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.addDisallowedMethodCall(String,String)",1,5,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.addDisallowedPackage(String)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.verify(byte[])",24,16,n/a,5,3,1,27,10
"org.apache.cassandra.cql3.functions.UDFExecutorService.UDFExecutorService(NamedThreadFactory,String)",3,0,n/a,9,0,2,1,1
"org.apache.cassandra.cql3.functions.UDFExecutorService.afterExecute(Runnable,Throwable)",0,0,n/a,3,0,2,0,1
"org.apache.cassandra.cql3.functions.UDFExecutorService.beforeExecute(Thread,Runnable)",0,0,n/a,3,0,2,0,1
"org.apache.cassandra.cql3.functions.UDFunction.ThreadIdAndCpuTime.ThreadIdAndCpuTime()",1,1,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFunction.ThreadIdAndCpuTime.setup()",4,1,n/a,6,0,0,3,1
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.findClass(String)",4,0,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.findResource(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.getResource(String)",2,1,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.getResources(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader.loadClass(String)",4,0,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.functions.UDFunction.UDFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String,String)",3,1,n/a,11,0,7,1,1
"org.apache.cassandra.cql3.functions.UDFunction.UDFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,DataType[],AbstractType<?>,DataType,boolean,String,String)",4,1,n/a,19,0,9,8,1
"org.apache.cassandra.cql3.functions.UDFunction.argNames()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFunction.assertUdfsEnabled(String)",5,2,n/a,7,0,1,4,4
"org.apache.cassandra.cql3.functions.UDFunction.body()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFunction.compose(DataType[],int,int,ByteBuffer)",1,1,n/a,4,0,4,1,2
"org.apache.cassandra.cql3.functions.UDFunction.compose(int,int,ByteBuffer)",1,0,n/a,12,0,3,1,1
"org.apache.cassandra.cql3.functions.UDFunction.create(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String,String)",3,1,n/a,17,1,7,6,3
"org.apache.cassandra.cql3.functions.UDFunction.createBrokenFunction(FunctionName,List<ColumnIdentifier>,List<AbstractType<?>>,AbstractType<?>,boolean,String,String,InvalidRequestException)",5,2,n/a,7,2,8,3,1
"org.apache.cassandra.cql3.functions.UDFunction.decompose(DataType,int,Object)",1,1,n/a,4,0,3,1,2
"org.apache.cassandra.cql3.functions.UDFunction.decompose(int,Object)",1,0,n/a,11,0,2,1,1
"org.apache.cassandra.cql3.functions.UDFunction.equals(Object)",6,0,n/a,13,0,1,4,7
"org.apache.cassandra.cql3.functions.UDFunction.execute(int,List<ByteBuffer>)",12,0,n/a,28,1,2,14,6
"org.apache.cassandra.cql3.functions.UDFunction.executeAsync(int,List<ByteBuffer>)",36,1,n/a,73,2,2,33,12
"org.apache.cassandra.cql3.functions.UDFunction.executeUserDefined(int,List<ByteBuffer>)",n/a,2,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.functions.UDFunction.executor()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.functions.UDFunction.hashCode()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFunction.initializeThread()",7,0,n/a,7,0,0,2,1
"org.apache.cassandra.cql3.functions.UDFunction.isAggregate()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFunction.isCallableWrtNullable(List<ByteBuffer>)",4,1,n/a,8,0,1,7,4
"org.apache.cassandra.cql3.functions.UDFunction.isCalledOnNullInput()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFunction.isNative()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFunction.language()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.functions.UDFunction.makeEmptyParametersNull(List<ByteBuffer>)",7,1,n/a,11,1,1,7,3
"org.apache.cassandra.cql3.functions.UDFunction.secureResource(String)",6,3,n/a,19,2,1,11,6
"org.apache.cassandra.cql3.functions.UDFunction.userTypeUpdated(String,String)",11,0,n/a,24,3,2,17,6
"org.apache.cassandra.cql3.functions.UDHelper.asJavaClass(DataType)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.UDHelper.codecFor(DataType)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.functions.UDHelper.deserialize(DataType,int,ByteBuffer)",3,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.functions.UDHelper.driverType(AbstractType)",8,1,n/a,22,1,1,5,3
"org.apache.cassandra.cql3.functions.UDHelper.driverTypes(List<AbstractType<?>>)",3,0,n/a,14,0,1,6,2
"org.apache.cassandra.cql3.functions.UDHelper.isNullOrEmpty(AbstractType<?>,ByteBuffer)",2,3,n/a,5,0,2,1,3
"org.apache.cassandra.cql3.functions.UDHelper.javaTypes(DataType[],boolean)",1,0,n/a,35,2,2,22,10
"org.apache.cassandra.cql3.functions.UDHelper.serialize(DataType,int,Object)",10,0,n/a,7,0,3,4,2
"org.apache.cassandra.cql3.functions.UuidFcts.all()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions.AbstractPrimaryKeyRestrictions(ClusteringComparator)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions.bounds(Bound,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions.isEmpty()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions.size()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.hasBound(Bound)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isContains()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isEQ()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isIN()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isInclusive(Bound)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isMultiColumn()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isNotNull()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isOnToken()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.AbstractRestriction.isSlice()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.CustomIndexExpression.CustomIndexExpression(IndexName,Raw)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.CustomIndexExpression.addToRowFilter(RowFilter,CFMetaData,QueryOptions)",7,0,n/a,10,0,3,1,1
"org.apache.cassandra.cql3.restrictions.CustomIndexExpression.prepareValue(CFMetaData,AbstractType<?>,VariableSpecifications)",3,0,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",2,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",2,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.appendTo(MultiCBuilder,QueryOptions)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.bounds(Bound,QueryOptions)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.boundsAsClustering(Bound,QueryOptions)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getColumnDefs()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getDelegate()",n/a,24,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getFirstColumn()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getFunctions()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.getLastColumn()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.hasBound(Bound)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.hasSupportingIndex(SecondaryIndexManager)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isContains()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isEQ()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isEmpty()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isIN()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isInclusive(Bound)",3,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isMultiColumn()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isNotNull()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isOnToken()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.isSlice()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.mergeWith(Restriction)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.size()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.values(QueryOptions)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions.valuesAsClustering(QueryOptions)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.add(CustomIndexExpression)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.add(Restrictions)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.customExpressionNotSupported(IndexName)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.getCustomIndexExpressions()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.getRestrictions()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.indexNotFound(IndexName,CFMetaData)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.invalidIndex(IndexName,CFMetaData)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.isEmpty()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.cql3.restrictions.IndexRestrictions.nonCustomIndexInExpression(IndexName)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.EQRestriction(List<ColumnDefinition>,Term)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",6,0,n/a,11,1,3,7,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.appendTo(MultiCBuilder,QueryOptions)",8,0,n/a,12,1,2,8,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.doMergeWith(Restriction)",2,2,n/a,6,0,1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.isSupportedBy(Index)",1,1,n/a,8,0,1,4,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.INRestriction(List<ColumnDefinition>)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",8,0,n/a,14,1,3,8,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.appendTo(MultiCBuilder,QueryOptions)",5,0,n/a,12,0,2,5,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.doMergeWith(Restriction)",2,2,n/a,6,0,1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.isIN()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.isSupportedBy(Index)",1,1,n/a,8,0,1,4,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction.splitValues(QueryOptions)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker.InRestrictionWithMarker(List<ColumnDefinition>,AbstractMarker)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker.splitValues(QueryOptions)",3,2,n/a,8,0,1,4,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues.InRestrictionWithValues(List<ColumnDefinition>,List<Term>)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues.splitValues(QueryOptions)",5,2,n/a,11,1,1,5,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.MultiColumnRestriction(List<ColumnDefinition>)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.NotNullRestriction(List<ColumnDefinition>)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.appendTo(MultiCBuilder,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.doMergeWith(Restriction)",2,2,n/a,6,0,1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.isNotNull()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.isSupportedBy(Index)",1,1,n/a,8,0,1,4,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.SliceRestriction(List<ColumnDefinition>,Bound,boolean,Term)",2,1,n/a,4,0,4,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.SliceRestriction(List<ColumnDefinition>,TermSlice)",1,2,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,0,n/a,7,0,3,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",6,0,n/a,11,1,3,7,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.appendTo(MultiCBuilder,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.componentBounds(Bound,QueryOptions)",6,1,n/a,17,1,2,4,2
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.doMergeWith(Restriction)",25,2,n/a,23,1,1,9,6
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.hasBound(Bound)",1,2,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.isInclusive(Bound)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.isSlice()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.isSupportedBy(Index)",1,1,n/a,8,0,1,4,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.doMergeWith(Restriction)",n/a,2,4,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getColumnDefs()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getColumnsInCommons(Restriction)",9,6,n/a,21,1,1,8,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getFirstColumn()",1,3,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.getLastColumn()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.hasSupportingIndex(SecondaryIndexManager)",2,0,n/a,8,0,1,4,3
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.isMultiColumn()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.isSupportedBy(Index)",n/a,1,4,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.mergeWith(Restriction)",5,0,n/a,11,1,1,3,3
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.PrimaryKeyRestrictionSet(ClusteringComparator,boolean)",2,0,n/a,7,0,2,4,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.PrimaryKeyRestrictionSet(PrimaryKeyRestrictionSet,Restriction)",21,1,n/a,28,1,2,16,11
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",7,0,n/a,19,2,3,8,6
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.appendTo(MultiCBuilder,QueryOptions)",2,1,n/a,11,1,2,5,3
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.bounds(Bound,QueryOptions)",3,0,n/a,7,0,2,3,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.boundsAsClustering(Bound,QueryOptions)",21,1,n/a,33,3,2,17,8
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.getColumnDefs()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.getFirstColumn()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.getLastColumn()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.hasBound(Bound)",3,0,n/a,7,0,1,3,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.hasSupportingIndex(SecondaryIndexManager)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isContains()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isEQ()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isIN()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isInclusive(Bound)",3,0,n/a,7,0,1,3,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isMultiColumn()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isOnToken()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.isSlice()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.mergeWith(Restriction)",4,0,n/a,11,1,1,5,3
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.toByteBuffers(SortedSet<? extends ClusteringPrefix>)",4,2,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.values(QueryOptions)",3,0,n/a,7,0,1,3,2
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet.valuesAsClustering(QueryOptions)",3,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictions.bounds(Bound,QueryOptions)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictions.boundsAsClustering(Bound,QueryOptions)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictions.mergeWith(Restriction)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictions.values(QueryOptions)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictions.valuesAsClustering(QueryOptions)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.appendTo(MultiCBuilder,QueryOptions)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.getColumnDefs()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.getFirstColumn()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.getFunctions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.getLastColumn()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.hasBound(Bound)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.hasSupportingIndex(SecondaryIndexManager)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.isContains()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.isEQ()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.isIN()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.isInclusive(Bound)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.isMultiColumn()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.isNotNull()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.isOnToken()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.isSlice()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restriction.mergeWith(Restriction)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.RestrictionSet.RestrictionSet()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.RestrictionSet(TreeMap<ColumnDefinition, Restriction>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.addRestriction(Restriction)",3,0,n/a,13,0,1,2,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",2,0,n/a,6,0,3,2,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.firstColumn()",2,0,n/a,9,0,0,1,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.getColumnDefs()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.getFunctions()",5,0,n/a,4,2,0,3,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.getRestrictions(Collection<ColumnDefinition>)",3,1,n/a,17,1,1,6,3
"org.apache.cassandra.cql3.restrictions.RestrictionSet.hasMultipleContains()",5,0,n/a,19,2,0,6,3
"org.apache.cassandra.cql3.restrictions.RestrictionSet.hasSupportingIndex(SecondaryIndexManager)",2,0,n/a,10,1,1,4,3
"org.apache.cassandra.cql3.restrictions.RestrictionSet.isEmpty()",2,3,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.iterator()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.lastColumn()",2,0,n/a,9,0,0,1,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.lastRestriction()",3,0,n/a,9,0,0,1,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.mergeRestrictions(Restriction,Restriction)",1,2,n/a,14,0,2,1,2
"org.apache.cassandra.cql3.restrictions.RestrictionSet.mergeRestrictions(TreeMap<ColumnDefinition, Restriction>,Restriction)",6,2,n/a,22,2,2,10,5
"org.apache.cassandra.cql3.restrictions.RestrictionSet.nextColumn(ColumnDefinition)",2,0,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.restrictions.RestrictionSet.size()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.Restrictions.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restrictions.getColumnDefs()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restrictions.getFunctions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restrictions.hasSupportingIndex(SecondaryIndexManager)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restrictions.isEmpty()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.Restrictions.size()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.ContainsRestriction(ColumnDefinition)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.ContainsRestriction(ColumnDefinition,Term,Term)",3,1,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.ContainsRestriction(ColumnDefinition,Term,boolean)",3,1,n/a,8,0,3,4,2
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",12,0,n/a,13,0,3,11,4
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.appendTo(MultiCBuilder,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.bindAndGet(List<Term>,QueryOptions)",4,4,n/a,15,0,2,4,2
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.canBeConvertedToMultiColumnRestriction()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.copyKeysAndValues(ContainsRestriction,ContainsRestriction)",4,2,n/a,13,0,2,4,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.doMergeWith(Restriction)",5,1,n/a,11,0,1,5,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.getFunctions()",5,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.hasBound(Bound)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.isContains()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.isInclusive(Bound)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.isSupportedBy(Index)",6,1,n/a,12,0,1,8,4
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.numberOfEntries()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.numberOfKeys()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.numberOfValues()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.toMultiColumnRestriction()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.EQRestriction(ColumnDefinition,Term)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",2,0,n/a,7,0,3,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.appendTo(MultiCBuilder,QueryOptions)",6,0,n/a,8,0,2,4,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.doMergeWith(Restriction)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.isEQ()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.isSupportedBy(Index)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.toMultiColumnRestriction()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.INRestriction(ColumnDefinition)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",5,0,n/a,9,0,3,3,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.appendTo(MultiCBuilder,QueryOptions)",6,0,n/a,8,0,2,4,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.doMergeWith(Restriction)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.getValues(QueryOptions)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.isIN()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction.isSupportedBy(Index)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.InRestrictionWithMarker(ColumnDefinition,AbstractMarker)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.getValues(QueryOptions)",4,2,n/a,9,0,1,5,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.toMultiColumnRestriction()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.InRestrictionWithValues(ColumnDefinition,List<Term>)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.getValues(QueryOptions)",4,2,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.toMultiColumnRestriction()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.IsNotNullRestriction(ColumnDefinition)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,0,n/a,7,0,3,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.appendTo(MultiCBuilder,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.doMergeWith(Restriction)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.isNotNull()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.isSupportedBy(Index)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.toMultiColumnRestriction()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SingleColumnRestriction(ColumnDefinition)",0,8,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.SliceRestriction(ColumnDefinition,Bound,boolean,Term)",2,1,n/a,5,0,4,2,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.SliceRestriction(ColumnDefinition,TermSlice)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",6,0,n/a,7,0,3,3,3
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.appendBoundTo(MultiCBuilder,Bound,QueryOptions)",4,0,n/a,7,0,3,3,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.appendTo(MultiCBuilder,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.doMergeWith(Restriction)",10,1,n/a,13,0,1,5,3
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.hasBound(Bound)",1,5,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.isInclusive(Bound)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.isSlice()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.isSupportedBy(Index)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.toMultiColumnRestriction()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.canBeConvertedToMultiColumnRestriction()",0,1,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.doMergeWith(Restriction)",n/a,1,5,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.getColumnDefs()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.getFirstColumn()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.getLastColumn()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.hasSupportingIndex(SecondaryIndexManager)",2,0,n/a,8,0,1,4,3
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.isSupportedBy(Index)",n/a,1,5,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.mergeWith(Restriction)",5,0,n/a,10,1,1,3,3
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.toMultiColumnRestriction()",n/a,1,6,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.StatementRestrictions(StatementType,CFMetaData)",5,2,n/a,9,0,2,6,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.StatementRestrictions(StatementType,CFMetaData,WhereClause,VariableSpecifications,boolean,boolean,boolean,boolean)",39,4,n/a,98,2,8,42,25
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.addRestriction(Restriction)",5,1,n/a,9,0,1,5,3
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.addSingleColumnRestriction(SingleColumnRestriction)",5,1,n/a,10,0,1,6,3
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.areRequestedBoundsInclusive(Bound)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.empty(StatementType,CFMetaData)",1,1,n/a,11,0,2,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getClusteringColumns(QueryOptions)",3,2,n/a,15,0,1,3,2
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getClusteringColumnsBounds(Bound,QueryOptions)",1,4,n/a,11,0,2,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getFunctions()",4,2,n/a,6,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyBound(Bound,QueryOptions)",3,2,n/a,16,0,2,3,2
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyBounds(IPartitioner,QueryOptions)",13,1,n/a,19,1,2,9,6
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyBounds(QueryOptions)",3,1,n/a,15,1,1,4,2
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyBoundsForTokenRestrictions(IPartitioner,QueryOptions)",12,1,n/a,25,0,2,10,9
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeyUnrestrictedComponents()",5,2,n/a,10,0,0,3,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getPartitionKeys(QueryOptions)",1,2,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getRowFilter(SecondaryIndexManager,QueryOptions)",6,1,n/a,11,0,2,8,4
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getTokenBound(Bound,QueryOptions,IPartitioner)",7,2,n/a,8,0,3,5,2
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.getUnrestrictedClusteringColumns()",6,1,n/a,10,0,0,3,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasAllPKColumnsRestrictedByEqualities()",7,1,n/a,14,0,0,1,7
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasClusteringColumnsRestriction()",1,7,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasPartitionKeyRestrictions()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasUnrestrictedClusteringColumns()",3,2,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.hasUnrestrictedPartitionKeyComponents()",3,4,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.isColumnRange()",6,3,n/a,15,0,0,2,4
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.isKeyRange()",0,4,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.isPartitionKeyRestrictionsOnToken()",1,1,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.isRestricted(ColumnDefinition)",9,1,n/a,14,0,1,7,4
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.keyIsInRelation()",1,4,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.needFiltering()",6,1,n/a,14,0,0,4,6
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.nonPKRestrictedColumns(boolean)",7,3,n/a,24,2,1,10,7
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.notNullColumns()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.processClusteringColumnsRestrictions(boolean,boolean,boolean,boolean)",26,1,n/a,51,4,4,20,15
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.processCustomIndexExpressions(List<CustomIndexExpression>,VariableSpecifications,SecondaryIndexManager)",31,1,n/a,26,0,3,20,10
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.processPartitionKeyRestrictions(boolean)",15,1,n/a,33,3,1,12,7
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.usesSecondaryIndexing()",0,4,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.restrictions.StatementRestrictions.validateSecondaryIndexSelections(boolean)",3,1,n/a,10,0,1,2,1
"org.apache.cassandra.cql3.restrictions.TermSlice.TermSlice(Term,boolean,Term,boolean)",0,4,n/a,13,0,4,2,1
"org.apache.cassandra.cql3.restrictions.TermSlice.bound(Bound)",0,8,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TermSlice.getFunctions()",14,0,n/a,11,0,0,7,5
"org.apache.cassandra.cql3.restrictions.TermSlice.getIndexOperator(Bound)",1,0,n/a,12,0,1,3,4
"org.apache.cassandra.cql3.restrictions.TermSlice.hasBound(Bound)",0,9,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TermSlice.isInclusive(Bound)",0,6,n/a,11,0,1,1,2
"org.apache.cassandra.cql3.restrictions.TermSlice.isSupportedBy(ColumnDefinition,Index)",8,0,n/a,18,0,2,6,5
"org.apache.cassandra.cql3.restrictions.TermSlice.merge(TermSlice)",13,0,n/a,22,1,1,5,2
"org.apache.cassandra.cql3.restrictions.TermSlice.newInstance(Bound,boolean,Term)",3,0,n/a,13,0,3,1,2
"org.apache.cassandra.cql3.restrictions.TermSlice.toString()",1,0,n/a,8,0,0,1,3
"org.apache.cassandra.cql3.restrictions.TokenFilter.TokenFilter(PrimaryKeyRestrictions,TokenRestriction)",0,2,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.bounds(Bound,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.boundsAsClustering(Bound,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.deserializeToken(ByteBuffer)",2,4,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.filter(List<ByteBuffer>,QueryOptions)",5,1,n/a,14,0,2,2,2
"org.apache.cassandra.cql3.restrictions.TokenFilter.filterWithRangeSet(RangeSet<Token>,List<ByteBuffer>)",4,1,n/a,19,1,2,7,3
"org.apache.cassandra.cql3.restrictions.TokenFilter.getDelegate()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.hasBound(Bound)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.isInclusive(Bound)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.isOnToken()",2,0,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.mergeWith(Restriction)",5,0,n/a,7,0,1,3,2
"org.apache.cassandra.cql3.restrictions.TokenFilter.toBoundType(boolean)",0,3,n/a,4,0,1,1,2
"org.apache.cassandra.cql3.restrictions.TokenFilter.toRangeSet(List<ByteBuffer>)",5,1,n/a,13,0,1,4,2
"org.apache.cassandra.cql3.restrictions.TokenFilter.toRangeSet(TokenRestriction,QueryOptions)",32,1,n/a,36,2,2,14,7
"org.apache.cassandra.cql3.restrictions.TokenFilter.values(QueryOptions)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenFilter.valuesAsClustering(QueryOptions)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.EQRestriction(CFMetaData,List<ColumnDefinition>,Term)",1,1,n/a,5,0,3,2,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.doMergeWith(TokenRestriction)",4,1,n/a,6,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.isEQ()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction.values(QueryOptions)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.SliceRestriction(CFMetaData,List<ColumnDefinition>,Bound,boolean,Term)",2,1,n/a,5,0,5,2,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.SliceRestriction(CFMetaData,List<ColumnDefinition>,TermSlice)",1,1,n/a,5,0,3,2,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.bounds(Bound,QueryOptions)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.doMergeWith(TokenRestriction)",13,1,n/a,16,0,1,8,6
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.getFunctions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.hasBound(Bound)",1,4,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.isInclusive(Bound)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.isSlice()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction.values(QueryOptions)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.TokenRestriction(CFMetaData,List<ColumnDefinition>)",2,3,n/a,11,0,2,3,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.addRowFilterTo(RowFilter,SecondaryIndexManager,QueryOptions)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.appendTo(MultiCBuilder,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.boundsAsClustering(Bound,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.doMergeWith(TokenRestriction)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.restrictions.TokenRestriction.getColumnDefs()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.getColumnNamesAsString()",3,3,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.getFirstColumn()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.getLastColumn()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.hasSupportingIndex(SecondaryIndexManager)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.isOnToken()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.restrictions.TokenRestriction.mergeWith(Restriction)",4,0,n/a,7,0,1,3,2
"org.apache.cassandra.cql3.restrictions.TokenRestriction.toPrimaryKeyRestriction(Restriction)",2,1,n/a,13,0,1,3,2
"org.apache.cassandra.cql3.restrictions.TokenRestriction.valuesAsClustering(QueryOptions)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector.AbstractFunctionSelector(T,List<Selector>)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector.getType()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector.newFactory(Function,SelectorFactories)",35,0,n/a,4,2,2,19,8
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector.toString()",7,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.AggregateFunctionSelector(Function,List<Selector>)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.addInput(int,ResultSetBuilder)",7,0,n/a,12,1,2,8,2
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.getOutput(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.isAggregate()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector.reset()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.FieldSelector(UserType,int,Selector)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.selection.FieldSelector.addInput(int,ResultSetBuilder)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.getOutput(int)",2,0,n/a,8,0,1,5,3
"org.apache.cassandra.cql3.selection.FieldSelector.getType()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.isAggregate()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.newFactory(UserType,int,Factory)",10,0,n/a,4,2,3,6,1
"org.apache.cassandra.cql3.selection.FieldSelector.reset()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.FieldSelector.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.selection.RawSelector.RawSelector(Raw,ColumnIdentifier)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.selection.RawSelector.processesSelection()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.RawSelector.toSelectables(List<RawSelector>,CFMetaData)",3,0,n/a,4,2,2,2,1
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.ScalarFunctionSelector(Function,List<Selector>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.addInput(int,ResultSetBuilder)",3,0,n/a,8,1,2,5,2
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.getOutput(int)",6,0,n/a,10,1,1,7,2
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.isAggregate()",3,0,n/a,7,0,0,3,2
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector.reset()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.cql3.selection.Selectable.Raw.prepare(CFMetaData)",n/a,3,5,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.selection.Selectable.Raw.processesSelection()",n/a,0,5,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.Raw.Raw(Raw,Raw)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.Raw.prepare(CFMetaData)",3,3,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.Raw.processesSelection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.WithFieldSelection(Selectable,ColumnIdentifier)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",13,1,n/a,22,1,2,12,4
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.Raw.Raw(FunctionName,List<Raw>)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.Raw.prepare(CFMetaData)",5,3,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.Raw.processesSelection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.WithFunction(FunctionName,List<Selectable>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",12,1,n/a,19,0,2,10,4
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.toString()",6,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.Raw.Raw(Raw,boolean)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.Raw.prepare(CFMetaData)",2,3,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.Raw.processesSelection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.WritetimeOrTTL(ColumnIdentifier,boolean)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",11,1,n/a,16,0,2,8,6
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.toString()",0,0,n/a,5,0,0,1,2
"org.apache.cassandra.cql3.selection.Selectable.addAndGetIndex(ColumnDefinition,List<ColumnDefinition>)",3,1,n/a,10,1,2,5,2
"org.apache.cassandra.cql3.selection.Selectable.newSelectorFactory(CFMetaData,List<ColumnDefinition>)",n/a,1,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.ResultSetBuilder(boolean)",9,1,n/a,13,0,1,9,5
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.add(ByteBuffer)",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.add(Cell,int)",7,1,n/a,13,1,2,8,4
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.build(int)",8,3,n/a,13,1,1,8,4
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.getOutputRow(int)",2,3,n/a,6,0,1,2,2
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.newRow(int)",7,2,n/a,13,2,1,6,3
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.remainingTTL(Cell,int)",2,1,n/a,7,0,2,4,3
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.rowToJson(List<ByteBuffer>,int)",20,1,n/a,23,1,2,19,5
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder.value(Cell)",6,1,n/a,6,0,1,1,2
"org.apache.cassandra.cql3.selection.Selection.Selection(CFMetaData,List<ColumnDefinition>,SelectionColumnMapping,boolean,boolean)",2,2,n/a,13,0,5,6,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.SelectionWithProcessing(CFMetaData,List<ColumnDefinition>,SelectionColumnMapping,SelectorFactories)",3,1,n/a,12,0,4,2,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.addColumnForOrdering(ColumnDefinition)",3,2,n/a,7,0,1,3,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.getFunctions()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.getResultSetIndex(ColumnDefinition)",4,1,n/a,11,0,1,9,4
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.isAggregate()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing.newSelectors()",9,1,n/a,5,2,0,10,4
"org.apache.cassandra.cql3.selection.Selection.Selectors.addInputRow(int,ResultSetBuilder)",n/a,2,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.selection.Selection.Selectors.getOutputRow(int)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.selection.Selection.Selectors.isAggregate()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selection.Selectors.reset()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.SimpleSelection(CFMetaData,List<ColumnDefinition>,SelectionColumnMapping,boolean)",1,2,n/a,13,0,4,2,1
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.SimpleSelection(CFMetaData,List<ColumnDefinition>,boolean)",2,2,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.isAggregate()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.isWildcard()",0,3,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection.newSelectors()",1,1,n/a,4,2,0,5,1
"org.apache.cassandra.cql3.selection.Selection.addColumnForOrdering(ColumnDefinition)",3,2,n/a,6,0,1,3,1
"org.apache.cassandra.cql3.selection.Selection.collectColumnMappings(CFMetaData,List<RawSelector>,SelectorFactories)",6,1,n/a,15,1,3,7,3
"org.apache.cassandra.cql3.selection.Selection.containsACollection()",3,1,n/a,12,0,0,4,4
"org.apache.cassandra.cql3.selection.Selection.containsOnlyStaticColumns()",5,1,n/a,17,1,0,8,6
"org.apache.cassandra.cql3.selection.Selection.containsStaticColumns()",4,2,n/a,12,0,0,5,3
"org.apache.cassandra.cql3.selection.Selection.forColumns(CFMetaData,List<ColumnDefinition>)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.selection.Selection.fromSelectors(CFMetaData,List<RawSelector>)",9,1,n/a,10,0,2,4,3
"org.apache.cassandra.cql3.selection.Selection.getColumnIndex(ColumnDefinition)",3,2,n/a,12,0,1,6,3
"org.apache.cassandra.cql3.selection.Selection.getColumnMapping()",0,1,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.getColumns()",0,6,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.getFunctions()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.getResultMetadata(boolean)",4,2,n/a,8,0,1,5,2
"org.apache.cassandra.cql3.selection.Selection.getResultSetIndex(ColumnDefinition)",1,1,n/a,9,0,1,1,1
"org.apache.cassandra.cql3.selection.Selection.isAggregate()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selection.isWildcard()",0,3,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.newSelectors()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selection.processesSelection(List<RawSelector>)",1,1,n/a,9,1,1,4,3
"org.apache.cassandra.cql3.selection.Selection.resultSetBuilder(boolean)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.selection.Selection.toString()",7,0,n/a,11,0,0,1,1
"org.apache.cassandra.cql3.selection.Selection.wildcard(CFMetaData)",6,2,n/a,6,0,1,3,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.SelectionColumnMapping()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.addMapping(ColumnSpecification,ColumnDefinition)",2,0,n/a,9,0,2,4,2
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.addMapping(ColumnSpecification,Iterable<ColumnDefinition>)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.equals(Object)",4,0,n/a,10,0,1,6,4
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.getColumnSpecifications()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.getMappings()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.newMapping()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.simpleMapping(Iterable<ColumnDefinition>)",2,0,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.selection.SelectionColumnMapping.toString()",19,0,n/a,18,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectionColumns.getColumnSpecifications()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.SelectionColumns.getMappings()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.Factory.addColumnMapping(SelectionColumnMapping,ColumnSpecification)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.Factory.getColumnName()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.Factory.getColumnSpecification(CFMetaData)",4,0,n/a,14,0,1,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.getFunctions()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.getReturnType()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.Factory.isAggregateSelectorFactory()",0,1,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.isSimpleSelectorFactory(int)",0,0,n/a,11,0,1,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.isTTLSelectorFactory()",0,1,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.isWritetimeSelectorFactory()",0,1,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.selection.Selector.Factory.newInstance()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.addInput(int,ResultSetBuilder)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.getOutput(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.getType()",n/a,4,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.isAggregate()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.selection.Selector.reset()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.selection.Selector.testAssignment(String,ColumnSpecification)",10,0,n/a,15,0,2,10,5
"org.apache.cassandra.cql3.selection.SelectorFactories.SelectorFactories(List<Selectable>,CFMetaData,List<ColumnDefinition>)",7,1,n/a,16,1,3,8,3
"org.apache.cassandra.cql3.selection.SelectorFactories.addSelectorForOrdering(ColumnDefinition,int)",2,0,n/a,9,0,2,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.containsTTLSelectorFactory()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.containsWritetimeSelectorFactory()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.createFactoriesAndCollectColumnDefinitions(List<Selectable>,CFMetaData,List<ColumnDefinition>)",1,0,n/a,16,0,3,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.doesAggregation()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.get(int)",1,0,n/a,10,0,1,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.getColumnNames()",3,0,n/a,4,2,0,2,1
"org.apache.cassandra.cql3.selection.SelectorFactories.getFunctions()",3,0,n/a,8,0,0,5,3
"org.apache.cassandra.cql3.selection.SelectorFactories.getReturnTypes()",3,0,n/a,4,2,0,2,1
"org.apache.cassandra.cql3.selection.SelectorFactories.iterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.selection.SelectorFactories.newInstances()",4,0,n/a,13,1,0,4,2
"org.apache.cassandra.cql3.selection.SelectorFactories.size()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.SimpleSelector(String,int,AbstractType<?>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.selection.SimpleSelector.addInput(int,ResultSetBuilder)",1,0,n/a,9,1,2,3,2
"org.apache.cassandra.cql3.selection.SimpleSelector.getOutput(int)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.getType()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.selection.SimpleSelector.newFactory(ColumnDefinition,int)",5,1,n/a,5,2,2,6,1
"org.apache.cassandra.cql3.selection.SimpleSelector.reset()",0,0,n/a,6,0,0,2,1
"org.apache.cassandra.cql3.selection.SimpleSelector.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.WritetimeOrTTLSelector(String,int,boolean)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.addInput(int,ResultSetBuilder)",2,0,n/a,16,1,2,8,5
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.getOutput(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.getType()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.newFactory(ColumnDefinition,int,boolean)",6,0,n/a,4,2,3,7,3
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.reset()",0,0,n/a,5,0,0,2,1
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.AlterKeyspaceStatement(String,KeyspaceAttributes)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.announceMigration(boolean)",5,0,n/a,10,0,1,6,2
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.changeEvent()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.checkAccess(ClientState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.keyspace()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement.validate(ClientState)",14,0,n/a,21,1,1,13,7
"org.apache.cassandra.cql3.statements.AlterRoleStatement.AlterRoleStatement(RoleName,RoleOptions)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.AlterRoleStatement.checkAccess(ClientState)",21,0,n/a,27,2,1,13,9
"org.apache.cassandra.cql3.statements.AlterRoleStatement.execute(ClientState)",4,0,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.statements.AlterRoleStatement.validate(ClientState)",9,0,n/a,10,0,1,6,3
"org.apache.cassandra.cql3.statements.AlterTableStatement.AlterTableStatement(CFName,Type,Raw,Raw,TableAttributes,Map<Raw, Raw>,boolean)",1,0,n/a,16,0,7,7,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.announceMigration(boolean)",133,0,n/a,217,4,1,141,62
"org.apache.cassandra.cql3.statements.AlterTableStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.checkAccess(ClientState)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.toString()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.validate(ClientState)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.AlterTableStatement.validateAlter(CFMetaData,ColumnDefinition,AbstractType<?>)",22,2,n/a,42,2,3,18,8
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter.AddOrAlter(UTName,boolean,ColumnIdentifier,Raw)",1,2,n/a,7,0,4,4,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter.doAdd(UserType)",20,1,n/a,15,0,1,12,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter.doAlter(UserType)",20,1,n/a,13,0,1,10,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter.makeUpdatedType(UserType)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AlterTypeStatement(UTName)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.Renames.Renames(UTName,Map<ColumnIdentifier, ColumnIdentifier>)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.Renames.makeUpdatedType(UserType)",13,1,n/a,17,1,1,12,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.addition(UTName,ColumnIdentifier,Raw)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.alter(UTName,ColumnIdentifier,Raw)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.announceMigration(boolean)",27,0,n/a,47,2,1,29,14
"org.apache.cassandra.cql3.statements.AlterTypeStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.checkAccess(ClientState)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.getIdxOfField(UserType,ColumnIdentifier)",3,3,n/a,7,0,2,6,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.keyspace()",1,5,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.makeUpdatedType(UserType)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.statements.AlterTypeStatement.prepareKeyspace(ClientState)",5,0,n/a,8,0,1,4,3
"org.apache.cassandra.cql3.statements.AlterTypeStatement.renames(UTName,Map<ColumnIdentifier, ColumnIdentifier>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.AlterTypeStatement.updateDefinition(CFMetaData,ColumnDefinition,String,ByteBuffer,UserType)",3,2,n/a,9,0,5,5,2
"org.apache.cassandra.cql3.statements.AlterTypeStatement.updateTypes(List<AbstractType<?>>,String,ByteBuffer,UserType)",5,3,n/a,15,1,4,11,4
"org.apache.cassandra.cql3.statements.AlterTypeStatement.updateWith(AbstractType<?>,String,ByteBuffer,UserType)",28,7,n/a,58,2,4,33,18
"org.apache.cassandra.cql3.statements.AlterTypeStatement.validate(ClientState)",0,0,n/a,5,0,1,0,1
"org.apache.cassandra.cql3.statements.AlterViewStatement.AlterViewStatement(CFName,TableAttributes)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.AlterViewStatement.announceMigration(boolean)",15,0,n/a,20,1,1,13,4
"org.apache.cassandra.cql3.statements.AlterViewStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterViewStatement.checkAccess(ClientState)",5,0,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.statements.AlterViewStatement.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.AlterViewStatement.validate(ClientState)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.AuthenticationStatement.checkPermission(ClientState,Permission,RoleResource)",5,0,n/a,14,1,3,3,2
"org.apache.cassandra.cql3.statements.AuthenticationStatement.execute(ClientState)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.statements.AuthenticationStatement.execute(QueryState,QueryOptions)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.statements.AuthenticationStatement.executeInternal(QueryState,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.statements.AuthenticationStatement.getBoundTerms()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.AuthenticationStatement.prepare()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.AuthorizationStatement.execute(ClientState)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.statements.AuthorizationStatement.execute(QueryState,QueryOptions)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.statements.AuthorizationStatement.executeInternal(QueryState,QueryOptions)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.cql3.statements.AuthorizationStatement.getBoundTerms()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.AuthorizationStatement.maybeCorrectResource(IResource,ClientState)",6,0,n/a,10,1,2,5,4
"org.apache.cassandra.cql3.statements.AuthorizationStatement.prepare()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.BatchStatement(int,Type,List<ModificationStatement>,Attributes)",11,6,n/a,36,2,4,21,3
"org.apache.cassandra.cql3.statements.BatchStatement.MultiTableColumnsBuilder.addAll(CFMetaData,PartitionColumns)",4,1,n/a,10,1,2,5,2
"org.apache.cassandra.cql3.statements.BatchStatement.MultiTableColumnsBuilder.build()",6,1,n/a,7,0,0,4,2
"org.apache.cassandra.cql3.statements.BatchStatement.Parsed.Parsed(Type,Raw,List<Parsed>)",1,0,n/a,7,0,3,4,1
"org.apache.cassandra.cql3.statements.BatchStatement.Parsed.prepare()",20,0,n/a,30,2,0,18,7
"org.apache.cassandra.cql3.statements.BatchStatement.Parsed.prepareKeyspace(ClientState)",1,0,n/a,6,0,1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.checkAccess(ClientState)",1,2,n/a,5,0,1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.execute(QueryState,BatchQueryOptions)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.execute(QueryState,BatchQueryOptions,boolean,long)",9,1,n/a,12,0,4,8,4
"org.apache.cassandra.cql3.statements.BatchStatement.execute(QueryState,QueryOptions)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.executeInternal(QueryState,QueryOptions)",4,0,n/a,7,0,2,4,2
"org.apache.cassandra.cql3.statements.BatchStatement.executeInternalWithConditions(BatchQueryOptions,QueryState)",5,1,n/a,12,1,2,7,1
"org.apache.cassandra.cql3.statements.BatchStatement.executeInternalWithoutCondition(QueryState,QueryOptions)",5,1,n/a,12,1,2,7,5
"org.apache.cassandra.cql3.statements.BatchStatement.executeWithConditions(BatchQueryOptions,QueryState)",8,1,n/a,19,1,2,7,1
"org.apache.cassandra.cql3.statements.BatchStatement.executeWithoutConditions(Collection<? extends IMutation>,ConsistencyLevel)",9,1,n/a,4,2,2,6,2
"org.apache.cassandra.cql3.statements.BatchStatement.getBoundTerms()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.getFunctions()",3,0,n/a,7,0,0,4,2
"org.apache.cassandra.cql3.statements.BatchStatement.getMutations(BatchQueryOptions,boolean,long)",18,2,n/a,29,2,3,19,7
"org.apache.cassandra.cql3.statements.BatchStatement.getStatements()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.isCounter()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.isLogged()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.makeCasRequest(BatchQueryOptions,QueryState)",28,2,n/a,40,2,2,29,9
"org.apache.cassandra.cql3.statements.BatchStatement.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.updatedRows()",1,1,n/a,6,0,0,1,1
"org.apache.cassandra.cql3.statements.BatchStatement.validate()",25,1,n/a,45,2,0,32,22
"org.apache.cassandra.cql3.statements.BatchStatement.validate(ClientState)",1,0,n/a,7,0,1,2,2
"org.apache.cassandra.cql3.statements.BatchStatement.verifyBatchSize(Iterable<PartitionUpdate>)",16,1,n/a,31,2,1,17,6
"org.apache.cassandra.cql3.statements.BatchStatement.verifyBatchType(Iterable<PartitionUpdate>)",20,1,n/a,18,2,1,8,8
"org.apache.cassandra.cql3.statements.Bound.Bound(int)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.Bound.isEnd()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.Bound.isStart()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.Bound.reverse()",1,2,n/a,4,0,0,1,2
"org.apache.cassandra.cql3.statements.CFProperties.getReversableType(ColumnIdentifier,AbstractType<?>)",3,0,n/a,8,1,2,3,3
"org.apache.cassandra.cql3.statements.CFProperties.setCompactStorage()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CFProperties.setOrdering(ColumnIdentifier,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.CFProperties.validate()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CFStatement.CFStatement(CFName)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CFStatement.columnFamily()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CFStatement.keyspace()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.cql3.statements.CFStatement.prepareKeyspace(ClientState)",3,0,n/a,10,1,1,2,2
"org.apache.cassandra.cql3.statements.CFStatement.prepareKeyspace(String)",2,1,n/a,6,0,1,2,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.CQL3CasRequest(CFMetaData,DecoratedKey,boolean,PartitionColumns,boolean,boolean)",1,0,n/a,15,0,6,7,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ColumnsConditions.ColumnsConditions(Clustering)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ColumnsConditions.addConditions(Collection<ColumnCondition>,QueryOptions)",4,1,n/a,8,1,2,3,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ColumnsConditions.appliesTo(FilteredPartition)",4,1,n/a,11,1,1,6,4
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ExistCondition.ExistCondition(Clustering)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ExistCondition.appliesTo(FilteredPartition)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.NotExistCondition.NotExistCondition(Clustering)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.NotExistCondition.appliesTo(FilteredPartition)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowCondition.RowCondition(Clustering)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowCondition.appliesTo(FilteredPartition)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowUpdate.RowUpdate(Clustering,ModificationStatement,QueryOptions,long)",0,1,n/a,7,0,4,4,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowUpdate.applyUpdates(FilteredPartition,PartitionUpdate)",6,1,n/a,6,0,2,3,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.addConditions(Clustering,Collection<ColumnCondition>,QueryOptions)",5,2,n/a,14,1,3,7,3
"org.apache.cassandra.cql3.statements.CQL3CasRequest.addExist(Clustering)",3,1,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.addNotExist(Clustering)",4,1,n/a,13,1,1,6,4
"org.apache.cassandra.cql3.statements.CQL3CasRequest.addRowUpdate(Clustering,ModificationStatement,QueryOptions,long)",2,0,n/a,4,0,4,1,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.appliesTo(FilteredPartition)",2,0,n/a,9,1,1,4,3
"org.apache.cassandra.cql3.statements.CQL3CasRequest.columnsToRead()",2,1,n/a,18,1,0,6,4
"org.apache.cassandra.cql3.statements.CQL3CasRequest.makeUpdates(FilteredPartition)",8,0,n/a,10,0,1,7,3
"org.apache.cassandra.cql3.statements.CQL3CasRequest.readCommand(int)",11,0,n/a,15,1,1,7,3
"org.apache.cassandra.cql3.statements.CQL3CasRequest.updatedColumns()",4,1,n/a,7,0,0,4,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.CreateAggregateStatement(FunctionName,List<Raw>,String,Raw,String,Raw,boolean,boolean)",2,0,n/a,18,0,8,8,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.announceMigration(boolean)",21,0,n/a,29,1,1,18,9
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.changeEvent()",5,0,n/a,6,0,0,1,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.checkAccess(ClientState)",10,0,n/a,14,0,1,8,6
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.grantPermissionsToCreator(QueryState)",9,0,n/a,15,1,1,4,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepare()",27,0,n/a,36,1,0,26,9
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepareKeyspace(ClientState)",9,0,n/a,11,0,1,8,5
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.prepareType(String,Raw)",7,2,n/a,11,0,2,6,3
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.stateArguments(AbstractType<?>,List<AbstractType<?>>)",4,1,n/a,7,0,2,4,1
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.stateFuncSig(FunctionName,Raw,List<Raw>)",9,2,n/a,9,0,3,6,2
"org.apache.cassandra.cql3.statements.CreateAggregateStatement.validate(ClientState)",4,0,n/a,7,0,1,4,4
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.CreateFunctionStatement(FunctionName,String,String,List<ColumnIdentifier>,List<Raw>,Raw,boolean,boolean,boolean)",0,0,n/a,20,0,9,9,1
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.announceMigration(boolean)",18,0,n/a,23,1,1,16,8
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.changeEvent()",5,0,n/a,6,0,0,1,2
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.checkAccess(ClientState)",6,0,n/a,9,0,1,3,3
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.grantPermissionsToCreator(QueryState)",9,0,n/a,15,1,1,4,2
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepare()",11,0,n/a,11,0,0,7,3
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepareKeyspace(ClientState)",7,0,n/a,8,0,1,5,4
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.prepareType(String,Raw)",7,2,n/a,11,0,2,6,3
"org.apache.cassandra.cql3.statements.CreateFunctionStatement.validate(ClientState)",5,0,n/a,8,0,1,5,4
"org.apache.cassandra.cql3.statements.CreateIndexStatement.CreateIndexStatement(CFName,IndexName,List<Raw>,IndexPropDefs,boolean)",2,0,n/a,12,0,5,5,1
"org.apache.cassandra.cql3.statements.CreateIndexStatement.announceMigration(boolean)",37,0,n/a,44,1,1,26,9
"org.apache.cassandra.cql3.statements.CreateIndexStatement.changeEvent()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateIndexStatement.checkAccess(ClientState)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validate(ClientState)",43,0,n/a,59,2,1,37,22
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateForFrozenCollection(IndexTarget)",2,1,n/a,7,0,1,2,2
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateIsSimpleIndexIfTargetColumnNotCollection(ColumnDefinition,IndexTarget)",4,1,n/a,7,0,2,2,3
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateNotFullIndex(IndexTarget)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateTargetColumnIsMapIfIndexInvolvesKeys(boolean,IndexTarget)",2,1,n/a,9,1,2,3,4
"org.apache.cassandra.cql3.statements.CreateIndexStatement.validateTargetsForMultiColumnIndex(List<IndexTarget>)",4,1,n/a,9,0,1,6,4
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.CreateKeyspaceStatement(String,KeyspaceAttributes,boolean)",1,0,n/a,14,0,3,4,1
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.announceMigration(boolean)",3,0,n/a,15,1,1,7,3
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.changeEvent()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.checkAccess(ClientState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.grantPermissionsToCreator(QueryState)",15,0,n/a,21,1,1,7,2
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.keyspace()",0,3,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement.validate(ClientState)",14,0,n/a,26,0,1,12,5
"org.apache.cassandra.cql3.statements.CreateRoleStatement.CreateRoleStatement(RoleName,RoleOptions,boolean)",2,0,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.statements.CreateRoleStatement.checkAccess(ClientState)",9,0,n/a,9,1,1,4,4
"org.apache.cassandra.cql3.statements.CreateRoleStatement.execute(ClientState)",6,0,n/a,9,0,1,5,3
"org.apache.cassandra.cql3.statements.CreateRoleStatement.grantPermissionsToCreator(ClientState)",8,1,n/a,27,2,1,3,3
"org.apache.cassandra.cql3.statements.CreateRoleStatement.validate(ClientState)",10,0,n/a,10,0,1,6,4
"org.apache.cassandra.cql3.statements.CreateTableStatement.CreateTableStatement(CFName,TableParams,boolean,Set<ColumnIdentifier>)",1,1,n/a,7,0,4,4,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.RawStatement(CFName,boolean)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.addColumnAlias(ColumnIdentifier)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.addDefinition(ColumnIdentifier,Raw,boolean)",3,0,n/a,7,0,3,4,2
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.addKeyAliases(List<ColumnIdentifier>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.getTypeAndRemove(Map<ColumnIdentifier, AbstractType>,ColumnIdentifier)",10,2,n/a,11,0,2,8,6
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.prepare()",6,0,n/a,10,0,0,4,2
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement.prepare(Types)",94,3,n/a,126,3,1,78,40
"org.apache.cassandra.cql3.statements.CreateTableStatement.announceMigration(boolean)",2,0,n/a,14,1,1,6,3
"org.apache.cassandra.cql3.statements.CreateTableStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.checkAccess(ClientState)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.getCFMetaData()",3,2,n/a,11,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.grantPermissionsToCreator(QueryState)",11,0,n/a,15,1,1,4,2
"org.apache.cassandra.cql3.statements.CreateTableStatement.metadataBuilder()",27,2,n/a,36,2,0,24,13
"org.apache.cassandra.cql3.statements.CreateTableStatement.params()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateTableStatement.validate(ClientState)",0,1,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.CreateTriggerStatement(CFName,String,String,boolean)",1,0,n/a,7,0,4,4,1
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.announceMigration(boolean)",14,0,n/a,16,1,1,10,3
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.checkAccess(ClientState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CreateTriggerStatement.validate(ClientState)",8,0,n/a,14,1,1,6,3
"org.apache.cassandra.cql3.statements.CreateTypeStatement.CreateTypeStatement(UTName,boolean)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.addDefinition(ColumnIdentifier,Raw)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.announceMigration(boolean)",8,0,n/a,12,0,1,8,2
"org.apache.cassandra.cql3.statements.CreateTypeStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.checkAccess(ClientState)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.checkForDuplicateNames(UserType)",9,1,n/a,14,2,1,9,4
"org.apache.cassandra.cql3.statements.CreateTypeStatement.createType()",12,1,n/a,10,0,0,7,3
"org.apache.cassandra.cql3.statements.CreateTypeStatement.keyspace()",1,3,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateTypeStatement.prepareKeyspace(ClientState)",3,0,n/a,6,0,1,2,2
"org.apache.cassandra.cql3.statements.CreateTypeStatement.validate(ClientState)",12,0,n/a,11,0,1,8,6
"org.apache.cassandra.cql3.statements.CreateViewStatement.AddColumn.add(ColumnIdentifier,AbstractType<?>)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.cql3.statements.CreateViewStatement.CreateViewStatement(CFName,CFName,List<RawSelector>,WhereClause,List<Raw>,List<Raw>,boolean)",1,0,n/a,16,0,7,7,1
"org.apache.cassandra.cql3.statements.CreateViewStatement.add(CFMetaData,Iterable<ColumnIdentifier>,AddColumn)",7,3,n/a,20,3,3,9,7
"org.apache.cassandra.cql3.statements.CreateViewStatement.announceMigration(boolean)",121,0,n/a,157,2,1,99,38
"org.apache.cassandra.cql3.statements.CreateViewStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.CreateViewStatement.checkAccess(ClientState)",6,0,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.statements.CreateViewStatement.getColumnIdentifier(CFMetaData,Set<ColumnIdentifier>,boolean,Raw,List<ColumnIdentifier>,StatementRestrictions)",13,2,n/a,21,0,6,10,6
"org.apache.cassandra.cql3.statements.CreateViewStatement.validate(ClientState)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.DeleteStatement.DeleteStatement(int,CFMetaData,Operations,StatementRestrictions,Conditions,Attributes)",1,1,n/a,9,0,6,1,1
"org.apache.cassandra.cql3.statements.DeleteStatement.Parsed.Parsed(CFName,Raw,List<RawDeletion>,WhereClause,List<Pair<Raw, Raw>>,boolean)",1,0,n/a,11,0,6,3,1
"org.apache.cassandra.cql3.statements.DeleteStatement.Parsed.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",14,0,n/a,34,1,4,12,3
"org.apache.cassandra.cql3.statements.DeleteStatement.addUpdateForKey(PartitionUpdate,Clustering,UpdateParameters)",28,0,n/a,44,2,3,20,9
"org.apache.cassandra.cql3.statements.DeleteStatement.addUpdateForKey(PartitionUpdate,Slice,UpdateParameters)",7,0,n/a,9,0,3,4,2
"org.apache.cassandra.cql3.statements.DropAggregateStatement.DropAggregateStatement(FunctionName,List<Raw>,boolean,boolean)",0,0,n/a,10,0,4,4,1
"org.apache.cassandra.cql3.statements.DropAggregateStatement.announceMigration(boolean)",27,0,n/a,49,3,1,28,16
"org.apache.cassandra.cql3.statements.DropAggregateStatement.changeEvent()",5,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.DropAggregateStatement.checkAccess(ClientState)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.statements.DropAggregateStatement.prepareKeyspace(ClientState)",7,0,n/a,8,0,1,5,4
"org.apache.cassandra.cql3.statements.DropAggregateStatement.prepareType(String,Raw)",7,1,n/a,11,0,2,6,3
"org.apache.cassandra.cql3.statements.DropAggregateStatement.validate(ClientState)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.cql3.statements.DropFunctionStatement.DropFunctionStatement(FunctionName,List<Raw>,boolean,boolean)",0,0,n/a,10,0,4,4,1
"org.apache.cassandra.cql3.statements.DropFunctionStatement.announceMigration(boolean)",10,0,n/a,18,1,1,11,4
"org.apache.cassandra.cql3.statements.DropFunctionStatement.changeEvent()",5,0,n/a,6,0,0,1,1
"org.apache.cassandra.cql3.statements.DropFunctionStatement.checkAccess(ClientState)",10,0,n/a,19,1,1,5,3
"org.apache.cassandra.cql3.statements.DropFunctionStatement.findFunction()",8,2,n/a,20,2,0,10,7
"org.apache.cassandra.cql3.statements.DropFunctionStatement.getMissingFunctionError()",7,1,n/a,10,0,0,6,2
"org.apache.cassandra.cql3.statements.DropFunctionStatement.prepare()",10,0,n/a,16,1,0,8,4
"org.apache.cassandra.cql3.statements.DropFunctionStatement.prepareKeyspace(ClientState)",7,0,n/a,9,0,1,5,4
"org.apache.cassandra.cql3.statements.DropFunctionStatement.validate(ClientState)",4,0,n/a,11,0,1,3,4
"org.apache.cassandra.cql3.statements.DropIndexStatement.DropIndexStatement(IndexName,boolean)",3,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.statements.DropIndexStatement.announceMigration(boolean)",6,1,n/a,11,0,1,8,2
"org.apache.cassandra.cql3.statements.DropIndexStatement.changeEvent()",3,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.DropIndexStatement.checkAccess(ClientState)",2,0,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.statements.DropIndexStatement.columnFamily()",1,1,n/a,7,0,0,4,3
"org.apache.cassandra.cql3.statements.DropIndexStatement.execute(QueryState,QueryOptions)",3,0,n/a,5,0,2,1,2
"org.apache.cassandra.cql3.statements.DropIndexStatement.lookupIndexedTable()",9,3,n/a,17,1,0,9,4
"org.apache.cassandra.cql3.statements.DropIndexStatement.validate(ClientState)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.DropKeyspaceStatement(String,boolean)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.announceMigration(boolean)",1,0,n/a,14,1,1,6,3
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.changeEvent()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.checkAccess(ClientState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.keyspace()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement.validate(ClientState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.DropRoleStatement.DropRoleStatement(RoleName,boolean)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.DropRoleStatement.checkAccess(ClientState)",7,0,n/a,10,0,1,3,4
"org.apache.cassandra.cql3.statements.DropRoleStatement.execute(ClientState)",9,0,n/a,11,0,1,6,3
"org.apache.cassandra.cql3.statements.DropRoleStatement.validate(ClientState)",11,0,n/a,10,0,1,6,5
"org.apache.cassandra.cql3.statements.DropTableStatement.DropTableStatement(CFName,boolean)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.DropTableStatement.announceMigration(boolean)",17,0,n/a,39,4,1,21,9
"org.apache.cassandra.cql3.statements.DropTableStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.DropTableStatement.checkAccess(ClientState)",3,0,n/a,12,1,1,4,3
"org.apache.cassandra.cql3.statements.DropTableStatement.validate(ClientState)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.DropTriggerStatement.DropTriggerStatement(CFName,String,boolean)",1,0,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.statements.DropTriggerStatement.announceMigration(boolean)",13,0,n/a,16,1,1,10,3
"org.apache.cassandra.cql3.statements.DropTriggerStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.DropTriggerStatement.checkAccess(ClientState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.DropTriggerStatement.validate(ClientState)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.DropTypeStatement(UTName,boolean)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.announceMigration(boolean)",5,0,n/a,11,0,1,7,2
"org.apache.cassandra.cql3.statements.DropTypeStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.checkAccess(ClientState)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.isUsedBy(AbstractType<?>)",15,10,n/a,29,1,1,19,13
"org.apache.cassandra.cql3.statements.DropTypeStatement.keyspace()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.DropTypeStatement.prepareKeyspace(ClientState)",3,0,n/a,6,0,1,2,2
"org.apache.cassandra.cql3.statements.DropTypeStatement.validate(ClientState)",29,0,n/a,34,1,1,20,14
"org.apache.cassandra.cql3.statements.DropViewStatement.DropViewStatement(CFName,boolean)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.DropViewStatement.announceMigration(boolean)",3,0,n/a,31,1,1,6,3
"org.apache.cassandra.cql3.statements.DropViewStatement.changeEvent()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.DropViewStatement.checkAccess(ClientState)",5,0,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.statements.DropViewStatement.validate(ClientState)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.GrantPermissionsStatement.GrantPermissionsStatement(Set<Permission>,IResource,RoleName)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.statements.GrantPermissionsStatement.execute(ClientState)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.statements.GrantRoleStatement.GrantRoleStatement(RoleName,RoleName)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.GrantRoleStatement.execute(ClientState)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.statements.IndexPropDefs.getOptions()",3,0,n/a,6,0,0,3,1
"org.apache.cassandra.cql3.statements.IndexPropDefs.getRawOptions()",2,3,n/a,5,0,0,2,2
"org.apache.cassandra.cql3.statements.IndexPropDefs.validate()",13,1,n/a,16,0,0,11,9
"org.apache.cassandra.cql3.statements.IndexTarget.IndexTarget(ColumnIdentifier,Type)",3,14,n/a,8,0,2,3,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.Raw(Raw,Type)",0,5,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.fullCollection(Raw)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.keysAndValuesOf(Raw)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.keysOf(Raw)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.prepare(CFMetaData)",5,0,n/a,14,0,1,6,4
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.simpleIndexOn(Raw)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Raw.valuesOf(Raw)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.IndexTarget.Type.fromString(String)",6,1,n/a,14,0,1,11,6
"org.apache.cassandra.cql3.statements.IndexTarget.Type.toString()",0,1,n/a,12,1,0,13,7
"org.apache.cassandra.cql3.statements.IndexTarget.asCqlString(CFMetaData)",6,1,n/a,6,0,1,3,2
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.asAlteredKeyspaceParams(KeyspaceParams)",6,0,n/a,8,0,1,3,2
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.asNewKeyspaceParams()",4,0,n/a,5,0,0,2,1
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.getAllReplicationOptions()",3,4,n/a,7,0,0,2,2
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.getReplicationOptions()",3,0,n/a,6,0,0,3,1
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.getReplicationStrategyClass()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.KeyspaceAttributes.validate()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.ListPermissionsStatement(Set<Permission>,IResource,RoleName,boolean)",3,0,n/a,7,0,4,4,2
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.checkAccess(ClientState)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.execute(ClientState)",8,0,n/a,16,1,1,7,4
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.list(ClientState,IResource)",5,2,n/a,12,1,2,3,2
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.resultMessage(List<PermissionDetails>)",14,1,n/a,14,1,1,9,3
"org.apache.cassandra.cql3.statements.ListPermissionsStatement.validate(ClientState)",9,0,n/a,13,1,1,7,5
"org.apache.cassandra.cql3.statements.ListRolesStatement.ListRolesStatement()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ListRolesStatement.ListRolesStatement(RoleName,boolean)",3,1,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.statements.ListRolesStatement.checkAccess(ClientState)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.cql3.statements.ListRolesStatement.execute(ClientState)",26,0,n/a,24,1,1,11,5
"org.apache.cassandra.cql3.statements.ListRolesStatement.formatResults(List<RoleResource>)",15,1,n/a,14,1,1,8,2
"org.apache.cassandra.cql3.statements.ListRolesStatement.resultMessage(Set<RoleResource>)",5,4,n/a,8,0,1,5,2
"org.apache.cassandra.cql3.statements.ListRolesStatement.validate(ClientState)",5,0,n/a,6,0,1,3,3
"org.apache.cassandra.cql3.statements.ListUsersStatement.formatResults(List<RoleResource>)",10,0,n/a,14,1,1,8,3
"org.apache.cassandra.cql3.statements.ModificationStatement.ModificationStatement(StatementType,int,CFMetaData,Operations,StatementRestrictions,Conditions,Attributes)",21,0,n/a,48,2,7,27,8
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.Parsed(CFName,StatementType,Raw,List<Pair<Raw, Raw>>,boolean,boolean)",2,0,n/a,14,0,6,6,2
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.getColumnDefinition(CFMetaData,Raw)",3,0,n/a,12,0,2,2,1
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.newRestrictions(CFMetaData,VariableSpecifications,Operations,WhereClause,Conditions)",4,0,n/a,21,0,5,4,2
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepare()",7,0,n/a,7,0,0,4,1
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepare(VariableSpecifications)",9,1,n/a,11,0,1,5,1
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepareColumnConditions(CFMetaData,VariableSpecifications)",13,1,n/a,23,1,2,11,2
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepareConditions(CFMetaData,VariableSpecifications)",4,1,n/a,27,1,2,11,4
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.cql3.statements.ModificationStatement.addConditions(Clustering,CQL3CasRequest,QueryOptions)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.addUpdateForKey(PartitionUpdate,Clustering,UpdateParameters)",n/a,2,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.statements.ModificationStatement.addUpdateForKey(PartitionUpdate,Slice,UpdateParameters)",n/a,2,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.cql3.statements.ModificationStatement.addUpdates(UpdatesCollector,QueryOptions,boolean,long)",22,1,n/a,50,3,4,22,10
"org.apache.cassandra.cql3.statements.ModificationStatement.allOperations()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.appliesOnlyToStaticColumns()",1,1,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.appliesOnlyToStaticColumns(Operations,Conditions)",4,2,n/a,10,0,2,1,4
"org.apache.cassandra.cql3.statements.ModificationStatement.asMaterializedMap(PartitionIterator)",6,2,n/a,12,2,1,5,2
"org.apache.cassandra.cql3.statements.ModificationStatement.buildCasFailureResultSet(RowIterator,Iterable<ColumnDefinition>,boolean,QueryOptions)",16,1,n/a,29,2,4,14,4
"org.apache.cassandra.cql3.statements.ModificationStatement.buildCasResultSet(RowIterator,QueryOptions)",4,2,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.buildCasResultSet(String,String,RowIterator,Iterable<ColumnDefinition>,boolean,QueryOptions)",9,1,n/a,10,0,6,6,2
"org.apache.cassandra.cql3.statements.ModificationStatement.buildPartitionKeyNames(QueryOptions)",2,2,n/a,8,0,1,4,2
"org.apache.cassandra.cql3.statements.ModificationStatement.casInternal(CQL3CasRequest,QueryState)",15,1,n/a,17,1,2,12,2
"org.apache.cassandra.cql3.statements.ModificationStatement.checkAccess(ClientState)",21,0,n/a,20,2,1,10,5
"org.apache.cassandra.cql3.statements.ModificationStatement.columnFamily()",0,9,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.conditionColumns()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.createClustering(QueryOptions)",5,2,n/a,7,0,1,3,3
"org.apache.cassandra.cql3.statements.ModificationStatement.createSlice(QueryOptions)",3,1,n/a,6,0,1,3,1
"org.apache.cassandra.cql3.statements.ModificationStatement.execute(QueryState,QueryOptions)",5,0,n/a,9,0,2,3,3
"org.apache.cassandra.cql3.statements.ModificationStatement.executeInternal(QueryState,QueryOptions)",3,0,n/a,6,0,2,1,2
"org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithCondition(QueryState,QueryOptions)",4,1,n/a,8,1,2,3,1
"org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(QueryState,QueryOptions)",4,1,n/a,12,1,2,7,5
"org.apache.cassandra.cql3.statements.ModificationStatement.executeWithCondition(QueryState,QueryOptions)",9,1,n/a,15,1,2,3,1
"org.apache.cassandra.cql3.statements.ModificationStatement.executeWithoutCondition(QueryState,QueryOptions)",8,1,n/a,13,0,2,8,3
"org.apache.cassandra.cql3.statements.ModificationStatement.getBoundTerms()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getColumnsWithConditions()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getFunctions()",5,1,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getMutations(QueryOptions,boolean,long)",5,2,n/a,16,0,3,4,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getRegularOperations()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getStaticOperations()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getTimeToLive(QueryOptions)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.getTimestamp(long,QueryOptions)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.hasConditions()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.hasIfExistCondition()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.hasIfNotExistCondition()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.isCounter()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.isTimestampSet()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.isView()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.keyspace()",0,12,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.makeCasRequest(QueryState,QueryOptions)",18,2,n/a,19,0,2,11,3
"org.apache.cassandra.cql3.statements.ModificationStatement.makeUpdateParameters(Collection<ByteBuffer>,ClusteringIndexFilter,QueryOptions,DataLimits,boolean,long)",6,3,n/a,11,0,6,2,1
"org.apache.cassandra.cql3.statements.ModificationStatement.makeUpdateParameters(Collection<ByteBuffer>,NavigableSet<Clustering>,QueryOptions,boolean,long)",6,1,n/a,20,0,5,3,2
"org.apache.cassandra.cql3.statements.ModificationStatement.merge(ResultSet,ResultSet)",19,1,n/a,21,1,2,18,4
"org.apache.cassandra.cql3.statements.ModificationStatement.readRequiredLists(Collection<ByteBuffer>,ClusteringIndexFilter,DataLimits,boolean,ConsistencyLevel)",18,1,n/a,39,2,5,15,5
"org.apache.cassandra.cql3.statements.ModificationStatement.requiresRead()",2,1,n/a,8,0,0,4,3
"org.apache.cassandra.cql3.statements.ModificationStatement.toSlices(SortedSet<Bound>,SortedSet<Bound>)",12,1,n/a,16,2,2,9,3
"org.apache.cassandra.cql3.statements.ModificationStatement.updatedColumns()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.updatesRegularRows()",3,2,n/a,9,0,0,1,2
"org.apache.cassandra.cql3.statements.ModificationStatement.updatesStaticRow()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ModificationStatement.validate(ClientState)",11,0,n/a,7,0,1,4,4
"org.apache.cassandra.cql3.statements.ParsedStatement.Prepared.Prepared(CQLStatement)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.Prepared.Prepared(CQLStatement,List<ColumnSpecification>,Short[])",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.statements.ParsedStatement.Prepared.Prepared(CQLStatement,VariableSpecifications,Short[])",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.getBoundVariables()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.getFunctions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.prepare()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.statements.ParsedStatement.setBoundVariables(List<ColumnIdentifier>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.cql3.statements.ParsedStatement.setBoundVariables(VariableSpecifications)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.PermissionsManagementStatement.PermissionsManagementStatement(Set<Permission>,IResource,RoleName)",2,0,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.statements.PermissionsManagementStatement.checkAccess(ClientState)",2,0,n/a,8,0,1,3,2
"org.apache.cassandra.cql3.statements.PermissionsManagementStatement.validate(ClientState)",13,0,n/a,17,1,1,8,5
"org.apache.cassandra.cql3.statements.PropertyDefinitions.addProperty(String,Map<String, String>)",3,0,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.statements.PropertyDefinitions.addProperty(String,String)",3,0,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getBoolean(String,Boolean)",3,0,n/a,6,0,2,2,2
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getDouble(String,double)",4,0,n/a,20,2,2,6,3
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getInt(String,Integer)",2,0,n/a,6,0,2,2,1
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getMap(String)",3,0,n/a,9,0,1,6,3
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getSimple(String)",3,4,n/a,9,0,1,6,3
"org.apache.cassandra.cql3.statements.PropertyDefinitions.getString(String,String)",1,0,n/a,5,0,2,2,2
"org.apache.cassandra.cql3.statements.PropertyDefinitions.hasProperty(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.PropertyDefinitions.toInt(String,String,Integer)",3,1,n/a,18,2,3,5,3
"org.apache.cassandra.cql3.statements.PropertyDefinitions.validate(Set<String>,Set<String>)",6,0,n/a,12,1,2,6,4
"org.apache.cassandra.cql3.statements.RequestValidations.RequestValidations()",0,0,n/a,6,0,0,0,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkBindValueSet(ByteBuffer,String,Object...)",1,0,n/a,14,0,3,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkContainsNoDuplicates(List<?>,String)",4,2,n/a,12,0,2,2,2
"org.apache.cassandra.cql3.statements.RequestValidations.checkContainsOnly(List<E>,List<E>,String)",4,1,n/a,17,0,3,4,2
"org.apache.cassandra.cql3.statements.RequestValidations.checkFalse(boolean,String)",1,20,n/a,12,0,2,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkFalse(boolean,String,Object...)",1,3,n/a,16,0,3,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkNotNull(T,String,Object...)",1,6,n/a,16,0,3,2,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkNull(T,String)",1,1,n/a,13,0,2,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkNull(T,String,Object...)",1,0,n/a,16,0,3,2,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkTrue(boolean,String)",1,7,n/a,12,0,2,1,1
"org.apache.cassandra.cql3.statements.RequestValidations.checkTrue(boolean,String,Object...)",1,5,n/a,17,0,3,2,2
"org.apache.cassandra.cql3.statements.RequestValidations.invalidRequest(String,Object...)",2,7,n/a,11,0,2,1,1
"org.apache.cassandra.cql3.statements.RevokePermissionsStatement.RevokePermissionsStatement(Set<Permission>,IResource,RoleName)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.statements.RevokePermissionsStatement.execute(ClientState)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.statements.RevokeRoleStatement.RevokeRoleStatement(RoleName,RoleName)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.RevokeRoleStatement.execute(ClientState)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.statements.RoleManagementStatement.RoleManagementStatement(RoleName,RoleName)",4,0,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.RoleManagementStatement.checkAccess(ClientState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.RoleManagementStatement.validate(ClientState)",11,0,n/a,8,0,1,5,3
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.SchemaAlteringStatement()",1,0,n/a,5,0,0,2,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.SchemaAlteringStatement(CFName)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.announceMigration(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.changeEvent()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.execute(QueryState,QueryOptions)",9,0,n/a,27,2,2,9,8
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.executeInternal(QueryState,QueryOptions)",5,0,n/a,8,0,2,5,3
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.getBoundTerms()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.grantPermissionsToCreator(QueryState)",0,1,n/a,10,0,1,0,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.prepare()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement.prepareKeyspace(ClientState)",1,0,n/a,6,0,1,2,2
"org.apache.cassandra.cql3.statements.SelectStatement.CompositeComparator.CompositeComparator(List<Comparator<ByteBuffer>>,List<Integer>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.CompositeComparator.compare(List<ByteBuffer>,List<ByteBuffer>)",6,0,n/a,14,1,2,11,3
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.InternalPager.InternalPager(QueryPager,ReadOrderGroup)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.InternalPager.fetchPage(int)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.NormalPager.NormalPager(QueryPager,ConsistencyLevel,ClientState)",1,1,n/a,6,0,3,3,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.NormalPager.fetchPage(int)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.Pager(QueryPager)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.fetchPage(int)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.forDistributedQuery(QueryPager,ConsistencyLevel,ClientState)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.forInternalQuery(QueryPager,ReadOrderGroup)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.isExhausted()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.state()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.Parameters.Parameters(Map<Raw, Boolean>,boolean,boolean,boolean)",0,1,n/a,10,0,4,4,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.RawStatement(CFName,Parameters,List<RawSelector>,WhereClause,Raw)",1,0,n/a,8,0,5,5,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.checkNeedsFiltering(StatementRestrictions)",4,1,n/a,12,1,1,2,4
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.containsAlias(ColumnIdentifier)",3,2,n/a,4,2,1,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.getOrderingComparator(CFMetaData,Selection,StatementRestrictions)",15,1,n/a,20,1,3,11,4
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.getOrderingIndex(CFMetaData,Selection)",8,1,n/a,20,1,2,11,4
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.handleUnrecognizedOrderingColumn(ColumnIdentifier)",3,2,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.isReversed(CFMetaData)",16,1,n/a,34,2,1,21,6
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.limitReceiver()",4,1,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.prepare()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.prepare(boolean)",20,2,n/a,32,1,1,18,5
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.prepareLimit(VariableSpecifications)",4,1,n/a,9,0,1,5,2
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.prepareRestrictions(CFMetaData,VariableSpecifications,Selection,boolean)",5,1,n/a,32,1,4,5,3
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.toString()",6,0,n/a,10,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.validateDistinctSelection(CFMetaData,Selection,StatementRestrictions)",8,1,n/a,18,0,3,7,5
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement.verifyOrderingIsAllowed(StatementRestrictions)",4,1,n/a,5,0,1,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.SelectStatement(CFMetaData,int,Parameters,Selection,StatementRestrictions,boolean,Comparator<List<ByteBuffer>>,Term)",1,2,n/a,19,0,8,9,1
"org.apache.cassandra.cql3.statements.SelectStatement.SingleColumnComparator.SingleColumnComparator(int,Comparator<ByteBuffer>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.SingleColumnComparator.compare(List<ByteBuffer>,List<ByteBuffer>)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.addValue(ResultSetBuilder,ColumnDefinition,Row,int,int)",10,3,n/a,17,1,5,7,4
"org.apache.cassandra.cql3.statements.SelectStatement.checkAccess(ClientState)",11,0,n/a,15,1,1,7,4
"org.apache.cassandra.cql3.statements.SelectStatement.columnFamily()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.execute(Pager,QueryOptions,int,int)",9,2,n/a,20,1,4,9,3
"org.apache.cassandra.cql3.statements.SelectStatement.execute(QueryState,QueryOptions)",16,4,n/a,13,0,2,10,3
"org.apache.cassandra.cql3.statements.SelectStatement.execute(ReadQuery,QueryOptions,QueryState,int)",4,1,n/a,7,1,4,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.executeInternal(QueryState,QueryOptions)",13,2,n/a,21,3,2,9,3
"org.apache.cassandra.cql3.statements.SelectStatement.forSelection(CFMetaData,Selection)",2,0,n/a,14,0,2,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.gatherQueriedColumns()",9,1,n/a,15,0,0,8,4
"org.apache.cassandra.cql3.statements.SelectStatement.getBoundTerms()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getComponents(CFMetaData,DecoratedKey)",4,2,n/a,12,1,2,4,2
"org.apache.cassandra.cql3.statements.SelectStatement.getFunctions()",5,1,n/a,6,0,0,1,2
"org.apache.cassandra.cql3.statements.SelectStatement.getLimit(QueryOptions)",9,1,n/a,33,3,1,12,8
"org.apache.cassandra.cql3.statements.SelectStatement.getPageSize(QueryOptions)",2,2,n/a,10,0,1,4,3
"org.apache.cassandra.cql3.statements.SelectStatement.getQuery(QueryOptions,int)",5,3,n/a,7,0,2,4,3
"org.apache.cassandra.cql3.statements.SelectStatement.getRangeCommand(QueryOptions,DataLimits,int)",6,1,n/a,13,0,3,6,3
"org.apache.cassandra.cql3.statements.SelectStatement.getRequestedRows(QueryOptions)",2,1,n/a,7,0,1,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.getRestrictions()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getResultMetadata()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getRowFilter(QueryOptions)",5,3,n/a,10,0,1,4,1
"org.apache.cassandra.cql3.statements.SelectStatement.getSelection()",0,1,n/a,7,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.getSliceCommands(QueryOptions,DataLimits,int)",12,1,n/a,20,1,3,13,4
"org.apache.cassandra.cql3.statements.SelectStatement.internalReadForView(DecoratedKey,int)",5,1,n/a,10,0,2,4,1
"org.apache.cassandra.cql3.statements.SelectStatement.keyspace()",0,8,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.makeClusteringIndexFilter(QueryOptions)",10,3,n/a,32,1,1,11,7
"org.apache.cassandra.cql3.statements.SelectStatement.makeSlices(QueryOptions)",21,1,n/a,29,1,1,17,6
"org.apache.cassandra.cql3.statements.SelectStatement.needsPostQueryOrdering()",2,2,n/a,5,0,0,1,2
"org.apache.cassandra.cql3.statements.SelectStatement.orderResults(ResultSet)",3,1,n/a,9,0,1,3,3
"org.apache.cassandra.cql3.statements.SelectStatement.pageAggregateQuery(Pager,QueryOptions,int,int)",15,1,n/a,29,4,4,13,5
"org.apache.cassandra.cql3.statements.SelectStatement.process(PartitionIterator,QueryOptions,int)",7,2,n/a,14,2,3,7,2
"org.apache.cassandra.cql3.statements.SelectStatement.process(PartitionIterator,int)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.processPartition(RowIterator,QueryOptions,ResultSetBuilder,int)",27,2,n/a,57,4,4,34,16
"org.apache.cassandra.cql3.statements.SelectStatement.processResults(PartitionIterator,QueryOptions,int)",2,3,n/a,5,0,3,2,1
"org.apache.cassandra.cql3.statements.SelectStatement.validate(ClientState)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.cql3.statements.StatementType.allowClusteringColumnSlices()",0,2,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.statements.StatementType.allowNonPrimaryKeyInWhereClause()",0,1,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.statements.StatementType.allowPartitionKeyRanges()",0,1,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.statements.StatementType.allowUseOfSecondaryIndices()",0,1,n/a,9,0,0,1,1
"org.apache.cassandra.cql3.statements.StatementType.isDelete()",0,2,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.statements.StatementType.isInsert()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.statements.StatementType.isSelect()",0,1,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.statements.StatementType.isUpdate()",0,1,n/a,8,0,0,1,1
"org.apache.cassandra.cql3.statements.TableAttributes.asAlteredTableParams(TableParams)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.TableAttributes.asNewTableParams()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.TableAttributes.build(Builder)",53,3,n/a,42,2,1,33,16
"org.apache.cassandra.cql3.statements.TableAttributes.getDeprecatedCrcCheckChance(Map<String, String>)",6,1,n/a,12,1,1,4,2
"org.apache.cassandra.cql3.statements.TableAttributes.getDouble(Option)",4,4,n/a,12,1,1,4,2
"org.apache.cassandra.cql3.statements.TableAttributes.getInt(Option)",4,5,n/a,12,1,1,4,2
"org.apache.cassandra.cql3.statements.TableAttributes.getMap(Option)",4,5,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.statements.TableAttributes.getString(Option)",4,4,n/a,7,0,1,4,2
"org.apache.cassandra.cql3.statements.TableAttributes.hasOption(Option)",2,14,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.TableAttributes.validate()",4,1,n/a,5,0,0,2,1
"org.apache.cassandra.cql3.statements.TruncateStatement.TruncateStatement(CFName)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.checkAccess(ClientState)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.execute(QueryState,QueryOptions)",9,0,n/a,15,1,2,7,3
"org.apache.cassandra.cql3.statements.TruncateStatement.executeInternal(QueryState,QueryOptions)",6,0,n/a,13,1,2,5,2
"org.apache.cassandra.cql3.statements.TruncateStatement.getBoundTerms()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.prepare()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.TruncateStatement.validate(ClientState)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsert.ParsedInsert(CFName,Raw,List<Raw>,List<Raw>,boolean)",1,0,n/a,19,0,5,3,1
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsert.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",30,0,n/a,49,2,4,23,5
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsertJson.ParsedInsertJson(CFName,Raw,Raw,boolean)",1,0,n/a,5,0,4,2,1
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsertJson.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",22,0,n/a,47,2,4,18,5
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedUpdate.ParsedUpdate(CFName,Raw,List<Pair<Raw, RawUpdate>>,WhereClause,List<Pair<Raw, Raw>>,boolean)",1,0,n/a,21,0,6,3,1
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedUpdate.prepareInternal(CFMetaData,VariableSpecifications,Conditions,Attributes)",11,0,n/a,28,1,4,9,2
"org.apache.cassandra.cql3.statements.UpdateStatement.UpdateStatement(StatementType,int,CFMetaData,Operations,StatementRestrictions,Conditions,Attributes)",1,3,n/a,10,0,7,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.addUpdateForKey(PartitionUpdate,Clustering,UpdateParameters)",25,0,n/a,36,2,3,16,9
"org.apache.cassandra.cql3.statements.UpdateStatement.addUpdateForKey(PartitionUpdate,Slice,UpdateParameters)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.cql3.statements.UpdateStatement.requireFullClusteringKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.UpdatesCollector.UpdatesCollector(Map<UUID, PartitionColumns>,int)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.cql3.statements.UpdatesCollector.getMutation(CFMetaData,DecoratedKey,ConsistencyLevel)",11,1,n/a,13,1,3,8,4
"org.apache.cassandra.cql3.statements.UpdatesCollector.getPartitionUpdate(CFMetaData,DecoratedKey,ConsistencyLevel)",5,0,n/a,22,1,3,8,2
"org.apache.cassandra.cql3.statements.UpdatesCollector.keyspaceMap(String)",3,2,n/a,16,1,1,5,2
"org.apache.cassandra.cql3.statements.UpdatesCollector.toMutations()",9,0,n/a,14,0,0,6,3
"org.apache.cassandra.cql3.statements.UpdatesCollector.validateIndexedColumns()",6,0,n/a,11,0,0,4,4
"org.apache.cassandra.cql3.statements.UseStatement.UseStatement(String)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.UseStatement.checkAccess(ClientState)",1,12,n/a,4,0,1,1,1
"org.apache.cassandra.cql3.statements.UseStatement.execute(QueryState,QueryOptions)",3,1,n/a,5,0,2,2,1
"org.apache.cassandra.cql3.statements.UseStatement.executeInternal(QueryState,QueryOptions)",1,0,n/a,6,0,2,1,1
"org.apache.cassandra.cql3.statements.UseStatement.getBoundTerms()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.UseStatement.prepare()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.cql3.statements.UseStatement.validate(ClientState)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.db.AbstractClusteringPrefix.AbstractClusteringPrefix(Kind,ByteBuffer[])",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.AbstractClusteringPrefix.clustering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.dataSize()",3,0,n/a,10,1,0,7,3
"org.apache.cassandra.db.AbstractClusteringPrefix.digest(MessageDigest)",7,0,n/a,10,1,1,7,3
"org.apache.cassandra.db.AbstractClusteringPrefix.equals(Object)",8,0,n/a,13,0,1,11,6
"org.apache.cassandra.db.AbstractClusteringPrefix.get(int)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.getRawValues()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.hashCode()",5,0,n/a,8,0,0,6,2
"org.apache.cassandra.db.AbstractClusteringPrefix.kind()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.size()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.unsharedHeapSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.AbstractClusteringPrefix.unsharedHeapSizeExcludingData()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.AbstractReadCommandBuilder(ColumnFamilyStore)",1,3,n/a,6,0,1,2,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.PartitionRangeBuilder(ColumnFamilyStore)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.build()",16,0,n/a,26,1,0,17,9
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.fromKeyExcl(Object...)",1,0,n/a,7,0,1,4,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.fromKeyIncl(Object...)",1,0,n/a,7,0,1,4,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.makeKey(CFMetaData,Object...)",4,0,n/a,7,0,2,4,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.toKeyExcl(Object...)",1,0,n/a,7,0,1,4,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder.toKeyIncl(Object...)",1,0,n/a,7,0,1,4,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionBuilder.SinglePartitionBuilder(ColumnFamilyStore,DecoratedKey)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionBuilder.build()",4,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder.SinglePartitionSliceBuilder(ColumnFamilyStore,DecoratedKey)",3,3,n/a,6,0,2,3,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder.addSlice(Slice)",1,3,n/a,5,0,1,2,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder.build()",4,3,n/a,5,0,0,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder.makeFilter()",2,3,n/a,5,0,0,1,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.bb(Object,AbstractType<?>)",1,1,n/a,4,0,2,1,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.build()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.AbstractReadCommandBuilder.columns(String...)",3,0,n/a,8,0,1,5,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.filterOn(String,Operator,Object)",6,0,n/a,12,0,3,9,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.forKeys(AbstractType<?>)",2,1,n/a,12,1,1,7,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.forValues(AbstractType<?>)",3,1,n/a,14,1,1,9,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.fromExcl(Object...)",1,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.fromIncl(Object...)",1,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.includeRow(Object...)",3,0,n/a,8,0,1,5,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.makeColumnFilter()",6,3,n/a,9,0,0,6,4
"org.apache.cassandra.db.AbstractReadCommandBuilder.makeFilter()",4,2,n/a,13,1,0,4,4
"org.apache.cassandra.db.AbstractReadCommandBuilder.makeLimits()",2,3,n/a,7,0,0,4,3
"org.apache.cassandra.db.AbstractReadCommandBuilder.reverse()",0,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.toExcl(Object...)",1,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.toIncl(Object...)",1,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.withLimit(int)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.withNowInSeconds(int)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.AbstractReadCommandBuilder.withPagingLimit(int)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.BlacklistedDirectories.BlacklistedDirectories()",5,1,n/a,15,1,0,5,2
"org.apache.cassandra.db.BlacklistedDirectories.getDirectory(File)",6,2,n/a,13,0,1,7,4
"org.apache.cassandra.db.BlacklistedDirectories.getUnreadableDirectories()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.BlacklistedDirectories.getUnwritableDirectories()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.BlacklistedDirectories.isUnreadable(File)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.db.BlacklistedDirectories.isUnwritable(File)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.db.BlacklistedDirectories.maybeMarkUnreadable(File)",3,1,n/a,16,1,1,5,2
"org.apache.cassandra.db.BlacklistedDirectories.maybeMarkUnwritable(File)",3,1,n/a,16,1,1,5,2
"org.apache.cassandra.db.BlacklistedDirectoriesMBean.getUnreadableDirectories()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.BlacklistedDirectoriesMBean.getUnwritableDirectories()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.BufferDecoratedKey.BufferDecoratedKey(Token,ByteBuffer)",1,7,n/a,6,0,2,3,1
"org.apache.cassandra.db.BufferDecoratedKey.getKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.ArrayBackedBuilder(ClusteringComparator)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.add(ByteBuffer)",2,3,n/a,7,0,1,4,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.add(Object)",3,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.build()",1,2,n/a,8,0,0,2,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildBound(boolean,boolean)",3,2,n/a,10,0,2,4,4
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildBoundWith(ByteBuffer,boolean,boolean)",3,0,n/a,6,0,3,3,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildBoundWith(List<ByteBuffer>,boolean,boolean)",4,0,n/a,8,0,3,5,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildSlice()",3,1,n/a,9,0,0,4,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildWith(ByteBuffer)",4,0,n/a,7,0,1,4,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.buildWith(List<ByteBuffer>)",5,0,n/a,9,0,1,6,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.comparator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.count()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.isDone()",1,1,n/a,4,0,0,1,2
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder.remainingCount()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.CBuilder.add(ByteBuffer)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.CBuilder.add(Object)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.CBuilder.build()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.CBuilder.buildBound(boolean,boolean)",n/a,0,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.CBuilder.buildBoundWith(ByteBuffer,boolean,boolean)",n/a,0,2,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.CBuilder.buildBoundWith(List<ByteBuffer>,boolean,boolean)",n/a,0,2,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.CBuilder.buildSlice()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.CBuilder.buildWith(ByteBuffer)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.CBuilder.buildWith(List<ByteBuffer>)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.CBuilder.comparator()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.CBuilder.count()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.CBuilder.create(ClusteringComparator)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.CBuilder.remainingCount()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.CachedHashDecoratedKey.CachedHashDecoratedKey(Token,ByteBuffer)",1,4,n/a,5,0,2,2,1
"org.apache.cassandra.db.CachedHashDecoratedKey.filterHash(long[])",1,0,n/a,16,1,1,7,2
"org.apache.cassandra.db.ClockAndCount.ClockAndCount(long,long)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.ClockAndCount.create(long,long)",1,15,n/a,4,0,2,1,1
"org.apache.cassandra.db.ClockAndCount.equals(Object)",0,0,n/a,10,0,1,6,4
"org.apache.cassandra.db.ClockAndCount.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.ClockAndCount.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.ClockAndCount.unsharedHeapSize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Clusterable.clustering()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.Clustering.Clustering(ByteBuffer...)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.Clustering.Serializer.deserialize(ByteBuffer,int,List<AbstractType<?>>)",3,1,n/a,11,1,3,3,2
"org.apache.cassandra.db.Clustering.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",4,1,n/a,7,0,3,4,2
"org.apache.cassandra.db.Clustering.Serializer.serialize(Clustering,DataOutputPlus,int,List<AbstractType<?>>)",3,1,n/a,6,0,4,3,1
"org.apache.cassandra.db.Clustering.Serializer.serialize(Clustering,int,List<AbstractType<?>>)",5,1,n/a,12,1,3,4,2
"org.apache.cassandra.db.Clustering.Serializer.serializedSize(Clustering,int,List<AbstractType<?>>)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.db.Clustering.copy(AbstractAllocator)",5,1,n/a,10,0,1,8,4
"org.apache.cassandra.db.Clustering.kind()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Clustering.toCQLString(CFMetaData)",9,0,n/a,10,1,1,7,3
"org.apache.cassandra.db.Clustering.toString(CFMetaData)",12,0,n/a,10,1,1,7,4
"org.apache.cassandra.db.ClusteringComparator.ClusteringComparator(AbstractType<?>...)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.ClusteringComparator.ClusteringComparator(List<AbstractType<?>>)",5,0,n/a,10,0,1,6,2
"org.apache.cassandra.db.ClusteringComparator.compare(Clusterable,Clusterable)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.ClusteringComparator.compare(Clustering,Clustering)",4,0,n/a,10,1,2,7,3
"org.apache.cassandra.db.ClusteringComparator.compare(ClusteringPrefix,ClusteringPrefix)",11,0,n/a,15,1,2,12,5
"org.apache.cassandra.db.ClusteringComparator.compareComponent(int,ByteBuffer,ByteBuffer)",2,2,n/a,8,0,3,5,4
"org.apache.cassandra.db.ClusteringComparator.equals(Object)",1,0,n/a,10,0,1,6,3
"org.apache.cassandra.db.ClusteringComparator.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.ClusteringComparator.indexComparator(boolean)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.ClusteringComparator.isCompatibleWith(ClusteringComparator)",6,0,n/a,25,1,1,12,5
"org.apache.cassandra.db.ClusteringComparator.make(Object...)",8,0,n/a,26,1,1,8,4
"org.apache.cassandra.db.ClusteringComparator.reversed()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ClusteringComparator.rowComparator()",0,0,n/a,12,0,0,1,1
"org.apache.cassandra.db.ClusteringComparator.size()",1,6,n/a,7,0,0,1,1
"org.apache.cassandra.db.ClusteringComparator.subtype(int)",1,3,n/a,7,0,1,1,1
"org.apache.cassandra.db.ClusteringComparator.subtypes()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.ClusteringComparator.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.ClusteringComparator.validate(ClusteringPrefix)",4,0,n/a,16,1,1,6,3
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.Deserializer(ClusteringComparator,DataInputPlus,SerializationHeader)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.compareNextTo(Bound)",8,0,n/a,17,1,1,13,6
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.deserializeAll()",1,2,n/a,5,0,0,2,2
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.deserializeNextBound()",2,0,n/a,8,0,0,5,1
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.deserializeNextClustering()",2,0,n/a,8,0,0,5,1
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.deserializeOne()",6,2,n/a,12,0,0,7,5
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.hasComponent(int)",1,1,n/a,8,0,1,5,3
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.prepare(int,int)",6,0,n/a,15,0,2,7,5
"org.apache.cassandra.db.ClusteringPrefix.Deserializer.skipNext()",6,0,n/a,12,1,0,9,5
"org.apache.cassandra.db.ClusteringPrefix.Kind.Kind(int,int)",0,8,n/a,5,0,2,2,1
"org.apache.cassandra.db.ClusteringPrefix.Kind.closeBoundOfBoundary(boolean)",1,0,n/a,7,0,1,2,4
"org.apache.cassandra.db.ClusteringPrefix.Kind.compare(Kind,Kind)",1,0,n/a,10,0,2,1,1
"org.apache.cassandra.db.ClusteringPrefix.Kind.invert()",0,0,n/a,21,1,0,15,8
"org.apache.cassandra.db.ClusteringPrefix.Kind.isBound()",0,0,n/a,12,1,0,7,2
"org.apache.cassandra.db.ClusteringPrefix.Kind.isBoundary()",0,4,n/a,10,1,0,5,2
"org.apache.cassandra.db.ClusteringPrefix.Kind.isClose(boolean)",3,0,n/a,4,0,1,1,3
"org.apache.cassandra.db.ClusteringPrefix.Kind.isEnd()",0,2,n/a,13,1,0,8,3
"org.apache.cassandra.db.ClusteringPrefix.Kind.isOpen(boolean)",3,0,n/a,4,0,1,1,3
"org.apache.cassandra.db.ClusteringPrefix.Kind.isStart()",0,2,n/a,13,1,0,8,3
"org.apache.cassandra.db.ClusteringPrefix.Kind.openBoundOfBoundary(boolean)",1,0,n/a,7,0,1,2,4
"org.apache.cassandra.db.ClusteringPrefix.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",4,0,n/a,10,0,3,5,2
"org.apache.cassandra.db.ClusteringPrefix.Serializer.deserializeValuesWithoutSize(DataInputPlus,int,int,List<AbstractType<?>>)",6,0,n/a,20,2,4,10,5
"org.apache.cassandra.db.ClusteringPrefix.Serializer.isEmpty(long,int)",0,3,n/a,6,0,2,2,1
"org.apache.cassandra.db.ClusteringPrefix.Serializer.isNull(long,int)",0,3,n/a,6,0,2,2,1
"org.apache.cassandra.db.ClusteringPrefix.Serializer.makeHeader(ClusteringPrefix,int,int)",2,2,n/a,20,1,3,10,4
"org.apache.cassandra.db.ClusteringPrefix.Serializer.serialize(ClusteringPrefix,DataOutputPlus,int,List<AbstractType<?>>)",7,0,n/a,14,1,4,5,2
"org.apache.cassandra.db.ClusteringPrefix.Serializer.serializeValuesWithoutSize(ClusteringPrefix,DataOutputPlus,int,List<AbstractType<?>>)",8,0,n/a,22,2,4,10,5
"org.apache.cassandra.db.ClusteringPrefix.Serializer.serializedSize(ClusteringPrefix,int,List<AbstractType<?>>)",4,0,n/a,9,0,3,4,2
"org.apache.cassandra.db.ClusteringPrefix.Serializer.valuesWithoutSizeSerializedSize(ClusteringPrefix,int,List<AbstractType<?>>)",8,0,n/a,20,1,3,15,5
"org.apache.cassandra.db.ClusteringPrefix.dataSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ClusteringPrefix.digest(MessageDigest)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ClusteringPrefix.get(int)",n/a,4,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ClusteringPrefix.getRawValues()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ClusteringPrefix.kind()",n/a,5,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ClusteringPrefix.size()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ClusteringPrefix.toString(CFMetaData)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStore.ColumnFamilyStore(Keyspace,String,int,CFMetaData,Directories,boolean)",1,1,n/a,9,0,6,1,1
"org.apache.cassandra.db.ColumnFamilyStore.ColumnFamilyStore(Keyspace,String,int,CFMetaData,Directories,boolean,boolean)",50,1,n/a,17,4,7,51,13
"org.apache.cassandra.db.ColumnFamilyStore.Flush.Flush(boolean)",15,2,n/a,46,1,1,17,6
"org.apache.cassandra.db.ColumnFamilyStore.Flush.reclaim(Memtable)",6,2,n/a,5,2,1,5,1
"org.apache.cassandra.db.ColumnFamilyStore.Flush.run()",18,0,n/a,35,2,0,18,6
"org.apache.cassandra.db.ColumnFamilyStore.FlushLargestColumnFamily.run()",36,0,n/a,45,2,0,27,5
"org.apache.cassandra.db.ColumnFamilyStore.PostFlush.PostFlush(boolean,Barrier,ReplayPosition)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.db.ColumnFamilyStore.PostFlush.run()",6,0,n/a,29,1,0,9,4
"org.apache.cassandra.db.ColumnFamilyStore.RefViewFragment.RefViewFragment(List<SSTableReader>,Iterable<Memtable>,Refs<SSTableReader>)",1,1,n/a,5,0,3,2,1
"org.apache.cassandra.db.ColumnFamilyStore.RefViewFragment.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.RefViewFragment.release()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.ViewFragment.ViewFragment(List<SSTableReader>,Iterable<Memtable>)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.ColumnFamilyStore.addInitialDirectories(DataDirectory[])",6,0,n/a,25,2,1,9,3
"org.apache.cassandra.db.ColumnFamilyStore.addSSTable(SSTableReader)",4,11,n/a,14,0,1,2,1
"org.apache.cassandra.db.ColumnFamilyStore.addSSTables(Collection<SSTableReader>)",2,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.ColumnFamilyStore.all()",7,2,n/a,9,1,0,4,2
"org.apache.cassandra.db.ColumnFamilyStore.apply(PartitionUpdate,UpdateTransaction,Group,ReplayPosition)",12,0,n/a,19,0,4,9,2
"org.apache.cassandra.db.ColumnFamilyStore.beginLocalSampling(String,int)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.ColumnFamilyStore.cleanupCache()",21,0,n/a,23,2,0,14,8
"org.apache.cassandra.db.ColumnFamilyStore.clearEphemeralSnapshots(Directories)",4,1,n/a,8,1,1,3,2
"org.apache.cassandra.db.ColumnFamilyStore.clearSnapshot(String)",3,2,n/a,11,0,1,2,1
"org.apache.cassandra.db.ColumnFamilyStore.clearUnsafe()",4,5,n/a,5,3,0,4,2
"org.apache.cassandra.db.ColumnFamilyStore.concatWithIndexes()",3,13,n/a,6,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.containsCachedParition(DecoratedKey)",3,0,n/a,7,0,1,1,2
"org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(Keyspace,String,CFMetaData,boolean)",18,1,n/a,21,1,4,11,4
"org.apache.cassandra.db.ColumnFamilyStore.createColumnFamilyStore(Keyspace,String,boolean)",3,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.ColumnFamilyStore.createEphemeralSnapshotMarkerFile(String)",13,1,n/a,18,1,1,7,3
"org.apache.cassandra.db.ColumnFamilyStore.createSSTableMultiWriter(Descriptor,long,long,MetadataCollector,SerializationHeader,LifecycleTransaction)",2,1,n/a,4,0,6,1,1
"org.apache.cassandra.db.ColumnFamilyStore.createSSTableMultiWriter(Descriptor,long,long,int,SerializationHeader,LifecycleTransaction)",3,0,n/a,5,0,6,2,1
"org.apache.cassandra.db.ColumnFamilyStore.decorateKey(ByteBuffer)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.disableAutoCompaction()",1,16,n/a,6,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.discardSSTables(long)",10,1,n/a,24,1,1,9,4
"org.apache.cassandra.db.ColumnFamilyStore.dumpMemtable()",3,1,n/a,12,1,0,4,1
"org.apache.cassandra.db.ColumnFamilyStore.enableAutoCompaction()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.enableAutoCompaction(boolean)",3,1,n/a,12,0,1,4,2
"org.apache.cassandra.db.ColumnFamilyStore.estimateKeys()",2,0,n/a,7,0,0,4,2
"org.apache.cassandra.db.ColumnFamilyStore.estimatedKeysForRange(Range<Token>)",4,0,n/a,10,1,1,5,2
"org.apache.cassandra.db.ColumnFamilyStore.finishLocalSampling(String,int)",15,0,n/a,17,1,2,6,2
"org.apache.cassandra.db.ColumnFamilyStore.forceBlockingFlush()",2,56,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceCleanup()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceFlush()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceFlush(ReplayPosition)",9,2,n/a,4,4,1,10,3
"org.apache.cassandra.db.ColumnFamilyStore.forceMajorCompaction()",1,13,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.forceMajorCompaction(boolean)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.gcBefore(int)",0,5,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getAndReferenceOverlappingSSTables(SSTableSet,Iterable<SSTableReader>)",2,1,n/a,13,1,2,5,3
"org.apache.cassandra.db.ColumnFamilyStore.getBackgroundCompactionTaskSubmitter()",4,0,n/a,6,2,0,4,3
"org.apache.cassandra.db.ColumnFamilyStore.getBuiltIndexes()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCachedCounter(ByteBuffer,Clustering,ColumnDefinition,CellPath)",3,0,n/a,6,0,4,3,2
"org.apache.cassandra.db.ColumnFamilyStore.getColumnFamilyName()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCompactionParameters()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCompactionParametersJson()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCompactionStrategyManager()",0,24,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getComparator()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCompressionParameters()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getCrcCheckChance()",1,8,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getDirectories()",0,24,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getDroppableTombstoneRatio()",7,0,n/a,12,1,0,7,3
"org.apache.cassandra.db.ColumnFamilyStore.getExpectedCompactedFileSize(Iterable<SSTableReader>,OperationType)",6,4,n/a,33,1,2,12,6
"org.apache.cassandra.db.ColumnFamilyStore.getLiveSSTables()",2,114,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMaxSizeFile(Iterable<SSTableReader>)",2,0,n/a,17,2,1,7,3
"org.apache.cassandra.db.ColumnFamilyStore.getMaximumCompactionThreshold()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getMeanColumns()",5,0,n/a,12,1,0,7,3
"org.apache.cassandra.db.ColumnFamilyStore.getMeanPartitionSize()",5,0,n/a,12,1,0,7,3
"org.apache.cassandra.db.ColumnFamilyStore.getMinimumCompactionThreshold()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getOverlappingSSTables(SSTableSet,Iterable<SSTableReader>)",20,2,n/a,54,3,2,23,7
"org.apache.cassandra.db.ColumnFamilyStore.getPartitioner()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getRawCachedPartition(DecoratedKey)",3,0,n/a,15,0,1,4,4
"org.apache.cassandra.db.ColumnFamilyStore.getSSTableCountPerLevel()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablePath(File)",4,5,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablePath(File,Type)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablePath(File,Version,Type)",6,2,n/a,11,0,3,2,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTables(SSTableSet)",2,29,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSSTablesForKey(String)",10,0,n/a,16,2,1,7,3
"org.apache.cassandra.db.ColumnFamilyStore.getSnapshotCreationTime(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSnapshotDetails()",2,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getSnapshotSSTableReader(String)",25,0,n/a,39,3,1,19,8
"org.apache.cassandra.db.ColumnFamilyStore.getTableName()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getTracker()",0,63,n/a,7,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getUncompactingSSTables()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.getUnleveledSSTables()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.invalidate()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.invalidate(boolean)",10,3,n/a,25,2,1,13,3
"org.apache.cassandra.db.ColumnFamilyStore.invalidateCachedPartition(DecoratedKey)",3,3,n/a,6,0,1,3,2
"org.apache.cassandra.db.ColumnFamilyStore.invalidateCachedPartition(RowCacheKey)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.invalidateCaches()",4,2,n/a,7,0,0,4,2
"org.apache.cassandra.db.ColumnFamilyStore.isAutoCompactionDisabled()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isCounterCacheEnabled()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.ColumnFamilyStore.isEmpty()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isFilterFullyCoveredBy(ClusteringIndexFilter,DataLimits,CachedPartition,int)",5,0,n/a,18,0,4,3,4
"org.apache.cassandra.db.ColumnFamilyStore.isIndex()",1,6,n/a,5,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.isKeyCacheEnabled()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.ColumnFamilyStore.isRowCacheEnabled()",3,2,n/a,6,0,0,3,3
"org.apache.cassandra.db.ColumnFamilyStore.isValid()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.keySamples(Range<Token>)",5,1,n/a,13,2,1,6,2
"org.apache.cassandra.db.ColumnFamilyStore.loadNewSSTables()",48,2,n/a,72,2,0,36,10
"org.apache.cassandra.db.ColumnFamilyStore.loadNewSSTables(String,String)",3,0,n/a,12,0,2,2,1
"org.apache.cassandra.db.ColumnFamilyStore.logFlush()",30,1,n/a,22,1,0,14,2
"org.apache.cassandra.db.ColumnFamilyStore.markAllCompacting(OperationType)",9,0,n/a,8,2,1,7,1
"org.apache.cassandra.db.ColumnFamilyStore.markObsolete(Collection<SSTableReader>,OperationType)",4,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.ColumnFamilyStore.maybeRemoveUnreadableSSTables(File)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.maybeUpdateRowCache(DecoratedKey)",3,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.ColumnFamilyStore.putCachedCounter(ByteBuffer,Clustering,ColumnDefinition,CellPath,ClockAndCount)",3,0,n/a,6,0,5,3,2
"org.apache.cassandra.db.ColumnFamilyStore.ratio(float,float)",1,4,n/a,4,0,2,1,1
"org.apache.cassandra.db.ColumnFamilyStore.rebuildOnFailedScrub(Throwable)",10,2,n/a,18,0,1,9,3
"org.apache.cassandra.db.ColumnFamilyStore.rebuildSecondaryIndex(String)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.rebuildSecondaryIndex(String,String,String...)",10,0,n/a,11,1,3,6,1
"org.apache.cassandra.db.ColumnFamilyStore.reload()",18,1,n/a,22,0,0,15,8
"org.apache.cassandra.db.ColumnFamilyStore.replaceFlushed(Memtable,Collection<SSTableReader>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.ColumnFamilyStore.resetFileIndexGenerator()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.runWithCompactionsDisabled(Callable<V>,boolean,boolean)",18,4,n/a,44,4,3,18,7
"org.apache.cassandra.db.ColumnFamilyStore.scheduleFlush()",9,2,n/a,21,6,0,11,4
"org.apache.cassandra.db.ColumnFamilyStore.scrub(boolean,boolean,boolean)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.ColumnFamilyStore.scrub(boolean,boolean,boolean,boolean)",4,1,n/a,17,1,4,7,5
"org.apache.cassandra.db.ColumnFamilyStore.scrubDataDirectories(CFMetaData)",38,1,n/a,50,2,1,30,13
"org.apache.cassandra.db.ColumnFamilyStore.select(Function<View, Iterable<SSTableReader>>)",5,3,n/a,6,0,1,3,1
"org.apache.cassandra.db.ColumnFamilyStore.selectAndReference(Function<View, Iterable<SSTableReader>>)",13,4,n/a,26,2,1,16,7
"org.apache.cassandra.db.ColumnFamilyStore.setCompactionParameters(Map<String, String>)",6,1,n/a,15,1,1,6,2
"org.apache.cassandra.db.ColumnFamilyStore.setCompactionParametersJson(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.setCompactionThresholds(int,int)",4,0,n/a,7,0,2,4,1
"org.apache.cassandra.db.ColumnFamilyStore.setCompressionParameters(Map<String, String>)",5,0,n/a,12,1,1,4,2
"org.apache.cassandra.db.ColumnFamilyStore.setCrcCheckChance(double)",10,3,n/a,17,2,1,7,4
"org.apache.cassandra.db.ColumnFamilyStore.setMaximumCompactionThreshold(int)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.ColumnFamilyStore.setMinimumCompactionThreshold(int)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.ColumnFamilyStore.shutdownPostFlushExecutor()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshot(String)",1,5,n/a,9,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshot(String,Predicate<SSTableReader>,boolean)",2,2,n/a,8,0,3,2,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshotExists(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshotWithoutFlush(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.snapshotWithoutFlush(String,Predicate<SSTableReader>,boolean)",17,2,n/a,27,3,3,15,6
"org.apache.cassandra.db.ColumnFamilyStore.sstablesRewrite(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.switchMemtable()",5,3,n/a,19,1,0,7,1
"org.apache.cassandra.db.ColumnFamilyStore.switchMemtableIfCurrent(Memtable)",4,0,n/a,14,1,1,4,2
"org.apache.cassandra.db.ColumnFamilyStore.toString()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.trueSnapshotsSize()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnFamilyStore.truncateBlocking()",24,17,n/a,14,2,0,21,4
"org.apache.cassandra.db.ColumnFamilyStore.unregisterMBean()",6,1,n/a,12,1,0,6,3
"org.apache.cassandra.db.ColumnFamilyStore.validateCompactionThresholds(int,int)",3,3,n/a,9,0,2,4,4
"org.apache.cassandra.db.ColumnFamilyStore.verify(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.ColumnFamilyStore.writeSnapshotManifest(JSONArray,String)",12,1,n/a,19,2,2,9,3
"org.apache.cassandra.db.ColumnFamilyStoreMBean.beginLocalSampling(String,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.estimateKeys()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.finishLocalSampling(String,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.forceMajorCompaction(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getBuiltIndexes()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getColumnFamilyName()",n/a,4,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getCompactionParameters()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getCompactionParametersJson()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getCompressionParameters()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getDroppableTombstoneRatio()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getMaximumCompactionThreshold()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getMinimumCompactionThreshold()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getSSTableCountPerLevel()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getSSTablesForKey(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getTableName()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.getUnleveledSSTables()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.isAutoCompactionDisabled()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.loadNewSSTables()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.setCompactionParameters(Map<String, String>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.setCompactionParametersJson(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.setCompactionThresholds(int,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.setCompressionParameters(Map<String, String>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.setCrcCheckChance(double)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.setMaximumCompactionThreshold(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.setMinimumCompactionThreshold(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ColumnFamilyStoreMBean.trueSnapshotsSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ColumnIndex.Builder.Builder(UnfilteredRowIterator,SequentialWriter,SerializationHeader,int)",1,1,n/a,11,0,4,5,1
"org.apache.cassandra.db.ColumnIndex.Builder.add(Unfiltered)",10,1,n/a,22,1,1,13,5
"org.apache.cassandra.db.ColumnIndex.Builder.addIndexBlock()",3,2,n/a,10,0,0,3,1
"org.apache.cassandra.db.ColumnIndex.Builder.build()",6,1,n/a,8,0,0,5,2
"org.apache.cassandra.db.ColumnIndex.Builder.close()",4,1,n/a,13,0,0,7,4
"org.apache.cassandra.db.ColumnIndex.Builder.currentPosition()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.ColumnIndex.Builder.writePartitionHeader(UnfilteredRowIterator)",8,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.ColumnIndex.ColumnIndex(long,List<IndexInfo>)",0,2,n/a,6,0,2,3,1
"org.apache.cassandra.db.ColumnIndex.nothing()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.ColumnIndex.writeAndBuildIndex(UnfilteredRowIterator,SequentialWriter,SerializationHeader,Version)",5,0,n/a,6,0,4,3,2
"org.apache.cassandra.db.Columns.Columns(Object[])",2,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.Columns.Columns(Object[],int)",1,6,n/a,6,0,2,3,1
"org.apache.cassandra.db.Columns.Serializer.deserialize(DataInputPlus,CFMetaData)",12,0,n/a,22,2,2,14,4
"org.apache.cassandra.db.Columns.Serializer.deserializeLargeSubset(DataInputPlus,Columns,int)",13,1,n/a,37,3,3,24,7
"org.apache.cassandra.db.Columns.Serializer.deserializeSubset(Columns,DataInputPlus)",9,0,n/a,28,3,2,14,6
"org.apache.cassandra.db.Columns.Serializer.encodeBitmap(Collection<ColumnDefinition>,Columns,int)",4,2,n/a,24,1,3,13,3
"org.apache.cassandra.db.Columns.Serializer.serialize(Columns,DataOutputPlus)",3,0,n/a,6,0,2,3,2
"org.apache.cassandra.db.Columns.Serializer.serializeLargeSubset(Collection<ColumnDefinition>,int,Columns,int,DataOutputPlus)",11,1,n/a,32,2,5,16,8
"org.apache.cassandra.db.Columns.Serializer.serializeLargeSubsetSize(Collection<ColumnDefinition>,int,Columns,int)",11,1,n/a,33,2,4,17,8
"org.apache.cassandra.db.Columns.Serializer.serializeSubset(Collection<ColumnDefinition>,Columns,DataOutputPlus)",6,0,n/a,33,1,3,7,3
"org.apache.cassandra.db.Columns.Serializer.serializedSize(Columns)",3,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.Columns.Serializer.serializedSubsetSize(Collection<ColumnDefinition>,Columns)",6,0,n/a,17,1,2,7,3
"org.apache.cassandra.db.Columns.complexColumnCount()",1,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.complexColumns()",2,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.complexIdx(ColumnDefinition)",2,0,n/a,13,0,1,1,1
"org.apache.cassandra.db.Columns.contains(ColumnDefinition)",2,1,n/a,11,0,1,1,1
"org.apache.cassandra.db.Columns.containsAll(Collection<?>)",5,0,n/a,19,0,1,9,5
"org.apache.cassandra.db.Columns.digest(MessageDigest)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.db.Columns.equals(Object)",1,0,n/a,10,0,1,6,4
"org.apache.cassandra.db.Columns.findFirstComplexIdx(Object[])",6,3,n/a,8,0,1,4,3
"org.apache.cassandra.db.Columns.from(Collection<ColumnDefinition>)",6,0,n/a,11,0,1,2,1
"org.apache.cassandra.db.Columns.getComplex(int)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.db.Columns.getSimple(int)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.db.Columns.hasComplex()",1,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.hasSimple()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.hashCode()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.Columns.inOrderInclusionTester()",3,0,n/a,11,0,0,2,1
"org.apache.cassandra.db.Columns.isEmpty()",1,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.iterator()",2,4,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.mergeTo(Columns)",5,0,n/a,24,0,1,10,6
"org.apache.cassandra.db.Columns.of(ColumnDefinition)",3,0,n/a,11,0,1,1,2
"org.apache.cassandra.db.Columns.selectOrderIterator()",6,0,n/a,19,1,0,3,1
"org.apache.cassandra.db.Columns.simpleColumnCount()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.simpleColumns()",1,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.simpleIdx(ColumnDefinition)",2,0,n/a,13,0,1,1,1
"org.apache.cassandra.db.Columns.size()",1,7,n/a,9,0,0,1,1
"org.apache.cassandra.db.Columns.toString()",5,0,n/a,12,1,0,8,3
"org.apache.cassandra.db.Columns.without(ColumnDefinition)",4,0,n/a,15,0,1,4,3
"org.apache.cassandra.db.CompactTables.CompactTables()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.CompactTables.DefaultNames.DefaultNames(Set<String>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.CompactTables.DefaultNames.defaultClusteringName()",1,2,n/a,10,1,0,5,3
"org.apache.cassandra.db.CompactTables.DefaultNames.defaultCompactValueName()",1,1,n/a,10,1,0,5,4
"org.apache.cassandra.db.CompactTables.DefaultNames.defaultPartitionKeyName()",1,2,n/a,12,1,0,5,4
"org.apache.cassandra.db.CompactTables.columnDefinitionComparator(Kind,boolean,AbstractType<?>,AbstractType<?>)",0,0,n/a,7,0,4,3,4
"org.apache.cassandra.db.CompactTables.defaultNameGenerator(Iterable<ColumnDefinition>)",4,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.CompactTables.defaultNameGenerator(Set<String>)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.CompactTables.getCompactValueColumn(PartitionColumns,boolean)",5,0,n/a,12,1,2,7,5
"org.apache.cassandra.db.CompactTables.hasEmptyCompactValue(CFMetaData)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.CompactTables.isSuperColumnMapColumn(ColumnDefinition)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.Conflicts.Conflicts()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.Conflicts.mergeCounterValues(ByteBuffer,ByteBuffer)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.Conflicts.resolveCounter(long,boolean,ByteBuffer,long,boolean,ByteBuffer)",0,1,n/a,16,0,6,5,5
"org.apache.cassandra.db.Conflicts.resolveRegular(long,boolean,int,ByteBuffer,long,boolean,int,ByteBuffer)",1,2,n/a,21,0,8,10,8
"org.apache.cassandra.db.ConsistencyLevel.ConsistencyLevel(int)",1,9,n/a,4,0,1,1,1
"org.apache.cassandra.db.ConsistencyLevel.ConsistencyLevel(int,boolean)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.db.ConsistencyLevel.assureSufficientLiveNodes(Keyspace,Iterable<InetAddress>)",30,3,n/a,53,4,2,34,15
"org.apache.cassandra.db.ConsistencyLevel.blockFor(Keyspace)",12,8,n/a,38,2,1,28,12
"org.apache.cassandra.db.ConsistencyLevel.countLocalEndpoints(Iterable<InetAddress>)",1,4,n/a,8,0,1,5,3
"org.apache.cassandra.db.ConsistencyLevel.countPerDCEndpoints(Keyspace,Iterable<InetAddress>)",8,2,n/a,13,1,2,8,3
"org.apache.cassandra.db.ConsistencyLevel.filterForEachQuorum(Keyspace,List<InetAddress>,ReadRepairDecision)",22,1,n/a,25,1,3,16,7
"org.apache.cassandra.db.ConsistencyLevel.filterForQuery(Keyspace,List<InetAddress>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.ConsistencyLevel.filterForQuery(Keyspace,List<InetAddress>,ReadRepairDecision)",20,2,n/a,39,2,3,22,10
"org.apache.cassandra.db.ConsistencyLevel.fromCode(int)",2,1,n/a,6,0,1,3,3
"org.apache.cassandra.db.ConsistencyLevel.isDatacenterLocal()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.ConsistencyLevel.isLocal(InetAddress)",4,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.ConsistencyLevel.isSerialConsistency()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.db.ConsistencyLevel.isSufficientLiveNodes(Keyspace,Iterable<InetAddress>)",11,0,n/a,26,3,2,15,9
"org.apache.cassandra.db.ConsistencyLevel.localQuorumFor(Keyspace,String)",4,5,n/a,6,0,2,1,2
"org.apache.cassandra.db.ConsistencyLevel.quorumFor(Keyspace)",2,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.ConsistencyLevel.requireNetworkTopologyStrategy(String)",6,1,n/a,6,0,1,3,2
"org.apache.cassandra.db.ConsistencyLevel.validateCounterForWrite(CFMetaData)",3,0,n/a,7,0,1,4,3
"org.apache.cassandra.db.ConsistencyLevel.validateForCas()",2,0,n/a,5,0,0,2,2
"org.apache.cassandra.db.ConsistencyLevel.validateForCasCommit(String)",2,0,n/a,13,1,1,7,3
"org.apache.cassandra.db.ConsistencyLevel.validateForRead(String)",1,0,n/a,8,1,1,3,2
"org.apache.cassandra.db.ConsistencyLevel.validateForWrite(String)",1,0,n/a,9,1,1,4,2
"org.apache.cassandra.db.CounterMutation.CounterMutation(Mutation,ConsistencyLevel)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.CounterMutation.CounterMutationSerializer.deserialize(DataInputPlus,int)",4,21,n/a,6,0,2,3,1
"org.apache.cassandra.db.CounterMutation.CounterMutationSerializer.serialize(CounterMutation,DataOutputPlus,int)",3,22,n/a,5,0,3,2,1
"org.apache.cassandra.db.CounterMutation.CounterMutationSerializer.serializedSize(CounterMutation,int)",3,19,n/a,5,0,2,1,1
"org.apache.cassandra.db.CounterMutation.apply()",13,0,n/a,34,1,0,12,3
"org.apache.cassandra.db.CounterMutation.compare(Clustering,Clustering,ColumnFamilyStore)",2,2,n/a,8,0,3,5,4
"org.apache.cassandra.db.CounterMutation.consistency()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.CounterMutation.getColumnFamilyIds()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.CounterMutation.getCounterLockKeys()",15,1,n/a,4,6,0,4,1
"org.apache.cassandra.db.CounterMutation.getKeyspaceName()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.CounterMutation.getMutation()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.CounterMutation.getPartitionUpdates()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.CounterMutation.getTimeout()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.CounterMutation.grabCounterLocks(Keyspace,List<Lock>)",16,1,n/a,18,2,2,8,4
"org.apache.cassandra.db.CounterMutation.key()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.CounterMutation.makeMutationMessage()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.CounterMutation.processModifications(PartitionUpdate)",14,1,n/a,18,1,1,12,4
"org.apache.cassandra.db.CounterMutation.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.CounterMutation.toString(boolean)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.CounterMutation.updateForRow(PeekingIterator<CounterMark>,Row,ColumnFamilyStore)",24,2,n/a,22,2,3,14,8
"org.apache.cassandra.db.CounterMutation.updateWithCurrentValue(CounterMark,ClockAndCount,ColumnFamilyStore)",14,3,n/a,8,0,3,4,1
"org.apache.cassandra.db.CounterMutation.updateWithCurrentValuesFromCFS(List<CounterMark>,ColumnFamilyStore)",27,1,n/a,28,2,2,17,5
"org.apache.cassandra.db.CounterMutation.updateWithCurrentValuesFromCache(List<CounterMark>,ColumnFamilyStore)",11,1,n/a,15,2,2,7,3
"org.apache.cassandra.db.CounterMutationVerbHandler.doVerb(MessageIn<CounterMutation>,int)",9,0,n/a,4,2,2,5,1
"org.apache.cassandra.db.DataRange.DataRange(AbstractBounds<PartitionPosition>,ClusteringIndexFilter)",0,7,n/a,12,0,2,2,1
"org.apache.cassandra.db.DataRange.Paging.Paging(AbstractBounds<PartitionPosition>,ClusteringIndexFilter,ClusteringComparator,Clustering,boolean)",3,3,n/a,15,0,5,6,3
"org.apache.cassandra.db.DataRange.Paging.clusteringIndexFilter(DecoratedKey)",3,0,n/a,7,0,1,1,2
"org.apache.cassandra.db.DataRange.Paging.forSubRange(AbstractBounds<PartitionPosition>)",4,0,n/a,9,0,1,1,2
"org.apache.cassandra.db.DataRange.Paging.getLastReturned()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.DataRange.Paging.isPaging()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.DataRange.Paging.isUnrestricted()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.db.DataRange.Paging.toString(CFMetaData)",5,0,n/a,9,0,1,1,2
"org.apache.cassandra.db.DataRange.Serializer.deserialize(DataInputPlus,int,CFMetaData)",8,0,n/a,16,1,3,8,2
"org.apache.cassandra.db.DataRange.Serializer.serialize(DataRange,DataOutputPlus,int,CFMetaData)",6,0,n/a,12,1,4,7,2
"org.apache.cassandra.db.DataRange.Serializer.serializedSize(DataRange,int,CFMetaData)",4,0,n/a,12,1,3,5,2
"org.apache.cassandra.db.DataRange.allData(IPartitioner)",4,0,n/a,11,0,1,1,1
"org.apache.cassandra.db.DataRange.allData(IPartitioner,ClusteringIndexFilter)",5,0,n/a,13,0,2,1,1
"org.apache.cassandra.db.DataRange.appendClause(PartitionPosition,StringBuilder,CFMetaData,boolean,boolean)",15,2,n/a,16,1,5,8,2
"org.apache.cassandra.db.DataRange.appendKeyString(StringBuilder,AbstractType<?>,ByteBuffer)",8,1,n/a,16,1,3,8,4
"org.apache.cassandra.db.DataRange.clusteringIndexFilter(DecoratedKey)",0,0,n/a,14,0,1,1,1
"org.apache.cassandra.db.DataRange.contains(PartitionPosition)",1,0,n/a,9,0,1,1,1
"org.apache.cassandra.db.DataRange.forKeyRange(Range<PartitionPosition>)",2,1,n/a,11,0,1,1,1
"org.apache.cassandra.db.DataRange.forPaging(AbstractBounds<PartitionPosition>,ClusteringComparator,Clustering,boolean)",1,0,n/a,16,0,4,1,1
"org.apache.cassandra.db.DataRange.forSubRange(AbstractBounds<PartitionPosition>)",1,0,n/a,13,0,1,1,1
"org.apache.cassandra.db.DataRange.forTokenRange(Range<Token>)",2,1,n/a,11,0,1,1,1
"org.apache.cassandra.db.DataRange.getOperator(boolean,boolean)",0,1,n/a,6,0,2,1,4
"org.apache.cassandra.db.DataRange.isNamesQuery()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.DataRange.isPaging()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.DataRange.isUnrestricted()",5,1,n/a,10,0,0,1,3
"org.apache.cassandra.db.DataRange.isWrapAround()",1,0,n/a,10,0,0,1,2
"org.apache.cassandra.db.DataRange.keyRange()",0,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.DataRange.startKey()",0,4,n/a,9,0,0,1,1
"org.apache.cassandra.db.DataRange.stopKey()",0,3,n/a,9,0,0,1,1
"org.apache.cassandra.db.DataRange.toCQLString(CFMetaData)",18,0,n/a,23,1,1,16,7
"org.apache.cassandra.db.DataRange.toString(CFMetaData)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.DecoratedKey.DecoratedKey(Token)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.DecoratedKey.compareTo(IPartitioner,ByteBuffer,PartitionPosition)",7,1,n/a,9,0,3,5,3
"org.apache.cassandra.db.DecoratedKey.compareTo(PartitionPosition)",7,6,n/a,11,0,1,7,4
"org.apache.cassandra.db.DecoratedKey.equals(Object)",3,0,n/a,10,0,1,6,4
"org.apache.cassandra.db.DecoratedKey.filterHash(long[])",4,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.DecoratedKey.getKey()",n/a,24,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.DecoratedKey.getPartitioner()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.DecoratedKey.getToken()",0,18,n/a,4,0,0,1,1
"org.apache.cassandra.db.DecoratedKey.hashCode()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.DecoratedKey.isMinimum()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.DecoratedKey.kind()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.DecoratedKey.minValue()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.DecoratedKey.toString()",4,1,n/a,6,0,0,2,2
"org.apache.cassandra.db.DefinitionsUpdateVerbHandler.doVerb(MessageIn<Collection<Mutation>>,int)",5,0,n/a,4,2,2,3,1
"org.apache.cassandra.db.DeletionInfo.collectStats(Collector)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.copy(AbstractAllocator)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.dataSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.getPartitionDeletion()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.hasRanges()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.isLive()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.maxTimestamp()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.mayModify(DeletionInfo)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.mutableCopy()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.rangeCount()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.rangeCovering(Clustering)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.rangeIterator(Slice,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.DeletionInfo.rangeIterator(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.DeletionPurger.shouldPurge(DeletionTime)",4,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.DeletionPurger.shouldPurge(LivenessInfo,int)",4,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.DeletionPurger.shouldPurge(long,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.DeletionTime.DeletionTime(long,int)",0,21,n/a,5,0,2,2,1
"org.apache.cassandra.db.DeletionTime.Serializer.deserialize(DataInputPlus)",3,8,n/a,8,0,1,3,3
"org.apache.cassandra.db.DeletionTime.Serializer.serialize(DeletionTime,DataOutputPlus)",4,8,n/a,5,0,2,2,1
"org.apache.cassandra.db.DeletionTime.Serializer.serializedSize(DeletionTime)",4,8,n/a,5,0,1,1,1
"org.apache.cassandra.db.DeletionTime.Serializer.skip(DataInputPlus)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.DeletionTime.compareTo(DeletionTime)",8,0,n/a,13,0,1,9,5
"org.apache.cassandra.db.DeletionTime.dataSize()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.DeletionTime.deletes(Cell)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.DeletionTime.deletes(LivenessInfo)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.DeletionTime.deletes(long)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.DeletionTime.digest(MessageDigest)",2,1,n/a,7,0,1,1,1
"org.apache.cassandra.db.DeletionTime.equals(Object)",4,1,n/a,8,0,1,4,3
"org.apache.cassandra.db.DeletionTime.hashCode()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.DeletionTime.isLive()",2,7,n/a,7,0,0,1,2
"org.apache.cassandra.db.DeletionTime.localDeletionTime()",0,15,n/a,8,0,0,1,1
"org.apache.cassandra.db.DeletionTime.markedForDeleteAt()",0,17,n/a,9,0,0,1,1
"org.apache.cassandra.db.DeletionTime.supersedes(DeletionTime)",6,1,n/a,4,0,1,1,3
"org.apache.cassandra.db.DeletionTime.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.DeletionTime.unsharedHeapSize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Directories.DataDirectory.DataDirectory(File)",0,8,n/a,4,0,1,1,1
"org.apache.cassandra.db.Directories.DataDirectory.equals(Object)",3,0,n/a,8,0,1,6,4
"org.apache.cassandra.db.Directories.DataDirectory.getAvailableSpace()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Directories.DataDirectory.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.Directories.DataDirectoryCandidate.DataDirectoryCandidate(DataDirectory)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.Directories.DataDirectoryCandidate.calcFreePerc(long)",0,1,n/a,6,0,1,3,1
"org.apache.cassandra.db.Directories.DataDirectoryCandidate.compareTo(DataDirectoryCandidate)",3,0,n/a,10,0,1,6,3
"org.apache.cassandra.db.Directories.Directories(CFMetaData)",1,24,n/a,4,0,1,1,1
"org.apache.cassandra.db.Directories.Directories(CFMetaData,DataDirectory[])",30,2,n/a,9,4,2,41,16
"org.apache.cassandra.db.Directories.FileAction.FileAction()",0,7,n/a,3,0,0,0,1
"org.apache.cassandra.db.Directories.FileAction.hasPrivilege(File,FileAction)",12,3,n/a,28,1,2,24,13
"org.apache.cassandra.db.Directories.SSTableLister.SSTableLister(OnTxnErr)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.Directories.SSTableLister.filter()",12,2,n/a,20,2,0,13,7
"org.apache.cassandra.db.Directories.SSTableLister.getFilter()",13,3,n/a,51,4,0,27,12
"org.apache.cassandra.db.Directories.SSTableLister.includeBackups(boolean)",1,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.Directories.SSTableLister.list()",2,8,n/a,5,0,0,2,1
"org.apache.cassandra.db.Directories.SSTableLister.listFiles()",8,4,n/a,13,2,0,6,3
"org.apache.cassandra.db.Directories.SSTableLister.onlyBackups(boolean)",1,1,n/a,8,0,1,5,2
"org.apache.cassandra.db.Directories.SSTableLister.skipTemporary(boolean)",1,2,n/a,7,0,1,4,2
"org.apache.cassandra.db.Directories.SSTableLister.snapshots(String)",1,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.TrueFilesSizeVisitor()",7,1,n/a,8,0,0,5,2
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.getAllocatedSize()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.isAcceptable(Path)",9,1,n/a,10,0,1,3,5
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.visitFile(Path,BasicFileAttributes)",6,0,n/a,10,1,2,4,2
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor.visitFileFailed(Path,IOException)",0,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.Directories.clearSnapshot(String,List<File>)",7,0,n/a,24,3,2,10,6
"org.apache.cassandra.db.Directories.find(String)",3,0,n/a,9,1,1,4,3
"org.apache.cassandra.db.Directories.getBackupsDirectory(Descriptor)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.Directories.getBackupsDirectory(File)",6,1,n/a,11,1,1,3,2
"org.apache.cassandra.db.Directories.getCFDirectories()",3,2,n/a,10,1,0,5,3
"org.apache.cassandra.db.Directories.getDirectoryForNewSSTables()",1,20,n/a,11,0,0,1,1
"org.apache.cassandra.db.Directories.getEphemeralSnapshotMarkerFile(File)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.Directories.getKSChildDirectories(String)",5,0,n/a,18,2,1,10,5
"org.apache.cassandra.db.Directories.getLocationForDisk(DataDirectory)",3,3,n/a,14,0,1,5,4
"org.apache.cassandra.db.Directories.getNewEphemeralSnapshotMarkerFile(String)",4,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.Directories.getOrCreate(File,String...)",11,4,n/a,14,1,2,7,8
"org.apache.cassandra.db.Directories.getSnapshotDetails()",10,0,n/a,21,1,0,10,3
"org.apache.cassandra.db.Directories.getSnapshotDirectory(Descriptor,String)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.db.Directories.getSnapshotDirectory(File,String)",6,3,n/a,22,1,2,3,2
"org.apache.cassandra.db.Directories.getSnapshotManifestFile(String)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.Directories.getTrueAllocatedSizeIn(File)",6,2,n/a,15,1,1,7,3
"org.apache.cassandra.db.Directories.getWriteableLocation(long)",14,4,n/a,40,2,1,22,7
"org.apache.cassandra.db.Directories.getWriteableLocationAsFile(long)",2,3,n/a,9,0,1,1,1
"org.apache.cassandra.db.Directories.hasAvailableDiskSpace(long,long)",3,1,n/a,16,1,2,10,4
"org.apache.cassandra.db.Directories.join(String...)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.db.Directories.listEphemeralSnapshots()",6,0,n/a,10,1,0,5,3
"org.apache.cassandra.db.Directories.listSnapshots()",11,2,n/a,23,4,0,10,8
"org.apache.cassandra.db.Directories.overrideDataDirectoriesForTest(String)",2,0,n/a,6,0,1,4,2
"org.apache.cassandra.db.Directories.pickWriteableDirectory(List<DataDirectoryCandidate>)",3,1,n/a,14,1,1,6,3
"org.apache.cassandra.db.Directories.resetDataDirectoriesAfterTest()",3,0,n/a,7,0,0,5,2
"org.apache.cassandra.db.Directories.snapshotCreationTime(String)",4,0,n/a,11,1,1,5,3
"org.apache.cassandra.db.Directories.snapshotExists(String)",9,0,n/a,18,2,1,8,4
"org.apache.cassandra.db.Directories.sortWriteableCandidates(List<DataDirectoryCandidate>,long)",2,1,n/a,9,0,2,3,2
"org.apache.cassandra.db.Directories.sstableLister(OnTxnErr)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.db.Directories.trueSnapshotsSize()",6,0,n/a,15,1,0,5,3
"org.apache.cassandra.db.Directories.verifyFullPermissions(File,String)",9,0,n/a,32,1,2,13,6
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator.EmptyBasePartitionIterator()",0,2,n/a,3,0,0,0,1
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator.close()",0,3,n/a,3,0,0,0,1
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator.hasNext()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.EmptyBaseRowIterator(PartitionColumns,CFMetaData,DecoratedKey,boolean,Row)",0,2,n/a,8,0,5,5,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.close()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.columns()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.hasNext()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.isEmpty()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.isReverseOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.partitionKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator.staticRow()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyPartitionIterator.EmptyPartitionIterator()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyRowIterator.EmptyRowIterator(CFMetaData,DecoratedKey,boolean,Row)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredPartitionIterator.EmptyUnfilteredPartitionIterator(CFMetaData,boolean)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredPartitionIterator.isForThrift()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredPartitionIterator.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator.EmptyUnfilteredRowIterator(PartitionColumns,CFMetaData,DecoratedKey,boolean,Row,DeletionTime)",1,2,n/a,6,0,6,2,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator.isEmpty()",1,1,n/a,4,0,0,1,2
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator.partitionLevelDeletion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator.stats()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.partition()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.EmptyIterators.row(CFMetaData,DecoratedKey,boolean)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.db.EmptyIterators.unfilteredPartition(CFMetaData,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.EmptyIterators.unfilteredRow(CFMetaData,DecoratedKey,boolean)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.db.EmptyIterators.unfilteredRow(CFMetaData,DecoratedKey,boolean,Row,DeletionTime)",6,0,n/a,12,0,5,7,3
"org.apache.cassandra.db.HintedHandOffManager.HintedHandOffManager()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.db.HintedHandOffManager.deleteHintsForEndpoint(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.HintedHandOffManager.listEndpointsPendingHints()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.HintedHandOffManager.pauseHintsDelivery(boolean)",2,0,n/a,7,0,1,3,2
"org.apache.cassandra.db.HintedHandOffManager.registerMBean()",4,0,n/a,12,1,0,4,2
"org.apache.cassandra.db.HintedHandOffManager.scheduleHintDelivery(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.HintedHandOffManager.truncateAllHints()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.HintedHandOffManagerMBean.deleteHintsForEndpoint(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.HintedHandOffManagerMBean.listEndpointsPendingHints()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.HintedHandOffManagerMBean.pauseHintsDelivery(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.HintedHandOffManagerMBean.scheduleHintDelivery(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.HintedHandOffManagerMBean.truncateAllHints()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.IMutation.getColumnFamilyIds()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.IMutation.getKeyspaceName()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.IMutation.getPartitionUpdates()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.IMutation.getTimeout()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.IMutation.key()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.IMutation.toString(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.Keyspace.Keyspace(KeyspaceMetadata)",3,1,n/a,7,0,1,4,1
"org.apache.cassandra.db.Keyspace.Keyspace(String,boolean)",9,1,n/a,14,1,2,9,2
"org.apache.cassandra.db.Keyspace.all()",2,8,n/a,4,0,0,1,1
"org.apache.cassandra.db.Keyspace.apply(Mutation,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.Keyspace.apply(Mutation,boolean,boolean)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.Keyspace.apply(Mutation,boolean,boolean,boolean)",52,3,n/a,101,4,4,47,18
"org.apache.cassandra.db.Keyspace.applyFromCommitLog(Mutation)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Keyspace.clear(String)",1,11,n/a,4,0,1,1,1
"org.apache.cassandra.db.Keyspace.clear(String,Schema)",4,1,n/a,14,2,2,7,3
"org.apache.cassandra.db.Keyspace.clearSnapshot(String,String)",2,1,n/a,11,0,2,2,1
"org.apache.cassandra.db.Keyspace.createReplicationStrategy(KeyspaceMetadata)",3,3,n/a,8,0,1,1,1
"org.apache.cassandra.db.Keyspace.dropCf(UUID)",9,3,n/a,14,0,1,9,2
"org.apache.cassandra.db.Keyspace.flush()",5,6,n/a,7,0,0,4,2
"org.apache.cassandra.db.Keyspace.getAllSSTables(SSTableSet)",5,4,n/a,10,0,1,4,2
"org.apache.cassandra.db.Keyspace.getColumnFamilyStore(String)",6,123,n/a,7,0,1,4,2
"org.apache.cassandra.db.Keyspace.getColumnFamilyStore(UUID)",2,123,n/a,7,0,1,4,2
"org.apache.cassandra.db.Keyspace.getColumnFamilyStores()",2,12,n/a,4,0,0,1,1
"org.apache.cassandra.db.Keyspace.getIndexColumnFamilyStores(ColumnFamilyStore)",4,2,n/a,10,1,1,5,2
"org.apache.cassandra.db.Keyspace.getMetadata()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.Keyspace.getName()",0,8,n/a,4,0,0,1,1
"org.apache.cassandra.db.Keyspace.getReplicationStrategy()",0,27,n/a,4,0,0,1,1
"org.apache.cassandra.db.Keyspace.getTimestampedSnapshotName(String)",3,3,n/a,13,1,1,4,3
"org.apache.cassandra.db.Keyspace.getValidColumnFamilies(boolean,boolean,String...)",22,1,n/a,47,3,3,25,10
"org.apache.cassandra.db.Keyspace.hasColumnFamilyStore(UUID)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Keyspace.indexPartition(DecoratedKey,ColumnFamilyStore,Set<Index>)",11,1,n/a,18,1,3,5,2
"org.apache.cassandra.db.Keyspace.initCf(UUID,String,boolean)",6,3,n/a,25,1,3,8,3
"org.apache.cassandra.db.Keyspace.mockKS(KeyspaceMetadata)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Keyspace.nonSystem()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Keyspace.open(String)",2,165,n/a,5,0,1,2,2
"org.apache.cassandra.db.Keyspace.open(String,Schema,boolean)",4,2,n/a,20,3,3,8,3
"org.apache.cassandra.db.Keyspace.openAndGetStore(CFMetaData)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.Keyspace.openWithoutSSTables(String)",1,7,n/a,5,0,1,1,1
"org.apache.cassandra.db.Keyspace.removeUnreadableSSTables(File)",4,1,n/a,15,2,1,4,4
"org.apache.cassandra.db.Keyspace.setInitialized()",0,9,n/a,4,0,0,1,1
"org.apache.cassandra.db.Keyspace.setMetadata(KeyspaceMetadata)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.Keyspace.snapshot(String,String)",4,0,n/a,23,2,2,8,6
"org.apache.cassandra.db.Keyspace.snapshotExists(String)",2,0,n/a,16,1,1,5,3
"org.apache.cassandra.db.Keyspace.system()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Keyspace.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.Keyspace.unloadCf(ColumnFamilyStore)",2,2,n/a,6,0,1,2,1
"org.apache.cassandra.db.KeyspaceNotDefinedException.KeyspaceNotDefinedException(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.CellGrouper(CFMetaData,SerializationHelper)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.CellGrouper(CFMetaData,SerializationHelper,boolean)",2,2,n/a,10,0,3,4,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.addAtom(LegacyAtom)",5,1,n/a,6,0,1,1,2
"org.apache.cassandra.db.LegacyLayout.CellGrouper.addCell(LegacyCell)",19,1,n/a,50,3,1,27,16
"org.apache.cassandra.db.LegacyLayout.CellGrouper.addRangeTombstone(LegacyRangeTombstone)",12,1,n/a,31,2,1,19,8
"org.apache.cassandra.db.LegacyLayout.CellGrouper.getRow()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.reset()",0,1,n/a,6,0,0,3,1
"org.apache.cassandra.db.LegacyLayout.CellGrouper.staticGrouper(CFMetaData,SerializationHelper)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyAtom.asCell()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.LegacyLayout.LegacyAtom.asRangeTombstone()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.LegacyLayout.LegacyAtom.clustering()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.LegacyLayout.LegacyAtom.isCell()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.LegacyLayout.LegacyAtom.isStatic()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.LegacyLayout.LegacyBound.LegacyBound(Bound,boolean,ColumnDefinition)",0,17,n/a,6,0,3,3,1
"org.apache.cassandra.db.LegacyLayout.LegacyBound.getAsClustering(CFMetaData)",6,3,n/a,10,0,1,9,3
"org.apache.cassandra.db.LegacyLayout.LegacyBound.toString()",13,0,n/a,10,0,0,8,5
"org.apache.cassandra.db.LegacyLayout.LegacyBoundComparator.LegacyBoundComparator(ClusteringComparator)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyBoundComparator.compare(LegacyBound,LegacyBound)",2,13,n/a,20,0,2,14,10
"org.apache.cassandra.db.LegacyLayout.LegacyCell.LegacyCell(Kind,LegacyCellName,ByteBuffer,long,int,int)",0,11,n/a,9,0,6,6,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.asCell()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.asRangeTombstone()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.clustering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.counter(CFMetaData,ByteBuffer,ByteBuffer,long)",4,0,n/a,7,0,4,2,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.counter(LegacyCellName,ByteBuffer)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.expiring(CFMetaData,ByteBuffer,ByteBuffer,ByteBuffer,long,int,int)",2,0,n/a,5,0,7,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isCell()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isCounter()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isCounterUpdate()",3,2,n/a,5,0,0,1,2
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isExpiring()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isLive(int)",2,0,n/a,6,0,1,3,3
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isStatic()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.isTombstone()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.regular(CFMetaData,ByteBuffer,ByteBuffer,ByteBuffer,long)",2,0,n/a,5,0,5,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.serializationFlags()",4,2,n/a,12,0,0,9,5
"org.apache.cassandra.db.LegacyLayout.LegacyCell.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCell.tombstone(CFMetaData,ByteBuffer,ByteBuffer,long,int)",2,0,n/a,5,0,5,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.LegacyCellName(Clustering,ColumnDefinition,ByteBuffer)",0,9,n/a,6,0,3,3,1
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.encode(CFMetaData)",1,4,n/a,4,0,1,1,2
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.superColumnName()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.superColumnSubName()",0,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.LegacyLayout.LegacyCellName.toString()",10,0,n/a,8,0,0,6,6
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.LegacyDeletionInfo(MutableDeletionInfo)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.add(CFMetaData,LegacyRangeTombstone)",23,1,n/a,43,2,2,15,9
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.add(CFMetaData,RangeTombstone)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.add(DeletionTime)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.deserialize(CFMetaData,DataInputPlus)",15,1,n/a,17,1,2,14,3
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.inRowRangeTombstones()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.live()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo.staticBound(CFMetaData,boolean)",3,4,n/a,12,0,2,6,3
"org.apache.cassandra.db.LegacyLayout.LegacyLayout()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.LegacyRangeTombstone(LegacyBound,LegacyBound,DeletionTime)",5,5,n/a,28,1,3,10,4
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.asCell()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.asRangeTombstone()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.clustering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.isCell()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.isCollectionTombstone()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.isRowDeletion(CFMetaData)",8,2,n/a,12,0,1,8,7
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.isStatic()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.withNewEnd(LegacyBound)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone.withNewStart(LegacyBound)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.LegacyRangeTombstoneList(LegacyBoundComparator,LegacyBound[],LegacyBound[],long[],int[],int)",0,1,n/a,10,0,6,7,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.LegacyRangeTombstoneList(LegacyBoundComparator,int)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.add(LegacyBound,LegacyBound,long,int)",6,4,n/a,26,1,4,8,4
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.addAll(LegacyRangeTombstoneList)",7,2,n/a,56,3,1,20,9
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.addInternal(int,LegacyBound,LegacyBound,long,int)",4,9,n/a,10,0,5,7,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.capacity()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.copyArrays(LegacyRangeTombstoneList,LegacyRangeTombstoneList)",5,1,n/a,9,0,2,6,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(LegacyBound[],int,int,int)",3,2,n/a,9,0,4,6,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(int)",2,1,n/a,8,0,1,2,2
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(int,int)",4,2,n/a,7,0,2,4,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(int[],int,int,int)",3,1,n/a,9,0,4,6,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.grow(long[],int,int,int)",3,1,n/a,9,0,4,6,3
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.growToFree(int)",2,1,n/a,8,0,1,2,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.insertFrom(int,LegacyBound,LegacyBound,long,int)",22,2,n/a,116,4,5,48,18
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.isEmpty()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.moveElements(int)",4,1,n/a,15,0,1,7,2
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.removeInternal(int)",4,1,n/a,11,0,1,8,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.serialize(DataOutputPlus,CFMetaData)",22,1,n/a,30,2,2,27,7
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.serializedSize(CFMetaData)",22,1,n/a,32,2,1,29,7
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.setInternal(int,LegacyBound,LegacyBound,long,int)",0,5,n/a,7,0,5,4,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.size()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList.updateDigest(MessageDigest)",16,1,n/a,17,1,1,18,6
"org.apache.cassandra.db.LegacyLayout.LegacyUnfilteredPartition.LegacyUnfilteredPartition(DeletionTime,LegacyRangeTombstoneList,List<LegacyCell>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.db.LegacyLayout.LegacyUnfilteredPartition.digest(CFMetaData,MessageDigest)",21,0,n/a,26,2,2,15,7
"org.apache.cassandra.db.LegacyLayout.asLegacyAtomIterator(Iterator<? extends LegacyAtom>)",0,2,n/a,5,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.convertToRows(CellGrouper,PeekingIterator<LegacyAtom>)",4,1,n/a,6,2,2,4,2
"org.apache.cassandra.db.LegacyLayout.decodeBound(CFMetaData,ByteBuffer,boolean)",30,4,n/a,37,1,3,21,13
"org.apache.cassandra.db.LegacyLayout.decodeCellName(CFMetaData,ByteBuffer)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.LegacyLayout.decodeCellName(CFMetaData,ByteBuffer,ByteBuffer)",4,4,n/a,12,1,3,6,2
"org.apache.cassandra.db.LegacyLayout.decodeCellName(CFMetaData,ByteBuffer,boolean)",30,4,n/a,37,1,3,21,15
"org.apache.cassandra.db.LegacyLayout.decodeClustering(CFMetaData,ByteBuffer)",11,2,n/a,12,0,2,7,5
"org.apache.cassandra.db.LegacyLayout.decodeForSuperColumn(CFMetaData,Clustering,ByteBuffer)",4,2,n/a,12,1,3,6,3
"org.apache.cassandra.db.LegacyLayout.deserializeCells(CFMetaData,DataInput,Flag,int)",8,1,n/a,25,3,4,10,6
"org.apache.cassandra.db.LegacyLayout.deserializeLegacyPartition(DataInputPlus,int,Flag,ByteBuffer)",8,0,n/a,16,0,4,10,2
"org.apache.cassandra.db.LegacyLayout.encodeBound(CFMetaData,Bound,boolean)",17,0,n/a,19,1,3,15,9
"org.apache.cassandra.db.LegacyLayout.encodeCellName(CFMetaData,ClusteringPrefix,ByteBuffer,ByteBuffer)",11,2,n/a,34,2,4,24,10
"org.apache.cassandra.db.LegacyLayout.encodeClustering(CFMetaData,ClusteringPrefix)",8,1,n/a,14,1,2,11,4
"org.apache.cassandra.db.LegacyLayout.equalValues(ClusteringPrefix,ClusteringPrefix,ClusteringComparator)",6,1,n/a,10,1,3,7,3
"org.apache.cassandra.db.LegacyLayout.extractStaticColumns(CFMetaData,DataInputPlus,Columns)",20,0,n/a,34,2,3,21,7
"org.apache.cassandra.db.LegacyLayout.fromRow(CFMetaData,Row)",50,2,n/a,18,4,2,31,9
"org.apache.cassandra.db.LegacyLayout.fromRowIterator(CFMetaData,Iterator<Row>,Row)",17,2,n/a,11,2,3,16,5
"org.apache.cassandra.db.LegacyLayout.fromRowIterator(RowIterator)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.fromUnfilteredRowIterator(UnfilteredRowIterator)",23,2,n/a,29,2,1,14,3
"org.apache.cassandra.db.LegacyLayout.getNextRow(CellGrouper,PeekingIterator<? extends LegacyAtom>)",7,2,n/a,12,1,2,6,4
"org.apache.cassandra.db.LegacyLayout.legacyAtomComparator(CFMetaData)",29,1,n/a,66,3,1,33,18
"org.apache.cassandra.db.LegacyLayout.legacyCellComparator(CFMetaData)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.LegacyLayout.legacyCellComparator(CFMetaData,boolean)",4,2,n/a,15,2,2,12,6
"org.apache.cassandra.db.LegacyLayout.legacyCellNameComparator(CFMetaData,boolean)",9,1,n/a,42,3,2,24,13
"org.apache.cassandra.db.LegacyLayout.makeLegacyCell(Clustering,Cell)",13,1,n/a,16,0,2,12,6
"org.apache.cassandra.db.LegacyLayout.makeLegacyComparator(CFMetaData)",24,1,n/a,28,2,1,19,13
"org.apache.cassandra.db.LegacyLayout.onWireCellstoUnfilteredRowIterator(CFMetaData,DecoratedKey,LegacyDeletionInfo,Iterator<LegacyCell>,boolean,SerializationHelper)",7,1,n/a,23,1,6,6,3
"org.apache.cassandra.db.LegacyLayout.readLegacyAtom(CFMetaData,DataInputPlus,boolean)",8,1,n/a,24,2,3,8,6
"org.apache.cassandra.db.LegacyLayout.readLegacyCell(CFMetaData,DataInput,Flag)",3,1,n/a,6,0,3,3,1
"org.apache.cassandra.db.LegacyLayout.readLegacyCellBody(CFMetaData,DataInput,ByteBuffer,int,Flag,boolean)",25,2,n/a,34,1,6,17,8
"org.apache.cassandra.db.LegacyLayout.readLegacyRangeTombstoneBody(CFMetaData,DataInputPlus,ByteBuffer)",5,1,n/a,7,0,3,4,1
"org.apache.cassandra.db.LegacyLayout.serializeAsLegacyPartition(UnfilteredRowIterator,DataOutputPlus,int)",32,0,n/a,41,2,3,27,6
"org.apache.cassandra.db.LegacyLayout.serializedSizeAsLegacyPartition(UnfilteredRowIterator,int)",23,0,n/a,39,2,2,25,6
"org.apache.cassandra.db.LegacyLayout.toRowIterator(CFMetaData,DecoratedKey,Iterator<LegacyCell>,int)",4,0,n/a,8,0,4,2,1
"org.apache.cassandra.db.LegacyLayout.toUnfilteredRowIterator(CFMetaData,DecoratedKey,LegacyDeletionInfo,Iterator<LegacyCell>)",2,0,n/a,9,0,4,2,1
"org.apache.cassandra.db.LegacyLayout.toUnfilteredRowIterator(CFMetaData,DecoratedKey,LegacyDeletionInfo,Iterator<LegacyCell>,boolean,SerializationHelper)",19,3,n/a,4,2,6,11,3
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.ExpiringLivenessInfo(long,int,int)",1,3,n/a,7,0,3,4,2
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.dataSize()",3,1,n/a,7,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.digest(MessageDigest)",3,1,n/a,7,0,1,3,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.isExpiring()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.isLive(int)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.localExpirationTime()",0,3,n/a,5,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.ttl()",0,4,n/a,5,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.validate()",2,0,n/a,8,0,0,4,3
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo.withUpdatedTimestamp(long)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.LivenessInfo.LivenessInfo(long)",0,5,n/a,4,0,1,1,1
"org.apache.cassandra.db.LivenessInfo.create(CFMetaData,long,int)",2,11,n/a,7,0,3,4,2
"org.apache.cassandra.db.LivenessInfo.create(CFMetaData,long,int,int)",2,0,n/a,6,0,4,1,2
"org.apache.cassandra.db.LivenessInfo.create(long,int,int)",2,0,n/a,6,0,3,1,2
"org.apache.cassandra.db.LivenessInfo.dataSize()",2,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.digest(MessageDigest)",2,1,n/a,9,0,1,1,1
"org.apache.cassandra.db.LivenessInfo.equals(Object)",6,0,n/a,10,0,1,4,4
"org.apache.cassandra.db.LivenessInfo.expiring(long,int,int)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.LivenessInfo.hashCode()",4,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.isEmpty()",0,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.isExpiring()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.isLive(int)",1,0,n/a,13,0,1,1,1
"org.apache.cassandra.db.LivenessInfo.localExpirationTime()",0,3,n/a,8,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.supersedes(LivenessInfo)",0,0,n/a,12,0,1,1,1
"org.apache.cassandra.db.LivenessInfo.timestamp()",0,6,n/a,9,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.ttl()",0,4,n/a,11,0,0,1,1
"org.apache.cassandra.db.LivenessInfo.validate()",0,0,n/a,8,0,0,0,1
"org.apache.cassandra.db.LivenessInfo.withUpdatedTimestamp(long)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.db.Memtable.ColumnsCollector.ColumnsCollector(PartitionColumns)",4,2,n/a,7,0,1,4,3
"org.apache.cassandra.db.Memtable.ColumnsCollector.get()",8,1,n/a,8,0,0,5,3
"org.apache.cassandra.db.Memtable.ColumnsCollector.update(ColumnDefinition)",4,2,n/a,13,1,1,5,3
"org.apache.cassandra.db.Memtable.ColumnsCollector.update(PartitionColumns)",2,0,n/a,7,0,1,4,3
"org.apache.cassandra.db.Memtable.FlushRunnable.FlushRunnable(ReplayPosition)",7,1,n/a,16,1,1,7,3
"org.apache.cassandra.db.Memtable.FlushRunnable.createFlushWriter(String,PartitionColumns,EncodingStats)",9,1,n/a,27,1,3,8,3
"org.apache.cassandra.db.Memtable.FlushRunnable.getDirectories()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.FlushRunnable.getExpectedWriteSize()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.FlushRunnable.runMayThrow()",6,1,n/a,9,0,0,6,1
"org.apache.cassandra.db.Memtable.FlushRunnable.writeSortedContents(ReplayPosition,File)",29,1,n/a,50,4,2,22,10
"org.apache.cassandra.db.Memtable.LastReplayPosition.LastReplayPosition(ReplayPosition)",1,0,n/a,3,0,1,1,1
"org.apache.cassandra.db.Memtable.Memtable(CFMetaData)",2,0,n/a,9,0,1,4,1
"org.apache.cassandra.db.Memtable.Memtable(ColumnFamilyStore)",4,0,n/a,8,0,1,5,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.MemtableUnfilteredPartitionIterator(ColumnFamilyStore,Iterator<Entry<PartitionPosition, AtomicBTreePartition>>,boolean,int,ColumnFilter,DataRange)",0,1,n/a,9,0,6,6,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.getMinLocalDeletionTime()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.hasNext()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.isForThrift()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator.next()",6,0,n/a,9,0,0,5,1
"org.apache.cassandra.db.Memtable.StatsCollector.get()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.StatsCollector.update(EncodingStats)",3,1,n/a,10,1,1,5,3
"org.apache.cassandra.db.Memtable.accepts(Group,ReplayPosition)",5,1,n/a,29,1,2,15,9
"org.apache.cassandra.db.Memtable.compareTo(Memtable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Memtable.creationTime()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.estimateRowOverhead(int)",17,1,n/a,20,1,1,16,3
"org.apache.cassandra.db.Memtable.findMinLocalDeletionTime(Iterator<Entry<PartitionPosition, AtomicBTreePartition>>)",5,1,n/a,10,1,1,5,2
"org.apache.cassandra.db.Memtable.flushRunnable()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.getAllocator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.getLiveDataSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.getOperations()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.getPartition(DecoratedKey)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Memtable.isClean()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.isCleanAfter(ReplayPosition)",2,0,n/a,4,0,1,1,3
"org.apache.cassandra.db.Memtable.isExpired()",2,0,n/a,8,0,0,2,2
"org.apache.cassandra.db.Memtable.isLive()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.makePartitionIterator(ColumnFilter,DataRange,boolean)",14,0,n/a,22,0,3,15,7
"org.apache.cassandra.db.Memtable.partitionCount()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.put(PartitionUpdate,UpdateTransaction,Group)",20,0,n/a,37,2,3,18,3
"org.apache.cassandra.db.Memtable.setDiscarded()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Memtable.setDiscarding(Barrier,AtomicReference<ReplayPosition>)",1,2,n/a,8,0,2,4,1
"org.apache.cassandra.db.Memtable.toString()",8,2,n/a,6,0,0,1,1
"org.apache.cassandra.db.MigrationRequestVerbHandler.doVerb(MessageIn,int)",5,0,n/a,8,0,2,3,1
"org.apache.cassandra.db.MultiCBuilder.MultiCBuilder(ClusteringComparator)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.MultiCBuilder.addAllElementsToAll(List<List<ByteBuffer>>)",17,1,n/a,42,3,1,24,8
"org.apache.cassandra.db.MultiCBuilder.addEachElementToAll(List<ByteBuffer>)",13,1,n/a,40,3,1,22,7
"org.apache.cassandra.db.MultiCBuilder.addElementToAll(ByteBuffer)",7,4,n/a,26,1,1,13,5
"org.apache.cassandra.db.MultiCBuilder.build()",13,0,n/a,21,1,0,13,4
"org.apache.cassandra.db.MultiCBuilder.buildBound(boolean,boolean)",11,0,n/a,22,1,2,13,4
"org.apache.cassandra.db.MultiCBuilder.checkUpdateable()",2,3,n/a,5,0,0,2,3
"org.apache.cassandra.db.MultiCBuilder.containsNull()",0,4,n/a,9,0,0,1,1
"org.apache.cassandra.db.MultiCBuilder.containsUnset()",0,2,n/a,9,0,0,1,1
"org.apache.cassandra.db.MultiCBuilder.create(ClusteringComparator)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.MultiCBuilder.hasMissingElements()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.MultiCBuilder.hasRemaining()",1,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.MultiCBuilder.isEmpty()",1,3,n/a,9,0,0,1,1
"org.apache.cassandra.db.MultiCBuilder.remainingCount()",1,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.MutableDeletionInfo.Builder.Builder(DeletionTime,ClusteringComparator,boolean)",1,1,n/a,6,0,3,3,1
"org.apache.cassandra.db.MutableDeletionInfo.Builder.add(RangeTombstoneMarker)",11,0,n/a,17,1,1,9,4
"org.apache.cassandra.db.MutableDeletionInfo.Builder.build()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.MutableDeletionInfo.MutableDeletionInfo(DeletionTime)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.MutableDeletionInfo.MutableDeletionInfo(DeletionTime,RangeTombstoneList)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.db.MutableDeletionInfo.MutableDeletionInfo(long,int)",2,1,n/a,12,0,2,1,2
"org.apache.cassandra.db.MutableDeletionInfo.add(DeletionInfo)",4,0,n/a,20,0,1,8,4
"org.apache.cassandra.db.MutableDeletionInfo.add(DeletionTime)",1,0,n/a,10,0,1,2,2
"org.apache.cassandra.db.MutableDeletionInfo.add(RangeTombstone,ClusteringComparator)",2,1,n/a,6,0,2,3,2
"org.apache.cassandra.db.MutableDeletionInfo.builder(DeletionTime,ClusteringComparator,boolean)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.MutableDeletionInfo.collectStats(Collector)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.MutableDeletionInfo.copy(AbstractAllocator)",2,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.MutableDeletionInfo.dataSize()",3,0,n/a,5,0,0,2,2
"org.apache.cassandra.db.MutableDeletionInfo.equals(Object)",2,0,n/a,8,0,1,4,3
"org.apache.cassandra.db.MutableDeletionInfo.getPartitionDeletion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.MutableDeletionInfo.hasRanges()",1,2,n/a,4,0,0,1,2
"org.apache.cassandra.db.MutableDeletionInfo.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.MutableDeletionInfo.isLive()",2,0,n/a,7,0,0,1,3
"org.apache.cassandra.db.MutableDeletionInfo.live()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.MutableDeletionInfo.maxTimestamp()",4,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.MutableDeletionInfo.mayModify(DeletionInfo)",3,0,n/a,7,0,1,1,2
"org.apache.cassandra.db.MutableDeletionInfo.mutableCopy()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.MutableDeletionInfo.rangeCount()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.MutableDeletionInfo.rangeCovering(Clustering)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.MutableDeletionInfo.rangeIterator(Slice,boolean)",2,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.MutableDeletionInfo.rangeIterator(boolean)",2,1,n/a,5,0,1,1,2
"org.apache.cassandra.db.MutableDeletionInfo.rangesAsString()",13,1,n/a,15,1,0,10,2
"org.apache.cassandra.db.MutableDeletionInfo.toString()",4,0,n/a,8,0,0,3,3
"org.apache.cassandra.db.MutableDeletionInfo.unsharedHeapSize()",2,0,n/a,5,0,0,1,2
"org.apache.cassandra.db.MutableDeletionInfo.updateAllTimestamp(long)",4,0,n/a,9,0,1,5,3
"org.apache.cassandra.db.Mutation.Mutation(PartitionUpdate)",5,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.Mutation.Mutation(String,DecoratedKey)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.db.Mutation.Mutation(String,DecoratedKey,Map<UUID, PartitionUpdate>)",0,5,n/a,6,0,3,3,1
"org.apache.cassandra.db.Mutation.MutationSerializer.deserialize(DataInputPlus,int)",1,23,n/a,4,0,2,1,1
"org.apache.cassandra.db.Mutation.MutationSerializer.deserialize(DataInputPlus,int,Flag)",15,3,n/a,29,1,3,21,5
"org.apache.cassandra.db.Mutation.MutationSerializer.serialize(Mutation,DataOutputPlus,int)",11,23,n/a,19,1,3,10,4
"org.apache.cassandra.db.Mutation.MutationSerializer.serializedSize(Mutation,int)",13,22,n/a,19,1,2,11,4
"org.apache.cassandra.db.Mutation.add(PartitionUpdate)",7,0,n/a,10,0,1,6,2
"org.apache.cassandra.db.Mutation.apply()",3,1,n/a,9,0,0,2,1
"org.apache.cassandra.db.Mutation.apply(boolean)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Mutation.applyUnsafe()",2,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.copy()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.createMessage()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.createMessage(Verb)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.Mutation.get(CFMetaData)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Mutation.getColumnFamilyIds()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.getKeyspaceName()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.getPartitionUpdate(UUID)",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.db.Mutation.getPartitionUpdates()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.getTimeout()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.isEmpty()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.key()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.merge(List<Mutation>)",23,0,n/a,46,2,1,26,12
"org.apache.cassandra.db.Mutation.smallestGCGS()",3,0,n/a,7,0,0,4,2
"org.apache.cassandra.db.Mutation.toString()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Mutation.toString(boolean)",24,1,n/a,22,2,1,12,4
"org.apache.cassandra.db.Mutation.without(Set<UUID>)",4,0,n/a,8,0,1,5,2
"org.apache.cassandra.db.Mutation.without(UUID)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.MutationVerbHandler.doVerb(MessageIn<Mutation>,int)",12,0,n/a,30,1,2,15,6
"org.apache.cassandra.db.MutationVerbHandler.forwardToLocalNodes(Mutation,Verb,byte[],InetAddress)",11,1,n/a,21,2,4,10,2
"org.apache.cassandra.db.NativeDecoratedKey.NativeDecoratedKey(Token,NativeAllocator,Group,ByteBuffer)",5,1,n/a,9,0,4,6,1
"org.apache.cassandra.db.NativeDecoratedKey.getKey()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.PartitionColumns.Builder.add(ColumnDefinition)",8,1,n/a,17,1,1,9,4
"org.apache.cassandra.db.PartitionColumns.Builder.addAll(Iterable<ColumnDefinition>)",1,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.PartitionColumns.Builder.addAll(PartitionColumns)",8,0,n/a,12,0,1,9,7
"org.apache.cassandra.db.PartitionColumns.Builder.build()",5,0,n/a,5,0,0,1,3
"org.apache.cassandra.db.PartitionColumns.PartitionColumns(Columns,Columns)",0,6,n/a,6,0,2,3,2
"org.apache.cassandra.db.PartitionColumns.builder()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.PartitionColumns.columns(boolean)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.PartitionColumns.contains(ColumnDefinition)",3,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.PartitionColumns.digest(MessageDigest)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.PartitionColumns.equals(Object)",2,0,n/a,9,0,1,4,3
"org.apache.cassandra.db.PartitionColumns.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.PartitionColumns.includes(PartitionColumns)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.PartitionColumns.isEmpty()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.PartitionColumns.iterator()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.PartitionColumns.mergeTo(PartitionColumns)",3,0,n/a,12,0,1,9,6
"org.apache.cassandra.db.PartitionColumns.of(ColumnDefinition)",5,0,n/a,5,0,1,1,3
"org.apache.cassandra.db.PartitionColumns.selectOrderIterator()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.PartitionColumns.size()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.PartitionColumns.toString()",7,0,n/a,7,0,0,3,1
"org.apache.cassandra.db.PartitionColumns.without(ColumnDefinition)",5,0,n/a,5,0,1,1,3
"org.apache.cassandra.db.PartitionColumns.withoutStatics()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.PartitionPosition.ForKey.get(ByteBuffer,IPartitioner)",4,2,n/a,4,0,2,1,3
"org.apache.cassandra.db.PartitionPosition.Kind.fromOrdinal(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.PartitionPosition.RowPositionSerializer.deserialize(DataInput,IPartitioner,int)",7,0,n/a,14,1,3,6,3
"org.apache.cassandra.db.PartitionPosition.RowPositionSerializer.serialize(PartitionPosition,DataOutputPlus,int)",7,0,n/a,20,0,3,5,2
"org.apache.cassandra.db.PartitionPosition.RowPositionSerializer.serializedSize(PartitionPosition,int)",6,0,n/a,15,1,2,7,2
"org.apache.cassandra.db.PartitionPosition.isMinimum()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.PartitionPosition.kind()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.PartitionRangeReadCommand.Deserializer.deserialize(DataInputPlus,int,boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,Optional<IndexMetadata>)",2,0,n/a,6,0,11,2,1
"org.apache.cassandra.db.PartitionRangeReadCommand.PartitionRangeReadCommand(CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DataRange,Optional<IndexMetadata>)",1,2,n/a,10,0,7,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.PartitionRangeReadCommand(boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DataRange,Optional<IndexMetadata>)",1,4,n/a,15,0,10,3,1
"org.apache.cassandra.db.PartitionRangeReadCommand.allDataRead(CFMetaData,int)",4,0,n/a,18,0,2,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.appendCQLWhereClause(StringBuilder)",14,0,n/a,15,1,1,9,6
"org.apache.cassandra.db.PartitionRangeReadCommand.checkCacheFilter(UnfilteredPartitionIterator,ColumnFamilyStore)",12,1,n/a,17,3,2,9,3
"org.apache.cassandra.db.PartitionRangeReadCommand.clusteringIndexFilter(DecoratedKey)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.copy()",10,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.createMessage(int)",5,0,n/a,8,0,1,3,3
"org.apache.cassandra.db.PartitionRangeReadCommand.dataRange()",0,14,n/a,4,0,0,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.execute(ConsistencyLevel,ClientState)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.forSubRange(AbstractBounds<PartitionPosition>)",11,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.getPager(PagingState,int)",3,0,n/a,7,0,2,3,2
"org.apache.cassandra.db.PartitionRangeReadCommand.getTimeout()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.isNamesQuery()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.oldestUnrepairedTombstone()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.postReconciliationProcessing(PartitionIterator)",7,0,n/a,12,0,1,3,2
"org.apache.cassandra.db.PartitionRangeReadCommand.queryStorage(ColumnFamilyStore,ReadOrderGroup)",42,0,n/a,38,2,2,18,8
"org.apache.cassandra.db.PartitionRangeReadCommand.recordLatency(TableMetrics,long)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.selectionSerializedSize(int)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.selectsClustering(DecoratedKey,Clustering)",8,0,n/a,8,0,2,5,3
"org.apache.cassandra.db.PartitionRangeReadCommand.selectsKey(DecoratedKey)",6,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.PartitionRangeReadCommand.serializeSelection(DataOutputPlus,int)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.toString()",9,0,n/a,11,0,0,1,1
"org.apache.cassandra.db.PartitionRangeReadCommand.withUpdatedLimit(DataLimits)",6,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.PreHashedDecoratedKey.PreHashedDecoratedKey(Token,ByteBuffer,long,long)",1,1,n/a,6,0,4,3,1
"org.apache.cassandra.db.PreHashedDecoratedKey.filterHash(long[])",0,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.RangeSliceVerbHandler.serializer()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.Bound(Kind,ByteBuffer[])",2,12,n/a,5,0,2,2,2
"org.apache.cassandra.db.RangeTombstone.Bound.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",6,0,n/a,9,0,3,6,3
"org.apache.cassandra.db.RangeTombstone.Bound.Serializer.serialize(Bound,DataOutputPlus,int,List<AbstractType<?>>)",6,0,n/a,6,0,4,3,1
"org.apache.cassandra.db.RangeTombstone.Bound.Serializer.serializedSize(Bound,int,List<AbstractType<?>>)",3,0,n/a,6,0,3,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.copy(AbstractAllocator)",6,0,n/a,7,0,1,6,2
"org.apache.cassandra.db.RangeTombstone.Bound.exclusiveClose(boolean,ByteBuffer[])",1,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.exclusiveCloseInclusiveOpen(boolean,ByteBuffer[])",1,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.exclusiveOpen(boolean,ByteBuffer[])",1,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.fromSliceBound(Bound)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.inclusiveClose(boolean,ByteBuffer[])",1,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.inclusiveCloseExclusiveOpen(boolean,ByteBuffer[])",1,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.inclusiveOpen(boolean,ByteBuffer[])",1,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.RangeTombstone.Bound.isBoundary()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.isClose(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.isOpen(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.RangeTombstone.Bound.withNewKind(Kind)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.RangeTombstone.RangeTombstone(Slice,DeletionTime)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.RangeTombstone.deletedSlice()",0,3,n/a,9,0,0,1,1
"org.apache.cassandra.db.RangeTombstone.deletionTime()",0,4,n/a,9,0,0,1,1
"org.apache.cassandra.db.RangeTombstone.equals(Object)",6,0,n/a,9,0,1,4,3
"org.apache.cassandra.db.RangeTombstone.hashCode()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.RangeTombstone.toString(ClusteringComparator)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.RangeTombstoneList.RangeTombstoneList(ClusteringComparator,Bound[],Bound[],long[],int[],long,int)",0,3,n/a,11,0,7,8,3
"org.apache.cassandra.db.RangeTombstoneList.RangeTombstoneList(ClusteringComparator,int)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.RangeTombstoneList.add(Bound,Bound,long,int)",8,2,n/a,27,1,4,9,4
"org.apache.cassandra.db.RangeTombstoneList.add(RangeTombstone)",9,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.RangeTombstoneList.addAll(RangeTombstoneList)",7,0,n/a,56,3,1,20,9
"org.apache.cassandra.db.RangeTombstoneList.addInternal(int,Bound,Bound,long,int)",4,9,n/a,13,0,5,7,3
"org.apache.cassandra.db.RangeTombstoneList.capacity()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.RangeTombstoneList.clone(Bound,AbstractAllocator)",5,2,n/a,7,0,2,6,2
"org.apache.cassandra.db.RangeTombstoneList.collectStats(Collector)",2,0,n/a,8,1,1,5,2
"org.apache.cassandra.db.RangeTombstoneList.comparator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.RangeTombstoneList.copy()",5,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.RangeTombstoneList.copy(AbstractAllocator)",5,0,n/a,15,1,1,7,2
"org.apache.cassandra.db.RangeTombstoneList.copyArrays(RangeTombstoneList,RangeTombstoneList)",5,1,n/a,10,0,2,7,1
"org.apache.cassandra.db.RangeTombstoneList.dataSize()",5,0,n/a,11,1,0,8,2
"org.apache.cassandra.db.RangeTombstoneList.equals(Object)",2,0,n/a,21,1,1,17,8
"org.apache.cassandra.db.RangeTombstoneList.forwardIterator(Slice)",27,1,n/a,13,2,1,20,16
"org.apache.cassandra.db.RangeTombstoneList.grow(Bound[],int,int,int)",3,2,n/a,9,0,4,6,3
"org.apache.cassandra.db.RangeTombstoneList.grow(int)",2,1,n/a,8,0,1,2,2
"org.apache.cassandra.db.RangeTombstoneList.grow(int,int)",4,2,n/a,7,0,2,4,1
"org.apache.cassandra.db.RangeTombstoneList.grow(int[],int,int,int)",3,1,n/a,9,0,4,6,3
"org.apache.cassandra.db.RangeTombstoneList.grow(long[],int,int,int)",3,1,n/a,9,0,4,6,3
"org.apache.cassandra.db.RangeTombstoneList.growToFree(int)",2,1,n/a,8,0,1,2,1
"org.apache.cassandra.db.RangeTombstoneList.hashCode()",2,0,n/a,12,1,0,8,2
"org.apache.cassandra.db.RangeTombstoneList.insertFrom(int,Bound,Bound,long,int)",31,2,n/a,111,4,5,44,17
"org.apache.cassandra.db.RangeTombstoneList.isDeleted(Clustering,Cell)",3,0,n/a,10,0,2,2,3
"org.apache.cassandra.db.RangeTombstoneList.isEmpty()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.RangeTombstoneList.iterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.RangeTombstoneList.iterator(Slice,boolean)",2,0,n/a,4,0,2,1,2
"org.apache.cassandra.db.RangeTombstoneList.iterator(boolean)",6,1,n/a,6,2,1,7,4
"org.apache.cassandra.db.RangeTombstoneList.maxMarkedAt()",1,0,n/a,7,0,0,6,2
"org.apache.cassandra.db.RangeTombstoneList.moveElements(int)",4,1,n/a,15,0,1,7,2
"org.apache.cassandra.db.RangeTombstoneList.rangeTombstone(int)",3,5,n/a,4,0,1,1,1
"org.apache.cassandra.db.RangeTombstoneList.rangeTombstoneWithNewBounds(int,Bound,Bound)",3,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.RangeTombstoneList.rangeTombstoneWithNewEnd(int,Bound)",3,2,n/a,4,0,2,1,1
"org.apache.cassandra.db.RangeTombstoneList.rangeTombstoneWithNewStart(int,Bound)",3,2,n/a,4,0,2,1,1
"org.apache.cassandra.db.RangeTombstoneList.removeInternal(int)",4,0,n/a,11,0,1,8,1
"org.apache.cassandra.db.RangeTombstoneList.reverseIterator(Slice)",27,1,n/a,13,2,1,20,16
"org.apache.cassandra.db.RangeTombstoneList.search(Clustering)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.db.RangeTombstoneList.searchDeletionTime(Clustering)",2,0,n/a,9,0,1,2,2
"org.apache.cassandra.db.RangeTombstoneList.searchInternal(ClusteringPrefix,int,int)",3,7,n/a,22,1,3,9,5
"org.apache.cassandra.db.RangeTombstoneList.setInternal(int,Bound,Bound,long,int)",4,5,n/a,10,0,5,7,2
"org.apache.cassandra.db.RangeTombstoneList.size()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.RangeTombstoneList.unsharedHeapSize()",4,0,n/a,10,0,0,1,1
"org.apache.cassandra.db.RangeTombstoneList.updateAllTimestamp(long)",0,0,n/a,5,0,1,4,2
"org.apache.cassandra.db.ReadCommand.Kind.Kind(SelectionDeserializer)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.ReadCommand.LegacyPagedRangeCommandSerializer.deserialize(DataInputPlus,int)",29,21,n/a,45,1,2,31,8
"org.apache.cassandra.db.ReadCommand.LegacyPagedRangeCommandSerializer.serialize(ReadCommand,DataOutputPlus,int)",68,22,n/a,60,0,3,40,14
"org.apache.cassandra.db.ReadCommand.LegacyPagedRangeCommandSerializer.serializedSize(ReadCommand,int)",46,19,n/a,37,0,2,26,3
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.deserialize(DataInputPlus,int)",26,21,n/a,47,1,2,36,8
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.deserializeRowFilter(DataInputPlus,CFMetaData)",7,2,n/a,16,1,2,13,3
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.getColumnSelectionForSlice(boolean,int,CFMetaData)",7,3,n/a,11,0,3,4,3
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.maybeConvertNamesToSlice(PartitionRangeReadCommand)",20,2,n/a,14,0,1,9,3
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.serialize(ReadCommand,DataOutputPlus,int)",57,22,n/a,55,1,3,37,13
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.serializeRowFilter(DataOutputPlus,RowFilter)",10,2,n/a,11,1,2,6,2
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.serializedRowFilterSize(RowFilter)",6,1,n/a,11,1,1,6,2
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer.serializedSize(ReadCommand,int)",51,19,n/a,46,2,2,31,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.convertNamesFilterToSliceFilter(ClusteringIndexNamesFilter,CFMetaData)",12,4,n/a,24,1,2,11,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserialize(DataInputPlus,int)",12,21,n/a,22,1,2,17,4
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserializeNamesCommand(DataInputPlus,boolean,CFMetaData,DecoratedKey,int,int)",2,1,n/a,8,0,6,2,1
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserializeNamesSelectionAndFilter(DataInputPlus,CFMetaData)",18,2,n/a,37,2,2,19,6
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserializeSliceCommand(DataInputPlus,boolean,CFMetaData,DecoratedKey,int,int)",8,1,n/a,20,0,6,14,6
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.deserializeSlicePartitionFilter(DataInputPlus,CFMetaData)",14,3,n/a,52,2,2,31,8
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.maybeConvertNamesToSlice(SinglePartitionReadCommand)",17,2,n/a,13,0,1,8,3
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serialize(ReadCommand,DataOutputPlus,int)",19,22,n/a,18,0,3,14,2
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeNamesCommand(SinglePartitionReadCommand,DataOutputPlus)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeNamesFilter(ReadCommand,ClusteringIndexNamesFilter,DataOutputPlus)",20,2,n/a,27,2,3,14,8
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeSlice(DataOutputPlus,Slice,boolean,CFMetaData)",8,2,n/a,7,0,4,4,3
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeSliceCommand(SinglePartitionReadCommand,DataOutputPlus)",29,1,n/a,24,0,2,19,10
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeSlices(DataOutputPlus,Slices,boolean,boolean,CFMetaData)",8,3,n/a,20,1,5,12,7
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializeStaticSlice(DataOutputPlus,boolean,CFMetaData)",11,2,n/a,24,1,3,13,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedNamesCommandSize(SinglePartitionReadCommand)",5,1,n/a,6,0,1,3,1
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedNamesFilterSize(ClusteringIndexNamesFilter,CFMetaData,PartitionColumns)",11,2,n/a,22,2,3,11,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedSize(ReadCommand,int)",15,19,n/a,18,0,2,14,2
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedSliceCommandSize(SinglePartitionReadCommand)",15,1,n/a,11,0,1,8,2
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedSlicesSize(Slices,boolean,CFMetaData)",9,3,n/a,14,1,3,9,3
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.serializedStaticSliceSize(CFMetaData)",7,1,n/a,14,1,1,10,2
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.shouldConvertNamesToSlice(CFMetaData,PartitionColumns)",3,2,n/a,18,1,2,6,5
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer.updateLimitForQuery(int,Slices)",6,3,n/a,23,1,2,10,7
"org.apache.cassandra.db.ReadCommand.LegacyType.LegacyType(byte)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.ReadCommand.LegacyType.fromPartitionFilterKind(Kind)",0,1,n/a,6,0,1,1,2
"org.apache.cassandra.db.ReadCommand.LegacyType.fromSerializedValue(byte)",0,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.ReadCommand.RangeSliceSerializer.deserialize(DataInputPlus,int)",2,21,n/a,6,0,2,1,2
"org.apache.cassandra.db.ReadCommand.RangeSliceSerializer.serialize(ReadCommand,DataOutputPlus,int)",2,22,n/a,7,0,3,3,2
"org.apache.cassandra.db.ReadCommand.RangeSliceSerializer.serializedSize(ReadCommand,int)",2,19,n/a,6,0,2,1,2
"org.apache.cassandra.db.ReadCommand.ReadCommand(Kind,boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits)",0,0,n/a,20,0,9,9,1
"org.apache.cassandra.db.ReadCommand.SelectionDeserializer.deserialize(DataInputPlus,int,boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,Optional<IndexMetadata>)",n/a,1,0,n/a,n/a,11,n/a,n/a
"org.apache.cassandra.db.ReadCommand.Serializer.deserialize(DataInputPlus,int)",16,21,n/a,20,0,2,15,4
"org.apache.cassandra.db.ReadCommand.Serializer.deserializeIndexMetadata(DataInputPlus,int,CFMetaData)",6,1,n/a,17,1,3,5,2
"org.apache.cassandra.db.ReadCommand.Serializer.digestFlag(boolean)",0,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.ReadCommand.Serializer.hasIndex(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.ReadCommand.Serializer.indexFlag(boolean)",0,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.ReadCommand.Serializer.isDigest(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.ReadCommand.Serializer.isForThrift(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.ReadCommand.Serializer.serialize(ReadCommand,DataOutputPlus,int)",26,22,n/a,17,0,3,13,3
"org.apache.cassandra.db.ReadCommand.Serializer.serializedSize(ReadCommand,int)",15,19,n/a,14,0,2,2,2
"org.apache.cassandra.db.ReadCommand.Serializer.thriftFlag(boolean)",0,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.ReadCommand.appendCQLWhereClause(StringBuilder)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ReadCommand.clusteringIndexFilter(DecoratedKey)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ReadCommand.columnFilter()",0,4,n/a,9,0,0,1,1
"org.apache.cassandra.db.ReadCommand.copy()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ReadCommand.createMessage(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ReadCommand.createResponse(UnfilteredPartitionIterator,ColumnFilter)",3,0,n/a,6,0,2,1,2
"org.apache.cassandra.db.ReadCommand.digestVersion()",0,2,n/a,10,0,0,1,1
"org.apache.cassandra.db.ReadCommand.executeInternal(ReadOrderGroup)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.ReadCommand.executeLocally(ReadOrderGroup)",20,1,n/a,40,1,1,13,6
"org.apache.cassandra.db.ReadCommand.getIndex(ColumnFamilyStore)",6,1,n/a,18,0,1,10,4
"org.apache.cassandra.db.ReadCommand.getTimeout()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ReadCommand.indexSerializedSize(int)",3,1,n/a,7,0,1,3,2
"org.apache.cassandra.db.ReadCommand.isDigestQuery()",0,8,n/a,9,0,0,1,1
"org.apache.cassandra.db.ReadCommand.isForThrift()",0,2,n/a,9,0,0,1,1
"org.apache.cassandra.db.ReadCommand.limits()",0,7,n/a,9,0,0,1,1
"org.apache.cassandra.db.ReadCommand.metadata()",0,7,n/a,9,0,0,1,1
"org.apache.cassandra.db.ReadCommand.nowInSec()",0,9,n/a,13,0,0,1,1
"org.apache.cassandra.db.ReadCommand.oldestUnrepairedTombstone()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ReadCommand.queryStorage(ColumnFamilyStore,ReadOrderGroup)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ReadCommand.recordLatency(TableMetrics,long)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ReadCommand.rowFilter()",0,4,n/a,16,0,0,1,1
"org.apache.cassandra.db.ReadCommand.selectionSerializedSize(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ReadCommand.serializeSelection(DataOutputPlus,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ReadCommand.setDigestVersion(int)",0,1,n/a,15,0,1,2,1
"org.apache.cassandra.db.ReadCommand.setIsDigestQuery(boolean)",0,2,n/a,11,0,1,2,1
"org.apache.cassandra.db.ReadCommand.startOrderGroup()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadCommand.toCQLString()",15,2,n/a,19,0,0,7,2
"org.apache.cassandra.db.ReadCommand.withMetricsRecording(UnfilteredPartitionIterator,TableMetrics,long)",31,1,n/a,15,3,3,27,9
"org.apache.cassandra.db.ReadCommand.withoutPurgeableTombstones(UnfilteredPartitionIterator,ColumnFamilyStore)",9,1,n/a,4,2,2,5,1
"org.apache.cassandra.db.ReadCommandVerbHandler.doVerb(MessageIn<ReadCommand>,int)",11,0,n/a,16,1,2,9,2
"org.apache.cassandra.db.ReadCommandVerbHandler.serializer()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadOrderGroup.ReadOrderGroup(Group,Group,Group)",0,3,n/a,6,0,3,3,1
"org.apache.cassandra.db.ReadOrderGroup.baseReadOpOrderGroup()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadOrderGroup.close()",3,0,n/a,22,3,0,7,3
"org.apache.cassandra.db.ReadOrderGroup.emptyGroup()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadOrderGroup.forCommand(ReadCommand)",11,0,n/a,40,3,1,17,5
"org.apache.cassandra.db.ReadOrderGroup.indexReadOpOrderGroup()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadOrderGroup.maybeGetIndexCfs(ColumnFamilyStore,ReadCommand)",3,1,n/a,5,0,2,2,2
"org.apache.cassandra.db.ReadOrderGroup.writeOpOrderGroup()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadQuery.execute(ConsistencyLevel,ClientState)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ReadQuery.executeInternal(ReadOrderGroup)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ReadQuery.getPager(PagingState,int)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ReadQuery.limits()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ReadQuery.selectsClustering(DecoratedKey,Clustering)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ReadQuery.selectsKey(DecoratedKey)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ReadQuery.startOrderGroup()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ReadRepairVerbHandler.doVerb(MessageIn<Mutation>,int)",4,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.ReadResponse.DataResponse.DataResponse(CFMetaData,ByteBuffer,Flag)",1,2,n/a,6,0,3,3,1
"org.apache.cassandra.db.ReadResponse.DataResponse.digest(CFMetaData,ReadCommand)",3,0,n/a,7,1,2,2,1
"org.apache.cassandra.db.ReadResponse.DataResponse.isDigestResponse()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadResponse.DataResponse.makeIterator(CFMetaData,ReadCommand)",5,6,n/a,16,1,2,3,2
"org.apache.cassandra.db.ReadResponse.DataResponse.selection(ReadCommand)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.ReadResponse.DigestResponse.DigestResponse(ByteBuffer)",2,3,n/a,6,0,1,3,1
"org.apache.cassandra.db.ReadResponse.DigestResponse.digest(CFMetaData,ReadCommand)",0,0,n/a,8,0,2,1,1
"org.apache.cassandra.db.ReadResponse.DigestResponse.isDigestResponse()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadResponse.DigestResponse.makeIterator(CFMetaData,ReadCommand)",1,5,n/a,4,0,2,1,1
"org.apache.cassandra.db.ReadResponse.LegacyRangeSliceReplySerializer.deserialize(DataInputPlus,int)",7,21,n/a,14,2,2,9,2
"org.apache.cassandra.db.ReadResponse.LegacyRangeSliceReplySerializer.serialize(ReadResponse,DataOutputPlus,int)",13,22,n/a,32,3,3,15,4
"org.apache.cassandra.db.ReadResponse.LegacyRangeSliceReplySerializer.serializedSize(ReadResponse,int)",8,19,n/a,18,3,2,9,2
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse.LegacyRemoteDataResponse(List<ImmutableBTreePartition>)",1,3,n/a,6,0,1,2,1
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse.digest(CFMetaData,ReadCommand)",3,0,n/a,7,1,2,2,1
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse.isDigestResponse()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse.makeIterator(CFMetaData,ReadCommand)",29,6,n/a,10,2,2,20,12
"org.apache.cassandra.db.ReadResponse.LocalDataResponse.LocalDataResponse(UnfilteredPartitionIterator,ColumnFilter)",3,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.ReadResponse.LocalDataResponse.build(UnfilteredPartitionIterator,ColumnFilter)",5,2,n/a,13,1,2,4,2
"org.apache.cassandra.db.ReadResponse.LocalDataResponse.selection(ReadCommand)",1,1,n/a,7,0,1,2,2
"org.apache.cassandra.db.ReadResponse.RangeSliceSerializer.deserialize(DataInputPlus,int)",2,21,n/a,6,0,2,1,2
"org.apache.cassandra.db.ReadResponse.RangeSliceSerializer.serialize(ReadResponse,DataOutputPlus,int)",2,22,n/a,7,0,3,3,2
"org.apache.cassandra.db.ReadResponse.RangeSliceSerializer.serializedSize(ReadResponse,int)",2,19,n/a,6,0,2,1,2
"org.apache.cassandra.db.ReadResponse.ReadResponse(CFMetaData)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.ReadResponse.RemoteDataResponse.RemoteDataResponse(ByteBuffer)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.ReadResponse.RemoteDataResponse.selection(ReadCommand)",1,1,n/a,6,0,1,2,1
"org.apache.cassandra.db.ReadResponse.Serializer.deserialize(DataInputPlus,int)",17,21,n/a,34,2,2,22,6
"org.apache.cassandra.db.ReadResponse.Serializer.serialize(ReadResponse,DataOutputPlus,int)",14,22,n/a,32,4,3,19,5
"org.apache.cassandra.db.ReadResponse.Serializer.serializedSize(ReadResponse,int)",14,19,n/a,36,4,2,19,5
"org.apache.cassandra.db.ReadResponse.createDataResponse(UnfilteredPartitionIterator,ColumnFilter)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.ReadResponse.createDigestResponse(UnfilteredPartitionIterator,int)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.ReadResponse.createRemoteDataResponse(UnfilteredPartitionIterator,ColumnFilter)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.ReadResponse.digest(CFMetaData,ReadCommand)",n/a,0,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.ReadResponse.isDigestResponse()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.ReadResponse.makeDigest(UnfilteredPartitionIterator,int)",4,3,n/a,6,0,2,3,1
"org.apache.cassandra.db.ReadResponse.makeIterator(CFMetaData,ReadCommand)",n/a,5,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.RowIndexEntry.IndexSerializer.deserialize(DataInputPlus)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.RowIndexEntry.IndexSerializer.serialize(RowIndexEntry<T>,DataOutputPlus)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.RowIndexEntry.IndexSerializer.serializedSize(RowIndexEntry<T>)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.IndexedEntry(long,DeletionTime,long,List<IndexInfo>)",2,4,n/a,9,0,4,6,2
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.columnsIndex()",0,6,n/a,5,0,0,1,1
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.deletionTime()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.headerLength()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.promotedSize(Serializer)",8,1,n/a,11,0,1,5,2
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry.unsharedHeapSize()",4,0,n/a,11,0,0,4,2
"org.apache.cassandra.db.RowIndexEntry.RowIndexEntry(long)",0,5,n/a,4,0,1,1,1
"org.apache.cassandra.db.RowIndexEntry.Serializer.Serializer(CFMetaData,Version,SerializationHeader)",1,1,n/a,5,0,3,2,1
"org.apache.cassandra.db.RowIndexEntry.Serializer.deserialize(DataInputPlus)",22,0,n/a,44,3,1,31,7
"org.apache.cassandra.db.RowIndexEntry.Serializer.readPosition(DataInputPlus,Version)",3,1,n/a,7,0,2,1,2
"org.apache.cassandra.db.RowIndexEntry.Serializer.serialize(RowIndexEntry<IndexInfo>,DataOutputPlus)",23,1,n/a,42,3,2,23,7
"org.apache.cassandra.db.RowIndexEntry.Serializer.serializedSize(RowIndexEntry<IndexInfo>)",14,0,n/a,16,1,1,11,3
"org.apache.cassandra.db.RowIndexEntry.Serializer.skip(DataInputPlus,Version)",2,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.RowIndexEntry.Serializer.skipPromotedIndex(DataInputPlus,Version)",4,1,n/a,7,0,2,4,3
"org.apache.cassandra.db.RowIndexEntry.columnsIndex()",1,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.RowIndexEntry.create(long,DeletionTime,ColumnIndex)",3,0,n/a,12,0,3,5,2
"org.apache.cassandra.db.RowIndexEntry.deletionTime()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.RowIndexEntry.headerLength()",1,2,n/a,9,0,0,1,1
"org.apache.cassandra.db.RowIndexEntry.headerOffset()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.RowIndexEntry.isIndexed()",2,2,n/a,8,0,0,1,1
"org.apache.cassandra.db.RowIndexEntry.promotedSize(Serializer)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.RowIndexEntry.unsharedHeapSize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,int,long,Object)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,int,long,int,Object)",4,0,n/a,4,0,5,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,long,Mutation)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,long,Object)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,long,int,Mutation)",2,0,n/a,4,0,4,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(CFMetaData,long,int,Object)",2,0,n/a,4,0,4,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(PartitionUpdate,long,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(PartitionUpdate,long,int,Mutation)",2,2,n/a,4,0,4,1,1
"org.apache.cassandra.db.RowUpdateBuilder.RowUpdateBuilder(PartitionUpdate,long,int,int,Mutation)",5,1,n/a,11,0,5,6,2
"org.apache.cassandra.db.RowUpdateBuilder.add(ColumnDefinition,Object)",7,2,n/a,6,0,2,3,3
"org.apache.cassandra.db.RowUpdateBuilder.add(String,Object)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.RowUpdateBuilder.addListEntry(String,Object)",11,2,n/a,9,0,2,6,3
"org.apache.cassandra.db.RowUpdateBuilder.addMapEntry(String,Object,Object)",13,2,n/a,9,0,3,6,4
"org.apache.cassandra.db.RowUpdateBuilder.addRangeTombstone(Object,Object)",5,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.RowUpdateBuilder.addRangeTombstone(RangeTombstone)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.RowUpdateBuilder.addRangeTombstone(Slice)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.addSetEntry(String,Object)",9,1,n/a,9,0,2,6,3
"org.apache.cassandra.db.RowUpdateBuilder.bb(Object,AbstractType<?>)",5,8,n/a,14,1,2,8,4
"org.apache.cassandra.db.RowUpdateBuilder.build()",2,55,n/a,7,0,0,4,3
"org.apache.cassandra.db.RowUpdateBuilder.buildUpdate()",1,7,n/a,5,0,0,2,1
"org.apache.cassandra.db.RowUpdateBuilder.builder()",3,1,n/a,11,1,0,5,2
"org.apache.cassandra.db.RowUpdateBuilder.builder(ColumnDefinition)",3,8,n/a,4,0,1,1,2
"org.apache.cassandra.db.RowUpdateBuilder.clustering(Object...)",7,4,n/a,7,0,1,3,2
"org.apache.cassandra.db.RowUpdateBuilder.delete(ColumnDefinition)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.delete(String)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.db.RowUpdateBuilder.deleteRow(CFMetaData,long,Mutation,Object...)",3,0,n/a,5,0,4,2,1
"org.apache.cassandra.db.RowUpdateBuilder.deleteRow(CFMetaData,long,Object,Object...)",2,0,n/a,4,0,4,1,1
"org.apache.cassandra.db.RowUpdateBuilder.deleteRow(PartitionUpdate,long,int,Object...)",16,1,n/a,12,0,4,8,5
"org.apache.cassandra.db.RowUpdateBuilder.deleteRowAt(CFMetaData,long,int,Object,Object...)",8,0,n/a,8,0,5,3,1
"org.apache.cassandra.db.RowUpdateBuilder.frozenList(String,List<?>)",8,0,n/a,8,0,2,5,3
"org.apache.cassandra.db.RowUpdateBuilder.frozenMap(String,Map<?, ?>)",8,0,n/a,8,0,2,5,3
"org.apache.cassandra.db.RowUpdateBuilder.frozenSet(String,Set<?>)",8,0,n/a,8,0,2,5,3
"org.apache.cassandra.db.RowUpdateBuilder.getDefinition(String)",3,9,n/a,4,0,1,1,1
"org.apache.cassandra.db.RowUpdateBuilder.getOrAdd(CFMetaData,Mutation)",5,2,n/a,10,1,2,5,2
"org.apache.cassandra.db.RowUpdateBuilder.makeCell(ColumnDefinition,ByteBuffer,CellPath)",4,7,n/a,6,0,3,1,3
"org.apache.cassandra.db.RowUpdateBuilder.makeKey(CFMetaData,Object...)",4,2,n/a,7,0,2,4,3
"org.apache.cassandra.db.RowUpdateBuilder.map(String,Map<?, ?>)",5,0,n/a,7,0,2,4,2
"org.apache.cassandra.db.RowUpdateBuilder.noRowMarker()",0,0,n/a,6,0,0,2,1
"org.apache.cassandra.db.RowUpdateBuilder.resetCollection(String)",9,2,n/a,9,0,1,6,4
"org.apache.cassandra.db.RowUpdateBuilder.set(String,Set<?>)",2,0,n/a,7,0,2,4,2
"org.apache.cassandra.db.RowUpdateBuilder.startRow(Clustering)",8,2,n/a,10,0,1,6,3
"org.apache.cassandra.db.RowUpdateBuilder.staticBuilder()",3,1,n/a,10,1,0,5,2
"org.apache.cassandra.db.RowUpdateBuilder.unfilteredIterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SchemaCheckVerbHandler.doVerb(MessageIn,int)",5,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.SerializationHeader.Component.Component(AbstractType<?>,List<AbstractType<?>>,Map<ByteBuffer, AbstractType<?>>,Map<ByteBuffer, AbstractType<?>>,EncodingStats)",0,2,n/a,12,0,5,5,1
"org.apache.cassandra.db.SerializationHeader.Component.equals(Object)",5,0,n/a,12,0,1,4,6
"org.apache.cassandra.db.SerializationHeader.Component.getType()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.Component.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.Component.toHeader(CFMetaData)",14,0,n/a,26,2,1,12,4
"org.apache.cassandra.db.SerializationHeader.Component.toString()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.SerializationHeader(boolean,AbstractType<?>,List<AbstractType<?>>,PartitionColumns,EncodingStats,Map<ByteBuffer, AbstractType<?>>)",0,4,n/a,14,0,6,6,1
"org.apache.cassandra.db.SerializationHeader.SerializationHeader(boolean,CFMetaData,PartitionColumns,EncodingStats)",4,4,n/a,12,0,4,1,1
"org.apache.cassandra.db.SerializationHeader.Serializer.deserialize(Version,DataInputPlus)",11,1,n/a,15,0,2,13,2
"org.apache.cassandra.db.SerializationHeader.Serializer.deserializeForMessaging(DataInputPlus,CFMetaData,ColumnFilter,boolean)",12,0,n/a,18,1,4,10,4
"org.apache.cassandra.db.SerializationHeader.Serializer.readColumnsWithType(DataInputPlus,Map<ByteBuffer, AbstractType<?>>)",4,2,n/a,9,1,2,6,2
"org.apache.cassandra.db.SerializationHeader.Serializer.readType(DataInputPlus)",3,3,n/a,5,0,1,2,1
"org.apache.cassandra.db.SerializationHeader.Serializer.serialize(Version,Component,DataOutputPlus)",7,1,n/a,11,0,3,7,2
"org.apache.cassandra.db.SerializationHeader.Serializer.serializeForMessaging(SerializationHeader,ColumnFilter,DataOutputPlus,boolean)",7,0,n/a,16,1,4,8,4
"org.apache.cassandra.db.SerializationHeader.Serializer.serializedSize(Version,Component)",7,1,n/a,12,0,2,8,2
"org.apache.cassandra.db.SerializationHeader.Serializer.serializedSizeForMessaging(SerializationHeader,ColumnFilter,boolean)",7,0,n/a,17,1,3,9,4
"org.apache.cassandra.db.SerializationHeader.Serializer.sizeofColumnsWithTypes(Map<ByteBuffer, AbstractType<?>>)",7,2,n/a,10,1,1,5,2
"org.apache.cassandra.db.SerializationHeader.Serializer.sizeofType(AbstractType<?>)",3,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.Serializer.writeColumnsWithTypes(Map<ByteBuffer, AbstractType<?>>,DataOutputPlus)",7,2,n/a,9,1,2,4,2
"org.apache.cassandra.db.SerializationHeader.Serializer.writeType(AbstractType<?>,DataOutputPlus)",3,3,n/a,5,0,2,1,1
"org.apache.cassandra.db.SerializationHeader.clusteringTypes()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.columns()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.columns(boolean)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.SerializationHeader.deletionTimeSerializedSize(DeletionTime)",4,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.forKeyCache(CFMetaData)",6,0,n/a,18,0,1,7,2
"org.apache.cassandra.db.SerializationHeader.getType(ColumnDefinition)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.SerializationHeader.hasStatic()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.isForSSTable()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.keyType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.localDeletionTimeSerializedSize(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.make(CFMetaData,Collection<SSTableReader>)",15,8,n/a,26,1,2,10,3
"org.apache.cassandra.db.SerializationHeader.readDeletionTime(DataInputPlus)",3,0,n/a,6,0,1,3,1
"org.apache.cassandra.db.SerializationHeader.readLocalDeletionTime(DataInputPlus)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.readTTL(DataInputPlus)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.readTimestamp(DataInputPlus)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.skipDeletionTime(DataInputPlus)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.SerializationHeader.skipLocalDeletionTime(DataInputPlus)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.skipTTL(DataInputPlus)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.skipTimestamp(DataInputPlus)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.stats()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.timestampSerializedSize(long)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.toComponent()",5,0,n/a,10,0,0,7,3
"org.apache.cassandra.db.SerializationHeader.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.SerializationHeader.ttlSerializedSize(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.typesOf(List<ColumnDefinition>)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.SerializationHeader.writeDeletionTime(DeletionTime,DataOutputPlus)",4,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.SerializationHeader.writeLocalDeletionTime(int,DataOutputPlus)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.SerializationHeader.writeTTL(int,DataOutputPlus)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.SerializationHeader.writeTimestamp(long,DataOutputPlus)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.Serializers.Serializers(CFMetaData)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Serializers.indexEntryClusteringPrefixSerializer(Version,SerializationHeader)",30,0,n/a,4,4,2,23,8
"org.apache.cassandra.db.SinglePartitionReadCommand.Deserializer.deserialize(DataInputPlus,int,boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,Optional<IndexMetadata>)",5,0,n/a,7,0,11,3,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.Group(List<SinglePartitionReadCommand>,DataLimits)",6,1,n/a,9,0,2,8,2
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.execute(ConsistencyLevel,ClientState)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.executeInternal(ReadOrderGroup)",6,0,n/a,8,0,1,4,2
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.getPager(PagingState,int)",4,0,n/a,6,0,2,3,2
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.limits()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.metadata()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.nowInSec()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.one(SinglePartitionReadCommand)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.selectsClustering(DecoratedKey,Clustering)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.selectsKey(DecoratedKey)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.startOrderGroup()",2,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.SinglePartitionReadCommand(boolean,int,boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DecoratedKey,ClusteringIndexFilter)",2,3,n/a,16,0,10,4,1
"org.apache.cassandra.db.SinglePartitionReadCommand.add(UnfilteredRowIterator,ImmutableBTreePartition,ClusteringIndexNamesFilter,boolean)",13,2,n/a,12,1,4,7,3
"org.apache.cassandra.db.SinglePartitionReadCommand.appendCQLWhereClause(StringBuilder)",22,0,n/a,12,0,1,8,3
"org.apache.cassandra.db.SinglePartitionReadCommand.canRemoveRow(Row,Columns,long)",6,2,n/a,15,1,3,7,6
"org.apache.cassandra.db.SinglePartitionReadCommand.clusteringIndexFilter()",0,16,n/a,4,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.clusteringIndexFilter(DecoratedKey)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.copy()",11,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,ByteBuffer,Slices)",2,1,n/a,15,0,4,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DecoratedKey,ClusteringIndexFilter)",1,2,n/a,23,0,7,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,DecoratedKey,ColumnFilter,ClusteringIndexFilter)",1,0,n/a,15,0,5,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,DecoratedKey,Slice)",2,1,n/a,15,0,4,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(CFMetaData,int,DecoratedKey,Slices)",3,1,n/a,16,0,4,2,1
"org.apache.cassandra.db.SinglePartitionReadCommand.create(boolean,CFMetaData,int,ColumnFilter,RowFilter,DataLimits,DecoratedKey,ClusteringIndexFilter)",1,2,n/a,25,0,8,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.createMessage(int)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.SinglePartitionReadCommand.execute(ConsistencyLevel,ClientState)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.forPaging(Clustering,int)",13,0,n/a,23,0,2,2,2
"org.apache.cassandra.db.SinglePartitionReadCommand.fullPartitionRead(CFMetaData,int,ByteBuffer)",2,0,n/a,13,0,3,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.fullPartitionRead(CFMetaData,int,DecoratedKey)",1,0,n/a,13,0,3,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.getPager(PagingState,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.getPager(SinglePartitionReadCommand,PagingState,int)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.getThroughCache(ColumnFamilyStore,Group)",59,1,n/a,97,4,2,45,12
"org.apache.cassandra.db.SinglePartitionReadCommand.getTimeout()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.oldestUnrepairedTombstone()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.partitionKey()",0,20,n/a,4,0,0,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDisk(ColumnFamilyStore,Group)",3,5,n/a,21,0,2,3,1
"org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndDiskInternal(ColumnFamilyStore,boolean)",82,1,n/a,133,4,2,68,24
"org.apache.cassandra.db.SinglePartitionReadCommand.queryMemtableAndSSTablesInTimestampOrder(ColumnFamilyStore,boolean,ClusteringIndexNamesFilter)",64,1,n/a,5,4,3,41,17
"org.apache.cassandra.db.SinglePartitionReadCommand.queryNeitherCountersNorCollections()",4,1,n/a,9,1,0,4,4
"org.apache.cassandra.db.SinglePartitionReadCommand.queryStorage(ColumnFamilyStore,ReadOrderGroup)",7,0,n/a,8,0,2,2,2
"org.apache.cassandra.db.SinglePartitionReadCommand.recordLatency(TableMetrics,long)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.reduceFilter(ClusteringIndexNamesFilter,Partition,long)",25,1,n/a,43,1,3,30,17
"org.apache.cassandra.db.SinglePartitionReadCommand.selectionSerializedSize(int)",7,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.SinglePartitionReadCommand.selectsClustering(DecoratedKey,Clustering)",7,0,n/a,8,0,2,5,3
"org.apache.cassandra.db.SinglePartitionReadCommand.selectsKey(DecoratedKey)",6,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.SinglePartitionReadCommand.serializeSelection(DataOutputPlus,int)",7,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.SinglePartitionReadCommand.toString()",14,0,n/a,13,0,0,1,1
"org.apache.cassandra.db.SizeEstimatesRecorder.SizeEstimatesRecorder()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.SizeEstimatesRecorder.estimateMeanPartitionSize(Collection<SSTableReader>)",4,1,n/a,11,1,1,6,3
"org.apache.cassandra.db.SizeEstimatesRecorder.estimatePartitionsCount(Collection<SSTableReader>,Range<Token>)",2,1,n/a,7,0,2,4,2
"org.apache.cassandra.db.SizeEstimatesRecorder.onDropColumnFamily(String,String)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.db.SizeEstimatesRecorder.recordSizeEstimates(ColumnFamilyStore,Collection<Range<Token>>)",13,1,n/a,32,3,2,15,4
"org.apache.cassandra.db.SizeEstimatesRecorder.run()",13,0,n/a,25,2,0,12,4
"org.apache.cassandra.db.Slice.Bound.Bound(Kind,ByteBuffer[])",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.db.Slice.Bound.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",3,2,n/a,5,0,3,2,1
"org.apache.cassandra.db.Slice.Bound.Serializer.deserializeValues(DataInputPlus,Kind,int,List<AbstractType<?>>)",4,1,n/a,8,0,4,5,3
"org.apache.cassandra.db.Slice.Bound.Serializer.serialize(Bound,DataOutputPlus,int,List<AbstractType<?>>)",6,2,n/a,6,0,4,3,1
"org.apache.cassandra.db.Slice.Bound.Serializer.serializedSize(Bound,int,List<AbstractType<?>>)",3,2,n/a,6,0,3,1,1
"org.apache.cassandra.db.Slice.Bound.boundKind(boolean,boolean)",0,2,n/a,6,0,2,1,4
"org.apache.cassandra.db.Slice.Bound.compareTo(ClusteringComparator,List<ByteBuffer>)",11,2,n/a,24,1,2,11,9
"org.apache.cassandra.db.Slice.Bound.create(ClusteringComparator,boolean,boolean,Object...)",4,0,n/a,12,1,4,6,3
"org.apache.cassandra.db.Slice.Bound.create(Kind,ByteBuffer[])",2,7,n/a,5,0,2,2,1
"org.apache.cassandra.db.Slice.Bound.exclusiveEndOf(ByteBuffer...)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slice.Bound.exclusiveStartOf(ByteBuffer...)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slice.Bound.exclusiveStartOf(ClusteringPrefix)",4,0,n/a,7,0,1,6,2
"org.apache.cassandra.db.Slice.Bound.inclusiveEndOf(ByteBuffer...)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slice.Bound.inclusiveEndOf(ClusteringPrefix)",4,0,n/a,7,0,1,6,2
"org.apache.cassandra.db.Slice.Bound.inclusiveStartOf(ByteBuffer...)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slice.Bound.inclusiveStartOf(ClusteringPrefix)",4,0,n/a,7,0,1,6,2
"org.apache.cassandra.db.Slice.Bound.invert()",3,0,n/a,12,0,0,1,1
"org.apache.cassandra.db.Slice.Bound.isEnd()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slice.Bound.isExclusive()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.Slice.Bound.isInclusive()",0,3,n/a,4,0,0,1,2
"org.apache.cassandra.db.Slice.Bound.isStart()",2,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slice.Bound.toString(CFMetaData)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slice.Bound.toString(ClusteringComparator)",12,1,n/a,12,1,1,9,3
"org.apache.cassandra.db.Slice.Bound.withNewKind(Kind)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.Slice.Serializer.deserialize(DataInputPlus,int,List<AbstractType<?>>)",3,0,n/a,6,0,3,3,1
"org.apache.cassandra.db.Slice.Serializer.serialize(Slice,DataOutputPlus,int,List<AbstractType<?>>)",2,0,n/a,5,0,4,2,1
"org.apache.cassandra.db.Slice.Serializer.serializedSize(Slice,int,List<AbstractType<?>>)",2,0,n/a,5,0,3,1,1
"org.apache.cassandra.db.Slice.Slice(Bound,Bound)",2,8,n/a,6,0,2,3,2
"org.apache.cassandra.db.Slice.close(boolean)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.Slice.end()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slice.equals(Object)",6,0,n/a,9,0,1,4,3
"org.apache.cassandra.db.Slice.extractValues(ClusteringPrefix)",3,5,n/a,7,0,1,6,2
"org.apache.cassandra.db.Slice.forPaging(ClusteringComparator,Clustering,boolean,boolean)",12,0,n/a,40,1,4,19,17
"org.apache.cassandra.db.Slice.hashCode()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.Slice.includes(ClusteringComparator,Bound)",2,0,n/a,12,0,2,1,2
"org.apache.cassandra.db.Slice.intersects(ClusteringComparator,List<ByteBuffer>,List<ByteBuffer>)",17,0,n/a,34,1,3,12,15
"org.apache.cassandra.db.Slice.isEmpty(ClusteringComparator)",3,0,n/a,10,0,1,1,1
"org.apache.cassandra.db.Slice.isEmpty(ClusteringComparator,Bound,Bound)",3,1,n/a,14,0,3,2,2
"org.apache.cassandra.db.Slice.make(Bound,Bound)",1,0,n/a,6,0,2,3,3
"org.apache.cassandra.db.Slice.make(Clustering)",4,0,n/a,7,0,1,3,1
"org.apache.cassandra.db.Slice.make(Clustering,Clustering)",5,0,n/a,8,0,2,4,2
"org.apache.cassandra.db.Slice.make(ClusteringComparator,Object...)",6,0,n/a,12,1,2,6,3
"org.apache.cassandra.db.Slice.open(boolean)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.Slice.selects(ClusteringComparator,Clustering)",2,0,n/a,12,0,2,1,2
"org.apache.cassandra.db.Slice.start()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slice.toString(CFMetaData)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slice.toString(ClusteringComparator)",19,1,n/a,20,1,1,17,7
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ArrayBackedSlices(ClusteringComparator,Slice[])",0,6,n/a,5,0,2,2,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ComponentOfSlice.ComponentOfSlice(boolean,ByteBuffer,boolean,ByteBuffer)",0,1,n/a,7,0,4,4,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ComponentOfSlice.fromSlice(int,Slice)",11,1,n/a,20,1,2,13,5
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ComponentOfSlice.isEQ()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InForwardOrderTester.includes(Clustering)",4,1,n/a,22,2,1,13,6
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InForwardOrderTester.isDone()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InReverseOrderTester.InReverseOrderTester()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InReverseOrderTester.includes(Clustering)",4,1,n/a,22,2,1,13,6
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InReverseOrderTester.isDone()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.forForwardPaging(ClusteringComparator,Clustering,boolean)",3,1,n/a,16,1,3,13,5
"org.apache.cassandra.db.Slices.ArrayBackedSlices.forPaging(ClusteringComparator,Clustering,boolean,boolean)",2,0,n/a,4,0,4,1,2
"org.apache.cassandra.db.Slices.ArrayBackedSlices.forReversePaging(ClusteringComparator,Clustering,boolean)",3,1,n/a,16,1,3,13,5
"org.apache.cassandra.db.Slices.ArrayBackedSlices.get(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.hasLowerBound()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.hasUpperBound()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.inOrderTester(boolean)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.Slices.ArrayBackedSlices.intersects(List<ByteBuffer>,List<ByteBuffer>)",1,0,n/a,9,1,2,4,3
"org.apache.cassandra.db.Slices.ArrayBackedSlices.iterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.makeSliceIterator(SliceableUnfilteredRowIterator)",12,0,n/a,16,4,1,18,8
"org.apache.cassandra.db.Slices.ArrayBackedSlices.selects(Clustering)",4,0,n/a,12,1,1,9,4
"org.apache.cassandra.db.Slices.ArrayBackedSlices.size()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.ArrayBackedSlices.toCQLString(CFMetaData)",40,0,n/a,78,3,1,51,18
"org.apache.cassandra.db.Slices.ArrayBackedSlices.toString()",7,0,n/a,13,1,0,9,3
"org.apache.cassandra.db.Slices.Builder.Builder(ClusteringComparator)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.Slices.Builder.Builder(ClusteringComparator,int)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.Slices.Builder.add(Bound,Bound)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.Slices.Builder.add(Slice)",10,1,n/a,8,0,1,5,3
"org.apache.cassandra.db.Slices.Builder.build()",7,1,n/a,11,0,0,6,5
"org.apache.cassandra.db.Slices.Builder.normalize(List<Slice>)",23,1,n/a,8,2,1,27,9
"org.apache.cassandra.db.Slices.Builder.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.InOrderTester.includes(Clustering)",n/a,1,4,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.Slices.InOrderTester.isDone()",n/a,0,4,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.Slices.SelectAllSlices.forPaging(ClusteringComparator,Clustering,boolean,boolean)",2,0,n/a,4,0,4,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.get(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.hasLowerBound()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.hasUpperBound()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.inOrderTester(boolean)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.intersects(List<ByteBuffer>,List<ByteBuffer>)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.iterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.makeSliceIterator(SliceableUnfilteredRowIterator)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.selects(Clustering)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.size()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.toCQLString(CFMetaData)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectAllSlices.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.forPaging(ClusteringComparator,Clustering,boolean,boolean)",0,0,n/a,4,0,4,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.get(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.hasLowerBound()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.hasUpperBound()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.inOrderTester(boolean)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.intersects(List<ByteBuffer>,List<ByteBuffer>)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.iterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.makeSliceIterator(SliceableUnfilteredRowIterator)",6,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.selects(Clustering)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.size()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.toCQLString(CFMetaData)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.Slices.SelectNoSlices.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.Slices.Serializer.deserialize(DataInputPlus,int,CFMetaData)",6,0,n/a,12,0,3,11,6
"org.apache.cassandra.db.Slices.Serializer.serialize(Slices,DataOutputPlus,int)",5,0,n/a,12,0,3,7,4
"org.apache.cassandra.db.Slices.Serializer.serializedSize(Slices,int)",6,0,n/a,12,0,2,7,4
"org.apache.cassandra.db.Slices.Slices()",0,3,n/a,3,0,0,0,1
"org.apache.cassandra.db.Slices.forPaging(ClusteringComparator,Clustering,boolean,boolean)",n/a,0,3,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.Slices.get(int)",n/a,0,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.Slices.hasLowerBound()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.Slices.hasUpperBound()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.Slices.inOrderTester(boolean)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.Slices.intersects(List<ByteBuffer>,List<ByteBuffer>)",n/a,0,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.Slices.isEmpty()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.Slices.makeSliceIterator(SliceableUnfilteredRowIterator)",n/a,0,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.Slices.selects(Clustering)",n/a,0,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.Slices.size()",n/a,4,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.Slices.toCQLString(CFMetaData)",n/a,0,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.Slices.with(ClusteringComparator,Slice)",6,0,n/a,15,0,2,4,3
"org.apache.cassandra.db.SnapshotCommand.SnapshotCommand(String,String,String,boolean)",0,1,n/a,7,0,4,4,1
"org.apache.cassandra.db.SnapshotCommand.createMessage()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SnapshotCommand.toString()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.SnapshotCommandSerializer.deserialize(DataInputPlus,int)",5,21,n/a,8,0,2,5,1
"org.apache.cassandra.db.SnapshotCommandSerializer.serialize(SnapshotCommand,DataOutputPlus,int)",4,22,n/a,7,0,3,4,1
"org.apache.cassandra.db.SnapshotCommandSerializer.serializedSize(SnapshotCommand,int)",4,19,n/a,7,0,2,1,1
"org.apache.cassandra.db.SnapshotDetailsTabularData.from(String,String,String,Entry<String, Pair<Long, Long>>,TabularDataSupport)",7,0,n/a,14,1,5,5,2
"org.apache.cassandra.db.SystemKeyspace.SystemKeyspace()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.db.SystemKeyspace.beginViewBuild(String,String,int)",2,0,n/a,7,0,3,1,1
"org.apache.cassandra.db.SystemKeyspace.bootstrapComplete()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.SystemKeyspace.bootstrapInProgress()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.SystemKeyspace.byteBufferToRange(ByteBuffer,IPartitioner)",4,1,n/a,14,1,2,3,2
"org.apache.cassandra.db.SystemKeyspace.checkHealth()",18,0,n/a,36,1,0,16,6
"org.apache.cassandra.db.SystemKeyspace.clearSSTableReadMeter(String,String,int)",2,1,n/a,8,0,3,2,1
"org.apache.cassandra.db.SystemKeyspace.clearSizeEstimates(String,String)",2,0,n/a,8,0,2,2,1
"org.apache.cassandra.db.SystemKeyspace.compile(String,String,String)",3,22,n/a,5,0,3,1,1
"org.apache.cassandra.db.SystemKeyspace.deserializeTokens(Collection<String>)",5,2,n/a,8,0,1,5,2
"org.apache.cassandra.db.SystemKeyspace.finishStartup()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.SystemKeyspace.finishViewBuildStatus(String,String)",5,0,n/a,12,0,2,4,1
"org.apache.cassandra.db.SystemKeyspace.forceBlockingFlush(String)",5,14,n/a,5,0,1,2,2
"org.apache.cassandra.db.SystemKeyspace.functions()",10,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.SystemKeyspace.getAvailableRanges(String,IPartitioner)",7,1,n/a,15,2,2,8,3
"org.apache.cassandra.db.SystemKeyspace.getBootstrapState()",8,3,n/a,8,0,0,5,3
"org.apache.cassandra.db.SystemKeyspace.getBuiltIndexes(String,Set<String>)",9,0,n/a,9,0,2,4,1
"org.apache.cassandra.db.SystemKeyspace.getCompactionHistory()",3,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.SystemKeyspace.getLocalHostId()",10,1,n/a,16,0,0,7,3
"org.apache.cassandra.db.SystemKeyspace.getPreferredIP(InetAddress)",7,4,n/a,14,0,1,5,3
"org.apache.cassandra.db.SystemKeyspace.getPreviousVersionString()",14,1,n/a,35,3,0,9,6
"org.apache.cassandra.db.SystemKeyspace.getRack()",7,0,n/a,12,0,0,5,3
"org.apache.cassandra.db.SystemKeyspace.getReleaseVersion(InetAddress)",11,1,n/a,30,2,1,9,5
"org.apache.cassandra.db.SystemKeyspace.getSSTableReadMeter(String,String,int)",8,0,n/a,18,0,3,8,2
"org.apache.cassandra.db.SystemKeyspace.getSavedTokens()",9,1,n/a,8,0,0,3,3
"org.apache.cassandra.db.SystemKeyspace.getTruncatedAt(UUID)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.db.SystemKeyspace.getTruncatedPosition(UUID)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.db.SystemKeyspace.getTruncationRecord(UUID)",2,2,n/a,6,0,1,3,2
"org.apache.cassandra.db.SystemKeyspace.getViewBuildStatus(String,String)",11,0,n/a,18,1,2,13,5
"org.apache.cassandra.db.SystemKeyspace.incrementAndGetGeneration()",13,0,n/a,33,2,0,15,4
"org.apache.cassandra.db.SystemKeyspace.isIndexBuilt(String,String)",3,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.SystemKeyspace.isViewBuilt(String,String)",3,18,n/a,6,0,2,3,1
"org.apache.cassandra.db.SystemKeyspace.loadDcRackInfo()",11,10,n/a,19,2,0,9,4
"org.apache.cassandra.db.SystemKeyspace.loadHostIds()",6,0,n/a,17,2,0,6,3
"org.apache.cassandra.db.SystemKeyspace.loadPaxosState(DecoratedKey,CFMetaData)",29,0,n/a,22,0,2,11,7
"org.apache.cassandra.db.SystemKeyspace.loadTokens()",7,0,n/a,15,1,0,6,3
"org.apache.cassandra.db.SystemKeyspace.metadata()",6,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.SystemKeyspace.migrateDataDirs()",15,0,n/a,28,4,0,10,5
"org.apache.cassandra.db.SystemKeyspace.paxosTtl(CFMetaData)",1,3,n/a,5,0,1,1,1
"org.apache.cassandra.db.SystemKeyspace.persistLocalMetadata()",17,1,n/a,31,0,0,3,1
"org.apache.cassandra.db.SystemKeyspace.persistSSTableReadMeter(String,String,int,RestorableMeter)",4,0,n/a,14,0,4,2,1
"org.apache.cassandra.db.SystemKeyspace.rangeToBytes(Range<Token>)",4,1,n/a,12,1,1,4,2
"org.apache.cassandra.db.SystemKeyspace.readTruncationRecords()",13,1,n/a,12,1,0,7,4
"org.apache.cassandra.db.SystemKeyspace.removeEndpoint(InetAddress)",3,0,n/a,9,0,1,3,1
"org.apache.cassandra.db.SystemKeyspace.removeTruncationRecord(UUID)",3,0,n/a,10,0,1,4,1
"org.apache.cassandra.db.SystemKeyspace.resetAvailableRanges()",3,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.SystemKeyspace.savePaxosCommit(Commit)",9,0,n/a,14,0,1,2,1
"org.apache.cassandra.db.SystemKeyspace.savePaxosPromise(Commit)",8,0,n/a,10,0,1,2,1
"org.apache.cassandra.db.SystemKeyspace.savePaxosProposal(Commit)",9,0,n/a,11,0,1,1,1
"org.apache.cassandra.db.SystemKeyspace.saveTruncationRecord(ColumnFamilyStore,long,ReplayPosition)",4,1,n/a,7,0,3,4,1
"org.apache.cassandra.db.SystemKeyspace.setBootstrapState(BootstrapState)",4,0,n/a,6,0,1,3,1
"org.apache.cassandra.db.SystemKeyspace.setIndexBuilt(String,String)",3,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.SystemKeyspace.setIndexRemoved(String,String)",3,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.SystemKeyspace.setLocalHostId(UUID)",2,1,n/a,9,0,1,3,1
"org.apache.cassandra.db.SystemKeyspace.setViewBuilt(String,String)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.db.SystemKeyspace.setViewRemoved(String,String)",6,0,n/a,9,0,2,6,1
"org.apache.cassandra.db.SystemKeyspace.snapshotOnVersionChange()",10,0,n/a,24,1,0,9,3
"org.apache.cassandra.db.SystemKeyspace.tables()",1,1,n/a,25,0,0,1,1
"org.apache.cassandra.db.SystemKeyspace.tokensAsSet(Collection<Token>)",7,2,n/a,10,0,1,7,3
"org.apache.cassandra.db.SystemKeyspace.truncationAsMapEntry(ColumnFamilyStore,long,ReplayPosition)",8,1,n/a,13,1,3,5,2
"org.apache.cassandra.db.SystemKeyspace.truncationRecordFromBlob(ByteBuffer)",6,1,n/a,11,1,1,3,3
"org.apache.cassandra.db.SystemKeyspace.updateAvailableRanges(String,Collection<Range<Token>>)",6,1,n/a,10,1,2,5,2
"org.apache.cassandra.db.SystemKeyspace.updateCompactionHistory(String,String,long,long,long,Map<Integer, Long>)",6,1,n/a,20,0,6,4,3
"org.apache.cassandra.db.SystemKeyspace.updateHintsDropped(InetAddress,UUID,int)",2,1,n/a,6,0,3,2,1
"org.apache.cassandra.db.SystemKeyspace.updateLocalTokens(Collection<Token>,Collection<Token>)",4,0,n/a,15,0,2,5,1
"org.apache.cassandra.db.SystemKeyspace.updatePeerInfo(InetAddress,String,Object)",4,2,n/a,7,0,3,4,2
"org.apache.cassandra.db.SystemKeyspace.updatePreferredIP(InetAddress,InetAddress)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.db.SystemKeyspace.updateSchemaVersion(UUID)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.SystemKeyspace.updateSizeEstimates(String,String,Map<Range<Token>, Pair<Long, Long>>)",22,0,n/a,24,1,3,10,2
"org.apache.cassandra.db.SystemKeyspace.updateTokens(Collection<Token>)",5,1,n/a,10,0,1,4,1
"org.apache.cassandra.db.SystemKeyspace.updateTokens(InetAddress,Collection<Token>)",5,0,n/a,10,0,2,4,2
"org.apache.cassandra.db.SystemKeyspace.updateViewBuildStatus(String,String,Token)",4,0,n/a,6,0,3,3,1
"org.apache.cassandra.db.SystemKeyspace.wasDecommissioned()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponse(String,String,boolean)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer.deserialize(DataInputPlus,int)",4,21,n/a,7,0,2,4,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer.serialize(TruncateResponse,DataOutputPlus,int)",3,22,n/a,6,0,3,3,1
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer.serializedSize(TruncateResponse,int)",3,19,n/a,6,0,2,1,1
"org.apache.cassandra.db.TruncateResponse.createMessage()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.TruncateVerbHandler.doVerb(MessageIn<Truncation>,int)",14,0,n/a,21,1,2,13,3
"org.apache.cassandra.db.TruncateVerbHandler.respondError(Truncation,MessageIn)",4,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.Truncation.Truncation(String,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.Truncation.createMessage()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.Truncation.toString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.TruncationSerializer.deserialize(DataInputPlus,int)",3,21,n/a,6,0,2,3,1
"org.apache.cassandra.db.TruncationSerializer.serialize(Truncation,DataOutputPlus,int)",2,22,n/a,5,0,3,2,1
"org.apache.cassandra.db.TruncationSerializer.serializedSize(Truncation,int)",2,19,n/a,4,0,2,1,1
"org.apache.cassandra.db.TypeSizes.TypeSizes()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.TypeSizes.encodedUTF8Length(String)",2,3,n/a,16,1,1,12,5
"org.apache.cassandra.db.TypeSizes.sizeof(String)",2,12,n/a,7,0,1,3,1
"org.apache.cassandra.db.TypeSizes.sizeof(UUID)",0,12,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(boolean)",0,12,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(int)",0,32,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(long)",0,15,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeof(short)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofUnsignedVInt(long)",1,9,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofVInt(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofWithLength(ByteBuffer)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofWithShortLength(ByteBuffer)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.TypeSizes.sizeofWithVIntLength(ByteBuffer)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.CurrentDeserializer(CFMetaData,DataInputPlus,SerializationHeader,SerializationHelper)",3,1,n/a,10,0,4,4,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.bytesReadForUnconsumedData()",0,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.clearState()",0,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.compareNextTo(Bound)",2,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.hasNext()",1,0,n/a,7,0,0,4,2
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.nextIsRow()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.nextIsStatic()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.prepareNext()",4,3,n/a,15,1,0,10,3
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.readNext()",6,0,n/a,14,1,0,6,2
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer.skipNext()",4,0,n/a,13,1,0,5,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.AtomIterator(TombstoneTracker)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.clearState()",0,1,n/a,5,0,0,2,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.hasNext()",2,4,n/a,17,2,0,10,5
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.next()",2,2,n/a,8,0,0,5,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.peek()",2,2,n/a,6,0,0,3,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.readAtom()",2,1,n/a,11,1,0,3,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.OldFormatDeserializer(CFMetaData,DataInputPlus,SerializationHelper,DeletionTime,boolean)",3,1,n/a,11,0,5,4,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.TombstoneTracker(DeletionTime)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.clearState()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.formBoundary(LegacyRangeTombstone,LegacyRangeTombstone)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.hasClosingMarkerBefore(LegacyAtom)",4,1,n/a,8,0,1,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.hasOpenTombstones()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.isShadowed(LegacyAtom)",10,1,n/a,11,0,1,5,4
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.openNew(LegacyRangeTombstone)",13,1,n/a,37,1,1,13,4
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker.popClosingMarker()",9,2,n/a,16,0,0,8,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.UnfilteredIterator(DeletionTime)",3,1,n/a,6,0,1,3,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.clearState()",2,1,n/a,6,0,0,3,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.hasNext()",11,4,n/a,29,3,0,10,6
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.next()",2,2,n/a,8,0,0,5,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.peek()",2,1,n/a,6,0,0,3,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.readRow(LegacyAtom)",9,1,n/a,15,1,1,6,4
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.bytesReadForUnconsumedData()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.clearState()",2,0,n/a,7,0,0,4,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.compareNextTo(Bound)",4,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.currentPosition()",1,5,n/a,6,0,0,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.hasNext()",10,4,n/a,33,3,0,16,13
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.isRow(LegacyAtom)",4,2,n/a,7,0,1,4,3
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.isStatic(Unfiltered)",2,2,n/a,4,0,1,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.nextIsRow()",3,1,n/a,6,0,0,3,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.nextIsStatic()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.readNext()",3,0,n/a,9,0,0,6,2
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.setSkipStatic()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.skipNext()",3,0,n/a,7,0,0,4,2
"org.apache.cassandra.db.UnfilteredDeserializer.UnfilteredDeserializer(CFMetaData,DataInputPlus,SerializationHelper)",0,2,n/a,8,0,3,3,1
"org.apache.cassandra.db.UnfilteredDeserializer.bytesReadForUnconsumedData()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.UnfilteredDeserializer.clearState()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.UnfilteredDeserializer.compareNextTo(Bound)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.UnfilteredDeserializer.create(CFMetaData,DataInputPlus,SerializationHeader,SerializationHelper,DeletionTime,boolean)",2,0,n/a,12,0,6,3,2
"org.apache.cassandra.db.UnfilteredDeserializer.hasNext()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.UnfilteredDeserializer.nextIsRow()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.UnfilteredDeserializer.nextIsStatic()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.UnfilteredDeserializer.readNext()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.UnfilteredDeserializer.skipNext()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.UnknownColumnException.UnknownColumnException(CFMetaData,ByteBuffer)",3,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.UnknownColumnException.stringify(ByteBuffer)",2,1,n/a,11,1,1,3,2
"org.apache.cassandra.db.UnknownColumnFamilyException.UnknownColumnFamilyException(String,UUID)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.WindowsFailedSnapshotTracker.deleteOldSnapshots()",25,4,n/a,48,5,0,21,8
"org.apache.cassandra.db.WindowsFailedSnapshotTracker.handleFailedSnapshot(File)",4,3,n/a,7,0,1,4,1
"org.apache.cassandra.db.WindowsFailedSnapshotTracker.resetForTests()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.db.WriteResponse.Serializer.deserialize(DataInputPlus,int)",0,21,n/a,4,0,2,1,1
"org.apache.cassandra.db.WriteResponse.Serializer.serialize(WriteResponse,DataOutputPlus,int)",0,22,n/a,3,0,3,0,1
"org.apache.cassandra.db.WriteResponse.Serializer.serializedSize(WriteResponse,int)",0,19,n/a,4,0,2,1,1
"org.apache.cassandra.db.WriteResponse.WriteResponse()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.db.WriteResponse.createMessage()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.AbstractSSTableIterator(SSTableReader,FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean)",22,0,n/a,77,4,6,33,16
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.IndexState(Reader,ClusteringComparator,RowIndexEntry,boolean)",3,0,n/a,9,0,4,6,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.blocksCount()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.columnOffset(int)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.currentBlockIdx()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.currentIndex()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.findBlockIndex(Bound,int)",2,0,n/a,10,0,2,5,3
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.index(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.isDone()",1,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.isPastCurrentBlock()",3,1,n/a,7,0,0,3,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.setToBlock(int)",6,0,n/a,12,1,1,6,4
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState.updateBlock()",9,0,n/a,24,2,0,11,4
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.Reader(FileDataInput,boolean,boolean)",1,0,n/a,10,0,3,6,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.close()",1,1,n/a,5,0,0,2,3
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.createDeserializer()",1,2,n/a,5,0,0,2,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.getAndClearOpenMarker()",0,0,n/a,6,0,0,3,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.hasNext()",7,1,n/a,25,2,0,10,4
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.hasNextInternal()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.init()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.next()",6,1,n/a,20,2,0,7,3
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.nextInternal()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.seekToPosition(long)",3,3,n/a,13,1,1,4,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.setForSlice(Slice)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader.updateOpenMarker(RangeTombstoneMarker)",2,0,n/a,5,0,1,1,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.close()",4,0,n/a,12,1,0,4,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.closeInternal()",1,4,n/a,10,0,0,5,3
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.columns()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.createReader(RowIndexEntry,FileDataInput,boolean,boolean)",n/a,2,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.hasNext()",1,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.next()",1,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.partitionKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.partitionLevelDeletion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.readStaticRow(SSTableReader,FileDataInput,SerializationHelper,Columns,boolean,UnfilteredDeserializer)",12,1,n/a,42,2,6,14,9
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.slice(Slice)",7,0,n/a,23,2,1,10,4
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.staticRow()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.stats()",4,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader.ForwardIndexedReader(RowIndexEntry,FileDataInput,boolean,boolean)",3,1,n/a,6,0,4,3,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader.computeNext()",9,1,n/a,18,0,0,7,7
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader.init()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader.setForSlice(Slice)",16,1,n/a,50,1,1,20,10
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.ForwardReader(FileDataInput,boolean,boolean)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.computeNext()",5,1,n/a,12,0,0,6,4
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.handlePreSliceData()",7,1,n/a,26,1,0,9,5
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.hasNextInternal()",4,1,n/a,28,2,0,18,7
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.init()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.nextInternal()",2,0,n/a,8,0,0,5,2
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader.setForSlice(Slice)",3,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.columniterator.SSTableIterator.SSTableIterator(SSTableReader,DecoratedKey,ColumnFilter,boolean)",2,1,n/a,4,0,4,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.SSTableIterator(SSTableReader,FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean)",1,2,n/a,9,0,6,1,1
"org.apache.cassandra.db.columniterator.SSTableIterator.createReader(RowIndexEntry,FileDataInput,boolean,boolean)",3,0,n/a,6,0,4,1,2
"org.apache.cassandra.db.columniterator.SSTableIterator.isReverseOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData.ReusablePartitionData(CFMetaData,DecoratedKey,PartitionColumns,int)",1,1,n/a,10,0,4,4,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData.add(Unfiltered)",3,3,n/a,7,0,1,3,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData.build()",3,1,n/a,7,0,0,3,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData.reset()",3,1,n/a,6,0,0,3,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.ReverseIndexedReader(RowIndexEntry,FileDataInput,boolean,boolean)",2,1,n/a,5,0,4,2,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.hasNextInternal()",6,1,n/a,18,0,0,9,4
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.init()",0,0,n/a,5,0,0,0,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.readCurrentBlock(boolean)",11,2,n/a,27,1,1,10,6
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.setForSlice(Slice)",17,1,n/a,36,1,1,20,6
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader.stopReadingDisk()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.ReverseReader(FileDataInput,boolean,boolean)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.createBuffer(int)",13,2,n/a,28,2,1,8,4
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.hasNextInternal()",2,1,n/a,7,0,0,3,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.init()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.loadFromDisk(Bound,Bound,boolean)",23,2,n/a,45,2,3,22,17
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.nextInternal()",3,0,n/a,6,0,0,3,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.setForSlice(Slice)",4,1,n/a,13,1,1,4,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.setIterator(Slice)",3,3,n/a,5,0,1,2,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader.stopReadingDisk()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.SSTableReversedIterator(SSTableReader,DecoratedKey,ColumnFilter,boolean)",2,1,n/a,4,0,4,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.SSTableReversedIterator(SSTableReader,FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean)",1,2,n/a,9,0,6,1,1
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.createReader(RowIndexEntry,FileDataInput,boolean,boolean)",3,0,n/a,6,0,4,1,2
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.isReverseOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.AbstractCommitLogService(CommitLog,String,long)",0,0,n/a,12,0,3,3,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.awaitTermination()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.finishWriteFor(Allocation)",2,0,n/a,8,0,1,2,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.getCompletedTasks()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.getPendingTasks()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.maybeWaitForSync(Allocation)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.requestExtraSync()",2,0,n/a,9,0,0,3,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.restartUnsafe()",6,0,n/a,21,2,0,8,4
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.shutdown()",1,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.commitlog.AbstractCommitLogService.start()",18,1,n/a,77,6,0,43,13
"org.apache.cassandra.db.commitlog.BatchCommitLogService.BatchCommitLogService(CommitLog)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.BatchCommitLogService.maybeWaitForSync(Allocation)",4,0,n/a,8,0,1,4,1
"org.apache.cassandra.db.commitlog.CommitLog.CommitLog(String,CommitLogArchiver)",9,1,n/a,17,0,2,10,3
"org.apache.cassandra.db.commitlog.CommitLog.activeSegments()",2,14,n/a,9,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.add(Mutation)",22,15,n/a,40,1,1,19,3
"org.apache.cassandra.db.commitlog.CommitLog.construct()",8,1,n/a,14,1,0,6,2
"org.apache.cassandra.db.commitlog.CommitLog.discardCompletedSegments(UUID,ReplayPosition)",13,6,n/a,34,2,2,11,5
"org.apache.cassandra.db.commitlog.CommitLog.forceRecycleAllSegments()",2,1,n/a,7,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.forceRecycleAllSegments(Iterable<UUID>)",1,3,n/a,7,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getActiveContentSize()",2,0,n/a,8,0,0,4,2
"org.apache.cassandra.db.commitlog.CommitLog.getActiveOnDiskSize()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getActiveSegmentCompressionRatios()",6,0,n/a,8,0,0,4,2
"org.apache.cassandra.db.commitlog.CommitLog.getActiveSegmentNames()",4,0,n/a,7,0,0,4,2
"org.apache.cassandra.db.commitlog.CommitLog.getArchiveCommand()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getArchivingSegmentNames()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getContext()",2,6,n/a,8,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getRestoreCommand()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getRestoreDirectories()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getRestorePointInTime()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.getRestorePrecision()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.handleCommitError(String,Throwable)",9,4,n/a,21,1,2,13,5
"org.apache.cassandra.db.commitlog.CommitLog.recover()",26,2,n/a,7,2,0,22,6
"org.apache.cassandra.db.commitlog.CommitLog.recover(File...)",3,3,n/a,12,0,1,3,1
"org.apache.cassandra.db.commitlog.CommitLog.recover(String)",4,0,n/a,9,0,1,3,1
"org.apache.cassandra.db.commitlog.CommitLog.requestExtraSync()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLog.resetUnsafe(boolean)",2,18,n/a,9,0,1,2,1
"org.apache.cassandra.db.commitlog.CommitLog.restartUnsafe()",3,3,n/a,23,1,0,5,2
"org.apache.cassandra.db.commitlog.CommitLog.shutdownBlocking()",4,2,n/a,10,0,0,4,1
"org.apache.cassandra.db.commitlog.CommitLog.start()",2,1,n/a,6,0,0,3,1
"org.apache.cassandra.db.commitlog.CommitLog.stopUnsafe(boolean)",4,3,n/a,16,1,1,5,2
"org.apache.cassandra.db.commitlog.CommitLog.sync(boolean)",3,1,n/a,13,1,1,5,4
"org.apache.cassandra.db.commitlog.CommitLogArchiver.CommitLogArchiver(String,String,String,long,TimeUnit)",2,2,n/a,10,0,5,6,2
"org.apache.cassandra.db.commitlog.CommitLogArchiver.construct()",24,0,n/a,49,6,0,23,10
"org.apache.cassandra.db.commitlog.CommitLogArchiver.disabled()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogArchiver.exec(String)",4,3,n/a,6,0,1,3,1
"org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeArchive(CommitLogSegment)",11,0,n/a,7,2,1,7,2
"org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeArchive(String,String)",7,0,n/a,6,2,2,6,2
"org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeRestoreArchive()",34,0,n/a,57,4,0,34,20
"org.apache.cassandra.db.commitlog.CommitLogArchiver.maybeWaitForArchiving(String)",6,0,n/a,24,2,1,11,5
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.CommitLogDescriptor(int,long,ParameterizedClass)",0,9,n/a,6,0,3,3,1
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.CommitLogDescriptor(long,ParameterizedClass)",1,5,n/a,4,0,2,1,1
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.constructParametersString(CommitLogDescriptor)",4,1,n/a,11,1,1,6,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.equals(CommitLogDescriptor)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.equals(Object)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.equalsIgnoringCompression(CommitLogDescriptor)",0,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.fileName()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.fromFileName(String)",11,3,n/a,10,0,1,7,3
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.fromHeader(File)",5,0,n/a,16,1,1,5,3
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.getMessagingVersion()",1,3,n/a,18,1,0,13,7
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.isValid(String)",2,5,n/a,8,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.parseCompression(Map<?, ?>)",3,1,n/a,11,0,1,7,3
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.readHeader(DataInput)",16,2,n/a,24,1,1,17,3
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.toString()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.commitlog.CommitLogDescriptor.writeHeader(ByteBuffer,CommitLogDescriptor)",16,4,n/a,22,1,2,17,3
"org.apache.cassandra.db.commitlog.CommitLogMBean.getActiveContentSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getActiveOnDiskSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getActiveSegmentCompressionRatios()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getActiveSegmentNames()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getArchiveCommand()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getArchivingSegmentNames()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getRestoreCommand()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getRestoreDirectories()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getRestorePointInTime()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.getRestorePrecision()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogMBean.recover(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogReplayer.AlwaysReplayFilter.filter(Mutation)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.AlwaysReplayFilter.includes(CFMetaData)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayException.CommitLogReplayException(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayException.CommitLogReplayException(String,Throwable)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayer(CommitLog,ReplayPosition,Map<UUID, ReplayPosition>,ReplayFilter)",5,1,n/a,15,0,4,11,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CustomReplayFilter.CustomReplayFilter(Multimap<String, String>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CustomReplayFilter.filter(Mutation)",8,1,n/a,4,2,1,5,2
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CustomReplayFilter.includes(CFMetaData)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogReplayer.ReplayFilter.create()",15,1,n/a,21,1,0,15,6
"org.apache.cassandra.db.commitlog.CommitLogReplayer.ReplayFilter.filter(Mutation)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogReplayer.ReplayFilter.includes(CFMetaData)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogReplayer.blockForWrites()",19,0,n/a,22,1,0,14,5
"org.apache.cassandra.db.commitlog.CommitLogReplayer.construct(CommitLog)",19,0,n/a,42,4,1,18,5
"org.apache.cassandra.db.commitlog.CommitLogReplayer.handleReplayError(boolean,String,Object...)",7,9,n/a,16,1,3,9,4
"org.apache.cassandra.db.commitlog.CommitLogReplayer.logAndCheckIfShouldSkip(File,CommitLogDescriptor)",4,2,n/a,14,1,2,5,2
"org.apache.cassandra.db.commitlog.CommitLogReplayer.pointInTimeExceeded(Mutation)",3,1,n/a,10,1,1,5,3
"org.apache.cassandra.db.commitlog.CommitLogReplayer.readSyncMarker(CommitLogDescriptor,int,RandomAccessReader,boolean)",15,1,n/a,33,2,4,17,7
"org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(File,boolean)",36,1,n/a,109,4,2,63,22
"org.apache.cassandra.db.commitlog.CommitLogReplayer.recover(File[])",1,0,n/a,6,0,1,5,2
"org.apache.cassandra.db.commitlog.CommitLogReplayer.replayMutation(byte[],int,long,CommitLogDescriptor)",50,1,n/a,35,4,4,45,17
"org.apache.cassandra.db.commitlog.CommitLogReplayer.replaySyncSection(FileDataInput,int,CommitLogDescriptor,String,boolean)",25,2,n/a,80,3,5,39,13
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.Allocation(CommitLogSegment,Group,int,ByteBuffer)",0,1,n/a,7,0,4,4,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.awaitDiskSync(Timer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.getBuffer()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.getReplayPosition()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.getSegment()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation.markWritten()",1,1,n/a,6,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.CommitLogSegment(CommitLog)",13,0,n/a,27,1,1,13,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.CommitLogSegmentFileComparator.compare(File,File)",5,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.allocate(Mutation,int)",9,0,n/a,25,2,2,10,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.allocate(int)",2,2,n/a,16,2,1,8,4
"org.apache.cassandra.db.commitlog.CommitLogSegment.close()",2,1,n/a,9,0,0,3,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.contains(ReplayPosition)",0,0,n/a,10,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.contentSize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.createBuffer(CommitLog)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogSegment.createSegment(CommitLog)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.dirtyString()",8,0,n/a,11,1,0,5,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.discard(boolean)",4,0,n/a,10,0,1,4,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.discardUnusedTail()",5,2,n/a,30,3,0,11,6
"org.apache.cassandra.db.commitlog.CommitLogSegment.ensureAtleast(ConcurrentMap<UUID, AtomicInteger>,UUID,int)",5,2,n/a,18,1,3,11,6
"org.apache.cassandra.db.commitlog.CommitLogSegment.getContext()",2,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.getDirtyCFIDs()",13,1,n/a,18,1,0,10,6
"org.apache.cassandra.db.commitlog.CommitLogSegment.getName()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.getNextId()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.getPath()",1,3,n/a,7,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.internalClose()",3,1,n/a,15,1,0,4,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.isStillAllocating()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.isUnused()",3,0,n/a,12,0,0,4,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.markClean(UUID,ReplayPosition)",3,0,n/a,17,0,2,6,4
"org.apache.cassandra.db.commitlog.CommitLogSegment.markClean(UUID,int)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.markDirty(Mutation,int)",3,1,n/a,5,0,2,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegment.onDiskSize()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogSegment.removeCleanFromDirty()",12,2,n/a,19,2,0,11,5
"org.apache.cassandra.db.commitlog.CommitLogSegment.sync()",8,1,n/a,39,1,0,17,5
"org.apache.cassandra.db.commitlog.CommitLogSegment.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.waitForFinalSync()",3,0,n/a,16,2,0,6,3
"org.apache.cassandra.db.commitlog.CommitLogSegment.waitForModifications()",1,1,n/a,8,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegment.waitForSync(int,Timer)",5,1,n/a,13,1,2,5,4
"org.apache.cassandra.db.commitlog.CommitLogSegment.write(int,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.commitlog.CommitLogSegment.writeSyncMarker(ByteBuffer,int,int,int)",7,0,n/a,9,0,4,6,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.CommitLogSegmentManager(CommitLog)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.addSize(long)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.advanceAllocatingFrom(CommitLogSegment)",11,3,n/a,58,3,1,23,9
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.allocate(Mutation,int)",3,0,n/a,18,1,2,6,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.allocatingFrom()",1,1,n/a,11,1,0,5,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.awaitManagementTasksCompletion()",3,1,n/a,10,0,0,3,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.awaitTermination()",4,1,n/a,12,0,0,6,3
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.closeAndDeleteSegmentUnsafe(CommitLogSegment,boolean)",1,2,n/a,11,1,2,2,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.discardSegment(CommitLogSegment,boolean)",4,1,n/a,4,2,2,3,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.enableReserveSegmentCreation()",1,0,n/a,9,0,0,2,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.flushDataFrom(List<CommitLogSegment>,boolean)",19,2,n/a,36,3,2,15,7
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.forceRecycleAll(Iterable<UUID>)",19,0,n/a,47,1,1,23,10
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.getActiveSegments()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.manages(String)",3,0,n/a,11,0,1,4,3
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.onDiskSize()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.recycleSegment(CommitLogSegment)",5,1,n/a,18,1,1,4,2
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.recycleSegment(File)",2,1,n/a,12,0,1,2,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.shutdown()",1,1,n/a,8,0,0,2,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.start()",21,0,n/a,56,7,0,32,13
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.stopUnsafe(boolean)",12,0,n/a,29,1,1,17,4
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.unusedCapacity()",3,1,n/a,7,0,0,4,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager.wakeManager()",2,3,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CompressedSegment.CompressedSegment(CommitLog)",8,0,n/a,17,1,1,6,2
"org.apache.cassandra.db.commitlog.CompressedSegment.allocate(int)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.CompressedSegment.createBuffer(CommitLog)",5,0,n/a,11,1,1,5,2
"org.apache.cassandra.db.commitlog.CompressedSegment.internalClose()",4,0,n/a,9,0,0,4,2
"org.apache.cassandra.db.commitlog.CompressedSegment.onDiskSize()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.CompressedSegment.shutdown()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.CompressedSegment.write(int,int)",31,0,n/a,38,2,2,23,6
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.MemoryMappedSegment(CommitLog)",4,0,n/a,14,0,1,4,1
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.createBuffer(CommitLog)",9,0,n/a,24,2,1,7,3
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.internalClose()",3,0,n/a,7,0,0,3,2
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.onDiskSize()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.commitlog.MemoryMappedSegment.write(int,int)",9,0,n/a,22,1,2,8,3
"org.apache.cassandra.db.commitlog.PeriodicCommitLogService.PeriodicCommitLogService(CommitLog)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.PeriodicCommitLogService.maybeWaitForSync(Allocation)",10,0,n/a,18,2,1,9,4
"org.apache.cassandra.db.commitlog.PeriodicCommitLogService.waitForSyncToCatchUp(long)",0,3,n/a,7,0,1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPosition(long,int)",0,5,n/a,6,0,2,3,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer.deserialize(DataInputPlus)",3,11,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer.serialize(ReplayPosition,DataOutputPlus)",2,11,n/a,5,0,2,2,1
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer.serializedSize(ReplayPosition)",2,9,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.clone()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.compareTo(ReplayPosition)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.db.commitlog.ReplayPosition.equals(Object)",2,0,n/a,9,0,1,8,5
"org.apache.cassandra.db.commitlog.ReplayPosition.getReplayPosition(Iterable<? extends SSTableReader>)",6,2,n/a,4,2,1,6,2
"org.apache.cassandra.db.commitlog.ReplayPosition.hashCode()",0,0,n/a,7,0,0,3,1
"org.apache.cassandra.db.commitlog.ReplayPosition.toString()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.AbstractCompactionStrategy(ColumnFamilyStore,Map<String, String>)",13,0,n/a,27,1,2,18,6
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.ScannerList.ScannerList(List<ISSTableScanner>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.ScannerList.close()",4,1,n/a,21,2,0,10,5
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.addSSTable(SSTableReader)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.createSSTableMultiWriter(Descriptor,long,long,MetadataCollector,SerializationHeader,LifecycleTransaction)",1,0,n/a,4,0,6,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.disable()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.enable()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.filterSuspectSSTables(Iterable<SSTableReader>)",3,0,n/a,4,2,1,2,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getCompactionTask(LifecycleTransaction,int,long)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getDirectories()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getEstimatedRemainingTasks()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getMaxSSTableBytes()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getMaximalTask(int,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getMemtableReservedSize()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getName()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getNextBackgroundTask(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getScanners(Collection<SSTableReader>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getScanners(Collection<SSTableReader>,Range<Token>)",8,1,n/a,30,2,2,10,4
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.getUserDefinedTask(Collection<SSTableReader>,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.groupSSTablesForAntiCompaction(Collection<SSTableReader>)",10,0,n/a,26,2,1,13,4
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.isAffectedByMeteredFlusher()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.pause()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.removeSSTable(SSTableReader)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.replaceFlushed(Memtable,Collection<SSTableReader>)",4,0,n/a,12,0,2,3,3
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.replaceSSTables(Collection<SSTableReader>,Collection<SSTableReader>)",2,0,n/a,7,0,2,4,3
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.resume()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shouldBeEnabled()",2,1,n/a,5,0,0,2,2
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shouldDefragment()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.shutdown()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.startup()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.validateOptions(Map<String, String>)",28,1,n/a,56,3,1,29,13
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.worthDroppingTombstones(SSTableReader,int)",24,0,n/a,54,2,2,24,9
"org.apache.cassandra.db.compaction.AbstractCompactionTask.AbstractCompactionTask(ColumnFamilyStore,LifecycleTransaction)",4,0,n/a,15,0,2,7,2
"org.apache.cassandra.db.compaction.AbstractCompactionTask.execute(CompactionExecutorStatsCollector)",2,1,n/a,14,1,1,3,1
"org.apache.cassandra.db.compaction.AbstractCompactionTask.executeInternal(CompactionExecutorStatsCollector)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.compaction.AbstractCompactionTask.setCompactionType(OperationType)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.compaction.AbstractCompactionTask.setUserDefined(boolean)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.compaction.AbstractCompactionTask.toString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionController.CompactionController(ColumnFamilyStore,Set<SSTableReader>,int)",3,15,n/a,9,0,3,6,2
"org.apache.cassandra.db.compaction.CompactionController.CompactionController(ColumnFamilyStore,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.compaction.CompactionController.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionController.compactingRepaired()",2,1,n/a,4,0,0,1,2
"org.apache.cassandra.db.compaction.CompactionController.getColumnFamily()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionController.getFullyExpiredSSTables()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionController.getFullyExpiredSSTables(ColumnFamilyStore,Iterable<SSTableReader>,Iterable<SSTableReader>,int)",22,1,n/a,59,2,4,21,10
"org.apache.cassandra.db.compaction.CompactionController.getKeyspace()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionController.invalidateCachedPartition(DecoratedKey)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionController.maxPurgeableTimestamp(DecoratedKey)",11,0,n/a,23,1,1,10,6
"org.apache.cassandra.db.compaction.CompactionController.maybeRefreshOverlaps()",2,1,n/a,11,2,0,4,3
"org.apache.cassandra.db.compaction.CompactionController.refreshOverlaps()",6,2,n/a,10,0,0,6,3
"org.apache.cassandra.db.compaction.CompactionHistoryTabularData.from(UntypedResultSet)",12,1,n/a,18,1,1,11,2
"org.apache.cassandra.db.compaction.CompactionInfo.CompactionInfo(CFMetaData,OperationType,long,long,String,UUID)",0,5,n/a,9,0,6,6,1
"org.apache.cassandra.db.compaction.CompactionInfo.CompactionInfo(CFMetaData,OperationType,long,long,UUID)",1,0,n/a,4,0,5,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.CompactionInfo(OperationType,long,long,String,UUID)",1,0,n/a,4,0,5,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.finished()",1,1,n/a,9,0,0,3,2
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.getCompactionInfo()",n/a,5,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.isStopRequested()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.started()",3,1,n/a,8,0,0,2,1
"org.apache.cassandra.db.compaction.CompactionInfo.Holder.stop()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.asMap()",18,0,n/a,13,0,0,10,3
"org.apache.cassandra.db.compaction.CompactionInfo.compactionId()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.forProgress(long,long)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getCFMetaData()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getColumnFamily()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getCompleted()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getId()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getKeyspace()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getTaskType()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.getTotal()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionInfo.toString()",21,0,n/a,8,0,0,5,1
"org.apache.cassandra.db.compaction.CompactionInterruptedException.CompactionInterruptedException(CompactionInfo)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.CompactionIterator(OperationType,List<ISSTableScanner>,CompactionController,int,UUID)",1,16,n/a,4,0,5,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.CompactionIterator(OperationType,List<ISSTableScanner>,CompactionController,int,UUID,CompactionMetrics)",10,1,n/a,23,0,6,17,4
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.Purger(boolean,CompactionController)",4,1,n/a,5,0,2,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.getMaxPurgeableTimestamp()",1,1,n/a,14,1,0,4,2
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.onEmptyPartitionPostPurge(DecoratedKey)",1,1,n/a,6,0,1,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.onNewPartition(DecoratedKey)",0,1,n/a,6,0,1,2,1
"org.apache.cassandra.db.compaction.CompactionIterator.Purger.updateProgress()",1,3,n/a,6,0,0,2,2
"org.apache.cassandra.db.compaction.CompactionIterator.close()",2,0,n/a,12,1,0,4,2
"org.apache.cassandra.db.compaction.CompactionIterator.getCompactionInfo()",1,1,n/a,8,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.getMergedRowCounts()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.hasNext()",1,16,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.isForThrift()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.listener()",14,1,n/a,3,4,0,21,7
"org.apache.cassandra.db.compaction.CompactionIterator.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.next()",1,17,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.toString()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator.updateBytesRead()",1,1,n/a,7,0,0,4,2
"org.apache.cassandra.db.compaction.CompactionIterator.updateCounterFor(int)",0,1,n/a,5,0,1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.AllSSTableOpStatus.AllSSTableOpStatus(int)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.BackgroundCompactionCandidate.BackgroundCompactionCandidate(ColumnFamilyStore)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.BackgroundCompactionCandidate.run()",12,0,n/a,25,2,0,13,3
"org.apache.cassandra.db.compaction.CompactionManager.CacheCleanupExecutor.CacheCleanupExecutor()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Bounded.Bounded(ColumnFamilyStore,Collection<Range<Token>>,int)",4,1,n/a,5,2,3,3,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Bounded.cleanup(UnfilteredRowIterator)",0,1,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Bounded.getScanner(SSTableReader,RateLimiter)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.CleanupStrategy(Collection<Range<Token>>,int)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Full.Full(ColumnFamilyStore,Collection<Range<Token>>,int)",1,1,n/a,5,0,3,2,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Full.cleanup(UnfilteredRowIterator)",6,1,n/a,9,0,1,5,2
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Full.getScanner(SSTableReader,RateLimiter)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.cleanup(UnfilteredRowIterator)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.get(ColumnFamilyStore,Collection<Range<Token>>,int)",3,1,n/a,6,0,3,1,2
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.getScanner(SSTableReader,RateLimiter)",n/a,1,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor(int,String)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.CompactionExecutor(int,int,String,BlockingQueue<Runnable>)",2,2,n/a,4,0,4,1,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.afterExecute(Runnable,Throwable)",10,0,n/a,26,2,2,11,6
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor.beforeExecute(Thread,Runnable)",2,0,n/a,6,0,2,2,1
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutorStatsCollector.beginCompaction(Holder)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutorStatsCollector.finishCompaction(Holder)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManager.OneSSTableOperation.execute(LifecycleTransaction)",n/a,1,4,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManager.OneSSTableOperation.filterSSTables(LifecycleTransaction)",n/a,1,4,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionController.ValidationCompactionController(ColumnFamilyStore,int)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionController.maxPurgeableTimestamp(DecoratedKey)",0,0,n/a,16,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionIterator.ValidationCompactionIterator(List<ISSTableScanner>,ValidationCompactionController,int,CompactionMetrics)",2,1,n/a,4,0,4,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationExecutor.ValidationExecutor()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.antiCompactGroup(ColumnFamilyStore,Collection<Range<Token>>,LifecycleTransaction,long)",57,1,n/a,82,4,4,44,8
"org.apache.cassandra.db.compaction.CompactionManager.createWriter(ColumnFamilyStore,File,long,long,SSTableReader,LifecycleTransaction)",5,1,n/a,16,0,6,2,1
"org.apache.cassandra.db.compaction.CompactionManager.createWriterForAntiCompaction(ColumnFamilyStore,File,int,long,Collection<SSTableReader>,LifecycleTransaction)",8,2,n/a,30,2,6,9,4
"org.apache.cassandra.db.compaction.CompactionManager.disableAutoCompaction()",4,37,n/a,9,1,0,3,3
"org.apache.cassandra.db.compaction.CompactionManager.doAntiCompaction(ColumnFamilyStore,Collection<Range<Token>>,LifecycleTransaction,long)",11,1,n/a,27,2,4,9,2
"org.apache.cassandra.db.compaction.CompactionManager.doCleanupOne(ColumnFamilyStore,LifecycleTransaction,CleanupStrategy,Collection<Range<Token>>,boolean)",53,1,n/a,68,3,5,41,12
"org.apache.cassandra.db.compaction.CompactionManager.doValidationCompaction(ColumnFamilyStore,Validator)",58,1,n/a,120,4,2,53,16
"org.apache.cassandra.db.compaction.CompactionManager.finishCompactionsAndShutdown(long,TimeUnit)",2,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.compaction.CompactionManager.forceShutdown()",7,1,n/a,29,2,0,8,4
"org.apache.cassandra.db.compaction.CompactionManager.forceUserDefinedCompaction(String)",22,0,n/a,23,2,1,14,4
"org.apache.cassandra.db.compaction.CompactionManager.getActiveCompactions()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getCompactionHistory()",2,0,n/a,11,1,0,3,2
"org.apache.cassandra.db.compaction.CompactionManager.getCompactionSummary()",6,0,n/a,8,0,0,5,2
"org.apache.cassandra.db.compaction.CompactionManager.getCompactions()",6,0,n/a,8,0,0,5,2
"org.apache.cassandra.db.compaction.CompactionManager.getCompletedTasks()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getCoreCompactorThreads()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getCoreValidationThreads()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getDefaultGcBefore(ColumnFamilyStore,int)",2,7,n/a,6,0,2,1,2
"org.apache.cassandra.db.compaction.CompactionManager.getMaximumCompactorThreads()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getMaximumValidatorThreads()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getPendingTasks()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getRateLimiter()",4,1,n/a,17,0,0,6,4
"org.apache.cassandra.db.compaction.CompactionManager.getTotalBytesCompacted()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.getTotalCompactionsCompleted()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.interruptCompactionFor(Iterable<CFMetaData>,boolean)",6,4,n/a,23,1,2,7,5
"org.apache.cassandra.db.compaction.CompactionManager.interruptCompactionForCFs(Iterable<ColumnFamilyStore>,boolean)",3,3,n/a,7,0,2,4,2
"org.apache.cassandra.db.compaction.CompactionManager.isCompacting(Iterable<ColumnFamilyStore>)",3,1,n/a,7,0,1,4,3
"org.apache.cassandra.db.compaction.CompactionManager.lookupSSTable(ColumnFamilyStore,Descriptor)",2,1,n/a,11,1,2,4,3
"org.apache.cassandra.db.compaction.CompactionManager.needsCleanup(SSTableReader,Collection<Range<Token>>)",14,1,n/a,45,2,2,20,7
"org.apache.cassandra.db.compaction.CompactionManager.parallelAllSSTableOperation(ColumnFamilyStore,OneSSTableOperation,OperationType)",22,4,n/a,6,4,3,22,5
"org.apache.cassandra.db.compaction.CompactionManager.performAnticompaction(ColumnFamilyStore,Collection<Range<Token>>,Refs<SSTableReader>,LifecycleTransaction,long)",42,1,n/a,71,4,5,38,7
"org.apache.cassandra.db.compaction.CompactionManager.performCleanup(ColumnFamilyStore)",15,2,n/a,6,2,1,13,2
"org.apache.cassandra.db.compaction.CompactionManager.performMaximal(ColumnFamilyStore,boolean)",4,10,n/a,4,0,2,1,1
"org.apache.cassandra.db.compaction.CompactionManager.performSSTableRewrite(ColumnFamilyStore,boolean)",17,0,n/a,8,4,2,13,4
"org.apache.cassandra.db.compaction.CompactionManager.performScrub(ColumnFamilyStore,boolean,boolean)",1,6,n/a,5,0,3,1,1
"org.apache.cassandra.db.compaction.CompactionManager.performScrub(ColumnFamilyStore,boolean,boolean,boolean)",4,2,n/a,5,2,4,3,1
"org.apache.cassandra.db.compaction.CompactionManager.performVerify(ColumnFamilyStore,boolean)",6,0,n/a,5,2,2,4,1
"org.apache.cassandra.db.compaction.CompactionManager.scrubOne(ColumnFamilyStore,LifecycleTransaction,boolean,boolean,boolean)",5,1,n/a,15,1,5,7,2
"org.apache.cassandra.db.compaction.CompactionManager.setCoreCompactorThreads(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.setCoreValidationThreads(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.setMaximumCompactorThreads(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.setMaximumValidatorThreads(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionManager.stopCompaction(String)",5,0,n/a,9,1,1,4,3
"org.apache.cassandra.db.compaction.CompactionManager.stopCompactionById(String)",6,0,n/a,9,1,1,4,4
"org.apache.cassandra.db.compaction.CompactionManager.submitAntiCompaction(ColumnFamilyStore,Collection<Range<Token>>,Refs<SSTableReader>,long)",17,1,n/a,18,3,4,19,6
"org.apache.cassandra.db.compaction.CompactionManager.submitBackground(ColumnFamilyStore)",21,1,n/a,34,1,1,15,5
"org.apache.cassandra.db.compaction.CompactionManager.submitCacheWrite(Writer)",14,1,n/a,24,4,1,14,3
"org.apache.cassandra.db.compaction.CompactionManager.submitIndexBuild(SecondaryIndexBuilder)",7,3,n/a,12,3,1,9,2
"org.apache.cassandra.db.compaction.CompactionManager.submitMaximal(ColumnFamilyStore,int,boolean)",11,2,n/a,4,3,3,12,4
"org.apache.cassandra.db.compaction.CompactionManager.submitUserDefined(ColumnFamilyStore,Collection<Descriptor>,int)",15,3,n/a,29,4,3,16,6
"org.apache.cassandra.db.compaction.CompactionManager.submitValidation(ColumnFamilyStore,Validator)",4,1,n/a,14,3,2,7,2
"org.apache.cassandra.db.compaction.CompactionManager.submitViewBuilder(ViewBuilder)",7,2,n/a,12,3,1,9,2
"org.apache.cassandra.db.compaction.CompactionManager.verifyOne(ColumnFamilyStore,SSTableReader,boolean)",5,1,n/a,15,1,3,7,2
"org.apache.cassandra.db.compaction.CompactionManager.waitForCessation(Iterable<ColumnFamilyStore>)",5,2,n/a,12,1,1,6,3
"org.apache.cassandra.db.compaction.CompactionManagerMBean.forceUserDefinedCompaction(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.getCompactionHistory()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.getCompactionSummary()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.getCompactions()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.getCoreCompactorThreads()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.getCoreValidationThreads()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.getMaximumCompactorThreads()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.getMaximumValidatorThreads()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.setCoreCompactorThreads(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.setCoreValidationThreads(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.setMaximumCompactorThreads(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.setMaximumValidatorThreads(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.stopCompaction(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionManagerMBean.stopCompactionById(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.CompactionStrategyManager.CompactionStrategyManager(ColumnFamilyStore)",5,0,n/a,9,0,1,6,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.createSSTableMultiWriter(Descriptor,long,long,MetadataCollector,SerializationHeader,LifecycleTransaction)",2,0,n/a,11,1,6,3,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.disable()",2,2,n/a,9,0,0,5,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.enable()",2,2,n/a,9,0,0,5,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getCompactionParams()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getCompactionStrategyFor(SSTableReader)",1,3,n/a,14,0,1,3,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getCompactionTask(LifecycleTransaction,int,long)",5,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getDirectories()",4,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getEstimatedRemainingTasks()",2,0,n/a,7,0,0,4,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getMaxSSTableBytes()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getMaximalTasks(int,boolean)",7,0,n/a,19,3,2,14,5
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getName()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getNextBackgroundTask(int)",8,0,n/a,26,1,1,12,5
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getSSTableCountPerLevel()",4,0,n/a,13,1,0,8,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getScanners(Collection<SSTableReader>)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getScanners(Collection<SSTableReader>,Collection<Range<Token>>)",14,1,n/a,33,2,2,14,6
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getStrategies()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getUnleveledSSTables()",2,0,n/a,11,1,0,6,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.getUserDefinedTask(Collection<SSTableReader>,int)",4,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.groupSSTablesForAntiCompaction(Collection<SSTableReader>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.handleNotification(INotification,Object)",27,0,n/a,78,3,2,40,18
"org.apache.cassandra.db.compaction.CompactionStrategyManager.isEnabled()",0,1,n/a,4,0,0,1,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.maybeReload(CFMetaData)",2,1,n/a,7,0,1,3,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.onlyPurgeRepairedTombstones()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.pause()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.reload(CFMetaData)",6,2,n/a,17,0,1,7,4
"org.apache.cassandra.db.compaction.CompactionStrategyManager.replaceFlushed(Memtable,Collection<SSTableReader>)",4,0,n/a,6,0,2,3,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.resume()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.setNewLocalCompactionStrategy(CompactionParams)",6,0,n/a,10,0,1,6,2
"org.apache.cassandra.db.compaction.CompactionStrategyManager.setStrategy(CompactionParams)",4,2,n/a,10,0,1,7,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.shouldBeEnabled()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.shouldDefragment()",4,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.shutdown()",2,0,n/a,6,0,0,3,1
"org.apache.cassandra.db.compaction.CompactionStrategyManager.startup()",5,2,n/a,10,1,0,5,3
"org.apache.cassandra.db.compaction.CompactionStrategyManager.sumArrays(int[],int[])",1,2,n/a,14,1,2,10,5
"org.apache.cassandra.db.compaction.CompactionTask.CompactionTask(ColumnFamilyStore,LifecycleTransaction,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.compaction.CompactionTask.CompactionTask(ColumnFamilyStore,LifecycleTransaction,int,boolean,boolean)",1,1,n/a,7,0,5,4,1
"org.apache.cassandra.db.compaction.CompactionTask.addToTotalBytesCompacted(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.checkAvailableDiskSpace(long,long)",5,1,n/a,8,1,2,3,3
"org.apache.cassandra.db.compaction.CompactionTask.executeInternal(CompactionExecutorStatsCollector)",3,0,n/a,6,0,1,3,1
"org.apache.cassandra.db.compaction.CompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,1,n/a,8,0,4,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getCompactionController(Set<SSTableReader>)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getDirectories()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getLevel()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionTask.getMaxDataAge(Collection<SSTableReader>)",0,1,n/a,10,1,1,5,3
"org.apache.cassandra.db.compaction.CompactionTask.getMinRepairedAt(Set<SSTableReader>)",2,1,n/a,9,0,1,6,3
"org.apache.cassandra.db.compaction.CompactionTask.partialCompactionsAcceptable()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.CompactionTask.reduceScopeForLimitedSpace()",9,1,n/a,14,1,0,6,3
"org.apache.cassandra.db.compaction.CompactionTask.runMayThrow()",78,0,n/a,5,5,0,60,14
"org.apache.cassandra.db.compaction.CompactionTask.updateCompactionHistory(String,String,long[],long,long)",8,1,n/a,16,1,5,13,3
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.DateTieredCompactionStrategy(ColumnFamilyStore,Map<String, String>)",7,0,n/a,14,1,2,8,3
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target.Target(long,long)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target.compareToTimestamp(long)",1,2,n/a,9,0,1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target.nextTarget(int)",2,1,n/a,12,0,1,3,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target.onTarget(long)",1,3,n/a,9,0,1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.addSSTable(SSTableReader)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.createSSTableAndMinTimestampPairs(Iterable<SSTableReader>)",5,1,n/a,12,0,1,4,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.filterOldSSTables(List<SSTableReader>,long,long)",3,5,n/a,5,2,3,5,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getBuckets(Collection<Pair<T, Long>>,long,int,long)",24,4,n/a,4,3,4,21,7
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getCompactionCandidates(Iterable<SSTableReader>,long,int)",10,1,n/a,16,0,3,8,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getEstimatedRemainingTasks()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getInitialTarget(long,long)",1,2,n/a,5,0,2,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getMaxSSTableBytes()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getMaximalTask(int,boolean)",3,0,n/a,9,0,2,4,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNextBackgroundSSTables(int)",19,1,n/a,27,1,1,13,4
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNextBackgroundTask(int)",5,0,n/a,14,1,1,7,4
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNextNonExpiredSSTables(Iterable<SSTableReader>,int)",11,1,n/a,21,1,2,12,5
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getNow()",8,1,n/a,13,0,0,3,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getSSTablesForSTCS(Collection<SSTableReader>,int,int,SizeTieredCompactionStrategyOptions)",3,1,n/a,6,0,4,3,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getSTCSBuckets(Collection<SSTableReader>,SizeTieredCompactionStrategyOptions)",3,2,n/a,8,0,2,2,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.getUserDefinedTask(Collection<SSTableReader>,int)",6,0,n/a,13,1,2,6,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.groupSSTablesForAntiCompaction(Collection<SSTableReader>)",3,0,n/a,13,1,1,4,2
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.newestBucket(List<List<SSTableReader>>,int,int,long,long,SizeTieredCompactionStrategyOptions)",9,3,n/a,25,2,6,8,7
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.removeSSTable(SSTableReader)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.toString()",3,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.updateEstimatedCompactionsByTasks(List<List<SSTableReader>>)",4,1,n/a,10,1,1,5,3
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.validateOptions(Map<String, String>)",7,5,n/a,9,0,1,6,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions.DateTieredCompactionStrategyOptions()",4,0,n/a,6,0,0,3,1
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions.DateTieredCompactionStrategyOptions(Map<String, String>)",12,0,n/a,12,0,1,9,5
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions.validateOptions(Map<String, String>,Map<String, String>)",26,0,n/a,57,2,2,28,12
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledCompactionStrategy(ColumnFamilyStore,Map<String, String>)",12,0,n/a,25,3,2,14,6
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.LeveledScanner(Collection<SSTableReader>,Range<Token>)",13,1,n/a,21,1,2,15,4
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.close()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.computeNext()",10,0,n/a,19,2,0,11,5
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.getBackingFiles()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.getCurrentPosition()",1,3,n/a,4,0,0,1,2
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.getLengthInBytes()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.intersecting(Collection<SSTableReader>,Range<Token>)",6,1,n/a,11,1,2,6,4
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.isForThrift()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner.metadata()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.addSSTable(SSTableReader)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.findDroppableSSTable(int)",13,1,n/a,6,3,1,17,8
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getAllLevelSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getCompactionTask(LifecycleTransaction,int,long)",6,0,n/a,15,1,3,8,4
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getEstimatedRemainingTasks()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getLevelSize(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getMaxSSTableBytes()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getMaximalTask(int,boolean)",8,0,n/a,12,0,2,8,3
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getNextBackgroundTask(int)",11,0,n/a,38,3,1,16,5
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getScanners(Collection<SSTableReader>,Range<Token>)",20,0,n/a,47,4,2,18,8
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getUserDefinedTask(Collection<SSTableReader>,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.groupSSTablesForAntiCompaction(Collection<SSTableReader>)",16,0,n/a,39,3,1,18,7
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.removeSSTable(SSTableReader)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.replaceSSTables(Collection<SSTableReader>,Collection<SSTableReader>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.validateOptions(Map<String, String>)",10,0,n/a,20,2,1,10,4
"org.apache.cassandra.db.compaction.LeveledCompactionTask.LeveledCompactionTask(ColumnFamilyStore,LifecycleTransaction,int,int,long,boolean)",1,0,n/a,7,0,6,4,1
"org.apache.cassandra.db.compaction.LeveledCompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",3,0,n/a,10,0,4,3,2
"org.apache.cassandra.db.compaction.LeveledCompactionTask.getLevel()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledCompactionTask.partialCompactionsAcceptable()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.CompactionCandidate.CompactionCandidate(Collection<SSTableReader>,int,long)",0,4,n/a,6,0,3,3,1
"org.apache.cassandra.db.compaction.LeveledManifest.LeveledManifest(ColumnFamilyStore,int,SizeTieredCompactionStrategyOptions)",4,1,n/a,14,1,3,11,2
"org.apache.cassandra.db.compaction.LeveledManifest.add(SSTableReader)",10,3,n/a,32,2,1,11,3
"org.apache.cassandra.db.compaction.LeveledManifest.ageSortedSSTables(Collection<SSTableReader>)",2,2,n/a,6,0,1,3,1
"org.apache.cassandra.db.compaction.LeveledManifest.canAddSSTable(SSTableReader)",5,1,n/a,22,1,1,12,5
"org.apache.cassandra.db.compaction.LeveledManifest.create(ColumnFamilyStore,int,Iterable<SSTableReader>,SizeTieredCompactionStrategyOptions)",4,1,n/a,14,1,4,8,3
"org.apache.cassandra.db.compaction.LeveledManifest.create(ColumnFamilyStore,int,List<SSTableReader>)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.getAllLevelSize()",2,1,n/a,7,0,0,6,2
"org.apache.cassandra.db.compaction.LeveledManifest.getAllSSTables()",2,0,n/a,9,1,0,4,2
"org.apache.cassandra.db.compaction.LeveledManifest.getCandidatesFor(int)",65,2,n/a,102,3,1,57,24
"org.apache.cassandra.db.compaction.LeveledManifest.getCompacting(int)",7,1,n/a,11,1,1,6,3
"org.apache.cassandra.db.compaction.LeveledManifest.getCompactionCandidates()",42,0,n/a,91,4,0,36,13
"org.apache.cassandra.db.compaction.LeveledManifest.getEstimatedTasks()",9,0,n/a,15,1,0,10,2
"org.apache.cassandra.db.compaction.LeveledManifest.getLevel(int)",0,25,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.getLevelCount()",2,0,n/a,9,1,0,6,3
"org.apache.cassandra.db.compaction.LeveledManifest.getLevelSize(int)",3,1,n/a,6,0,1,3,2
"org.apache.cassandra.db.compaction.LeveledManifest.getLevelSorted(int,Comparator<SSTableReader>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.getNextLevel(Collection<SSTableReader>)",5,2,n/a,21,1,1,11,6
"org.apache.cassandra.db.compaction.LeveledManifest.getOverlappingStarvedSSTables(int,Collection<SSTableReader>)",17,1,n/a,61,5,2,35,18
"org.apache.cassandra.db.compaction.LeveledManifest.getSSTablesForSTCS(Collection<SSTableReader>)",6,2,n/a,10,0,1,4,1
"org.apache.cassandra.db.compaction.LeveledManifest.logDistribution()",8,2,n/a,14,3,0,6,4
"org.apache.cassandra.db.compaction.LeveledManifest.maxBytesForLevel(int,long)",2,3,n/a,9,0,2,6,3
"org.apache.cassandra.db.compaction.LeveledManifest.overlapping(Collection<SSTableReader>,Iterable<SSTableReader>)",14,0,n/a,26,1,2,10,4
"org.apache.cassandra.db.compaction.LeveledManifest.overlapping(SSTableReader,Iterable<SSTableReader>)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.overlapping(Token,Token,Iterable<SSTableReader>)",8,3,n/a,16,1,3,8,3
"org.apache.cassandra.db.compaction.LeveledManifest.remove(SSTableReader)",2,2,n/a,8,0,1,4,1
"org.apache.cassandra.db.compaction.LeveledManifest.repairOverlappingSSTables(int)",8,1,n/a,25,2,1,11,6
"org.apache.cassandra.db.compaction.LeveledManifest.replace(Collection<SSTableReader>,Collection<SSTableReader>)",13,0,n/a,23,1,2,15,6
"org.apache.cassandra.db.compaction.LeveledManifest.sendBackToL0(SSTableReader)",6,1,n/a,14,1,1,6,2
"org.apache.cassandra.db.compaction.LeveledManifest.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.compaction.LeveledManifest.toString(Collection<SSTableReader>)",9,3,n/a,14,1,1,4,2
"org.apache.cassandra.db.compaction.OperationType.OperationType(String)",2,17,n/a,5,0,1,2,1
"org.apache.cassandra.db.compaction.OperationType.fromFileName(String)",3,1,n/a,7,0,1,4,3
"org.apache.cassandra.db.compaction.OperationType.toString()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SSTableSplitter(ColumnFamilyStore,LifecycleTransaction,int)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplitController.SplitController(ColumnFamilyStore)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplitController.maxPurgeableTimestamp(DecoratedKey)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask.SplittingCompactionTask(ColumnFamilyStore,LifecycleTransaction,int)",2,1,n/a,7,0,3,4,2
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,0,n/a,8,0,4,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask.getCompactionController(Set<SSTableReader>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask.partialCompactionsAcceptable()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.StatsCollector.beginCompaction(Holder)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.SSTableSplitter.StatsCollector.finishCompaction(Holder)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.db.compaction.SSTableSplitter.split()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.Scrubber.ScrubInfo.ScrubInfo(RandomAccessReader,SSTableReader)",1,1,n/a,6,0,2,3,1
"org.apache.cassandra.db.compaction.Scrubber.ScrubInfo.getCompactionInfo()",4,1,n/a,15,1,0,3,2
"org.apache.cassandra.db.compaction.Scrubber.ScrubResult.ScrubResult(Scrubber)",0,1,n/a,6,0,1,3,1
"org.apache.cassandra.db.compaction.Scrubber.Scrubber(ColumnFamilyStore,LifecycleTransaction,boolean,OutputHandler,boolean,boolean)",24,1,n/a,48,1,6,23,7
"org.apache.cassandra.db.compaction.Scrubber.Scrubber(ColumnFamilyStore,LifecycleTransaction,boolean,boolean,boolean)",2,5,n/a,4,0,5,1,1
"org.apache.cassandra.db.compaction.Scrubber.close()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.db.compaction.Scrubber.getScrubInfo()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.Scrubber.indexAvailable()",1,5,n/a,4,0,0,1,2
"org.apache.cassandra.db.compaction.Scrubber.saveOutOfOrderRow(DecoratedKey,DecoratedKey,UnfilteredRowIterator)",4,2,n/a,6,0,3,2,1
"org.apache.cassandra.db.compaction.Scrubber.scrub()",93,5,n/a,161,7,0,93,38
"org.apache.cassandra.db.compaction.Scrubber.scrubWithResult()",2,1,n/a,6,0,0,2,1
"org.apache.cassandra.db.compaction.Scrubber.seekToNextRow()",6,2,n/a,18,2,0,8,3
"org.apache.cassandra.db.compaction.Scrubber.throwIfCannotContinue(DecoratedKey,Throwable)",6,2,n/a,18,1,2,6,4
"org.apache.cassandra.db.compaction.Scrubber.throwIfFatal(Throwable)",0,4,n/a,5,0,1,2,4
"org.apache.cassandra.db.compaction.Scrubber.updateIndexKey()",8,2,n/a,19,1,0,9,4
"org.apache.cassandra.db.compaction.Scrubber.withValidation(UnfilteredRowIterator,String)",1,2,n/a,4,0,2,1,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.SizeTieredCompactionStrategy(ColumnFamilyStore,Map<String, String>)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.SplittingCompactionTask.SplittingCompactionTask(ColumnFamilyStore,LifecycleTransaction,int)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.SplittingCompactionTask.getCompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,0,n/a,8,0,4,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.addSSTable(SSTableReader)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.createSSTableAndLengthPairs(Iterable<SSTableReader>)",5,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getBuckets(Collection<Pair<T, Long>>,double,double,long)",18,4,n/a,4,3,4,21,7
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getEstimatedRemainingTasks()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getHotnessMap(Collection<SSTableReader>)",4,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getMaxSSTableBytes()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getMaximalTask(int,boolean)",8,0,n/a,13,0,2,9,4
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getNextBackgroundSSTables(int)",20,1,n/a,25,1,1,17,5
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getNextBackgroundTask(int)",5,0,n/a,13,1,1,7,4
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getUserDefinedTask(Collection<SSTableReader>,int)",6,0,n/a,12,1,2,6,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.hotness(SSTableReader)",4,2,n/a,8,0,1,1,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.mostInterestingBucket(List<List<SSTableReader>>,int,int)",8,2,n/a,21,1,3,9,5
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.removeSSTable(SSTableReader)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.shouldDefragment()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.toString()",3,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.trimToThresholdWithHotness(List<SSTableReader>,int)",11,2,n/a,4,2,2,8,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.updateEstimatedCompactionsByTasks(List<List<SSTableReader>>)",5,1,n/a,10,1,1,5,3
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.validateOptions(Map<String, String>)",6,3,n/a,8,0,1,5,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.SizeTieredCompactionStrategyOptions()",0,0,n/a,6,0,0,3,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.SizeTieredCompactionStrategyOptions(Map<String, String>)",6,0,n/a,9,0,1,6,4
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.parseDouble(Map<String, String>,String,double)",4,2,n/a,12,1,3,4,3
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions.validateOptions(Map<String, String>,Map<String, String>)",13,0,n/a,27,2,2,14,5
"org.apache.cassandra.db.compaction.Upgrader.UpgradeController.UpgradeController(ColumnFamilyStore)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.Upgrader.UpgradeController.maxPurgeableTimestamp(DecoratedKey)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.Upgrader.Upgrader(ColumnFamilyStore,LifecycleTransaction,OutputHandler)",14,1,n/a,13,0,3,10,1
"org.apache.cassandra.db.compaction.Upgrader.createCompactionWriter(long)",9,1,n/a,12,0,1,3,1
"org.apache.cassandra.db.compaction.Upgrader.upgrade(boolean)",20,1,n/a,23,1,1,10,3
"org.apache.cassandra.db.compaction.Verifier.Verifier(ColumnFamilyStore,SSTableReader,OutputHandler,boolean)",10,1,n/a,13,0,4,8,2
"org.apache.cassandra.db.compaction.Verifier.Verifier(ColumnFamilyStore,SSTableReader,boolean)",2,10,n/a,4,0,3,1,1
"org.apache.cassandra.db.compaction.Verifier.VerifyController.VerifyController(ColumnFamilyStore)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.compaction.Verifier.VerifyController.maxPurgeableTimestamp(DecoratedKey)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.Verifier.VerifyInfo.VerifyInfo(RandomAccessReader,SSTableReader)",1,1,n/a,6,0,2,3,1
"org.apache.cassandra.db.compaction.Verifier.VerifyInfo.getCompactionInfo()",4,1,n/a,15,1,0,3,2
"org.apache.cassandra.db.compaction.Verifier.close()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.compaction.Verifier.getVerifyInfo()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.compaction.Verifier.markAndThrow()",7,6,n/a,5,0,0,2,1
"org.apache.cassandra.db.compaction.Verifier.throwIfFatal(Throwable)",0,1,n/a,5,0,1,2,4
"org.apache.cassandra.db.compaction.Verifier.verify(boolean)",55,11,n/a,112,4,1,58,23
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.CompactionAwareWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,boolean,boolean)",4,0,n/a,16,0,6,8,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.append(UnfilteredRowIterator)",3,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doAbort(Throwable)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doCommit(Throwable)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doPostCleanup(Throwable)",2,4,n/a,6,0,1,2,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.doPrepare()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.estimatedKeys()",0,1,n/a,7,0,0,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.finish()",2,14,n/a,10,0,0,2,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.getDirectories()",0,2,n/a,7,0,0,1,1
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.getWriteDirectory(long)",3,0,n/a,10,0,1,4,2
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.maybeSwitchWriter(DecoratedKey)",5,1,n/a,10,0,1,3,2
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.realAppend(UnfilteredRowIterator)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter.switchCompactionLocation(DataDirectory)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.DefaultCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.DefaultCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,boolean,boolean)",1,2,n/a,5,0,6,1,1
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.estimatedKeys()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.realAppend(UnfilteredRowIterator)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter.switchCompactionLocation(DataDirectory)",9,0,n/a,13,0,1,2,1
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.MajorLeveledCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long)",1,1,n/a,8,0,5,1,1
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.MajorLeveledCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long,boolean,boolean)",5,2,n/a,14,0,7,4,1
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.realAppend(UnfilteredRowIterator)",11,0,n/a,22,2,1,13,3
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter.switchCompactionLocation(DataDirectory)",8,1,n/a,13,0,1,3,1
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.MaxSSTableSizeWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long,int)",1,1,n/a,9,0,6,1,1
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.MaxSSTableSizeWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long,int,boolean,boolean)",7,3,n/a,19,0,8,8,1
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.estimatedKeys()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.realAppend(UnfilteredRowIterator)",5,0,n/a,8,0,1,4,2
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter.switchCompactionLocation(DataDirectory)",8,1,n/a,12,0,1,2,1
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.SplittingSizeTieredCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.SplittingSizeTieredCompactionWriter(ColumnFamilyStore,Directories,LifecycleTransaction,Set<SSTableReader>,long)",10,2,n/a,29,2,5,20,4
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.realAppend(UnfilteredRowIterator)",7,0,n/a,12,1,1,6,3
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter.switchCompactionLocation(DataDirectory)",10,2,n/a,14,0,1,4,1
"org.apache.cassandra.db.context.CounterContext.ContextState.ContextState(ByteBuffer)",2,1,n/a,7,0,1,4,1
"org.apache.cassandra.db.context.CounterContext.ContextState.allocate(int,int,int)",4,55,n/a,12,0,3,5,1
"org.apache.cassandra.db.context.CounterContext.ContextState.compareIdTo(ContextState)",3,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.copyTo(ContextState)",4,6,n/a,4,0,1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getClock()",2,8,n/a,4,0,0,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getCount()",2,8,n/a,4,0,0,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getCounterId()",2,7,n/a,4,0,0,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.getElementIndex()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.hasRemaining()",1,15,n/a,4,0,0,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.isGlobal()",0,12,n/a,4,0,0,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.isLocal()",0,13,n/a,4,0,0,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.isRemote()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.context.CounterContext.ContextState.moveToNext()",1,18,n/a,7,0,0,4,3
"org.apache.cassandra.db.context.CounterContext.ContextState.reset()",1,2,n/a,6,0,0,3,1
"org.apache.cassandra.db.context.CounterContext.ContextState.updateIsGlobalOrLocal()",4,3,n/a,13,1,0,5,2
"org.apache.cassandra.db.context.CounterContext.ContextState.wrap(ByteBuffer)",1,9,n/a,4,0,1,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeElement(CounterId,long,long,boolean,boolean)",9,4,n/a,11,0,5,8,3
"org.apache.cassandra.db.context.CounterContext.ContextState.writeElementAtOffset(ByteBuffer,int,CounterId,long,long)",7,1,n/a,9,0,5,5,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeGlobal(CounterId,long,long)",1,23,n/a,4,0,3,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeLocal(CounterId,long,long)",1,16,n/a,5,0,3,1,1
"org.apache.cassandra.db.context.CounterContext.ContextState.writeRemote(CounterId,long,long)",1,117,n/a,5,0,3,1,1
"org.apache.cassandra.db.context.CounterContext.clearAllLocal(ByteBuffer)",24,3,n/a,33,1,1,21,6
"org.apache.cassandra.db.context.CounterContext.compare(ContextState,ContextState)",22,2,n/a,81,4,2,31,28
"org.apache.cassandra.db.context.CounterContext.compareId(ByteBuffer,int,ByteBuffer,int)",1,2,n/a,4,0,4,1,1
"org.apache.cassandra.db.context.CounterContext.createGlobal(CounterId,long,long)",2,4,n/a,9,0,3,3,1
"org.apache.cassandra.db.context.CounterContext.createLocal(long)",3,6,n/a,15,0,1,3,1
"org.apache.cassandra.db.context.CounterContext.createRemote(CounterId,long,long)",2,0,n/a,10,0,3,3,1
"org.apache.cassandra.db.context.CounterContext.diff(ByteBuffer,ByteBuffer)",15,8,n/a,98,4,2,46,27
"org.apache.cassandra.db.context.CounterContext.findPositionOf(ByteBuffer,CounterId)",7,1,n/a,23,1,2,13,4
"org.apache.cassandra.db.context.CounterContext.getClockAndCountOf(ByteBuffer,CounterId)",4,1,n/a,13,0,2,6,2
"org.apache.cassandra.db.context.CounterContext.getLocalClockAndCount(ByteBuffer)",2,3,n/a,7,0,1,1,1
"org.apache.cassandra.db.context.CounterContext.getLocalCount(ByteBuffer)",1,1,n/a,7,0,1,1,1
"org.apache.cassandra.db.context.CounterContext.hasLegacyShards(ByteBuffer)",7,1,n/a,14,0,1,10,4
"org.apache.cassandra.db.context.CounterContext.headerLength(ByteBuffer)",3,8,n/a,4,0,1,1,1
"org.apache.cassandra.db.context.CounterContext.instance()",0,54,n/a,4,0,0,1,1
"org.apache.cassandra.db.context.CounterContext.isLocal(ByteBuffer)",2,1,n/a,7,0,1,1,1
"org.apache.cassandra.db.context.CounterContext.markLocalToBeCleared(ByteBuffer)",12,1,n/a,33,2,1,16,5
"org.apache.cassandra.db.context.CounterContext.merge(ByteBuffer,ByteBuffer)",32,1,n/a,92,2,2,64,26
"org.apache.cassandra.db.context.CounterContext.merge(ContextState,ContextState,ContextState)",24,1,n/a,42,2,3,23,9
"org.apache.cassandra.db.context.CounterContext.shouldClearLocal(ByteBuffer)",2,2,n/a,5,0,1,1,1
"org.apache.cassandra.db.context.CounterContext.toString(ByteBuffer)",23,0,n/a,29,1,1,18,5
"org.apache.cassandra.db.context.CounterContext.total(ByteBuffer)",4,20,n/a,14,0,1,6,2
"org.apache.cassandra.db.context.CounterContext.updateDigest(MessageDigest,ByteBuffer)",5,3,n/a,13,0,2,3,1
"org.apache.cassandra.db.context.CounterContext.validateContext(ByteBuffer)",3,1,n/a,5,0,1,2,2
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.AbstractClusteringIndexFilter(boolean)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.FilterSerializer.deserialize(DataInputPlus,int,CFMetaData)",4,0,n/a,6,0,3,3,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.FilterSerializer.serialize(ClusteringIndexFilter,DataOutputPlus,int)",6,0,n/a,7,0,3,4,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.FilterSerializer.serializedSize(ClusteringIndexFilter,int)",3,0,n/a,7,0,2,2,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.appendOrderByToCQLString(CFMetaData,StringBuilder)",6,0,n/a,11,1,2,6,5
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.isReversed()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.serializeInternal(DataOutputPlus,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.serializedSizeInternal(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.InternalDeserializer.deserialize(DataInputPlus,int,CFMetaData,boolean)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.Kind.Kind(InternalDeserializer)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexFilter.Serializer.deserialize(DataInputPlus,int,CFMetaData)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.Serializer.serialize(ClusteringIndexFilter,DataOutputPlus,int)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.Serializer.serializedSize(ClusteringIndexFilter,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.filter(SliceableUnfilteredRowIterator)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.filterNotIndexed(ColumnFilter,UnfilteredRowIterator)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.forPaging(ClusteringComparator,Clustering,boolean)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.getUnfilteredRowIterator(ColumnFilter,Partition)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.isFullyCoveredBy(CachedPartition)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.isHeadFilter()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.isReversed()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.kind()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.selects(Clustering)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.selectsAllPartition()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.shouldInclude(SSTableReader)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.toCQLString(CFMetaData)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.toString(CFMetaData)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.ClusteringIndexNamesFilter(NavigableSet<Clustering>,boolean)",3,3,n/a,7,0,2,4,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.NamesDeserializer.deserialize(DataInputPlus,int,CFMetaData,boolean)",7,0,n/a,9,0,4,8,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.filter(SliceableUnfilteredRowIterator)",12,0,n/a,9,4,1,18,8
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.filterNotIndexed(ColumnFilter,UnfilteredRowIterator)",10,0,n/a,5,2,2,4,3
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.forPaging(ClusteringComparator,Clustering,boolean)",3,0,n/a,7,0,3,2,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.getUnfilteredRowIterator(ColumnFilter,Partition)",14,0,n/a,10,3,2,7,4
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.isFullyCoveredBy(CachedPartition)",6,0,n/a,8,0,1,3,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.isHeadFilter()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.kind()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.requestedRows()",0,0,n/a,12,0,0,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.selects(Clustering)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.selectsAllPartition()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.serializeInternal(DataOutputPlus,int)",5,0,n/a,7,0,2,4,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.serializedSizeInternal(int)",5,0,n/a,8,0,1,5,2
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.shouldInclude(SSTableReader)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.toCQLString(CFMetaData)",18,0,n/a,14,0,1,11,6
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.toString(CFMetaData)",8,0,n/a,11,0,1,8,4
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.ClusteringIndexSliceFilter(Slices,boolean)",1,7,n/a,5,0,2,2,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.SliceDeserializer.deserialize(DataInputPlus,int,CFMetaData,boolean)",2,0,n/a,5,0,4,2,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.filter(SliceableUnfilteredRowIterator)",1,0,n/a,6,0,1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.filterNotIndexed(ColumnFilter,UnfilteredRowIterator)",12,0,n/a,5,2,2,6,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.forPaging(ClusteringComparator,Clustering,boolean)",2,0,n/a,7,0,3,2,2
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.getUnfilteredRowIterator(ColumnFilter,Partition)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.isFullyCoveredBy(CachedPartition)",9,0,n/a,8,0,1,3,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.isHeadFilter()",2,0,n/a,4,0,0,1,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.kind()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.requestedSlices()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.selects(Clustering)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.selectsAllPartition()",3,1,n/a,4,0,0,1,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.serializeInternal(DataOutputPlus,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.serializedSizeInternal(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.shouldInclude(SSTableReader)",5,0,n/a,8,0,1,5,3
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.toCQLString(CFMetaData)",6,0,n/a,8,0,1,5,2
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.toString(CFMetaData)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.Builder.Builder(CFMetaData)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.Builder.add(ColumnDefinition)",2,2,n/a,7,0,1,4,2
"org.apache.cassandra.db.filter.ColumnFilter.Builder.addAll(Iterable<ColumnDefinition>)",2,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.filter.ColumnFilter.Builder.addSubSelection(ColumnSubselection)",4,2,n/a,8,0,1,5,2
"org.apache.cassandra.db.filter.ColumnFilter.Builder.build()",7,1,n/a,17,1,0,10,6
"org.apache.cassandra.db.filter.ColumnFilter.Builder.select(ColumnDefinition,CellPath)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.ColumnFilter.Builder.slice(ColumnDefinition,CellPath,CellPath)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.filter.ColumnFilter.ColumnFilter(boolean,CFMetaData,PartitionColumns,SortedSetMultimap<ColumnIdentifier, ColumnSubselection>)",0,4,n/a,10,0,4,4,1
"org.apache.cassandra.db.filter.ColumnFilter.Serializer.deserialize(DataInputPlus,int,CFMetaData)",12,0,n/a,26,2,3,19,5
"org.apache.cassandra.db.filter.ColumnFilter.Serializer.makeHeaderByte(ColumnFilter)",0,1,n/a,6,0,1,1,4
"org.apache.cassandra.db.filter.ColumnFilter.Serializer.serialize(ColumnFilter,DataOutputPlus,int)",8,0,n/a,15,1,3,8,4
"org.apache.cassandra.db.filter.ColumnFilter.Serializer.serializedSize(ColumnFilter,int)",6,0,n/a,16,1,2,9,4
"org.apache.cassandra.db.filter.ColumnFilter.Tester.Tester(boolean,Iterator<ColumnSubselection>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.filter.ColumnFilter.Tester.canSkipValue(CellPath)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.filter.ColumnFilter.Tester.includedBySubselection(CellPath)",3,2,n/a,16,1,1,10,6
"org.apache.cassandra.db.filter.ColumnFilter.Tester.includes(CellPath)",1,2,n/a,4,0,1,1,2
"org.apache.cassandra.db.filter.ColumnFilter.all(CFMetaData)",1,8,n/a,7,0,1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.allColumnsBuilder(CFMetaData)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.appendColumnDef(StringBuilder,ColumnDefinition)",7,2,n/a,17,1,2,10,5
"org.apache.cassandra.db.filter.ColumnFilter.canSkipValue(ColumnDefinition)",1,1,n/a,7,0,1,1,3
"org.apache.cassandra.db.filter.ColumnFilter.canSkipValue(ColumnDefinition,CellPath)",4,0,n/a,15,0,2,9,7
"org.apache.cassandra.db.filter.ColumnFilter.fetchedColumns()",1,15,n/a,12,0,0,1,2
"org.apache.cassandra.db.filter.ColumnFilter.includes(Cell)",7,0,n/a,15,0,1,9,7
"org.apache.cassandra.db.filter.ColumnFilter.includes(ColumnDefinition)",1,1,n/a,7,0,1,1,2
"org.apache.cassandra.db.filter.ColumnFilter.includesAllColumns()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ColumnFilter.newTester(ColumnDefinition)",5,2,n/a,13,0,1,6,4
"org.apache.cassandra.db.filter.ColumnFilter.selection(PartitionColumns)",1,11,n/a,11,0,1,1,1
"org.apache.cassandra.db.filter.ColumnFilter.selectionBuilder()",1,1,n/a,8,0,0,1,1
"org.apache.cassandra.db.filter.ColumnFilter.toString()",11,0,n/a,16,0,0,12,5
"org.apache.cassandra.db.filter.ColumnSubselection.ColumnSubselection(ColumnDefinition)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.Element(ColumnDefinition,CellPath)",1,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.compareInclusionOf(CellPath)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.comparisonPath()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.kind()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Element.toString()",5,0,n/a,7,0,0,2,1
"org.apache.cassandra.db.filter.ColumnSubselection.Serializer.deserialize(DataInputPlus,int,CFMetaData)",16,0,n/a,26,1,3,16,5
"org.apache.cassandra.db.filter.ColumnSubselection.Serializer.serialize(ColumnSubselection,DataOutputPlus,int)",13,0,n/a,20,1,3,15,4
"org.apache.cassandra.db.filter.ColumnSubselection.Serializer.serializedSize(ColumnSubselection,int)",9,0,n/a,20,1,2,15,3
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.Slice(ColumnDefinition,CellPath,CellPath)",1,2,n/a,6,0,3,3,1
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.compareInclusionOf(CellPath)",3,0,n/a,10,0,1,6,3
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.comparisonPath()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.kind()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.Slice.toString()",7,0,n/a,7,0,0,2,3
"org.apache.cassandra.db.filter.ColumnSubselection.column()",0,7,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.ColumnSubselection.compareInclusionOf(CellPath)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.ColumnSubselection.compareTo(ColumnSubselection)",8,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.filter.ColumnSubselection.comparisonPath()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.ColumnSubselection.element(ColumnDefinition,CellPath)",3,0,n/a,6,0,2,3,2
"org.apache.cassandra.db.filter.ColumnSubselection.kind()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.ColumnSubselection.slice(ColumnDefinition,CellPath,CellPath)",4,0,n/a,6,0,3,3,3
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.CQLCounter(int,boolean)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.applyToPartition(DecoratedKey,Row)",2,2,n/a,7,0,2,3,4
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.applyToRow(Row)",2,0,n/a,7,0,1,3,3
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.counted()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.countedInCurrentPartition()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.incrementRowCount()",2,2,n/a,7,0,0,4,3
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.isDone()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.isDoneForPartition()",1,3,n/a,4,0,0,1,2
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter.onPartitionClose()",2,2,n/a,10,0,0,3,3
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLLimits(int)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLLimits(int,int)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLLimits(int,int,boolean)",0,6,n/a,6,0,3,3,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.count()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.distinct(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.estimateTotalResults(ColumnFamilyStore)",4,0,n/a,7,0,1,2,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.forPaging(int)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.forPaging(int,ByteBuffer,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.forShortReadRetry(int)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.hasEnoughLiveData(CachedPartition,int)",10,2,n/a,22,1,2,9,4
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.isUnlimited()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.kind()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.newCounter(int,boolean)",1,8,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.perPartitionCount()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.toString()",7,0,n/a,14,1,0,8,4
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.CQLPagingLimits(int,int,boolean,ByteBuffer,int)",1,2,n/a,6,0,5,3,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.PagingAwareCounter.PagingAwareCounter(int,boolean)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.PagingAwareCounter.applyToPartition(DecoratedKey,Row)",3,2,n/a,17,1,2,4,2
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.forPaging(int)",1,4,n/a,5,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.forPaging(int,ByteBuffer,int)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.kind()",0,6,n/a,5,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.newCounter(int,boolean)",1,8,n/a,5,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyTo(PartitionIterator)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyTo(RowIterator)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyTo(UnfilteredPartitionIterator)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyTo(UnfilteredRowIterator)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.Counter.applyToPartition(BaseRowIterator<?>)",2,2,n/a,6,0,1,1,2
"org.apache.cassandra.db.filter.DataLimits.Counter.applyToPartition(DecoratedKey,Row)",n/a,1,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.Counter.attachTo(BasePartitions)",3,0,n/a,8,0,1,4,3
"org.apache.cassandra.db.filter.DataLimits.Counter.attachTo(BaseRows)",6,0,n/a,9,0,1,5,3
"org.apache.cassandra.db.filter.DataLimits.Counter.counted()",n/a,6,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.Counter.countedInCurrentPartition()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.Counter.isDone()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.Counter.isDoneForPartition()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.Counter.onlyCount()",0,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.filter.DataLimits.Serializer.deserialize(DataInputPlus,int)",14,0,n/a,25,1,2,18,5
"org.apache.cassandra.db.filter.DataLimits.Serializer.serialize(DataLimits,DataOutputPlus,int)",12,0,n/a,26,2,3,19,4
"org.apache.cassandra.db.filter.DataLimits.Serializer.serializedSize(DataLimits,int)",13,0,n/a,29,2,2,22,5
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.SuperColumnCountingCounter.SuperColumnCountingCounter(int,boolean)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.SuperColumnCountingCounter.applyToRow(Row)",2,1,n/a,12,1,1,5,4
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.SuperColumnCountingLimits(int,int)",1,4,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.forPaging(int)",1,4,n/a,9,0,1,2,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.forShortReadRetry(int)",1,0,n/a,6,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.kind()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.newCounter(int,boolean)",1,8,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.ThriftCounter(int,boolean)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.applyToPartition(DecoratedKey,Row)",2,1,n/a,7,0,2,3,2
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.applyToRow(Row)",3,1,n/a,14,2,1,6,5
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.counted()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.countedInCurrentPartition()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.isDone()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.isDoneForPartition()",1,3,n/a,4,0,0,1,2
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter.onPartitionClose()",2,2,n/a,7,0,0,3,2
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftLimits(int,int)",0,5,n/a,5,0,2,2,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.count()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.estimateTotalResults(ColumnFamilyStore)",4,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.forPaging(int)",1,4,n/a,9,0,1,2,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.forPaging(int,ByteBuffer,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.forShortReadRetry(int)",1,0,n/a,6,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.hasEnoughLiveData(CachedPartition,int)",10,2,n/a,22,1,2,9,4
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.isUnlimited()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.kind()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.newCounter(int,boolean)",1,8,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.perPartitionCount()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.toString()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.filter.DataLimits.count()",n/a,4,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.cqlLimits(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.cqlLimits(int,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.distinctLimits(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.DataLimits.estimateTotalResults(ColumnFamilyStore)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.filter(PartitionIterator,int)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.filter(UnfilteredPartitionIterator,int)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.filter(UnfilteredRowIterator,int)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.forPaging(int)",n/a,4,4,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.forPaging(int,ByteBuffer,int)",n/a,0,3,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.forShortReadRetry(int)",n/a,0,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.hasEnoughLiveData(CachedPartition,int)",n/a,2,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.isUnlimited()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.kind()",n/a,6,4,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.newCounter(int,boolean)",n/a,7,4,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.perPartitionCount()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.DataLimits.superColumnCountingLimits(int,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.DataLimits.thriftLimits(int,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.filter.RowFilter.CQLFilter.CQLFilter(List<Expression>)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.RowFilter.CQLFilter.filter(UnfilteredPartitionIterator,int)",7,0,n/a,10,2,2,13,5
"org.apache.cassandra.db.filter.RowFilter.CQLFilter.withNewExpressions(List<Expression>)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.CustomExpression(CFMetaData,IndexMetadata,ByteBuffer)",2,2,n/a,7,0,3,3,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.getTargetIndex()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.getValue()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.isSatisfiedBy(DecoratedKey,Row)",0,2,n/a,5,0,2,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.kind()",0,8,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.makeDefinition(CFMetaData,IndexMetadata)",3,1,n/a,6,0,2,1,1
"org.apache.cassandra.db.filter.RowFilter.CustomExpression.toString()",4,0,n/a,9,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.Expression(ColumnDefinition,Operator,ByteBuffer)",0,4,n/a,6,0,3,3,1
"org.apache.cassandra.db.filter.RowFilter.Expression.Serializer.deserialize(DataInputPlus,int,CFMetaData)",22,1,n/a,55,2,3,35,13
"org.apache.cassandra.db.filter.RowFilter.Expression.Serializer.serialize(Expression,DataOutputPlus,int)",15,1,n/a,39,2,3,23,7
"org.apache.cassandra.db.filter.RowFilter.Expression.Serializer.serializedSize(Expression,int)",13,1,n/a,32,1,2,21,9
"org.apache.cassandra.db.filter.RowFilter.Expression.column()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.equals(Object)",6,1,n/a,13,0,1,6,6
"org.apache.cassandra.db.filter.RowFilter.Expression.getIndexValue()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.getValue(DecoratedKey,Row)",10,4,n/a,15,1,2,8,6
"org.apache.cassandra.db.filter.RowFilter.Expression.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.isContains()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.isContainsKey()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.isCustom()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.isSatisfiedBy(DecoratedKey,Row)",n/a,2,4,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.RowFilter.Expression.kind()",n/a,8,4,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.filter.RowFilter.Expression.operator()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.Expression.validateForIndexing()",4,1,n/a,6,0,0,3,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.MapEqualityExpression(ColumnDefinition,ByteBuffer,Operator,ByteBuffer)",1,2,n/a,6,0,4,3,2
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.equals(Object)",4,1,n/a,13,0,1,6,6
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.getIndexValue()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.isSatisfiedBy(DecoratedKey,Row)",14,2,n/a,23,1,2,13,6
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.kind()",0,8,n/a,5,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.toString()",5,0,n/a,6,0,0,2,1
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression.validateForIndexing()",3,1,n/a,7,0,0,3,1
"org.apache.cassandra.db.filter.RowFilter.RowFilter(List<Expression>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.RowFilter.Serializer.deserialize(DataInputPlus,int,CFMetaData)",7,0,n/a,11,0,3,8,3
"org.apache.cassandra.db.filter.RowFilter.Serializer.serialize(RowFilter,DataOutputPlus,int)",4,0,n/a,7,0,3,4,2
"org.apache.cassandra.db.filter.RowFilter.Serializer.serializedSize(RowFilter,int)",3,0,n/a,8,0,2,4,2
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression.SimpleExpression(ColumnDefinition,Operator,ByteBuffer)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression.isSatisfiedBy(DecoratedKey,Row)",39,2,n/a,80,4,2,49,19
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression.kind()",0,8,n/a,5,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression.toString()",6,0,n/a,23,1,0,17,6
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.ThriftExpression(CFMetaData,ByteBuffer,Operator,ByteBuffer)",3,2,n/a,6,0,4,3,1
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.isSatisfiedBy(DecoratedKey,Row)",7,2,n/a,10,0,2,4,2
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.kind()",0,8,n/a,5,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.makeDefinition(CFMetaData,ByteBuffer)",3,1,n/a,9,0,2,4,2
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.ThriftFilter.ThriftFilter(List<Expression>)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.RowFilter.ThriftFilter.filter(UnfilteredPartitionIterator,int)",12,0,n/a,20,3,2,12,5
"org.apache.cassandra.db.filter.RowFilter.ThriftFilter.withNewExpressions(List<Expression>)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.RowFilter.add(ColumnDefinition,Operator,ByteBuffer)",2,8,n/a,4,0,3,1,1
"org.apache.cassandra.db.filter.RowFilter.addCustomIndexExpression(CFMetaData,IndexMetadata,ByteBuffer)",2,1,n/a,4,0,3,1,1
"org.apache.cassandra.db.filter.RowFilter.addMapEquality(ColumnDefinition,ByteBuffer,Operator,ByteBuffer)",2,1,n/a,4,0,4,1,1
"org.apache.cassandra.db.filter.RowFilter.addThriftExpression(CFMetaData,ByteBuffer,Operator,ByteBuffer)",2,1,n/a,5,0,4,2,1
"org.apache.cassandra.db.filter.RowFilter.clusteringKeyRestrictionsAreSatisfiedBy(Clustering)",5,0,n/a,17,2,1,6,4
"org.apache.cassandra.db.filter.RowFilter.create()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.create(int)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.RowFilter.filter(UnfilteredPartitionIterator,int)",n/a,0,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.filter.RowFilter.forThrift(int)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.filter.RowFilter.getExpressions()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.isEmpty()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.iterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.filter.RowFilter.makeCompactClustering(CFMetaData,ByteBuffer)",7,2,n/a,13,1,2,5,2
"org.apache.cassandra.db.filter.RowFilter.partitionKeyRestrictionsAreSatisfiedBy(DecoratedKey,AbstractType<?>)",7,0,n/a,18,1,2,7,5
"org.apache.cassandra.db.filter.RowFilter.toString()",6,0,n/a,12,1,0,8,3
"org.apache.cassandra.db.filter.RowFilter.withNewExpressions(List<Expression>)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.filter.RowFilter.without(Expression)",7,2,n/a,15,0,1,8,4
"org.apache.cassandra.db.filter.TombstoneOverwhelmingException.TombstoneOverwhelmingException(int,String,CFMetaData,DecoratedKey,ClusteringPrefix)",4,0,n/a,5,0,5,1,1
"org.apache.cassandra.db.filter.TombstoneOverwhelmingException.makePKString(CFMetaData,ByteBuffer,ClusteringPrefix)",20,1,n/a,28,2,3,21,7
"org.apache.cassandra.db.lifecycle.Helpers.abortObsoletion(List<Obsoletion>,Throwable)",3,2,n/a,17,2,2,7,5
"org.apache.cassandra.db.lifecycle.Helpers.checkNotReplaced(Iterable<SSTableReader>)",1,1,n/a,8,0,1,2,2
"org.apache.cassandra.db.lifecycle.Helpers.concatUniq(Set<T>...)",10,1,n/a,14,0,1,9,3
"org.apache.cassandra.db.lifecycle.Helpers.emptySet()",1,13,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.Helpers.filterIn(Iterable<T>,Set<T>...)",2,3,n/a,9,0,2,1,1
"org.apache.cassandra.db.lifecycle.Helpers.filterOut(Iterable<T>,Set<T>...)",2,3,n/a,8,0,2,1,1
"org.apache.cassandra.db.lifecycle.Helpers.idIn(Map<T, T>)",2,1,n/a,4,2,1,2,1
"org.apache.cassandra.db.lifecycle.Helpers.idIn(Set<T>)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.identityMap(Iterable<T>)",3,3,n/a,10,0,1,4,2
"org.apache.cassandra.db.lifecycle.Helpers.markObsolete(List<Obsoletion>,Throwable)",3,3,n/a,17,2,2,7,5
"org.apache.cassandra.db.lifecycle.Helpers.notIn(Set<T>...)",2,2,n/a,7,0,1,1,1
"org.apache.cassandra.db.lifecycle.Helpers.orIn(Collection<T>...)",2,2,n/a,10,0,1,6,2
"org.apache.cassandra.db.lifecycle.Helpers.prepareForObsoletion(Iterable<SSTableReader>,LogTransaction,List<Obsoletion>,Throwable)",4,3,n/a,15,2,4,5,3
"org.apache.cassandra.db.lifecycle.Helpers.replace(Map<T, T>,Set<T>,Iterable<T>)",25,3,n/a,19,0,3,6,2
"org.apache.cassandra.db.lifecycle.Helpers.replace(Set<T>,Set<T>,Iterable<T>)",4,3,n/a,9,0,3,1,1
"org.apache.cassandra.db.lifecycle.Helpers.select(T,Collection<T>)",4,3,n/a,6,0,2,3,3
"org.apache.cassandra.db.lifecycle.Helpers.selectFirst(T,Collection<T>...)",1,0,n/a,10,1,2,5,3
"org.apache.cassandra.db.lifecycle.Helpers.setReplaced(Iterable<SSTableReader>,Throwable)",2,2,n/a,19,2,2,5,3
"org.apache.cassandra.db.lifecycle.Helpers.setupOnline(Iterable<SSTableReader>)",1,1,n/a,9,0,1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.LifecycleTransaction(Tracker,LogTransaction,Iterable<SSTableReader>)",3,1,n/a,11,1,3,6,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.LifecycleTransaction(Tracker,OperationType,Iterable<SSTableReader>)",2,1,n/a,5,0,3,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.Action.get(boolean,boolean)",0,4,n/a,5,0,2,2,4
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.ReaderState(Action,Action,SSTableReader,SSTableReader,boolean)",0,4,n/a,8,0,5,5,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.equals(Object)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.equals(ReaderState)",0,1,n/a,5,0,1,1,5
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.visible(SSTableReader,Predicate<SSTableReader>,Collection<SSTableReader>...)",2,4,n/a,4,0,3,1,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State.clear()",2,3,n/a,5,0,0,2,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State.contains(SSTableReader)",2,4,n/a,4,0,1,1,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State.isEmpty()",2,6,n/a,4,0,0,1,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State.log(State)",4,1,n/a,7,0,1,4,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.cancel(Iterable<SSTableReader>)",1,0,n/a,8,0,1,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.cancel(SSTableReader)",10,3,n/a,13,0,1,7,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.checkUnused()",6,1,n/a,10,0,0,4,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.checkpoint()",2,5,n/a,9,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.checkpoint(Throwable)",21,1,n/a,25,0,1,14,3
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.current()",2,2,n/a,9,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.current(SSTableReader)",7,4,n/a,16,0,1,9,6
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.doAbort(Throwable)",22,1,n/a,31,0,1,16,4
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.doCommit(Throwable)",11,1,n/a,20,0,1,9,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.doPostCleanup(Throwable)",2,4,n/a,6,0,1,2,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.doPrepare()",6,1,n/a,12,0,0,3,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.fresh()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.getFiles(Path,BiFunction<File, FileType, Boolean>,OnTxnErr)",2,5,n/a,16,0,3,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.isObsolete(SSTableReader)",2,1,n/a,7,0,1,1,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.isOffline()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.log()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.obsolete(SSTableReader)",8,1,n/a,15,0,1,7,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.obsoleteOriginals()",6,3,n/a,11,0,0,3,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(OperationType)",4,6,n/a,9,0,1,2,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(OperationType,Iterable<SSTableReader>)",6,0,n/a,11,0,2,4,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.offline(OperationType,SSTableReader)",2,4,n/a,7,0,2,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.onlyOne()",2,4,n/a,6,0,0,2,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.opId()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.opType()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.originals()",1,42,n/a,8,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.permitRedundantTransitions()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.removeUnfinishedLeftovers(CFMetaData)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.rescheduleFailedDeletions()",1,2,n/a,8,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.restoreUpdatedOriginals()",5,1,n/a,8,0,0,2,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.split(Collection<SSTableReader>)",8,2,n/a,18,1,1,9,3
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.state(SSTableReader)",12,0,n/a,10,0,1,3,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.toUpdate()",3,1,n/a,7,0,0,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.trackNew(SSTable)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.unmarkCompacting(Set<SSTableReader>,Throwable)",4,2,n/a,9,0,2,3,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.untrackNew(SSTable)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.update(Collection<SSTableReader>,boolean)",1,1,n/a,7,1,2,2,2
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.update(SSTableReader,boolean)",10,8,n/a,16,0,2,8,3
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.waitForDeletions()",1,23,n/a,8,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.LogAwareFileLister(Path,BiFunction<File, FileType, Boolean>,OnTxnErr)",0,1,n/a,7,0,3,3,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.allFilesPresent(LogFile,Map<LogRecord, Set<File>>,Map<LogRecord, Set<File>>)",14,1,n/a,10,0,3,2,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.classifyFiles(File)",4,1,n/a,11,0,1,4,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.classifyFiles(LogFile)",20,1,n/a,33,1,1,15,5
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.getFinalFiles(File)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.getTemporaryFiles(File)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.innerList()",21,1,n/a,20,0,0,3,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.list()",3,1,n/a,11,1,0,3,2
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.list(DirectoryStream<Path>)",8,2,n/a,14,1,1,3,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.listFiles(File,FileType...)",8,2,n/a,10,0,2,2,1
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.readTxnLog(LogFile)",2,2,n/a,5,0,1,2,3
"org.apache.cassandra.db.lifecycle.LogAwareFileLister.setTemporary(LogFile,Collection<Set<File>>,Collection<Set<File>>)",5,3,n/a,7,0,3,2,2
"org.apache.cassandra.db.lifecycle.LogFile.LogFile(OperationType,UUID)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.lifecycle.LogFile.LogFile(OperationType,UUID,List<File>)",2,1,n/a,5,0,3,2,1
"org.apache.cassandra.db.lifecycle.LogFile.abort()",4,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.lifecycle.LogFile.aborted()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.add(Type,SSTable)",3,0,n/a,5,0,2,2,2
"org.apache.cassandra.db.lifecycle.LogFile.addRecord(LogRecord)",2,3,n/a,7,0,1,4,2
"org.apache.cassandra.db.lifecycle.LogFile.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.commit()",4,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.lifecycle.LogFile.committed()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.completed()",2,2,n/a,4,0,0,1,2
"org.apache.cassandra.db.lifecycle.LogFile.contains(Type,SSTable)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.lifecycle.LogFile.deleteFilesForRecordsOfType(Type)",4,1,n/a,7,0,1,2,1
"org.apache.cassandra.db.lifecycle.LogFile.deleteRecordFiles(LogRecord)",6,2,n/a,8,0,1,3,1
"org.apache.cassandra.db.lifecycle.LogFile.exists()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getFileName(File)",3,1,n/a,12,0,1,2,1
"org.apache.cassandra.db.lifecycle.LogFile.getFilePaths()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getFiles()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getFilesOfType(NavigableSet<File>,Type)",7,0,n/a,9,0,2,3,1
"org.apache.cassandra.db.lifecycle.LogFile.getLastRecord()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.getRecordFiles(NavigableSet<File>,LogRecord)",7,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.lifecycle.LogFile.id()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.isLastRecordValidWithType(Type)",2,2,n/a,7,0,1,2,3
"org.apache.cassandra.db.lifecycle.LogFile.isLogFile(File)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.logError(LogRecord)",2,3,n/a,5,0,1,2,1
"org.apache.cassandra.db.lifecycle.LogFile.make(File)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.make(String,List<File>)",8,1,n/a,12,0,2,6,2
"org.apache.cassandra.db.lifecycle.LogFile.makeRecord(Type,SSTable)",3,3,n/a,7,0,2,4,2
"org.apache.cassandra.db.lifecycle.LogFile.remove(Type,SSTable)",5,0,n/a,7,0,2,4,1
"org.apache.cassandra.db.lifecycle.LogFile.removeUnfinishedLeftovers(Throwable)",6,0,n/a,16,1,1,6,3
"org.apache.cassandra.db.lifecycle.LogFile.syncFolder(Throwable)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogFile.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogFile.verify()",24,0,n/a,36,1,0,18,5
"org.apache.cassandra.db.lifecycle.LogFile.verifyRecord(LogRecord)",9,1,n/a,30,1,1,8,5
"org.apache.cassandra.db.lifecycle.LogFile.verifyRecordWithCorruptedLastRecord(LogRecord)",3,1,n/a,14,1,1,2,3
"org.apache.cassandra.db.lifecycle.LogRecord.LogRecord(Type,String,long,int)",1,1,n/a,7,0,4,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.LogRecord(Type,String,long,int,long,String)",8,5,n/a,25,1,6,12,6
"org.apache.cassandra.db.lifecycle.LogRecord.LogRecord(Type,long)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.Status.hasError()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.Status.setError(String)",2,1,n/a,5,0,1,2,2
"org.apache.cassandra.db.lifecycle.LogRecord.Type.fromPrefix(String)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.Type.hasFile()",0,3,n/a,4,0,0,1,2
"org.apache.cassandra.db.lifecycle.LogRecord.Type.isFinal()",0,1,n/a,1,0,0,1,2
"org.apache.cassandra.db.lifecycle.LogRecord.Type.matches(LogRecord)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.absolutePath()",2,2,n/a,4,0,0,1,2
"org.apache.cassandra.db.lifecycle.LogRecord.computeChecksum()",11,1,n/a,10,0,0,7,1
"org.apache.cassandra.db.lifecycle.LogRecord.equals(Object)",1,0,n/a,13,0,1,4,5
"org.apache.cassandra.db.lifecycle.LogRecord.error()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.fileName()",5,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.lifecycle.LogRecord.format()",3,1,n/a,9,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.getExistingFiles()",3,1,n/a,5,0,0,2,1
"org.apache.cassandra.db.lifecycle.LogRecord.getExistingFiles(String)",9,2,n/a,7,0,1,3,2
"org.apache.cassandra.db.lifecycle.LogRecord.hashCode()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.isFinal()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.isInvalid()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.isInvalidOrPartial()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.lifecycle.LogRecord.isValid()",1,1,n/a,4,0,0,1,2
"org.apache.cassandra.db.lifecycle.LogRecord.make(String)",17,0,n/a,20,1,1,7,3
"org.apache.cassandra.db.lifecycle.LogRecord.make(Type,List<File>,int,String)",6,2,n/a,5,0,4,2,1
"org.apache.cassandra.db.lifecycle.LogRecord.make(Type,SSTable)",6,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.lifecycle.LogRecord.makeAbort(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.makeCommit(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.partial()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.setError(String)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.lifecycle.LogRecord.setError(Throwable)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.setPartial()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogRecord.withExistingFiles()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.LogReplica(File,int)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.db.lifecycle.LogReplica.append(LogRecord)",4,0,n/a,9,0,1,4,2
"org.apache.cassandra.db.lifecycle.LogReplica.close()",1,0,n/a,8,1,0,3,2
"org.apache.cassandra.db.lifecycle.LogReplica.create(File,String)",4,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.delete()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.lifecycle.LogReplica.exists()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.file()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.open(File)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogReplica.syncFolder()",1,2,n/a,5,0,0,2,2
"org.apache.cassandra.db.lifecycle.LogReplica.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.addReplica(File)",6,1,n/a,8,0,1,5,2
"org.apache.cassandra.db.lifecycle.LogReplicaSet.addReplicas(List<File>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.append(LogRecord)",11,0,n/a,14,1,1,5,4
"org.apache.cassandra.db.lifecycle.LogReplicaSet.close()",5,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.delete(Throwable)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.exists()",6,0,n/a,7,0,0,2,2
"org.apache.cassandra.db.lifecycle.LogReplicaSet.getFilePaths()",6,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.getFiles()",5,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.isPrefixMatch(String,String)",4,1,n/a,6,0,2,1,2
"org.apache.cassandra.db.lifecycle.LogReplicaSet.maybeCreateReplica(File,String,Set<LogRecord>)",6,0,n/a,10,0,3,7,3
"org.apache.cassandra.db.lifecycle.LogReplicaSet.readRecords(Set<LogRecord>)",37,0,n/a,68,4,1,37,13
"org.apache.cassandra.db.lifecycle.LogReplicaSet.replicas()",1,10,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.syncFolder(Throwable)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogReplicaSet.toString()",6,0,n/a,8,0,0,2,2
"org.apache.cassandra.db.lifecycle.LogTransaction.CorruptTransactionLogException.CorruptTransactionLogException(String,LogFile)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName.add(File)",6,1,n/a,10,1,1,5,2
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName.list(File)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName.removeUnfinishedLeftovers()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName.removeUnfinishedLeftovers(String,List<File>)",6,0,n/a,21,2,2,8,3
"org.apache.cassandra.db.lifecycle.LogTransaction.LogTransaction(OperationType)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogTransaction(OperationType,Tracker)",7,1,n/a,8,0,2,5,2
"org.apache.cassandra.db.lifecycle.LogTransaction.Obsoletion.Obsoletion(SSTableReader,SSTableTidier)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.lifecycle.LogTransaction.SSTableTidier.SSTableTidier(SSTableReader,boolean,LogTransaction)",2,2,n/a,8,0,3,5,1
"org.apache.cassandra.db.lifecycle.LogTransaction.SSTableTidier.abort()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.SSTableTidier.run()",10,0,n/a,22,1,0,11,5
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier.TransactionTidier(LogFile)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier.name()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier.run()",15,1,n/a,24,1,0,14,6
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier.tidy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.complete(Throwable)",4,2,n/a,14,1,1,5,2
"org.apache.cassandra.db.lifecycle.LogTransaction.delete(File)",7,1,n/a,18,1,1,7,4
"org.apache.cassandra.db.lifecycle.LogTransaction.doAbort(Throwable)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.lifecycle.LogTransaction.doCommit(Throwable)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.lifecycle.LogTransaction.doPrepare()",0,1,n/a,1,0,0,0,1
"org.apache.cassandra.db.lifecycle.LogTransaction.id()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.logFilePaths()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.logFiles()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.obsoleted(SSTableReader)",7,0,n/a,16,1,1,8,4
"org.apache.cassandra.db.lifecycle.LogTransaction.removeUnfinishedLeftovers(CFMetaData)",3,0,n/a,10,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.removeUnfinishedLeftovers(List<File>)",3,1,n/a,7,0,1,3,1
"org.apache.cassandra.db.lifecycle.LogTransaction.rescheduleFailedDeletions()",3,0,n/a,8,0,0,4,2
"org.apache.cassandra.db.lifecycle.LogTransaction.trackNew(SSTable)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.txnFile()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.type()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.untrackNew(SSTable)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.waitForDeletions()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree.SSTableIntervalTree(Collection<Interval<PartitionPosition, SSTableReader>>)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree.build(Iterable<SSTableReader>)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree.buildIntervals(Iterable<SSTableReader>)",4,2,n/a,7,0,1,4,2
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree.empty()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.Tracker.Tracker(ColumnFamilyStore,boolean)",2,0,n/a,7,0,2,4,1
"org.apache.cassandra.db.lifecycle.Tracker.addInitialSSTables(Iterable<SSTableReader>)",8,1,n/a,8,0,1,4,2
"org.apache.cassandra.db.lifecycle.Tracker.addSSTables(Iterable<SSTableReader>)",3,0,n/a,6,0,1,3,1
"org.apache.cassandra.db.lifecycle.Tracker.apply(Function<View, View>)",2,7,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.apply(Function<View, View>,Throwable)",2,1,n/a,12,1,2,4,2
"org.apache.cassandra.db.lifecycle.Tracker.apply(Predicate<View>,Function<View, View>)",5,1,n/a,16,1,2,7,4
"org.apache.cassandra.db.lifecycle.Tracker.dropSSTables()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.Tracker.dropSSTables(Predicate<SSTableReader>,OperationType,Throwable)",26,2,n/a,41,3,3,19,4
"org.apache.cassandra.db.lifecycle.Tracker.dropSSTables(Throwable)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.dropSSTablesIfInvalid(Throwable)",3,0,n/a,6,0,1,3,3
"org.apache.cassandra.db.lifecycle.Tracker.emptySet()",1,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.Tracker.getCompacting()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.Tracker.getMemtableFor(Group,ReplayPosition)",5,0,n/a,18,1,2,4,3
"org.apache.cassandra.db.lifecycle.Tracker.getUncompacting()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.Tracker.getUncompacting(Iterable<SSTableReader>)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.getView()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.Tracker.isDummy()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.Tracker.markFlushing(Memtable)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.maybeIncrementallyBackup(Iterable<SSTableReader>)",4,2,n/a,10,1,1,5,3
"org.apache.cassandra.db.lifecycle.Tracker.notifyAdded(Iterable<SSTableReader>)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.notifyAdded(Iterable<SSTableReader>,Throwable)",3,2,n/a,16,2,2,6,3
"org.apache.cassandra.db.lifecycle.Tracker.notifyDeleting(SSTableReader)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.lifecycle.Tracker.notifyRenewed(Memtable)",2,1,n/a,6,0,1,3,2
"org.apache.cassandra.db.lifecycle.Tracker.notifySSTableRepairedStatusChanged(Collection<SSTableReader>)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.lifecycle.Tracker.notifySSTablesChanged(Collection<SSTableReader>,Collection<SSTableReader>,OperationType,Throwable)",3,1,n/a,16,2,4,6,3
"org.apache.cassandra.db.lifecycle.Tracker.notifyTruncated(long)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.lifecycle.Tracker.removeUnreadableSSTables(File)",4,0,n/a,4,2,1,2,1
"org.apache.cassandra.db.lifecycle.Tracker.replaceFlushed(Memtable,Collection<SSTableReader>)",15,0,n/a,22,1,2,13,5
"org.apache.cassandra.db.lifecycle.Tracker.reset()",10,1,n/a,11,0,0,1,2
"org.apache.cassandra.db.lifecycle.Tracker.subscribe(INotificationConsumer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.switchMemtable(boolean)",5,0,n/a,16,0,1,5,2
"org.apache.cassandra.db.lifecycle.Tracker.tryModify(Iterable<SSTableReader>,OperationType)",7,0,n/a,11,0,2,5,3
"org.apache.cassandra.db.lifecycle.Tracker.tryModify(SSTableReader,OperationType)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.lifecycle.Tracker.unsubscribe(INotificationConsumer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.Tracker.updateSizeTracking(Iterable<SSTableReader>,Iterable<SSTableReader>,Throwable)",14,3,n/a,38,2,3,20,8
"org.apache.cassandra.db.lifecycle.View.View(List<Memtable>,List<Memtable>,Map<SSTableReader, SSTableReader>,Map<SSTableReader, SSTableReader>,SSTableIntervalTree)",2,6,n/a,15,0,5,12,1
"org.apache.cassandra.db.lifecycle.View.allKnownSSTables()",2,1,n/a,7,0,0,1,1
"org.apache.cassandra.db.lifecycle.View.getAllMemtables()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.lifecycle.View.getCurrentMemtable()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.lifecycle.View.getUncompacting(Iterable<SSTableReader>)",3,1,n/a,4,2,1,2,1
"org.apache.cassandra.db.lifecycle.View.isEmpty()",6,0,n/a,7,0,0,1,5
"org.apache.cassandra.db.lifecycle.View.lessThan(T)",2,2,n/a,4,2,1,2,1
"org.apache.cassandra.db.lifecycle.View.liveSSTables()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.View.markFlushing(Memtable)",18,0,n/a,11,2,1,7,1
"org.apache.cassandra.db.lifecycle.View.permitCompacting(Iterable<SSTableReader>)",4,1,n/a,7,2,1,5,5
"org.apache.cassandra.db.lifecycle.View.replaceFlushed(Memtable,Collection<SSTableReader>)",13,0,n/a,11,2,2,7,2
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet,AbstractBounds<PartitionPosition>)",1,0,n/a,13,0,2,1,1
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet,DecoratedKey)",1,0,n/a,9,0,2,2,1
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet,Iterable<SSTableReader>)",6,0,n/a,16,1,2,9,6
"org.apache.cassandra.db.lifecycle.View.select(SSTableSet,Predicate<SSTableReader>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.lifecycle.View.sstables(SSTableSet)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.lifecycle.View.sstables(SSTableSet,Predicate<SSTableReader>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.lifecycle.View.sstablesInBounds(SSTableSet,PartitionPosition,PartitionPosition)",8,0,n/a,12,0,3,5,3
"org.apache.cassandra.db.lifecycle.View.switchMemtable(Memtable)",8,0,n/a,6,2,1,4,1
"org.apache.cassandra.db.lifecycle.View.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.lifecycle.View.updateCompacting(Set<SSTableReader>,Iterable<SSTableReader>)",8,4,n/a,7,2,2,5,3
"org.apache.cassandra.db.lifecycle.View.updateLiveSet(Set<SSTableReader>,Iterable<SSTableReader>)",8,4,n/a,6,2,2,5,3
"org.apache.cassandra.db.marshal.AbstractCompositeType.AbstractCompositeType()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.ParsedComparator.getAbstractType()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.ParsedComparator.getComparatorSerializedSize()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.ParsedComparator.getRemainingPart()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.ParsedComparator.serializeComparator(ByteBuffer)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.compareCustom(ByteBuffer,ByteBuffer)",18,0,n/a,32,1,2,26,13
"org.apache.cassandra.db.marshal.AbstractCompositeType.decompose(Object...)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.escape(String)",4,1,n/a,12,0,1,5,4
"org.apache.cassandra.db.marshal.AbstractCompositeType.fromJSONObject(Object)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.fromString(String)",28,0,n/a,46,2,1,35,7
"org.apache.cassandra.db.marshal.AbstractCompositeType.getAndAppendComparator(int,ByteBuffer,StringBuilder)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.getComparator(int,ByteBuffer)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.getComparator(int,ByteBuffer,ByteBuffer)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.getString(ByteBuffer)",15,0,n/a,23,2,1,16,5
"org.apache.cassandra.db.marshal.AbstractCompositeType.parseComparator(int,String)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.readIsStatic(ByteBuffer)",n/a,5,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractCompositeType.split(ByteBuffer)",10,1,n/a,17,1,1,9,2
"org.apache.cassandra.db.marshal.AbstractCompositeType.split(String)",11,1,n/a,19,1,1,13,6
"org.apache.cassandra.db.marshal.AbstractCompositeType.toJSONString(ByteBuffer,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.AbstractCompositeType.unescape(String)",6,1,n/a,12,0,1,5,3
"org.apache.cassandra.db.marshal.AbstractCompositeType.validate(ByteBuffer)",16,0,n/a,26,1,1,20,7
"org.apache.cassandra.db.marshal.AbstractCompositeType.validateComparator(int,ByteBuffer)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractType.AbstractType(ComparisonType)",8,1,n/a,18,1,1,8,4
"org.apache.cassandra.db.marshal.AbstractType.asCQL3Type()",1,18,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.asCQLTypeStringList(List<AbstractType<?>>)",5,12,n/a,7,0,1,4,2
"org.apache.cassandra.db.marshal.AbstractType.checkComparable()",1,1,n/a,8,1,0,3,2
"org.apache.cassandra.db.marshal.AbstractType.compare(ByteBuffer,ByteBuffer)",2,11,n/a,6,0,2,1,2
"org.apache.cassandra.db.marshal.AbstractType.compareCollectionMembers(ByteBuffer,ByteBuffer,ByteBuffer)",1,0,n/a,12,0,3,1,1
"org.apache.cassandra.db.marshal.AbstractType.compareCustom(ByteBuffer,ByteBuffer)",1,1,n/a,13,0,2,1,1
"org.apache.cassandra.db.marshal.AbstractType.compareForCQL(ByteBuffer,ByteBuffer)",1,6,n/a,10,0,2,1,1
"org.apache.cassandra.db.marshal.AbstractType.componentsCount()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.compose(ByteBuffer)",2,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractType.decompose(T)",2,15,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractType.freeze()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.fromJSONObject(Object)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractType.fromString(String)",n/a,8,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractType.getComponents()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.getSerializer()",n/a,11,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.marshal.AbstractType.getString(ByteBuffer)",4,8,n/a,9,0,1,5,2
"org.apache.cassandra.db.marshal.AbstractType.getString(Collection<ByteBuffer>)",5,8,n/a,10,1,1,4,2
"org.apache.cassandra.db.marshal.AbstractType.isCollection()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.isCompatibleWith(AbstractType<?>)",1,4,n/a,14,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractType.isCounter()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.isEmptyValueMeaningless()",0,1,n/a,7,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.isFrozenCollection()",2,2,n/a,4,0,0,1,2
"org.apache.cassandra.db.marshal.AbstractType.isMultiCell()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.isReversed()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.isValueCompatibleWith(AbstractType<?>)",1,4,n/a,15,0,1,1,2
"org.apache.cassandra.db.marshal.AbstractType.isValueCompatibleWithInternal(AbstractType<?>)",1,1,n/a,8,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractType.parseDefaultParameters(AbstractType<?>,TypeParser)",5,0,n/a,13,1,2,5,4
"org.apache.cassandra.db.marshal.AbstractType.readValue(DataInputPlus)",3,0,n/a,8,0,1,4,2
"org.apache.cassandra.db.marshal.AbstractType.references(AbstractType<?>)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractType.skipValue(DataInputPlus)",3,0,n/a,8,0,1,4,2
"org.apache.cassandra.db.marshal.AbstractType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.AbstractType.toString()",2,5,n/a,12,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.toString(boolean)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractType.validate(ByteBuffer)",2,10,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractType.validateCellValue(ByteBuffer)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.db.marshal.AbstractType.validateCollectionMember(ByteBuffer,ByteBuffer)",1,0,n/a,9,0,2,1,1
"org.apache.cassandra.db.marshal.AbstractType.valueLengthIfFixed()",0,4,n/a,7,0,0,1,1
"org.apache.cassandra.db.marshal.AbstractType.writeValue(ByteBuffer,DataOutputPlus)",4,0,n/a,9,0,2,4,2
"org.apache.cassandra.db.marshal.AbstractType.writtenLength(ByteBuffer)",4,0,n/a,7,0,1,2,2
"org.apache.cassandra.db.marshal.AsciiType.AsciiType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.AsciiType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AsciiType.fromJSONObject(Object)",6,0,n/a,13,1,1,3,2
"org.apache.cassandra.db.marshal.AsciiType.fromString(String)",6,1,n/a,14,1,1,5,2
"org.apache.cassandra.db.marshal.AsciiType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.AsciiType.toJSONString(ByteBuffer,int)",5,0,n/a,12,1,2,3,2
"org.apache.cassandra.db.marshal.BooleanType.BooleanType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.BooleanType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.BooleanType.compareCustom(ByteBuffer,ByteBuffer)",8,0,n/a,11,0,2,7,8
"org.apache.cassandra.db.marshal.BooleanType.fromJSONObject(Object)",9,0,n/a,10,0,1,5,3
"org.apache.cassandra.db.marshal.BooleanType.fromString(String)",9,1,n/a,8,0,1,5,4
"org.apache.cassandra.db.marshal.BooleanType.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.BooleanType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.BooleanType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.BooleanType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ByteType.ByteType()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ByteType.asCQL3Type()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ByteType.compareCustom(ByteBuffer,ByteBuffer)",4,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.ByteType.fromJSONObject(Object)",14,0,n/a,17,1,1,8,4
"org.apache.cassandra.db.marshal.ByteType.fromString(String)",5,1,n/a,16,1,1,7,3
"org.apache.cassandra.db.marshal.ByteType.getSerializer()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ByteType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.BytesType.BytesType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.BytesType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.BytesType.fromJSONObject(Object)",9,0,n/a,15,1,1,6,3
"org.apache.cassandra.db.marshal.BytesType.fromString(String)",4,1,n/a,11,1,1,3,2
"org.apache.cassandra.db.marshal.BytesType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.BytesType.isCompatibleWith(AbstractType<?>)",0,0,n/a,7,0,1,1,3
"org.apache.cassandra.db.marshal.BytesType.isValueCompatibleWithInternal(AbstractType<?>)",0,0,n/a,6,0,1,1,1
"org.apache.cassandra.db.marshal.BytesType.toJSONString(ByteBuffer,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer.deserialize(DataInputPlus)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer.serialize(CellPath,DataOutputPlus)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer.serializedSize(CellPath)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer.skip(DataInputPlus)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CollectionType.CollectionType(ComparisonType,Kind)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.marshal.CollectionType.Kind.makeCollectionReceiver(ColumnSpecification,boolean)",n/a,1,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.marshal.CollectionType.asCQL3Type()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CollectionType.collectionSize(List<ByteBuffer>)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.CollectionType.fromString(String)",3,0,n/a,11,1,1,3,2
"org.apache.cassandra.db.marshal.CollectionType.getSerializer()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.marshal.CollectionType.getString(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CollectionType.isCollection()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CollectionType.isCompatibleWith(AbstractType<?>)",13,1,n/a,18,0,1,12,6
"org.apache.cassandra.db.marshal.CollectionType.isCompatibleWithFrozen(CollectionType<?>)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.marshal.CollectionType.isMap()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.db.marshal.CollectionType.isValueCompatibleWithFrozen(CollectionType<?>)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.marshal.CollectionType.isValueCompatibleWithInternal(AbstractType<?>)",8,0,n/a,16,0,1,10,5
"org.apache.cassandra.db.marshal.CollectionType.makeCollectionReceiver(ColumnSpecification,boolean)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.CollectionType.nameComparator()",n/a,11,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.marshal.CollectionType.serializeForNativeProtocol(ColumnDefinition,Iterator<Cell>,int)",4,1,n/a,7,0,3,4,1
"org.apache.cassandra.db.marshal.CollectionType.serializedValues(Iterator<Cell>)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.marshal.CollectionType.toString()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.CollectionType.validateCellValue(ByteBuffer)",4,0,n/a,8,0,1,3,2
"org.apache.cassandra.db.marshal.CollectionType.valueComparator()",n/a,10,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.marshal.ColumnToCollectionType.ColumnToCollectionType(Map<ByteBuffer, CollectionType>)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.compareCollectionMembers(ByteBuffer,ByteBuffer,ByteBuffer)",5,0,n/a,7,0,3,4,2
"org.apache.cassandra.db.marshal.ColumnToCollectionType.compareCustom(ByteBuffer,ByteBuffer)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.fromJSONObject(Object)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.fromString(String)",3,0,n/a,11,1,1,3,2
"org.apache.cassandra.db.marshal.ColumnToCollectionType.getInstance(Map<ByteBuffer, CollectionType>)",3,0,n/a,11,1,1,6,2
"org.apache.cassandra.db.marshal.ColumnToCollectionType.getInstance(TypeParser)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.getString(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.isCompatibleWith(AbstractType<?>)",5,0,n/a,15,1,1,8,5
"org.apache.cassandra.db.marshal.ColumnToCollectionType.toJSONString(ByteBuffer,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.validate(ByteBuffer)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.ColumnToCollectionType.validateCollectionMember(ByteBuffer,ByteBuffer)",5,0,n/a,7,0,2,4,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.Builder(Builder)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.Builder(CompositeType)",4,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.Builder(CompositeType,List<ByteBuffer>,byte[],boolean)",1,3,n/a,10,0,4,7,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.add(ByteBuffer)",5,1,n/a,8,0,1,5,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.add(ColumnIdentifier)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.build()",10,2,n/a,18,2,0,10,4
"org.apache.cassandra.db.marshal.CompositeType.Builder.buildAsEndOfRange()",4,0,n/a,8,0,0,5,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.buildForRelation(Operator)",2,0,n/a,27,1,1,13,4
"org.apache.cassandra.db.marshal.CompositeType.Builder.componentCount()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.copy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.get(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.getComponent(int)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.marshal.CompositeType.Builder.remainingCount()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.Builder.staticBuilder(CompositeType)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.CompositeComponent.CompositeComponent(ByteBuffer,byte)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.marshal.CompositeType.CompositeType(List<AbstractType<?>>)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.StaticParsedComparator(AbstractType<?>,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getAbstractType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getComparatorSerializedSize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.getRemainingPart()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator.serializeComparator(ByteBuffer)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.db.marshal.CompositeType.build(ByteBuffer...)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.build(boolean,ByteBuffer...)",9,1,n/a,17,1,2,12,5
"org.apache.cassandra.db.marshal.CompositeType.builder()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.componentsCount()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.decompose(Object...)",4,0,n/a,11,1,1,8,2
"org.apache.cassandra.db.marshal.CompositeType.deconstruct(ByteBuffer)",8,0,n/a,13,1,1,8,2
"org.apache.cassandra.db.marshal.CompositeType.extractComponent(ByteBuffer,int)",5,1,n/a,16,1,2,10,3
"org.apache.cassandra.db.marshal.CompositeType.extractLastComponent(ByteBuffer)",5,0,n/a,6,0,1,2,2
"org.apache.cassandra.db.marshal.CompositeType.getAndAppendComparator(int,ByteBuffer,StringBuilder)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.marshal.CompositeType.getComparator(int,ByteBuffer)",2,1,n/a,17,1,2,3,2
"org.apache.cassandra.db.marshal.CompositeType.getComparator(int,ByteBuffer,ByteBuffer)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.marshal.CompositeType.getComponents()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.getInstance(AbstractType...)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.getInstance(List<AbstractType<?>>)",4,0,n/a,15,2,1,8,4
"org.apache.cassandra.db.marshal.CompositeType.getInstance(TypeParser)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.isCompatibleWith(AbstractType<?>)",6,0,n/a,20,1,1,15,6
"org.apache.cassandra.db.marshal.CompositeType.isStaticName(ByteBuffer)",3,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.marshal.CompositeType.isValueCompatibleWithInternal(AbstractType<?>)",6,0,n/a,20,1,1,15,6
"org.apache.cassandra.db.marshal.CompositeType.lastEOC(ByteBuffer)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.parseComparator(int,String)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.CompositeType.readIsStatic(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CompositeType.readStatic(ByteBuffer)",4,5,n/a,10,0,1,7,3
"org.apache.cassandra.db.marshal.CompositeType.references(AbstractType<?>)",2,0,n/a,10,0,1,6,4
"org.apache.cassandra.db.marshal.CompositeType.split(ByteBuffer)",7,5,n/a,17,1,1,8,3
"org.apache.cassandra.db.marshal.CompositeType.splitName(ByteBuffer)",7,1,n/a,12,1,1,7,2
"org.apache.cassandra.db.marshal.CompositeType.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.CompositeType.validateComparator(int,ByteBuffer)",3,0,n/a,6,0,2,3,2
"org.apache.cassandra.db.marshal.CounterColumnType.CounterColumnType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.compose(ByteBuffer)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.decompose(Long)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.fromJSONObject(Object)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.fromString(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.getString(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.isCounter()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.toJSONString(ByteBuffer,int)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.CounterColumnType.validateCellValue(ByteBuffer)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.DateType.DateType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.DateType.asCQL3Type()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.DateType.fromJSONObject(Object)",8,0,n/a,16,1,1,5,3
"org.apache.cassandra.db.marshal.DateType.fromString(String)",3,0,n/a,7,0,1,3,2
"org.apache.cassandra.db.marshal.DateType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DateType.isCompatibleWith(AbstractType<?>)",2,0,n/a,15,1,1,6,3
"org.apache.cassandra.db.marshal.DateType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DateType.isValueCompatibleWithInternal(AbstractType<?>)",0,0,n/a,5,0,1,1,3
"org.apache.cassandra.db.marshal.DateType.toJSONString(ByteBuffer,int)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.DateType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.DecimalType.DecimalType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.DecimalType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DecimalType.compareCustom(ByteBuffer,ByteBuffer)",7,0,n/a,6,0,2,3,5
"org.apache.cassandra.db.marshal.DecimalType.fromJSONObject(Object)",7,0,n/a,12,1,1,3,2
"org.apache.cassandra.db.marshal.DecimalType.fromString(String)",5,0,n/a,15,1,1,7,3
"org.apache.cassandra.db.marshal.DecimalType.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DecimalType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DecimalType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.DoubleType.DoubleType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.DoubleType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DoubleType.compareCustom(ByteBuffer,ByteBuffer)",7,0,n/a,6,0,2,3,5
"org.apache.cassandra.db.marshal.DoubleType.fromJSONObject(Object)",10,0,n/a,16,1,1,5,3
"org.apache.cassandra.db.marshal.DoubleType.fromString(String)",5,1,n/a,16,1,1,7,3
"org.apache.cassandra.db.marshal.DoubleType.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DoubleType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DoubleType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.DoubleType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicCompositeType(Map<Byte, AbstractType<?>>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.DynamicParsedComparator(String)",7,1,n/a,29,2,1,14,5
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getAbstractType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getComparatorSerializedSize()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.getRemainingPart()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator.serializeComparator(ByteBuffer)",5,0,n/a,11,0,1,7,3
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.FixedValueComparator(int)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.compareCustom(ByteBuffer,ByteBuffer)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.compose(ByteBuffer)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.decompose(Void)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.fromJSONObject(Object)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.fromString(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.getSerializer()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.getString(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.toJSONString(ByteBuffer,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator.validate(ByteBuffer)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.decompose(Object...)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.getAndAppendComparator(int,ByteBuffer,StringBuilder)",10,0,n/a,22,2,3,9,3
"org.apache.cassandra.db.marshal.DynamicCompositeType.getComparator(ByteBuffer)",6,3,n/a,20,2,1,7,3
"org.apache.cassandra.db.marshal.DynamicCompositeType.getComparator(int,ByteBuffer)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.getComparator(int,ByteBuffer,ByteBuffer)",12,0,n/a,34,1,3,14,8
"org.apache.cassandra.db.marshal.DynamicCompositeType.getInstance(Map<Byte, AbstractType<?>>)",3,0,n/a,10,1,1,5,2
"org.apache.cassandra.db.marshal.DynamicCompositeType.getInstance(TypeParser)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.isCompatibleWith(AbstractType<?>)",6,0,n/a,23,1,1,13,7
"org.apache.cassandra.db.marshal.DynamicCompositeType.parseComparator(int,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.readIsStatic(ByteBuffer)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.DynamicCompositeType.validateComparator(int,ByteBuffer)",14,0,n/a,41,2,2,18,7
"org.apache.cassandra.db.marshal.EmptyType.EmptyType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.EmptyType.asCQL3Type()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.EmptyType.compareCustom(ByteBuffer,ByteBuffer)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.EmptyType.fromJSONObject(Object)",6,0,n/a,9,0,1,5,3
"org.apache.cassandra.db.marshal.EmptyType.fromString(String)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.marshal.EmptyType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.EmptyType.getString(ByteBuffer)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.EmptyType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.FloatType.FloatType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.FloatType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.FloatType.compareCustom(ByteBuffer,ByteBuffer)",7,0,n/a,6,0,2,3,5
"org.apache.cassandra.db.marshal.FloatType.fromJSONObject(Object)",10,0,n/a,16,1,1,5,3
"org.apache.cassandra.db.marshal.FloatType.fromString(String)",5,1,n/a,15,1,1,6,3
"org.apache.cassandra.db.marshal.FloatType.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.FloatType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.FloatType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.FloatType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.FrozenType.FrozenType()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.FrozenType.fromJSONObject(Object)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.FrozenType.fromString(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.FrozenType.getInstance(TypeParser)",5,0,n/a,8,0,1,5,2
"org.apache.cassandra.db.marshal.FrozenType.getSerializer()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.FrozenType.getString(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.FrozenType.toJSONString(ByteBuffer,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.InetAddressType.InetAddressType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.InetAddressType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.InetAddressType.fromJSONObject(Object)",6,0,n/a,13,1,1,3,2
"org.apache.cassandra.db.marshal.InetAddressType.fromString(String)",5,1,n/a,16,1,1,7,3
"org.apache.cassandra.db.marshal.InetAddressType.getSerializer()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.InetAddressType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.InetAddressType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.Int32Type.Int32Type()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.Int32Type.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.Int32Type.compareCustom(ByteBuffer,ByteBuffer)",9,0,n/a,9,0,2,6,6
"org.apache.cassandra.db.marshal.Int32Type.fromJSONObject(Object)",14,0,n/a,18,1,1,8,4
"org.apache.cassandra.db.marshal.Int32Type.fromString(String)",5,1,n/a,16,1,1,7,3
"org.apache.cassandra.db.marshal.Int32Type.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.Int32Type.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.Int32Type.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.Int32Type.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.IntegerType.IntegerType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.IntegerType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.IntegerType.compareCustom(ByteBuffer,ByteBuffer)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.IntegerType.compareIntegers(ByteBuffer,ByteBuffer)",12,1,n/a,48,1,2,28,11
"org.apache.cassandra.db.marshal.IntegerType.findMostSignificantByte(ByteBuffer)",5,2,n/a,25,2,1,17,10
"org.apache.cassandra.db.marshal.IntegerType.fromJSONObject(Object)",7,0,n/a,13,1,1,3,2
"org.apache.cassandra.db.marshal.IntegerType.fromString(String)",5,0,n/a,16,1,1,7,3
"org.apache.cassandra.db.marshal.IntegerType.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.IntegerType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.IntegerType.isValueCompatibleWithInternal(AbstractType<?>)",2,0,n/a,5,0,1,1,3
"org.apache.cassandra.db.marshal.IntegerType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.LexicalUUIDType()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.compareCustom(ByteBuffer,ByteBuffer)",7,0,n/a,6,0,2,3,5
"org.apache.cassandra.db.marshal.LexicalUUIDType.fromJSONObject(Object)",6,0,n/a,13,1,1,3,2
"org.apache.cassandra.db.marshal.LexicalUUIDType.fromString(String)",5,1,n/a,14,1,1,5,3
"org.apache.cassandra.db.marshal.LexicalUUIDType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.LexicalUUIDType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ListType.ListType(AbstractType<T>,boolean)",3,1,n/a,7,0,2,4,1
"org.apache.cassandra.db.marshal.ListType.compareCustom(ByteBuffer,ByteBuffer)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.ListType.compareListOrSet(AbstractType<?>,ByteBuffer,ByteBuffer)",12,1,n/a,19,1,3,15,9
"org.apache.cassandra.db.marshal.ListType.freeze()",1,0,n/a,8,0,0,3,2
"org.apache.cassandra.db.marshal.ListType.fromJSONObject(Object)",11,0,n/a,18,1,1,11,5
"org.apache.cassandra.db.marshal.ListType.getElementsType()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ListType.getInstance(AbstractType<T>,boolean)",3,4,n/a,11,1,2,6,3
"org.apache.cassandra.db.marshal.ListType.getInstance(TypeParser)",5,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.marshal.ListType.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ListType.isCompatibleWithFrozen(CollectionType<?>)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.marshal.ListType.isMultiCell()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ListType.isValueCompatibleWithFrozen(CollectionType<?>)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.marshal.ListType.nameComparator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ListType.references(AbstractType<?>)",2,0,n/a,5,0,1,1,2
"org.apache.cassandra.db.marshal.ListType.serializedValues(Iterator<Cell>)",5,0,n/a,8,0,1,5,2
"org.apache.cassandra.db.marshal.ListType.setOrListToJsonString(ByteBuffer,AbstractType,int)",8,1,n/a,12,1,3,9,3
"org.apache.cassandra.db.marshal.ListType.toJSONString(ByteBuffer,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.ListType.toString(boolean)",13,0,n/a,13,0,1,9,5
"org.apache.cassandra.db.marshal.ListType.valueComparator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.LongType.LongType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.LongType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.LongType.compareCustom(ByteBuffer,ByteBuffer)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.LongType.compareLongs(ByteBuffer,ByteBuffer)",9,1,n/a,9,0,2,6,6
"org.apache.cassandra.db.marshal.LongType.fromJSONObject(Object)",14,0,n/a,18,1,1,8,5
"org.apache.cassandra.db.marshal.LongType.fromString(String)",5,2,n/a,16,1,1,7,3
"org.apache.cassandra.db.marshal.LongType.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.LongType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.LongType.isValueCompatibleWithInternal(AbstractType<?>)",0,0,n/a,5,0,1,1,3
"org.apache.cassandra.db.marshal.LongType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.LongType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.MapType.MapType(AbstractType<K>,AbstractType<V>,boolean)",4,1,n/a,8,0,3,5,1
"org.apache.cassandra.db.marshal.MapType.collectionSize(List<ByteBuffer>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.MapType.compareCustom(ByteBuffer,ByteBuffer)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.MapType.compareMaps(AbstractType<?>,AbstractType<?>,ByteBuffer,ByteBuffer)",15,1,n/a,24,1,4,21,10
"org.apache.cassandra.db.marshal.MapType.freeze()",1,0,n/a,8,0,0,3,2
"org.apache.cassandra.db.marshal.MapType.fromJSONObject(Object)",18,0,n/a,20,1,1,13,6
"org.apache.cassandra.db.marshal.MapType.getInstance(AbstractType<K>,AbstractType<V>,boolean)",4,5,n/a,12,1,3,7,3
"org.apache.cassandra.db.marshal.MapType.getInstance(TypeParser)",6,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.marshal.MapType.getKeysType()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.MapType.getSerializer()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.MapType.getValuesType()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.MapType.isCompatibleWithFrozen(CollectionType<?>)",2,0,n/a,7,0,1,3,2
"org.apache.cassandra.db.marshal.MapType.isMultiCell()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.MapType.isValueCompatibleWithFrozen(CollectionType<?>)",2,0,n/a,7,0,1,3,2
"org.apache.cassandra.db.marshal.MapType.nameComparator()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.MapType.references(AbstractType<?>)",3,0,n/a,5,0,1,1,3
"org.apache.cassandra.db.marshal.MapType.serializedValues(Iterator<Cell>)",8,0,n/a,12,1,1,7,2
"org.apache.cassandra.db.marshal.MapType.toJSONString(ByteBuffer,int)",17,0,n/a,20,1,2,14,4
"org.apache.cassandra.db.marshal.MapType.toString(boolean)",13,0,n/a,11,0,1,8,5
"org.apache.cassandra.db.marshal.MapType.valueComparator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.PartitionerDefinedOrder(IPartitioner)",1,3,n/a,5,0,1,2,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.compareCustom(ByteBuffer,ByteBuffer)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.compose(ByteBuffer)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.decompose(ByteBuffer)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.fromJSONObject(Object)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.fromString(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.getInstance(TypeParser)",9,0,n/a,11,1,1,6,2
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.getSerializer()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.getString(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toJSONString(ByteBuffer,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.toString()",5,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder.validate(ByteBuffer)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.ReversedType.ReversedType(AbstractType<T>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.marshal.ReversedType.asCQL3Type()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ReversedType.compareCustom(ByteBuffer,ByteBuffer)",4,0,n/a,13,1,2,5,4
"org.apache.cassandra.db.marshal.ReversedType.compareForCQL(ByteBuffer,ByteBuffer)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.ReversedType.fromJSONObject(Object)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.ReversedType.fromString(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.ReversedType.getInstance(AbstractType<T>)",3,3,n/a,10,1,1,5,2
"org.apache.cassandra.db.marshal.ReversedType.getInstance(TypeParser)",6,3,n/a,7,0,1,4,2
"org.apache.cassandra.db.marshal.ReversedType.getSerializer()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ReversedType.getString(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.ReversedType.isCompatibleWith(AbstractType<?>)",1,0,n/a,7,0,1,3,2
"org.apache.cassandra.db.marshal.ReversedType.isEmptyValueMeaningless()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ReversedType.isReversed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ReversedType.isValueCompatibleWith(AbstractType<?>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.ReversedType.references(AbstractType<?>)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.marshal.ReversedType.toJSONString(ByteBuffer,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.ReversedType.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ReversedType.valueLengthIfFixed()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.SetType.SetType(AbstractType<T>,boolean)",3,1,n/a,7,0,2,4,1
"org.apache.cassandra.db.marshal.SetType.compareCustom(ByteBuffer,ByteBuffer)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.SetType.freeze()",1,0,n/a,8,0,0,3,2
"org.apache.cassandra.db.marshal.SetType.fromJSONObject(Object)",11,0,n/a,18,1,1,11,5
"org.apache.cassandra.db.marshal.SetType.getElementsType()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.SetType.getInstance(AbstractType<T>,boolean)",3,5,n/a,11,1,2,6,3
"org.apache.cassandra.db.marshal.SetType.getInstance(TypeParser)",5,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.marshal.SetType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.SetType.isCompatibleWithFrozen(CollectionType<?>)",1,1,n/a,6,0,1,2,1
"org.apache.cassandra.db.marshal.SetType.isMultiCell()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.SetType.isValueCompatibleWithFrozen(CollectionType<?>)",1,0,n/a,6,0,1,1,1
"org.apache.cassandra.db.marshal.SetType.nameComparator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.SetType.references(AbstractType<?>)",2,0,n/a,5,0,1,1,2
"org.apache.cassandra.db.marshal.SetType.serializedValues(Iterator<Cell>)",6,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.marshal.SetType.toJSONString(ByteBuffer,int)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.SetType.toString(boolean)",13,0,n/a,13,0,1,9,5
"org.apache.cassandra.db.marshal.SetType.valueComparator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ShortType.ShortType()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ShortType.asCQL3Type()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.ShortType.compareCustom(ByteBuffer,ByteBuffer)",5,0,n/a,7,0,2,4,2
"org.apache.cassandra.db.marshal.ShortType.fromJSONObject(Object)",14,0,n/a,17,1,1,8,4
"org.apache.cassandra.db.marshal.ShortType.fromString(String)",5,1,n/a,16,1,1,7,3
"org.apache.cassandra.db.marshal.ShortType.getSerializer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.ShortType.toJSONString(ByteBuffer,int)",3,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.SimpleDateType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.asCQL3Type()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.fromJSONObject(Object)",6,0,n/a,13,1,1,3,2
"org.apache.cassandra.db.marshal.SimpleDateType.fromString(String)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.fromTimeInMillis(long)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.isCompatibleWith(AbstractType<?>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.isValueCompatibleWithInternal(AbstractType<?>)",0,0,n/a,5,0,1,1,2
"org.apache.cassandra.db.marshal.SimpleDateType.toJSONString(ByteBuffer,int)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.SimpleDateType.toTimeInMillis(ByteBuffer)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.TimeType.TimeType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.TimeType.asCQL3Type()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.TimeType.fromJSONObject(Object)",6,0,n/a,12,1,1,3,2
"org.apache.cassandra.db.marshal.TimeType.fromString(String)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.TimeType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TimeType.isCompatibleWith(AbstractType<?>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.marshal.TimeType.isValueCompatibleWithInternal(AbstractType<?>)",0,0,n/a,5,0,1,1,2
"org.apache.cassandra.db.marshal.TimeType.toJSONString(ByteBuffer,int)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.TimeUUIDType()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.compareCustom(ByteBuffer,ByteBuffer)",18,0,n/a,28,1,2,19,5
"org.apache.cassandra.db.marshal.TimeUUIDType.fromJSONObject(Object)",6,0,n/a,13,1,1,3,2
"org.apache.cassandra.db.marshal.TimeUUIDType.fromString(String)",6,1,n/a,9,0,1,6,4
"org.apache.cassandra.db.marshal.TimeUUIDType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.reorderTimestampBytes(long)",0,2,n/a,6,0,1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.signedBytesToNativeLong(long)",0,2,n/a,7,0,1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.topbyte(long)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.TimeUUIDType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.TimestampType.TimestampType()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.TimestampType.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TimestampType.compareCustom(ByteBuffer,ByteBuffer)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.TimestampType.fromJSONObject(Object)",8,0,n/a,16,1,1,5,3
"org.apache.cassandra.db.marshal.TimestampType.fromString(String)",3,4,n/a,7,0,1,3,2
"org.apache.cassandra.db.marshal.TimestampType.fromTimeInMillis(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.TimestampType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TimestampType.isCompatibleWith(AbstractType<?>)",2,0,n/a,14,1,1,6,3
"org.apache.cassandra.db.marshal.TimestampType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TimestampType.isValueCompatibleWithInternal(AbstractType<?>)",0,0,n/a,5,0,1,1,3
"org.apache.cassandra.db.marshal.TimestampType.toJSONString(ByteBuffer,int)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.db.marshal.TimestampType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.TupleType.TupleType(List<AbstractType<?>>)",5,1,n/a,7,0,1,6,2
"org.apache.cassandra.db.marshal.TupleType.allTypes()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TupleType.asCQL3Type()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.TupleType.buildValue(ByteBuffer[])",8,2,n/a,21,2,1,11,5
"org.apache.cassandra.db.marshal.TupleType.compareCustom(ByteBuffer,ByteBuffer)",16,0,n/a,31,2,2,24,13
"org.apache.cassandra.db.marshal.TupleType.equals(Object)",1,0,n/a,8,0,1,4,2
"org.apache.cassandra.db.marshal.TupleType.fromJSONObject(Object)",24,0,n/a,29,2,1,17,7
"org.apache.cassandra.db.marshal.TupleType.fromString(String)",17,0,n/a,19,1,1,13,4
"org.apache.cassandra.db.marshal.TupleType.getInstance(TypeParser)",6,0,n/a,7,0,1,6,2
"org.apache.cassandra.db.marshal.TupleType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TupleType.getString(ByteBuffer)",15,0,n/a,24,2,1,17,5
"org.apache.cassandra.db.marshal.TupleType.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.TupleType.isCompatibleWith(AbstractType<?>)",6,0,n/a,18,1,1,13,5
"org.apache.cassandra.db.marshal.TupleType.isValueCompatibleWithInternal(AbstractType<?>)",6,0,n/a,18,1,1,13,5
"org.apache.cassandra.db.marshal.TupleType.references(AbstractType<?>)",2,0,n/a,10,0,1,6,4
"org.apache.cassandra.db.marshal.TupleType.size()",1,12,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TupleType.split(ByteBuffer)",7,0,n/a,16,1,1,10,4
"org.apache.cassandra.db.marshal.TupleType.toJSONString(ByteBuffer,int)",10,0,n/a,16,1,2,11,4
"org.apache.cassandra.db.marshal.TupleType.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.TupleType.type(int)",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.TupleType.validate(ByteBuffer)",15,0,n/a,24,1,1,17,7
"org.apache.cassandra.db.marshal.TypeParser.TypeParser(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.TypeParser.TypeParser(String,int)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.db.marshal.TypeParser.fromHex(String)",3,3,n/a,12,1,1,4,2
"org.apache.cassandra.db.marshal.TypeParser.getAbstractType(String)",5,2,n/a,15,1,1,6,3
"org.apache.cassandra.db.marshal.TypeParser.getAbstractType(String,TypeParser)",10,2,n/a,22,1,2,10,4
"org.apache.cassandra.db.marshal.TypeParser.getAliasParameters()",23,0,n/a,39,2,0,27,11
"org.apache.cassandra.db.marshal.TypeParser.getCollectionsParameters()",20,0,n/a,37,2,0,25,8
"org.apache.cassandra.db.marshal.TypeParser.getKeyValueParameters()",19,0,n/a,32,2,0,21,8
"org.apache.cassandra.db.marshal.TypeParser.getRawAbstractType(Class<? extends AbstractType<?>>)",4,1,n/a,12,1,1,4,2
"org.apache.cassandra.db.marshal.TypeParser.getRawAbstractType(Class<? extends AbstractType<?>>,TypeParser)",8,1,n/a,18,1,2,7,3
"org.apache.cassandra.db.marshal.TypeParser.getTypeParameters()",13,0,n/a,28,2,0,16,6
"org.apache.cassandra.db.marshal.TypeParser.getUserTypeParameters()",27,0,n/a,37,2,0,25,7
"org.apache.cassandra.db.marshal.TypeParser.isBlank(int)",0,2,n/a,4,0,1,1,3
"org.apache.cassandra.db.marshal.TypeParser.isEOS()",1,8,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TypeParser.isEOS(String,int)",1,4,n/a,4,0,2,1,1
"org.apache.cassandra.db.marshal.TypeParser.isIdentifierChar(int)",0,2,n/a,9,0,1,1,11
"org.apache.cassandra.db.marshal.TypeParser.parse()",7,4,n/a,13,0,0,6,3
"org.apache.cassandra.db.marshal.TypeParser.parse(CharSequence)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.marshal.TypeParser.parse(String)",13,1,n/a,28,0,1,19,8
"org.apache.cassandra.db.marshal.TypeParser.readNextIdentifier()",4,8,n/a,8,0,0,4,3
"org.apache.cassandra.db.marshal.TypeParser.skipBlank()",1,10,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.TypeParser.skipBlank(String,int)",3,3,n/a,6,0,2,3,3
"org.apache.cassandra.db.marshal.TypeParser.skipBlankAndComma()",3,7,n/a,22,2,0,11,5
"org.apache.cassandra.db.marshal.TypeParser.stringifyAliasesParameters(Map<Byte, AbstractType<?>>)",21,0,n/a,21,1,1,11,3
"org.apache.cassandra.db.marshal.TypeParser.stringifyCollectionsParameters(Map<ByteBuffer, ? extends CollectionType>)",12,0,n/a,16,1,1,11,3
"org.apache.cassandra.db.marshal.TypeParser.stringifyTypeParameters(List<AbstractType<?>>)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.marshal.TypeParser.stringifyTypeParameters(List<AbstractType<?>>,boolean)",8,1,n/a,14,1,2,8,3
"org.apache.cassandra.db.marshal.TypeParser.stringifyUserTypeParameters(String,ByteBuffer,List<ByteBuffer>,List<AbstractType<?>>)",17,0,n/a,14,1,4,10,2
"org.apache.cassandra.db.marshal.TypeParser.throwSyntaxError(String)",2,7,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.UTF8Type()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.db.marshal.UTF8Type.asCQL3Type()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.UTF8Type.fromJSONObject(Object)",6,0,n/a,13,1,1,3,2
"org.apache.cassandra.db.marshal.UTF8Type.fromString(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.UTF8Type.getSerializer()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.UTF8Type.isCompatibleWith(AbstractType<?>)",0,0,n/a,7,0,1,1,2
"org.apache.cassandra.db.marshal.UTF8Type.toJSONString(ByteBuffer,int)",5,0,n/a,12,1,2,3,2
"org.apache.cassandra.db.marshal.UUIDType.UUIDType()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.UUIDType.asCQL3Type()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.UUIDType.compareCustom(ByteBuffer,ByteBuffer)",13,0,n/a,39,1,2,23,8
"org.apache.cassandra.db.marshal.UUIDType.fromJSONObject(Object)",6,0,n/a,13,1,1,3,2
"org.apache.cassandra.db.marshal.UUIDType.fromString(String)",3,1,n/a,9,0,1,4,2
"org.apache.cassandra.db.marshal.UUIDType.getSerializer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.UUIDType.isEmptyValueMeaningless()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.UUIDType.isValueCompatibleWithInternal(AbstractType<?>)",0,0,n/a,5,0,1,1,2
"org.apache.cassandra.db.marshal.UUIDType.parse(String)",8,1,n/a,17,2,1,7,4
"org.apache.cassandra.db.marshal.UUIDType.valueLengthIfFixed()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.UUIDType.version(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.UserType.UserType(String,ByteBuffer,List<ByteBuffer>,List<AbstractType<?>>)",9,3,n/a,20,2,4,10,3
"org.apache.cassandra.db.marshal.UserType.asCQL3Type()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.UserType.equals(Object)",4,0,n/a,8,0,1,4,5
"org.apache.cassandra.db.marshal.UserType.fieldName(int)",1,10,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.UserType.fieldNameAsString(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.UserType.fieldNames()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.UserType.fieldType(int)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.marshal.UserType.fieldTypes()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.UserType.fromJSONObject(Object)",25,0,n/a,39,2,1,23,9
"org.apache.cassandra.db.marshal.UserType.getInstance(TypeParser)",9,0,n/a,14,1,1,9,2
"org.apache.cassandra.db.marshal.UserType.getNameAsString()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.db.marshal.UserType.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.UserType.toJSONString(ByteBuffer,int)",17,0,n/a,23,1,2,18,5
"org.apache.cassandra.db.marshal.UserType.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.marshal.UserType.validate(ByteBuffer)",17,0,n/a,25,1,1,17,7
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractBTreePartition(CFMetaData,DecoratedKey)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractIterator.AbstractIterator(ColumnFilter,boolean)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractIterator.AbstractIterator(Holder,ColumnFilter,boolean)",2,1,n/a,6,0,3,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractIterator.AbstractIterator(Holder,Row,ColumnFilter,boolean)",3,2,n/a,14,0,4,3,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.Holder.Holder(PartitionColumns,Object[],DeletionInfo,Row,EncodingStats)",0,3,n/a,8,0,5,5,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SliceableIterator.SliceableIterator(ColumnFilter,boolean)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SliceableIterator.computeNext()",4,0,n/a,8,0,0,5,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SliceableIterator.slice(Slice)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SlicesIterator.SlicesIterator(ColumnFilter,Slices,boolean,Holder,Row)",1,1,n/a,9,0,5,2,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SlicesIterator.computeNext()",7,0,n/a,17,2,0,10,6
"org.apache.cassandra.db.partitions.AbstractBTreePartition.build(RowIterator,DeletionInfo,boolean,int)",14,0,n/a,22,1,4,14,4
"org.apache.cassandra.db.partitions.AbstractBTreePartition.build(UnfilteredRowIterator,int)",18,0,n/a,20,1,2,14,4
"org.apache.cassandra.db.partitions.AbstractBTreePartition.canHaveShadowedData()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.AbstractBTreePartition.columns()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.deletionInfo()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.getRow(Clustering)",5,1,n/a,7,0,1,2,4
"org.apache.cassandra.db.partitions.AbstractBTreePartition.hasRows()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.holder()",n/a,13,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.AbstractBTreePartition.isEmpty()",4,0,n/a,5,0,0,2,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.iterator()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.lastRow()",4,0,n/a,7,0,0,4,2
"org.apache.cassandra.db.partitions.AbstractBTreePartition.merge(Iterator<Row>,Iterator<RangeTombstone>,ColumnFilter,boolean,Holder,Row)",3,1,n/a,8,0,6,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.metadata()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.partitionKey()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.partitionLevelDeletion()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.rowCount()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.searchIterator(ColumnFilter,boolean)",16,1,n/a,16,2,2,13,6
"org.apache.cassandra.db.partitions.AbstractBTreePartition.sliceIterator(ColumnFilter,Slice,boolean,Holder,Row)",8,3,n/a,8,0,5,5,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.sliceableUnfilteredIterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.sliceableUnfilteredIterator(ColumnFilter,boolean)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.staticRow()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.staticRow(Holder,ColumnFilter,boolean)",6,3,n/a,8,0,3,5,5
"org.apache.cassandra.db.partitions.AbstractBTreePartition.stats()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.toString()",17,0,n/a,15,0,0,7,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(ColumnFilter,Slices,boolean)",2,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(Holder,ColumnFilter,Slices,boolean)",8,1,n/a,12,1,4,5,3
"org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator.close()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.AtomicBTreePartition(CFMetaData,DecoratedKey,MemtableAllocator)",1,1,n/a,7,0,3,3,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.RowUpdater(AtomicBTreePartition,MemtableAllocator,Group,UpdateTransaction)",2,1,n/a,9,0,4,6,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.abort(Row)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.abortEarly()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.allocated(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.apply(Row)",9,1,n/a,11,0,1,8,2
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.apply(Row,Row)",13,1,n/a,14,0,2,11,2
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.builder(Clustering)",2,2,n/a,10,0,1,6,3
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.discard(Row)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.finish()",3,1,n/a,5,0,0,2,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater.reset()",3,1,n/a,12,1,0,7,3
"org.apache.cassandra.db.partitions.AtomicBTreePartition.addAllWithSizeDelta(PartitionUpdate,Group,UpdateTransaction)",45,0,n/a,74,4,3,41,15
"org.apache.cassandra.db.partitions.AtomicBTreePartition.avoidReservedValues(int)",0,1,n/a,6,0,1,3,3
"org.apache.cassandra.db.partitions.AtomicBTreePartition.canHaveShadowedData()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.holder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.AtomicBTreePartition.updateWastedAllocationTracker(long)",4,1,n/a,33,2,1,15,8
"org.apache.cassandra.db.partitions.AtomicBTreePartition.usePessimisticLocking()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.BasePartitionIterator.close()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.CachedBTreePartition.CachedBTreePartition(CFMetaData,DecoratedKey,Holder,int,int,int,int,int)",1,2,n/a,16,0,8,6,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.Serializer.deserialize(DataInputPlus)",10,8,n/a,31,1,1,13,2
"org.apache.cassandra.db.partitions.CachedBTreePartition.Serializer.serialize(CachedPartition,DataOutputPlus)",10,8,n/a,16,1,2,11,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.Serializer.serializedSize(CachedPartition)",10,8,n/a,16,1,1,5,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.cachedLiveRows()",0,0,n/a,13,0,0,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.create(UnfilteredRowIterator,int)",1,1,n/a,14,0,2,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.create(UnfilteredRowIterator,int,int)",9,1,n/a,48,3,3,18,7
"org.apache.cassandra.db.partitions.CachedBTreePartition.nonExpiringLiveCells()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.nonTombstoneCellCount()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.CachedBTreePartition.rowsWithNonExpiringCells()",0,0,n/a,13,0,0,1,1
"org.apache.cassandra.db.partitions.CachedPartition.cachedLiveRows()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.CachedPartition.lastRow()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.CachedPartition.nonExpiringLiveCells()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.CachedPartition.nonTombstoneCellCount()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.CachedPartition.rowCount()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.CachedPartition.rowsWithNonExpiringCells()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.FilteredPartition.FilteredPartition(RowIterator)",4,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.partitions.FilteredPartition.create(RowIterator)",1,2,n/a,10,0,1,1,1
"org.apache.cassandra.db.partitions.FilteredPartition.rowIterator()",9,0,n/a,4,2,0,10,2
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.ImmutableBTreePartition(CFMetaData,DecoratedKey,Holder)",1,1,n/a,7,0,3,2,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.ImmutableBTreePartition(CFMetaData,DecoratedKey,PartitionColumns,Row,Object[],DeletionInfo,EncodingStats)",2,1,n/a,11,0,7,2,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.canHaveShadowedData()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.create(UnfilteredRowIterator)",1,2,n/a,13,0,1,1,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.create(UnfilteredRowIterator,int)",4,1,n/a,15,0,2,1,1
"org.apache.cassandra.db.partitions.ImmutableBTreePartition.holder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.Partition.columns()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.getRow(Clustering)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.isEmpty()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.metadata()",n/a,7,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.partitionKey()",n/a,9,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.partitionLevelDeletion()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.searchIterator(ColumnFilter,boolean)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.stats()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.unfilteredIterator()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.Partition.unfilteredIterator(ColumnFilter,Slices,boolean)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.partitions.PartitionIterators.PartitionIterators()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.partitions.PartitionIterators.SingletonPartitionIterator.SingletonPartitionIterator(RowIterator)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.partitions.PartitionIterators.SingletonPartitionIterator.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.PartitionIterators.SingletonPartitionIterator.computeNext()",1,1,n/a,7,0,0,4,2
"org.apache.cassandra.db.partitions.PartitionIterators.concat(List<PartitionIterator>)",7,0,n/a,6,2,1,7,3
"org.apache.cassandra.db.partitions.PartitionIterators.consume(PartitionIterator)",4,0,n/a,11,2,1,4,3
"org.apache.cassandra.db.partitions.PartitionIterators.digest(PartitionIterator,MessageDigest)",3,0,n/a,10,2,2,3,2
"org.apache.cassandra.db.partitions.PartitionIterators.getOnlyElement(PartitionIterator,SinglePartitionReadCommand)",11,0,n/a,8,2,2,6,2
"org.apache.cassandra.db.partitions.PartitionIterators.loggingIterator(PartitionIterator,String)",3,0,n/a,4,2,2,3,1
"org.apache.cassandra.db.partitions.PartitionIterators.singletonIterator(RowIterator)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.partitions.PartitionStatisticsCollector.update(Cell)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.partitions.PartitionStatisticsCollector.update(DeletionTime)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.partitions.PartitionStatisticsCollector.update(LivenessInfo)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.partitions.PartitionStatisticsCollector.updateColumnSetPerRow(long)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.partitions.PartitionStatisticsCollector.updateHasLegacyCounterShards(boolean)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.CounterMark(Row,ColumnDefinition,CellPath)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.clustering()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.column()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.path()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.setValue(ByteBuffer)",1,0,n/a,7,0,1,2,1
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark.value()",4,0,n/a,6,0,0,1,2
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdate(CFMetaData,ByteBuffer,PartitionColumns,int)",2,4,n/a,10,0,4,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdate(CFMetaData,DecoratedKey,Holder,MutableDeletionInfo,boolean)",1,7,n/a,12,0,5,5,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdate(CFMetaData,DecoratedKey,PartitionColumns,MutableDeletionInfo,int,boolean)",4,1,n/a,13,0,6,5,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdate(CFMetaData,DecoratedKey,PartitionColumns,int)",2,5,n/a,7,0,4,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserialize(DataInputPlus,int,Flag,ByteBuffer)",2,0,n/a,13,1,4,5,2
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserialize(DataInputPlus,int,Flag,DecoratedKey)",3,0,n/a,13,1,4,4,2
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserialize30(DataInputPlus,int,Flag)",18,2,n/a,29,2,3,17,4
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.deserializePre30(DataInputPlus,int,Flag,ByteBuffer)",2,2,n/a,8,1,4,3,1
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.serialize(PartitionUpdate,DataOutputPlus,int)",7,4,n/a,16,2,3,6,2
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer.serializedSize(PartitionUpdate,int)",6,4,n/a,10,1,2,4,2
"org.apache.cassandra.db.partitions.PartitionUpdate.add(RangeTombstone)",2,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.partitions.PartitionUpdate.add(Row)",17,2,n/a,34,1,1,9,4
"org.apache.cassandra.db.partitions.PartitionUpdate.addPartitionDeletion(DeletionTime)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.partitions.PartitionUpdate.allowNewUpdates()",2,1,n/a,20,0,0,5,3
"org.apache.cassandra.db.partitions.PartitionUpdate.assertNotBuilt()",1,3,n/a,5,0,0,2,2
"org.apache.cassandra.db.partitions.PartitionUpdate.build()",7,3,n/a,15,0,0,11,2
"org.apache.cassandra.db.partitions.PartitionUpdate.builder(int)",3,2,n/a,6,0,1,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.canHaveShadowedData()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.collectCounterMarks()",10,0,n/a,24,2,0,9,4
"org.apache.cassandra.db.partitions.PartitionUpdate.columns()",0,7,n/a,8,0,0,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.dataSize()",3,1,n/a,16,1,0,6,3
"org.apache.cassandra.db.partitions.PartitionUpdate.emptyUpdate(CFMetaData,DecoratedKey)",4,3,n/a,14,0,2,3,1
"org.apache.cassandra.db.partitions.PartitionUpdate.fromBytes(ByteBuffer,int,DecoratedKey)",3,2,n/a,26,1,3,5,4
"org.apache.cassandra.db.partitions.PartitionUpdate.fromIterator(RowIterator)",5,1,n/a,6,0,1,3,1
"org.apache.cassandra.db.partitions.PartitionUpdate.fromIterator(UnfilteredRowIterator)",4,1,n/a,12,0,1,3,1
"org.apache.cassandra.db.partitions.PartitionUpdate.fullPartitionDelete(CFMetaData,ByteBuffer,long,int)",2,1,n/a,14,0,4,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.fullPartitionDelete(CFMetaData,DecoratedKey,long,int)",4,1,n/a,16,0,4,3,1
"org.apache.cassandra.db.partitions.PartitionUpdate.holder()",1,2,n/a,5,0,0,2,1
"org.apache.cassandra.db.partitions.PartitionUpdate.iterator()",2,6,n/a,14,0,0,2,1
"org.apache.cassandra.db.partitions.PartitionUpdate.maxTimestamp()",14,1,n/a,29,3,0,12,5
"org.apache.cassandra.db.partitions.PartitionUpdate.maybeBuild()",1,5,n/a,6,0,0,3,2
"org.apache.cassandra.db.partitions.PartitionUpdate.merge(List<PartitionUpdate>)",7,2,n/a,17,0,1,7,2
"org.apache.cassandra.db.partitions.PartitionUpdate.operationCount()",6,6,n/a,15,0,0,1,3
"org.apache.cassandra.db.partitions.PartitionUpdate.singleRowUpdate(CFMetaData,ByteBuffer,Row)",2,2,n/a,13,0,3,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.singleRowUpdate(CFMetaData,DecoratedKey,Row)",14,2,n/a,23,1,3,6,2
"org.apache.cassandra.db.partitions.PartitionUpdate.sliceableUnfilteredIterator(ColumnFilter,boolean)",2,2,n/a,6,0,2,2,1
"org.apache.cassandra.db.partitions.PartitionUpdate.stats()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.PartitionUpdate.toBytes(PartitionUpdate,int)",6,2,n/a,20,1,2,4,2
"org.apache.cassandra.db.partitions.PartitionUpdate.updateAllTimestamp(long)",8,3,n/a,23,0,1,6,1
"org.apache.cassandra.db.partitions.PartitionUpdate.validate()",4,4,n/a,14,1,0,4,3
"org.apache.cassandra.db.partitions.PurgeFunction.PurgeFunction(boolean,int,int,boolean)",1,1,n/a,9,0,4,3,4
"org.apache.cassandra.db.partitions.PurgeFunction.applyToDeletion(DeletionTime)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.partitions.PurgeFunction.applyToMarker(RangeTombstoneMarker)",10,0,n/a,26,2,1,12,6
"org.apache.cassandra.db.partitions.PurgeFunction.applyToPartition(UnfilteredRowIterator)",8,0,n/a,13,1,1,8,3
"org.apache.cassandra.db.partitions.PurgeFunction.applyToRow(Row)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.partitions.PurgeFunction.applyToStatic(Row)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.partitions.PurgeFunction.getMaxPurgeableTimestamp()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.PurgeFunction.onEmptyPartitionPostPurge(DecoratedKey)",0,1,n/a,4,0,1,0,1
"org.apache.cassandra.db.partitions.PurgeFunction.onNewPartition(DecoratedKey)",0,1,n/a,4,0,1,0,1
"org.apache.cassandra.db.partitions.PurgeFunction.updateProgress()",0,3,n/a,4,0,0,0,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.SingletonUnfilteredPartitionIterator(UnfilteredRowIterator,boolean)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.hasNext()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.isForThrift()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.metadata()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.next()",1,0,n/a,7,0,0,4,2
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterator.isForThrift()",n/a,3,8,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterator.metadata()",n/a,0,8,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.MergeListener.close()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.MergeListener.getRowMergeListener(DecoratedKey,List<UnfilteredRowIterator>)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.Serializer.deserialize(DataInputPlus,int,CFMetaData,ColumnFilter,Flag)",11,0,n/a,6,3,5,23,9
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.Serializer.serialize(UnfilteredPartitionIterator,ColumnFilter,DataOutputPlus,int)",7,0,n/a,14,2,4,7,2
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.UnfilteredPartitionIterators()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.digest(UnfilteredPartitionIterator,MessageDigest,int)",3,0,n/a,20,3,3,4,2
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.filter(UnfilteredPartitionIterator,int)",1,4,n/a,4,0,2,1,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.getOnlyElement(UnfilteredPartitionIterator,SinglePartitionReadCommand)",11,0,n/a,8,2,2,6,2
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.loggingIterator(UnfilteredPartitionIterator,String,boolean)",3,0,n/a,4,2,3,3,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.merge(List<? extends UnfilteredPartitionIterator>,int,MergeListener)",25,2,n/a,5,2,3,26,4
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.mergeAndFilter(List<UnfilteredPartitionIterator>,int,MergeListener)",2,0,n/a,5,0,3,1,1
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.mergeLazily(List<? extends UnfilteredPartitionIterator>,int)",21,0,n/a,5,4,2,17,2
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.serializerForIntraNode()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractCell.AbstractCell(ColumnDefinition)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.AbstractCell.digest(MessageDigest)",12,0,n/a,9,0,1,6,2
"org.apache.cassandra.db.rows.AbstractCell.equals(Object)",17,0,n/a,16,0,1,6,9
"org.apache.cassandra.db.rows.AbstractCell.hashCode()",8,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.rows.AbstractCell.livenessInfoString()",11,2,n/a,9,0,0,5,3
"org.apache.cassandra.db.rows.AbstractCell.toString()",24,0,n/a,17,1,0,7,4
"org.apache.cassandra.db.rows.AbstractCell.validate()",18,0,n/a,15,0,0,11,8
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.AbstractRangeTombstoneMarker(Bound)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.clustering()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isBoundary()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isClose(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.isOpen(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.kind()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.toString(CFMetaData,boolean)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker.validateData(CFMetaData)",5,0,n/a,10,1,1,7,3
"org.apache.cassandra.db.rows.AbstractRow.digest(MessageDigest)",10,0,n/a,9,0,1,6,2
"org.apache.cassandra.db.rows.AbstractRow.equals(Object)",10,0,n/a,12,0,1,6,5
"org.apache.cassandra.db.rows.AbstractRow.hasLiveData(int)",5,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.rows.AbstractRow.hashCode()",6,0,n/a,8,0,0,4,2
"org.apache.cassandra.db.rows.AbstractRow.isStatic()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractRow.kind()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractRow.toString(CFMetaData)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.AbstractRow.toString(CFMetaData,boolean)",56,1,n/a,55,4,2,33,12
"org.apache.cassandra.db.rows.AbstractRow.validateData(CFMetaData)",12,0,n/a,15,1,1,12,5
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.AbstractUnfilteredRowIterator(CFMetaData,DecoratedKey,DeletionTime,PartitionColumns,Row,boolean,EncodingStats)",0,0,n/a,16,0,7,7,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.close()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.columns()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.isReverseOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.partitionKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.partitionLevelDeletion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.staticRow()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator.stats()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.BTreeRow(Clustering,LivenessInfo,Deletion,Object[],int)",1,6,n/a,9,0,5,6,1
"org.apache.cassandra.db.rows.BTreeRow.BTreeRow(Clustering,Object[],int)",1,3,n/a,4,0,3,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.Builder(boolean)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.Builder(boolean,int)",3,2,n/a,7,0,2,4,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.CellResolver.CellResolver(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.CellResolver.resolve(Object[],int,int)",12,2,n/a,26,1,3,16,5
"org.apache.cassandra.db.rows.BTreeRow.Builder.ComplexColumnDeletion.ComplexColumnDeletion(ColumnDefinition,DeletionTime)",3,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.addCell(Cell)",5,1,n/a,6,0,1,3,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.addComplexDeletion(ColumnDefinition,DeletionTime)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.addPrimaryKeyLivenessInfo(LivenessInfo)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.addRowDeletion(Deletion)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.build()",8,0,n/a,16,0,0,11,4
"org.apache.cassandra.db.rows.BTreeRow.Builder.clustering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.isSorted()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.newRow(Clustering)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.BTreeRow.Builder.reset()",1,1,n/a,7,0,0,4,1
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.CellInLegacyOrderIterator(CFMetaData,boolean)",7,1,n/a,12,0,2,8,4
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.computeNext()",14,1,n/a,27,2,0,14,8
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.getComplexIdx()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.getComplexIdxAndIncrement()",1,2,n/a,6,0,0,3,1
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.getSimpleIdx()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.getSimpleIdxAndIncrement()",1,2,n/a,6,0,0,3,1
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator.makeComplexIterator(Object)",2,2,n/a,5,0,1,2,2
"org.apache.cassandra.db.rows.BTreeRow.CellIterator.computeNext()",8,1,n/a,19,2,0,11,6
"org.apache.cassandra.db.rows.BTreeRow.cells()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.cellsInLegacyOrder(CFMetaData,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.rows.BTreeRow.clustering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.columns()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.create(Clustering,LivenessInfo,Deletion,Object[])",8,0,n/a,11,1,4,5,3
"org.apache.cassandra.db.rows.BTreeRow.dataSize()",4,0,n/a,9,0,0,4,2
"org.apache.cassandra.db.rows.BTreeRow.deletion()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.emptyDeletedRow(Clustering,Deletion)",3,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.rows.BTreeRow.emptyRow(Clustering)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.BTreeRow.filter(ColumnFilter,CFMetaData)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.rows.BTreeRow.filter(ColumnFilter,DeletionTime,boolean,CFMetaData)",22,1,n/a,30,1,4,21,15
"org.apache.cassandra.db.rows.BTreeRow.getCell(ColumnDefinition)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.BTreeRow.getCell(ColumnDefinition,CellPath)",3,0,n/a,8,0,2,5,2
"org.apache.cassandra.db.rows.BTreeRow.getComplexColumnData(ColumnDefinition)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.BTreeRow.hasComplex()",3,0,n/a,6,0,0,2,2
"org.apache.cassandra.db.rows.BTreeRow.hasComplexDeletion()",5,0,n/a,12,1,0,6,4
"org.apache.cassandra.db.rows.BTreeRow.hasDeletion(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.BTreeRow.isEmpty()",5,0,n/a,6,0,0,1,3
"org.apache.cassandra.db.rows.BTreeRow.iterator()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.markCounterLocalToBeCleared()",5,0,n/a,6,0,0,1,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(Cell)",2,11,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(ColumnData)",4,11,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(ComplexColumnData)",4,11,n/a,11,1,1,6,3
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(DeletionTime)",1,11,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(LivenessInfo)",2,11,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.BTreeRow.minDeletionTime(Object[],LivenessInfo,DeletionTime)",6,2,n/a,11,1,3,6,3
"org.apache.cassandra.db.rows.BTreeRow.noCellLiveRow(Clustering,LivenessInfo)",4,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.rows.BTreeRow.primaryKeyLivenessInfo()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.purge(DeletionPurger,int)",6,0,n/a,8,0,2,5,4
"org.apache.cassandra.db.rows.BTreeRow.searchIterator()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.setValue(ColumnDefinition,CellPath,ByteBuffer)",5,0,n/a,12,0,3,4,2
"org.apache.cassandra.db.rows.BTreeRow.singleCellRow(Clustering,Cell)",10,1,n/a,7,0,2,4,2
"org.apache.cassandra.db.rows.BTreeRow.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.sortedBuilder()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BTreeRow.transformAndFilter(LivenessInfo,Deletion,Function<ColumnData, ColumnData>)",7,4,n/a,10,0,3,7,7
"org.apache.cassandra.db.rows.BTreeRow.unsharedHeapSizeExcludingData()",3,0,n/a,9,0,0,4,2
"org.apache.cassandra.db.rows.BTreeRow.unsortedBuilder(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.BTreeRow.updateAllTimestamp(long)",12,0,n/a,16,0,1,3,5
"org.apache.cassandra.db.rows.BaseRowIterator.columns()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.BaseRowIterator.isEmpty()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.BaseRowIterator.isReverseOrder()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.BaseRowIterator.metadata()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.BaseRowIterator.partitionKey()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.BaseRowIterator.staticRow()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.BufferCell.BufferCell(ColumnDefinition,long,int,int,ByteBuffer,CellPath)",2,11,n/a,10,0,6,7,1
"org.apache.cassandra.db.rows.BufferCell.Serializer.deserialize(DataInputPlus,LivenessInfo,ColumnDefinition,SerializationHeader,SerializationHelper)",19,0,n/a,33,2,5,19,14
"org.apache.cassandra.db.rows.BufferCell.Serializer.serialize(Cell,DataOutputPlus,LivenessInfo,SerializationHeader)",29,0,n/a,31,0,4,28,18
"org.apache.cassandra.db.rows.BufferCell.Serializer.serializedSize(Cell,LivenessInfo,SerializationHeader)",28,0,n/a,20,0,3,17,13
"org.apache.cassandra.db.rows.BufferCell.Serializer.skip(DataInputPlus,ColumnDefinition,SerializationHeader)",9,0,n/a,21,0,3,17,9
"org.apache.cassandra.db.rows.BufferCell.copy(AbstractAllocator)",4,0,n/a,6,0,1,3,3
"org.apache.cassandra.db.rows.BufferCell.dataSize()",5,0,n/a,8,0,0,1,2
"org.apache.cassandra.db.rows.BufferCell.expiring(ColumnDefinition,long,int,int,ByteBuffer)",1,1,n/a,4,0,5,1,1
"org.apache.cassandra.db.rows.BufferCell.expiring(ColumnDefinition,long,int,int,ByteBuffer,CellPath)",1,2,n/a,5,0,6,2,1
"org.apache.cassandra.db.rows.BufferCell.isCounterCell()",3,1,n/a,4,0,0,1,2
"org.apache.cassandra.db.rows.BufferCell.isExpiring()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BufferCell.isLive(int)",0,1,n/a,4,0,1,1,3
"org.apache.cassandra.db.rows.BufferCell.isTombstone()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.db.rows.BufferCell.live(CFMetaData,ColumnDefinition,long,ByteBuffer)",1,4,n/a,4,0,4,1,1
"org.apache.cassandra.db.rows.BufferCell.live(CFMetaData,ColumnDefinition,long,ByteBuffer,CellPath)",3,1,n/a,6,0,5,3,2
"org.apache.cassandra.db.rows.BufferCell.localDeletionTime()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BufferCell.markCounterLocalToBeCleared()",6,0,n/a,7,0,0,4,3
"org.apache.cassandra.db.rows.BufferCell.path()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BufferCell.purge(DeletionPurger,int)",4,0,n/a,21,2,2,6,4
"org.apache.cassandra.db.rows.BufferCell.timestamp()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BufferCell.tombstone(ColumnDefinition,long,int)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.db.rows.BufferCell.tombstone(ColumnDefinition,long,int,CellPath)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.db.rows.BufferCell.ttl()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BufferCell.unsharedHeapSizeExcludingData()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.db.rows.BufferCell.updateAllTimestamp(long)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.BufferCell.value()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.BufferCell.withUpdatedValue(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.Cell.Cell(ColumnDefinition)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.Cell.Serializer.deserialize(DataInputPlus,LivenessInfo,ColumnDefinition,SerializationHeader,SerializationHelper)",n/a,0,0,n/a,n/a,5,n/a,n/a
"org.apache.cassandra.db.rows.Cell.Serializer.serialize(Cell,DataOutputPlus,LivenessInfo,SerializationHeader)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.rows.Cell.Serializer.serializedSize(Cell,LivenessInfo,SerializationHeader)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.rows.Cell.Serializer.skip(DataInputPlus,ColumnDefinition,SerializationHeader)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.db.rows.Cell.copy(AbstractAllocator)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Cell.isCounterCell()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.isExpiring()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.isLive(int)",n/a,5,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Cell.isTombstone()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.localDeletionTime()",n/a,5,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.markCounterLocalToBeCleared()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.path()",n/a,4,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.purge(DeletionPurger,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.Cell.timestamp()",n/a,11,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.ttl()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.value()",n/a,50,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cell.withUpdatedValue(ByteBuffer)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.CollectionCellPath(ByteBuffer)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.copy(AbstractAllocator)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.get(int)",0,13,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.size()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath.unsharedHeapSizeExcludingData()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath.copy(AbstractAllocator)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath.get(int)",1,13,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath.size()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath.unsharedHeapSizeExcludingData()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.CellPath.Serializer.deserialize(DataInputPlus)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.CellPath.Serializer.serialize(CellPath,DataOutputPlus)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.CellPath.Serializer.serializedSize(CellPath)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.CellPath.Serializer.skip(DataInputPlus)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.CellPath.copy(AbstractAllocator)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.CellPath.create(ByteBuffer)",1,7,n/a,6,0,1,2,1
"org.apache.cassandra.db.rows.CellPath.dataSize()",3,0,n/a,7,0,0,6,2
"org.apache.cassandra.db.rows.CellPath.digest(MessageDigest)",4,0,n/a,5,0,1,4,2
"org.apache.cassandra.db.rows.CellPath.equals(Object)",6,0,n/a,13,0,1,11,5
"org.apache.cassandra.db.rows.CellPath.get(int)",n/a,13,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.CellPath.hashCode()",3,0,n/a,8,0,0,6,2
"org.apache.cassandra.db.rows.CellPath.size()",n/a,11,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.CellPath.unsharedHeapSizeExcludingData()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Cells.Cells()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.rows.Cells.collectStats(Cell,PartitionStatisticsCollector)",4,0,n/a,12,0,2,3,2
"org.apache.cassandra.db.rows.Cells.getNext(Iterator<Cell>)",2,6,n/a,4,0,1,1,3
"org.apache.cassandra.db.rows.Cells.reconcile(Cell,Cell,DeletionTime,Builder,int)",9,3,n/a,50,2,5,11,9
"org.apache.cassandra.db.rows.Cells.reconcile(Cell,Cell,int)",31,10,n/a,61,2,3,22,14
"org.apache.cassandra.db.rows.Cells.reconcileComplex(ColumnDefinition,Iterator<Cell>,Iterator<Cell>,DeletionTime,Builder,int)",14,0,n/a,66,2,6,16,7
"org.apache.cassandra.db.rows.ColumnData.ColumnData(ColumnDefinition)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.ColumnData.column()",0,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.rows.ColumnData.dataSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.ColumnData.digest(MessageDigest)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.ColumnData.markCounterLocalToBeCleared()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.ColumnData.purge(DeletionPurger,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.ColumnData.unsharedHeapSizeExcludingData()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.ColumnData.updateAllTimestamp(long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.ColumnData.validate()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.ComplexColumnData.Builder.addCell(Cell)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.ComplexColumnData.Builder.addComplexDeletion(DeletionTime)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.Builder.build()",4,0,n/a,6,0,0,3,3
"org.apache.cassandra.db.rows.ComplexColumnData.Builder.newColumn(ColumnDefinition)",4,0,n/a,7,0,1,5,2
"org.apache.cassandra.db.rows.ComplexColumnData.ComplexColumnData(ColumnDefinition,Object[],DeletionTime)",3,3,n/a,9,0,3,5,2
"org.apache.cassandra.db.rows.ComplexColumnData.builder()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.cellsCount()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.complexDeletion()",0,2,n/a,15,0,0,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.dataSize()",2,0,n/a,7,0,0,4,2
"org.apache.cassandra.db.rows.ComplexColumnData.digest(MessageDigest)",3,0,n/a,7,0,1,4,3
"org.apache.cassandra.db.rows.ComplexColumnData.equals(Object)",6,0,n/a,12,0,1,6,5
"org.apache.cassandra.db.rows.ComplexColumnData.filter(ColumnFilter,DeletionTime,DroppedColumn)",8,0,n/a,13,0,3,5,10
"org.apache.cassandra.db.rows.ComplexColumnData.getCell(CellPath)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.getCellByIndex(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.hasCells()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.hashCode()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.iterator()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.markCounterLocalToBeCleared()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.purge(DeletionPurger,int)",4,0,n/a,5,0,2,2,3
"org.apache.cassandra.db.rows.ComplexColumnData.reverseIterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.ComplexColumnData.setValue(CellPath,ByteBuffer)",5,0,n/a,7,0,2,2,1
"org.apache.cassandra.db.rows.ComplexColumnData.transformAndFilter(DeletionTime,Function<? super Cell, ? extends Cell>)",3,4,n/a,9,0,2,6,5
"org.apache.cassandra.db.rows.ComplexColumnData.unsharedHeapSizeExcludingData()",2,0,n/a,8,0,0,4,2
"org.apache.cassandra.db.rows.ComplexColumnData.updateAllTimestamp(long)",5,0,n/a,5,0,1,2,2
"org.apache.cassandra.db.rows.ComplexColumnData.validate()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.db.rows.CounterCells.CounterCells()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.rows.CounterCells.hasLegacyShards(Cell)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.collect(Row,Iterator<Row>,DeletionInfo)",8,0,n/a,10,0,3,7,3
"org.apache.cassandra.db.rows.EncodingStats.Collector.get()",1,1,n/a,6,0,0,1,4
"org.apache.cassandra.db.rows.EncodingStats.Collector.update(Cell)",10,1,n/a,13,1,1,6,3
"org.apache.cassandra.db.rows.EncodingStats.Collector.update(DeletionTime)",5,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.rows.EncodingStats.Collector.update(LivenessInfo)",8,1,n/a,11,1,1,6,3
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateColumnSetPerRow(long)",0,1,n/a,3,0,1,0,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateHasLegacyCounterShards(boolean)",0,1,n/a,4,0,1,0,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateLocalDeletionTime(int)",1,4,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateTTL(int)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.EncodingStats.Collector.updateTimestamp(long)",1,3,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.EncodingStats.EncodingStats(long,int,int)",0,4,n/a,12,0,3,3,3
"org.apache.cassandra.db.rows.EncodingStats.Serializer.deserialize(DataInputPlus)",4,0,n/a,7,0,1,4,1
"org.apache.cassandra.db.rows.EncodingStats.Serializer.serialize(EncodingStats,DataOutputPlus)",3,0,n/a,6,0,2,3,1
"org.apache.cassandra.db.rows.EncodingStats.Serializer.serializedSize(EncodingStats)",3,0,n/a,6,0,1,1,1
"org.apache.cassandra.db.rows.EncodingStats.equals(Object)",2,0,n/a,10,0,1,6,6
"org.apache.cassandra.db.rows.EncodingStats.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.rows.EncodingStats.mergeWith(EncodingStats)",4,1,n/a,19,0,1,4,7
"org.apache.cassandra.db.rows.EncodingStats.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.LazilyInitializedUnfilteredRowIterator(DecoratedKey)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.close()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.columns()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.computeNext()",4,1,n/a,5,0,0,2,2
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.initializeIterator()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.isReverseOrder()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.maybeInit()",1,7,n/a,5,0,0,2,2
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.metadata()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.partitionKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.partitionLevelDeletion()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.staticRow()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator.stats()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.RangeTombstoneBoundMarker(Bound,DeletionTime)",4,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeBound(boolean)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeDeletionTime(boolean)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.closeIsInclusive(boolean)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.copy(AbstractAllocator)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.deletionTime()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.digest(MessageDigest)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.equals(Object)",2,0,n/a,9,0,1,4,3
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.exclusiveClose(boolean,ByteBuffer[],DeletionTime)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.exclusiveOpen(boolean,ByteBuffer[],DeletionTime)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.inclusiveClose(boolean,ByteBuffer[],DeletionTime)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.inclusiveOpen(boolean,ByteBuffer[],DeletionTime)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.isBoundary()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openBound(boolean)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openDeletionTime(boolean)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.openIsInclusive(boolean)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker.toString(CFMetaData)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.RangeTombstoneBoundaryMarker(Bound,DeletionTime,DeletionTime)",2,3,n/a,7,0,3,4,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeBound(boolean)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeDeletionTime(boolean)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.closeIsInclusive(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.copy(AbstractAllocator)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.createCorrespondingCloseMarker(boolean)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.createCorrespondingOpenMarker(boolean)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.digest(MessageDigest)",3,0,n/a,6,0,1,3,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.endDeletionTime()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.equals(Object)",3,0,n/a,10,0,1,4,4
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.exclusiveCloseInclusiveOpen(boolean,ByteBuffer[],DeletionTime,DeletionTime)",2,1,n/a,7,0,4,4,3
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.inclusiveCloseExclusiveOpen(boolean,ByteBuffer[],DeletionTime,DeletionTime)",2,1,n/a,7,0,4,4,3
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.isClose(boolean)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.isOpen(boolean)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.makeBoundary(boolean,Bound,Bound,DeletionTime,DeletionTime)",11,0,n/a,8,0,5,3,5
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openBound(boolean)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openDeletionTime(boolean)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.openIsInclusive(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.startDeletionTime()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker.toString(CFMetaData)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.Merger(int,DeletionTime,boolean)",0,0,n/a,7,0,3,4,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.activeDeletion()",2,0,n/a,7,0,0,2,2
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.add(int,RangeTombstoneMarker)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.clear()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.currentOpenDeletionTimeInMerged()",1,3,n/a,8,0,0,4,3
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.merge()",14,0,n/a,39,1,0,16,8
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.mergedMarkers()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger.updateOpenMarkers()",3,1,n/a,22,1,0,15,8
"org.apache.cassandra.db.rows.RangeTombstoneMarker.closeBound(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.closeDeletionTime(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.closeIsInclusive(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.clustering()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.copy(AbstractAllocator)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.isBoundary()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.isClose(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.isOpen(boolean)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.openBound(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.openDeletionTime(boolean)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.openIsInclusive(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.Builder.addCell(Cell)",n/a,4,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.Builder.addComplexDeletion(ColumnDefinition,DeletionTime)",n/a,3,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.Row.Builder.addPrimaryKeyLivenessInfo(LivenessInfo)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.Builder.addRowDeletion(Deletion)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.Builder.build()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.Builder.clustering()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.Builder.isSorted()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.Builder.newRow(Clustering)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.Deletion.Deletion(DeletionTime,boolean)",1,3,n/a,6,0,2,3,2
"org.apache.cassandra.db.rows.Row.Deletion.dataSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.Row.Deletion.deletes(LivenessInfo)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.digest(MessageDigest)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.Row.Deletion.equals(Object)",1,0,n/a,8,0,1,4,3
"org.apache.cassandra.db.rows.Row.Deletion.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.rows.Row.Deletion.isLive()",2,2,n/a,10,0,0,1,1
"org.apache.cassandra.db.rows.Row.Deletion.isShadowable()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.db.rows.Row.Deletion.isShadowedBy(LivenessInfo)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.Row.Deletion.regular(DeletionTime)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.Row.Deletion.shadowable(DeletionTime)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.supersedes(Deletion)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.supersedes(DeletionTime)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.Row.Deletion.time()",0,4,n/a,9,0,0,1,1
"org.apache.cassandra.db.rows.Row.Deletion.toString()",1,0,n/a,5,0,0,1,2
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.CellReducer(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.getReduced()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.onKeyChange()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.reduce(int,Cell)",2,4,n/a,5,0,2,2,3
"org.apache.cassandra.db.rows.Row.Merger.CellReducer.setActiveDeletion(DeletionTime)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.ColumnDataReducer(int,int,boolean)",4,1,n/a,8,0,3,5,3
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.getReduced()",19,2,n/a,44,2,0,25,10
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.onKeyChange()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.reduce(int,ColumnData)",2,4,n/a,5,0,2,2,1
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer.setActiveDeletion(DeletionTime)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.Row.Merger.Merger(int,int,boolean)",2,0,n/a,6,0,3,3,1
"org.apache.cassandra.db.rows.Row.Merger.add(int,Row)",1,0,n/a,7,0,2,4,1
"org.apache.cassandra.db.rows.Row.Merger.clear()",3,0,n/a,8,0,0,5,1
"org.apache.cassandra.db.rows.Row.Merger.merge(DeletionTime)",25,0,n/a,44,1,1,29,17
"org.apache.cassandra.db.rows.Row.Merger.mergedClustering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.Row.Merger.mergedRows()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.Row.cells()",n/a,9,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.cellsInLegacyOrder(CFMetaData,boolean)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.Row.clustering()",n/a,25,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.columns()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.dataSize()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.deletion()",n/a,6,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.filter(ColumnFilter,CFMetaData)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.Row.filter(ColumnFilter,DeletionTime,boolean,CFMetaData)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.rows.Row.getCell(ColumnDefinition)",n/a,40,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.getCell(ColumnDefinition,CellPath)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.Row.getComplexColumnData(ColumnDefinition)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.hasComplex()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.hasComplexDeletion()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.hasDeletion(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.hasLiveData(int)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Row.isEmpty()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.isStatic()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.markCounterLocalToBeCleared()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.primaryKeyLivenessInfo()",n/a,11,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.purge(DeletionPurger,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.Row.searchIterator()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.toString(CFMetaData,boolean)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.Row.unsharedHeapSizeExcludingData()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Row.updateAllTimestamp(long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.RowAndDeletionMergeIterator(CFMetaData,DecoratedKey,DeletionTime,ColumnFilter,Row,boolean,EncodingStats,Iterator<Row>,Iterator<RangeTombstone>,boolean)",3,0,n/a,18,0,10,6,2
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.closeBound(RangeTombstone)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.closeOpenedRange()",15,2,n/a,17,1,0,8,3
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.computeNext()",16,0,n/a,36,2,0,19,11
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.consumeNextRange()",0,2,n/a,6,0,0,3,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.consumeNextRow()",6,2,n/a,9,0,0,6,3
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.consumeOpenRange()",0,1,n/a,6,0,0,3,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.openBound(RangeTombstone)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.openRange()",4,2,n/a,6,0,0,3,2
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.updateNextRange()",5,3,n/a,9,1,0,4,5
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator.updateNextRow()",2,1,n/a,5,0,0,2,3
"org.apache.cassandra.db.rows.RowDiffListener.onCell(int,Clustering,Cell,Cell)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.rows.RowDiffListener.onComplexDeletion(int,Clustering,ColumnDefinition,DeletionTime,DeletionTime)",n/a,0,0,n/a,n/a,5,n/a,n/a
"org.apache.cassandra.db.rows.RowDiffListener.onDeletion(int,Clustering,Deletion,Deletion)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.rows.RowDiffListener.onPrimaryKeyLivenessInfo(int,Clustering,LivenessInfo,LivenessInfo)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.db.rows.RowIterator.isEmpty()",3,0,n/a,7,0,0,1,2
"org.apache.cassandra.db.rows.RowIterators.RowIterators()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.rows.RowIterators.digest(RowIterator,MessageDigest)",13,0,n/a,11,0,2,6,2
"org.apache.cassandra.db.rows.RowIterators.loggingIterator(RowIterator,String)",14,0,n/a,6,2,2,9,2
"org.apache.cassandra.db.rows.Rows.Rows()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.rows.Rows.collectStats(Row,PartitionStatisticsCollector)",14,0,n/a,40,4,2,19,5
"org.apache.cassandra.db.rows.Rows.copy(Row,Builder)",13,1,n/a,21,2,2,11,4
"org.apache.cassandra.db.rows.Rows.diff(RowDiffListener,Row,Row...)",70,0,n/a,5,7,3,61,35
"org.apache.cassandra.db.rows.Rows.merge(Row,Row,Builder,int)",41,2,n/a,72,2,4,40,24
"org.apache.cassandra.db.rows.Rows.merge(Row,Row,int)",3,0,n/a,6,0,3,3,1
"org.apache.cassandra.db.rows.SerializationHelper.SerializationHelper(CFMetaData,int,Flag)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.db.rows.SerializationHelper.SerializationHelper(CFMetaData,int,Flag,ColumnFilter)",1,1,n/a,7,0,4,4,1
"org.apache.cassandra.db.rows.SerializationHelper.canSkipValue(CellPath)",1,0,n/a,4,0,1,1,3
"org.apache.cassandra.db.rows.SerializationHelper.canSkipValue(ColumnDefinition)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.SerializationHelper.endOfComplexColumn()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.SerializationHelper.fetchedRegularColumns(SerializationHeader)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.SerializationHelper.fetchedStaticColumns(SerializationHeader)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.SerializationHelper.includes(CellPath)",1,0,n/a,4,0,1,1,3
"org.apache.cassandra.db.rows.SerializationHelper.includes(ColumnDefinition)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.SerializationHelper.isDropped(Cell,boolean)",3,0,n/a,5,0,2,2,3
"org.apache.cassandra.db.rows.SerializationHelper.isDroppedComplexDeletion(DeletionTime)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.SerializationHelper.maybeClearCounterValue(ByteBuffer)",4,0,n/a,6,0,1,1,4
"org.apache.cassandra.db.rows.SerializationHelper.startOfComplexColumn(ColumnDefinition)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.db.rows.SliceableUnfilteredRowIterator.slice(Slice)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Unfiltered.digest(MessageDigest)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Unfiltered.isRangeTombstoneMarker()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.Unfiltered.isRow()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.Unfiltered.kind()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.Unfiltered.toString(CFMetaData)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.Unfiltered.toString(CFMetaData,boolean)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.Unfiltered.validateData(CFMetaData)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIterator.isEmpty()",5,0,n/a,9,0,0,1,3
"org.apache.cassandra.db.rows.UnfilteredRowIterator.partitionLevelDeletion()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIterator.stats()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.Header.Header(SerializationHeader,DecoratedKey,boolean,boolean,DeletionTime,Row,int)",0,2,n/a,16,0,7,7,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.Header.toString()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserialize(DataInputPlus,int,CFMetaData,ColumnFilter,Flag)",2,0,n/a,4,0,5,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserialize(DataInputPlus,int,CFMetaData,Flag,Header)",9,1,n/a,12,3,5,9,4
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.deserializeHeader(CFMetaData,ColumnFilter,DataInputPlus,int,Flag)",11,1,n/a,21,1,5,16,5
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIterator,ColumnFilter,DataOutputPlus,int)",1,0,n/a,5,0,4,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIterator,ColumnFilter,DataOutputPlus,int,int)",5,1,n/a,9,0,5,2,1
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serialize(UnfilteredRowIterator,SerializationHeader,ColumnFilter,DataOutputPlus,int,int)",20,1,n/a,34,1,6,28,10
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.serializedSize(UnfilteredRowIterator,ColumnFilter,int,int)",19,0,n/a,28,0,4,19,6
"org.apache.cassandra.db.rows.UnfilteredRowIterators.MergeListener.close()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIterators.MergeListener.onMergedPartitionLevelDeletion(DeletionTime,DeletionTime[])",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIterators.MergeListener.onMergedRangeTombstoneMarkers(RangeTombstoneMarker,RangeTombstoneMarker[])",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIterators.MergeListener.onMergedRows(Row,Row[])",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowIterators()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.MergeReducer(int,boolean,int,MergeListener)",5,1,n/a,6,0,4,3,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.getReduced()",9,2,n/a,17,1,0,9,6
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.onKeyChange()",2,2,n/a,7,0,0,3,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.reduce(int,Unfiltered)",3,4,n/a,8,0,2,4,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer.trivialReduceIsTrivial()",0,1,n/a,6,0,0,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.UnfilteredRowMergeIterator(CFMetaData,List<UnfilteredRowIterator>,PartitionColumns,DeletionTime,int,boolean,MergeListener)",9,1,n/a,20,0,7,3,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.checkForInvalidInput(List<UnfilteredRowIterator>)",12,1,n/a,14,1,1,10,3
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.close()",2,0,n/a,7,0,0,3,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.collectColumns(List<UnfilteredRowIterator>)",8,1,n/a,15,1,1,10,4
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.collectPartitionLevelDeletion(List<UnfilteredRowIterator>,MergeListener)",7,1,n/a,18,1,2,14,7
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.computeNext()",3,0,n/a,10,1,0,5,3
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.create(List<UnfilteredRowIterator>,int,MergeListener)",10,2,n/a,26,2,3,7,3
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.mergeStaticRows(List<UnfilteredRowIterator>,Columns,int,MergeListener,DeletionTime)",15,1,n/a,20,0,5,15,6
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.mergeStats(List<UnfilteredRowIterator>)",2,1,n/a,7,0,1,4,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.cloningIterator(UnfilteredRowIterator,AbstractAllocator)",8,0,n/a,5,2,2,5,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.concat(UnfilteredRowIterator,UnfilteredRowIterator)",19,0,n/a,7,2,2,7,7
"org.apache.cassandra.db.rows.UnfilteredRowIterators.digest(UnfilteredRowIterator,MessageDigest,int)",18,7,n/a,25,1,3,11,3
"org.apache.cassandra.db.rows.UnfilteredRowIterators.filter(UnfilteredRowIterator,int)",1,6,n/a,11,0,2,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.loggingIterator(UnfilteredRowIterator,String,boolean)",18,0,n/a,6,2,3,11,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.merge(List<UnfilteredRowIterator>,int)",4,0,n/a,10,0,2,4,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators.merge(List<UnfilteredRowIterator>,int,MergeListener)",1,0,n/a,10,0,3,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.noRowsIterator(CFMetaData,DecoratedKey,Row,DeletionTime,boolean)",1,1,n/a,7,0,5,1,1
"org.apache.cassandra.db.rows.UnfilteredRowIterators.withValidation(UnfilteredRowIterator,String)",8,0,n/a,11,3,2,11,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.deserialize(DataInputPlus,SerializationHeader,SerializationHelper,Builder)",13,0,n/a,21,1,4,11,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeMarkerBody(DataInputPlus,SerializationHeader,Bound)",9,1,n/a,13,1,3,6,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeRowBody(DataInputPlus,SerializationHeader,SerializationHelper,int,int,Builder)",19,2,n/a,52,2,6,27,10
"org.apache.cassandra.db.rows.UnfilteredSerializer.deserializeStaticRow(DataInputPlus,SerializationHeader,SerializationHelper)",8,0,n/a,10,0,3,6,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.hasExtendedFlags(Row)",3,2,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.isEndOfPartition(int)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.isExtended(int)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.isStatic(int)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.kind(int)",0,3,n/a,4,0,1,1,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.readComplexColumn(ColumnDefinition,DataInputPlus,SerializationHeader,SerializationHelper,boolean,Builder,LivenessInfo)",13,1,n/a,26,2,7,13,7
"org.apache.cassandra.db.rows.UnfilteredSerializer.readExtendedFlags(DataInputPlus,int)",2,1,n/a,4,0,2,1,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.readSimpleColumn(ColumnDefinition,DataInputPlus,SerializationHeader,SerializationHelper,Builder,LivenessInfo)",5,1,n/a,14,1,6,5,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(RangeTombstoneMarker,SerializationHeader,DataOutputPlus,long,int)",15,4,n/a,21,1,5,10,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(Row,SerializationHeader,DataOutputPlus,long,int)",34,4,n/a,59,1,5,46,18
"org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(Unfiltered,SerializationHeader,DataOutputPlus,int)",2,0,n/a,6,0,4,2,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.serialize(Unfiltered,SerializationHeader,DataOutputPlus,long,int)",3,4,n/a,12,1,5,3,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializeStaticRow(Row,SerializationHeader,DataOutputPlus,int)",2,0,n/a,6,0,4,2,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedMarkerBodySize(RangeTombstoneMarker,SerializationHeader,long,int)",9,2,n/a,17,1,4,9,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedRowBodySize(Row,SerializationHeader,long,int)",26,2,n/a,31,1,4,23,8
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(RangeTombstoneMarker,SerializationHeader,long,int)",5,3,n/a,7,0,4,2,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(Row,SerializationHeader,long,int)",6,3,n/a,9,0,4,6,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(Unfiltered,SerializationHeader,int)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSize(Unfiltered,SerializationHeader,long,int)",3,4,n/a,6,0,4,1,2
"org.apache.cassandra.db.rows.UnfilteredSerializer.serializedSizeEndOfPartition()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.sizeOfComplexColumn(ComplexColumnData,boolean,LivenessInfo,SerializationHeader)",5,1,n/a,10,0,4,7,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.skipComplexColumn(DataInputPlus,ColumnDefinition,SerializationHeader,boolean)",3,1,n/a,9,0,4,5,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.skipMarkerBody(DataInputPlus)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.skipRowBody(DataInputPlus)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.db.rows.UnfilteredSerializer.skipStaticRow(DataInputPlus,SerializationHeader,SerializationHelper)",7,0,n/a,8,0,3,5,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.writeComplexColumn(ComplexColumnData,boolean,LivenessInfo,SerializationHeader,DataOutputPlus)",5,1,n/a,9,0,5,5,3
"org.apache.cassandra.db.rows.UnfilteredSerializer.writeEndOfPartition(DataOutputPlus)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.WrappingUnfilteredRowIterator(UnfilteredRowIterator)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.columns()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.hasNext()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.isReverseOrder()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.metadata()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.partitionKey()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.partitionLevelDeletion()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.staticRow()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator.stats()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.BaseIterator.BaseIterator(BaseIterator<? extends V, ? extends I, ?>)",1,0,n/a,8,0,1,4,1
"org.apache.cassandra.db.transform.BaseIterator.BaseIterator(I)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.transform.BaseIterator.apply(V,int)",1,1,n/a,7,0,2,3,2
"org.apache.cassandra.db.transform.BaseIterator.applyOne(V,Transformation)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.db.transform.BaseIterator.close()",6,0,n/a,12,2,0,9,4
"org.apache.cassandra.db.transform.BaseIterator.hasMoreContents()",1,0,n/a,6,0,0,1,2
"org.apache.cassandra.db.transform.BaseIterator.next()",2,0,n/a,8,0,0,5,3
"org.apache.cassandra.db.transform.BaseIterator.runOnClose(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.transform.BaseIterator.tryGetMoreContents()",7,1,n/a,32,2,0,22,6
"org.apache.cassandra.db.transform.BasePartitions.BasePartitions(BasePartitions<?, ? extends I>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.transform.BasePartitions.BasePartitions(I)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.transform.BasePartitions.add(Transformation)",3,0,n/a,6,0,1,3,1
"org.apache.cassandra.db.transform.BasePartitions.applyOne(BaseRowIterator<?>,Transformation)",1,1,n/a,4,0,2,1,2
"org.apache.cassandra.db.transform.BasePartitions.hasNext()",6,0,n/a,33,4,0,21,10
"org.apache.cassandra.db.transform.BasePartitions.runOnClose(int)",2,0,n/a,17,2,1,9,3
"org.apache.cassandra.db.transform.BaseRows.BaseRows(BaseRows<?, ? extends I>)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.transform.BaseRows.BaseRows(I)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.transform.BaseRows.add(Transformation)",4,0,n/a,9,0,1,4,1
"org.apache.cassandra.db.transform.BaseRows.applyOne(Unfiltered,Transformation)",2,1,n/a,9,0,2,1,3
"org.apache.cassandra.db.transform.BaseRows.columns()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.BaseRows.hasNext()",6,0,n/a,36,3,0,25,12
"org.apache.cassandra.db.transform.BaseRows.isReverseOrder()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.BaseRows.metadata()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.BaseRows.partitionKey()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.BaseRows.runOnClose(int)",2,0,n/a,18,2,1,9,3
"org.apache.cassandra.db.transform.BaseRows.staticRow()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.Filter.Filter(boolean,int)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.transform.Filter.applyToMarker(RangeTombstoneMarker)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.transform.Filter.applyToPartition(BaseRowIterator)",3,0,n/a,9,0,1,4,4
"org.apache.cassandra.db.transform.Filter.applyToRow(Row)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.transform.Filter.applyToStatic(Row)",2,0,n/a,7,0,1,4,3
"org.apache.cassandra.db.transform.Filter.closeIfEmpty(BaseRowIterator<?>)",2,1,n/a,9,1,1,4,2
"org.apache.cassandra.db.transform.FilteredPartitions.FilteredPartitions(Filter,UnfilteredPartitions)",2,1,n/a,6,0,2,2,1
"org.apache.cassandra.db.transform.FilteredPartitions.FilteredPartitions(PartitionIterator)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.db.transform.FilteredPartitions.FilteredPartitions(UnfilteredPartitionIterator,Filter)",2,1,n/a,6,0,2,2,1
"org.apache.cassandra.db.transform.FilteredPartitions.filter(UnfilteredPartitionIterator,int)",4,1,n/a,10,0,2,4,2
"org.apache.cassandra.db.transform.FilteredRows.FilteredRows(Filter,UnfilteredRows)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.transform.FilteredRows.FilteredRows(RowIterator)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.transform.FilteredRows.FilteredRows(UnfilteredRowIterator,Filter)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.transform.FilteredRows.filter(UnfilteredRowIterator,int)",2,4,n/a,7,0,2,1,1
"org.apache.cassandra.db.transform.FilteredRows.isEmpty()",3,0,n/a,5,0,0,1,2
"org.apache.cassandra.db.transform.MoreContents.moreContents()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.db.transform.MorePartitions.extend(PartitionIterator,MorePartitions<? super PartitionIterator>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.transform.MorePartitions.extend(UnfilteredPartitionIterator,MorePartitions<? super UnfilteredPartitionIterator>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.transform.MoreRows.extend(RowIterator,MoreRows<? super RowIterator>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.transform.MoreRows.extend(UnfilteredRowIterator,MoreRows<? super UnfilteredRowIterator>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.transform.Stack.MoreContentsHolder.MoreContentsHolder(MoreContents,int)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.db.transform.Stack.Stack()",0,1,n/a,5,0,0,2,1
"org.apache.cassandra.db.transform.Stack.Stack(Stack)",0,0,n/a,6,0,1,3,1
"org.apache.cassandra.db.transform.Stack.add(MoreContents)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.transform.Stack.add(Transformation)",1,0,n/a,6,0,1,3,2
"org.apache.cassandra.db.transform.Stack.refill(Stack,MoreContentsHolder,int)",2,0,n/a,10,0,3,4,1
"org.apache.cassandra.db.transform.Stack.resize(E[])",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.db.transform.Stack.splice(E[],int,E[],int,int)",3,2,n/a,12,0,5,9,4
"org.apache.cassandra.db.transform.StoppingTransformation.attachTo(BasePartitions)",0,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.transform.StoppingTransformation.attachTo(BaseRows)",0,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.transform.StoppingTransformation.onClose()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.db.transform.StoppingTransformation.onPartitionClose()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.db.transform.StoppingTransformation.stop()",1,3,n/a,11,0,0,3,2
"org.apache.cassandra.db.transform.StoppingTransformation.stopInPartition()",0,5,n/a,10,0,0,2,2
"org.apache.cassandra.db.transform.Transformation.add(E,MoreContents)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.db.transform.Transformation.add(E,Transformation)",1,4,n/a,5,0,2,2,1
"org.apache.cassandra.db.transform.Transformation.apply(PartitionIterator,Transformation<? super RowIterator>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.db.transform.Transformation.apply(RowIterator,Transformation<?>)",2,20,n/a,4,0,2,1,1
"org.apache.cassandra.db.transform.Transformation.apply(UnfilteredPartitionIterator,Transformation<? super UnfilteredRowIterator>)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.transform.Transformation.apply(UnfilteredRowIterator,Transformation<?>)",2,20,n/a,4,0,2,1,1
"org.apache.cassandra.db.transform.Transformation.applyToDeletion(DeletionTime)",0,0,n/a,10,0,1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToMarker(RangeTombstoneMarker)",0,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToPartition(I)",0,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToRow(Row)",0,0,n/a,7,0,1,1,1
"org.apache.cassandra.db.transform.Transformation.applyToStatic(Row)",0,0,n/a,10,0,1,1,1
"org.apache.cassandra.db.transform.Transformation.attachTo(BasePartitions)",0,0,n/a,2,0,1,0,1
"org.apache.cassandra.db.transform.Transformation.attachTo(BaseRows)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.db.transform.Transformation.mutable(PartitionIterator)",1,2,n/a,6,0,1,1,2
"org.apache.cassandra.db.transform.Transformation.mutable(RowIterator)",1,2,n/a,6,0,1,1,2
"org.apache.cassandra.db.transform.Transformation.mutable(UnfilteredPartitionIterator)",1,2,n/a,6,0,1,1,2
"org.apache.cassandra.db.transform.Transformation.mutable(UnfilteredRowIterator)",1,2,n/a,6,0,1,1,2
"org.apache.cassandra.db.transform.Transformation.onClose()",0,0,n/a,8,0,0,0,1
"org.apache.cassandra.db.transform.Transformation.onPartitionClose()",0,0,n/a,8,0,0,0,1
"org.apache.cassandra.db.transform.UnfilteredPartitions.UnfilteredPartitions(UnfilteredPartitionIterator)",2,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.transform.UnfilteredPartitions.isForThrift()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.UnfilteredPartitions.metadata()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.UnfilteredRows.UnfilteredRows(UnfilteredRowIterator)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.db.transform.UnfilteredRows.add(Transformation)",2,0,n/a,6,0,1,2,1
"org.apache.cassandra.db.transform.UnfilteredRows.isEmpty()",5,0,n/a,5,0,0,1,3
"org.apache.cassandra.db.transform.UnfilteredRows.partitionLevelDeletion()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.transform.UnfilteredRows.stats()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.TemporalRow.Resolver.resolve(Versions)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.db.view.TemporalRow.Set.Set(ColumnFamilyStore,Set<ColumnIdentifier>,ByteBuffer)",2,1,n/a,8,0,3,5,1
"org.apache.cassandra.db.view.TemporalRow.Set.addRow(Row,boolean)",7,0,n/a,13,1,2,6,3
"org.apache.cassandra.db.view.TemporalRow.Set.addRow(TemporalRow)",10,1,n/a,14,2,1,7,3
"org.apache.cassandra.db.view.TemporalRow.Set.getClustering(Clustering)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.hasTombstonedExisting()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.setTombstonedExisting()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.TemporalRow.Set.withNewViewPrimaryKey(Set<ColumnIdentifier>)",2,0,n/a,7,0,1,4,2
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.TemporalCell(ByteBuffer,long,int,int,boolean)",0,1,n/a,8,0,5,5,1
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.addToRow(TemporalRow,ColumnIdentifier,CellPath)",2,1,n/a,9,0,3,4,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.getEarliestCell()",1,1,n/a,12,0,0,5,4
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.getLatestCell()",1,1,n/a,11,0,0,4,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.getOldCellIfUpdated()",2,1,n/a,11,0,0,5,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions.setVersion(TemporalCell)",2,0,n/a,16,1,1,8,6
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.cell(ColumnDefinition,CellPath)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.equals(Object)",3,2,n/a,11,0,1,14,9
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.hashCode()",1,0,n/a,9,0,0,6,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.isLive(int)",0,2,n/a,4,0,1,1,3
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.reconcile(TemporalCell)",4,3,n/a,16,0,1,6,2
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.toString()",8,0,n/a,11,0,0,1,2
"org.apache.cassandra.db.view.TemporalRow.TemporalRow(ColumnFamilyStore,Set<ColumnIdentifier>,ByteBuffer,Row,int,boolean)",19,2,n/a,21,1,6,18,2
"org.apache.cassandra.db.view.TemporalRow.addCell(Cell,boolean)",7,1,n/a,4,0,2,1,1
"org.apache.cassandra.db.view.TemporalRow.addColumnValue(ColumnIdentifier,CellPath,long,int,int,ByteBuffer,boolean)",14,4,n/a,21,1,7,10,4
"org.apache.cassandra.db.view.TemporalRow.baseClusteringBuilder()",8,2,n/a,11,0,0,8,3
"org.apache.cassandra.db.view.TemporalRow.baseSlice()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.TemporalRow.clusteringValue(ColumnDefinition,Resolver)",13,0,n/a,28,2,2,14,7
"org.apache.cassandra.db.view.TemporalRow.deletionTime(AbstractBTreePartition)",13,0,n/a,12,0,1,9,5
"org.apache.cassandra.db.view.TemporalRow.equals(Object)",4,0,n/a,10,0,1,10,6
"org.apache.cassandra.db.view.TemporalRow.hashCode()",2,0,n/a,7,0,0,3,1
"org.apache.cassandra.db.view.TemporalRow.minValueIfSet(int,int,int)",1,3,n/a,8,0,3,5,3
"org.apache.cassandra.db.view.TemporalRow.minValueIfSet(long,long,long)",1,2,n/a,8,0,3,5,3
"org.apache.cassandra.db.view.TemporalRow.values(ColumnDefinition,Resolver)",9,1,n/a,16,1,2,9,4
"org.apache.cassandra.db.view.TemporalRow.viewClusteringLocalDeletionTime()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.TemporalRow.viewClusteringTimestamp()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.TemporalRow.viewClusteringTtl()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.View.Columns.Columns(List<ColumnDefinition>,List<ColumnDefinition>,List<ColumnDefinition>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.db.view.View.View(ViewDefinition,ColumnFamilyStore)",1,0,n/a,9,0,2,5,1
"org.apache.cassandra.db.view.View.build()",3,0,n/a,10,1,0,5,2
"org.apache.cassandra.db.view.View.buildSelectStatement(String,Collection<ColumnDefinition>,String)",15,2,n/a,13,0,3,6,3
"org.apache.cassandra.db.view.View.createComplexTombstone(TemporalRow,DecoratedKey,ColumnDefinition,DeletionTime,Resolver,int)",6,1,n/a,16,0,6,5,1
"org.apache.cassandra.db.view.View.createForDeletionInfo(Set,AbstractBTreePartition)",58,1,n/a,126,6,2,64,28
"org.apache.cassandra.db.view.View.createMutations(AbstractBTreePartition,Set,boolean)",13,1,n/a,43,3,3,22,12
"org.apache.cassandra.db.view.View.createRangeTombstoneForRow(TemporalRow)",7,1,n/a,26,1,1,11,6
"org.apache.cassandra.db.view.View.createTombstone(TemporalRow,DecoratedKey,Deletion,Resolver,int)",6,2,n/a,15,0,5,5,1
"org.apache.cassandra.db.view.View.createUpdatesForInserts(TemporalRow)",22,1,n/a,35,2,1,19,6
"org.apache.cassandra.db.view.View.findAll(String,String)",4,4,n/a,6,0,2,3,1
"org.apache.cassandra.db.view.View.findBaseTable(String,String)",2,3,n/a,6,0,2,2,2
"org.apache.cassandra.db.view.View.getDefinition()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.View.getReadQuery()",5,3,n/a,10,0,0,3,2
"org.apache.cassandra.db.view.View.getSelectStatement()",5,2,n/a,16,1,0,7,2
"org.apache.cassandra.db.view.View.getTemporalRowSet(AbstractBTreePartition,Set,boolean)",7,0,n/a,30,1,3,12,5
"org.apache.cassandra.db.view.View.readLocalRows(Set)",16,1,n/a,29,5,1,12,5
"org.apache.cassandra.db.view.View.relationsToWhereClause(List<Relation>)",32,2,n/a,31,2,1,12,4
"org.apache.cassandra.db.view.View.resolveAndAddColumns(Iterable<ColumnIdentifier>,List<ColumnDefinition>...)",4,1,n/a,25,2,2,8,4
"org.apache.cassandra.db.view.View.separateRows(AbstractBTreePartition,Set<ColumnIdentifier>)",4,1,n/a,10,0,2,4,2
"org.apache.cassandra.db.view.View.updateAffectsView(AbstractBTreePartition)",17,2,n/a,41,2,1,18,12
"org.apache.cassandra.db.view.View.updateDefinition(ViewDefinition)",19,1,n/a,28,2,1,12,4
"org.apache.cassandra.db.view.View.viewClustering(TemporalRow,Resolver)",8,2,n/a,19,1,2,9,2
"org.apache.cassandra.db.view.View.viewPartitionKey(TemporalRow,Resolver)",7,4,n/a,20,1,2,11,3
"org.apache.cassandra.db.view.ViewBuilder.ViewBuilder(ColumnFamilyStore,View)",1,1,n/a,6,0,2,3,1
"org.apache.cassandra.db.view.ViewBuilder.buildKey(DecoratedKey)",17,1,n/a,25,3,1,15,5
"org.apache.cassandra.db.view.ViewBuilder.getCompactionInfo()",4,5,n/a,20,1,0,8,4
"org.apache.cassandra.db.view.ViewBuilder.run()",28,1,n/a,8,6,0,40,15
"org.apache.cassandra.db.view.ViewBuilder.stop()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.ForStore()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.addView(View)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.allViews()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.allViewsCfs()",5,4,n/a,7,0,0,4,2
"org.apache.cassandra.db.view.ViewManager.ForStore.dumpMemtables()",2,1,n/a,5,0,0,2,2
"org.apache.cassandra.db.view.ViewManager.ForStore.forceBlockingFlush()",2,1,n/a,5,0,0,2,2
"org.apache.cassandra.db.view.ViewManager.ForStore.removeView(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.db.view.ViewManager.ForStore.truncateBlocking(long)",3,1,n/a,8,1,1,3,2
"org.apache.cassandra.db.view.ViewManager.ViewManager(Keyspace)",2,2,n/a,6,0,1,3,1
"org.apache.cassandra.db.view.ViewManager.acquireLockFor(ByteBuffer)",2,2,n/a,7,0,1,4,2
"org.apache.cassandra.db.view.ViewManager.addView(ViewDefinition)",6,1,n/a,6,0,1,3,1
"org.apache.cassandra.db.view.ViewManager.allViews()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.db.view.ViewManager.buildAllViews()",2,0,n/a,5,0,0,2,2
"org.apache.cassandra.db.view.ViewManager.forTable(UUID)",3,2,n/a,12,1,1,7,3
"org.apache.cassandra.db.view.ViewManager.pushViewReplicaUpdates(PartitionUpdate,boolean,AtomicLong)",13,1,n/a,27,3,3,12,7
"org.apache.cassandra.db.view.ViewManager.reload()",15,3,n/a,24,1,0,12,7
"org.apache.cassandra.db.view.ViewManager.removeView(String)",6,1,n/a,8,0,1,5,2
"org.apache.cassandra.db.view.ViewManager.update(String)",7,1,n/a,10,0,1,6,1
"org.apache.cassandra.db.view.ViewManager.updatesAffectView(Collection<? extends IMutation>,boolean)",8,2,n/a,20,3,2,11,9
"org.apache.cassandra.db.view.ViewUtils.ViewUtils()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.db.view.ViewUtils.getViewNaturalEndpoint(String,Token,Token)",31,1,n/a,61,2,3,21,9
"org.apache.cassandra.dht.AbstractBounds.AbstractBounds(T,T)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.AbstractBoundsSerializer(IPartitionerDependentSerializer<T>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.deserialize(DataInput,IPartitioner,int)",9,0,n/a,28,1,3,18,6
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.kindFlags(AbstractBounds<?>)",2,1,n/a,12,0,1,8,4
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.kindInt(AbstractBounds<?>)",2,2,n/a,8,0,1,4,3
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.serialize(AbstractBounds<T>,DataOutputPlus,int)",6,0,n/a,13,0,3,5,2
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer.serializedSize(AbstractBounds<T>,int)",4,0,n/a,9,0,2,4,2
"org.apache.cassandra.dht.AbstractBounds.Boundary.Boundary(T,boolean)",0,9,n/a,5,0,2,2,1
"org.apache.cassandra.dht.AbstractBounds.bounds(Boundary<T>,Boundary<T>)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.dht.AbstractBounds.bounds(T,boolean,T,boolean)",4,3,n/a,11,0,4,7,5
"org.apache.cassandra.dht.AbstractBounds.contains(T)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.format(T,AbstractType<?>)",3,2,n/a,11,1,2,3,2
"org.apache.cassandra.dht.AbstractBounds.getClosingString()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.getOpeningString()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.getString(AbstractType<?>)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.AbstractBounds.hashCode()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.AbstractBounds.inclusiveLeft()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.inclusiveRight()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.intersects(Iterable<Range<T>>)",1,0,n/a,10,1,1,4,3
"org.apache.cassandra.dht.AbstractBounds.isEmpty(Boundary<T>,Boundary<T>)",1,4,n/a,5,0,2,2,4
"org.apache.cassandra.dht.AbstractBounds.isEndInclusive()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.isStartInclusive()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.leftBoundary()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.dht.AbstractBounds.maxLeft(Boundary<T>,Boundary<T>)",1,1,n/a,8,0,2,4,4
"org.apache.cassandra.dht.AbstractBounds.maxLeft(Boundary<T>,T,boolean)",2,2,n/a,4,0,3,1,1
"org.apache.cassandra.dht.AbstractBounds.minRight(Boundary<T>,Boundary<T>)",1,1,n/a,8,0,2,4,4
"org.apache.cassandra.dht.AbstractBounds.minRight(Boundary<T>,T,boolean)",2,2,n/a,4,0,3,1,1
"org.apache.cassandra.dht.AbstractBounds.noneStrictlyWrapsAround(Collection<AbstractBounds<T>>)",1,0,n/a,9,1,1,4,3
"org.apache.cassandra.dht.AbstractBounds.rightBoundary()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.dht.AbstractBounds.split(T)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.strictlyWrapsAround(T,T)",2,2,n/a,13,0,2,1,2
"org.apache.cassandra.dht.AbstractBounds.unwrap()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.AbstractBounds.withNewRight(T)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.BootStrapper.BootStrapper(InetAddress,Collection<Token>,TokenMetadata)",1,2,n/a,8,0,3,5,2
"org.apache.cassandra.dht.BootStrapper.StringSerializer.deserialize(DataInputPlus,int)",1,21,n/a,4,0,2,1,1
"org.apache.cassandra.dht.BootStrapper.StringSerializer.serialize(String,DataOutputPlus,int)",1,22,n/a,4,0,3,1,1
"org.apache.cassandra.dht.BootStrapper.StringSerializer.serializedSize(String,int)",1,19,n/a,4,0,2,1,1
"org.apache.cassandra.dht.BootStrapper.allocateTokens(TokenMetadata,InetAddress,String,int)",4,1,n/a,11,0,4,5,2
"org.apache.cassandra.dht.BootStrapper.bootstrap(StreamStateStore,boolean)",39,2,n/a,6,4,2,39,7
"org.apache.cassandra.dht.BootStrapper.getBootstrapTokens(TokenMetadata,InetAddress)",11,1,n/a,23,0,2,14,7
"org.apache.cassandra.dht.BootStrapper.getRandomTokens(TokenMetadata,int)",5,2,n/a,11,1,2,6,3
"org.apache.cassandra.dht.BootStrapper.getSpecifiedTokens(TokenMetadata,Collection<String>)",8,1,n/a,14,1,2,8,3
"org.apache.cassandra.dht.Bounds.Bounds(T,T)",2,9,n/a,6,0,2,2,1
"org.apache.cassandra.dht.Bounds.contains(T)",4,4,n/a,7,0,1,1,4
"org.apache.cassandra.dht.Bounds.equals(Object)",2,0,n/a,8,0,1,4,3
"org.apache.cassandra.dht.Bounds.getClosingString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Bounds.getOpeningString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Bounds.inclusiveLeft()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Bounds.inclusiveRight()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Bounds.intersects(Bounds<T>)",3,4,n/a,5,0,1,1,3
"org.apache.cassandra.dht.Bounds.isEndInclusive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Bounds.isStartInclusive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Bounds.makeRowBounds(Token,Token)",3,0,n/a,7,0,2,1,1
"org.apache.cassandra.dht.Bounds.split(T)",5,0,n/a,10,0,1,6,2
"org.apache.cassandra.dht.Bounds.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.Bounds.unwrap()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.Bounds.withNewRight(T)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.BytesToken(ByteBuffer)",2,6,n/a,4,0,1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.BytesToken(byte[])",0,12,n/a,4,0,1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.compareTo(Token)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.equals(Object)",1,0,n/a,10,0,1,6,3
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.getHeapSize()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.getPartitioner()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.getTokenValue()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.hashCode()",1,0,n/a,6,0,0,2,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.increaseSlightly()",4,0,n/a,6,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.size(Token)",4,0,n/a,6,0,1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.bigForBytes(byte[],int)",2,2,n/a,15,1,2,6,2
"org.apache.cassandra.dht.ByteOrderedPartitioner.bytesForBig(BigInteger,int,boolean)",4,1,n/a,22,1,3,9,4
"org.apache.cassandra.dht.ByteOrderedPartitioner.decorateKey(ByteBuffer)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.describeOwnership(List<Token>)",21,0,n/a,32,3,1,17,7
"org.apache.cassandra.dht.ByteOrderedPartitioner.getMinimumToken()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.getRandomToken()",3,0,n/a,7,0,0,4,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.getToken(ByteBuffer)",2,1,n/a,6,0,1,3,2
"org.apache.cassandra.dht.ByteOrderedPartitioner.getTokenFactory()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.getTokenValidator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.midpoint(Token,Token)",6,0,n/a,10,0,2,7,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.partitionOrdering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ByteOrderedPartitioner.preservesOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ComparableObjectToken.ComparableObjectToken(C)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.ComparableObjectToken.compareTo(Token)",4,0,n/a,8,0,1,3,2
"org.apache.cassandra.dht.ComparableObjectToken.equals(Object)",3,0,n/a,9,0,1,5,4
"org.apache.cassandra.dht.ComparableObjectToken.getTokenValue()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ComparableObjectToken.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ComparableObjectToken.increaseSlightly()",4,0,n/a,6,0,0,1,1
"org.apache.cassandra.dht.ComparableObjectToken.size(Token)",4,0,n/a,6,0,1,1,1
"org.apache.cassandra.dht.ComparableObjectToken.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.ExcludingBounds(T,T)",4,2,n/a,6,0,2,2,3
"org.apache.cassandra.dht.ExcludingBounds.contains(T)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.dht.ExcludingBounds.equals(Object)",2,0,n/a,8,0,1,4,3
"org.apache.cassandra.dht.ExcludingBounds.getClosingString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.getOpeningString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.inclusiveLeft()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.inclusiveRight()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.isEndInclusive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.isStartInclusive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.split(T)",6,0,n/a,9,0,1,6,3
"org.apache.cassandra.dht.ExcludingBounds.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.unwrap()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.ExcludingBounds.withNewRight(T)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.IPartitioner.decorateKey(ByteBuffer)",n/a,14,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.describeOwnership(List<Token>)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.getMinimumToken()",n/a,18,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.getRandomToken()",n/a,13,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.getToken(ByteBuffer)",n/a,23,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.getTokenFactory()",n/a,19,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.getTokenValidator()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.midpoint(Token,Token)",n/a,7,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.partitionOrdering()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.IPartitioner.preservesOrder()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.IPartitionerDependentSerializer.deserialize(DataInput,IPartitioner,int)",n/a,3,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.dht.IPartitionerDependentSerializer.serialize(T,DataOutputPlus,int)",n/a,3,3,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.dht.IPartitionerDependentSerializer.serializedSize(T,int)",n/a,3,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.dht.IncludingExcludingBounds.IncludingExcludingBounds(T,T)",4,1,n/a,7,0,2,2,3
"org.apache.cassandra.dht.IncludingExcludingBounds.contains(T)",3,1,n/a,4,0,1,1,3
"org.apache.cassandra.dht.IncludingExcludingBounds.equals(Object)",2,0,n/a,8,0,1,4,3
"org.apache.cassandra.dht.IncludingExcludingBounds.getClosingString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.getOpeningString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.inclusiveLeft()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.inclusiveRight()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.isEndInclusive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.isStartInclusive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.split(T)",4,0,n/a,7,0,1,4,1
"org.apache.cassandra.dht.IncludingExcludingBounds.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.unwrap()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.IncludingExcludingBounds.withNewRight(T)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalPartitioner(AbstractType<?>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.LocalToken(ByteBuffer)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.compareTo(Token)",3,0,n/a,6,0,1,2,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.equals(Object)",1,0,n/a,10,0,1,6,3
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.getHeapSize()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.getPartitioner()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.hashCode()",1,0,n/a,6,0,0,2,1
"org.apache.cassandra.dht.LocalPartitioner.LocalToken.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.LocalPartitioner.decorateKey(ByteBuffer)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.LocalPartitioner.describeOwnership(List<Token>)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getMinimumToken()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.dht.LocalPartitioner.getRandomToken()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.LocalPartitioner.getToken(ByteBuffer)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.dht.LocalPartitioner.getTokenFactory()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.LocalPartitioner.getTokenValidator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.LocalPartitioner.midpoint(Token,Token)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.dht.LocalPartitioner.partitionOrdering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.LocalPartitioner.preservesOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.LongToken(long)",0,43,n/a,4,0,1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.compareTo(Token)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.equals(Object)",2,0,n/a,8,0,1,5,4
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.getHeapSize()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.getPartitioner()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.getTokenValue()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.increaseSlightly()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.size(Token)",1,0,n/a,8,0,1,4,2
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.decorateKey(ByteBuffer)",3,2,n/a,5,0,1,2,1
"org.apache.cassandra.dht.Murmur3Partitioner.describeOwnership(List<Token>)",32,0,n/a,30,2,1,21,4
"org.apache.cassandra.dht.Murmur3Partitioner.getHash(ByteBuffer)",3,2,n/a,6,0,1,3,1
"org.apache.cassandra.dht.Murmur3Partitioner.getMinimumToken()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getRandomToken()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getRandomToken(Random)",3,3,n/a,4,0,1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getToken(ByteBuffer)",2,0,n/a,10,0,1,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getToken(ByteBuffer,long[])",3,2,n/a,6,0,2,3,2
"org.apache.cassandra.dht.Murmur3Partitioner.getTokenFactory()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.getTokenValidator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.midpoint(Token,Token)",16,0,n/a,24,1,2,10,3
"org.apache.cassandra.dht.Murmur3Partitioner.normalize(long)",0,2,n/a,5,0,1,1,2
"org.apache.cassandra.dht.Murmur3Partitioner.partitionOrdering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Murmur3Partitioner.preservesOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken.StringToken(String)",1,194,n/a,4,0,1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken.getHeapSize()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken.getPartitioner()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.bigForString(String,int)",6,2,n/a,17,1,2,9,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.decorateKey(ByteBuffer)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.describeOwnership(List<Token>)",21,0,n/a,32,3,1,17,7
"org.apache.cassandra.dht.OrderPreservingPartitioner.getMinimumToken()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.getRandomToken()",8,0,n/a,10,1,0,8,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.getToken(ByteBuffer)",3,1,n/a,13,1,1,5,2
"org.apache.cassandra.dht.OrderPreservingPartitioner.getTokenFactory()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.getTokenValidator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.midpoint(Token,Token)",8,0,n/a,8,0,2,5,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.partitionOrdering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.preservesOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.OrderPreservingPartitioner.stringForBig(BigInteger,int,boolean)",5,1,n/a,19,1,3,9,4
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken.BigIntegerToken(BigInteger)",1,265,n/a,4,0,1,1,1
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken.BigIntegerToken(String)",2,264,n/a,5,0,1,1,1
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken.getHeapSize()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken.getPartitioner()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.RandomPartitioner.decorateKey(ByteBuffer)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.RandomPartitioner.describeOwnership(List<Token>)",26,0,n/a,29,2,1,21,4
"org.apache.cassandra.dht.RandomPartitioner.getMinimumToken()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.RandomPartitioner.getRandomToken()",6,0,n/a,7,0,0,4,2
"org.apache.cassandra.dht.RandomPartitioner.getToken(ByteBuffer)",3,1,n/a,6,0,1,3,2
"org.apache.cassandra.dht.RandomPartitioner.getTokenFactory()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.RandomPartitioner.getTokenValidator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.RandomPartitioner.midpoint(Token,Token)",4,0,n/a,9,0,2,4,3
"org.apache.cassandra.dht.RandomPartitioner.partitionOrdering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.RandomPartitioner.preservesOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Range.Range(T,T)",1,194,n/a,4,0,2,1,1
"org.apache.cassandra.dht.Range.asList()",5,0,n/a,7,0,0,4,1
"org.apache.cassandra.dht.Range.compareTo(Range<T>)",3,1,n/a,12,0,1,5,3
"org.apache.cassandra.dht.Range.contains(Range<T>)",7,10,n/a,26,1,1,9,6
"org.apache.cassandra.dht.Range.contains(T)",1,11,n/a,10,0,1,1,1
"org.apache.cassandra.dht.Range.contains(T,T,T)",5,4,n/a,24,1,3,5,4
"org.apache.cassandra.dht.Range.deoverlap(List<Range<T>>)",18,1,n/a,42,2,1,20,8
"org.apache.cassandra.dht.Range.differenceToFetch(Range<T>)",12,1,n/a,40,2,1,15,3
"org.apache.cassandra.dht.Range.equals(Object)",2,1,n/a,8,0,1,4,3
"org.apache.cassandra.dht.Range.getClosingString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Range.getOpeningString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Range.inclusiveLeft()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Range.inclusiveRight()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Range.intersectionBothWrapping(Range<T>,Range<T>)",7,2,n/a,8,0,2,5,2
"org.apache.cassandra.dht.Range.intersectionOneWrapping(Range<T>,Range<T>)",9,2,n/a,10,0,2,6,4
"org.apache.cassandra.dht.Range.intersectionWith(Range<T>)",19,2,n/a,43,1,1,17,13
"org.apache.cassandra.dht.Range.intersects(AbstractBounds<T>)",4,1,n/a,9,0,1,5,3
"org.apache.cassandra.dht.Range.intersects(Bounds<T>)",4,1,n/a,11,0,1,1,3
"org.apache.cassandra.dht.Range.intersects(Range<T>)",2,8,n/a,8,0,1,1,1
"org.apache.cassandra.dht.Range.isEndInclusive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Range.isInRanges(T,Iterable<Range<T>>)",1,5,n/a,12,2,2,5,3
"org.apache.cassandra.dht.Range.isStartInclusive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Range.isWrapAround()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Range.isWrapAround(T,T)",1,9,n/a,7,0,2,1,1
"org.apache.cassandra.dht.Range.makeRowRange(Range<Token>)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.dht.Range.makeRowRange(Token,Token)",3,3,n/a,7,0,2,1,1
"org.apache.cassandra.dht.Range.normalize(Collection<Range<T>>)",8,7,n/a,4,2,1,6,2
"org.apache.cassandra.dht.Range.rangeSet(Range<T>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.Range.rangeSet(Range<T>...)",3,0,n/a,5,0,1,1,1
"org.apache.cassandra.dht.Range.split(T)",7,0,n/a,10,0,1,6,4
"org.apache.cassandra.dht.Range.subtract(Range<T>)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.dht.Range.subtractContained(Range<T>)",7,3,n/a,16,0,1,6,3
"org.apache.cassandra.dht.Range.toString()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.dht.Range.unwrap()",9,1,n/a,10,0,0,7,3
"org.apache.cassandra.dht.Range.withNewRight(T)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.RangeStreamer.FailureDetectorSourceFilter.FailureDetectorSourceFilter(IFailureDetector)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.dht.RangeStreamer.FailureDetectorSourceFilter.shouldInclude(InetAddress)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.dht.RangeStreamer.ISourceFilter.shouldInclude(InetAddress)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.RangeStreamer.RangeStreamer(TokenMetadata,Collection<Token>,InetAddress,String,boolean,IEndpointSnitch,StreamStateStore)",2,1,n/a,18,0,7,9,1
"org.apache.cassandra.dht.RangeStreamer.SingleDatacenterFilter.SingleDatacenterFilter(IEndpointSnitch,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.dht.RangeStreamer.SingleDatacenterFilter.shouldInclude(InetAddress)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.dht.RangeStreamer.addRanges(String,Collection<Range<Token>>)",18,1,n/a,25,2,2,9,7
"org.apache.cassandra.dht.RangeStreamer.addSourceFilter(ISourceFilter)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.dht.RangeStreamer.fetchAsync()",16,1,n/a,21,2,0,12,4
"org.apache.cassandra.dht.RangeStreamer.getAllRangesWithSourcesFor(String,Collection<Range<Token>>)",13,1,n/a,27,3,2,12,5
"org.apache.cassandra.dht.RangeStreamer.getAllRangesWithStrictSourcesFor(String,Collection<Range<Token>>)",34,1,n/a,51,4,2,26,11
"org.apache.cassandra.dht.RangeStreamer.getRangeFetchMap(Multimap<Range<Token>, InetAddress>,Collection<ISourceFilter>,String)",8,2,n/a,37,3,3,17,7
"org.apache.cassandra.dht.RangeStreamer.getWorkMap(Multimap<Range<Token>, InetAddress>,String,IFailureDetector)",3,1,n/a,4,0,3,1,1
"org.apache.cassandra.dht.RangeStreamer.toFetch()",0,0,n/a,6,0,0,1,1
"org.apache.cassandra.dht.RangeStreamer.useStrictSourcesForRanges(String)",5,1,n/a,11,0,1,2,3
"org.apache.cassandra.dht.RingPosition.getPartitioner()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.RingPosition.getToken()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.RingPosition.isMinimum()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.RingPosition.minValue()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.StreamStateStore.getAvailableRanges(String,IPartitioner)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.dht.StreamStateStore.handleStreamEvent(StreamEvent)",1,0,n/a,20,3,1,5,4
"org.apache.cassandra.dht.StreamStateStore.isDataAvailable(String,Token)",3,0,n/a,17,1,2,5,3
"org.apache.cassandra.dht.StreamStateStore.onFailure(Throwable)",0,0,n/a,2,0,1,0,1
"org.apache.cassandra.dht.StreamStateStore.onSuccess(StreamState)",0,0,n/a,2,0,1,0,1
"org.apache.cassandra.dht.Token.KeyBound.KeyBound(Token,boolean)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.dht.Token.KeyBound.compareTo(PartitionPosition)",3,0,n/a,12,0,1,8,8
"org.apache.cassandra.dht.Token.KeyBound.equals(Object)",3,0,n/a,10,0,1,6,5
"org.apache.cassandra.dht.Token.KeyBound.getPartitioner()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Token.KeyBound.getToken()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Token.KeyBound.hashCode()",2,0,n/a,5,0,0,1,2
"org.apache.cassandra.dht.Token.KeyBound.isMinimum()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Token.KeyBound.kind()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.dht.Token.KeyBound.minValue()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Token.KeyBound.toString()",3,0,n/a,5,0,0,1,2
"org.apache.cassandra.dht.Token.TokenFactory.fromByteArray(ByteBuffer)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.Token.TokenFactory.fromString(String)",n/a,13,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.Token.TokenFactory.toByteArray(Token)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.Token.TokenFactory.toString(Token)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.Token.TokenFactory.validate(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.Token.TokenSerializer.deserialize(DataInput,IPartitioner,int)",5,5,n/a,7,0,3,4,1
"org.apache.cassandra.dht.Token.TokenSerializer.serialize(Token,DataOutputPlus,int)",4,5,n/a,6,0,3,3,1
"org.apache.cassandra.dht.Token.TokenSerializer.serializedSize(Token,int)",6,5,n/a,6,0,2,3,1
"org.apache.cassandra.dht.Token.getHeapSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.Token.getPartitioner()",n/a,8,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.Token.getToken()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Token.getTokenValue()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.Token.increaseSlightly()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.Token.isMinimum()",2,3,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Token.maxKeyBound()",3,3,n/a,13,0,0,3,2
"org.apache.cassandra.dht.Token.minKeyBound()",1,3,n/a,18,0,0,1,1
"org.apache.cassandra.dht.Token.minValue()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.dht.Token.size(Token)",n/a,7,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.Token.upperBound(Class<R>)",3,0,n/a,8,0,1,3,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.BaseTokenInfo.BaseTokenInfo(Token,UnitInfo<Unit>)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.BaseTokenInfo.prevInRing()",0,1,n/a,8,0,0,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.BaseTokenInfo.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CandidateInfo.CandidateInfo(Token,TokenInfo<Unit>,UnitInfo<Unit>)",1,1,n/a,5,0,3,2,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CandidateInfo.prevInRing()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CircularList.insertAfter(T,T)",0,3,n/a,19,1,2,9,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CircularList.removeFrom(T)",0,1,n/a,10,0,1,3,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupInfo.GroupInfo(Object)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupInfo.toString()",1,1,n/a,4,0,0,1,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.add(GroupInfo)",2,3,n/a,10,0,1,6,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.clean()",2,3,n/a,12,1,0,6,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.prevSeen(GroupInfo)",n/a,3,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.seen(GroupInfo)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.setPrevSeen(GroupInfo,GroupInfo)",n/a,2,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor.visitedAll()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.PopulateVisitor.prevSeen(GroupInfo)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.PopulateVisitor.setPrevSeen(GroupInfo,GroupInfo)",0,2,n/a,4,0,2,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.ReplicationAwareTokenAllocator(NavigableMap<Token, Unit>,ReplicationStrategy<Unit>,IPartitioner)",6,0,n/a,10,0,3,7,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.ReplicationVisitor.prevSeen(GroupInfo)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.ReplicationVisitor.setPrevSeen(GroupInfo,GroupInfo)",0,2,n/a,4,0,2,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.TokenInfo.TokenInfo(Token,UnitInfo<Unit>)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.TokenInfo.prevInRing()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitAdjustmentTracker.UnitAdjustmentTracker(UnitInfo<Unit>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitAdjustmentTracker.add(UnitInfo<Unit>,double)",0,1,n/a,14,1,2,6,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitAdjustmentTracker.calculateUnitChange(double,double)",2,1,n/a,25,2,2,16,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitInfo.UnitInfo(Unit,GroupInfo)",0,1,n/a,6,0,2,3,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitInfo.UnitInfo(Unit,double,Map<Object, GroupInfo>,ReplicationStrategy<Unit>)",2,2,n/a,5,0,4,2,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitInfo.toString()",3,1,n/a,6,0,0,1,5
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.Weighted.Weighted(double,T)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.Weighted.compareTo(Weighted<T>)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.Weighted.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.addUnit(Unit,int)",28,0,n/a,65,2,2,36,10
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.applyOwnershipAdjustment(BaseTokenInfo<Unit, ?>,UnitInfo<Unit>,Token,Token,double,UnitAdjustmentTracker<Unit>)",5,2,n/a,15,0,6,6,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.confirmCandidate(CandidateInfo<Unit>)",12,1,n/a,34,1,1,20,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.createCandidates(TokenInfo<Unit>,UnitInfo<Unit>,double)",4,1,n/a,17,1,3,12,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.createTokenInfos(Map<Unit, UnitInfo<Unit>>,GroupInfo)",7,1,n/a,25,1,2,13,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.createUnitInfos(Map<Object, GroupInfo>)",5,1,n/a,12,1,1,7,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.dumpTokens(String,BaseTokenInfo<?, ?>)",1,0,n/a,9,1,2,4,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.evaluateImprovement(CandidateInfo<Unit>,double,double)",9,2,n/a,29,1,3,18,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.findUpdatedReplicationStart(TokenInfo<Unit>,CandidateInfo<Unit>)",1,1,n/a,8,0,2,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.furtherStartToken(Token,Token,Token)",4,1,n/a,13,0,3,5,4
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.generateRandomTokens(Unit,int)",7,3,n/a,15,2,2,8,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.getGroup(Unit,Map<Object, GroupInfo>,ReplicationStrategy<Unit>)",4,1,n/a,9,0,3,5,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.mapEntryFor(Token)",2,1,n/a,7,0,1,4,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.optimalTokenOwnership(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.populateCandidate(CandidateInfo<Unit>)",1,2,n/a,5,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.populateTokenInfo(BaseTokenInfo<Unit, ?>,GroupInfo)",6,2,n/a,38,1,2,25,8
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.populateTokenInfoAndAdjustUnit(TokenInfo<Unit>,GroupInfo)",2,3,n/a,8,0,2,5,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.removeUnit(Unit)",3,0,n/a,8,0,1,2,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.sq(double)",0,5,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.toString()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.unitCount()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.unitFor(Token)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.ReplicationStrategy.getGroup(Unit)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.tokenallocator.ReplicationStrategy.replicas()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.StrategyAdapter.inAllocationRing(InetAddress)",n/a,3,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.addOwnership(TokenMetadata,AbstractReplicationStrategy,Token,Token,Map<InetAddress, Double>)",6,2,n/a,10,1,5,5,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.adjustForCrossDatacenterClashes(TokenMetadata,StrategyAdapter,Collection<Token>)",9,1,n/a,17,2,3,9,4
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.allocateTokens(TokenMetadata,AbstractReplicationStrategy,InetAddress,int)",17,1,n/a,23,1,4,14,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.create(TokenMetadata,StrategyAdapter)",9,1,n/a,10,1,2,5,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.evaluateReplicatedOwnership(TokenMetadata,AbstractReplicationStrategy)",9,1,n/a,16,1,2,10,2
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.getStrategy(TokenMetadata,AbstractReplicationStrategy,InetAddress)",5,2,n/a,8,0,3,5,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.getStrategy(TokenMetadata,NetworkTopologyStrategy,IEndpointSnitch,InetAddress)",15,1,n/a,5,3,4,15,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.getStrategy(TokenMetadata,SimpleStrategy,InetAddress)",2,1,n/a,5,2,3,5,1
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.replicatedOwnershipStats(TokenMetadata,AbstractReplicationStrategy,InetAddress)",11,8,n/a,13,1,3,6,3
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.statToString(SummaryStatistics)",6,2,n/a,4,0,1,1,1
"org.apache.cassandra.dht.tokenallocator.TokenAllocator.addUnit(Unit,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.exceptions.AlreadyExistsException.AlreadyExistsException(String)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.AlreadyExistsException.AlreadyExistsException(String,String)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.exceptions.AlreadyExistsException.AlreadyExistsException(String,String,String)",1,2,n/a,6,0,3,3,1
"org.apache.cassandra.exceptions.AuthenticationException.AuthenticationException(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.CassandraException.CassandraException(ExceptionCode,String)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.exceptions.CassandraException.CassandraException(ExceptionCode,String,Throwable)",1,0,n/a,5,0,3,2,1
"org.apache.cassandra.exceptions.CassandraException.code()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.exceptions.ConfigurationException.ConfigurationException(ExceptionCode,String)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.exceptions.ConfigurationException.ConfigurationException(String)",1,122,n/a,5,0,1,2,1
"org.apache.cassandra.exceptions.ConfigurationException.ConfigurationException(String,Throwable)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.exceptions.ConfigurationException.ConfigurationException(String,boolean)",1,36,n/a,5,0,2,2,1
"org.apache.cassandra.exceptions.ExceptionCode.ExceptionCode(int)",0,18,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.ExceptionCode.fromValue(int)",3,0,n/a,7,0,1,4,2
"org.apache.cassandra.exceptions.FunctionExecutionException.FunctionExecutionException(FunctionName,List<String>,String)",1,2,n/a,7,0,3,4,1
"org.apache.cassandra.exceptions.FunctionExecutionException.create(Function,Throwable)",6,3,n/a,7,0,2,4,1
"org.apache.cassandra.exceptions.InvalidRequestException.InvalidRequestException(String)",1,255,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.IsBootstrappingException.IsBootstrappingException()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.exceptions.OverloadedException.OverloadedException(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.PreparedQueryNotFoundException.PreparedQueryNotFoundException(MD5Digest)",2,2,n/a,5,0,1,2,1
"org.apache.cassandra.exceptions.PreparedQueryNotFoundException.makeMsg(MD5Digest)",1,1,n/a,7,0,1,1,1
"org.apache.cassandra.exceptions.ReadFailureException.ReadFailureException(ConsistencyLevel,int,int,int,boolean)",1,1,n/a,5,0,5,2,1
"org.apache.cassandra.exceptions.ReadTimeoutException.ReadTimeoutException(ConsistencyLevel,int,int,boolean)",1,2,n/a,5,0,4,2,1
"org.apache.cassandra.exceptions.RepairException.RepairException(RepairJobDesc,String)",1,2,n/a,5,0,2,2,1
"org.apache.cassandra.exceptions.RepairException.RepairException(RepairJobDesc,String,Throwable)",1,0,n/a,5,0,3,2,1
"org.apache.cassandra.exceptions.RepairException.getMessage()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.exceptions.RequestExecutionException.RequestExecutionException(ExceptionCode,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.exceptions.RequestExecutionException.RequestExecutionException(ExceptionCode,String,Throwable)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.exceptions.RequestFailureException.RequestFailureException(ExceptionCode,ConsistencyLevel,int,int,int)",2,0,n/a,8,0,5,5,1
"org.apache.cassandra.exceptions.RequestTimeoutException.RequestTimeoutException(ExceptionCode,ConsistencyLevel,int,int)",2,0,n/a,7,0,4,4,1
"org.apache.cassandra.exceptions.RequestValidationException.RequestValidationException(ExceptionCode,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.exceptions.RequestValidationException.RequestValidationException(ExceptionCode,String,Throwable)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.exceptions.StartupException.StartupException(int,String)",1,5,n/a,5,0,2,2,1
"org.apache.cassandra.exceptions.StartupException.StartupException(int,String,Throwable)",1,2,n/a,5,0,3,2,1
"org.apache.cassandra.exceptions.SyntaxException.SyntaxException(String)",1,15,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.TransportException.code()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.exceptions.TransportException.getMessage()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.exceptions.TruncateException.TruncateException(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.TruncateException.TruncateException(Throwable)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.UnauthorizedException.UnauthorizedException(String)",1,8,n/a,4,0,1,1,1
"org.apache.cassandra.exceptions.UnavailableException.UnavailableException(ConsistencyLevel,String,int,int)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.exceptions.UnavailableException.UnavailableException(ConsistencyLevel,int,int)",1,3,n/a,4,0,3,1,1
"org.apache.cassandra.exceptions.UnavailableException.UnavailableException(String,ConsistencyLevel,int,int)",1,2,n/a,7,0,4,4,1
"org.apache.cassandra.exceptions.UnrecognizedEntityException.UnrecognizedEntityException(ColumnIdentifier,Relation)",2,1,n/a,11,0,2,3,1
"org.apache.cassandra.exceptions.WriteFailureException.WriteFailureException(ConsistencyLevel,int,int,int,WriteType)",1,0,n/a,5,0,5,2,1
"org.apache.cassandra.exceptions.WriteTimeoutException.WriteTimeoutException(WriteType,ConsistencyLevel,int,int)",1,4,n/a,5,0,4,2,1
"org.apache.cassandra.gms.ArrayBackedBoundedStats.ArrayBackedBoundedStats(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.ArrayBackedBoundedStats.add(long)",1,2,n/a,13,1,1,8,3
"org.apache.cassandra.gms.ArrayBackedBoundedStats.getArrivalIntervals()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.gms.ArrayBackedBoundedStats.mean()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.gms.ArrayBackedBoundedStats.size()",0,1,n/a,4,0,0,1,2
"org.apache.cassandra.gms.ArrivalWindow.ArrivalWindow(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.ArrivalWindow.add(long,InetAddress)",4,3,n/a,25,2,2,9,3
"org.apache.cassandra.gms.ArrivalWindow.getLastReportedPhi()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.gms.ArrivalWindow.getMaxInterval()",4,1,n/a,13,1,0,5,2
"org.apache.cassandra.gms.ArrivalWindow.mean()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.gms.ArrivalWindow.phi(long)",2,1,n/a,8,0,1,4,2
"org.apache.cassandra.gms.ArrivalWindow.toString()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.EchoMessage.EchoMessage()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.gms.EchoMessage.EchoMessageSerializer.deserialize(DataInputPlus,int)",0,21,n/a,4,0,2,1,1
"org.apache.cassandra.gms.EchoMessage.EchoMessageSerializer.serialize(EchoMessage,DataOutputPlus,int)",0,22,n/a,3,0,3,0,1
"org.apache.cassandra.gms.EchoMessage.EchoMessageSerializer.serializedSize(EchoMessage,int)",0,19,n/a,4,0,2,1,1
"org.apache.cassandra.gms.EndpointState.EndpointState(HeartBeatState)",1,1,n/a,6,0,1,3,1
"org.apache.cassandra.gms.EndpointState.addApplicationState(ApplicationState,VersionedValue)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.gms.EndpointState.getApplicationState(ApplicationState)",1,19,n/a,4,0,1,1,1
"org.apache.cassandra.gms.EndpointState.getApplicationStateMap()",0,2,n/a,8,0,0,1,1
"org.apache.cassandra.gms.EndpointState.getHeartBeatState()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.gms.EndpointState.getStatus()",2,0,n/a,9,0,0,6,2
"org.apache.cassandra.gms.EndpointState.getUpdateTimestamp()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.gms.EndpointState.isAlive()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.gms.EndpointState.isRpcReady()",2,1,n/a,5,0,0,2,2
"org.apache.cassandra.gms.EndpointState.markAlive()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.EndpointState.markDead()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.EndpointState.setHeartBeatState(HeartBeatState)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.gms.EndpointState.toString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.EndpointState.updateTimestamp()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.gms.EndpointStateSerializer.deserialize(DataInputPlus,int)",6,21,n/a,13,1,2,10,2
"org.apache.cassandra.gms.EndpointStateSerializer.serialize(EndpointState,DataOutputPlus,int)",10,22,n/a,15,1,3,8,2
"org.apache.cassandra.gms.EndpointStateSerializer.serializedSize(EndpointState,int)",10,19,n/a,12,1,2,7,2
"org.apache.cassandra.gms.FailureDetector.FailureDetector()",4,1,n/a,13,1,0,4,2
"org.apache.cassandra.gms.FailureDetector.appendEndpointState(StringBuilder,EndpointState)",28,2,n/a,19,1,2,9,4
"org.apache.cassandra.gms.FailureDetector.dumpInterArrivalTimes()",7,0,n/a,15,1,0,4,2
"org.apache.cassandra.gms.FailureDetector.forceConviction(InetAddress)",3,0,n/a,8,1,1,3,2
"org.apache.cassandra.gms.FailureDetector.getAllEndpointStates()",8,0,n/a,10,1,0,5,2
"org.apache.cassandra.gms.FailureDetector.getDownEndpointCount()",3,0,n/a,10,1,0,5,3
"org.apache.cassandra.gms.FailureDetector.getEndpointState(String)",5,0,n/a,7,0,1,4,1
"org.apache.cassandra.gms.FailureDetector.getInitialValue()",3,1,n/a,13,1,0,5,2
"org.apache.cassandra.gms.FailureDetector.getMaxLocalPause()",4,1,n/a,11,1,0,5,2
"org.apache.cassandra.gms.FailureDetector.getPhiConvictThreshold()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.gms.FailureDetector.getPhiValues()",11,0,n/a,26,3,0,10,4
"org.apache.cassandra.gms.FailureDetector.getSimpleStates()",11,0,n/a,12,1,0,6,3
"org.apache.cassandra.gms.FailureDetector.getUpEndpointCount()",3,0,n/a,10,1,0,5,3
"org.apache.cassandra.gms.FailureDetector.interpret(InetAddress)",21,0,n/a,43,2,1,26,11
"org.apache.cassandra.gms.FailureDetector.isAlive(InetAddress)",5,0,n/a,12,0,1,6,4
"org.apache.cassandra.gms.FailureDetector.registerFailureDetectionEventListener(IFailureDetectionEventListener)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.FailureDetector.remove(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.FailureDetector.report(InetAddress)",10,0,n/a,20,1,1,11,5
"org.apache.cassandra.gms.FailureDetector.setPhiConvictThreshold(double)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.FailureDetector.toString()",10,1,n/a,15,1,0,10,2
"org.apache.cassandra.gms.FailureDetector.unregisterFailureDetectionEventListener(IFailureDetectionEventListener)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.FailureDetectorMBean.dumpInterArrivalTimes()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.gms.FailureDetectorMBean.getAllEndpointStates()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.gms.FailureDetectorMBean.getDownEndpointCount()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.gms.FailureDetectorMBean.getEndpointState(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.FailureDetectorMBean.getPhiConvictThreshold()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.gms.FailureDetectorMBean.getPhiValues()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.gms.FailureDetectorMBean.getSimpleStates()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.gms.FailureDetectorMBean.getUpEndpointCount()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.gms.FailureDetectorMBean.setPhiConvictThreshold(double)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.GossipDigest.GossipDigest(InetAddress,int,int)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.gms.GossipDigest.compareTo(GossipDigest)",0,0,n/a,6,0,1,3,2
"org.apache.cassandra.gms.GossipDigest.getEndpoint()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.GossipDigest.getGeneration()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.GossipDigest.getMaxVersion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.GossipDigest.toString()",7,0,n/a,10,0,0,7,1
"org.apache.cassandra.gms.GossipDigestAck.GossipDigestAck(List<GossipDigest>,Map<InetAddress, EndpointState>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.gms.GossipDigestAck.getEndpointStateMap()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.GossipDigestAck.getGossipDigestList()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.GossipDigestAck2.GossipDigestAck2(Map<InetAddress, EndpointState>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.GossipDigestAck2.getEndpointStateMap()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.GossipDigestAck2Serializer.deserialize(DataInputPlus,int)",6,21,n/a,12,1,2,9,2
"org.apache.cassandra.gms.GossipDigestAck2Serializer.serialize(GossipDigestAck2,DataOutputPlus,int)",7,22,n/a,10,1,3,5,2
"org.apache.cassandra.gms.GossipDigestAck2Serializer.serializedSize(GossipDigestAck2,int)",7,19,n/a,8,0,2,4,2
"org.apache.cassandra.gms.GossipDigestAck2VerbHandler.doVerb(MessageIn<GossipDigestAck2>,int)",8,0,n/a,18,1,2,10,4
"org.apache.cassandra.gms.GossipDigestAckSerializer.deserialize(DataInputPlus,int)",7,21,n/a,13,1,2,10,2
"org.apache.cassandra.gms.GossipDigestAckSerializer.serialize(GossipDigestAck,DataOutputPlus,int)",8,22,n/a,11,1,3,6,2
"org.apache.cassandra.gms.GossipDigestAckSerializer.serializedSize(GossipDigestAck,int)",8,19,n/a,9,0,2,5,2
"org.apache.cassandra.gms.GossipDigestAckVerbHandler.doVerb(MessageIn<GossipDigestAck>,int)",29,0,n/a,44,1,2,29,11
"org.apache.cassandra.gms.GossipDigestSerializationHelper.deserialize(DataInputPlus,int)",4,1,n/a,8,0,2,7,2
"org.apache.cassandra.gms.GossipDigestSerializationHelper.serialize(List<GossipDigest>,DataOutputPlus,int)",3,1,n/a,6,0,3,3,2
"org.apache.cassandra.gms.GossipDigestSerializationHelper.serializedSize(List<GossipDigest>,int)",3,1,n/a,7,0,2,4,2
"org.apache.cassandra.gms.GossipDigestSerializer.deserialize(DataInputPlus,int)",4,21,n/a,7,0,2,4,1
"org.apache.cassandra.gms.GossipDigestSerializer.serialize(GossipDigest,DataOutputPlus,int)",3,22,n/a,6,0,3,3,1
"org.apache.cassandra.gms.GossipDigestSerializer.serializedSize(GossipDigest,int)",3,19,n/a,7,0,2,4,1
"org.apache.cassandra.gms.GossipDigestSyn.GossipDigestSyn(String,String,List<GossipDigest>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.gms.GossipDigestSyn.getGossipDigests()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.GossipDigestSynSerializer.deserialize(DataInputPlus,int)",4,21,n/a,8,0,2,5,1
"org.apache.cassandra.gms.GossipDigestSynSerializer.serialize(GossipDigestSyn,DataOutputPlus,int)",3,22,n/a,6,0,3,3,1
"org.apache.cassandra.gms.GossipDigestSynSerializer.serializedSize(GossipDigestSyn,int)",3,19,n/a,7,0,2,4,1
"org.apache.cassandra.gms.GossipDigestSynVerbHandler.doSort(List<GossipDigest>)",20,1,n/a,40,1,1,17,5
"org.apache.cassandra.gms.GossipDigestSynVerbHandler.doVerb(MessageIn<GossipDigestSyn>,int)",32,0,n/a,46,2,2,30,10
"org.apache.cassandra.gms.GossipShutdownVerbHandler.doVerb(MessageIn,int)",3,0,n/a,9,1,2,4,2
"org.apache.cassandra.gms.Gossiper.GossipTask.run()",29,0,n/a,52,2,0,19,6
"org.apache.cassandra.gms.Gossiper.Gossiper()",5,1,n/a,17,1,0,6,2
"org.apache.cassandra.gms.Gossiper.addExpireTimeForEndpoint(InetAddress,long)",3,2,n/a,8,1,2,3,2
"org.apache.cassandra.gms.Gossiper.addLocalApplicationState(ApplicationState,VersionedValue)",3,11,n/a,4,0,2,1,1
"org.apache.cassandra.gms.Gossiper.addLocalApplicationStateInternal(ApplicationState,VersionedValue)",8,1,n/a,16,0,2,8,1
"org.apache.cassandra.gms.Gossiper.addLocalApplicationStates(List<Pair<ApplicationState, VersionedValue>>)",3,4,n/a,15,2,1,5,2
"org.apache.cassandra.gms.Gossiper.addSavedEndpoint(InetAddress)",17,4,n/a,27,1,1,13,4
"org.apache.cassandra.gms.Gossiper.advertiseRemoving(InetAddress,UUID,UUID)",19,1,n/a,28,0,3,14,2
"org.apache.cassandra.gms.Gossiper.advertiseTokenRemoved(InetAddress,UUID)",11,2,n/a,20,0,2,9,1
"org.apache.cassandra.gms.Gossiper.applyNewStates(InetAddress,EndpointState,EndpointState)",22,1,n/a,20,1,3,11,4
"org.apache.cassandra.gms.Gossiper.applyStateLocally(Map<InetAddress, EndpointState>)",32,0,n/a,66,4,1,34,18
"org.apache.cassandra.gms.Gossiper.assassinateEndpoint(String)",36,1,n/a,52,2,1,28,6
"org.apache.cassandra.gms.Gossiper.buildSeedsList()",4,3,n/a,9,1,0,4,3
"org.apache.cassandra.gms.Gossiper.compareEndpointStartup(InetAddress,InetAddress)",6,2,n/a,10,0,2,4,2
"org.apache.cassandra.gms.Gossiper.computeExpireTime()",1,11,n/a,4,0,0,1,1
"org.apache.cassandra.gms.Gossiper.convict(InetAddress,double)",8,0,n/a,23,1,2,9,4
"org.apache.cassandra.gms.Gossiper.doBeforeChangeNotifications(InetAddress,EndpointState,ApplicationState,VersionedValue)",1,1,n/a,8,1,4,2,2
"org.apache.cassandra.gms.Gossiper.doGossipToLiveMember(MessageOut<GossipDigestSyn>)",2,1,n/a,8,0,1,4,2
"org.apache.cassandra.gms.Gossiper.doOnChangeNotifications(InetAddress,ApplicationState,VersionedValue)",1,2,n/a,8,1,3,2,2
"org.apache.cassandra.gms.Gossiper.doShadowRound()",11,2,n/a,36,2,0,17,6
"org.apache.cassandra.gms.Gossiper.doStatusCheck()",35,1,n/a,63,4,0,32,19
"org.apache.cassandra.gms.Gossiper.evictFromMembership(InetAddress)",6,3,n/a,14,0,1,6,2
"org.apache.cassandra.gms.Gossiper.examineGossiper(List<GossipDigest>,List<GossipDigest>,Map<InetAddress, EndpointState>)",20,0,n/a,72,4,3,23,12
"org.apache.cassandra.gms.Gossiper.finishShadowRound()",0,0,n/a,5,0,0,2,2
"org.apache.cassandra.gms.Gossiper.forceNewerGeneration()",4,1,n/a,5,0,0,2,1
"org.apache.cassandra.gms.Gossiper.getCurrentGenerationNumber(InetAddress)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.Gossiper.getCurrentGenerationNumber(String)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.Gossiper.getEndpointDowntime(InetAddress)",3,2,n/a,8,0,1,4,2
"org.apache.cassandra.gms.Gossiper.getEndpointDowntime(String)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.gms.Gossiper.getEndpointStateForEndpoint(InetAddress)",1,33,n/a,4,0,1,1,1
"org.apache.cassandra.gms.Gossiper.getEndpointStates()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.gms.Gossiper.getExpireTimeForEndpoint(InetAddress)",2,1,n/a,6,0,1,2,2
"org.apache.cassandra.gms.Gossiper.getGossipStatus(EndpointState)",3,4,n/a,9,0,1,6,3
"org.apache.cassandra.gms.Gossiper.getHostId(InetAddress)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.gms.Gossiper.getLiveMembers()",5,6,n/a,7,0,0,4,2
"org.apache.cassandra.gms.Gossiper.getLiveTokenOwners()",7,1,n/a,11,1,0,6,5
"org.apache.cassandra.gms.Gossiper.getMaxEndpointStateVersion(EndpointState)",5,5,n/a,13,0,1,4,2
"org.apache.cassandra.gms.Gossiper.getStateForVersionBiggerThan(InetAddress,int)",16,1,n/a,40,4,2,18,8
"org.apache.cassandra.gms.Gossiper.getUnreachableMembers()",1,3,n/a,7,0,0,1,1
"org.apache.cassandra.gms.Gossiper.getUnreachableTokenOwners()",5,1,n/a,13,1,0,5,3
"org.apache.cassandra.gms.Gossiper.handleMajorStateChange(InetAddress,EndpointState)",15,3,n/a,37,1,2,19,9
"org.apache.cassandra.gms.Gossiper.initializeNodeUnsafe(InetAddress,UUID,int)",8,6,n/a,12,0,3,7,2
"org.apache.cassandra.gms.Gossiper.injectApplicationState(InetAddress,ApplicationState,VersionedValue)",2,19,n/a,6,0,3,2,1
"org.apache.cassandra.gms.Gossiper.isAlive(InetAddress)",3,1,n/a,7,0,1,4,3
"org.apache.cassandra.gms.Gossiper.isDeadState(EndpointState)",3,9,n/a,7,0,1,4,2
"org.apache.cassandra.gms.Gossiper.isEnabled()",1,8,n/a,4,0,0,1,2
"org.apache.cassandra.gms.Gossiper.isGossipOnlyMember(InetAddress)",4,1,n/a,9,1,1,4,3
"org.apache.cassandra.gms.Gossiper.isInShadowRound()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.gms.Gossiper.isKnownEndpoint(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.Gossiper.isSafeForBootstrap(InetAddress)",8,1,n/a,20,2,1,9,3
"org.apache.cassandra.gms.Gossiper.isShutdown(InetAddress)",5,2,n/a,13,0,1,10,3
"org.apache.cassandra.gms.Gossiper.isSilentShutdownState(EndpointState)",3,1,n/a,7,0,1,4,2
"org.apache.cassandra.gms.Gossiper.makeRandomGossipDigest(List<GossipDigest>)",14,1,n/a,35,2,1,17,5
"org.apache.cassandra.gms.Gossiper.markAlive(InetAddress,EndpointState)",10,2,n/a,4,2,2,10,2
"org.apache.cassandra.gms.Gossiper.markAsShutdown(InetAddress)",7,2,n/a,14,0,1,7,2
"org.apache.cassandra.gms.Gossiper.markDead(InetAddress,EndpointState)",10,3,n/a,13,0,2,10,4
"org.apache.cassandra.gms.Gossiper.maybeGossipToSeed(MessageOut<GossipDigestSyn>)",10,1,n/a,24,2,1,10,6
"org.apache.cassandra.gms.Gossiper.maybeGossipToUnreachableMember(MessageOut<GossipDigestSyn>)",5,1,n/a,14,1,1,7,3
"org.apache.cassandra.gms.Gossiper.maybeInitializeLocalState(int)",5,1,n/a,8,0,1,4,1
"org.apache.cassandra.gms.Gossiper.notifyFailureDetector(InetAddress,EndpointState)",15,1,n/a,38,3,2,18,6
"org.apache.cassandra.gms.Gossiper.notifyFailureDetector(Map<InetAddress, EndpointState>)",4,0,n/a,7,1,1,2,2
"org.apache.cassandra.gms.Gossiper.quarantineEndpoint(InetAddress)",2,2,n/a,9,0,1,1,1
"org.apache.cassandra.gms.Gossiper.quarantineEndpoint(InetAddress,long)",1,2,n/a,10,0,2,1,1
"org.apache.cassandra.gms.Gossiper.realMarkAlive(InetAddress,EndpointState)",12,2,n/a,16,0,2,13,4
"org.apache.cassandra.gms.Gossiper.register(IEndpointStateChangeSubscriber)",1,5,n/a,9,0,1,1,1
"org.apache.cassandra.gms.Gossiper.removeEndpoint(InetAddress)",15,3,n/a,24,1,1,14,4
"org.apache.cassandra.gms.Gossiper.replacedEndpoint(InetAddress)",3,1,n/a,12,0,1,3,1
"org.apache.cassandra.gms.Gossiper.replacementQuarantine(InetAddress)",3,2,n/a,10,0,1,2,1
"org.apache.cassandra.gms.Gossiper.requestAll(GossipDigest,List<GossipDigest>,int)",6,2,n/a,8,0,3,3,2
"org.apache.cassandra.gms.Gossiper.resetEndpointStateMap()",3,2,n/a,7,0,0,3,1
"org.apache.cassandra.gms.Gossiper.seenAnySeed()",11,1,n/a,18,2,0,8,6
"org.apache.cassandra.gms.Gossiper.sendAll(GossipDigest,Map<InetAddress, EndpointState>,int)",4,2,n/a,7,0,3,3,2
"org.apache.cassandra.gms.Gossiper.sendGossip(MessageOut<GossipDigestSyn>,Set<InetAddress>)",9,4,n/a,21,0,2,10,4
"org.apache.cassandra.gms.Gossiper.setLastProcessedMessageAt(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.Gossiper.start(int)",2,5,n/a,4,0,1,1,1
"org.apache.cassandra.gms.Gossiper.start(int,Map<ApplicationState, VersionedValue>)",16,2,n/a,20,0,2,9,3
"org.apache.cassandra.gms.Gossiper.stop()",13,7,n/a,17,1,0,11,5
"org.apache.cassandra.gms.Gossiper.unregister(IEndpointStateChangeSubscriber)",1,3,n/a,9,0,1,1,1
"org.apache.cassandra.gms.Gossiper.unsafeAssassinateEndpoint(String)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.gms.Gossiper.valuesEqual(InetAddress,InetAddress,ApplicationState)",5,1,n/a,10,0,3,7,5
"org.apache.cassandra.gms.GossiperMBean.assassinateEndpoint(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.GossiperMBean.getCurrentGenerationNumber(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.GossiperMBean.getEndpointDowntime(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.GossiperMBean.unsafeAssassinateEndpoint(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.HeartBeatState.HeartBeatState(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.HeartBeatState.HeartBeatState(int,int)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.gms.HeartBeatState.forceHighestPossibleVersionUnsafe()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.HeartBeatState.forceNewerGenerationUnsafe()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.HeartBeatState.getGeneration()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.gms.HeartBeatState.getHeartBeatVersion()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.gms.HeartBeatState.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.HeartBeatState.updateHeartBeat()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.HeartBeatStateSerializer.deserialize(DataInputPlus,int)",3,21,n/a,4,0,2,1,1
"org.apache.cassandra.gms.HeartBeatStateSerializer.serialize(HeartBeatState,DataOutputPlus,int)",4,22,n/a,5,0,3,2,1
"org.apache.cassandra.gms.HeartBeatStateSerializer.serializedSize(HeartBeatState,int)",4,19,n/a,4,0,2,1,1
"org.apache.cassandra.gms.IEndpointStateChangeSubscriber.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.gms.IEndpointStateChangeSubscriber.onAlive(InetAddress,EndpointState)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.gms.IEndpointStateChangeSubscriber.onChange(InetAddress,ApplicationState,VersionedValue)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.gms.IEndpointStateChangeSubscriber.onDead(InetAddress,EndpointState)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.gms.IEndpointStateChangeSubscriber.onJoin(InetAddress,EndpointState)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.gms.IEndpointStateChangeSubscriber.onRemove(InetAddress)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.IEndpointStateChangeSubscriber.onRestart(InetAddress,EndpointState)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.gms.IFailureDetectionEventListener.convict(InetAddress,double)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.gms.IFailureDetector.forceConviction(InetAddress)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.IFailureDetector.interpret(InetAddress)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.IFailureDetector.isAlive(InetAddress)",n/a,4,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.IFailureDetector.registerFailureDetectionEventListener(IFailureDetectionEventListener)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.IFailureDetector.remove(InetAddress)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.IFailureDetector.report(InetAddress)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.IFailureDetector.unregisterFailureDetectionEventListener(IFailureDetectionEventListener)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.gms.TokenSerializer.deserialize(IPartitioner,DataInput)",8,2,n/a,15,1,2,10,3
"org.apache.cassandra.gms.TokenSerializer.serialize(IPartitioner,Collection<Token>,DataOutput)",6,0,n/a,10,1,3,5,2
"org.apache.cassandra.gms.VersionGenerator.getNextVersion()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValue(String)",2,23,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValue(String,int)",1,2,n/a,10,0,2,3,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.VersionedValueFactory(IPartitioner)",0,15,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.bootstrapping(Collection<Token>)",3,10,n/a,5,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.cloneWithHigherVersion(VersionedValue)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.datacenter(String)",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.hibernate(boolean)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.hostId(UUID)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.internalIP(String)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.leaving(Collection<Token>)",3,8,n/a,5,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.left(Collection<Token>,long)",4,9,n/a,6,0,2,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.load(double)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.makeTokenString(Collection<Token>)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.moving(Token)",3,5,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.networkVersion()",2,3,n/a,4,0,0,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.normal(Collection<Token>)",3,11,n/a,5,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.rack(String)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.releaseVersion()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removalCoordinator(UUID)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removedNonlocal(UUID,long)",4,1,n/a,4,0,2,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.removingNonlocal(UUID)",3,2,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.rpcReady(boolean)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.rpcaddress(InetAddress)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.schema(UUID)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.severity(double)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.shutdown(boolean)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory.tokens(Collection<Token>)",7,22,n/a,14,1,1,6,2
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.deserialize(DataInputPlus,int)",3,21,n/a,6,0,2,3,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.outValue(VersionedValue,int)",0,2,n/a,4,0,2,1,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.serialize(VersionedValue,DataOutputPlus,int)",3,22,n/a,5,0,3,2,1
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer.serializedSize(VersionedValue,int)",3,19,n/a,4,0,2,1,1
"org.apache.cassandra.gms.VersionedValue.compareTo(VersionedValue)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.gms.VersionedValue.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.gms.VersionedValue.versionString(String...)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.ColumnFamilySplit()",0,1,n/a,2,0,0,0,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.ColumnFamilySplit(String,String,String[])",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.ColumnFamilySplit(String,String,long,String[])",0,1,n/a,9,0,4,6,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getEndToken()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getLength()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getLocations()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.getStartToken()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.read(DataInput)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.hadoop.ColumnFamilySplit.readFields(DataInput)",5,1,n/a,19,1,1,10,3
"org.apache.cassandra.hadoop.ColumnFamilySplit.toString()",1,0,n/a,8,0,0,1,2
"org.apache.cassandra.hadoop.ColumnFamilySplit.write(DataOutput)",5,0,n/a,13,1,1,6,2
"org.apache.cassandra.hadoop.ConfigHelper.createConnection(Configuration,String,Integer)",5,1,n/a,13,1,3,4,2
"org.apache.cassandra.hadoop.ConfigHelper.getClientFromAddressList(Configuration,String[],int)",7,2,n/a,27,2,3,13,5
"org.apache.cassandra.hadoop.ConfigHelper.getClientFromInputAddressList(Configuration)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getClientFromOutputAddressList(Configuration)",4,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getClientTransportFactory(Configuration)",6,2,n/a,8,0,1,5,1
"org.apache.cassandra.hadoop.ConfigHelper.getClientTransportFactory(String)",3,2,n/a,11,1,1,3,2
"org.apache.cassandra.hadoop.ConfigHelper.getInputColumnFamily(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputInitialAddress(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputIsWide(Configuration)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyRange(Configuration)",2,0,n/a,6,0,1,2,2
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspace(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspacePassword(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputKeyspaceUserName(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputPartitioner(Configuration)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputRpcPort(Configuration)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getInputSlicePredicate(Configuration)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.hadoop.ConfigHelper.getInputSplitSize(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOptions(Configuration,Set<String>)",3,1,n/a,11,1,2,6,3
"org.apache.cassandra.hadoop.ConfigHelper.getOutputColumnFamily(Configuration)",3,2,n/a,7,0,1,3,2
"org.apache.cassandra.hadoop.ConfigHelper.getOutputCompressionChunkLength(Configuration)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputCompressionClass(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputInitialAddress(Configuration)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspace(Configuration)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspacePassword(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputKeyspaceUserName(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputLocalDCOnly(Configuration)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputPartitioner(Configuration)",2,3,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getOutputRpcPort(Configuration)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getRangeBatchSize(Configuration)",1,0,n/a,13,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getReadConsistencyLevel(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getThriftFramedTransportSize(Configuration)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.getWriteConsistencyLevel(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ConfigHelper.keyRangeFromString(String)",6,1,n/a,15,1,1,7,2
"org.apache.cassandra.hadoop.ConfigHelper.predicateFromString(String)",6,1,n/a,15,1,1,7,2
"org.apache.cassandra.hadoop.ConfigHelper.setInputColumnFamily(Configuration,String,String)",1,0,n/a,11,0,3,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputColumnFamily(Configuration,String,String,boolean)",6,1,n/a,18,0,4,7,3
"org.apache.cassandra.hadoop.ConfigHelper.setInputInitialAddress(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspacePassword(Configuration,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspaceUserName(Configuration,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputKeyspaceUserNameAndPassword(Configuration,String,String)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputPartitioner(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputRange(Configuration,List<IndexExpression>)",4,0,n/a,9,0,2,2,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputRange(Configuration,String,String)",5,0,n/a,9,0,3,2,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputRange(Configuration,String,String,List<IndexExpression>)",6,0,n/a,9,0,4,2,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputRpcPort(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputSlicePredicate(Configuration,SlicePredicate)",2,0,n/a,10,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setInputSplitSize(Configuration,int)",1,0,n/a,12,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputColumnFamily(Configuration,String)",1,2,n/a,10,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputColumnFamily(Configuration,String,String)",2,1,n/a,12,0,3,2,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputCompressionChunkLength(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputCompressionClass(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputInitialAddress(Configuration,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspace(Configuration,String)",2,1,n/a,12,0,2,3,2
"org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspacePassword(Configuration,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspaceUserName(Configuration,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputKeyspaceUserNameAndPassword(Configuration,String,String)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputLocalDCOnly(Configuration,boolean)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputPartitioner(Configuration,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setOutputRpcPort(Configuration,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setRangeBatchSize(Configuration,int)",1,0,n/a,13,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setReadConsistencyLevel(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setThriftFramedTransportSizeInMb(Configuration,int)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.setWriteConsistencyLevel(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ConfigHelper.thriftToString(TBase)",5,4,n/a,14,1,1,5,2
"org.apache.cassandra.hadoop.HadoopCompat.getConfiguration(JobContext)",1,4,n/a,7,0,1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.getCounter(TaskInputOutputContext,String,String)",1,0,n/a,8,0,3,1,1
"org.apache.cassandra.hadoop.HadoopCompat.getTaskAttemptID(TaskAttemptContext)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.incrementCounter(Counter,long)",1,0,n/a,9,0,2,1,1
"org.apache.cassandra.hadoop.HadoopCompat.invoke(Method,Object,Object...)",3,4,n/a,10,1,3,3,2
"org.apache.cassandra.hadoop.HadoopCompat.isVersion2x()",0,0,n/a,6,0,0,1,1
"org.apache.cassandra.hadoop.HadoopCompat.newGenericCounter(String,String,long)",2,0,n/a,12,1,3,3,2
"org.apache.cassandra.hadoop.HadoopCompat.newInstance(Constructor<?>,Object...)",4,3,n/a,11,1,2,5,4
"org.apache.cassandra.hadoop.HadoopCompat.newJobContext(Configuration,JobID)",1,0,n/a,7,0,2,1,1
"org.apache.cassandra.hadoop.HadoopCompat.newMapContext(Configuration,TaskAttemptID,RecordReader,RecordWriter,OutputCommitter,StatusReporter,InputSplit)",1,0,n/a,14,0,7,1,1
"org.apache.cassandra.hadoop.HadoopCompat.newTaskAttemptContext(Configuration,TaskAttemptID)",1,0,n/a,9,0,2,1,1
"org.apache.cassandra.hadoop.HadoopCompat.progress(TaskAttemptContext)",1,3,n/a,7,0,1,1,1
"org.apache.cassandra.hadoop.HadoopCompat.setStatus(TaskAttemptContext,String)",1,0,n/a,7,0,2,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.ReporterWrapper(Reporter)",0,0,n/a,3,0,1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.getCounter(Enum<?>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.getCounter(String,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.getInputSplit()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.getProgress()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.incrCounter(Enum<?>,long)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.incrCounter(String,String,long)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.progress()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.ReporterWrapper.setStatus(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.abortTask(TaskAttemptContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.cleanupJob(JobContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.commitTask(TaskAttemptContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.needsTaskCommit(TaskAttemptContext)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.setupJob(JobContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter.setupTask(TaskAttemptContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.checkOutputSpecs(Configuration)",2,1,n/a,7,1,1,2,2
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.checkOutputSpecs(FileSystem,JobConf)",1,0,n/a,6,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.checkOutputSpecs(JobContext)",2,1,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getDeleteSourceOnSuccess(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getIgnoreHosts(Configuration)",1,0,n/a,9,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getOutputCommitter(TaskAttemptContext)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getRecordWriter(FileSystem,JobConf,String,Progressable)",1,0,n/a,6,0,4,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getRecordWriter(TaskAttemptContext)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableForAlias(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableInsertStatement(Configuration,String)",2,0,n/a,9,1,2,4,2
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.getTableSchema(Configuration,String)",2,0,n/a,9,1,2,4,2
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setDeleteSourceOnSuccess(Configuration,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setIgnoreHosts(Configuration,String)",1,0,n/a,10,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setIgnoreHosts(Configuration,String...)",1,0,n/a,9,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableAlias(Configuration,String,String)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableInsertStatement(Configuration,String,String)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.setTableSchema(Configuration,String,String)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.CqlBulkRecordWriter(Configuration)",9,2,n/a,9,0,1,6,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.CqlBulkRecordWriter(Configuration,Progressable)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.CqlBulkRecordWriter(TaskAttemptContext)",3,1,n/a,6,0,1,3,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.ExternalClient.ExternalClient(Configuration)",7,1,n/a,8,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.ExternalClient.resolveHostAddresses(Configuration)",6,1,n/a,16,2,1,6,3
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler.debug(String)",0,6,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler.output(String)",0,22,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler.warn(String)",0,9,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler.warn(String,Throwable)",0,4,n/a,1,0,2,0,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.close()",14,2,n/a,34,3,0,16,9
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.close(Reporter)",1,0,n/a,6,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.close(TaskAttemptContext)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.getOutputLocation()",3,1,n/a,7,0,0,4,2
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.getTableDirectory()",8,1,n/a,9,1,0,4,3
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.prepareWriter()",17,1,n/a,6,3,0,8,4
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.setConfigs()",13,3,n/a,31,1,0,16,5
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.write(Object,List<ByteBuffer>)",5,0,n/a,31,1,2,8,4
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getAuthProvider(Configuration)",6,1,n/a,7,0,1,4,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getBooleanSetting(String,Configuration)",4,3,n/a,7,0,2,4,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getClientAuthProvider(String,Configuration)",10,1,n/a,22,2,2,8,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getCluster(String[],Configuration,int)",26,2,n/a,26,1,3,16,4
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCluster(String,Configuration)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCluster(String[],Configuration)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCoreConnections(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputCql(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputMaxConnections(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputMaxSimultReqPerConnections(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeAuthProvider(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeConnectionTimeout(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeKeepAlive(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativePort(Configuration)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeReadConnectionTimeout(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeReceiveBufferSize(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeReuseAddress(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLCipherSuites(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLKeystorePassword(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLKeystorePath(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLTruststorePassword(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSSLTruststorePath(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSendBufferSize(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeSolinger(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputNativeTcpNodelay(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputPageRowSize(Configuration)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputWhereClauses(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getInputcolumns(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getIntSetting(String,Configuration)",4,10,n/a,7,0,2,4,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCluster(String,Configuration)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCluster(String[],Configuration)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputCql(Configuration)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getOutputNativePort(Configuration)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getProtocolVersion(Configuration)",1,1,n/a,3,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getReadLoadBalancingPolicy(String[])",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getReadPoolingOptions(Configuration)",14,1,n/a,17,1,1,12,5
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getReadQueryOptions(Configuration)",9,1,n/a,11,0,1,8,4
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getReadSocketOptions(Configuration)",33,1,n/a,29,0,1,26,9
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getSSLContext(String,String,String,String)",20,1,n/a,19,1,4,13,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getSSLOptions(Configuration)",21,1,n/a,26,2,1,15,7
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.getStringSetting(String,Configuration)",3,8,n/a,7,0,2,4,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCQLPageRowSize(Configuration,String)",2,0,n/a,14,1,2,3,2
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputColumns(Configuration,String)",2,0,n/a,12,0,2,3,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCoreConnections(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputCql(Configuration,String)",2,0,n/a,6,0,2,3,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputMaxConnections(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputMaxSimultReqPerConnections(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeAuthProvider(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeConnectionTimeout(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeKeepAlive(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativePort(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReadConnectionTimeout(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReceiveBufferSize(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeReuseAddress(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLCipherSuites(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLKeystorePassword(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLKeystorePath(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLTruststorePassword(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSSLTruststorePath(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSendBufferSize(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeSolinger(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputNativeTcpNodelay(Configuration,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setInputWhereClauses(Configuration,String)",2,0,n/a,12,0,2,3,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setOutputCql(Configuration,String)",2,0,n/a,12,0,2,3,3
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper.setUserNameAndPassword(Configuration,String,String)",5,0,n/a,9,1,3,4,2
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.SplitCallable.SplitCallable(TokenRange,Set<Host>,Configuration)",0,2,n/a,6,0,3,3,1
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.SplitCallable.call()",21,0,n/a,31,2,0,15,7
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.createRecordReader(InputSplit,TaskAttemptContext)",1,0,n/a,7,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.describeSplits(String,String,TokenRange,int)",14,1,n/a,33,1,4,19,4
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getRangeMap(Configuration,String)",10,1,n/a,11,1,2,6,2
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getRecordReader(InputSplit,JobConf,Reporter)",6,0,n/a,15,0,3,4,1
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getSplits(JobConf,int)",6,0,n/a,10,0,2,8,2
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getSplits(JobContext)",51,1,n/a,84,5,1,42,13
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.getSubSplits(String,String,TokenRange,Configuration)",3,1,n/a,12,1,4,4,2
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.rangeToTokenRange(Metadata,Range<Token>)",7,1,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.validateConfiguration(Configuration)",7,1,n/a,11,1,1,6,5
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.abortTask(TaskAttemptContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.cleanupJob(JobContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.commitTask(TaskAttemptContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.needsTaskCommit(TaskAttemptContext)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.setupJob(JobContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter.setupTask(TaskAttemptContext)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.checkOutputSpecs(Configuration)",6,0,n/a,9,0,1,6,4
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.checkOutputSpecs(FileSystem,JobConf)",1,0,n/a,6,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.checkOutputSpecs(JobContext)",2,0,n/a,10,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getOutputCommitter(TaskAttemptContext)",1,0,n/a,13,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getRecordWriter(FileSystem,JobConf,String,Progressable)",1,0,n/a,6,0,4,1,1
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.getRecordWriter(TaskAttemptContext)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.CqlRecordReader()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.RowIterator.RowIterator()",17,1,n/a,8,0,0,5,2
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.RowIterator.computeNext()",15,1,n/a,30,3,0,16,8
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(String,Class<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(String,TypeCodec<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(String,TypeToken<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(int,Class<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(int,TypeCodec<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.get(int,TypeToken<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBool(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBool(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getByte(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getByte(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBytes(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBytes(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBytesUnsafe(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getBytesUnsafe(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getColumnDefinitions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDate(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDate(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDecimal(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDecimal(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDouble(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getDouble(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getFloat(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getFloat(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getInet(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getInet(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getInt(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getInt(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getList(String,Class<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getList(String,TypeToken<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getList(int,Class<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getList(int,TypeToken<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getLong(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getLong(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getMap(String,Class<K>,Class<V>)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getMap(String,TypeToken<K>,TypeToken<V>)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getMap(int,Class<K>,Class<V>)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getMap(int,TypeToken<K>,TypeToken<V>)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getObject(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getObject(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getPartitionKeyToken()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getSet(String,Class<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getSet(String,TypeToken<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getSet(int,Class<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getSet(int,TypeToken<T>)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getShort(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getShort(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getString(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getString(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTime(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTime(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTimestamp(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTimestamp(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getToken(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getToken(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTupleValue(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getTupleValue(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getUDTValue(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getUDTValue(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getUUID(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getUUID(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getVarint(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.getVarint(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.isNull(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.isNull(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow.setRow(Row)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.buildQuery()",9,1,n/a,14,0,0,5,2
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.close()",2,0,n/a,7,0,0,4,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.createKey()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.createValue()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.fetchKeys()",10,1,n/a,18,1,0,5,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getAdditionalWhereClauses()",2,1,n/a,9,0,0,6,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getCurrentKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getCurrentValue()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getNativeProtocolVersion()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getPos()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getProgress()",1,0,n/a,8,0,0,4,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.getSelectColumns()",7,1,n/a,15,2,0,7,4
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.initialize(InputSplit,TaskAttemptContext)",29,0,n/a,49,1,2,27,10
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.makeColumnList(Collection<String>)",5,2,n/a,4,2,1,2,1
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.next(Long,Row)",3,0,n/a,14,1,2,4,2
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.nextKeyValue()",7,1,n/a,20,1,0,9,3
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.quote(String)",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.CqlRecordWriter(Configuration)",25,2,n/a,33,3,1,18,4
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.CqlRecordWriter(Configuration,Progressable)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.CqlRecordWriter(TaskAttemptContext)",2,1,n/a,12,0,1,2,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache.NativeRingCache(Configuration)",2,1,n/a,6,0,1,3,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache.getEndpoints(TokenRange)",5,2,n/a,10,1,1,5,2
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache.getRange(ByteBuffer)",7,1,n/a,13,2,1,6,3
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache.refreshEndpointMap()",10,1,n/a,14,2,0,7,2
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.RangeClient(List<InetAddress>)",1,1,n/a,9,0,1,2,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.canRetryDriverConnection(Exception)",10,1,n/a,17,3,1,8,7
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.close()",3,1,n/a,16,1,0,7,3
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.closeInternal()",1,3,n/a,7,1,0,2,2
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.preparedStatement(Session)",4,1,n/a,20,2,1,9,4
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.put(List<ByteBuffer>)",2,1,n/a,20,2,1,7,5
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient.run()",23,0,n/a,81,5,0,38,15
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.appendKeyWhereClauses(String)",8,1,n/a,12,0,1,6,4
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close()",2,2,n/a,19,2,0,7,4
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close(Reporter)",1,0,n/a,6,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.close(TaskAttemptContext)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.getPartitionKey(Map<String, ByteBuffer>)",9,1,n/a,16,1,1,10,3
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.quote(String)",1,3,n/a,5,0,1,1,1
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.write(Map<String, ByteBuffer>,List<ByteBuffer>)",19,0,n/a,40,1,2,17,6
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.LimitedLocalNodeFirstLocalBalancingPolicy(String[])",5,0,n/a,16,2,1,6,3
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.close()",0,0,n/a,5,0,0,0,1
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.distance(Host)",1,0,n/a,12,1,1,3,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.getLocalInetAddresses()",10,1,n/a,5,3,0,5,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.init(Cluster,Collection<Host>)",6,0,n/a,14,2,2,6,3
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.isLocalHost(Host)",3,2,n/a,5,0,1,2,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.newQueryPlan(String,Statement)",11,0,n/a,20,2,2,9,3
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onAdd(Host)",4,0,n/a,9,1,1,3,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onDown(Host)",2,0,n/a,8,1,1,2,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onRemove(Host)",2,0,n/a,8,1,1,2,2
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onSuspected(Host)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy.onUp(Host)",4,0,n/a,9,1,1,3,2
"org.apache.cassandra.hints.ChecksummedDataInput.Builder.Builder(ChannelProxy)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.Builder.build()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.ChecksummedDataInput(Builder)",3,1,n/a,8,0,1,5,1
"org.apache.cassandra.hints.ChecksummedDataInput.bytesPastLimit()",1,1,n/a,5,0,0,2,1
"org.apache.cassandra.hints.ChecksummedDataInput.checkCrc()",4,0,n/a,16,1,0,6,1
"org.apache.cassandra.hints.ChecksummedDataInput.checkLimit(int)",2,2,n/a,7,0,1,4,3
"org.apache.cassandra.hints.ChecksummedDataInput.limit(long)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.hints.ChecksummedDataInput.open(File)",3,0,n/a,5,0,1,1,1
"org.apache.cassandra.hints.ChecksummedDataInput.reBuffer()",3,2,n/a,7,0,0,3,1
"org.apache.cassandra.hints.ChecksummedDataInput.read(byte[],int,int)",2,0,n/a,6,0,3,2,1
"org.apache.cassandra.hints.ChecksummedDataInput.readFully(byte[])",2,0,n/a,6,0,1,2,1
"org.apache.cassandra.hints.ChecksummedDataInput.resetCrc()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.hints.ChecksummedDataInput.resetLimit()",0,1,n/a,5,0,0,2,1
"org.apache.cassandra.hints.ChecksummedDataInput.updateCrc()",7,2,n/a,10,0,0,6,4
"org.apache.cassandra.hints.EncodedHintMessage.EncodedHintMessage(UUID,ByteBuffer,int)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.hints.EncodedHintMessage.Serializer.deserialize(DataInputPlus,int)",1,21,n/a,4,0,2,1,1
"org.apache.cassandra.hints.EncodedHintMessage.Serializer.serialize(EncodedHintMessage,DataOutputPlus,int)",5,22,n/a,8,0,3,5,2
"org.apache.cassandra.hints.EncodedHintMessage.Serializer.serializedSize(EncodedHintMessage,int)",5,19,n/a,9,0,2,6,2
"org.apache.cassandra.hints.EncodedHintMessage.createMessageOut()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.Hint.Hint(Mutation,long,int)",0,3,n/a,6,0,3,3,1
"org.apache.cassandra.hints.Hint.Serializer.deserialize(DataInputPlus,int)",4,21,n/a,6,0,2,3,1
"org.apache.cassandra.hints.Hint.Serializer.serialize(Hint,DataOutputPlus,int)",3,22,n/a,6,0,3,3,1
"org.apache.cassandra.hints.Hint.Serializer.serializedSize(Hint,int)",3,19,n/a,7,0,2,4,1
"org.apache.cassandra.hints.Hint.apply()",6,0,n/a,15,0,0,8,5
"org.apache.cassandra.hints.Hint.create(Mutation,long)",2,3,n/a,8,0,2,1,1
"org.apache.cassandra.hints.Hint.create(Mutation,long,int)",1,0,n/a,9,0,3,1,1
"org.apache.cassandra.hints.Hint.isLive()",4,1,n/a,9,0,0,3,1
"org.apache.cassandra.hints.HintMessage.HintMessage(UUID,Hint)",0,1,n/a,6,0,2,3,1
"org.apache.cassandra.hints.HintMessage.HintMessage(UUID,UUID)",0,1,n/a,6,0,2,3,1
"org.apache.cassandra.hints.HintMessage.Serializer.deserialize(DataInputPlus,int)",9,21,n/a,20,1,2,7,2
"org.apache.cassandra.hints.HintMessage.Serializer.serialize(HintMessage,DataOutputPlus,int)",5,22,n/a,11,0,3,4,1
"org.apache.cassandra.hints.HintMessage.Serializer.serializedSize(HintMessage,int)",3,19,n/a,8,0,2,5,1
"org.apache.cassandra.hints.HintMessage.createMessageOut()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintResponse.HintResponse()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.hints.HintResponse.Serializer.deserialize(DataInputPlus,int)",0,21,n/a,4,0,2,1,1
"org.apache.cassandra.hints.HintResponse.Serializer.serialize(HintResponse,DataOutputPlus,int)",0,22,n/a,3,0,3,0,1
"org.apache.cassandra.hints.HintResponse.Serializer.serializedSize(HintResponse,int)",0,19,n/a,4,0,2,1,1
"org.apache.cassandra.hints.HintVerbHandler.doVerb(MessageIn<HintMessage>,int)",11,0,n/a,35,1,2,15,4
"org.apache.cassandra.hints.HintVerbHandler.reply(int,InetAddress)",2,3,n/a,4,0,2,1,1
"org.apache.cassandra.hints.HintsBuffer.Allocation.Allocation(int,int,Group)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.hints.HintsBuffer.Allocation.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsBuffer.Allocation.write(Hint)",15,1,n/a,19,1,1,11,2
"org.apache.cassandra.hints.HintsBuffer.Allocation.write(Iterable<UUID>,Hint)",2,0,n/a,6,0,2,3,2
"org.apache.cassandra.hints.HintsBuffer.HintsBuffer(ByteBuffer)",3,2,n/a,7,0,1,4,1
"org.apache.cassandra.hints.HintsBuffer.allocate(int)",7,0,n/a,21,1,1,8,3
"org.apache.cassandra.hints.HintsBuffer.allocate(int,Group)",3,1,n/a,10,1,2,5,2
"org.apache.cassandra.hints.HintsBuffer.allocateBytes(int)",4,1,n/a,17,2,1,10,5
"org.apache.cassandra.hints.HintsBuffer.capacity()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsBuffer.consumingHintsIterator(UUID)",10,0,n/a,8,2,1,9,3
"org.apache.cassandra.hints.HintsBuffer.create(int)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsBuffer.free()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsBuffer.hostIds()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsBuffer.isClosed()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsBuffer.put(UUID,int)",4,1,n/a,9,0,2,4,2
"org.apache.cassandra.hints.HintsBuffer.recycle()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.hints.HintsBuffer.remaining()",2,0,n/a,5,0,0,2,2
"org.apache.cassandra.hints.HintsBuffer.waitForModifications()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.hints.HintsBufferPool.FlushCallback.flush(HintsBuffer,HintsBufferPool)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.hints.HintsBufferPool.HintsBufferPool(int,FlushCallback)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.hints.HintsBufferPool.allocate(int)",4,1,n/a,14,1,1,8,4
"org.apache.cassandra.hints.HintsBufferPool.createBuffer()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsBufferPool.currentBuffer()",1,1,n/a,7,0,0,3,2
"org.apache.cassandra.hints.HintsBufferPool.initializeCurrentBuffer()",1,1,n/a,5,0,0,2,2
"org.apache.cassandra.hints.HintsBufferPool.offer(HintsBuffer)",2,0,n/a,7,0,1,4,2
"org.apache.cassandra.hints.HintsBufferPool.switchCurrentBuffer(HintsBuffer)",2,1,n/a,8,0,1,5,3
"org.apache.cassandra.hints.HintsBufferPool.write(Iterable<UUID>,Hint)",3,0,n/a,12,1,2,3,1
"org.apache.cassandra.hints.HintsCatalog.HintsCatalog(File,Map<UUID, List<HintsDescriptor>>)",7,1,n/a,7,0,2,4,2
"org.apache.cassandra.hints.HintsCatalog.deleteAllHints()",2,0,n/a,9,0,0,1,1
"org.apache.cassandra.hints.HintsCatalog.deleteAllHints(UUID)",2,1,n/a,11,0,1,3,2
"org.apache.cassandra.hints.HintsCatalog.exciseStore(UUID)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.hints.HintsCatalog.fsyncDirectory()",4,0,n/a,9,1,0,4,2
"org.apache.cassandra.hints.HintsCatalog.get(UUID)",4,1,n/a,9,0,1,2,2
"org.apache.cassandra.hints.HintsCatalog.hasFiles()",2,0,n/a,7,0,0,1,1
"org.apache.cassandra.hints.HintsCatalog.load(File)",8,0,n/a,19,1,1,4,2
"org.apache.cassandra.hints.HintsCatalog.maybeLoadStores(Iterable<UUID>)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.hints.HintsCatalog.stores()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsDescriptor.HintsDescriptor(UUID,int,long,ImmutableMap<String, Object>)",0,2,n/a,7,0,4,4,1
"org.apache.cassandra.hints.HintsDescriptor.HintsDescriptor(UUID,long)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.hints.HintsDescriptor.checksumFileName()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsDescriptor.decodeJSONBytes(byte[])",3,1,n/a,5,0,1,1,1
"org.apache.cassandra.hints.HintsDescriptor.deserialize(DataInput)",22,1,n/a,21,0,1,18,1
"org.apache.cassandra.hints.HintsDescriptor.equals(Object)",4,0,n/a,13,0,1,6,6
"org.apache.cassandra.hints.HintsDescriptor.fileName()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsDescriptor.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.hints.HintsDescriptor.isHintFileName(Path)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsDescriptor.messagingVersion()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsDescriptor.messagingVersion(int)",1,1,n/a,10,1,1,5,3
"org.apache.cassandra.hints.HintsDescriptor.readFromFile(Path)",5,0,n/a,11,1,1,3,2
"org.apache.cassandra.hints.HintsDescriptor.serialize(DataOutputPlus)",23,0,n/a,19,0,1,16,1
"org.apache.cassandra.hints.HintsDescriptor.serializedSize()",9,0,n/a,13,0,0,10,1
"org.apache.cassandra.hints.HintsDescriptor.toString()",6,0,n/a,10,0,0,1,1
"org.apache.cassandra.hints.HintsDescriptor.updateChecksumLong(CRC32,long)",2,6,n/a,5,0,2,2,1
"org.apache.cassandra.hints.HintsDescriptor.validateCRC(int,int)",1,2,n/a,5,0,2,2,2
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask.DispatchHintsTask(HintsStore,UUID)",6,2,n/a,13,0,2,5,2
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask.dispatch()",7,1,n/a,23,2,0,13,6
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask.dispatch(HintsDescriptor)",20,1,n/a,29,2,1,16,4
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask.run()",2,0,n/a,11,1,0,3,1
"org.apache.cassandra.hints.HintsDispatchExecutor.HintsDispatchExecutor(File,int,AtomicBoolean)",4,0,n/a,13,0,3,4,1
"org.apache.cassandra.hints.HintsDispatchExecutor.TransferHintsTask.TransferHintsTask(HintsCatalog,Supplier<UUID>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.hints.HintsDispatchExecutor.TransferHintsTask.run()",11,0,n/a,24,1,0,13,4
"org.apache.cassandra.hints.HintsDispatchExecutor.TransferHintsTask.transfer(UUID)",5,2,n/a,7,0,1,2,1
"org.apache.cassandra.hints.HintsDispatchExecutor.completeDispatchBlockingly(HintsStore)",3,0,n/a,13,1,1,5,3
"org.apache.cassandra.hints.HintsDispatchExecutor.dispatch(HintsStore)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.dispatch(HintsStore,UUID)",3,1,n/a,13,0,2,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.isScheduled(HintsStore)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsDispatchExecutor.shutdownBlocking()",2,0,n/a,8,0,0,2,1
"org.apache.cassandra.hints.HintsDispatchExecutor.transfer(HintsCatalog,Supplier<UUID>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.hints.HintsDispatchTrigger.HintsDispatchTrigger(HintsCatalog,HintsWriteExecutor,HintsDispatchExecutor,AtomicBoolean)",0,0,n/a,10,0,4,4,1
"org.apache.cassandra.hints.HintsDispatchTrigger.isScheduled(HintsStore)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsDispatchTrigger.run()",13,0,n/a,11,0,0,3,3
"org.apache.cassandra.hints.HintsDispatchTrigger.schedule(HintsStore)",4,1,n/a,7,0,1,4,3
"org.apache.cassandra.hints.HintsDispatcher.Callback.await()",5,1,n/a,14,1,0,6,3
"org.apache.cassandra.hints.HintsDispatcher.Callback.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsDispatcher.Callback.onFailure(InetAddress)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.hints.HintsDispatcher.Callback.response(MessageIn)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.hints.HintsDispatcher.HintsDispatcher(HintsReader,UUID,InetAddress,int,AtomicBoolean)",0,1,n/a,9,0,5,6,1
"org.apache.cassandra.hints.HintsDispatcher.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsDispatcher.create(File,RateLimiter,UUID,UUID,AtomicBoolean)",5,0,n/a,6,0,5,3,1
"org.apache.cassandra.hints.HintsDispatcher.dispatch()",1,0,n/a,13,1,0,5,3
"org.apache.cassandra.hints.HintsDispatcher.dispatch(Page)",2,2,n/a,8,0,1,2,2
"org.apache.cassandra.hints.HintsDispatcher.dispatchOffset()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.hints.HintsDispatcher.isHostAlive()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsDispatcher.isPaused()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsDispatcher.seek(long)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.hints.HintsDispatcher.sendEncodedHint(ByteBuffer)",5,1,n/a,7,0,1,4,1
"org.apache.cassandra.hints.HintsDispatcher.sendHint(Hint)",5,1,n/a,7,0,1,4,1
"org.apache.cassandra.hints.HintsDispatcher.sendHints(Iterator<T>,Collection<Callback>,Function<T, Callback>)",6,2,n/a,13,1,3,5,4
"org.apache.cassandra.hints.HintsDispatcher.sendHintsAndAwait(Page)",8,1,n/a,20,0,1,8,5
"org.apache.cassandra.hints.HintsReader.BuffersIterator.BuffersIterator(long)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.hints.HintsReader.BuffersIterator.computeNext()",6,1,n/a,22,2,0,11,5
"org.apache.cassandra.hints.HintsReader.BuffersIterator.computeNextInternal()",6,1,n/a,10,0,0,6,2
"org.apache.cassandra.hints.HintsReader.BuffersIterator.readBuffer(int)",7,1,n/a,15,0,1,8,3
"org.apache.cassandra.hints.HintsReader.HintsIterator.HintsIterator(long)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.hints.HintsReader.HintsIterator.computeNext()",6,1,n/a,22,2,0,11,5
"org.apache.cassandra.hints.HintsReader.HintsIterator.computeNextInternal()",6,1,n/a,10,0,0,6,2
"org.apache.cassandra.hints.HintsReader.HintsIterator.readHint(int)",14,1,n/a,29,1,1,14,4
"org.apache.cassandra.hints.HintsReader.HintsReader(HintsDescriptor,File,ChecksummedDataInput,RateLimiter)",0,1,n/a,7,0,4,4,1
"org.apache.cassandra.hints.HintsReader.Page.Page(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsReader.Page.buffersIterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsReader.Page.hintsIterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsReader.PagesIterator.computeNext()",10,1,n/a,8,0,0,4,2
"org.apache.cassandra.hints.HintsReader.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsReader.descriptor()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsReader.iterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsReader.open(File)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsReader.open(File,RateLimiter)",5,1,n/a,15,1,2,6,2
"org.apache.cassandra.hints.HintsReader.seek(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsService.HintsService()",13,1,n/a,18,0,0,11,1
"org.apache.cassandra.hints.HintsService.deleteAllHints()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.hints.HintsService.deleteAllHintsForEndpoint(InetAddress)",3,2,n/a,12,0,1,4,2
"org.apache.cassandra.hints.HintsService.deleteAllHintsForEndpoint(String)",3,2,n/a,18,1,1,5,2
"org.apache.cassandra.hints.HintsService.excise(UUID)",9,1,n/a,38,1,1,11,3
"org.apache.cassandra.hints.HintsService.flushAndFsyncBlockingly(Iterable<UUID>)",3,1,n/a,11,0,1,3,1
"org.apache.cassandra.hints.HintsService.pauseDispatch()",2,4,n/a,5,0,0,2,1
"org.apache.cassandra.hints.HintsService.registerMBean()",4,1,n/a,12,1,0,4,2
"org.apache.cassandra.hints.HintsService.resumeDispatch()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.hints.HintsService.shutdownBlocking()",8,2,n/a,20,0,0,11,3
"org.apache.cassandra.hints.HintsService.startDispatch()",4,1,n/a,10,0,0,5,2
"org.apache.cassandra.hints.HintsService.transferHints(Supplier<UUID>)",9,1,n/a,35,1,1,9,2
"org.apache.cassandra.hints.HintsService.write(Iterable<UUID>,Hint)",6,0,n/a,16,0,2,6,3
"org.apache.cassandra.hints.HintsService.write(UUID,Hint)",2,0,n/a,10,0,2,1,1
"org.apache.cassandra.hints.HintsServiceMBean.deleteAllHints()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.hints.HintsServiceMBean.deleteAllHintsForEndpoint(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.hints.HintsServiceMBean.pauseDispatch()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.hints.HintsServiceMBean.resumeDispatch()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.hints.HintsStore.HintsStore(UUID,File,List<HintsDescriptor>)",7,1,n/a,10,0,3,6,1
"org.apache.cassandra.hints.HintsStore.address()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsStore.blacklist(HintsDescriptor)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsStore.cleanUp(HintsDescriptor)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsStore.closeWriter()",4,0,n/a,10,1,0,5,2
"org.apache.cassandra.hints.HintsStore.create(UUID,File,List<HintsDescriptor>)",3,0,n/a,5,0,3,2,1
"org.apache.cassandra.hints.HintsStore.delete(HintsDescriptor)",10,2,n/a,10,0,1,5,2
"org.apache.cassandra.hints.HintsStore.deleteAllHints()",6,0,n/a,14,1,0,7,3
"org.apache.cassandra.hints.HintsStore.fsyncWriter()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.hints.HintsStore.getDispatchOffset(HintsDescriptor)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsStore.getOrOpenWriter()",1,0,n/a,6,0,0,3,2
"org.apache.cassandra.hints.HintsStore.getWriter()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsStore.hasFiles()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsStore.isLive()",2,0,n/a,5,0,0,2,2
"org.apache.cassandra.hints.HintsStore.isWriting()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsStore.markDispatchOffset(HintsDescriptor,long)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.hints.HintsStore.offerFirst(HintsDescriptor)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsStore.offerLast(HintsDescriptor)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsStore.openWriter()",6,1,n/a,13,1,0,5,2
"org.apache.cassandra.hints.HintsStore.poll()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferPoolTask.FlushBufferPoolTask(HintsBufferPool)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferPoolTask.run()",3,0,n/a,6,0,0,3,1
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferTask.FlushBufferTask(HintsBuffer,HintsBufferPool)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferTask.run()",5,0,n/a,14,1,0,6,2
"org.apache.cassandra.hints.HintsWriteExecutor.FsyncWritersTask.FsyncWritersTask(Iterable<HintsStore>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.FsyncWritersTask.run()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.hints.HintsWriteExecutor.HintsWriteExecutor(HintsCatalog)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.hints.HintsWriteExecutor.PartiallyFlushBufferPoolTask.PartiallyFlushBufferPoolTask(HintsBufferPool,Iterable<HintsStore>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.hints.HintsWriteExecutor.PartiallyFlushBufferPoolTask.run()",5,0,n/a,6,0,0,3,1
"org.apache.cassandra.hints.HintsWriteExecutor.closeAllWriters()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.closeWriter(HintsStore)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flush(HintsBuffer)",5,2,n/a,4,0,1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flush(Iterator<ByteBuffer>,HintsStore)",3,2,n/a,12,1,2,5,3
"org.apache.cassandra.hints.HintsWriteExecutor.flushBuffer(HintsBuffer,HintsBufferPool)",2,0,n/a,7,0,2,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flushBufferPool(HintsBufferPool)",2,0,n/a,7,0,1,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flushBufferPool(HintsBufferPool,Iterable<HintsStore>)",2,0,n/a,7,0,2,1,1
"org.apache.cassandra.hints.HintsWriteExecutor.flushInternal(Iterator<ByteBuffer>,HintsStore)",10,1,n/a,19,2,2,8,4
"org.apache.cassandra.hints.HintsWriteExecutor.fsyncWritersBlockingly(Iterable<HintsStore>)",4,0,n/a,11,1,1,3,2
"org.apache.cassandra.hints.HintsWriteExecutor.shutdownBlocking()",3,0,n/a,15,1,0,4,2
"org.apache.cassandra.hints.HintsWriter.HintsWriter(File,HintsDescriptor,File,FileChannel,int,CRC32)",0,1,n/a,9,0,6,6,1
"org.apache.cassandra.hints.HintsWriter.Session.Session(ByteBuffer,long)",1,1,n/a,7,0,2,4,1
"org.apache.cassandra.hints.HintsWriter.Session.append(ByteBuffer)",9,1,n/a,24,1,1,9,2
"org.apache.cassandra.hints.HintsWriter.Session.append(Hint)",20,1,n/a,33,1,1,16,4
"org.apache.cassandra.hints.HintsWriter.Session.close()",3,0,n/a,10,0,0,3,1
"org.apache.cassandra.hints.HintsWriter.Session.flushBuffer()",5,2,n/a,10,1,0,5,2
"org.apache.cassandra.hints.HintsWriter.Session.maybeFsync()",3,1,n/a,5,0,0,2,2
"org.apache.cassandra.hints.HintsWriter.Session.maybeSkipCache()",4,1,n/a,8,0,0,3,2
"org.apache.cassandra.hints.HintsWriter.Session.position()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsWriter.close()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.hints.HintsWriter.create(File,HintsDescriptor)",13,0,n/a,22,1,2,12,2
"org.apache.cassandra.hints.HintsWriter.descriptor()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsWriter.doFsync()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.hints.HintsWriter.fsync()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.hints.HintsWriter.newSession(ByteBuffer)",3,0,n/a,11,1,1,3,2
"org.apache.cassandra.hints.HintsWriter.writeChecksum()",9,1,n/a,12,1,0,4,2
"org.apache.cassandra.hints.LegacyHintsMigrator.LegacyHintsMigrator(File,long)",3,1,n/a,7,0,2,4,1
"org.apache.cassandra.hints.LegacyHintsMigrator.calculatePageSize(ColumnFamilyStore)",4,1,n/a,13,1,1,7,3
"org.apache.cassandra.hints.LegacyHintsMigrator.compactLegacyHints()",7,1,n/a,7,0,0,4,2
"org.apache.cassandra.hints.LegacyHintsMigrator.convertLegacyHint(Row)",8,1,n/a,11,0,1,8,2
"org.apache.cassandra.hints.LegacyHintsMigrator.deleteLegacyHintsPartition(UUID)",6,1,n/a,9,0,1,2,1
"org.apache.cassandra.hints.LegacyHintsMigrator.deserializeLegacyMutation(Row)",10,1,n/a,28,1,1,8,3
"org.apache.cassandra.hints.LegacyHintsMigrator.forceCompaction(Collection<Descriptor>)",4,1,n/a,11,1,1,3,2
"org.apache.cassandra.hints.LegacyHintsMigrator.migrate()",8,1,n/a,16,0,0,9,2
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHints()",7,1,n/a,8,0,0,4,1
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHints(UUID,ByteBuffer)",4,1,n/a,14,0,2,4,1
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHints(UUID,Iterator<Row>,ByteBuffer)",2,0,n/a,10,1,3,2,2
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHints(UUID,UntypedResultSet,ByteBuffer)",2,1,n/a,4,0,3,1,1
"org.apache.cassandra.hints.LegacyHintsMigrator.migrateLegacyHintsInternal(UUID,Iterator<Row>,ByteBuffer)",11,1,n/a,22,3,3,10,5
"org.apache.cassandra.index.Index.Indexer.begin()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.Indexer.finish()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.Indexer.insertRow(Row)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.Indexer.partitionDelete(DeletionTime)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.Indexer.rangeTombstone(RangeTombstone)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.Indexer.removeRow(Row)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.Indexer.updateRow(Row,Row)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.index.Index.Searcher.search(ReadOrderGroup)",n/a,4,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.customExpressionValueType()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.dependsOn(ColumnDefinition)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.getBackingTable()",n/a,4,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.getBlockingFlushTask()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.getEstimatedResultRows()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.getIndexMetadata()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.getInitializationTask()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.getInvalidateTask()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.getMetadataReloadTask(IndexMetadata)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.getPostIndexQueryFilter(RowFilter)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.getTruncateTask(long)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.indexerFor(DecoratedKey,int,Group,Type)",n/a,0,2,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.index.Index.indexes(PartitionColumns)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.postProcessorFor(ReadCommand)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.register(IndexRegistry)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.searcherFor(ReadCommand)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.Index.shouldBuildBlocking()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.Index.supportsExpression(ColumnDefinition,Operator)",n/a,14,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.index.Index.validate(PartitionUpdate)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.IndexRegistry.getIndex(IndexMetadata)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.IndexRegistry.listIndexes()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.IndexRegistry.registerIndex(Index)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.IndexRegistry.unregisterIndex(Index)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.SecondaryIndexBuilder.SecondaryIndexBuilder(ColumnFamilyStore,Set<Index>,ReducingKeyIterator)",1,2,n/a,7,0,3,4,1
"org.apache.cassandra.index.SecondaryIndexBuilder.build()",7,1,n/a,17,2,0,7,3
"org.apache.cassandra.index.SecondaryIndexBuilder.getCompactionInfo()",3,6,n/a,8,0,0,1,1
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.CleanupGCTransaction(DecoratedKey,int,Index...)",0,1,n/a,10,0,3,5,2
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.commit()",5,0,n/a,16,2,0,9,5
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.onPartitionDeletion(DeletionTime)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.onRowDelete(Row)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction.start()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction.IndexGCTransaction(DecoratedKey,int,int,Index...)",0,1,n/a,12,0,4,6,2
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction.commit()",5,0,n/a,17,2,0,10,5
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction.onRowMerge(Row,Row...)",6,0,n/a,12,4,2,13,6
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction.start()",0,0,n/a,5,0,0,2,2
"org.apache.cassandra.index.SecondaryIndexManager.SecondaryIndexManager(ColumnFamilyStore)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.WriteTimeTransaction(Indexer...)",0,1,n/a,6,0,1,3,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.commit()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.onInserted(Row)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.onPartitionDeletion(DeletionTime)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.onRangeTombstone(RangeTombstone)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.onUpdated(Row,Row)",19,0,n/a,7,2,2,16,7
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.shouldCleanupOldValue(Cell,Cell)",5,1,n/a,13,0,2,1,2
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction.start()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.index.SecondaryIndexManager.addIndex(IndexMetadata)",3,2,n/a,11,0,1,3,2
"org.apache.cassandra.index.SecondaryIndexManager.buildAllIndexesBlocking(Collection<SSTableReader>)",6,2,n/a,7,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.buildIndexBlocking(Index)",7,0,n/a,13,2,1,4,2
"org.apache.cassandra.index.SecondaryIndexManager.buildIndexesBlocking(Collection<SSTableReader>,Set<Index>)",22,3,n/a,16,0,2,8,2
"org.apache.cassandra.index.SecondaryIndexManager.createIndex(IndexMetadata)",6,1,n/a,12,0,1,4,3
"org.apache.cassandra.index.SecondaryIndexManager.createInstance(IndexMetadata)",8,1,n/a,25,2,1,12,3
"org.apache.cassandra.index.SecondaryIndexManager.deletePartition(UnfilteredRowIterator,int)",16,0,n/a,30,1,2,12,3
"org.apache.cassandra.index.SecondaryIndexManager.executeAllBlocking(Stream<Index>,Function<Index, Callable<?>>)",6,3,n/a,10,1,2,6,2
"org.apache.cassandra.index.SecondaryIndexManager.executeBlocking(Callable<?>)",2,1,n/a,5,0,1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.flushAllIndexesBlocking()",3,0,n/a,7,0,0,1,1
"org.apache.cassandra.index.SecondaryIndexManager.flushAllNonCFSBackedIndexesBlocking()",8,1,n/a,10,0,0,2,1
"org.apache.cassandra.index.SecondaryIndexManager.flushIndexesBlocking(Set<Index>)",14,3,n/a,21,1,1,8,2
"org.apache.cassandra.index.SecondaryIndexManager.getAllIndexColumnFamilyStores()",5,5,n/a,9,0,0,3,1
"org.apache.cassandra.index.SecondaryIndexManager.getBestIndexFor(ReadCommand)",40,0,n/a,70,2,1,18,8
"org.apache.cassandra.index.SecondaryIndexManager.getBuiltIndexNames()",8,2,n/a,11,0,0,3,1
"org.apache.cassandra.index.SecondaryIndexManager.getDependentIndexes(ColumnDefinition)",7,1,n/a,10,0,1,7,4
"org.apache.cassandra.index.SecondaryIndexManager.getIndex(IndexMetadata)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getIndexByName(String)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getIndexName(ColumnFamilyStore)",1,1,n/a,10,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.getIndexName(String)",2,1,n/a,11,0,1,2,1
"org.apache.cassandra.index.SecondaryIndexManager.getParentCfs(ColumnFamilyStore)",2,1,n/a,11,0,1,2,1
"org.apache.cassandra.index.SecondaryIndexManager.getParentCfsName(String)",2,2,n/a,11,0,1,2,1
"org.apache.cassandra.index.SecondaryIndexManager.hasIndexes()",1,3,n/a,7,0,0,1,1
"org.apache.cassandra.index.SecondaryIndexManager.indexPartition(UnfilteredRowIterator,Group,Set<Index>,int)",19,0,n/a,28,3,4,11,4
"org.apache.cassandra.index.SecondaryIndexManager.invalidateAllIndexesBlocking()",4,1,n/a,8,0,0,2,1
"org.apache.cassandra.index.SecondaryIndexManager.isIndexColumnFamily(String)",1,5,n/a,11,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.isIndexColumnFamilyStore(ColumnFamilyStore)",1,1,n/a,11,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.listIndexes()",2,4,n/a,4,0,0,1,1
"org.apache.cassandra.index.SecondaryIndexManager.markAllIndexesRemoved()",2,3,n/a,7,0,0,1,1
"org.apache.cassandra.index.SecondaryIndexManager.markIndexBuilt(String)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.markIndexRemoved(String)",2,3,n/a,4,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.newCleanupTransaction(DecoratedKey,PartitionColumns,int)",7,2,n/a,17,0,3,4,3
"org.apache.cassandra.index.SecondaryIndexManager.newCompactionTransaction(DecoratedKey,PartitionColumns,int,int)",6,0,n/a,16,0,4,2,2
"org.apache.cassandra.index.SecondaryIndexManager.newUpdateTransaction(PartitionUpdate,Group,int)",11,0,n/a,19,0,3,4,3
"org.apache.cassandra.index.SecondaryIndexManager.rebuildIndexesBlocking(Collection<SSTableReader>,Set<String>)",19,1,n/a,25,1,2,7,2
"org.apache.cassandra.index.SecondaryIndexManager.registerIndex(Index)",4,0,n/a,8,0,1,2,1
"org.apache.cassandra.index.SecondaryIndexManager.reload()",7,1,n/a,16,0,0,4,2
"org.apache.cassandra.index.SecondaryIndexManager.reloadIndex(IndexMetadata)",5,1,n/a,8,0,1,3,2
"org.apache.cassandra.index.SecondaryIndexManager.removeIndex(String)",4,1,n/a,9,1,1,4,2
"org.apache.cassandra.index.SecondaryIndexManager.truncateAllIndexesBlocking(long)",4,1,n/a,7,0,1,1,1
"org.apache.cassandra.index.SecondaryIndexManager.unregisterIndex(Index)",4,0,n/a,6,0,1,2,2
"org.apache.cassandra.index.SecondaryIndexManager.validate(PartitionUpdate)",7,0,n/a,16,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.CassandraIndex(ColumnFamilyStore,IndexMetadata)",1,6,n/a,5,0,2,2,1
"org.apache.cassandra.index.internal.CassandraIndex.buildBlocking()",16,1,n/a,28,2,0,13,2
"org.apache.cassandra.index.internal.CassandraIndex.buildIndexClustering(ByteBuffer,Clustering,Cell)",3,3,n/a,8,0,3,1,2
"org.apache.cassandra.index.internal.CassandraIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",n/a,1,1,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.index.internal.CassandraIndex.customExpressionValueType()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.decodeEntry(DecoratedKey,Row)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.index.internal.CassandraIndex.delete(ByteBuffer,Clustering,Cell,Group,int)",6,1,n/a,17,0,5,2,1
"org.apache.cassandra.index.internal.CassandraIndex.delete(ByteBuffer,Clustering,DeletionTime,Group)",4,1,n/a,16,0,4,2,1
"org.apache.cassandra.index.internal.CassandraIndex.deleteStaleEntry(DecoratedKey,Clustering,DeletionTime,Group)",2,0,n/a,16,0,4,2,1
"org.apache.cassandra.index.internal.CassandraIndex.dependsOn(ColumnDefinition)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.doDelete(DecoratedKey,Clustering,DeletionTime,Group)",5,3,n/a,10,0,4,4,1
"org.apache.cassandra.index.internal.CassandraIndex.getBackingTable()",2,4,n/a,4,0,0,1,2
"org.apache.cassandra.index.internal.CassandraIndex.getBlockingFlushTask()",1,0,n/a,7,1,0,3,1
"org.apache.cassandra.index.internal.CassandraIndex.getBuildIndexTask()",1,1,n/a,7,1,0,3,1
"org.apache.cassandra.index.internal.CassandraIndex.getEstimatedResultRows()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getFunctions(IndexMetadata,Pair<ColumnDefinition, Type>)",5,4,n/a,40,3,2,26,13
"org.apache.cassandra.index.internal.CassandraIndex.getIndexCfs()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexComparator()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexKeyFor(ByteBuffer)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexMetadata()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexedColumn()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getIndexedValue(ByteBuffer,Clustering,Cell)",3,6,n/a,10,0,3,1,3
"org.apache.cassandra.index.internal.CassandraIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",n/a,2,1,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.index.internal.CassandraIndex.getInitializationTask()",2,0,n/a,6,0,0,1,2
"org.apache.cassandra.index.internal.CassandraIndex.getInvalidateTask()",1,0,n/a,7,1,0,3,1
"org.apache.cassandra.index.internal.CassandraIndex.getMetadataReloadTask(IndexMetadata)",2,0,n/a,8,1,1,4,1
"org.apache.cassandra.index.internal.CassandraIndex.getPostIndexQueryFilter(RowFilter)",4,1,n/a,5,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getSSTableNames(Collection<SSTableReader>)",5,1,n/a,6,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getTargetExpression(List<Expression>)",3,2,n/a,4,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.getTruncateTask(long)",1,0,n/a,7,1,1,3,1
"org.apache.cassandra.index.internal.CassandraIndex.indexCfsMetadata(CFMetaData,IndexMetadata)",14,5,n/a,22,0,2,8,1
"org.apache.cassandra.index.internal.CassandraIndex.indexerFor(DecoratedKey,int,Group,Type)",71,0,n/a,18,5,4,45,20
"org.apache.cassandra.index.internal.CassandraIndex.indexes(PartitionColumns)",2,0,n/a,5,0,1,1,2
"org.apache.cassandra.index.internal.CassandraIndex.insert(ByteBuffer,Clustering,Cell,LivenessInfo,Group)",7,2,n/a,17,0,5,5,1
"org.apache.cassandra.index.internal.CassandraIndex.invalidate()",7,1,n/a,11,0,0,7,1
"org.apache.cassandra.index.internal.CassandraIndex.isBuilt()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.isPrimaryKeyIndex()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.isStale(Row,ByteBuffer,int)",n/a,0,1,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.index.internal.CassandraIndex.newIndex(ColumnFamilyStore,IndexMetadata)",3,1,n/a,10,0,2,1,1
"org.apache.cassandra.index.internal.CassandraIndex.parseTarget(CFMetaData,IndexMetadata)",21,6,n/a,42,1,2,19,6
"org.apache.cassandra.index.internal.CassandraIndex.partitionUpdate(DecoratedKey,Row)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.CassandraIndex.postProcessorFor(ReadCommand)",0,1,n/a,7,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.register(IndexRegistry)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.searcherFor(ReadCommand)",14,1,n/a,21,2,1,11,5
"org.apache.cassandra.index.internal.CassandraIndex.setMetadata(IndexMetadata)",5,1,n/a,12,0,1,6,1
"org.apache.cassandra.index.internal.CassandraIndex.shouldBuildBlocking()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.index.internal.CassandraIndex.supportsExpression(ColumnDefinition,Operator)",2,15,n/a,5,0,2,1,2
"org.apache.cassandra.index.internal.CassandraIndex.supportsExpression(Expression)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndex.supportsOperator(ColumnDefinition,Operator)",0,1,n/a,10,0,2,1,1
"org.apache.cassandra.index.internal.CassandraIndex.validate(PartitionUpdate)",7,0,n/a,18,1,1,13,5
"org.apache.cassandra.index.internal.CassandraIndex.validateClusterings(PartitionUpdate)",4,1,n/a,6,0,1,3,2
"org.apache.cassandra.index.internal.CassandraIndex.validateIndexedValue(ByteBuffer)",5,4,n/a,12,0,1,2,3
"org.apache.cassandra.index.internal.CassandraIndex.validatePartitionKey(DecoratedKey)",4,1,n/a,5,0,1,2,1
"org.apache.cassandra.index.internal.CassandraIndex.validateRows(Iterable<Row>)",10,2,n/a,22,4,1,8,5
"org.apache.cassandra.index.internal.CassandraIndexFunctions.addIndexClusteringColumns(Builder,CFMetaData,ColumnDefinition)",2,0,n/a,25,0,3,3,2
"org.apache.cassandra.index.internal.CassandraIndexFunctions.getIndexedValueType(ColumnDefinition)",0,0,n/a,10,0,1,1,1
"org.apache.cassandra.index.internal.CassandraIndexFunctions.newIndexInstance(ColumnFamilyStore,IndexMetadata)",n/a,0,7,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.index.internal.CassandraIndexSearcher.CassandraIndexSearcher(ReadCommand,Expression,CassandraIndex)",0,2,n/a,8,0,3,3,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.makeIndexBound(ByteBuffer,Bound)",4,5,n/a,5,0,2,1,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.makeIndexClustering(ByteBuffer,Clustering)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.makeIndexFilter(ReadCommand)",49,1,n/a,80,4,1,37,11
"org.apache.cassandra.index.internal.CassandraIndexSearcher.queryDataFromIndex(DecoratedKey,RowIterator,ReadCommand,ReadOrderGroup)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.index.internal.CassandraIndexSearcher.queryIndex(DecoratedKey,ReadCommand,ReadOrderGroup)",8,1,n/a,8,0,3,4,1
"org.apache.cassandra.index.internal.CassandraIndexSearcher.search(ReadOrderGroup)",9,4,n/a,17,1,1,6,2
"org.apache.cassandra.index.internal.IndexEntry.IndexEntry(DecoratedKey,Clustering,long,ByteBuffer,Clustering)",0,5,n/a,12,0,5,5,1
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.ClusteringColumnIndex(ColumnFamilyStore,IndexMetadata)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",12,0,n/a,12,0,3,11,3
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.decodeEntry(DecoratedKey,Row)",18,0,n/a,17,0,2,13,3
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",2,0,n/a,6,0,4,1,1
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex.isStale(Row,ByteBuffer,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.index.internal.composites.CollectionEntryIndex.CollectionEntryIndex(ColumnFamilyStore,IndexMetadata)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.index.internal.composites.CollectionEntryIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",2,0,n/a,6,0,4,1,1
"org.apache.cassandra.index.internal.composites.CollectionEntryIndex.isStale(Row,ByteBuffer,int)",8,0,n/a,12,0,3,9,3
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex.CollectionKeyIndex(ColumnFamilyStore,IndexMetadata)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",1,0,n/a,7,0,4,1,1
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex.isStale(Row,ByteBuffer,int)",3,0,n/a,5,0,3,2,2
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex.supportsOperator(ColumnDefinition,Operator)",0,0,n/a,5,0,2,1,3
"org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase.CollectionKeyIndexBase(ColumnFamilyStore,IndexMetadata)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",6,0,n/a,10,0,3,7,2
"org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase.decodeEntry(DecoratedKey,Row)",12,0,n/a,14,0,2,8,2
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.CollectionValueIndex(ColumnFamilyStore,IndexMetadata)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",11,1,n/a,13,0,3,9,4
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.decodeEntry(DecoratedKey,Row)",12,0,n/a,12,0,2,7,2
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",0,2,n/a,6,0,4,1,1
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.isStale(Row,ByteBuffer,int)",5,0,n/a,14,1,3,8,5
"org.apache.cassandra.index.internal.composites.CollectionValueIndex.supportsOperator(ColumnDefinition,Operator)",0,1,n/a,4,0,2,1,2
"org.apache.cassandra.index.internal.composites.CompositesSearcher.CompositesSearcher(ReadCommand,Expression,CassandraIndex)",1,1,n/a,6,0,3,1,1
"org.apache.cassandra.index.internal.composites.CompositesSearcher.deleteAllEntries(List<IndexEntry>,Group,int)",3,1,n/a,8,0,3,1,1
"org.apache.cassandra.index.internal.composites.CompositesSearcher.filterStaleEntries(UnfilteredRowIterator,ByteBuffer,List<IndexEntry>,Group,int)",21,1,n/a,5,3,5,24,6
"org.apache.cassandra.index.internal.composites.CompositesSearcher.isMatchingEntry(DecoratedKey,IndexEntry,ReadCommand)",2,1,n/a,4,0,3,1,2
"org.apache.cassandra.index.internal.composites.CompositesSearcher.queryDataFromIndex(DecoratedKey,RowIterator,ReadCommand,ReadOrderGroup)",41,0,n/a,6,4,4,38,12
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.PartitionKeyIndex(ColumnFamilyStore,IndexMetadata)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",6,0,n/a,10,0,3,7,2
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.decodeEntry(DecoratedKey,Row)",12,0,n/a,13,0,2,8,2
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",3,0,n/a,9,0,4,3,1
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex.isStale(Row,ByteBuffer,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.RegularColumnIndex(ColumnFamilyStore,IndexMetadata)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",6,0,n/a,10,0,3,7,2
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.decodeEntry(DecoratedKey,Row)",11,0,n/a,13,0,2,8,2
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",0,0,n/a,7,0,4,1,1
"org.apache.cassandra.index.internal.composites.RegularColumnIndex.isStale(Row,ByteBuffer,int)",4,0,n/a,7,0,3,2,3
"org.apache.cassandra.index.internal.keys.KeysIndex.KeysIndex(ColumnFamilyStore,IndexMetadata)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.addIndexClusteringColumns(Builder,CFMetaData,ColumnDefinition)",0,0,n/a,7,0,3,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.buildIndexClusteringPrefix(ByteBuffer,ClusteringPrefix,CellPath)",3,0,n/a,8,0,3,3,1
"org.apache.cassandra.index.internal.keys.KeysIndex.decodeEntry(DecoratedKey,Row)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.getIndexedValue(ByteBuffer,Clustering,CellPath,ByteBuffer)",0,0,n/a,6,0,4,1,1
"org.apache.cassandra.index.internal.keys.KeysIndex.isStale(Row,ByteBuffer,int)",4,0,n/a,9,0,3,4,4
"org.apache.cassandra.index.internal.keys.KeysSearcher.KeysSearcher(ReadCommand,Expression,CassandraIndex)",1,1,n/a,6,0,3,1,1
"org.apache.cassandra.index.internal.keys.KeysSearcher.filterIfStale(UnfilteredRowIterator,Row,ByteBuffer,Group,boolean,int)",34,1,n/a,52,2,6,16,6
"org.apache.cassandra.index.internal.keys.KeysSearcher.queryDataFromIndex(DecoratedKey,RowIterator,ReadCommand,ReadOrderGroup)",29,0,n/a,6,4,4,24,7
"org.apache.cassandra.index.transactions.CleanupTransaction.onPartitionDeletion(DeletionTime)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.transactions.CleanupTransaction.onRowDelete(Row)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.transactions.CompactionTransaction.onRowMerge(Row,Row...)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.index.transactions.IndexTransaction.commit()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.transactions.IndexTransaction.start()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.index.transactions.UpdateTransaction.onInserted(Row)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.transactions.UpdateTransaction.onPartitionDeletion(DeletionTime)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.transactions.UpdateTransaction.onRangeTombstone(RangeTombstone)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.index.transactions.UpdateTransaction.onUpdated(Row,Row)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.FSError.FSError(Throwable,File)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.io.FSError.findNested(Throwable)",1,2,n/a,14,1,1,6,3
"org.apache.cassandra.io.FSReadError.FSReadError(Throwable,File)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.io.FSReadError.FSReadError(Throwable,String)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.FSReadError.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.FSWriteError.FSWriteError(Throwable,File)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.io.FSWriteError.FSWriteError(Throwable,String)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.io.FSWriteError.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.ISSTableSerializer.deserializeFromSSTable(DataInput,Version)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.ISSTableSerializer.serializeForSSTable(T,DataOutputPlus)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.ISerializer.deserialize(DataInputPlus)",n/a,8,10,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.ISerializer.serialize(T,DataOutputPlus)",n/a,8,10,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.ISerializer.serializedSize(T)",n/a,8,10,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.IVersionedSerializer.deserialize(DataInputPlus,int)",n/a,21,47,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.IVersionedSerializer.serialize(T,DataOutputPlus,int)",n/a,22,47,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.io.IVersionedSerializer.serializedSize(T,int)",n/a,19,47,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.compress.BufferType.allocate(int)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.compress.BufferType.typeOf(ByteBuffer)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.Builder(ChannelProxy,CompressionMetadata)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.Builder(ICompressedFile)",5,2,n/a,6,0,1,3,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.applyMetadata(CompressionMetadata)",4,2,n/a,8,0,1,5,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.build()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder.createBuffer()",2,0,n/a,7,0,0,3,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.CompressedRandomAccessReader(Builder)",7,1,n/a,11,1,1,6,2
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.checksum(Chunk)",6,1,n/a,8,0,1,5,2
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.getCrcCheckChance()",1,6,n/a,5,0,0,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.length()",0,4,n/a,5,0,0,1,1
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.reBufferMmap()",35,0,n/a,49,2,0,26,6
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.reBufferStandard()",37,0,n/a,60,2,0,29,9
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.releaseBuffer()",2,0,n/a,21,2,0,7,3
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.CompressedFileWriterMark.CompressedFileWriterMark(long,long,int,int)",0,1,n/a,7,0,4,4,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.CompressedSequentialWriter(File,String,CompressionParams,MetadataCollector)",13,3,n/a,14,0,4,6,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy.doAbort(Throwable)",2,2,n/a,5,0,1,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy.doCommit(Throwable)",2,2,n/a,5,0,1,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy.doPreCleanup(Throwable)",3,3,n/a,12,2,1,7,3
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy.doPrepare()",6,1,n/a,9,0,0,5,2
"org.apache.cassandra.io.compress.CompressedSequentialWriter.flush()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.flushData()",15,1,n/a,40,1,0,21,4
"org.apache.cassandra.io.compress.CompressedSequentialWriter.getOnDiskFilePointer()",3,1,n/a,12,1,0,3,2
"org.apache.cassandra.io.compress.CompressedSequentialWriter.mark()",5,1,n/a,7,0,0,3,2
"org.apache.cassandra.io.compress.CompressedSequentialWriter.open(long)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.io.compress.CompressedSequentialWriter.resetAndTruncate(FileMark)",37,0,n/a,66,2,1,37,8
"org.apache.cassandra.io.compress.CompressedSequentialWriter.seekToChunkStart()",4,1,n/a,17,2,0,4,3
"org.apache.cassandra.io.compress.CompressedSequentialWriter.txnProxy()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk.Chunk(long,int)",0,3,n/a,6,0,2,3,1
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk.equals(Object)",2,0,n/a,7,0,1,6,5
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk.hashCode()",0,0,n/a,6,0,0,3,1
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.ChunkSerializer.deserialize(DataInputPlus,int)",3,21,n/a,4,0,2,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.ChunkSerializer.serialize(Chunk,DataOutputPlus,int)",2,22,n/a,5,0,3,2,1
"org.apache.cassandra.io.compress.CompressionMetadata.ChunkSerializer.serializedSize(Chunk,int)",2,19,n/a,6,0,2,3,1
"org.apache.cassandra.io.compress.CompressionMetadata.CompressionMetadata(String,CompressionParams,SafeMemory,long,long,long,ChecksumType)",0,1,n/a,10,0,7,7,1
"org.apache.cassandra.io.compress.CompressionMetadata.CompressionMetadata(String,long,ChecksumType)",16,2,n/a,39,2,3,22,5
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.Writer(CompressionParams,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.addOffset(long)",3,0,n/a,10,1,1,5,2
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.chunkOffsetBy(int)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.doAbort(Throwable)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.doCommit(Throwable)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.doPostCleanup(Throwable)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.doPrepare()",10,1,n/a,23,1,0,12,4
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.finalizeLength(long,int)",0,0,n/a,7,0,2,3,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.open(CompressionParams,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.open(long,long)",5,0,n/a,14,0,2,8,3
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.resetAndTruncate(int)",0,0,n/a,10,0,1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.Writer.writeHeader(DataOutput,long,int)",18,1,n/a,22,2,3,10,3
"org.apache.cassandra.io.compress.CompressionMetadata.addTo(IdentityCollection)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.chunkFor(long)",6,5,n/a,18,0,1,6,3
"org.apache.cassandra.io.compress.CompressionMetadata.chunkLength()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.close()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.compressor()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.create(String)",6,3,n/a,16,0,1,2,1
"org.apache.cassandra.io.compress.CompressionMetadata.getChunksForSections(Collection<Pair<Long, Long>>)",12,2,n/a,4,2,1,14,5
"org.apache.cassandra.io.compress.CompressionMetadata.offHeapSize()",1,1,n/a,8,0,0,1,1
"org.apache.cassandra.io.compress.CompressionMetadata.readChunkOffsets(DataInput)",11,1,n/a,44,2,1,20,7
"org.apache.cassandra.io.compress.CorruptBlockException.CorruptBlockException(String,Chunk)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.compress.CorruptBlockException.CorruptBlockException(String,Chunk,Throwable)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.io.compress.CorruptBlockException.CorruptBlockException(String,long,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.io.compress.CorruptBlockException.CorruptBlockException(String,long,int,Throwable)",2,2,n/a,4,0,4,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.DeflateCompressor()",4,1,n/a,5,2,0,4,1
"org.apache.cassandra.io.compress.DeflateCompressor.compress(ByteBuffer,ByteBuffer)",16,0,n/a,12,1,2,5,3
"org.apache.cassandra.io.compress.DeflateCompressor.compressArray(byte[],int,int,byte[],int,int)",7,1,n/a,12,0,6,9,2
"org.apache.cassandra.io.compress.DeflateCompressor.compressBuffer(ByteBuffer,ByteBuffer)",16,1,n/a,27,2,2,17,4
"org.apache.cassandra.io.compress.DeflateCompressor.create(Map<String, String>)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.initialCompressedBufferLength(int)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.preferredBufferType()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.supportedOptions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.supports(BufferType)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.uncompress(ByteBuffer,ByteBuffer)",16,0,n/a,12,1,2,5,3
"org.apache.cassandra.io.compress.DeflateCompressor.uncompress(byte[],int,int,byte[],int)",1,0,n/a,4,0,5,1,1
"org.apache.cassandra.io.compress.DeflateCompressor.uncompress(byte[],int,int,byte[],int,int)",6,2,n/a,17,1,6,8,3
"org.apache.cassandra.io.compress.DeflateCompressor.uncompressBuffer(ByteBuffer,ByteBuffer)",16,1,n/a,33,3,2,18,5
"org.apache.cassandra.io.compress.ICompressor.compress(ByteBuffer,ByteBuffer)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.compress.ICompressor.initialCompressedBufferLength(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.compress.ICompressor.preferredBufferType()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.compress.ICompressor.supportedOptions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.compress.ICompressor.supports(BufferType)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.compress.ICompressor.uncompress(ByteBuffer,ByteBuffer)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.compress.ICompressor.uncompress(byte[],int,int,byte[],int)",n/a,1,0,n/a,n/a,5,n/a,n/a
"org.apache.cassandra.io.compress.LZ4Compressor.LZ4Compressor()",3,1,n/a,6,0,0,3,1
"org.apache.cassandra.io.compress.LZ4Compressor.compress(ByteBuffer,ByteBuffer)",7,0,n/a,16,1,2,8,2
"org.apache.cassandra.io.compress.LZ4Compressor.create(Map<String, String>)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.initialCompressedBufferLength(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.preferredBufferType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.supportedOptions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.supports(BufferType)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.LZ4Compressor.uncompress(ByteBuffer,ByteBuffer)",15,0,n/a,21,1,2,8,3
"org.apache.cassandra.io.compress.LZ4Compressor.uncompress(byte[],int,int,byte[],int)",3,0,n/a,23,1,5,8,3
"org.apache.cassandra.io.compress.SnappyCompressor.compress(ByteBuffer,ByteBuffer)",7,0,n/a,9,0,2,5,1
"org.apache.cassandra.io.compress.SnappyCompressor.create(Map<String, String>)",1,1,n/a,8,0,1,2,1
"org.apache.cassandra.io.compress.SnappyCompressor.initialCompressedBufferLength(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.isAvailable()",3,1,n/a,17,1,0,6,3
"org.apache.cassandra.io.compress.SnappyCompressor.preferredBufferType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.supportedOptions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.supports(BufferType)",0,0,n/a,6,0,1,1,1
"org.apache.cassandra.io.compress.SnappyCompressor.uncompress(ByteBuffer,ByteBuffer)",7,0,n/a,10,0,2,5,1
"org.apache.cassandra.io.compress.SnappyCompressor.uncompress(byte[],int,int,byte[],int)",1,0,n/a,4,0,5,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.AbstractSSTableSimpleWriter(File,CFMetaData,PartitionColumns)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.createDescriptor(File,String,String,Type)",2,1,n/a,5,0,4,2,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.createWriter()",3,0,n/a,9,0,0,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.getNextGeneration(File,String)",8,1,n/a,10,2,2,14,6
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.getUpdateFor(ByteBuffer)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.getUpdateFor(DecoratedKey)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter.setSSTableFormatType(Type)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.addFalsePositive()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.addTruePositive()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getFalsePositiveCount()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getRecentFalsePositiveCount()",1,4,n/a,12,1,0,4,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getRecentTruePositiveCount()",1,4,n/a,12,1,0,4,1
"org.apache.cassandra.io.sstable.BloomFilterTracker.getTruePositiveCount()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.Builder()",0,1,n/a,1,0,0,0,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.addTableToKeyspace(KeyspaceMetadata,CFMetaData)",4,1,n/a,11,0,2,2,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.build()",9,2,n/a,16,0,0,10,6
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.createKeyspaceWithTable(CFMetaData)",4,1,n/a,9,0,1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.forTable(String)",7,2,n/a,40,3,1,10,4
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.getStatement(String,Class<T>,String)",10,1,n/a,17,1,3,9,3
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.getTableMetadata(String)",6,1,n/a,9,0,1,4,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.inDirectory(File)",4,2,n/a,19,0,1,6,3
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.inDirectory(String)",2,2,n/a,14,0,1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.sorted()",0,0,n/a,22,0,0,2,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.using(String)",6,2,n/a,30,0,1,10,4
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.withBufferSizeInMB(int)",0,1,n/a,18,0,1,2,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder.withPartitioner(IPartitioner)",1,2,n/a,15,0,1,2,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.CQLSSTableWriter(AbstractSSTableSimpleWriter,UpdateStatement,List<ColumnSpecification>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(List<Object>)",10,0,n/a,24,0,1,7,3
"org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(Map<String, Object>)",8,0,n/a,32,1,1,9,3
"org.apache.cassandra.io.sstable.CQLSSTableWriter.addRow(Object...)",2,1,n/a,14,0,1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.builder()",1,2,n/a,9,0,0,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.close()",1,0,n/a,10,0,0,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(ByteBuffer...)",2,1,n/a,12,0,1,1,1
"org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(List<ByteBuffer>)",18,4,n/a,42,2,1,13,5
"org.apache.cassandra.io.sstable.CQLSSTableWriter.rawAddRow(Map<String, ByteBuffer>)",9,4,n/a,26,1,1,8,2
"org.apache.cassandra.io.sstable.Component.Component(Type)",1,8,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.Component.Component(Type,String)",1,5,n/a,7,0,2,4,1
"org.apache.cassandra.io.sstable.Component.Type.Type(String)",1,8,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.Component.Type.Type(String...)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.Component.Type.fromRepresentation(String)",1,1,n/a,8,0,1,5,4
"org.apache.cassandra.io.sstable.Component.digestFor(ChecksumType)",1,3,n/a,11,1,1,6,3
"org.apache.cassandra.io.sstable.Component.equals(Object)",1,0,n/a,10,0,1,6,4
"org.apache.cassandra.io.sstable.Component.fromFilename(File,String)",6,0,n/a,38,2,2,48,16
"org.apache.cassandra.io.sstable.Component.hashCode()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.Component.name()",0,1,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.Component.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.CorruptSSTableException.CorruptSSTableException(Exception,File)",1,2,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.CorruptSSTableException.CorruptSSTableException(Exception,String)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(File,String,String,int)",4,11,n/a,8,0,4,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(File,String,String,int,Type)",4,0,n/a,7,0,5,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(String,File,String,String,int,Type)",4,1,n/a,5,0,6,1,1
"org.apache.cassandra.io.sstable.Descriptor.Descriptor(Version,File,String,String,int,Type,Component)",5,9,n/a,12,0,7,9,5
"org.apache.cassandra.io.sstable.Descriptor.appendFileName(StringBuilder)",10,2,n/a,12,1,1,7,3
"org.apache.cassandra.io.sstable.Descriptor.baseFilename()",5,3,n/a,7,0,0,4,1
"org.apache.cassandra.io.sstable.Descriptor.equals(Object)",3,1,n/a,14,0,1,6,7
"org.apache.cassandra.io.sstable.Descriptor.filenameFor(Component)",2,46,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(File,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(File,String,boolean)",41,3,n/a,80,2,3,34,10
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(String)",4,18,n/a,10,0,1,2,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(String,Type)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.Descriptor.fromFilename(String,boolean)",4,0,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.Descriptor.getFormat()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.Descriptor.getMetadataSerializer()",3,6,n/a,7,0,0,3,2
"org.apache.cassandra.io.sstable.Descriptor.getTemporaryFiles()",4,1,n/a,10,0,0,5,2
"org.apache.cassandra.io.sstable.Descriptor.hashCode()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.Descriptor.isCompatible()",1,3,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.Descriptor.isLegacyFile(File)",11,4,n/a,9,0,1,3,4
"org.apache.cassandra.io.sstable.Descriptor.isValidFile(String)",3,1,n/a,4,0,1,1,2
"org.apache.cassandra.io.sstable.Descriptor.relativeFilenameFor(Component)",6,0,n/a,7,0,1,4,1
"org.apache.cassandra.io.sstable.Descriptor.tmpFilenameFor(Component)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.Descriptor.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.Descriptor.withDigestComponent(Component)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.Descriptor.withFormatType(Type)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.Descriptor.withGeneration(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.Downsampling.getEffectiveIndexIntervalAfterIndex(int,int,int)",4,0,n/a,17,0,3,5,2
"org.apache.cassandra.io.sstable.Downsampling.getOriginalIndexes(int)",7,1,n/a,26,1,1,12,4
"org.apache.cassandra.io.sstable.Downsampling.getSamplingPattern(int)",7,3,n/a,32,0,1,23,7
"org.apache.cassandra.io.sstable.Downsampling.getStartPoints(int,int)",4,0,n/a,22,2,2,16,4
"org.apache.cassandra.io.sstable.ISSTableScanner.getBackingFiles()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.ISSTableScanner.getCurrentPosition()",n/a,3,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.ISSTableScanner.getLengthInBytes()",n/a,2,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.IndexHelper.IndexHelper()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.IndexInfo(ClusteringPrefix,ClusteringPrefix,long,long,DeletionTime)",0,10,n/a,12,0,5,5,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer.Serializer(CFMetaData,Version,SerializationHeader)",2,3,n/a,5,0,3,2,1
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer.deserialize(DataInputPlus)",10,3,n/a,21,1,1,13,3
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer.serialize(IndexInfo,DataOutputPlus)",7,5,n/a,11,0,2,8,2
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer.serializedSize(IndexInfo)",7,4,n/a,12,0,1,5,2
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.unsharedHeapSize()",3,1,n/a,7,0,0,1,2
"org.apache.cassandra.io.sstable.IndexHelper.indexFor(ClusteringPrefix,List<IndexInfo>,ClusteringComparator,boolean,int)",7,20,n/a,45,2,5,11,6
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummary(IPartitioner,Memory,int,Memory,long,int,int,int)",2,2,n/a,15,0,8,11,1
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummary(IndexSummary)",1,1,n/a,12,0,1,9,1
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummarySerializer.deserialize(DataInputStream,IPartitioner,boolean,int,int)",27,0,n/a,50,1,5,27,6
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummarySerializer.serialize(IndexSummary,DataOutputPlus,boolean)",11,0,n/a,27,1,3,15,4
"org.apache.cassandra.io.sstable.IndexSummary.addTo(IdentityCollection)",3,0,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.IndexSummary.binarySearch(PartitionPosition)",4,0,n/a,27,2,1,12,5
"org.apache.cassandra.io.sstable.IndexSummary.calculateEnd(int)",1,4,n/a,4,0,1,1,2
"org.apache.cassandra.io.sstable.IndexSummary.fillTemporaryKey(int,ByteBuffer)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.io.sstable.IndexSummary.getEffectiveIndexInterval()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEffectiveIndexIntervalAfterIndex(int)",1,0,n/a,13,0,1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEndInSummary(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEntries()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEntriesLength()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getEstimatedKeyCount()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getKey(int)",3,0,n/a,8,0,1,5,1
"org.apache.cassandra.io.sstable.IndexSummary.getMaxNumberOfEntries()",0,1,n/a,8,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getMinIndexInterval()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getOffHeapSize()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getOffsets()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getPosition(int)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getPositionInSummary(int)",1,3,n/a,10,0,1,1,1
"org.apache.cassandra.io.sstable.IndexSummary.getSamplingLevel()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.sharedCopy()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummary.size()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.IndexSummaryBuilder(long,int,int)",10,0,n/a,27,1,3,15,2
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.ReadableBoundary.ReadableBoundary(DecoratedKey,long,long,int,long)",0,1,n/a,8,0,5,5,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.build(IPartitioner)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.build(IPartitioner,ReadableBoundary)",9,1,n/a,18,1,2,9,2
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.calculateSamplingLevel(int,int,long,int,int)",4,0,n/a,15,0,5,3,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.close()",2,0,n/a,6,0,0,2,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.close(Throwable)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.downsample(IndexSummary,int,int,IPartitioner)",18,2,n/a,60,2,4,33,6
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.entriesAtSamplingLevel(int,int)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.getLastReadableBoundary()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.markDataSynced(long)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.markIndexSynced(long)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.maybeAddEntry(DecoratedKey,long)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.maybeAddEntry(DecoratedKey,long,long,long)",12,1,n/a,28,1,4,12,4
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.prepareToCommit()",4,0,n/a,7,0,0,2,1
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.refreshReadableBoundary()",10,2,n/a,14,0,0,7,4
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.setNextSamplePosition(long)",0,1,n/a,14,1,1,9,4
"org.apache.cassandra.io.sstable.IndexSummaryManager.IndexSummaryManager()",8,1,n/a,10,0,0,6,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.ReadRateComparator.ReadRateComparator(Map<SSTableReader, Double>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.ReadRateComparator.compare(SSTableReader,SSTableReader)",3,0,n/a,14,0,2,9,5
"org.apache.cassandra.io.sstable.IndexSummaryManager.ResampleEntry.ResampleEntry(SSTableReader,long,int)",0,4,n/a,6,0,3,3,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.adjustSamplingLevels(List<SSTableReader>,Map<UUID, LifecycleTransaction>,double,long)",67,1,n/a,108,2,4,67,13
"org.apache.cassandra.io.sstable.IndexSummaryManager.distributeRemainingSpace(List<ResampleEntry>,long)",15,1,n/a,5,2,2,14,4
"org.apache.cassandra.io.sstable.IndexSummaryManager.getAllSSTables()",5,3,n/a,10,1,0,5,3
"org.apache.cassandra.io.sstable.IndexSummaryManager.getAverageIndexInterval()",3,0,n/a,8,0,0,5,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.getCompactingAndNonCompactingSSTables()",16,1,n/a,28,3,0,13,4
"org.apache.cassandra.io.sstable.IndexSummaryManager.getIndexIntervals()",7,0,n/a,8,0,0,5,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.getMemoryPoolCapacityInMB()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.getMemoryPoolSizeInMB()",2,0,n/a,11,0,0,4,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.getResizeIntervalInMinutes()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.getTimeToNextResize(TimeUnit)",1,0,n/a,8,0,1,3,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.redistributeSummaries()",4,1,n/a,13,1,0,5,2
"org.apache.cassandra.io.sstable.IndexSummaryManager.redistributeSummaries(List<SSTableReader>,Map<UUID, LifecycleTransaction>,long)",35,19,n/a,64,3,3,36,10
"org.apache.cassandra.io.sstable.IndexSummaryManager.setMemoryPoolCapacityInMB(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager.setResizeIntervalInMinutes(int)",6,1,n/a,4,2,1,12,4
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean.getAverageIndexInterval()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean.getIndexIntervals()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean.getMemoryPoolCapacityInMB()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean.getMemoryPoolSizeInMB()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean.getResizeIntervalInMinutes()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean.redistributeSummaries()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean.setMemoryPoolCapacityInMB(long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean.setResizeIntervalInMinutes(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.KeyIterator.In.In(File)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.KeyIterator.In.close()",1,1,n/a,5,0,0,2,2
"org.apache.cassandra.io.sstable.KeyIterator.In.get()",1,2,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.KeyIterator.In.getFilePointer()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.KeyIterator.In.isEOF()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.KeyIterator.In.length()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.KeyIterator.In.maybeInit()",1,4,n/a,5,0,0,2,2
"org.apache.cassandra.io.sstable.KeyIterator.KeyIterator(Descriptor,CFMetaData)",3,0,n/a,6,0,2,3,1
"org.apache.cassandra.io.sstable.KeyIterator.close()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.KeyIterator.computeNext()",8,1,n/a,15,1,0,7,3
"org.apache.cassandra.io.sstable.KeyIterator.getBytesRead()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.KeyIterator.getTotalBytes()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.ReducingKeyIterator(Collection<SSTableReader>)",4,4,n/a,6,0,1,3,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.close()",1,4,n/a,5,0,0,2,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.getBytesRead()",3,1,n/a,10,1,0,5,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.getTotalBytes()",3,1,n/a,10,1,0,5,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.hasNext()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.maybeInit()",2,4,n/a,4,3,0,5,2
"org.apache.cassandra.io.sstable.ReducingKeyIterator.next()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.ReducingKeyIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTable.SSTable(Descriptor,CFMetaData)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.SSTable.SSTable(Descriptor,Set<Component>,CFMetaData)",3,2,n/a,13,0,3,8,1
"org.apache.cassandra.io.sstable.SSTable.addComponents(Collection<Component>)",5,0,n/a,12,0,1,3,1
"org.apache.cassandra.io.sstable.SSTable.appendTOC(Descriptor,Collection<Component>)",6,2,n/a,16,1,2,5,3
"org.apache.cassandra.io.sstable.SSTable.bytesOnDisk()",3,0,n/a,9,1,0,4,2
"org.apache.cassandra.io.sstable.SSTable.componentsFor(Descriptor)",7,0,n/a,27,2,1,11,5
"org.apache.cassandra.io.sstable.SSTable.decorateKey(ByteBuffer)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTable.delete(Descriptor,Set<Component>)",11,1,n/a,27,1,2,10,6
"org.apache.cassandra.io.sstable.SSTable.discoverComponentsFor(Descriptor)",13,2,n/a,20,2,1,10,6
"org.apache.cassandra.io.sstable.SSTable.estimateRowsFromIndex(RandomAccessReader)",10,0,n/a,17,1,1,10,5
"org.apache.cassandra.io.sstable.SSTable.getAllFilePaths()",3,1,n/a,7,0,0,4,2
"org.apache.cassandra.io.sstable.SSTable.getColumnFamilyName()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTable.getFilename()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTable.getIndexFilename()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTable.getKeyspaceName()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTable.getMinimalKey(DecoratedKey)",10,4,n/a,10,0,1,1,4
"org.apache.cassandra.io.sstable.SSTable.getPartitioner()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTable.readTOC(Descriptor)",14,1,n/a,19,1,1,9,3
"org.apache.cassandra.io.sstable.SSTable.toString()",3,0,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.SSTable.tryComponentFromFilename(File,String)",1,0,n/a,15,1,2,3,2
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.SSTableIdentityIterator(SSTableReader,RandomAccessReader,DecoratedKey)",8,2,n/a,24,1,3,10,2
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.close()",0,0,n/a,4,0,0,0,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.columns()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.compareTo(SSTableIdentityIterator)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.computeNext()",7,1,n/a,19,2,0,6,4
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.getPath()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.isReverseOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.metadata()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.partitionKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.partitionLevelDeletion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.staticRow()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableIdentityIterator.stats()",4,0,n/a,6,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.addRangeForEndpoint(Range<Token>,InetAddress)",4,2,n/a,10,1,2,5,2
"org.apache.cassandra.io.sstable.SSTableLoader.Client.getConnectionFactory()",1,1,n/a,10,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.getEndpointToRangesMap()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.getTableMetadata(String)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableLoader.Client.init(String)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableLoader.Client.setTableMetadata(CFMetaData)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.Client.stop()",0,0,n/a,6,0,0,0,1
"org.apache.cassandra.io.sstable.SSTableLoader.SSTableLoader(File,Client,OutputHandler)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.SSTableLoader(File,Client,OutputHandler,int)",2,2,n/a,8,0,4,5,1
"org.apache.cassandra.io.sstable.SSTableLoader.getFailedHosts()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.handleStreamEvent(StreamEvent)",1,0,n/a,9,1,1,4,3
"org.apache.cassandra.io.sstable.SSTableLoader.names(Collection<SSTableReader>)",5,1,n/a,7,0,1,4,2
"org.apache.cassandra.io.sstable.SSTableLoader.onFailure(Throwable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.onSuccess(StreamState)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.openSSTables(Map<InetAddress, Collection<Range<Token>>>)",46,1,n/a,69,3,1,42,12
"org.apache.cassandra.io.sstable.SSTableLoader.releaseReferences()",4,2,n/a,11,1,0,3,2
"org.apache.cassandra.io.sstable.SSTableLoader.stream()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableLoader.stream(Set<InetAddress>,StreamEventHandler...)",22,3,n/a,29,2,2,18,5
"org.apache.cassandra.io.sstable.SSTableMultiWriter.abortOrDie(SSTableMultiWriter)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableMultiWriter.append(UnfilteredRowIterator)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableMultiWriter.finish(boolean)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableMultiWriter.finish(long,long,boolean)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableMultiWriter.finished()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableMultiWriter.getCfId()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableMultiWriter.getFilePointer()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableMultiWriter.getFilename()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableMultiWriter.setOpenResult(boolean)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableRewriter.InvalidateKeys.InvalidateKeys(SSTableReader,Collection<DecoratedKey>)",3,1,n/a,9,1,2,4,3
"org.apache.cassandra.io.sstable.SSTableRewriter.InvalidateKeys.run()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.io.sstable.SSTableRewriter.SSTableRewriter(LifecycleTransaction,long,boolean)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.SSTableRewriter(LifecycleTransaction,long,boolean,boolean)",2,3,n/a,4,0,4,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.SSTableRewriter(LifecycleTransaction,long,boolean,long,boolean)",4,2,n/a,11,0,5,7,2
"org.apache.cassandra.io.sstable.SSTableRewriter.append(UnfilteredRowIterator)",6,5,n/a,22,3,1,12,6
"org.apache.cassandra.io.sstable.SSTableRewriter.calculateOpenInterval(boolean)",1,2,n/a,7,0,1,4,4
"org.apache.cassandra.io.sstable.SSTableRewriter.constructKeepingOriginals(LifecycleTransaction,boolean,long,boolean)",2,1,n/a,4,0,4,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.currentWriter()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableRewriter.doAbort(Throwable)",2,1,n/a,9,0,1,4,2
"org.apache.cassandra.io.sstable.SSTableRewriter.doCommit(Throwable)",2,1,n/a,7,0,1,4,2
"org.apache.cassandra.io.sstable.SSTableRewriter.doPrepare()",13,1,n/a,21,1,0,15,5
"org.apache.cassandra.io.sstable.SSTableRewriter.finish()",2,14,n/a,17,0,0,2,1
"org.apache.cassandra.io.sstable.SSTableRewriter.finished()",2,4,n/a,6,0,0,2,2
"org.apache.cassandra.io.sstable.SSTableRewriter.maybeReopenEarly(DecoratedKey)",12,1,n/a,25,3,1,11,6
"org.apache.cassandra.io.sstable.SSTableRewriter.moveStarts(SSTableReader,DecoratedKey)",20,2,n/a,49,3,2,24,8
"org.apache.cassandra.io.sstable.SSTableRewriter.setRepairedAt(long)",0,1,n/a,10,0,1,2,1
"org.apache.cassandra.io.sstable.SSTableRewriter.switchWriter(SSTableWriter)",11,5,n/a,26,2,1,16,6
"org.apache.cassandra.io.sstable.SSTableRewriter.throwDuringPrepare(boolean)",0,0,n/a,7,0,1,3,2
"org.apache.cassandra.io.sstable.SSTableRewriter.tryAppend(UnfilteredRowIterator)",3,0,n/a,14,1,1,5,2
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.CurrentFormatIterator.CurrentFormatIterator(CFMetaData,DataInputPlus,SerializationHeader,SerializationHelper)",2,1,n/a,6,0,4,3,1
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.CurrentFormatIterator.computeNext()",3,1,n/a,12,1,0,4,3
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.CurrentFormatIterator.readStaticRow()",2,1,n/a,4,0,0,1,2
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.OldFormatIterator.OldFormatIterator(CFMetaData,DataInputPlus,SerializationHelper,DeletionTime)",2,1,n/a,7,0,4,2,1
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.OldFormatIterator.computeNext()",11,2,n/a,21,2,0,11,7
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.OldFormatIterator.readStaticRow()",10,1,n/a,28,2,0,11,5
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.SSTableSimpleIterator(CFMetaData,DataInputPlus,SerializationHelper)",0,2,n/a,6,0,3,3,1
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.create(CFMetaData,DataInputPlus,SerializationHeader,SerializationHelper,DeletionTime)",2,1,n/a,7,0,5,3,2
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.readStaticRow()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.DiskWriter.run()",8,0,n/a,25,3,0,12,6
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.SSTableSimpleUnsortedWriter(File,CFMetaData,PartitionColumns,long)",3,0,n/a,7,0,4,4,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.SyncException.SyncException(IOException)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.checkForWriterException()",1,3,n/a,11,1,0,4,3
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.close()",6,0,n/a,16,1,0,7,2
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.countRow(Row)",3,1,n/a,9,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.createPartitionUpdate(DecoratedKey)",4,1,n/a,7,2,1,4,1
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.getUpdateFor(DecoratedKey)",7,0,n/a,13,1,1,8,2
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.maybeSync()",2,1,n/a,14,1,0,4,3
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.put(Buffer)",3,2,n/a,16,2,1,6,4
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.sync()",3,2,n/a,8,0,0,5,2
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.SSTableSimpleWriter(File,CFMetaData,PartitionColumns)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.close()",4,0,n/a,14,1,0,6,5
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.getOrCreateWriter()",1,1,n/a,6,0,0,3,2
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.getUpdateFor(DecoratedKey)",3,0,n/a,15,1,1,8,3
"org.apache.cassandra.io.sstable.SSTableSimpleWriter.writePartition(PartitionUpdate)",3,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.SSTableTxnWriter(LifecycleTransaction,SSTableMultiWriter)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.append(UnfilteredRowIterator)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.create(CFMetaData,Descriptor,long,long,int,SerializationHeader)",5,0,n/a,9,0,6,4,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.create(ColumnFamilyStore,Descriptor,long,long,int,SerializationHeader)",3,2,n/a,7,0,6,3,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.create(ColumnFamilyStore,String,long,long,SerializationHeader)",1,0,n/a,4,0,5,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.create(ColumnFamilyStore,String,long,long,int,SerializationHeader)",2,2,n/a,5,0,6,2,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.doAbort(Throwable)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.doCommit(Throwable)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.doPostCleanup(Throwable)",3,4,n/a,7,0,1,3,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.doPrepare()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.finish(boolean)",3,1,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.getFilePointer()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SSTableTxnWriter.getFilename()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.SimpleSSTableMultiWriter(SSTableWriter)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.abort(Throwable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.append(UnfilteredRowIterator)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.commit(Throwable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.create(Descriptor,long,long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",2,1,n/a,12,0,7,2,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.finish(boolean)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.finish(long,long,boolean)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.finished()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getCfId()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getFilePointer()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.getFilename()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.prepareToCommit()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter.setOpenResult(boolean)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.SnapshotDeletingTask(File)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.addFailedSnapshot(File)",4,0,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.pendingDeletionCount()",1,3,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.rescheduleFailedTasks()",2,2,n/a,9,0,0,3,2
"org.apache.cassandra.io.sstable.SnapshotDeletingTask.run()",3,0,n/a,12,1,0,4,2
"org.apache.cassandra.io.sstable.format.SSTableFormat.Type.Type(String,SSTableFormat)",1,2,n/a,8,0,2,3,1
"org.apache.cassandra.io.sstable.format.SSTableFormat.Type.validate(String)",3,2,n/a,12,1,1,6,4
"org.apache.cassandra.io.sstable.format.SSTableFormat.getIndexSerializer(CFMetaData,Version,SerializationHeader)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableFormat.getLatestVersion()",n/a,7,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableFormat.getReaderFactory()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableFormat.getVersion(String)",n/a,6,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableFormat.getWriterFactory()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.AndThen.AndThen(Runnable,Runnable)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.AndThen.get(Runnable,Runnable)",1,1,n/a,6,0,2,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.AndThen.run()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.DropPageCache.DropPageCache(SegmentedFile,long,SegmentedFile,long,Runnable)",0,1,n/a,8,0,5,5,1
"org.apache.cassandra.io.sstable.format.SSTableReader.DropPageCache.run()",3,0,n/a,7,0,0,4,2
"org.apache.cassandra.io.sstable.format.SSTableReader.Factory.open(Descriptor,Set<Component>,CFMetaData,Long,StatsMetadata,OpenReason,SerializationHeader)",n/a,1,0,n/a,n/a,7,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.GlobalTidy(SSTableReader)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.ensureReadMeter()",6,1,n/a,8,3,0,11,4
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.get(SSTableReader)",7,1,n/a,18,1,1,11,3
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.name()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.stopReadMeterPersistence()",1,1,n/a,8,1,0,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy.tidy()",6,0,n/a,9,0,0,5,2
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.InstanceTidier(Descriptor,CFMetaData)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.name()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.releaseSummary()",2,1,n/a,6,0,0,3,1
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.setup(SSTableReader,boolean)",3,1,n/a,13,0,2,9,2
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier.tidy()",12,0,n/a,16,2,0,22,9
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.Equals.apply(int)",0,1,n/a,1,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.GreaterThan.apply(int)",0,1,n/a,1,0,1,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.GreaterThanOrEqualTo.apply(int)",0,1,n/a,1,0,1,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.apply(int)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.SSTableReader(Descriptor,Set<Component>,CFMetaData,long,StatsMetadata,OpenReason,SerializationHeader)",3,1,n/a,15,0,7,6,1
"org.apache.cassandra.io.sstable.format.SSTableReader.SizeComparator.compare(SSTableReader,SSTableReader)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.addTo(IdentityCollection)",6,1,n/a,9,0,1,6,1
"org.apache.cassandra.io.sstable.format.SSTableReader.buildSummary(boolean,Builder,Builder,boolean,int)",23,3,n/a,50,4,5,26,11
"org.apache.cassandra.io.sstable.format.SSTableReader.buildSummaryAtLevel(int)",14,1,n/a,23,3,1,10,2
"org.apache.cassandra.io.sstable.format.SSTableReader.cacheKey(DecoratedKey,RowIndexEntry)",6,2,n/a,9,0,2,6,4
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneAndReplace(DecoratedKey,OpenReason)",2,2,n/a,13,0,2,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneAndReplace(DecoratedKey,OpenReason,IndexSummary)",6,2,n/a,28,0,3,5,2
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithNewStart(DecoratedKey,Runnable)",5,1,n/a,16,2,2,7,2
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithNewSummarySamplingLevel(ColumnFamilyStore,int)",20,3,n/a,51,3,2,20,5
"org.apache.cassandra.io.sstable.format.SSTableReader.cloneWithRestoredStart(DecoratedKey)",1,1,n/a,7,1,1,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.compare(List<ByteBuffer>,List<ByteBuffer>)",7,2,n/a,11,1,2,8,3
"org.apache.cassandra.io.sstable.format.SSTableReader.createLinks(String)",6,3,n/a,11,1,1,6,3
"org.apache.cassandra.io.sstable.format.SSTableReader.equals(Object)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.estimateCompactionGain(Set<SSTableReader>)",12,0,n/a,32,2,1,16,6
"org.apache.cassandra.io.sstable.format.SSTableReader.estimatedKeys()",1,7,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.estimatedKeysForRanges(Collection<Range<Token>>)",4,8,n/a,14,0,1,6,2
"org.apache.cassandra.io.sstable.format.SSTableReader.firstKeyBeyond(PartitionPosition)",11,2,n/a,30,2,1,17,6
"org.apache.cassandra.io.sstable.format.SSTableReader.forceFilterFailures()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getApproximateKeyCount(Iterable<SSTableReader>)",12,7,n/a,4,3,1,27,12
"org.apache.cassandra.io.sstable.format.SSTableReader.getAvgColumnSetPerRow()",0,0,n/a,6,0,0,1,3
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilter()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterFalsePositiveCount()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterOffHeapSize()",1,1,n/a,8,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterSerializedSize()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getBloomFilterTruePositiveCount()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCacheKey(DecoratedKey)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCachedPosition(DecoratedKey,boolean)",3,1,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCachedPosition(KeyCacheKey,boolean)",7,2,n/a,21,3,2,10,6
"org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionMetadata()",2,2,n/a,10,0,0,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionMetadataOffHeapSize()",2,1,n/a,10,0,0,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getCompressionRatio()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCrcCheckChance()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getCreationTimeFor(Component)",3,1,n/a,8,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getDataChannel()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getDroppableTombstonesBefore(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getEffectiveIndexInterval()",1,14,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedColumnCount()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedDroppableTombstoneRatio(int)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getEstimatedPartitionSize()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getFileDataInput(long)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getFilename()",1,27,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexChannel()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexScanPosition(PartitionPosition)",3,3,n/a,10,0,1,3,3
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexScanPositionFromBinarySearchResult(int,IndexSummary)",2,4,n/a,8,0,2,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryIndexFromBinarySearchResult(int)",0,3,n/a,16,1,1,6,3
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryKey(int)",1,1,n/a,7,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummaryOffHeapSize()",1,12,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummarySamplingLevel()",1,10,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getIndexSummarySize()",1,13,n/a,8,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCache()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCacheHit()",1,4,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getKeyCacheRequest()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getKeySamples(Range<Token>)",13,0,n/a,4,6,1,15,5
"org.apache.cassandra.io.sstable.format.SSTableReader.getMaxIndexSummarySize()",1,2,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMaxLocalDeletionTime()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMaxTTL()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMaxTimestamp()",0,12,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMinIndexInterval()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMinLocalDeletionTime()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMinTTL()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getMinTimestamp()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(PartitionPosition,Operator)",1,23,n/a,8,0,2,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(PartitionPosition,Operator,boolean)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getPosition(PartitionPosition,Operator,boolean,boolean)",n/a,2,1,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.getPositionsForRanges(Collection<Range<Token>>)",20,12,n/a,29,1,1,15,9
"org.apache.cassandra.io.sstable.format.SSTableReader.getReadMeter()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getRecentBloomFilterFalsePositiveCount()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getRecentBloomFilterTruePositiveCount()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getReplayPosition()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getSSTableLevel()",0,26,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getSSTableMetadata()",0,44,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getSampleIndexesForRanges(IndexSummary,Collection<Range<Token>>)",11,2,n/a,37,2,2,20,8
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner()",1,10,n/a,8,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(Collection<Range<Token>>,RateLimiter)",n/a,12,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(ColumnFilter,DataRange,RateLimiter,boolean)",n/a,1,1,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(ColumnFilter,DataRange,boolean)",1,3,n/a,9,0,3,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(Range<Token>,RateLimiter)",3,2,n/a,12,0,2,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getScanner(RateLimiter)",n/a,8,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.getTotalBytes(Iterable<SSTableReader>)",1,9,n/a,7,0,1,4,2
"org.apache.cassandra.io.sstable.format.SSTableReader.getTotalColumnsSet()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getTotalRows()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.getTotalUncompressedBytes(Iterable<SSTableReader>)",1,1,n/a,7,0,1,4,2
"org.apache.cassandra.io.sstable.format.SSTableReader.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.incrementReadCount()",1,3,n/a,9,0,0,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.internalOpen(Descriptor,Set<Component>,CFMetaData,Long,StatsMetadata,OpenReason,SerializationHeader)",3,3,n/a,11,0,7,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.internalOpen(Descriptor,Set<Component>,CFMetaData,SegmentedFile,SegmentedFile,IndexSummary,IFilter,long,StatsMetadata,OpenReason,SerializationHeader)",2,5,n/a,24,0,11,8,6
"org.apache.cassandra.io.sstable.format.SSTableReader.isKeyCacheSetup()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.isMarkedCompacted()",0,8,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.isMarkedSuspect()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.isRepaired()",0,19,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.isReplaced()",0,2,n/a,7,1,0,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.iterator(DecoratedKey,ColumnFilter,boolean,boolean)",n/a,6,1,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.iterator(FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean,boolean)",n/a,1,0,n/a,n/a,6,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableReader.load(ValidationMetadata)",9,1,n/a,31,1,1,11,6
"org.apache.cassandra.io.sstable.format.SSTableReader.load(boolean,boolean)",30,5,n/a,63,3,2,32,14
"org.apache.cassandra.io.sstable.format.SSTableReader.loadBloomFilter(boolean)",5,1,n/a,12,1,1,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.loadSummary(Builder,Builder)",21,2,n/a,45,1,2,19,4
"org.apache.cassandra.io.sstable.format.SSTableReader.logOpenException(Descriptor,IOException)",3,0,n/a,7,0,2,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.markObsolete(Runnable)",4,7,n/a,21,1,1,7,2
"org.apache.cassandra.io.sstable.format.SSTableReader.markSuspect()",4,14,n/a,6,0,0,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.mayOverlapsWith(SSTableReader)",8,0,n/a,13,0,1,5,6
"org.apache.cassandra.io.sstable.format.SSTableReader.mergeCardinalities(Collection<ICardinality>)",5,1,n/a,13,1,1,5,2
"org.apache.cassandra.io.sstable.format.SSTableReader.newSince(long)",0,0,n/a,10,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.onDiskLength()",0,11,n/a,9,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.open(Descriptor)",12,6,n/a,21,1,1,10,2
"org.apache.cassandra.io.sstable.format.SSTableReader.open(Descriptor,CFMetaData)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.open(Descriptor,Set<Component>,CFMetaData)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.open(Descriptor,Set<Component>,CFMetaData,boolean,boolean)",39,3,n/a,54,1,5,27,10
"org.apache.cassandra.io.sstable.format.SSTableReader.openAll(Set<Entry<Descriptor, Set<Component>>>,CFMetaData)",17,0,n/a,26,4,2,22,6
"org.apache.cassandra.io.sstable.format.SSTableReader.openDataReader()",1,6,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.openDataReader(RateLimiter)",1,3,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.openForBatch(Descriptor,Set<Component>,CFMetaData)",29,2,n/a,52,1,3,21,5
"org.apache.cassandra.io.sstable.format.SSTableReader.openIndexReader()",1,1,n/a,6,0,0,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.openNoValidation(Descriptor,CFMetaData)",2,1,n/a,5,0,2,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.openNoValidation(Descriptor,Set<Component>,ColumnFamilyStore)",1,5,n/a,5,0,3,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.overrideReadMeter(RestorableMeter)",0,4,n/a,5,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.ref()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.releaseSummary()",1,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.reloadSSTableMetadata()",2,6,n/a,13,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.resetTidying()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.runOnClose(Runnable)",1,1,n/a,9,1,1,3,1
"org.apache.cassandra.io.sstable.format.SSTableReader.saveSummary(Builder,Builder)",1,3,n/a,10,0,2,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.saveSummary(Builder,Builder,IndexSummary)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.saveSummary(Descriptor,DecoratedKey,DecoratedKey,Builder,Builder,IndexSummary)",17,3,n/a,25,1,6,12,4
"org.apache.cassandra.io.sstable.format.SSTableReader.selfRef()",0,47,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.setCrcCheckChance(double)",1,1,n/a,12,0,1,3,2
"org.apache.cassandra.io.sstable.format.SSTableReader.setReplaced()",0,2,n/a,8,1,0,3,1
"org.apache.cassandra.io.sstable.format.SSTableReader.setup(boolean)",1,3,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.setupOnline()",3,4,n/a,10,0,0,4,2
"org.apache.cassandra.io.sstable.format.SSTableReader.tryRef()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.uncompressedLength()",0,4,n/a,9,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.validate()",3,1,n/a,7,1,0,2,2
"org.apache.cassandra.io.sstable.format.SSTableReader.validateSummarySamplingLevel()",11,1,n/a,43,3,0,22,7
"org.apache.cassandra.io.sstable.format.SSTableWriter.Factory.open(Descriptor,long,long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",n/a,1,1,n/a,n/a,7,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableWriter.SSTableWriter(Descriptor,long,long,CFMetaData,MetadataCollector,SerializationHeader)",4,1,n/a,14,0,6,6,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.abort()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.abort(Throwable)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.append(UnfilteredRowIterator)",n/a,5,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableWriter.close()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.commit(Throwable)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.components(CFMetaData)",8,1,n/a,22,1,1,7,3
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(CFMetaData,Descriptor,long,long,int,SerializationHeader,LifecycleTransaction)",3,1,n/a,11,0,7,2,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(Descriptor,Long,Long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",3,0,n/a,11,0,7,2,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(Descriptor,long,long,int,SerializationHeader,LifecycleTransaction)",2,2,n/a,5,0,6,2,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(String,long,long,SerializationHeader,LifecycleTransaction)",2,1,n/a,5,0,5,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.create(String,long,long,int,SerializationHeader,LifecycleTransaction)",2,0,n/a,4,0,6,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.finalizeMetadata()",4,2,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.finish(boolean)",3,2,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.finish(long,long,boolean)",1,2,n/a,7,0,3,4,2
"org.apache.cassandra.io.sstable.format.SSTableWriter.finished()",0,3,n/a,8,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.getFilePointer()",n/a,5,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableWriter.getOnDiskFilePointer()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableWriter.mark()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableWriter.openEarly()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableWriter.openFinalEarly()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableWriter.prepareToCommit()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.rename(Descriptor,Descriptor,Set<Component>)",11,0,n/a,11,1,3,4,2
"org.apache.cassandra.io.sstable.format.SSTableWriter.resetAndTruncate()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.SSTableWriter.setMaxDataAge(long)",0,5,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.setOpenResult(boolean)",0,3,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.setRepairedAt(long)",0,1,n/a,6,0,1,3,2
"org.apache.cassandra.io.sstable.format.SSTableWriter.statsMetadata()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.SSTableWriter.txnProxy()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.Version(SSTableFormat,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.format.Version.compressedChecksumType()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.correspondingMessagingVersion()",n/a,5,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.equals(Object)",3,0,n/a,9,0,1,8,6
"org.apache.cassandra.io.sstable.format.Version.getSSTableFormat()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.Version.getVersion()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.Version.hasBoundaries()",n/a,4,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.hasCompactionAncestors()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.hasNewFileName()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.hasNewStatsFile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.hasOldBfHashOrder()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.hasRepairedAt()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.hasSamplingLevel()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.hashCode()",1,0,n/a,5,0,0,1,2
"org.apache.cassandra.io.sstable.format.Version.isCompatible()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.isCompatibleForStreaming()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.isLatestVersion()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.storeRows()",n/a,21,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.toString()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.Version.tracksLegacyCounterShards()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.uncompressedChecksumType()",n/a,8,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.format.Version.validate(String)",2,4,n/a,9,0,1,1,2
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigFormat()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.BigVersion(String)",15,2,n/a,27,0,1,20,6
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.compressedChecksumType()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.correspondingMessagingVersion()",0,5,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasBoundaries()",0,4,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasCompactionAncestors()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasNewFileName()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasNewStatsFile()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasOldBfHashOrder()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasRepairedAt()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.hasSamplingLevel()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.isCompatible()",3,2,n/a,5,0,0,1,2
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.isCompatibleForStreaming()",3,0,n/a,5,0,0,1,2
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.isLatestVersion()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.storeRows()",0,21,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.tracksLegacyCounterShards()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion.uncompressedChecksumType()",0,8,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.ReaderFactory.open(Descriptor,Set<Component>,CFMetaData,Long,StatsMetadata,OpenReason,SerializationHeader)",1,0,n/a,5,0,7,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.WriterFactory.open(Descriptor,long,long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",1,1,n/a,11,0,7,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getIndexSerializer(CFMetaData,Version,SerializationHeader)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getLatestVersion()",0,8,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getReaderFactory()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getVersion(String)",1,6,n/a,5,0,1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.getWriterFactory()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.BigTableReader(Descriptor,Set<Component>,CFMetaData,Long,StatsMetadata,OpenReason,SerializationHeader)",1,0,n/a,4,0,7,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.getPosition(PartitionPosition,Operator,boolean,boolean)",43,2,n/a,135,6,4,72,30
"org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(Collection<Range<Token>>,RateLimiter)",1,12,n/a,10,0,2,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(ColumnFilter,DataRange,RateLimiter,boolean)",1,1,n/a,9,0,4,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.getScanner(RateLimiter)",1,8,n/a,9,0,1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(DecoratedKey,ColumnFilter,boolean,boolean)",2,6,n/a,6,0,4,1,2
"org.apache.cassandra.io.sstable.format.big.BigTableReader.iterator(FileDataInput,DecoratedKey,RowIndexEntry,ColumnFilter,boolean,boolean)",2,0,n/a,6,0,6,1,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.BigTableScanner(SSTableReader,ColumnFilter,DataRange,RateLimiter,boolean,Iterator<AbstractBounds<PartitionPosition>>)",5,3,n/a,14,0,6,9,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.EmptySSTableScanner(SSTableReader)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.getBackingFiles()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.getCurrentPosition()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.getLengthInBytes()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.hasNext()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.isForThrift()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner.next()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.KeyScanningIterator.computeNext()",33,1,n/a,19,5,0,33,10
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.addRange(SSTableReader,AbstractBounds<PartitionPosition>,List<AbstractBounds<PartitionPosition>>)",26,2,n/a,39,2,3,23,10
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.close()",5,0,n/a,13,1,0,5,3
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.createIterator()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.fullRange(SSTableReader)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getBackingFiles()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getCurrentPosition()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getLengthInBytes()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(SSTableReader,Collection<Range<Token>>,RateLimiter)",7,0,n/a,8,0,3,4,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(SSTableReader,ColumnFilter,DataRange,RateLimiter,boolean)",3,0,n/a,4,0,5,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.getScanner(SSTableReader,RateLimiter)",4,0,n/a,5,0,2,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.hasNext()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.isForThrift()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.makeBounds(SSTableReader,Collection<Range<Token>>)",5,2,n/a,7,0,2,4,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.makeBounds(SSTableReader,DataRange)",3,2,n/a,6,0,2,3,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.next()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.seekToCurrentRangeStart()",15,1,n/a,30,3,0,14,5
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.toString()",2,0,n/a,9,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.BigTableWriter(Descriptor,Long,Long,CFMetaData,MetadataCollector,SerializationHeader,LifecycleTransaction)",14,1,n/a,25,1,7,8,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.IndexWriter(long,SequentialWriter)",16,1,n/a,4,2,2,8,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.append(DecoratedKey,RowIndexEntry,long)",11,1,n/a,18,1,3,10,3
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.doAbort(Throwable)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.doCommit(Throwable)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.doPostCleanup(Throwable)",3,4,n/a,8,0,1,4,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.doPrepare()",10,1,n/a,14,1,0,7,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.flushBf()",8,1,n/a,22,2,0,7,3
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.getMaxReadable()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.mark()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter.resetAndTruncate()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.StatsCollector(MetadataCollector)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.applyToDeletion(DeletionTime)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.applyToMarker(RangeTombstoneMarker)",9,0,n/a,16,1,1,7,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.applyToRow(Row)",3,0,n/a,7,0,1,3,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.applyToStatic(Row)",2,0,n/a,7,0,1,3,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector.onPartitionClose()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy.doAbort(Throwable)",2,1,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy.doCommit(Throwable)",2,1,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy.doPostCleanup(Throwable)",1,4,n/a,6,0,1,2,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy.doPrepare()",7,1,n/a,13,0,0,7,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.afterAppend(DecoratedKey,long,RowIndexEntry)",5,1,n/a,11,0,3,8,3
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.append(UnfilteredRowIterator)",19,0,n/a,36,1,1,17,4
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.beforeAppend(DecoratedKey)",4,1,n/a,10,0,1,4,4
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.getFilePointer()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.getOnDiskFilePointer()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.mark()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.maybeLogLargePartitionWarning(DecoratedKey,long)",5,1,n/a,8,1,2,3,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.openEarly()",9,3,n/a,22,0,0,12,3
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.openFinal(Descriptor,OpenReason)",9,2,n/a,25,0,2,10,2
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.openFinalEarly()",3,1,n/a,7,0,0,3,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.resetAndTruncate()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.txnProxy()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.writeMetadata(Descriptor,Map<MetadataType, MetadataComponent>)",9,1,n/a,13,1,2,5,2
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadata(ICardinality)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadataSerializer.deserialize(Version,DataInputPlus)",8,0,n/a,10,1,2,5,2
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadataSerializer.serialize(Version,CompactionMetadata,DataOutputPlus)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadataSerializer.serializedSize(Version,CompactionMetadata)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.equals(Object)",2,0,n/a,11,0,1,5,4
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.hashCode()",0,0,n/a,6,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.IMetadataComponentSerializer.deserialize(Version,DataInputPlus)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.IMetadataComponentSerializer.serialize(Version,T,DataOutputPlus)",n/a,0,1,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.IMetadataComponentSerializer.serializedSize(Version,T)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.IMetadataSerializer.deserialize(Descriptor,EnumSet<MetadataType>)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.IMetadataSerializer.deserialize(Descriptor,MetadataType)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.IMetadataSerializer.mutateLevel(Descriptor,int)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.IMetadataSerializer.mutateRepairedAt(Descriptor,long)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.IMetadataSerializer.serialize(Map<MetadataType, MetadataComponent>,DataOutputPlus,Version)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer.deserialize(Descriptor,EnumSet<MetadataType>)",42,0,n/a,69,2,2,39,9
"org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer.serialize(Map<MetadataType, MetadataComponent>,DataOutputPlus,Version)",21,0,n/a,29,0,3,22,6
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MetadataCollector(ClusteringComparator)",2,16,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MetadataCollector(Iterable<SSTableReader>,ClusteringComparator,int)",4,5,n/a,6,0,3,3,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.MinMaxIntTracker()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.MinMaxIntTracker(int,int)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.max()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.min()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker.update(int)",0,2,n/a,15,1,1,7,4
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.MinMaxLongTracker()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.MinMaxLongTracker(long,long)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.max()",0,1,n/a,4,0,0,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.min()",0,1,n/a,4,0,0,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker.update(long)",0,1,n/a,15,1,1,7,4
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.addCellPerPartitionCount(long)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.addCompressionRatio(long,long)",0,1,n/a,9,0,2,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.addKey(ByteBuffer)",4,1,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.addPartitionSizeInBytes(long)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultCellPerPartitionCountHistogram()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultPartitionSizeHistogram()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultStatsMetadata()",6,0,n/a,21,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.defaultTombstoneDropTimeHistogram()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.finalizeMetadata(String,double,long,SerializationHeader)",17,3,n/a,26,0,4,6,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.makeList(ByteBuffer[])",2,2,n/a,11,0,1,8,3
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.max(ByteBuffer,ByteBuffer,AbstractType<?>)",1,1,n/a,10,0,3,7,4
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.mergeTombstoneHistogram(StreamingHistogram)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.min(ByteBuffer,ByteBuffer,AbstractType<?>)",1,1,n/a,10,0,3,7,4
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.replayPosition(ReplayPosition)",0,6,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.sstableLevel(int)",0,6,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(Cell)",6,0,n/a,6,0,1,3,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(DeletionTime)",5,1,n/a,8,1,1,3,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.update(LivenessInfo)",8,1,n/a,11,1,1,6,3
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateClusteringValues(ClusteringPrefix)",5,2,n/a,12,1,1,9,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateColumnSetPerRow(long)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateHasLegacyCounterShards(boolean)",0,1,n/a,4,0,1,1,2
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateLocalDeletionTime(int)",2,3,n/a,5,0,1,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateTTL(int)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.updateTimestamp(long)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataComponent.compareTo(MetadataComponent)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataComponent.getType()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(Descriptor,EnumSet<MetadataType>)",10,0,n/a,20,2,2,10,2
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(Descriptor,FileDataInput,EnumSet<MetadataType>)",11,1,n/a,24,2,3,15,4
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.deserialize(Descriptor,MetadataType)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutateLevel(Descriptor,int)",8,0,n/a,9,0,2,5,1
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.mutateRepairedAt(Descriptor,long)",8,0,n/a,9,0,2,5,1
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.rewriteSSTableMetadata(Descriptor,Map<MetadataType, MetadataComponent>)",10,2,n/a,13,1,2,7,2
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer.serialize(Map<MetadataType, MetadataComponent>,DataOutputPlus,Version)",13,1,n/a,24,1,3,11,3
"org.apache.cassandra.io.sstable.metadata.MetadataType.MetadataType(IMetadataComponentSerializer<MetadataComponent>)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadata(EstimatedHistogram,EstimatedHistogram,ReplayPosition,long,long,int,int,int,int,double,StreamingHistogram,int,List<ByteBuffer>,List<ByteBuffer>,boolean,long,long,long)",0,3,n/a,38,0,18,18,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadataSerializer.deserialize(Version,DataInputPlus)",32,0,n/a,50,0,2,33,10
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadataSerializer.serialize(Version,StatsMetadata,DataOutputPlus)",25,0,n/a,32,1,3,25,6
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadataSerializer.serializedSize(Version,StatsMetadata)",10,0,n/a,25,0,2,19,5
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.equals(Object)",22,0,n/a,27,0,1,6,4
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.getDroppableTombstonesBefore(int)",1,1,n/a,8,0,1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.getEstimatedDroppableTombstoneRatio(int)",3,0,n/a,14,1,1,5,2
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.hashCode()",20,0,n/a,24,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.mutateLevel(int)",1,0,n/a,21,0,1,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.mutateRepairedAt(long)",1,0,n/a,21,0,1,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadata(String,double)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadataSerializer.deserialize(Version,DataInputPlus)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadataSerializer.serialize(Version,ValidationMetadata,DataOutputPlus)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadataSerializer.serializedSize(Version,ValidationMetadata)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.equals(Object)",4,0,n/a,8,0,1,6,5
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.hashCode()",2,0,n/a,10,0,0,6,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(ByteBuffer)",1,4,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(FileOutputStream)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(FileOutputStream,int)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(RandomAccessFile)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(RandomAccessFile,int)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(WritableByteChannel)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(WritableByteChannel,ByteBuffer)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.BufferedDataOutputStreamPlus(WritableByteChannel,int)",4,2,n/a,6,0,2,3,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.applyToChannel(Function<WritableByteChannel, R>)",3,0,n/a,9,0,1,4,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.close()",3,0,n/a,8,0,0,4,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.doFlush()",4,7,n/a,8,0,0,4,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.flush()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.order(ByteOrder)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(ByteBuffer)",16,1,n/a,33,3,1,11,5
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(Memory,long,long)",2,0,n/a,6,0,3,2,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(byte[])",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(byte[],int,int)",7,2,n/a,26,2,3,13,9
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.write(int)",3,4,n/a,7,0,1,3,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeBoolean(boolean)",3,0,n/a,7,0,1,3,3
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeByte(int)",1,3,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeBytes(String)",3,0,n/a,6,0,1,4,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeChar(int)",3,3,n/a,8,0,1,3,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeChars(String)",3,0,n/a,6,0,1,4,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeDouble(double)",2,1,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeExcessSlow()",9,1,n/a,13,1,0,6,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeFloat(float)",2,1,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeInt(int)",3,4,n/a,8,0,1,3,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeLong(long)",3,3,n/a,8,0,1,3,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeShort(int)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeSlow(long,int)",3,3,n/a,9,0,2,6,4
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeUTF(String)",1,6,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeUnsignedVInt(long)",4,1,n/a,11,1,1,5,2
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus.writeVInt(long)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.BufferedSegmentedFile(BufferedSegmentedFile)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.BufferedSegmentedFile(ChannelProxy,int,long)",2,4,n/a,4,0,3,1,1
"org.apache.cassandra.io.util.BufferedSegmentedFile.Builder.complete(ChannelProxy,int,long)",2,0,n/a,5,0,3,2,2
"org.apache.cassandra.io.util.BufferedSegmentedFile.sharedCopy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.ChannelProxy.ChannelProxy(ChannelProxy)",1,1,n/a,6,0,1,3,1
"org.apache.cassandra.io.util.ChannelProxy.ChannelProxy(File)",3,10,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.ChannelProxy.ChannelProxy(String)",2,9,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.ChannelProxy.ChannelProxy(String,FileChannel)",2,1,n/a,6,0,2,3,1
"org.apache.cassandra.io.util.ChannelProxy.Cleanup.Cleanup(String,FileChannel)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.ChannelProxy.Cleanup.name()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.ChannelProxy.Cleanup.tidy()",2,0,n/a,11,1,0,3,2
"org.apache.cassandra.io.util.ChannelProxy.filePath()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.ChannelProxy.getFileDescriptor()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.ChannelProxy.map(MapMode,long,long)",2,0,n/a,11,1,3,3,2
"org.apache.cassandra.io.util.ChannelProxy.openChannel(File)",3,1,n/a,11,1,1,3,2
"org.apache.cassandra.io.util.ChannelProxy.read(ByteBuffer,long)",2,0,n/a,11,1,2,3,2
"org.apache.cassandra.io.util.ChannelProxy.sharedCopy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.ChannelProxy.size()",2,0,n/a,11,1,0,3,2
"org.apache.cassandra.io.util.ChannelProxy.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.ChannelProxy.transferTo(long,long,WritableByteChannel)",2,1,n/a,11,1,3,3,2
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.Builder.Builder(File,File)",8,3,n/a,10,0,2,3,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.Builder.build()",1,3,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.ChecksummedRandomAccessReader(Builder)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.CorruptFileException.CorruptFileException(Exception,String)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.close()",2,0,n/a,8,0,0,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.reBufferMmap()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.reBufferStandard()",13,0,n/a,27,1,0,14,4
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.seek(long)",2,0,n/a,6,0,1,2,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.ChecksummedSequentialWriter(File,int,File)",5,0,n/a,7,0,3,4,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.TransactionalProxy.doAbort(Throwable)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.TransactionalProxy.doCommit(Throwable)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.TransactionalProxy.doPrepare()",4,0,n/a,8,0,0,4,2
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.flushData()",6,0,n/a,9,0,0,5,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.txnProxy()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.Builder.Builder(CompressedSequentialWriter)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.Builder.complete(ChannelProxy,int,long)",3,0,n/a,4,0,3,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.Builder.metadata(String,long)",2,1,n/a,6,0,2,3,2
"org.apache.cassandra.io.util.CompressedSegmentedFile.Cleanup.Cleanup(ChannelProxy,CompressionMetadata,MmappedRegions)",1,1,n/a,6,0,3,3,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.Cleanup.tidy()",5,0,n/a,12,1,0,6,3
"org.apache.cassandra.io.util.CompressedSegmentedFile.CompressedSegmentedFile(ChannelProxy,int,CompressionMetadata)",2,1,n/a,9,0,3,1,2
"org.apache.cassandra.io.util.CompressedSegmentedFile.CompressedSegmentedFile(ChannelProxy,int,CompressionMetadata,MmappedRegions)",2,1,n/a,6,0,4,3,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.CompressedSegmentedFile(CompressedSegmentedFile)",1,1,n/a,6,0,1,3,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.addTo(IdentityCollection)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.channel()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.createReader()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.createReader(RateLimiter)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.dropPageCache(long)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.io.util.CompressedSegmentedFile.getMetadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.regions()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.CompressedSegmentedFile.sharedCopy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataInputBuffer.DataInputBuffer(ByteBuffer,boolean)",2,20,n/a,8,0,2,1,2
"org.apache.cassandra.io.util.DataInputBuffer.DataInputBuffer(byte[])",2,11,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataInputBuffer.DataInputBuffer(byte[],int,int)",2,3,n/a,4,0,3,1,1
"org.apache.cassandra.io.util.DataInputBuffer.available()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.DataInputBuffer.reBuffer()",0,0,n/a,5,0,0,0,1
"org.apache.cassandra.io.util.DataInputBuffer.slice(byte[],int,int)",5,1,n/a,11,1,3,6,3
"org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus.DataInputStreamPlus(InputStream)",1,11,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataInputPlus.readUnsignedVInt()",1,52,n/a,11,0,0,1,1
"org.apache.cassandra.io.util.DataInputPlus.readVInt()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataInputPlus.skipBytes(int)",n/a,4,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.util.DataInputPlus.skipBytesFully(int)",2,9,n/a,6,0,1,3,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.ChecksumValidator(Checksum,RandomAccessReader,String)",1,1,n/a,7,0,3,4,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.ChecksumValidator(Descriptor)",7,1,n/a,6,0,1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.chunkStart(long)",0,2,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.seek(long)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator.validate(byte[],int,int)",5,1,n/a,9,0,3,6,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter.ChecksumWriter(DataOutput)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter.appendDirect(ByteBuffer,boolean)",14,1,n/a,26,2,2,14,3
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter.writeChunkSize(int)",2,0,n/a,11,1,1,3,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter.writeFullChecksum(Descriptor)",10,1,n/a,14,1,1,6,3
"org.apache.cassandra.io.util.DataIntegrityMetadata.FileDigestValidator.FileDigestValidator(Descriptor)",15,1,n/a,17,1,1,8,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.FileDigestValidator.close()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.FileDigestValidator.validate()",6,1,n/a,11,1,0,6,3
"org.apache.cassandra.io.util.DataIntegrityMetadata.checksumValidator(Descriptor)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata.fileDigestValidator(Descriptor)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.DataOutputBuffer()",1,37,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.DataOutputBuffer(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.DataOutputBuffer(int)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.GrowingChannel.close()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.io.util.DataOutputBuffer.GrowingChannel.isOpen()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.GrowingChannel.write(ByteBuffer)",6,0,n/a,7,0,1,4,1
"org.apache.cassandra.io.util.DataOutputBuffer.buffer()",2,28,n/a,6,0,0,3,1
"org.apache.cassandra.io.util.DataOutputBuffer.close()",0,2,n/a,4,0,0,0,1
"org.apache.cassandra.io.util.DataOutputBuffer.doFlush()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.flush()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.getData()",1,15,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.getLength()",1,18,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.hasPosition()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.newDefaultChannel()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.position()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBuffer.reallocate(long)",3,2,n/a,8,0,1,5,1
"org.apache.cassandra.io.util.DataOutputBuffer.toByteArray()",3,8,n/a,7,0,0,4,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.DataOutputBufferFixed()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.DataOutputBufferFixed(ByteBuffer)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.DataOutputBufferFixed(int)",2,5,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.doFlush()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.DataOutputBufferFixed.reallocate(long)",1,0,n/a,10,0,1,1,1
"org.apache.cassandra.io.util.DataOutputPlus.applyToChannel(Function<WritableByteChannel, R>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.util.DataOutputPlus.hasPosition()",0,2,n/a,8,0,0,1,1
"org.apache.cassandra.io.util.DataOutputPlus.position()",1,2,n/a,13,0,0,1,1
"org.apache.cassandra.io.util.DataOutputPlus.write(ByteBuffer)",n/a,14,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.util.DataOutputPlus.write(Memory,long,long)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.io.util.DataOutputPlus.writeUnsignedVInt(long)",1,44,n/a,11,0,1,1,1
"org.apache.cassandra.io.util.DataOutputPlus.writeVInt(long)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataOutputStreamPlus.DataOutputStreamPlus()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.DataOutputStreamPlus.DataOutputStreamPlus(WritableByteChannel)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.DataOutputStreamPlus.newDefaultChannel()",22,1,n/a,30,3,0,24,5
"org.apache.cassandra.io.util.DataOutputStreamPlus.retrieveTemporaryBuffer(int)",5,1,n/a,14,1,1,5,2
"org.apache.cassandra.io.util.DiskAwareRunnable.getDirectories()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.DiskAwareRunnable.getWriteDirectory(long)",3,1,n/a,7,0,1,4,2
"org.apache.cassandra.io.util.FastByteArrayInputStream.FastByteArrayInputStream(byte[])",0,1,n/a,12,0,1,3,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.FastByteArrayInputStream(byte[],int,int)",0,0,n/a,18,0,3,4,2
"org.apache.cassandra.io.util.FastByteArrayInputStream.available()",0,0,n/a,11,0,0,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.close()",0,0,n/a,10,0,0,0,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.mark(int)",0,2,n/a,14,0,1,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.markSupported()",0,1,n/a,13,0,0,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.read()",0,0,n/a,11,0,0,1,2
"org.apache.cassandra.io.util.FastByteArrayInputStream.read(byte[],int,int)",3,0,n/a,43,1,3,12,9
"org.apache.cassandra.io.util.FastByteArrayInputStream.reset()",0,2,n/a,11,0,0,1,1
"org.apache.cassandra.io.util.FastByteArrayInputStream.skip(long)",0,0,n/a,19,1,1,5,3
"org.apache.cassandra.io.util.FileDataInput.bytesPastMark(FileMark)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.util.FileDataInput.bytesRemaining()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.FileDataInput.getFilePointer()",n/a,6,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.FileDataInput.getPath()",n/a,8,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.FileDataInput.isEOF()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.FileDataInput.mark()",n/a,4,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.FileDataInput.reset(FileMark)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.util.FileDataInput.seek(long)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.util.FileSegmentInputStream.FileSegmentInputStream(ByteBuffer,String,long)",1,1,n/a,6,0,3,3,1
"org.apache.cassandra.io.util.FileSegmentInputStream.bytesPastMark(FileMark)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.bytesRemaining()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.getFilePointer()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.getPath()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.isEOF()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.mark()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.markSupported()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.reset(FileMark)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.FileSegmentInputStream.seek(long)",6,0,n/a,9,0,1,3,3
"org.apache.cassandra.io.util.FileSegmentInputStream.size()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.FileUtils.append(File,String...)",5,0,n/a,7,0,2,3,2
"org.apache.cassandra.io.util.FileUtils.appendAndSync(File,String...)",5,0,n/a,7,0,2,3,2
"org.apache.cassandra.io.util.FileUtils.atomicMoveWithFallback(Path,Path)",3,2,n/a,18,1,2,4,2
"org.apache.cassandra.io.util.FileUtils.clean(ByteBuffer)",5,9,n/a,9,1,1,4,4
"org.apache.cassandra.io.util.FileUtils.close(Closeable...)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.FileUtils.close(Iterable<? extends Closeable>)",2,0,n/a,19,2,1,9,5
"org.apache.cassandra.io.util.FileUtils.closeQuietly(AutoCloseable)",2,0,n/a,12,1,1,4,3
"org.apache.cassandra.io.util.FileUtils.closeQuietly(Closeable)",2,0,n/a,12,1,1,4,3
"org.apache.cassandra.io.util.FileUtils.closeQuietly(Iterable<? extends AutoCloseable>)",2,0,n/a,15,2,1,5,4
"org.apache.cassandra.io.util.FileUtils.copyTo(DataInput,OutputStream,int)",4,0,n/a,17,1,3,10,3
"org.apache.cassandra.io.util.FileUtils.createDirectory(File)",4,6,n/a,8,1,1,3,3
"org.apache.cassandra.io.util.FileUtils.createDirectory(String)",2,6,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.FileUtils.createHardLink(File,File)",8,2,n/a,15,1,2,7,4
"org.apache.cassandra.io.util.FileUtils.createHardLink(String,String)",3,2,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.FileUtils.createTempFile(String,String)",3,3,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.FileUtils.createTempFile(String,String,File)",2,1,n/a,11,1,3,3,2
"org.apache.cassandra.io.util.FileUtils.delete(File...)",1,0,n/a,7,1,1,2,2
"org.apache.cassandra.io.util.FileUtils.delete(String)",2,2,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.FileUtils.deleteAsync(String)",4,0,n/a,4,2,1,3,1
"org.apache.cassandra.io.util.FileUtils.deleteRecursive(File)",5,24,n/a,16,1,1,5,3
"org.apache.cassandra.io.util.FileUtils.deleteRecursiveOnExit(File)",6,2,n/a,15,1,1,6,3
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(File)",2,7,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(File,boolean,Throwable)",6,2,n/a,22,2,3,9,5
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(String)",2,7,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.FileUtils.deleteWithConfirm(String,boolean,Throwable)",2,2,n/a,4,0,3,1,1
"org.apache.cassandra.io.util.FileUtils.folderSize(File)",4,2,n/a,17,1,1,6,3
"org.apache.cassandra.io.util.FileUtils.getCanonicalPath(File)",2,5,n/a,11,1,1,3,2
"org.apache.cassandra.io.util.FileUtils.getCanonicalPath(String)",3,5,n/a,11,1,1,3,2
"org.apache.cassandra.io.util.FileUtils.getRelativePath(String,String)",9,0,n/a,13,1,2,4,2
"org.apache.cassandra.io.util.FileUtils.handleCorruptSSTable(CorruptSSTableException)",5,1,n/a,12,1,1,7,3
"org.apache.cassandra.io.util.FileUtils.handleFSError(FSError)",9,3,n/a,28,2,1,19,8
"org.apache.cassandra.io.util.FileUtils.handleStartupFSError(Throwable)",4,2,n/a,16,1,1,9,3
"org.apache.cassandra.io.util.FileUtils.isCleanerAvailable()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.FileUtils.isContained(File,File)",3,0,n/a,7,0,2,3,1
"org.apache.cassandra.io.util.FileUtils.isSubDirectory(File,File)",4,2,n/a,13,1,2,8,3
"org.apache.cassandra.io.util.FileUtils.readLines(File)",4,2,n/a,13,1,1,5,3
"org.apache.cassandra.io.util.FileUtils.renameWithConfirm(File,File)",13,5,n/a,16,1,2,6,3
"org.apache.cassandra.io.util.FileUtils.renameWithConfirm(String,String)",3,5,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.FileUtils.renameWithOutConfirm(String,String)",7,1,n/a,12,1,2,4,3
"org.apache.cassandra.io.util.FileUtils.replace(File,String...)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.FileUtils.stringifyFileSize(double)",5,18,n/a,33,1,1,19,5
"org.apache.cassandra.io.util.FileUtils.truncate(String,long)",4,0,n/a,11,1,2,3,2
"org.apache.cassandra.io.util.FileUtils.write(File,List<String>,StandardOpenOption...)",3,2,n/a,14,1,3,3,2
"org.apache.cassandra.io.util.ICompressedFile.channel()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.ICompressedFile.getMetadata()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.ICompressedFile.regions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.LengthAvailableInputStream.LengthAvailableInputStream(InputStream,long)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.available()",0,0,n/a,5,0,0,1,3
"org.apache.cassandra.io.util.LengthAvailableInputStream.close()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.mark(int)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.markSupported()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.read()",1,0,n/a,7,0,0,3,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.read(byte[])",1,0,n/a,7,0,1,3,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.read(byte[],int,int)",1,0,n/a,7,0,3,3,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.reset()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.LengthAvailableInputStream.skip(long)",1,0,n/a,7,0,1,3,1
"org.apache.cassandra.io.util.Memory.Memory(Memory)",0,0,n/a,7,0,1,2,1
"org.apache.cassandra.io.util.Memory.Memory(long)",3,2,n/a,11,0,1,6,3
"org.apache.cassandra.io.util.Memory.allocate(long)",3,8,n/a,8,0,1,5,3
"org.apache.cassandra.io.util.Memory.asByteBuffer(long,int)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.Memory.asByteBuffers(long,long)",5,0,n/a,16,1,2,13,3
"org.apache.cassandra.io.util.Memory.checkBounds(long,long)",0,16,n/a,6,0,2,2,3
"org.apache.cassandra.io.util.Memory.close()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.Memory.copy(long)",4,0,n/a,6,0,1,3,1
"org.apache.cassandra.io.util.Memory.equals(Object)",0,1,n/a,12,0,1,8,5
"org.apache.cassandra.io.util.Memory.free()",1,3,n/a,6,0,0,4,2
"org.apache.cassandra.io.util.Memory.getByte(long)",2,12,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.Memory.getBytes(long,byte[],int,int)",4,0,n/a,19,0,4,8,6
"org.apache.cassandra.io.util.Memory.getInt(long)",3,0,n/a,9,1,1,4,2
"org.apache.cassandra.io.util.Memory.getIntByByte(long)",8,1,n/a,13,1,1,3,2
"org.apache.cassandra.io.util.Memory.getLong(long)",3,4,n/a,9,1,1,4,2
"org.apache.cassandra.io.util.Memory.getLongByByte(long)",16,1,n/a,21,1,1,3,2
"org.apache.cassandra.io.util.Memory.put(long,Memory,long,long)",3,3,n/a,6,0,4,3,1
"org.apache.cassandra.io.util.Memory.putIntByByte(long,int)",8,1,n/a,17,1,2,9,2
"org.apache.cassandra.io.util.Memory.putLongByByte(long,long)",16,1,n/a,25,1,2,17,2
"org.apache.cassandra.io.util.Memory.putShortByByte(long,short)",4,1,n/a,13,1,2,5,2
"org.apache.cassandra.io.util.Memory.setByte(long,byte)",2,11,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.Memory.setByteBuffer(ByteBuffer,long,int)",2,0,n/a,6,0,3,2,1
"org.apache.cassandra.io.util.Memory.setBytes(long,ByteBuffer)",15,0,n/a,18,1,2,10,5
"org.apache.cassandra.io.util.Memory.setBytes(long,byte[],int,int)",4,1,n/a,21,0,4,8,6
"org.apache.cassandra.io.util.Memory.setInt(long,int)",3,2,n/a,12,1,2,4,2
"org.apache.cassandra.io.util.Memory.setLong(long,long)",3,1,n/a,12,1,2,4,2
"org.apache.cassandra.io.util.Memory.setMemory(long,long,byte)",2,1,n/a,6,0,3,2,1
"org.apache.cassandra.io.util.Memory.setShort(long,short)",3,0,n/a,12,1,2,4,2
"org.apache.cassandra.io.util.Memory.size()",0,14,n/a,5,0,0,2,1
"org.apache.cassandra.io.util.Memory.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.Memory.toString(long,long)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.MemoryInputStream.MemoryInputStream(Memory)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.MemoryInputStream.MemoryInputStream(Memory,int)",2,1,n/a,8,0,2,4,1
"org.apache.cassandra.io.util.MemoryInputStream.available()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.MemoryInputStream.getByteBuffer(long,int)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.MemoryInputStream.memRemaining()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MemoryInputStream.reBuffer()",6,0,n/a,8,0,0,4,2
"org.apache.cassandra.io.util.MemoryOutputStream.MemoryOutputStream(Memory)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.MemoryOutputStream.position()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MemoryOutputStream.write(byte[],int,int)",1,0,n/a,6,0,3,2,1
"org.apache.cassandra.io.util.MemoryOutputStream.write(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.MmappedRegions.MmappedRegions(ChannelProxy,CompressionMetadata,long)",2,3,n/a,4,0,3,1,1
"org.apache.cassandra.io.util.MmappedRegions.MmappedRegions(MmappedRegions)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.MmappedRegions.MmappedRegions(State,CompressionMetadata,long)",5,1,n/a,15,1,3,8,3
"org.apache.cassandra.io.util.MmappedRegions.Region.Region(long,ByteBuffer)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.MmappedRegions.Region.bottom()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MmappedRegions.Region.top()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MmappedRegions.State.State(ChannelProxy)",1,1,n/a,8,0,1,5,1
"org.apache.cassandra.io.util.MmappedRegions.State.State(State)",0,2,n/a,8,0,1,5,1
"org.apache.cassandra.io.util.MmappedRegions.State.add(long,long)",3,3,n/a,12,1,2,7,2
"org.apache.cassandra.io.util.MmappedRegions.State.close(Throwable)",7,1,n/a,19,1,1,6,3
"org.apache.cassandra.io.util.MmappedRegions.State.floor(long)",5,1,n/a,9,0,1,6,3
"org.apache.cassandra.io.util.MmappedRegions.State.getPosition()",1,1,n/a,4,0,0,1,2
"org.apache.cassandra.io.util.MmappedRegions.State.isEmpty()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MmappedRegions.State.isValid(ChannelProxy)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.MmappedRegions.Tidier.Tidier(State)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.MmappedRegions.Tidier.name()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MmappedRegions.Tidier.tidy()",4,0,n/a,11,1,0,3,2
"org.apache.cassandra.io.util.MmappedRegions.empty(ChannelProxy)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.MmappedRegions.extend(long)",4,0,n/a,10,0,1,7,3
"org.apache.cassandra.io.util.MmappedRegions.floor(long)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.MmappedRegions.isCopy()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MmappedRegions.isEmpty()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MmappedRegions.isValid(ChannelProxy)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.MmappedRegions.map(ChannelProxy,CompressionMetadata)",2,0,n/a,6,0,2,3,2
"org.apache.cassandra.io.util.MmappedRegions.map(ChannelProxy,long)",2,0,n/a,6,0,2,3,2
"org.apache.cassandra.io.util.MmappedRegions.sharedCopy()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.io.util.MmappedRegions.updateState(CompressionMetadata)",4,1,n/a,25,3,1,15,5
"org.apache.cassandra.io.util.MmappedRegions.updateState(long)",3,2,n/a,11,1,1,6,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.Builder()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.close(Throwable)",2,0,n/a,7,0,1,1,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.complete(ChannelProxy,int,long)",4,0,n/a,6,0,3,3,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.deserializeBounds(DataInput,Version)",5,0,n/a,8,0,2,4,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.serializeBounds(DataOutput,Version)",3,0,n/a,8,0,2,4,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder.updateRegions(ChannelProxy,long)",5,1,n/a,14,1,2,8,5
"org.apache.cassandra.io.util.MmappedSegmentedFile.Cleanup.Cleanup(ChannelProxy,MmappedRegions)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.Cleanup.tidy()",4,0,n/a,11,1,0,5,2
"org.apache.cassandra.io.util.MmappedSegmentedFile.MmappedSegmentedFile(ChannelProxy,int,long,MmappedRegions)",2,1,n/a,5,0,4,2,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.MmappedSegmentedFile(MmappedSegmentedFile)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.createReader()",4,0,n/a,7,0,0,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.createReader(RateLimiter)",6,0,n/a,9,0,1,1,1
"org.apache.cassandra.io.util.MmappedSegmentedFile.sharedCopy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.NIODataInputStream.NIODataInputStream(ReadableByteChannel,ByteBuffer)",2,1,n/a,6,0,2,3,1
"org.apache.cassandra.io.util.NIODataInputStream.NIODataInputStream(ReadableByteChannel,int)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.NIODataInputStream.available()",5,0,n/a,11,1,0,5,3
"org.apache.cassandra.io.util.NIODataInputStream.close()",2,0,n/a,6,0,0,2,1
"org.apache.cassandra.io.util.NIODataInputStream.makeBuffer(int)",3,1,n/a,7,0,1,4,1
"org.apache.cassandra.io.util.NIODataInputStream.reBuffer()",5,0,n/a,8,1,0,4,2
"org.apache.cassandra.io.util.RandomAccessReader.BufferedRandomAccessFileMark.BufferedRandomAccessFileMark(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.Builder(ChannelProxy)",0,4,n/a,9,0,1,6,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.bufferSize(int)",1,0,n/a,7,0,1,4,2
"org.apache.cassandra.io.util.RandomAccessReader.Builder.bufferType(BufferType)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.build()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.buildWithChannel()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.createBuffer()",5,1,n/a,9,0,0,4,2
"org.apache.cassandra.io.util.RandomAccessReader.Builder.limiter(RateLimiter)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.overrideLength(long)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.regions(MmappedRegions)",0,2,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder.setBufferSize()",1,1,n/a,18,1,0,6,3
"org.apache.cassandra.io.util.RandomAccessReader.RandomAccessReader(Builder)",3,2,n/a,11,0,1,8,2
"org.apache.cassandra.io.util.RandomAccessReader.RandomAccessReaderWithOwnChannel.RandomAccessReaderWithOwnChannel(Builder)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.RandomAccessReaderWithOwnChannel.close()",2,6,n/a,12,1,0,3,1
"org.apache.cassandra.io.util.RandomAccessReader.allocateBuffer(int,BufferType)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.RandomAccessReader.available()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.bytesPastMark()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.io.util.RandomAccessReader.bytesPastMark(FileMark)",1,1,n/a,7,0,1,4,1
"org.apache.cassandra.io.util.RandomAccessReader.bytesRemaining()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.close()",2,6,n/a,11,0,0,4,2
"org.apache.cassandra.io.util.RandomAccessReader.current()",1,7,n/a,4,0,0,1,2
"org.apache.cassandra.io.util.RandomAccessReader.getChannel()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.getFilePointer()",1,17,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.getPath()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.getPosition()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.isEOF()",2,15,n/a,7,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.length()",0,29,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.mark()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.util.RandomAccessReader.markSupported()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.open(ChannelProxy)",2,5,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.open(File)",3,5,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.RandomAccessReader.reBuffer()",6,2,n/a,15,0,0,8,4
"org.apache.cassandra.io.util.RandomAccessReader.reBufferMmap()",9,1,n/a,13,1,0,8,3
"org.apache.cassandra.io.util.RandomAccessReader.reBufferStandard()",12,1,n/a,23,1,0,15,4
"org.apache.cassandra.io.util.RandomAccessReader.readLine()",11,4,n/a,47,3,0,22,9
"org.apache.cassandra.io.util.RandomAccessReader.releaseBuffer()",1,1,n/a,9,1,0,4,3
"org.apache.cassandra.io.util.RandomAccessReader.reset()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.reset(FileMark)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.RandomAccessReader.seek(long)",14,16,n/a,27,1,1,17,7
"org.apache.cassandra.io.util.RandomAccessReader.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.RebufferingInputStream(ByteBuffer)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.io.util.RebufferingInputStream.markSupported()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.reBuffer()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.RebufferingInputStream.read()",1,0,n/a,12,1,0,3,2
"org.apache.cassandra.io.util.RebufferingInputStream.read(byte[],int,int)",9,1,n/a,27,2,3,19,10
"org.apache.cassandra.io.util.RebufferingInputStream.readBoolean()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readByte()",5,3,n/a,11,1,0,5,3
"org.apache.cassandra.io.util.RebufferingInputStream.readChar()",3,0,n/a,8,0,0,3,2
"org.apache.cassandra.io.util.RebufferingInputStream.readDouble()",4,0,n/a,8,0,0,3,2
"org.apache.cassandra.io.util.RebufferingInputStream.readFloat()",4,0,n/a,8,0,0,3,2
"org.apache.cassandra.io.util.RebufferingInputStream.readFully(byte[])",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readFully(byte[],int,int)",2,1,n/a,7,0,3,3,2
"org.apache.cassandra.io.util.RebufferingInputStream.readInt()",3,0,n/a,8,0,0,3,2
"org.apache.cassandra.io.util.RebufferingInputStream.readLine()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readLong()",3,1,n/a,8,0,0,3,2
"org.apache.cassandra.io.util.RebufferingInputStream.readPrimitiveSlowly(int)",1,6,n/a,8,0,1,6,2
"org.apache.cassandra.io.util.RebufferingInputStream.readShort()",3,1,n/a,8,0,0,3,2
"org.apache.cassandra.io.util.RebufferingInputStream.readUTF()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedByte()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedShort()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.readUnsignedVInt()",10,1,n/a,24,0,0,16,4
"org.apache.cassandra.io.util.RebufferingInputStream.readVInt()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.reset()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.RebufferingInputStream.skipBytes(int)",7,0,n/a,20,1,1,14,4
"org.apache.cassandra.io.util.SafeMemory.MemoryTidy.MemoryTidy(long,long)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.SafeMemory.MemoryTidy.name()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SafeMemory.MemoryTidy.tidy()",1,0,n/a,6,0,0,2,2
"org.apache.cassandra.io.util.SafeMemory.SafeMemory(SafeMemory)",4,1,n/a,11,1,1,5,3
"org.apache.cassandra.io.util.SafeMemory.SafeMemory(long)",3,2,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.SafeMemory.addTo(IdentityCollection)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SafeMemory.checkBounds(long,long)",2,0,n/a,6,0,2,2,2
"org.apache.cassandra.io.util.SafeMemory.close()",1,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.util.SafeMemory.close(Throwable)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SafeMemory.copy(long)",4,2,n/a,6,0,1,3,1
"org.apache.cassandra.io.util.SafeMemory.free()",1,1,n/a,5,0,0,2,1
"org.apache.cassandra.io.util.SafeMemory.sharedCopy()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.SafeMemoryWriter(SafeMemory)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.SafeMemoryWriter.SafeMemoryWriter(long)",2,2,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.capacity()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.close()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.close(Throwable)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.currentBuffer()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.length()",2,10,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.order(ByteOrder)",1,2,n/a,6,0,1,2,1
"org.apache.cassandra.io.util.SafeMemoryWriter.reallocate(long)",9,1,n/a,15,1,1,10,2
"org.apache.cassandra.io.util.SafeMemoryWriter.setCapacity(long)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.tailBuffer(Memory)",3,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SafeMemoryWriter.tailOffset(Memory)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.bufferSize(Descriptor,IndexSummary)",5,2,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.bufferSize(StatsMetadata)",3,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.bufferSize(long)",5,1,n/a,28,1,1,9,4
"org.apache.cassandra.io.util.SegmentedFile.Builder.buildData(Descriptor,StatsMetadata)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.buildData(Descriptor,StatsMetadata,ReadableBoundary)",3,0,n/a,4,0,3,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.buildIndex(Descriptor,IndexSummary)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.buildIndex(Descriptor,IndexSummary,ReadableBoundary)",3,0,n/a,4,0,3,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.close()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SegmentedFile.Builder.close(Throwable)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.io.util.SegmentedFile.Builder.complete(ChannelProxy,int,long)",n/a,5,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.io.util.SegmentedFile.Builder.complete(String,int,long)",3,5,n/a,14,1,3,5,2
"org.apache.cassandra.io.util.SegmentedFile.Builder.deserializeBounds(DataInput,Version)",6,0,n/a,7,0,2,4,3
"org.apache.cassandra.io.util.SegmentedFile.Builder.getChannel(String)",6,1,n/a,16,1,1,6,3
"org.apache.cassandra.io.util.SegmentedFile.Builder.roundBufferSize(long)",1,2,n/a,10,0,1,4,2
"org.apache.cassandra.io.util.SegmentedFile.Builder.serializeBounds(DataOutput,Version)",4,0,n/a,6,0,2,3,2
"org.apache.cassandra.io.util.SegmentedFile.Cleanup.Cleanup(ChannelProxy)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SegmentedFile.Cleanup.name()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SegmentedFile.Cleanup.tidy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentedFile(Cleanup,ChannelProxy,int,long)",1,0,n/a,7,0,4,1,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentedFile(Cleanup,ChannelProxy,int,long,long)",1,1,n/a,8,0,5,5,1
"org.apache.cassandra.io.util.SegmentedFile.SegmentedFile(SegmentedFile)",1,0,n/a,8,0,1,5,1
"org.apache.cassandra.io.util.SegmentedFile.createReader()",4,1,n/a,7,0,0,1,1
"org.apache.cassandra.io.util.SegmentedFile.createReader(RateLimiter)",5,0,n/a,8,0,1,1,1
"org.apache.cassandra.io.util.SegmentedFile.createReader(long)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.io.util.SegmentedFile.dropPageCache(long)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SegmentedFile.getBuilder(DiskAccessMode,boolean)",3,2,n/a,9,0,2,1,3
"org.apache.cassandra.io.util.SegmentedFile.getCompressedBuilder(CompressedSequentialWriter)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SegmentedFile.path()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SegmentedFile.sharedCopy()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.io.util.SegmentedFile.toString()",3,0,n/a,6,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.BufferedFileWriterMark.BufferedFileWriterMark(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SequentialWriter.SequentialWriter(File,int,BufferType)",6,2,n/a,9,0,3,6,1
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy.doAbort(Throwable)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy.doCommit(Throwable)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy.doPreCleanup(Throwable)",4,3,n/a,14,2,1,9,4
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy.doPrepare()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.abort(Throwable)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SequentialWriter.close()",2,0,n/a,8,0,0,3,2
"org.apache.cassandra.io.util.SequentialWriter.commit(Throwable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.SequentialWriter.current()",1,7,n/a,4,0,0,1,2
"org.apache.cassandra.io.util.SequentialWriter.doFlush()",4,2,n/a,16,2,0,7,3
"org.apache.cassandra.io.util.SequentialWriter.finish()",1,9,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.finishOnClose()",0,0,n/a,5,0,0,2,1
"org.apache.cassandra.io.util.SequentialWriter.flushData()",6,1,n/a,19,1,0,7,3
"org.apache.cassandra.io.util.SequentialWriter.getLastFlushOffset()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.getOnDiskFilePointer()",1,0,n/a,13,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.getPath()",0,14,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.hasPosition()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.isOpen()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.length()",5,0,n/a,11,1,0,3,2
"org.apache.cassandra.io.util.SequentialWriter.mark()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.open(File)",1,5,n/a,7,0,1,1,1
"org.apache.cassandra.io.util.SequentialWriter.open(File,File)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.io.util.SequentialWriter.open(String,String,CompressionParams,MetadataCollector)",2,0,n/a,7,0,4,1,1
"org.apache.cassandra.io.util.SequentialWriter.openChannel(File)",10,1,n/a,28,4,1,11,5
"org.apache.cassandra.io.util.SequentialWriter.position()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.prepareToCommit()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.resetAndTruncate(FileMark)",10,1,n/a,30,1,1,12,3
"org.apache.cassandra.io.util.SequentialWriter.resetBuffer()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.io.util.SequentialWriter.setDescriptor(Descriptor)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.SequentialWriter.setPostFlushListener(Runnable)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.SequentialWriter.sync()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.io.util.SequentialWriter.syncDataOnlyInternal()",3,2,n/a,11,1,0,3,2
"org.apache.cassandra.io.util.SequentialWriter.syncInternal()",2,5,n/a,10,0,0,2,1
"org.apache.cassandra.io.util.SequentialWriter.truncate(long)",3,2,n/a,11,1,1,3,2
"org.apache.cassandra.io.util.SequentialWriter.txnProxy()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.UnbufferedDataOutputStreamPlus()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.UnbufferedDataOutputStreamPlus(WritableByteChannel)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.applyToChannel(Function<WritableByteChannel, R>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(ByteBuffer)",10,1,n/a,15,1,1,6,3
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(Memory,long,long)",2,0,n/a,5,0,3,2,2
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(byte[])",1,2,n/a,11,0,1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(byte[],int,int)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.write(int)",n/a,16,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeBoolean(boolean)",1,0,n/a,11,0,1,1,2
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeByte(int)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeBytes(String)",4,0,n/a,16,1,1,6,2
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeChar(int)",2,1,n/a,14,0,1,2,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeChars(String)",5,0,n/a,21,1,1,8,3
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeDouble(double)",2,0,n/a,12,0,1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeFloat(float)",2,0,n/a,12,0,1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeInt(int)",4,1,n/a,15,0,1,4,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeLong(long)",8,1,n/a,19,0,1,8,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeShort(int)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeUTF(String)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus.writeUTF(String,DataOutput)",11,1,n/a,88,4,2,60,17
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.WrappedDataOutputStreamPlus(OutputStream)",1,5,n/a,5,0,1,2,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.WrappedDataOutputStreamPlus(OutputStream,WritableByteChannel)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.close()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.flush()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.write(byte[],int,int)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus.write(int)",1,2,n/a,5,0,1,1,1
"org.apache.cassandra.locator.AbstractEndpointSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.locator.AbstractEndpointSnitch.getSortedListByProximity(InetAddress,Collection<InetAddress>)",2,0,n/a,12,0,2,3,1
"org.apache.cassandra.locator.AbstractEndpointSnitch.gossiperStarting()",0,0,n/a,4,0,0,0,1
"org.apache.cassandra.locator.AbstractEndpointSnitch.hasRemoteNode(List<InetAddress>)",3,3,n/a,10,1,1,5,3
"org.apache.cassandra.locator.AbstractEndpointSnitch.isWorthMergingForRangeQuery(List<InetAddress>,List<InetAddress>,List<InetAddress>)",3,0,n/a,10,0,3,2,3
"org.apache.cassandra.locator.AbstractEndpointSnitch.sortByProximity(InetAddress,List<InetAddress>)",3,1,n/a,4,2,2,2,1
"org.apache.cassandra.locator.AbstractNetworkTopologySnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",18,0,n/a,22,0,3,19,13
"org.apache.cassandra.locator.AbstractNetworkTopologySnitch.getDatacenter(InetAddress)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.locator.AbstractNetworkTopologySnitch.getRack(InetAddress)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.locator.AbstractReplicationStrategy.AbstractReplicationStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,0,n/a,11,0,4,7,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",n/a,12,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.locator.AbstractReplicationStrategy.createInternal(String,Class<? extends AbstractReplicationStrategy>,TokenMetadata,IEndpointSnitch,Map<String, String>)",6,2,n/a,25,1,5,9,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.createReplicationStrategy(String,Class<? extends AbstractReplicationStrategy>,TokenMetadata,IEndpointSnitch,Map<String, String>)",5,3,n/a,19,1,5,6,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges()",2,3,n/a,4,0,0,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getAddressRanges(TokenMetadata)",5,2,n/a,19,2,1,6,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getCachedEndpoints(Token)",4,1,n/a,17,3,1,8,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getClass(String)",5,4,n/a,10,1,1,5,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getKeyspace()",1,3,n/a,6,0,0,3,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalEndpoints(RingPosition)",11,30,n/a,22,1,1,9,2
"org.apache.cassandra.locator.AbstractReplicationStrategy.getPendingAddressRanges(TokenMetadata,Collection<Token>,InetAddress)",4,0,n/a,6,0,3,3,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getPendingAddressRanges(TokenMetadata,Token,InetAddress)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.getRangeAddresses(TokenMetadata)",5,7,n/a,13,2,1,6,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.getReplicationFactor()",n/a,15,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.AbstractReplicationStrategy.getWriteResponseHandler(Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Runnable,WriteType)",7,0,n/a,17,1,5,5,4
"org.apache.cassandra.locator.AbstractReplicationStrategy.recognizedOptions()",0,1,n/a,10,0,0,1,1
"org.apache.cassandra.locator.AbstractReplicationStrategy.validateExpectedOptions()",7,2,n/a,11,1,0,6,4
"org.apache.cassandra.locator.AbstractReplicationStrategy.validateOptions()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.AbstractReplicationStrategy.validateReplicationFactor(String)",3,0,n/a,14,2,1,4,3
"org.apache.cassandra.locator.AbstractReplicationStrategy.validateReplicationStrategy(String,Class<? extends AbstractReplicationStrategy>,TokenMetadata,IEndpointSnitch,Map<String, String>)",3,0,n/a,10,0,5,3,1
"org.apache.cassandra.locator.CloudstackSnitch.CloudstackSnitch()",4,0,n/a,12,1,0,7,2
"org.apache.cassandra.locator.CloudstackSnitch.csEndpointFromLease(File)",9,1,n/a,27,3,1,13,5
"org.apache.cassandra.locator.CloudstackSnitch.csMetadataEndpoint()",6,1,n/a,20,3,0,8,4
"org.apache.cassandra.locator.CloudstackSnitch.csQueryMetadata(String)",14,1,n/a,31,2,1,16,3
"org.apache.cassandra.locator.CloudstackSnitch.getDatacenter(InetAddress)",9,0,n/a,15,1,1,10,6
"org.apache.cassandra.locator.CloudstackSnitch.getRack(InetAddress)",9,0,n/a,15,1,1,10,6
"org.apache.cassandra.locator.DynamicEndpointSnitch.DynamicEndpointSnitch(IEndpointSnitch)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.DynamicEndpointSnitch(IEndpointSnitch,String)",7,1,n/a,6,2,2,11,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",1,0,n/a,7,0,3,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress,Map<InetAddress, Double>)",6,1,n/a,22,1,4,13,5
"org.apache.cassandra.locator.DynamicEndpointSnitch.dumpTimings(String)",6,0,n/a,12,1,1,7,3
"org.apache.cassandra.locator.DynamicEndpointSnitch.getBadnessThreshold()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getDatacenter(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getRack(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getResetInterval()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getScores()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getSeverity()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getSortedListByProximity(InetAddress,Collection<InetAddress>)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getSubsnitchClassName()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.getUpdateInterval()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.gossiperStarting()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.isWorthMergingForRangeQuery(List<InetAddress>,List<InetAddress>,List<InetAddress>)",9,0,n/a,15,0,3,10,8
"org.apache.cassandra.locator.DynamicEndpointSnitch.maxScore(List<InetAddress>)",1,3,n/a,14,1,1,8,4
"org.apache.cassandra.locator.DynamicEndpointSnitch.receiveTiming(InetAddress,long)",4,2,n/a,12,1,2,7,3
"org.apache.cassandra.locator.DynamicEndpointSnitch.registerMBean()",4,1,n/a,12,1,0,4,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.reset()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.setSeverity(double)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximity(InetAddress,List<InetAddress>)",4,1,n/a,13,1,2,4,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximityWithBadness(InetAddress,List<InetAddress>)",11,1,n/a,30,2,2,17,6
"org.apache.cassandra.locator.DynamicEndpointSnitch.sortByProximityWithScore(InetAddress,List<InetAddress>)",3,2,n/a,4,2,2,3,1
"org.apache.cassandra.locator.DynamicEndpointSnitch.unregisterMBean()",4,1,n/a,12,1,0,4,2
"org.apache.cassandra.locator.DynamicEndpointSnitch.updateScores()",17,1,n/a,34,2,0,17,7
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean.dumpTimings(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean.getBadnessThreshold()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean.getResetInterval()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean.getScores()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean.getSeverity()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean.getSubsnitchClassName()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean.getUpdateInterval()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean.setSeverity(double)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.locator.Ec2MultiRegionSnitch.Ec2MultiRegionSnitch()",7,0,n/a,10,0,0,6,1
"org.apache.cassandra.locator.Ec2MultiRegionSnitch.gossiperStarting()",5,0,n/a,7,0,0,3,1
"org.apache.cassandra.locator.Ec2Snitch.Ec2Snitch()",11,0,n/a,14,0,0,9,2
"org.apache.cassandra.locator.Ec2Snitch.awsApiCall(String)",12,1,n/a,23,1,1,13,2
"org.apache.cassandra.locator.Ec2Snitch.getDatacenter(InetAddress)",9,0,n/a,15,1,1,10,6
"org.apache.cassandra.locator.Ec2Snitch.getRack(InetAddress)",9,0,n/a,15,1,1,10,6
"org.apache.cassandra.locator.EndpointSnitchInfo.create()",5,0,n/a,12,1,0,4,2
"org.apache.cassandra.locator.EndpointSnitchInfo.getDatacenter(String)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.EndpointSnitchInfo.getRack(String)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.EndpointSnitchInfo.getSnitchName()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.EndpointSnitchInfoMBean.getDatacenter(String)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.locator.EndpointSnitchInfoMBean.getRack(String)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.locator.EndpointSnitchInfoMBean.getSnitchName()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.GoogleCloudSnitch.GoogleCloudSnitch()",9,0,n/a,14,0,0,10,1
"org.apache.cassandra.locator.GoogleCloudSnitch.gceApiCall(String)",13,1,n/a,24,1,1,14,2
"org.apache.cassandra.locator.GoogleCloudSnitch.getDatacenter(InetAddress)",9,0,n/a,15,1,1,10,6
"org.apache.cassandra.locator.GoogleCloudSnitch.getRack(InetAddress)",9,0,n/a,15,1,1,10,6
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.GossipingPropertyFileSnitch()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.GossipingPropertyFileSnitch(int)",10,1,n/a,4,3,1,12,3
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.getDatacenter(InetAddress)",10,0,n/a,26,2,1,12,7
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.getRack(InetAddress)",10,0,n/a,26,2,1,12,7
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.gossiperStarting()",6,0,n/a,8,0,0,4,1
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.reloadConfiguration(boolean)",16,2,n/a,27,2,1,19,9
"org.apache.cassandra.locator.GossipingPropertyFileSnitch.reloadGossiperState()",4,2,n/a,12,1,0,6,3
"org.apache.cassandra.locator.IEndpointSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.locator.IEndpointSnitch.getDatacenter(InetAddress)",n/a,12,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.locator.IEndpointSnitch.getRack(InetAddress)",n/a,5,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.locator.IEndpointSnitch.getSortedListByProximity(InetAddress,Collection<InetAddress>)",n/a,3,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.locator.IEndpointSnitch.gossiperStarting()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.IEndpointSnitch.isWorthMergingForRangeQuery(List<InetAddress>,List<InetAddress>,List<InetAddress>)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.locator.IEndpointSnitch.sortByProximity(InetAddress,List<InetAddress>)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.locator.ILatencySubscriber.receiveTiming(InetAddress,long)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.locator.LocalStrategy.LocalStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.locator.LocalStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.locator.LocalStrategy.getNaturalEndpoints(RingPosition)",3,0,n/a,12,0,1,3,1
"org.apache.cassandra.locator.LocalStrategy.getReplicationFactor()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.LocalStrategy.recognizedOptions()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.locator.LocalStrategy.validateOptions()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.NetworkTopologyStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",12,0,n/a,19,2,4,12,4
"org.apache.cassandra.locator.NetworkTopologyStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",66,0,n/a,71,5,2,37,14
"org.apache.cassandra.locator.NetworkTopologyStrategy.getDatacenters()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.getReplicationFactor()",1,0,n/a,7,0,0,4,2
"org.apache.cassandra.locator.NetworkTopologyStrategy.getReplicationFactor(String)",1,4,n/a,5,0,1,2,2
"org.apache.cassandra.locator.NetworkTopologyStrategy.hasSufficientReplicas(Map<String, Set<InetAddress>>,Multimap<String, InetAddress>)",2,1,n/a,7,0,2,4,3
"org.apache.cassandra.locator.NetworkTopologyStrategy.hasSufficientReplicas(String,Map<String, Set<InetAddress>>,Multimap<String, InetAddress>)",6,3,n/a,4,0,3,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.recognizedOptions()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.locator.NetworkTopologyStrategy.validateOptions()",6,0,n/a,9,1,0,4,3
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.OldNetworkTopologyStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",39,0,n/a,52,3,2,28,13
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.getReplicationFactor()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.recognizedOptions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.OldNetworkTopologyStrategy.validateOptions()",4,0,n/a,8,1,0,3,3
"org.apache.cassandra.locator.PropertyFileSnitch.PropertyFileSnitch()",6,2,n/a,4,3,0,7,2
"org.apache.cassandra.locator.PropertyFileSnitch.getDatacenter(InetAddress)",1,0,n/a,12,0,1,3,1
"org.apache.cassandra.locator.PropertyFileSnitch.getEndpointInfo(InetAddress)",2,2,n/a,13,0,1,4,2
"org.apache.cassandra.locator.PropertyFileSnitch.getRack(InetAddress)",1,0,n/a,12,0,1,3,1
"org.apache.cassandra.locator.PropertyFileSnitch.getRawEndpointInfo(InetAddress)",2,1,n/a,10,1,1,5,2
"org.apache.cassandra.locator.PropertyFileSnitch.gossiperStarting()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.locator.PropertyFileSnitch.reloadConfiguration(boolean)",43,2,n/a,65,3,1,37,14
"org.apache.cassandra.locator.RackInferringSnitch.getDatacenter(InetAddress)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.RackInferringSnitch.getRack(InetAddress)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.ReconnectableSnitchHelper(IEndpointSnitch,String,boolean)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",0,0,n/a,4,0,4,0,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onAlive(InetAddress,EndpointState)",3,0,n/a,5,0,2,2,3
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onChange(InetAddress,ApplicationState,VersionedValue)",3,0,n/a,5,0,3,2,4
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onDead(InetAddress,EndpointState)",0,0,n/a,4,0,2,0,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onJoin(InetAddress,EndpointState)",4,0,n/a,5,0,2,2,4
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onRemove(InetAddress)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.onRestart(InetAddress,EndpointState)",0,0,n/a,4,0,2,0,1
"org.apache.cassandra.locator.ReconnectableSnitchHelper.reconnect(InetAddress,InetAddress)",11,1,n/a,9,1,2,3,3
"org.apache.cassandra.locator.ReconnectableSnitchHelper.reconnect(InetAddress,VersionedValue)",3,1,n/a,11,1,2,3,2
"org.apache.cassandra.locator.SeedProvider.getSeeds()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.locator.SimpleSeedProvider.SimpleSeedProvider(Map<String, String>)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.locator.SimpleSeedProvider.getSeeds()",10,0,n/a,27,2,0,11,4
"org.apache.cassandra.locator.SimpleSnitch.compareEndpoints(InetAddress,InetAddress,InetAddress)",0,0,n/a,6,0,3,1,1
"org.apache.cassandra.locator.SimpleSnitch.getDatacenter(InetAddress)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.SimpleSnitch.getRack(InetAddress)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.locator.SimpleSnitch.sortByProximity(InetAddress,List<InetAddress>)",0,0,n/a,5,0,2,0,1
"org.apache.cassandra.locator.SimpleStrategy.SimpleStrategy(String,TokenMetadata,IEndpointSnitch,Map<String, String>)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.locator.SimpleStrategy.calculateNaturalEndpoints(Token,TokenMetadata)",11,0,n/a,17,1,2,11,5
"org.apache.cassandra.locator.SimpleStrategy.getReplicationFactor()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.locator.SimpleStrategy.recognizedOptions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.SimpleStrategy.validateOptions()",3,0,n/a,7,0,0,4,2
"org.apache.cassandra.locator.SnitchProperties.SnitchProperties()",9,0,n/a,25,1,0,12,4
"org.apache.cassandra.locator.SnitchProperties.get(String,String)",1,0,n/a,7,0,2,1,1
"org.apache.cassandra.locator.TokenMetadata.TokenMetadata()",5,3,n/a,7,0,0,1,1
"org.apache.cassandra.locator.TokenMetadata.TokenMetadata(BiMultiValMap<Token, InetAddress>,BiMap<InetAddress, UUID>,Topology,IPartitioner)",1,3,n/a,8,0,4,5,1
"org.apache.cassandra.locator.TokenMetadata.Topology.Topology()",3,1,n/a,6,0,0,3,1
"org.apache.cassandra.locator.TokenMetadata.Topology.Topology(Topology)",7,1,n/a,11,0,1,5,2
"org.apache.cassandra.locator.TokenMetadata.Topology.addEndpoint(InetAddress)",8,1,n/a,17,1,1,9,4
"org.apache.cassandra.locator.TokenMetadata.Topology.clear()",3,1,n/a,6,0,0,3,1
"org.apache.cassandra.locator.TokenMetadata.Topology.doAddEndpoint(InetAddress,String,String)",8,2,n/a,8,0,3,5,2
"org.apache.cassandra.locator.TokenMetadata.Topology.doRemoveEndpoint(InetAddress,Pair<String, String>)",3,3,n/a,5,0,2,2,1
"org.apache.cassandra.locator.TokenMetadata.Topology.getDatacenterEndpoints()",0,6,n/a,7,0,0,1,1
"org.apache.cassandra.locator.TokenMetadata.Topology.getDatacenterRacks()",0,2,n/a,7,0,0,1,1
"org.apache.cassandra.locator.TokenMetadata.Topology.removeEndpoint(InetAddress)",3,1,n/a,9,0,1,3,2
"org.apache.cassandra.locator.TokenMetadata.Topology.updateEndpoint(InetAddress)",3,1,n/a,7,0,1,4,3
"org.apache.cassandra.locator.TokenMetadata.Topology.updateEndpoint(InetAddress,IEndpointSnitch)",7,2,n/a,10,0,2,7,3
"org.apache.cassandra.locator.TokenMetadata.Topology.updateEndpoints()",3,1,n/a,8,0,0,5,3
"org.apache.cassandra.locator.TokenMetadata.addBootstrapToken(Token,InetAddress)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.locator.TokenMetadata.addBootstrapTokens(Collection<Token>,InetAddress)",13,2,n/a,26,2,2,16,8
"org.apache.cassandra.locator.TokenMetadata.addLeavingEndpoint(InetAddress)",5,4,n/a,13,1,1,5,1
"org.apache.cassandra.locator.TokenMetadata.addMovingEndpoint(Token,InetAddress)",6,1,n/a,18,1,2,5,1
"org.apache.cassandra.locator.TokenMetadata.cachedOnlyTokenMap()",4,0,n/a,22,1,0,9,3
"org.apache.cassandra.locator.TokenMetadata.calculatePendingRanges(AbstractReplicationStrategy,String)",41,0,n/a,89,3,2,35,13
"org.apache.cassandra.locator.TokenMetadata.clearUnsafe()",13,21,n/a,21,1,0,12,1
"org.apache.cassandra.locator.TokenMetadata.cloneAfterAllLeft()",6,4,n/a,21,1,0,7,2
"org.apache.cassandra.locator.TokenMetadata.cloneAfterAllSettled()",7,2,n/a,23,1,0,9,3
"org.apache.cassandra.locator.TokenMetadata.cloneOnlyTokenMap()",8,20,n/a,19,1,0,4,1
"org.apache.cassandra.locator.TokenMetadata.cloneWithNewPartitioner(IPartitioner)",1,1,n/a,8,0,1,1,1
"org.apache.cassandra.locator.TokenMetadata.decorateKey(ByteBuffer)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.locator.TokenMetadata.firstToken(ArrayList<Token>,Token)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(ArrayList,Token,boolean)",3,2,n/a,13,1,3,7,4
"org.apache.cassandra.locator.TokenMetadata.getAllEndpoints()",6,4,n/a,12,1,0,4,1
"org.apache.cassandra.locator.TokenMetadata.getBootstrapTokens()",5,18,n/a,13,1,0,4,1
"org.apache.cassandra.locator.TokenMetadata.getEndpoint(Token)",5,12,n/a,12,1,1,4,1
"org.apache.cassandra.locator.TokenMetadata.getEndpointForHostId(UUID)",6,4,n/a,13,1,1,4,1
"org.apache.cassandra.locator.TokenMetadata.getEndpointToHostIdMapForReading()",6,2,n/a,15,1,0,6,1
"org.apache.cassandra.locator.TokenMetadata.getEndpointToTokenMapForReading()",9,1,n/a,16,1,0,7,2
"org.apache.cassandra.locator.TokenMetadata.getHostId(InetAddress)",5,7,n/a,13,1,1,4,1
"org.apache.cassandra.locator.TokenMetadata.getLeavingEndpoints()",5,8,n/a,13,1,0,4,1
"org.apache.cassandra.locator.TokenMetadata.getMovingEndpoints()",5,4,n/a,16,1,0,4,1
"org.apache.cassandra.locator.TokenMetadata.getNormalAndBootstrappingTokenToEndpointMap()",9,2,n/a,19,1,0,7,1
"org.apache.cassandra.locator.TokenMetadata.getPendingRanges(String)",2,2,n/a,5,0,1,1,1
"org.apache.cassandra.locator.TokenMetadata.getPendingRanges(String,InetAddress)",7,2,n/a,12,2,2,5,3
"org.apache.cassandra.locator.TokenMetadata.getPendingRangesMM(String)",3,2,n/a,12,1,1,7,3
"org.apache.cassandra.locator.TokenMetadata.getPredecessor(Token)",5,3,n/a,8,0,1,5,3
"org.apache.cassandra.locator.TokenMetadata.getPrimaryRangeFor(Token)",4,0,n/a,5,0,1,1,1
"org.apache.cassandra.locator.TokenMetadata.getPrimaryRangesFor(Collection<Token>)",5,3,n/a,7,0,1,4,2
"org.apache.cassandra.locator.TokenMetadata.getRingVersion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.locator.TokenMetadata.getSuccessor(Token)",6,0,n/a,8,0,1,5,3
"org.apache.cassandra.locator.TokenMetadata.getToken(InetAddress)",3,10,n/a,5,0,1,1,1
"org.apache.cassandra.locator.TokenMetadata.getTokens(InetAddress)",8,10,n/a,14,1,1,6,1
"org.apache.cassandra.locator.TokenMetadata.getTopology()",1,5,n/a,11,0,0,2,1
"org.apache.cassandra.locator.TokenMetadata.getWriteEndpoints(Token,String,Collection<InetAddress>)",3,29,n/a,7,0,3,1,1
"org.apache.cassandra.locator.TokenMetadata.invalidateCachedRings()",1,7,n/a,5,0,0,2,1
"org.apache.cassandra.locator.TokenMetadata.isLeaving(InetAddress)",5,16,n/a,13,1,1,5,1
"org.apache.cassandra.locator.TokenMetadata.isMember(InetAddress)",6,28,n/a,13,1,1,5,1
"org.apache.cassandra.locator.TokenMetadata.isMoving(InetAddress)",5,3,n/a,18,2,1,8,3
"org.apache.cassandra.locator.TokenMetadata.pendingEndpointsFor(Token,String)",9,3,n/a,13,1,2,8,4
"org.apache.cassandra.locator.TokenMetadata.pendingRangeChanges(InetAddress)",8,0,n/a,19,1,1,10,4
"org.apache.cassandra.locator.TokenMetadata.printPendingRanges()",12,2,n/a,13,2,0,6,3
"org.apache.cassandra.locator.TokenMetadata.removeBootstrapTokens(Collection<Token>)",6,1,n/a,14,1,1,6,3
"org.apache.cassandra.locator.TokenMetadata.removeEndpoint(InetAddress)",11,13,n/a,19,1,1,11,1
"org.apache.cassandra.locator.TokenMetadata.removeFromMoving(InetAddress)",7,2,n/a,25,3,1,9,3
"org.apache.cassandra.locator.TokenMetadata.ringIterator(ArrayList<Token>,Token,boolean)",14,2,n/a,22,3,3,16,9
"org.apache.cassandra.locator.TokenMetadata.sortTokens()",2,3,n/a,4,0,0,1,1
"org.apache.cassandra.locator.TokenMetadata.sortedTokens()",0,17,n/a,4,0,0,1,1
"org.apache.cassandra.locator.TokenMetadata.toString()",44,0,n/a,52,3,0,30,8
"org.apache.cassandra.locator.TokenMetadata.updateHostId(UUID,InetAddress)",14,6,n/a,32,3,2,13,6
"org.apache.cassandra.locator.TokenMetadata.updateNormalToken(Token,InetAddress)",2,47,n/a,7,0,2,1,1
"org.apache.cassandra.locator.TokenMetadata.updateNormalTokens(Collection<Token>,InetAddress)",3,13,n/a,7,0,2,4,2
"org.apache.cassandra.locator.TokenMetadata.updateNormalTokens(Multimap<InetAddress, Token>)",17,5,n/a,42,4,1,22,8
"org.apache.cassandra.locator.TokenMetadata.updateTopology()",7,1,n/a,18,1,0,6,1
"org.apache.cassandra.locator.TokenMetadata.updateTopology(InetAddress)",7,1,n/a,18,1,1,7,1
"org.apache.cassandra.metrics.BufferPoolMetrics.BufferPoolMetrics()",6,1,n/a,4,2,0,3,1
"org.apache.cassandra.metrics.CASClientRequestMetrics.CASClientRequestMetrics(String)",7,0,n/a,6,0,1,4,1
"org.apache.cassandra.metrics.CASClientRequestMetrics.release()",7,0,n/a,7,0,0,4,1
"org.apache.cassandra.metrics.CQLMetrics.CQLMetrics()",19,1,n/a,4,2,0,9,1
"org.apache.cassandra.metrics.CacheMetrics.CacheMetrics(String,ICache)",41,2,n/a,4,2,2,17,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.AbstractBean.AbstractBean(ObjectName)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.AbstractBean.objectName()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.CassandraMetricsRegistry()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxCounter.JmxCounter(Counter,ObjectName)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxCounter.getCount()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxCounterMBean.getCount()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxGauge.JmxGauge(Gauge<?>,ObjectName)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxGauge.getValue()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxGaugeMBean.getValue()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.JmxHistogram(Histogram,ObjectName)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get50thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get75thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get95thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get98thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get999thPercentile()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.get99thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getCount()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getMax()",2,3,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getMean()",2,2,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getMin()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.getStdDev()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram.values()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.get50thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.get75thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.get95thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.get98thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.get999thPercentile()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.get99thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.getCount()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.getMax()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.getMean()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.getMin()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.getStdDev()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean.values()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.JmxMeter(Metered,ObjectName,TimeUnit)",3,2,n/a,7,0,3,4,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.calculateRateUnit(TimeUnit)",4,1,n/a,5,0,1,2,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getCount()",1,4,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getFifteenMinuteRate()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getFiveMinuteRate()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getMeanRate()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getOneMinuteRate()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter.getRateUnit()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeterMBean.getCount()",n/a,4,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeterMBean.getFifteenMinuteRate()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeterMBean.getFiveMinuteRate()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeterMBean.getMeanRate()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeterMBean.getOneMinuteRate()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeterMBean.getRateUnit()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.JmxTimer(Timer,ObjectName,TimeUnit,TimeUnit)",4,1,n/a,10,0,4,4,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get50thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get75thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get95thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get98thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get999thPercentile()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.get99thPercentile()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getDurationUnit()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getMax()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getMean()",2,2,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getMin()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.getStdDev()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer.values()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.get50thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.get75thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.get95thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.get98thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.get999thPercentile()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.get99thPercentile()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.getDurationUnit()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.getMax()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.getMean()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.getMin()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.getStdDev()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean.values()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricMBean.objectName()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(Class<?>,String)",1,0,n/a,10,0,2,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(Class<?>,String,String)",6,1,n/a,14,0,3,1,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(String,String,String)",1,1,n/a,11,0,3,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(String,String,String,String)",2,2,n/a,12,0,4,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.MetricName(String,String,String,String,String)",2,1,n/a,26,1,5,9,4
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.chooseGroup(String,Class<?>)",4,0,n/a,15,1,2,3,4
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.chooseName(String,Method)",2,0,n/a,15,1,2,3,3
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.chooseType(String,Class<?>)",3,0,n/a,15,1,2,3,3
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.compareTo(MetricName)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.createMBeanName(String,String,String,String)",14,1,n/a,18,1,4,11,3
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.equals(Object)",3,0,n/a,14,1,1,6,4
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getGroup()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getMBeanName()",5,8,n/a,24,2,0,8,4
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getMetricName()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getName()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getScope()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.getType()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.hasScope()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.counter(MetricName)",4,26,n/a,6,0,1,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.counter(MetricName,MetricName)",2,2,n/a,6,0,2,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.histogram(MetricName)",5,7,n/a,6,0,1,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.histogram(MetricName,MetricName)",2,2,n/a,6,0,2,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.meter(MetricName)",4,15,n/a,6,0,1,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.meter(MetricName,MetricName)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.register(MetricName,MetricName,T)",2,7,n/a,6,0,3,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.register(MetricName,T)",7,39,n/a,14,1,2,6,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.registerAlias(MetricName,MetricName)",5,5,n/a,6,0,2,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.registerMBean(Metric,ObjectName)",8,7,n/a,27,1,2,14,7
"org.apache.cassandra.metrics.CassandraMetricsRegistry.remove(MetricName)",4,37,n/a,9,1,1,4,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.remove(MetricName,MetricName)",2,10,n/a,9,1,2,4,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.removeAlias(MetricName)",2,1,n/a,7,1,1,2,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.timer(MetricName)",5,9,n/a,6,0,1,3,1
"org.apache.cassandra.metrics.CassandraMetricsRegistry.timer(MetricName,MetricName)",2,3,n/a,6,0,2,3,1
"org.apache.cassandra.metrics.ClearableHistogram.ClearableHistogram(EstimatedHistogramReservoir)",1,0,n/a,10,0,1,2,1
"org.apache.cassandra.metrics.ClearableHistogram.clear()",1,5,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.ClientMetrics.ClientMetrics()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.metrics.ClientMetrics.addCounter(String,Callable<Integer>)",5,2,n/a,10,3,2,4,2
"org.apache.cassandra.metrics.ClientRequestMetrics.ClientRequestMetrics(String)",7,0,n/a,7,0,1,4,1
"org.apache.cassandra.metrics.ClientRequestMetrics.release()",7,0,n/a,7,0,0,4,1
"org.apache.cassandra.metrics.CommitLogMetrics.CommitLogMetrics()",4,1,n/a,5,0,0,2,1
"org.apache.cassandra.metrics.CommitLogMetrics.attach(AbstractCommitLogService,CommitLogSegmentManager)",12,1,n/a,4,2,2,6,1
"org.apache.cassandra.metrics.CompactionMetrics.CompactionMetrics(ThreadPoolExecutor...)",17,1,n/a,7,3,1,13,4
"org.apache.cassandra.metrics.CompactionMetrics.beginCompaction(Holder)",2,3,n/a,6,0,1,2,1
"org.apache.cassandra.metrics.CompactionMetrics.finishCompaction(Holder)",6,3,n/a,8,0,1,4,1
"org.apache.cassandra.metrics.CompactionMetrics.getCompactions()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.metrics.ConnectionMetrics.ConnectionMetrics(InetAddress,OutboundTcpConnectionPool)",41,2,n/a,4,2,2,21,1
"org.apache.cassandra.metrics.ConnectionMetrics.release()",20,2,n/a,13,0,0,10,1
"org.apache.cassandra.metrics.DefaultNameFactory.DefaultNameFactory(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.DefaultNameFactory.DefaultNameFactory(String,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.metrics.DefaultNameFactory.createDefaultMBeanName(String,String,String)",10,1,n/a,18,1,3,11,3
"org.apache.cassandra.metrics.DefaultNameFactory.createMetricName(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.DefaultNameFactory.createMetricName(String,String,String)",2,2,n/a,4,0,3,1,1
"org.apache.cassandra.metrics.DroppedMessageMetrics.DroppedMessageMetrics(Verb)",4,1,n/a,5,0,1,2,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.EstimatedHistogramReservoir()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.EstimatedHistogramReservoir(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.HistogramSnapshot(EstimatedHistogram)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.getMax()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.getMean()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.getMin()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot.getValue(double)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.clear()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.getSnapshot()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.size()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.update(long)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter.DifferencingCounter(InetAddress)",4,1,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter.count()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter.difference()",1,0,n/a,7,0,0,4,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter.mark()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.incrCreatedHints(InetAddress)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.incrPastWindow(InetAddress)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.HintedHandoffMetrics.log()",9,1,n/a,11,1,0,6,3
"org.apache.cassandra.metrics.KeyspaceMetrics.KeyspaceMetricNameFactory.KeyspaceMetricNameFactory(Keyspace)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.KeyspaceMetrics.KeyspaceMetricNameFactory.createMetricName(String)",12,0,n/a,10,0,1,7,1
"org.apache.cassandra.metrics.KeyspaceMetrics.KeyspaceMetrics(Keyspace)",69,2,n/a,4,2,1,47,1
"org.apache.cassandra.metrics.KeyspaceMetrics.MetricValue.getValue(TableMetrics)",n/a,1,16,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.metrics.KeyspaceMetrics.createKeyspaceGauge(String,MetricValue)",6,16,n/a,9,3,2,6,2
"org.apache.cassandra.metrics.KeyspaceMetrics.release()",5,1,n/a,14,1,0,5,2
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(MetricNameFactory,MetricNameFactory,String)",10,4,n/a,16,1,3,8,2
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(MetricNameFactory,String)",1,0,n/a,10,0,2,1,1
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(MetricNameFactory,String,LatencyMetrics...)",3,0,n/a,13,0,3,2,1
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(String,String)",1,0,n/a,10,0,2,1,1
"org.apache.cassandra.metrics.LatencyMetrics.LatencyMetrics(String,String,String)",2,4,n/a,11,0,3,1,1
"org.apache.cassandra.metrics.LatencyMetrics.addNano(long)",3,2,n/a,11,1,1,4,2
"org.apache.cassandra.metrics.LatencyMetrics.release()",10,0,n/a,13,1,0,5,2
"org.apache.cassandra.metrics.MetricNameFactory.createMetricName(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.RestorableEWMA(double,long)",1,2,n/a,10,0,2,3,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.RestorableEWMA(long)",1,3,n/a,9,0,1,2,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.rate()",0,2,n/a,6,0,0,1,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.tick()",1,2,n/a,13,1,0,6,2
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA.update(long)",1,2,n/a,6,0,1,1,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableMeter()",6,1,n/a,9,0,0,4,1
"org.apache.cassandra.metrics.RestorableMeter.RestorableMeter(double,double)",6,20,n/a,11,0,2,4,1
"org.apache.cassandra.metrics.RestorableMeter.count()",1,5,n/a,7,0,0,1,1
"org.apache.cassandra.metrics.RestorableMeter.fifteenMinuteRate()",2,5,n/a,7,0,0,2,1
"org.apache.cassandra.metrics.RestorableMeter.mark()",1,1,n/a,6,0,0,1,1
"org.apache.cassandra.metrics.RestorableMeter.mark(long)",4,1,n/a,11,0,1,4,1
"org.apache.cassandra.metrics.RestorableMeter.meanRate()",3,0,n/a,13,1,0,4,2
"org.apache.cassandra.metrics.RestorableMeter.tickIfNecessary()",5,3,n/a,18,3,0,12,4
"org.apache.cassandra.metrics.RestorableMeter.twoHourRate()",2,2,n/a,7,0,0,2,1
"org.apache.cassandra.metrics.SEPMetrics.SEPMetrics(SEPExecutor,String,String)",20,1,n/a,4,2,3,11,1
"org.apache.cassandra.metrics.SEPMetrics.release()",12,1,n/a,9,0,0,6,1
"org.apache.cassandra.metrics.StreamingMetrics.StreamingMetrics(InetAddress)",7,1,n/a,6,0,1,3,1
"org.apache.cassandra.metrics.StreamingMetrics.get(InetAddress)",3,1,n/a,10,1,1,5,2
"org.apache.cassandra.metrics.TableMetrics.AllTableMetricNameFactory.AllTableMetricNameFactory(String)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.TableMetrics.AllTableMetricNameFactory.createMetricName(String)",10,0,n/a,9,0,1,6,1
"org.apache.cassandra.metrics.TableMetrics.GetHistogram.getHistogram(SSTableReader)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.metrics.TableMetrics.TableHistogram.TableHistogram(Histogram,Histogram,Histogram)",0,1,n/a,5,0,3,2,1
"org.apache.cassandra.metrics.TableMetrics.TableHistogram.update(long)",1,4,n/a,7,1,1,2,2
"org.apache.cassandra.metrics.TableMetrics.TableMetricNameFactory.TableMetricNameFactory(ColumnFamilyStore,String)",2,2,n/a,7,0,2,4,1
"org.apache.cassandra.metrics.TableMetrics.TableMetricNameFactory.createMetricName(String)",15,0,n/a,12,0,1,9,2
"org.apache.cassandra.metrics.TableMetrics.TableMetrics(ColumnFamilyStore)",229,1,n/a,4,5,1,199,48
"org.apache.cassandra.metrics.TableMetrics.TableTimer.TableTimer(Timer,Timer,Timer)",0,1,n/a,5,0,3,2,1
"org.apache.cassandra.metrics.TableMetrics.TableTimer.update(long,TimeUnit)",1,0,n/a,7,1,2,2,2
"org.apache.cassandra.metrics.TableMetrics.combineHistograms(Iterable<SSTableReader>,GetHistogram)",11,2,n/a,33,3,2,21,6
"org.apache.cassandra.metrics.TableMetrics.createTableCounter(String)",1,8,n/a,8,0,1,1,1
"org.apache.cassandra.metrics.TableMetrics.createTableCounter(String,String)",10,1,n/a,9,4,2,8,3
"org.apache.cassandra.metrics.TableMetrics.createTableGauge(String,Gauge<T>)",5,16,n/a,9,3,2,5,2
"org.apache.cassandra.metrics.TableMetrics.createTableGauge(String,Gauge<T>,Gauge<G>)",1,4,n/a,8,0,3,1,1
"org.apache.cassandra.metrics.TableMetrics.createTableGauge(String,String,Gauge<T>,Gauge<G>)",7,4,n/a,9,1,4,4,2
"org.apache.cassandra.metrics.TableMetrics.createTableHistogram(String,Histogram)",1,4,n/a,8,0,2,1,1
"org.apache.cassandra.metrics.TableMetrics.createTableHistogram(String,String,Histogram)",8,1,n/a,9,0,3,3,1
"org.apache.cassandra.metrics.TableMetrics.createTableTimer(String,String,Timer)",8,1,n/a,9,0,3,3,1
"org.apache.cassandra.metrics.TableMetrics.createTableTimer(String,Timer)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.metrics.TableMetrics.register(String,String,Metric)",5,4,n/a,11,0,3,4,1
"org.apache.cassandra.metrics.TableMetrics.release()",36,1,n/a,23,1,0,15,2
"org.apache.cassandra.metrics.TableMetrics.updateSSTableIterated(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.metrics.ThreadPoolMetricNameFactory.ThreadPoolMetricNameFactory(String,String,String)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.metrics.ThreadPoolMetricNameFactory.createMetricName(String)",15,0,n/a,11,0,1,8,1
"org.apache.cassandra.metrics.ThreadPoolMetrics.ThreadPoolMetrics(ThreadPoolExecutor,String,String)",22,1,n/a,4,2,3,11,1
"org.apache.cassandra.metrics.ThreadPoolMetrics.getJmxMetric(MBeanServerConnection,String,String,String)",9,6,n/a,28,2,4,16,6
"org.apache.cassandra.metrics.ThreadPoolMetrics.release()",12,1,n/a,9,0,0,6,1
"org.apache.cassandra.metrics.ViewWriteMetrics.ViewWriteMetrics(String)",12,0,n/a,4,2,1,6,1
"org.apache.cassandra.metrics.ViewWriteMetrics.release()",9,0,n/a,8,0,0,5,1
"org.apache.cassandra.net.AsyncOneResponse.get(long,TimeUnit)",6,2,n/a,35,5,2,14,5
"org.apache.cassandra.net.AsyncOneResponse.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.AsyncOneResponse.response(MessageIn<T>)",1,0,n/a,9,1,1,4,2
"org.apache.cassandra.net.CallbackInfo.CallbackInfo(InetAddress,IAsyncCallback,IVersionedSerializer<?>,boolean)",0,0,n/a,15,0,4,4,1
"org.apache.cassandra.net.CallbackInfo.isFailureCallback()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.CallbackInfo.shouldHint()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.CallbackInfo.toString()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.net.CompactEndpointSerializationHelper.deserialize(DataInput)",3,9,n/a,6,0,1,3,1
"org.apache.cassandra.net.CompactEndpointSerializationHelper.serialize(InetAddress,DataOutput)",3,9,n/a,6,0,2,3,1
"org.apache.cassandra.net.CompactEndpointSerializationHelper.serializedSize(InetAddress)",0,6,n/a,7,0,1,4,2
"org.apache.cassandra.net.IAsyncCallback.isLatencyForSnitch()",n/a,0,5,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.IAsyncCallback.response(MessageIn<T>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.net.IAsyncCallbackWithFailure.onFailure(InetAddress)",n/a,0,6,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.net.IMessageSink.allowIncomingMessage(MessageIn,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.net.IMessageSink.allowOutgoingMessage(MessageOut,int,InetAddress)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.net.IVerbHandler.doVerb(MessageIn<T>,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.net.IncomingStreamingConnection.IncomingStreamingConnection(int,Socket,Set<Closeable>)",2,0,n/a,7,0,3,4,1
"org.apache.cassandra.net.IncomingStreamingConnection.close()",4,1,n/a,19,2,0,5,3
"org.apache.cassandra.net.IncomingStreamingConnection.run()",8,0,n/a,23,1,0,8,3
"org.apache.cassandra.net.IncomingTcpConnection.IncomingTcpConnection(int,boolean,Socket,Set<Closeable>)",6,0,n/a,19,2,4,9,3
"org.apache.cassandra.net.IncomingTcpConnection.close()",4,1,n/a,19,2,0,5,3
"org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(DataInputPlus,int)",10,1,n/a,33,1,2,18,5
"org.apache.cassandra.net.IncomingTcpConnection.receiveMessages()",32,1,n/a,44,2,0,21,5
"org.apache.cassandra.net.IncomingTcpConnection.run()",7,0,n/a,34,1,0,8,5
"org.apache.cassandra.net.MessageDeliveryTask.MessageDeliveryTask(MessageIn,int,long,boolean)",0,0,n/a,8,0,4,5,1
"org.apache.cassandra.net.MessageDeliveryTask.handleFailure(Throwable)",5,3,n/a,9,1,1,3,2
"org.apache.cassandra.net.MessageDeliveryTask.run()",17,0,n/a,37,1,0,18,8
"org.apache.cassandra.net.MessageIn.MessageIn(InetAddress,T,Map<String, byte[]>,Verb,int)",0,1,n/a,8,0,5,5,1
"org.apache.cassandra.net.MessageIn.create(InetAddress,T,Map<String, byte[]>,Verb,int)",1,3,n/a,4,0,5,1,1
"org.apache.cassandra.net.MessageIn.doCallbackOnFailure()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessageIn.getMessageType()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessageIn.getTimeout()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessageIn.isFailureResponse()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessageIn.read(DataInputPlus,int,int)",19,4,n/a,40,2,3,27,7
"org.apache.cassandra.net.MessageIn.toString()",9,0,n/a,6,0,0,3,1
"org.apache.cassandra.net.MessageOut.MessageOut(InetAddress,Verb,T,IVersionedSerializer<T>,Map<String, byte[]>)",0,2,n/a,9,0,5,5,1
"org.apache.cassandra.net.MessageOut.MessageOut(Verb)",1,9,n/a,5,0,1,1,1
"org.apache.cassandra.net.MessageOut.MessageOut(Verb,T,IVersionedSerializer<T>)",8,28,n/a,10,0,3,1,2
"org.apache.cassandra.net.MessageOut.MessageOut(Verb,T,IVersionedSerializer<T>,Map<String, byte[]>)",2,2,n/a,4,0,4,1,1
"org.apache.cassandra.net.MessageOut.getStage()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessageOut.getTimeout()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessageOut.payloadSize(int)",2,2,n/a,27,1,1,6,5
"org.apache.cassandra.net.MessageOut.serialize(DataOutputPlus,int)",15,0,n/a,17,1,2,12,3
"org.apache.cassandra.net.MessageOut.serializedSize(int)",13,0,n/a,17,1,1,12,2
"org.apache.cassandra.net.MessageOut.toString()",7,0,n/a,6,0,0,3,1
"org.apache.cassandra.net.MessageOut.withParameter(String,byte[])",5,1,n/a,6,0,2,3,1
"org.apache.cassandra.net.MessagingService.CallbackDeterminedSerializer.deserialize(DataInputPlus,int)",1,21,n/a,4,0,2,1,1
"org.apache.cassandra.net.MessagingService.CallbackDeterminedSerializer.serialize(Object,DataOutputPlus,int)",1,22,n/a,4,0,3,1,1
"org.apache.cassandra.net.MessagingService.CallbackDeterminedSerializer.serializedSize(Object,int)",1,19,n/a,4,0,2,1,1
"org.apache.cassandra.net.MessagingService.DroppedMessages.DroppedMessages(Verb)",3,1,n/a,6,0,1,3,1
"org.apache.cassandra.net.MessagingService.MessagingService(boolean)",26,2,n/a,4,5,1,26,7
"org.apache.cassandra.net.MessagingService.SocketThread.SocketThread(ServerSocket,String)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.net.MessagingService.SocketThread.authenticate(Socket)",4,1,n/a,4,0,1,1,1
"org.apache.cassandra.net.MessagingService.SocketThread.close()",4,1,n/a,17,1,0,6,3
"org.apache.cassandra.net.MessagingService.SocketThread.run()",27,0,n/a,50,3,0,27,7
"org.apache.cassandra.net.MessagingService.addCallback(IAsyncCallback,MessageOut,InetAddress,long,boolean)",5,1,n/a,8,0,5,5,1
"org.apache.cassandra.net.MessagingService.addCallback(IAsyncCallback,MessageOut<?>,InetAddress,long,ConsistencyLevel,boolean)",5,1,n/a,22,0,6,5,3
"org.apache.cassandra.net.MessagingService.addLatency(InetAddress,long)",1,1,n/a,5,0,2,2,2
"org.apache.cassandra.net.MessagingService.addMessageSink(IMessageSink)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.net.MessagingService.areAllNodesAtLeast22()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.areAllNodesAtLeast30()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.clearCallbacksUnsafe()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.clearMessageSinks()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.convict(InetAddress)",3,1,n/a,8,0,1,2,1
"org.apache.cassandra.net.MessagingService.destroyConnectionPool(InetAddress)",3,2,n/a,8,0,1,5,2
"org.apache.cassandra.net.MessagingService.getBits(int,int,int)",0,3,n/a,4,0,3,1,1
"org.apache.cassandra.net.MessagingService.getConnection(InetAddress,MessageOut)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.net.MessagingService.getConnectionPool(InetAddress)",5,7,n/a,15,1,1,9,3
"org.apache.cassandra.net.MessagingService.getDroppedMessages()",8,0,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getDroppedMessagesLogs()",8,1,n/a,21,2,0,9,4
"org.apache.cassandra.net.MessagingService.getGossipMessageCompletedTasks()",8,0,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getGossipMessageDroppedTasks()",8,0,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getGossipMessagePendingTasks()",8,0,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getLargeMessageCompletedTasks()",8,0,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getLargeMessageDroppedTasks()",8,0,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getLargeMessagePendingTasks()",8,1,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getLargeMessagePendingTasks(InetAddress)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.net.MessagingService.getRawVersion(InetAddress)",2,2,n/a,7,0,1,4,2
"org.apache.cassandra.net.MessagingService.getRegisteredCallback(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.net.MessagingService.getRegisteredCallbackAge(int)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.net.MessagingService.getServerSockets(InetAddress)",32,1,n/a,64,2,1,30,10
"org.apache.cassandra.net.MessagingService.getSmallMessageCompletedTasks()",8,0,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getSmallMessageDroppedTasks()",8,0,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getSmallMessagePendingTasks()",8,1,n/a,7,0,0,4,2
"org.apache.cassandra.net.MessagingService.getTimeoutsPerHost()",8,0,n/a,11,1,0,6,2
"org.apache.cassandra.net.MessagingService.getTotalTimeouts()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.getVerbHandler(Verb)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.net.MessagingService.getVersion(InetAddress)",3,8,n/a,12,1,1,5,2
"org.apache.cassandra.net.MessagingService.getVersion(String)",2,8,n/a,4,0,1,1,1
"org.apache.cassandra.net.MessagingService.globalPartitioner()",1,8,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.handleIOException(IOException)",4,2,n/a,7,0,1,2,3
"org.apache.cassandra.net.MessagingService.incrementDroppedMessages(DroppedMessages,boolean)",3,0,n/a,8,0,2,4,2
"org.apache.cassandra.net.MessagingService.incrementDroppedMessages(Verb)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.net.MessagingService.incrementDroppedMessages(Verb,boolean)",3,1,n/a,5,0,2,2,1
"org.apache.cassandra.net.MessagingService.instance()",0,121,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.isListening()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.knowsVersion(InetAddress)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.net.MessagingService.listen(InetAddress)",6,5,n/a,16,1,1,6,2
"org.apache.cassandra.net.MessagingService.logDroppedMessages()",4,1,n/a,8,0,0,5,3
"org.apache.cassandra.net.MessagingService.maybeAddLatency(IAsyncCallback,InetAddress,long)",2,1,n/a,12,0,3,2,2
"org.apache.cassandra.net.MessagingService.nextId()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.receive(MessageIn,int,long,boolean)",7,0,n/a,14,0,4,10,4
"org.apache.cassandra.net.MessagingService.refreshAllNodeMinVersions()",1,2,n/a,19,2,0,10,4
"org.apache.cassandra.net.MessagingService.register(ILatencySubscriber)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.net.MessagingService.registerVerbHandlers(Verb,IVerbHandler)",2,26,n/a,12,0,2,2,1
"org.apache.cassandra.net.MessagingService.removeRegisteredCallback(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.net.MessagingService.resetVersion(InetAddress)",3,1,n/a,7,0,1,4,3
"org.apache.cassandra.net.MessagingService.sendOneWay(MessageOut,InetAddress)",2,14,n/a,4,0,2,1,1
"org.apache.cassandra.net.MessagingService.sendOneWay(MessageOut,int,InetAddress)",9,4,n/a,22,0,3,9,5
"org.apache.cassandra.net.MessagingService.sendRR(MessageOut,InetAddress)",2,2,n/a,6,0,2,3,1
"org.apache.cassandra.net.MessagingService.sendRR(MessageOut,InetAddress,IAsyncCallback)",2,4,n/a,4,0,3,1,1
"org.apache.cassandra.net.MessagingService.sendRR(MessageOut,InetAddress,IAsyncCallback,long,boolean)",3,5,n/a,17,0,5,3,2
"org.apache.cassandra.net.MessagingService.sendRR(MessageOut<?>,InetAddress,AbstractWriteResponseHandler<?>,boolean)",4,3,n/a,21,0,4,3,1
"org.apache.cassandra.net.MessagingService.sendRRWithFailure(MessageOut,InetAddress,IAsyncCallbackWithFailure)",2,4,n/a,4,0,3,1,1
"org.apache.cassandra.net.MessagingService.sendReply(MessageOut,int,InetAddress)",1,19,n/a,4,0,3,1,1
"org.apache.cassandra.net.MessagingService.setCallbackForTests(int,CallbackInfo)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.net.MessagingService.setVersion(InetAddress,int)",3,0,n/a,16,0,2,9,7
"org.apache.cassandra.net.MessagingService.shutdown()",7,5,n/a,29,2,0,9,4
"org.apache.cassandra.net.MessagingService.test()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.MessagingService.validateMagic(int)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.net.MessagingService.validatePartitioner(AbstractBounds<?>)",10,1,n/a,7,0,1,2,2
"org.apache.cassandra.net.MessagingService.validatePartitioner(Collection<? extends AbstractBounds<?>>)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.net.MessagingService.waitUntilListening()",2,1,n/a,11,1,0,3,2
"org.apache.cassandra.net.MessagingServiceMBean.getDroppedMessages()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getGossipMessageCompletedTasks()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getGossipMessageDroppedTasks()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getGossipMessagePendingTasks()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getLargeMessageCompletedTasks()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getLargeMessageDroppedTasks()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getLargeMessagePendingTasks()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getSmallMessageCompletedTasks()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getSmallMessageDroppedTasks()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getSmallMessagePendingTasks()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getTimeoutsPerHost()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getTotalTimeouts()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.net.MessagingServiceMBean.getVersion(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.net.OutboundTcpConnection.OutboundTcpConnection(OutboundTcpConnectionPool)",5,0,n/a,6,0,1,3,1
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage.QueuedMessage(MessageOut<?>,int)",2,2,n/a,7,0,2,4,1
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage.isTimedOut(long,long)",0,1,n/a,5,0,2,1,2
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage.shouldRetry()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage.timestampNanos()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnection.RetriedQueuedMessage.RetriedQueuedMessage(QueuedMessage)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.RetriedQueuedMessage.shouldRetry()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnection.closeSocket(boolean)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.net.OutboundTcpConnection.connect()",66,1,n/a,103,4,0,53,16
"org.apache.cassandra.net.OutboundTcpConnection.disconnect()",4,4,n/a,17,2,0,7,4
"org.apache.cassandra.net.OutboundTcpConnection.enqueue(MessageOut<?>,int)",5,2,n/a,13,1,2,5,3
"org.apache.cassandra.net.OutboundTcpConnection.expireMessages()",7,1,n/a,14,1,0,9,4
"org.apache.cassandra.net.OutboundTcpConnection.getCompletedMesssages()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnection.getDroppedMessages()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnection.getPendingMessages()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnection.getTargetVersion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnection.handshakeVersion(DataInputStream)",17,1,n/a,22,3,1,15,4
"org.apache.cassandra.net.OutboundTcpConnection.isLocalDC(InetAddress)",6,2,n/a,6,0,1,3,1
"org.apache.cassandra.net.OutboundTcpConnection.newCoalescingStrategy(String)",3,2,n/a,7,0,1,1,1
"org.apache.cassandra.net.OutboundTcpConnection.run()",19,0,n/a,52,4,0,26,11
"org.apache.cassandra.net.OutboundTcpConnection.shouldCompressConnection()",4,2,n/a,6,0,0,1,3
"org.apache.cassandra.net.OutboundTcpConnection.softCloseSocket()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnection.writeConnected(QueuedMessage,boolean)",27,1,n/a,58,4,2,27,12
"org.apache.cassandra.net.OutboundTcpConnection.writeHeader(DataOutput,int,boolean)",1,1,n/a,14,0,3,5,2
"org.apache.cassandra.net.OutboundTcpConnection.writeInternal(MessageOut,int,long)",6,1,n/a,12,0,3,6,2
"org.apache.cassandra.net.OutboundTcpConnectionPool.OutboundTcpConnectionPool(InetAddress)",5,0,n/a,9,0,1,6,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.close()",4,0,n/a,11,0,0,7,4
"org.apache.cassandra.net.OutboundTcpConnectionPool.endPoint()",3,4,n/a,6,0,0,3,2
"org.apache.cassandra.net.OutboundTcpConnectionPool.getConnection(MessageOut)",3,0,n/a,12,0,1,3,3
"org.apache.cassandra.net.OutboundTcpConnectionPool.getTimeouts()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.incrementTimeout()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.isEncryptedChannel(InetAddress)",14,1,n/a,22,1,1,15,8
"org.apache.cassandra.net.OutboundTcpConnectionPool.newSocket()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.newSocket(InetAddress)",18,2,n/a,18,1,1,8,5
"org.apache.cassandra.net.OutboundTcpConnectionPool.reset()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.net.OutboundTcpConnectionPool.reset(InetAddress)",4,1,n/a,15,0,1,6,2
"org.apache.cassandra.net.OutboundTcpConnectionPool.resetToNewerVersion(int)",2,0,n/a,8,1,1,3,3
"org.apache.cassandra.net.OutboundTcpConnectionPool.start()",5,0,n/a,8,0,0,5,1
"org.apache.cassandra.net.OutboundTcpConnectionPool.waitForStarted()",7,0,n/a,18,1,0,10,5
"org.apache.cassandra.net.ResponseVerbHandler.doVerb(MessageIn,int)",14,0,n/a,24,1,2,13,3
"org.apache.cassandra.net.WriteCallbackInfo.WriteCallbackInfo(InetAddress,IAsyncCallback,MessageOut,IVersionedSerializer<?>,ConsistencyLevel,boolean)",2,0,n/a,11,0,6,3,1
"org.apache.cassandra.net.WriteCallbackInfo.getMutation(Object)",1,1,n/a,6,0,1,2,3
"org.apache.cassandra.net.WriteCallbackInfo.mutation()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.net.WriteCallbackInfo.shouldHint()",1,0,n/a,4,0,0,1,2
"org.apache.cassandra.net.WriteCallbackInfo.shouldHint(boolean,MessageOut,ConsistencyLevel)",0,1,n/a,7,0,3,1,4
"org.apache.cassandra.notifications.INotificationConsumer.handleNotification(INotification,Object)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.notifications.MemtableRenewedNotification.MemtableRenewedNotification(Memtable)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.notifications.SSTableAddedNotification.SSTableAddedNotification(Iterable<SSTableReader>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.notifications.SSTableDeletingNotification.SSTableDeletingNotification(SSTableReader)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.notifications.SSTableListChangedNotification.SSTableListChangedNotification(Collection<SSTableReader>,Collection<SSTableReader>,OperationType)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.notifications.SSTableRepairStatusChanged.SSTableRepairStatusChanged(Collection<SSTableReader>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.notifications.TruncationNotification.TruncationNotification(long)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback.AnticompactionCallback(AnticompactionTask)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback.onFailure(InetAddress)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback.response(MessageIn)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionTask(UUID,InetAddress,Collection<Range<Token>>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.repair.AnticompactionTask.run()",12,1,n/a,15,1,0,6,3
"org.apache.cassandra.repair.LocalSyncTask.LocalSyncTask(RepairJobDesc,TreeResponse,TreeResponse,long)",1,0,n/a,5,0,4,2,1
"org.apache.cassandra.repair.LocalSyncTask.handleStreamEvent(StreamEvent)",3,0,n/a,25,1,1,14,7
"org.apache.cassandra.repair.LocalSyncTask.onFailure(Throwable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.repair.LocalSyncTask.onSuccess(StreamState)",4,0,n/a,7,0,1,4,1
"org.apache.cassandra.repair.LocalSyncTask.startSync(List<Range<Token>>)",14,0,n/a,27,1,1,11,3
"org.apache.cassandra.repair.NodePair.NodePair(InetAddress,InetAddress)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.repair.NodePair.NodePairSerializer.deserialize(DataInputPlus,int)",3,21,n/a,6,0,2,3,1
"org.apache.cassandra.repair.NodePair.NodePairSerializer.serialize(NodePair,DataOutputPlus,int)",2,22,n/a,5,0,3,2,1
"org.apache.cassandra.repair.NodePair.NodePairSerializer.serializedSize(NodePair,int)",1,19,n/a,4,0,2,1,1
"org.apache.cassandra.repair.NodePair.equals(Object)",4,2,n/a,8,0,1,6,5
"org.apache.cassandra.repair.NodePair.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.repair.RemoteSyncTask.RemoteSyncTask(RepairJobDesc,TreeResponse,TreeResponse)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.repair.RemoteSyncTask.startSync(List<Range<Token>>)",9,0,n/a,9,0,1,6,1
"org.apache.cassandra.repair.RemoteSyncTask.syncComplete(boolean)",4,0,n/a,11,1,1,3,2
"org.apache.cassandra.repair.RepairJob.RepairJob(RepairSession,String)",3,0,n/a,14,0,2,5,1
"org.apache.cassandra.repair.RepairJob.run()",52,0,n/a,9,5,0,44,8
"org.apache.cassandra.repair.RepairJob.sendDCAwareValidationRequest(Collection<InetAddress>)",33,1,n/a,2,4,1,29,5
"org.apache.cassandra.repair.RepairJob.sendSequentialValidationRequest(Collection<InetAddress>)",25,1,n/a,2,3,1,20,2
"org.apache.cassandra.repair.RepairJob.sendValidationRequest(Collection<InetAddress>)",15,1,n/a,22,1,1,11,2
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDesc(UUID,UUID,String,String,Collection<Range<Token>>)",0,3,n/a,8,0,5,5,1
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDescSerializer.deserialize(DataInputPlus,int)",11,21,n/a,22,1,2,16,4
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDescSerializer.serialize(RepairJobDesc,DataOutputPlus,int)",9,22,n/a,16,1,3,11,4
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDescSerializer.serializedSize(RepairJobDesc,int)",8,19,n/a,19,1,2,12,4
"org.apache.cassandra.repair.RepairJobDesc.equals(Object)",11,7,n/a,13,0,1,16,14
"org.apache.cassandra.repair.RepairJobDesc.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.repair.RepairJobDesc.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.repair.RepairMessageVerbHandler.doVerb(MessageIn<RepairMessage>,int)",66,0,n/a,5,4,2,67,17
"org.apache.cassandra.repair.RepairParallelism.RepairParallelism(String)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.repair.RepairParallelism.fromName(String)",4,1,n/a,16,0,1,5,3
"org.apache.cassandra.repair.RepairParallelism.getName()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.repair.RepairParallelism.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.repair.RepairResult.RepairResult(RepairJobDesc,List<SyncStat>)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.repair.RepairRunnable.RepairRunnable(StorageService,int,RepairOption,String)",0,1,n/a,7,0,4,4,1
"org.apache.cassandra.repair.RepairRunnable.addProgressListener(ProgressListener)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.repair.RepairRunnable.addRangeToNeighbors(List<Pair<Set<InetAddress>, ? extends Collection<Range<Token>>>>,Range<Token>,Set<InetAddress>)",8,1,n/a,15,2,3,10,3
"org.apache.cassandra.repair.RepairRunnable.createQueryThread(int,UUID)",36,1,n/a,57,4,2,41,11
"org.apache.cassandra.repair.RepairRunnable.fireErrorAndComplete(String,int,int,String)",4,3,n/a,5,0,4,2,1
"org.apache.cassandra.repair.RepairRunnable.fireProgressEvent(String,ProgressEvent)",1,10,n/a,7,1,2,2,2
"org.apache.cassandra.repair.RepairRunnable.removeProgressListener(ProgressListener)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.repair.RepairRunnable.runMayThrow()",131,1,n/a,22,4,0,99,17
"org.apache.cassandra.repair.RepairSession.RepairSession(UUID,UUID,Collection<Range<Token>>,String,RepairParallelism,Set<InetAddress>,long,String...)",1,0,n/a,32,0,8,10,1
"org.apache.cassandra.repair.RepairSession.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",0,0,n/a,1,0,4,0,1
"org.apache.cassandra.repair.RepairSession.convict(InetAddress,double)",9,2,n/a,16,0,2,9,4
"org.apache.cassandra.repair.RepairSession.forceShutdown(Throwable)",3,3,n/a,11,0,1,3,1
"org.apache.cassandra.repair.RepairSession.getId()",0,13,n/a,4,0,0,1,1
"org.apache.cassandra.repair.RepairSession.getRanges()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.repair.RepairSession.onAlive(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.repair.RepairSession.onChange(InetAddress,ApplicationState,VersionedValue)",0,0,n/a,1,0,3,0,1
"org.apache.cassandra.repair.RepairSession.onDead(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.repair.RepairSession.onJoin(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.repair.RepairSession.onRemove(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.repair.RepairSession.onRestart(InetAddress,EndpointState)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.repair.RepairSession.repairedNodes()",6,1,n/a,8,0,0,5,2
"org.apache.cassandra.repair.RepairSession.start(ListeningExecutorService)",46,1,n/a,6,2,1,34,6
"org.apache.cassandra.repair.RepairSession.syncComplete(RepairJobDesc,NodePair,boolean)",6,1,n/a,18,1,3,6,2
"org.apache.cassandra.repair.RepairSession.terminate()",2,2,n/a,6,0,0,3,1
"org.apache.cassandra.repair.RepairSession.validationComplete(RepairJobDesc,InetAddress,MerkleTrees)",9,1,n/a,27,1,3,10,3
"org.apache.cassandra.repair.RepairSession.waitForSync(Pair<RepairJobDesc, NodePair>,RemoteSyncTask)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.repair.RepairSession.waitForValidation(Pair<RepairJobDesc, InetAddress>,ValidationTask)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.repair.RepairSessionResult.RepairSessionResult(UUID,String,Collection<Range<Token>>,Collection<RepairResult>)",0,0,n/a,7,0,4,4,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback.SnapshotCallback(SnapshotTask)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback.isLatencyForSnitch()",0,0,n/a,1,0,0,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback.onFailure(InetAddress)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback.response(MessageIn)",1,0,n/a,9,0,1,1,1
"org.apache.cassandra.repair.SnapshotTask.SnapshotTask(RepairJobDesc,InetAddress)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.repair.SnapshotTask.run()",6,0,n/a,6,0,0,1,1
"org.apache.cassandra.repair.StreamingRepairTask.StreamingRepairTask(RepairJobDesc,SyncRequest,long)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.repair.StreamingRepairTask.handleStreamEvent(StreamEvent)",0,0,n/a,5,0,1,0,1
"org.apache.cassandra.repair.StreamingRepairTask.onFailure(Throwable)",4,0,n/a,7,0,1,1,1
"org.apache.cassandra.repair.StreamingRepairTask.onSuccess(StreamState)",6,0,n/a,8,0,1,2,1
"org.apache.cassandra.repair.StreamingRepairTask.run()",11,0,n/a,19,1,0,8,2
"org.apache.cassandra.repair.SyncStat.SyncStat(NodePair,long)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.repair.SyncTask.SyncTask(RepairJobDesc,TreeResponse,TreeResponse)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.repair.SyncTask.getCurrentStat()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.repair.SyncTask.run()",16,0,n/a,22,1,0,11,2
"org.apache.cassandra.repair.SyncTask.startSync(List<Range<Token>>)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.repair.SystemDistributedKeyspace.SystemDistributedKeyspace()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.compile(String,String,String)",3,2,n/a,5,0,3,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.failParentRepair(UUID,Throwable)",8,0,n/a,9,0,2,6,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.failRepairs(UUID,String,String[],Throwable)",1,0,n/a,5,0,4,2,2
"org.apache.cassandra.repair.SystemDistributedKeyspace.failedRepairJob(UUID,String,String,Throwable)",9,1,n/a,13,0,4,6,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.metadata()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.processSilent(String,String...)",5,6,n/a,16,2,2,6,3
"org.apache.cassandra.repair.SystemDistributedKeyspace.startParentRepair(UUID,String,String[],Collection<Range<Token>>)",7,0,n/a,7,0,4,3,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.startRepairs(UUID,UUID,String,String[],Collection<Range<Token>>,Iterable<InetAddress>)",14,0,n/a,27,2,6,9,4
"org.apache.cassandra.repair.SystemDistributedKeyspace.successfulParentRepair(UUID,Collection<Range<Token>>)",5,0,n/a,6,0,2,3,1
"org.apache.cassandra.repair.SystemDistributedKeyspace.successfulRepairJob(UUID,String,String)",4,0,n/a,10,0,3,3,1
"org.apache.cassandra.repair.TreeResponse.TreeResponse(InetAddress,MerkleTrees)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.repair.ValidationTask.ValidationTask(RepairJobDesc,InetAddress,int)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.repair.ValidationTask.run()",4,0,n/a,8,0,0,2,1
"org.apache.cassandra.repair.ValidationTask.treesReceived(MerkleTrees)",4,0,n/a,16,1,1,3,2
"org.apache.cassandra.repair.Validator.CountingDigest.CountingDigest(MessageDigest)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.repair.Validator.CountingDigest.engineDigest()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.repair.Validator.CountingDigest.engineReset()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.repair.Validator.CountingDigest.engineUpdate(byte)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.repair.Validator.CountingDigest.engineUpdate(byte[],int,int)",1,0,n/a,6,0,3,2,1
"org.apache.cassandra.repair.Validator.Validator(RepairJobDesc,InetAddress,int)",0,3,n/a,9,0,3,6,1
"org.apache.cassandra.repair.Validator.add(UnfilteredRowIterator)",20,1,n/a,29,1,1,12,5
"org.apache.cassandra.repair.Validator.complete()",8,1,n/a,16,1,0,7,2
"org.apache.cassandra.repair.Validator.completeTree()",4,1,n/a,11,1,0,5,2
"org.apache.cassandra.repair.Validator.fail()",5,1,n/a,11,0,0,2,1
"org.apache.cassandra.repair.Validator.findCorrectRange(Token)",4,2,n/a,8,1,1,3,3
"org.apache.cassandra.repair.Validator.prepare(ColumnFamilyStore,MerkleTrees)",21,1,n/a,40,4,2,18,7
"org.apache.cassandra.repair.Validator.rowHash(UnfilteredRowIterator)",7,1,n/a,11,0,1,4,2
"org.apache.cassandra.repair.Validator.run()",9,0,n/a,13,1,0,4,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequest(UUID,Collection<Range<Token>>)",1,2,n/a,6,0,2,3,1
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequestSerializer.deserialize(DataInputPlus,int)",7,0,n/a,9,0,2,8,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequestSerializer.serialize(AnticompactionRequest,DataOutputPlus,int)",5,0,n/a,10,1,3,5,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequestSerializer.serializedSize(AnticompactionRequest,int)",2,0,n/a,7,0,2,4,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.toString()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessage(UUID)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessageSerializer.deserialize(DataInputPlus,int)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessageSerializer.serialize(CleanupMessage,DataOutputPlus,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessageSerializer.serializedSize(CleanupMessage,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessage(UUID,List<UUID>,Collection<Range<Token>>,boolean,long,boolean)",1,1,n/a,10,0,6,7,1
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessageSerializer.deserialize(DataInputPlus,int)",14,0,n/a,16,0,2,17,3
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessageSerializer.serialize(PrepareMessage,DataOutputPlus,int)",11,0,n/a,16,1,3,11,3
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessageSerializer.serializedSize(PrepareMessage,int)",10,0,n/a,15,0,2,12,3
"org.apache.cassandra.repair.messages.PrepareMessage.toString()",0,0,n/a,12,0,0,1,1
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessage(Type,RepairJobDesc)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessageSerializer.deserialize(DataInputPlus,int)",3,21,n/a,5,0,2,2,1
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessageSerializer.serialize(RepairMessage,DataOutputPlus,int)",2,22,n/a,5,0,3,2,1
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessageSerializer.serializedSize(RepairMessage,int)",1,19,n/a,6,0,2,3,1
"org.apache.cassandra.repair.messages.RepairMessage.Type.Type(int,MessageSerializer<RepairMessage>)",0,8,n/a,5,0,2,2,1
"org.apache.cassandra.repair.messages.RepairMessage.Type.fromByte(byte)",2,1,n/a,9,1,1,4,3
"org.apache.cassandra.repair.messages.RepairMessage.createMessage()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.RepairOption(RepairParallelism,boolean,boolean,boolean,int,Collection<Range<Token>>)",5,3,n/a,17,1,6,9,5
"org.apache.cassandra.repair.messages.RepairOption.getColumnFamilies()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.getDataCenters()",0,12,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.getHosts()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.getJobThreads()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.getParallelism()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.getRanges()",0,12,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.isGlobal()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.repair.messages.RepairOption.isIncremental()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.isPrimaryRange()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.isTraced()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.RepairOption.parse(Map<String, String>,IPartitioner)",57,1,n/a,153,3,2,46,16
"org.apache.cassandra.repair.messages.RepairOption.toString()",1,0,n/a,14,0,0,1,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessage(RepairJobDesc)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessageSerializer.deserialize(DataInputPlus,int)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessageSerializer.serialize(SnapshotMessage,DataOutputPlus,int)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessageSerializer.serializedSize(SnapshotMessage,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncComplete(RepairJobDesc,InetAddress,InetAddress,boolean)",2,2,n/a,6,0,4,3,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncComplete(RepairJobDesc,NodePair,boolean)",1,1,n/a,6,0,3,3,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncCompleteSerializer.deserialize(DataInputPlus,int)",4,0,n/a,6,0,2,3,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncCompleteSerializer.serialize(SyncComplete,DataOutputPlus,int)",3,0,n/a,6,0,3,3,1
"org.apache.cassandra.repair.messages.SyncComplete.SyncCompleteSerializer.serializedSize(SyncComplete,int)",3,0,n/a,7,0,2,4,1
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequest(RepairJobDesc,InetAddress,InetAddress,InetAddress,Collection<Range<Token>>)",1,2,n/a,8,0,5,5,1
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequestSerializer.deserialize(DataInputPlus,int)",10,0,n/a,12,0,2,11,2
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequestSerializer.serialize(SyncRequest,DataOutputPlus,int)",8,0,n/a,13,1,3,8,2
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequestSerializer.serializedSize(SyncRequest,int)",5,0,n/a,9,0,2,6,2
"org.apache.cassandra.repair.messages.SyncRequest.toString()",1,0,n/a,10,0,0,1,1
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationComplete(RepairJobDesc)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationComplete(RepairJobDesc,MerkleTrees)",1,2,n/a,6,0,2,3,1
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationCompleteSerializer.deserialize(DataInputPlus,int)",5,0,n/a,11,1,2,6,2
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationCompleteSerializer.serialize(ValidationComplete,DataOutputPlus,int)",4,0,n/a,7,0,3,4,2
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationCompleteSerializer.serializedSize(ValidationComplete,int)",4,0,n/a,8,0,2,5,2
"org.apache.cassandra.repair.messages.ValidationComplete.success()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequest(RepairJobDesc,int)",1,2,n/a,5,0,2,2,1
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequestSerializer.deserialize(DataInputPlus,int)",3,0,n/a,5,0,2,2,1
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequestSerializer.serialize(ValidationRequest,DataOutputPlus,int)",2,0,n/a,5,0,3,2,1
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequestSerializer.serializedSize(ValidationRequest,int)",2,0,n/a,6,0,2,3,1
"org.apache.cassandra.repair.messages.ValidationRequest.equals(Object)",2,0,n/a,8,0,1,6,4
"org.apache.cassandra.repair.messages.ValidationRequest.hashCode()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.repair.messages.ValidationRequest.toString()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.scheduler.IRequestScheduler.queue(Thread,String,long)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.scheduler.IRequestScheduler.release()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.scheduler.NoScheduler.NoScheduler()",0,1,n/a,1,0,0,0,1
"org.apache.cassandra.scheduler.NoScheduler.NoScheduler(RequestSchedulerOptions)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.scheduler.NoScheduler.queue(Thread,String,long)",0,0,n/a,1,0,3,0,1
"org.apache.cassandra.scheduler.NoScheduler.release()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.RoundRobinScheduler(RequestSchedulerOptions)",7,0,n/a,7,3,1,10,2
"org.apache.cassandra.scheduler.RoundRobinScheduler.getTaskCount()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.getWeight(String)",2,1,n/a,6,0,1,1,3
"org.apache.cassandra.scheduler.RoundRobinScheduler.getWeightedQueue(String)",4,1,n/a,19,1,1,8,3
"org.apache.cassandra.scheduler.RoundRobinScheduler.queue(Thread,String,long)",5,0,n/a,22,2,3,8,3
"org.apache.cassandra.scheduler.RoundRobinScheduler.release()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.scheduler.RoundRobinScheduler.schedule()",7,1,n/a,21,3,0,12,4
"org.apache.cassandra.scheduler.WeightedQueue.Entry.Entry(Thread)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.scheduler.WeightedQueue.WeightedQueue(String,int)",2,0,n/a,7,0,2,4,1
"org.apache.cassandra.scheduler.WeightedQueue.poll()",3,0,n/a,8,0,0,5,2
"org.apache.cassandra.scheduler.WeightedQueue.put(Thread,long)",3,0,n/a,5,0,2,2,2
"org.apache.cassandra.scheduler.WeightedQueue.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.CQLTypeParser.parse(String,String,Types)",10,8,n/a,12,0,3,7,3
"org.apache.cassandra.schema.CQLTypeParser.parseRaw(String)",16,1,n/a,31,1,1,13,3
"org.apache.cassandra.schema.CachingParams.CachingParams(boolean,int)",0,6,n/a,5,0,2,2,1
"org.apache.cassandra.schema.CachingParams.Option.toString()",2,4,n/a,5,0,0,1,1
"org.apache.cassandra.schema.CachingParams.asMap()",5,0,n/a,7,0,0,1,1
"org.apache.cassandra.schema.CachingParams.cacheAllRows()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CachingParams.cacheKeys()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CachingParams.cacheRows()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CachingParams.equals(Object)",0,0,n/a,10,0,1,6,4
"org.apache.cassandra.schema.CachingParams.fromMap(Map<String, String>)",12,0,n/a,18,1,1,8,4
"org.apache.cassandra.schema.CachingParams.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.CachingParams.keysAsString()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.schema.CachingParams.keysFromString(String)",4,1,n/a,12,0,1,5,3
"org.apache.cassandra.schema.CachingParams.rowsPerPartitionAsString()",1,2,n/a,9,0,0,5,3
"org.apache.cassandra.schema.CachingParams.rowsPerPartitionFromString(String)",6,1,n/a,15,0,1,7,4
"org.apache.cassandra.schema.CachingParams.rowsPerPartitionToCache()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CachingParams.toString()",3,0,n/a,9,0,0,1,1
"org.apache.cassandra.schema.CompactionParams.CompactionParams(Class<? extends AbstractCompactionStrategy>,Map<String, String>,boolean)",1,2,n/a,6,0,3,3,1
"org.apache.cassandra.schema.CompactionParams.Option.toString()",2,16,n/a,5,0,0,1,1
"org.apache.cassandra.schema.CompactionParams.asMap()",5,0,n/a,6,0,0,3,1
"org.apache.cassandra.schema.CompactionParams.classFromName(String)",5,1,n/a,13,1,1,5,3
"org.apache.cassandra.schema.CompactionParams.create(Class<? extends AbstractCompactionStrategy>,Map<String, String>)",14,3,n/a,13,1,2,6,3
"org.apache.cassandra.schema.CompactionParams.defaultBloomFilterFbChance()",1,0,n/a,4,0,0,1,2
"org.apache.cassandra.schema.CompactionParams.equals(Object)",2,0,n/a,10,0,1,6,4
"org.apache.cassandra.schema.CompactionParams.fromMap(Map<String, String>)",7,0,n/a,12,1,1,5,2
"org.apache.cassandra.schema.CompactionParams.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.CompactionParams.isEnabled()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompactionParams.klass()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompactionParams.lcs(Map<String, String>)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.schema.CompactionParams.maxCompactionThreshold()",3,3,n/a,7,0,0,2,2
"org.apache.cassandra.schema.CompactionParams.minCompactionThreshold()",3,5,n/a,7,0,0,2,2
"org.apache.cassandra.schema.CompactionParams.options()",0,2,n/a,7,0,0,1,1
"org.apache.cassandra.schema.CompactionParams.scts(Map<String, String>)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.schema.CompactionParams.supportsThresholdParams(Class<? extends AbstractCompactionStrategy>)",4,1,n/a,18,1,1,4,2
"org.apache.cassandra.schema.CompactionParams.toString()",5,0,n/a,8,0,0,1,1
"org.apache.cassandra.schema.CompactionParams.validate()",44,0,n/a,65,2,0,22,15
"org.apache.cassandra.schema.CompressionParams.CompressionParams(ICompressor,Integer,Map<String, String>)",1,2,n/a,6,0,3,3,1
"org.apache.cassandra.schema.CompressionParams.CompressionParams(String,Integer,Map<String, String>)",3,2,n/a,4,0,3,1,1
"org.apache.cassandra.schema.CompressionParams.Serializer.deserialize(DataInputPlus,int)",9,21,n/a,23,1,2,15,3
"org.apache.cassandra.schema.CompressionParams.Serializer.serialize(CompressionParams,DataOutputPlus,int)",12,22,n/a,11,1,3,6,2
"org.apache.cassandra.schema.CompressionParams.Serializer.serializedSize(CompressionParams,int)",12,19,n/a,12,1,2,7,2
"org.apache.cassandra.schema.CompressionParams.asMap()",8,0,n/a,9,0,0,6,2
"org.apache.cassandra.schema.CompressionParams.chunkLength()",0,15,n/a,4,0,0,1,2
"org.apache.cassandra.schema.CompressionParams.chunkLengthInKB()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.containsSstableCompressionClass(Map<String, String>)",2,1,n/a,12,0,1,1,2
"org.apache.cassandra.schema.CompressionParams.copy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.copyOptions(Map<? extends CharSequence, ? extends CharSequence>)",9,2,n/a,9,0,1,6,4
"org.apache.cassandra.schema.CompressionParams.createCompressor(Class<?>,Map<String, String>)",28,2,n/a,57,2,2,24,14
"org.apache.cassandra.schema.CompressionParams.createCompressor(ParameterizedClass)",3,3,n/a,3,0,1,1,1
"org.apache.cassandra.schema.CompressionParams.deflate()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.deflate(Integer)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.CompressionParams.equals(Object)",9,0,n/a,18,1,1,6,4
"org.apache.cassandra.schema.CompressionParams.fromMap(Map<String, String>)",14,0,n/a,21,1,1,13,6
"org.apache.cassandra.schema.CompressionParams.getCrcCheckChance()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.getOtherOptions()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.getSstableCompressor()",0,5,n/a,8,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.hashCode()",6,0,n/a,9,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.isEnabled()",0,1,n/a,8,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.isEnabled(Map<String, String>)",2,1,n/a,13,0,1,2,2
"org.apache.cassandra.schema.CompressionParams.klass()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.lz4()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.lz4(Integer)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.schema.CompressionParams.noCompression()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.parseChunkLength(String)",4,2,n/a,23,1,1,8,4
"org.apache.cassandra.schema.CompressionParams.parseCompressorClass(String)",4,2,n/a,14,1,1,6,5
"org.apache.cassandra.schema.CompressionParams.removeChunkLength(Map<String, String>)",11,1,n/a,31,2,1,10,5
"org.apache.cassandra.schema.CompressionParams.removeEnabled(Map<String, String>)",2,1,n/a,11,0,1,2,2
"org.apache.cassandra.schema.CompressionParams.removeSstableCompressionClass(Map<String, String>)",12,1,n/a,28,1,1,11,6
"org.apache.cassandra.schema.CompressionParams.setCrcCheckChance(double)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.CompressionParams.snappy()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.schema.CompressionParams.snappy(Integer)",2,5,n/a,4,0,1,1,1
"org.apache.cassandra.schema.CompressionParams.validate()",2,1,n/a,25,3,0,11,6
"org.apache.cassandra.schema.Functions.Builder.Builder()",4,1,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Functions.Builder.add(Function)",2,2,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Functions.Builder.add(Function...)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.schema.Functions.Builder.add(Iterable<? extends Function>)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Functions.Builder.build()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Functions.Functions(Builder)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Functions.aggregatesUsingFunction(Function)",5,0,n/a,8,0,1,1,1
"org.apache.cassandra.schema.Functions.builder()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Functions.equals(Object)",1,0,n/a,5,0,1,1,3
"org.apache.cassandra.schema.Functions.find(FunctionName,List<AbstractType<?>>)",6,3,n/a,13,0,2,1,1
"org.apache.cassandra.schema.Functions.get(FunctionName)",1,1,n/a,10,0,1,1,1
"org.apache.cassandra.schema.Functions.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Functions.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Functions.none()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Functions.of(Function...)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Functions.stream()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Functions.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Functions.typeHashCode(AbstractType<?>)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Functions.typeHashCode(List<AbstractType<?>>)",1,0,n/a,7,0,1,4,2
"org.apache.cassandra.schema.Functions.typesMatch(AbstractType<?>,AbstractType<?>)",5,0,n/a,17,0,2,1,1
"org.apache.cassandra.schema.Functions.typesMatch(List<AbstractType<?>>,List<AbstractType<?>>)",6,0,n/a,9,0,2,8,4
"org.apache.cassandra.schema.Functions.udas()",3,1,n/a,7,0,0,1,1
"org.apache.cassandra.schema.Functions.udfs()",3,0,n/a,7,0,0,1,1
"org.apache.cassandra.schema.Functions.with(Function)",11,0,n/a,9,0,1,3,2
"org.apache.cassandra.schema.Functions.without(FunctionName,List<AbstractType<?>>)",8,0,n/a,9,0,2,2,1
"org.apache.cassandra.schema.IndexMetadata.IndexMetadata(String,Map<String, String>,Kind)",4,3,n/a,9,0,3,4,2
"org.apache.cassandra.schema.IndexMetadata.Serializer.deserialize(DataInputPlus,int,CFMetaData)",5,2,n/a,5,0,3,2,1
"org.apache.cassandra.schema.IndexMetadata.Serializer.serialize(IndexMetadata,DataOutputPlus,int)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.schema.IndexMetadata.Serializer.serializedSize(IndexMetadata,int)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.schema.IndexMetadata.equals(Object)",3,1,n/a,9,0,1,6,5
"org.apache.cassandra.schema.IndexMetadata.equalsWithoutName(IndexMetadata)",2,1,n/a,5,0,1,1,2
"org.apache.cassandra.schema.IndexMetadata.fromIndexTargets(CFMetaData,List<IndexTarget>,String,Kind,Map<String, String>)",8,7,n/a,12,0,5,3,1
"org.apache.cassandra.schema.IndexMetadata.fromLegacyMetadata(CFMetaData,ColumnDefinition,String,Kind,Map<String, String>)",15,0,n/a,34,2,5,15,6
"org.apache.cassandra.schema.IndexMetadata.fromSchemaMetadata(String,Kind,Map<String, String>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.schema.IndexMetadata.getDefaultIndexName(String,String)",2,0,n/a,7,0,2,3,2
"org.apache.cassandra.schema.IndexMetadata.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.IndexMetadata.isComposites()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.IndexMetadata.isCustom()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.schema.IndexMetadata.isKeys()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.IndexMetadata.isNameValid(String)",2,1,n/a,4,0,1,1,3
"org.apache.cassandra.schema.IndexMetadata.toString()",7,0,n/a,9,0,0,1,1
"org.apache.cassandra.schema.IndexMetadata.validate()",12,0,n/a,18,1,0,12,7
"org.apache.cassandra.schema.IndexMetadata.validateCustomIndexOptions(Class<? extends Index>,Map<String, String>)",16,1,n/a,32,1,2,13,8
"org.apache.cassandra.schema.Indexes.Builder.Builder()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.schema.Indexes.Builder.add(IndexMetadata)",2,1,n/a,6,0,1,3,1
"org.apache.cassandra.schema.Indexes.Builder.add(Iterable<IndexMetadata>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Indexes.Builder.build()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Indexes.Indexes(Builder)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Indexes.builder()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Indexes.equals(Object)",1,0,n/a,5,0,1,1,3
"org.apache.cassandra.schema.Indexes.get(String)",2,2,n/a,10,0,1,1,1
"org.apache.cassandra.schema.Indexes.get(UUID)",2,2,n/a,11,0,1,1,1
"org.apache.cassandra.schema.Indexes.getAvailableIndexName(String,String,String)",5,1,n/a,11,0,3,8,3
"org.apache.cassandra.schema.Indexes.has(String)",1,0,n/a,9,0,1,1,1
"org.apache.cassandra.schema.Indexes.has(UUID)",1,0,n/a,9,0,1,1,1
"org.apache.cassandra.schema.Indexes.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Indexes.isEmpty()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Indexes.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Indexes.none()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Indexes.replace(IndexMetadata)",2,0,n/a,7,0,1,1,1
"org.apache.cassandra.schema.Indexes.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Indexes.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Indexes.with(IndexMetadata)",8,1,n/a,9,0,1,3,2
"org.apache.cassandra.schema.Indexes.without(String)",8,1,n/a,8,0,1,2,1
"org.apache.cassandra.schema.KeyspaceMetadata.KeyspaceMetadata(String,KeyspaceParams,Tables,Views,Types,Functions)",0,8,n/a,9,0,6,6,1
"org.apache.cassandra.schema.KeyspaceMetadata.create(String,KeyspaceParams)",5,15,n/a,4,0,2,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.create(String,KeyspaceParams,Tables)",4,7,n/a,4,0,3,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.create(String,KeyspaceParams,Tables,Views,Types,Functions)",1,0,n/a,4,0,6,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.equals(Object)",6,0,n/a,15,0,1,6,8
"org.apache.cassandra.schema.KeyspaceMetadata.existingIndexNames(String)",4,0,n/a,9,0,1,6,5
"org.apache.cassandra.schema.KeyspaceMetadata.findIndexedTable(String)",5,1,n/a,7,0,1,4,3
"org.apache.cassandra.schema.KeyspaceMetadata.getTableOrViewNullable(String)",2,4,n/a,8,0,1,2,2
"org.apache.cassandra.schema.KeyspaceMetadata.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.tablesAndViews()",2,4,n/a,4,0,0,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.toString()",8,0,n/a,12,0,0,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.validate()",6,2,n/a,10,0,0,4,2
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(Functions)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(KeyspaceParams)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(Tables)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(Types)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.KeyspaceMetadata.withSwapped(Views)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.KeyspaceParams.KeyspaceParams(boolean,ReplicationParams)",0,5,n/a,5,0,2,2,1
"org.apache.cassandra.schema.KeyspaceParams.Option.toString()",2,6,n/a,5,0,0,1,1
"org.apache.cassandra.schema.KeyspaceParams.create(boolean,Map<String, String>)",2,9,n/a,4,0,2,1,1
"org.apache.cassandra.schema.KeyspaceParams.equals(Object)",1,0,n/a,10,0,1,6,4
"org.apache.cassandra.schema.KeyspaceParams.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.KeyspaceParams.local()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.KeyspaceParams.simple(int)",2,93,n/a,4,0,1,1,1
"org.apache.cassandra.schema.KeyspaceParams.simpleTransient(int)",2,5,n/a,4,0,1,1,1
"org.apache.cassandra.schema.KeyspaceParams.toString()",6,0,n/a,8,0,0,1,1
"org.apache.cassandra.schema.KeyspaceParams.validate(String)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Keyspaces.Builder.Builder()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.schema.Keyspaces.Builder.add(Iterable<KeyspaceMetadata>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Keyspaces.Builder.add(KeyspaceMetadata)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Keyspaces.Builder.add(KeyspaceMetadata...)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.schema.Keyspaces.Builder.build()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Keyspaces.Keyspaces(Builder)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Keyspaces.builder()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Keyspaces.diff(Keyspaces)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Keyspaces.equals(Object)",1,0,n/a,5,0,1,1,3
"org.apache.cassandra.schema.Keyspaces.filter(Predicate<KeyspaceMetadata>)",5,0,n/a,6,0,1,3,1
"org.apache.cassandra.schema.Keyspaces.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Keyspaces.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Keyspaces.none()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Keyspaces.of(KeyspaceMetadata...)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Keyspaces.stream()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Keyspaces.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Aggregate.Aggregate(long,UDAggregate)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Function.Function(long,UDFunction)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Keyspace.Keyspace(long,String,KeyspaceParams,Collection<Table>,Collection<Type>,Collection<Function>,Collection<Aggregate>)",0,1,n/a,16,0,7,7,1
"org.apache.cassandra.schema.LegacySchemaMigrator.LegacySchemaMigrator()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Table.Table(long,CFMetaData)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Type.Type(long,UserType)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.schema.LegacySchemaMigrator.addDefinitionForUpgrade(List<ColumnDefinition>,String,String,boolean,boolean,AbstractType<?>,AbstractType<?>,AbstractType<?>)",13,1,n/a,26,1,8,7,3
"org.apache.cassandra.schema.LegacySchemaMigrator.addDroppedColumns(CFMetaData,AbstractType<?>,Map<String, Long>)",13,1,n/a,26,1,3,8,4
"org.apache.cassandra.schema.LegacySchemaMigrator.checkNeedsUpgrade(UntypedResultSet,boolean,boolean)",4,1,n/a,18,1,3,8,5
"org.apache.cassandra.schema.LegacySchemaMigrator.compactionFromRow(Row)",18,1,n/a,31,1,1,13,3
"org.apache.cassandra.schema.LegacySchemaMigrator.createColumnFromColumnRow(Row,String,String,AbstractType<?>,AbstractType<?>,boolean,boolean,boolean,boolean)",12,2,n/a,28,0,9,10,7
"org.apache.cassandra.schema.LegacySchemaMigrator.createColumnsFromColumnRows(UntypedResultSet,String,String,AbstractType<?>,AbstractType<?>,boolean,boolean,boolean,boolean)",4,1,n/a,28,1,9,6,3
"org.apache.cassandra.schema.LegacySchemaMigrator.createIndexesFromColumnRows(CFMetaData,UntypedResultSet,String,String,AbstractType<?>,AbstractType<?>,boolean,boolean,boolean,boolean)",13,1,n/a,38,1,10,16,6
"org.apache.cassandra.schema.LegacySchemaMigrator.createTriggerFromTriggerRow(Row)",4,1,n/a,6,0,1,3,1
"org.apache.cassandra.schema.LegacySchemaMigrator.createTriggersFromTriggerRows(UntypedResultSet)",5,1,n/a,6,0,1,3,1
"org.apache.cassandra.schema.LegacySchemaMigrator.decodeTableMetadata(Row,UntypedResultSet,UntypedResultSet)",30,1,n/a,77,1,3,22,9
"org.apache.cassandra.schema.LegacySchemaMigrator.decodeTableParams(Row)",43,1,n/a,30,0,1,24,9
"org.apache.cassandra.schema.LegacySchemaMigrator.deserializeKind(String)",4,3,n/a,8,0,1,5,3
"org.apache.cassandra.schema.LegacySchemaMigrator.hasKind(UntypedResultSet,Kind)",2,1,n/a,7,0,2,4,3
"org.apache.cassandra.schema.LegacySchemaMigrator.hasRegularColumns(UntypedResultSet)",3,1,n/a,18,1,1,6,4
"org.apache.cassandra.schema.LegacySchemaMigrator.isEmptyCompactValueColumn(Row)",4,2,n/a,4,0,1,1,2
"org.apache.cassandra.schema.LegacySchemaMigrator.migrate()",11,1,n/a,24,1,0,11,2
"org.apache.cassandra.schema.LegacySchemaMigrator.parseType(String)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.query(String,Object...)",1,10,n/a,4,0,2,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readAggregate(Functions,String,String,List<String>)",3,1,n/a,6,0,4,3,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readAggregateMetadata(Functions,String,String,List<String>)",23,1,n/a,29,1,4,17,6
"org.apache.cassandra.schema.LegacySchemaMigrator.readAggregateTimestamp(String,String,List<String>)",4,1,n/a,9,0,3,2,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readAggregates(Functions,String)",14,1,n/a,11,0,2,6,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readFunction(String,String,List<String>)",3,1,n/a,6,0,3,3,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readFunctionMetadata(String,String,List<String>)",21,1,n/a,28,1,3,18,6
"org.apache.cassandra.schema.LegacySchemaMigrator.readFunctionTimestamp(String,String,List<String>)",4,1,n/a,9,0,3,2,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readFunctions(String)",14,1,n/a,11,0,1,6,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readKeyspace(String)",11,1,n/a,12,0,1,9,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readKeyspaceParams(String)",11,1,n/a,12,0,1,7,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readKeyspaceTimestamp(String)",4,1,n/a,7,0,1,2,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readSchema()",11,1,n/a,13,0,0,7,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTable(String,String)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTableMetadata(String,String)",8,1,n/a,16,0,2,7,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTableTimestamp(String,String)",4,1,n/a,7,0,2,2,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTables(String)",10,1,n/a,11,0,1,6,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readType(String,String)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTypeMetadata(String,String)",15,1,n/a,18,0,2,5,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTypeTimestamp(String,String)",14,1,n/a,19,1,2,8,1
"org.apache.cassandra.schema.LegacySchemaMigrator.readTypes(String)",10,1,n/a,11,0,1,6,1
"org.apache.cassandra.schema.LegacySchemaMigrator.storeKeyspaceInNewSchemaTables(Keyspace)",7,1,n/a,14,0,1,11,5
"org.apache.cassandra.schema.LegacySchemaMigrator.truncateLegacySchemaTables()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.unloadLegacySchemaTables()",5,2,n/a,9,0,0,6,2
"org.apache.cassandra.schema.ReplicationParams.ReplicationParams(Class<? extends AbstractReplicationStrategy>,Map<String, String>)",1,3,n/a,5,0,2,2,1
"org.apache.cassandra.schema.ReplicationParams.asMap()",3,0,n/a,6,0,0,3,1
"org.apache.cassandra.schema.ReplicationParams.equals(Object)",2,0,n/a,10,0,1,6,4
"org.apache.cassandra.schema.ReplicationParams.fromMap(Map<String, String>)",4,1,n/a,7,0,1,4,1
"org.apache.cassandra.schema.ReplicationParams.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.ReplicationParams.local()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.ReplicationParams.simple(int)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.ReplicationParams.toString()",8,0,n/a,9,0,0,5,2
"org.apache.cassandra.schema.ReplicationParams.validate(String)",3,0,n/a,7,0,1,3,1
"org.apache.cassandra.schema.SchemaKeyspace.SchemaKeyspace()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.schema.SchemaKeyspace.addAggregateToSchemaMutation(UDAggregate,long,Mutation)",23,2,n/a,11,0,3,2,3
"org.apache.cassandra.schema.SchemaKeyspace.addColumnToSchemaMutation(CFMetaData,ColumnDefinition,long,Mutation)",18,6,n/a,13,0,4,5,3
"org.apache.cassandra.schema.SchemaKeyspace.addDroppedColumnToSchemaMutation(CFMetaData,DroppedColumn,long,Mutation)",10,6,n/a,7,0,4,2,1
"org.apache.cassandra.schema.SchemaKeyspace.addFunctionToSchemaMutation(UDFunction,long,Mutation)",22,2,n/a,11,0,3,3,1
"org.apache.cassandra.schema.SchemaKeyspace.addIndexToSchemaMutation(CFMetaData,IndexMetadata,long,Mutation)",6,3,n/a,10,0,4,4,1
"org.apache.cassandra.schema.SchemaKeyspace.addTableParamsToSchemaMutation(TableParams,RowUpdateBuilder)",19,2,n/a,18,0,2,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addTableToSchemaMutation(CFMetaData,long,boolean,Mutation)",17,3,n/a,19,1,4,12,6
"org.apache.cassandra.schema.SchemaKeyspace.addTriggerToSchemaMutation(CFMetaData,TriggerMetadata,long,Mutation)",5,2,n/a,7,0,4,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addTypeToSchemaMutation(UserType,long,Mutation)",17,2,n/a,8,0,3,2,1
"org.apache.cassandra.schema.SchemaKeyspace.addUpdatedIndexToSchemaMutation(CFMetaData,IndexMetadata,long,Mutation)",1,1,n/a,7,0,4,1,1
"org.apache.cassandra.schema.SchemaKeyspace.addViewToSchemaMutation(ViewDefinition,long,boolean,Mutation)",15,3,n/a,20,1,4,10,4
"org.apache.cassandra.schema.SchemaKeyspace.bbToString(ByteBuffer)",2,2,n/a,11,1,1,3,2
"org.apache.cassandra.schema.SchemaKeyspace.calculateSchemaDigest()",12,0,n/a,33,4,0,12,5
"org.apache.cassandra.schema.SchemaKeyspace.compile(String,String,String)",5,10,n/a,6,0,3,1,1
"org.apache.cassandra.schema.SchemaKeyspace.convertSchemaToMutations()",3,1,n/a,7,0,0,4,2
"org.apache.cassandra.schema.SchemaKeyspace.convertSchemaToMutations(Map<DecoratedKey, Mutation>,String)",13,1,n/a,23,4,2,12,4
"org.apache.cassandra.schema.SchemaKeyspace.createColumnFromRow(Row,Types)",16,2,n/a,13,0,2,10,2
"org.apache.cassandra.schema.SchemaKeyspace.createDroppedColumnFromRow(Row)",8,1,n/a,13,0,1,5,1
"org.apache.cassandra.schema.SchemaKeyspace.createIndexMetadataFromRow(Row)",5,1,n/a,7,0,1,4,1
"org.apache.cassandra.schema.SchemaKeyspace.createTableParamsFromRow(Row)",36,3,n/a,20,0,1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.createTriggerFromRow(Row)",4,1,n/a,6,0,1,3,1
"org.apache.cassandra.schema.SchemaKeyspace.createUDAFromRow(Row,Functions,Types)",23,1,n/a,24,1,3,12,5
"org.apache.cassandra.schema.SchemaKeyspace.createUDFFromRow(Row,Types)",33,1,n/a,44,2,2,23,11
"org.apache.cassandra.schema.SchemaKeyspace.dropColumnFromSchemaMutation(CFMetaData,ColumnDefinition,long,Mutation)",2,4,n/a,5,0,4,1,1
"org.apache.cassandra.schema.SchemaKeyspace.dropIndexFromSchemaMutation(CFMetaData,IndexMetadata,long,Mutation)",1,3,n/a,7,0,4,1,1
"org.apache.cassandra.schema.SchemaKeyspace.dropTriggerFromSchemaMutation(CFMetaData,TriggerMetadata,long,Mutation)",1,2,n/a,4,0,4,1,1
"org.apache.cassandra.schema.SchemaKeyspace.dropTypeFromSchemaMutation(KeyspaceMetadata,UserType,long)",2,1,n/a,6,0,3,2,1
"org.apache.cassandra.schema.SchemaKeyspace.expandUserTypes(AbstractType<?>)",25,0,n/a,27,1,1,16,8
"org.apache.cassandra.schema.SchemaKeyspace.expandUserTypes(List<AbstractType<?>>)",4,0,n/a,6,0,1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchColumns(String,String,Types)",6,2,n/a,7,0,3,4,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchDroppedColumns(String,String)",6,2,n/a,11,1,2,6,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchFunctions(String,Types)",6,1,n/a,9,0,2,3,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchIndexes(String,String)",7,1,n/a,7,0,2,4,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspace(String)",6,2,n/a,9,0,1,6,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspaceParams(String)",8,1,n/a,8,0,1,5,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspacesOnly(Set<String>)",8,1,n/a,12,0,1,5,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchKeyspacesWithout(Set<String>)",8,1,n/a,12,1,1,7,3
"org.apache.cassandra.schema.SchemaKeyspace.fetchNonSystemKeyspaces()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchTable(String,String,Types)",24,1,n/a,32,0,3,16,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchTables(String,Types)",7,1,n/a,8,0,2,5,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchTriggers(String,String)",7,1,n/a,7,0,2,4,1
"org.apache.cassandra.schema.SchemaKeyspace.fetchTypes(String)",8,1,n/a,13,1,1,8,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchUDAs(String,Functions,Types)",6,1,n/a,8,0,3,5,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchUDFs(String,Types)",6,1,n/a,8,0,2,5,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchView(String,String,Types)",21,1,n/a,30,0,3,16,2
"org.apache.cassandra.schema.SchemaKeyspace.fetchViews(String,Types)",7,1,n/a,8,0,2,5,2
"org.apache.cassandra.schema.SchemaKeyspace.flush()",5,1,n/a,5,0,0,2,2
"org.apache.cassandra.schema.SchemaKeyspace.functionArgumentsList(AbstractFunction)",6,8,n/a,8,0,1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.getReadCommandForTableSchema(String)",3,2,n/a,9,0,1,2,1
"org.apache.cassandra.schema.SchemaKeyspace.getSchemaCFS(String)",2,3,n/a,8,0,1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.getSchemaKSKey(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.indexesDiff(Indexes,Indexes)",7,1,n/a,8,0,2,5,1
"org.apache.cassandra.schema.SchemaKeyspace.isSystemKeyspaceSchemaPartition(DecoratedKey)",3,2,n/a,4,0,1,1,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateAggregateMutation(KeyspaceMetadata,UDAggregate,long)",2,1,n/a,7,0,3,3,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateFunctionMutation(KeyspaceMetadata,UDFunction,long)",2,1,n/a,7,0,3,3,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateKeyspaceMutation(KeyspaceMetadata,long)",13,3,n/a,10,0,2,7,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateKeyspaceMutation(String,KeyspaceParams,long)",8,14,n/a,7,0,3,2,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateTableMutation(KeyspaceMetadata,CFMetaData,long)",2,2,n/a,7,0,3,3,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateTypeMutation(KeyspaceMetadata,UserType,long)",2,1,n/a,7,0,3,3,1
"org.apache.cassandra.schema.SchemaKeyspace.makeCreateViewMutation(KeyspaceMetadata,ViewDefinition,long)",2,1,n/a,7,0,3,3,1
"org.apache.cassandra.schema.SchemaKeyspace.makeDropAggregateMutation(KeyspaceMetadata,UDAggregate,long)",4,1,n/a,6,0,3,2,1
"org.apache.cassandra.schema.SchemaKeyspace.makeDropFunctionMutation(KeyspaceMetadata,UDFunction,long)",4,1,n/a,6,0,3,2,1
"org.apache.cassandra.schema.SchemaKeyspace.makeDropKeyspaceMutation(KeyspaceMetadata,long)",7,1,n/a,8,0,2,5,2
"org.apache.cassandra.schema.SchemaKeyspace.makeDropTableMutation(KeyspaceMetadata,CFMetaData,long)",8,1,n/a,13,0,3,9,4
"org.apache.cassandra.schema.SchemaKeyspace.makeDropViewMutation(KeyspaceMetadata,ViewDefinition,long)",6,1,n/a,12,0,3,8,3
"org.apache.cassandra.schema.SchemaKeyspace.makeUpdateTableMutation(KeyspaceMetadata,CFMetaData,CFMetaData,long,boolean)",49,1,n/a,57,2,5,28,15
"org.apache.cassandra.schema.SchemaKeyspace.makeUpdateViewMutation(KeyspaceMetadata,ViewDefinition,ViewDefinition,long)",26,1,n/a,29,0,4,15,6
"org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(Collection<Mutation>)",43,2,n/a,41,1,1,23,5
"org.apache.cassandra.schema.SchemaKeyspace.mergeSchemaAndAnnounceVersion(Collection<Mutation>)",2,3,n/a,13,0,1,2,1
"org.apache.cassandra.schema.SchemaKeyspace.metadata()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.SchemaKeyspace.query(String,Object...)",1,7,n/a,4,0,2,1,1
"org.apache.cassandra.schema.SchemaKeyspace.saveSystemKeyspacesSchema()",9,0,n/a,19,1,0,9,3
"org.apache.cassandra.schema.SchemaKeyspace.triggersDiff(Triggers,Triggers)",7,1,n/a,8,0,2,5,1
"org.apache.cassandra.schema.SchemaKeyspace.truncate()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.SchemaKeyspace.updateKeyspace(String,KeyspaceMetadata,KeyspaceMetadata)",87,1,n/a,43,0,3,35,7
"org.apache.cassandra.schema.SpeculativeRetryParam.SpeculativeRetryParam(Kind,double)",1,4,n/a,11,0,2,7,3
"org.apache.cassandra.schema.SpeculativeRetryParam.always()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.custom(double)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.equals(Object)",0,2,n/a,8,0,1,4,3
"org.apache.cassandra.schema.SpeculativeRetryParam.fromString(String)",28,0,n/a,36,2,1,17,9
"org.apache.cassandra.schema.SpeculativeRetryParam.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.kind()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.none()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.percentile(double)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.threshold()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.SpeculativeRetryParam.toString()",5,0,n/a,13,1,0,7,4
"org.apache.cassandra.schema.TableParams.Builder.Builder()",0,2,n/a,3,0,0,0,1
"org.apache.cassandra.schema.TableParams.Builder.bloomFilterFpChance(double)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.build()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.TableParams.Builder.caching(CachingParams)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.comment(String)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.compaction(CompactionParams)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.compression(CompressionParams)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.crcCheckChance(double)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.dcLocalReadRepairChance(double)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.defaultTimeToLive(int)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.extensions(Map<String, ByteBuffer>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.gcGraceSeconds(int)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.maxIndexInterval(int)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.memtableFlushPeriodInMs(int)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.minIndexInterval(int)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.readRepairChance(double)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Builder.speculativeRetry(SpeculativeRetryParam)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.TableParams.Option.toString()",2,21,n/a,5,0,0,1,1
"org.apache.cassandra.schema.TableParams.TableParams(Builder)",1,1,n/a,20,0,1,15,2
"org.apache.cassandra.schema.TableParams.builder()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.TableParams.builder(TableParams)",16,0,n/a,18,0,1,1,1
"org.apache.cassandra.schema.TableParams.equals(Object)",6,0,n/a,24,0,1,6,17
"org.apache.cassandra.schema.TableParams.fail(String,Object...)",2,9,n/a,4,0,2,1,1
"org.apache.cassandra.schema.TableParams.hashCode()",1,0,n/a,19,0,0,1,1
"org.apache.cassandra.schema.TableParams.toString()",32,0,n/a,21,0,0,1,1
"org.apache.cassandra.schema.TableParams.validate()",11,0,n/a,45,1,0,20,14
"org.apache.cassandra.schema.Tables.Builder.Builder()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.schema.Tables.Builder.add(CFMetaData)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Tables.Builder.add(CFMetaData...)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.schema.Tables.Builder.add(Iterable<CFMetaData>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Tables.Builder.build()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Tables.Tables(Builder)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Tables.builder()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Tables.diff(Tables)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Tables.equals(Object)",1,0,n/a,5,0,1,1,3
"org.apache.cassandra.schema.Tables.get(String)",2,2,n/a,10,0,1,1,1
"org.apache.cassandra.schema.Tables.getNullable(String)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.schema.Tables.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Tables.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Tables.none()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Tables.of(CFMetaData...)",3,6,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Tables.of(Iterable<CFMetaData>)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Tables.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Tables.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Tables.with(CFMetaData)",8,0,n/a,9,0,1,3,2
"org.apache.cassandra.schema.Tables.without(String)",8,0,n/a,9,0,1,2,1
"org.apache.cassandra.schema.TriggerMetadata.TriggerMetadata(String,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.schema.TriggerMetadata.create(String,String)",1,14,n/a,4,0,2,1,1
"org.apache.cassandra.schema.TriggerMetadata.equals(Object)",2,0,n/a,10,0,1,6,4
"org.apache.cassandra.schema.TriggerMetadata.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.TriggerMetadata.toString()",4,0,n/a,8,0,0,1,1
"org.apache.cassandra.schema.Triggers.Builder.Builder()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.schema.Triggers.Builder.add(Iterable<TriggerMetadata>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Triggers.Builder.add(TriggerMetadata)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Triggers.Builder.build()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Triggers.Triggers(Builder)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Triggers.builder()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Triggers.equals(Object)",1,0,n/a,5,0,1,1,3
"org.apache.cassandra.schema.Triggers.get(String)",2,4,n/a,10,0,1,1,1
"org.apache.cassandra.schema.Triggers.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Triggers.isEmpty()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Triggers.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Triggers.none()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Triggers.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Triggers.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Triggers.with(TriggerMetadata)",8,1,n/a,9,0,1,3,2
"org.apache.cassandra.schema.Triggers.without(String)",8,1,n/a,9,0,1,2,1
"org.apache.cassandra.schema.Types.Builder.Builder()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.schema.Types.Builder.add(Iterable<UserType>)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Types.Builder.add(UserType)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Types.Builder.add(UserType...)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.schema.Types.Builder.build()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Types.RawBuilder.RawBuilder(String)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Types.RawBuilder.RawUDT.RawUDT(String,List<String>,List<Raw>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.schema.Types.RawBuilder.RawUDT.prepare(String,Types)",12,0,n/a,12,0,2,3,1
"org.apache.cassandra.schema.Types.RawBuilder.RawUDT.referencesUserType(String)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Types.RawBuilder.add(String,List<String>,List<String>)",6,1,n/a,8,0,3,2,1
"org.apache.cassandra.schema.Types.RawBuilder.build()",16,1,n/a,33,1,0,14,7
"org.apache.cassandra.schema.Types.Types(Builder)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Types.Types(Map<ByteBuffer, UserType>)",0,0,n/a,7,0,1,1,1
"org.apache.cassandra.schema.Types.builder()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Types.diff(Types)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Types.equals(Object)",1,0,n/a,5,0,1,1,3
"org.apache.cassandra.schema.Types.get(ByteBuffer)",2,2,n/a,10,0,1,1,1
"org.apache.cassandra.schema.Types.getNullable(ByteBuffer)",1,1,n/a,11,0,1,1,1
"org.apache.cassandra.schema.Types.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Types.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Types.none()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Types.of(UserType...)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Types.rawBuilder(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Types.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Types.with(UserType)",8,0,n/a,9,0,1,3,2
"org.apache.cassandra.schema.Types.without(ByteBuffer)",8,0,n/a,9,0,1,2,1
"org.apache.cassandra.schema.UnknownIndexException.UnknownIndexException(CFMetaData,UUID)",3,0,n/a,5,0,2,2,1
"org.apache.cassandra.schema.Views.Builder.Builder()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.schema.Views.Builder.add(Iterable<ViewDefinition>)",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Views.Builder.add(ViewDefinition)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.schema.Views.Builder.build()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Views.Views(Builder)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Views.builder()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Views.diff(Views)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.schema.Views.equals(Object)",1,0,n/a,5,0,1,1,3
"org.apache.cassandra.schema.Views.get(String)",2,2,n/a,10,0,1,1,1
"org.apache.cassandra.schema.Views.getNullable(String)",1,0,n/a,11,0,1,1,1
"org.apache.cassandra.schema.Views.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Views.isEmpty()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Views.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Views.metadatas()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Views.none()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Views.replace(ViewDefinition,CFMetaData)",2,0,n/a,7,0,2,1,1
"org.apache.cassandra.schema.Views.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.schema.Views.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.schema.Views.with(ViewDefinition)",8,1,n/a,9,0,1,3,2
"org.apache.cassandra.schema.Views.without(String)",8,1,n/a,9,0,1,2,1
"org.apache.cassandra.security.SSLFactory.createSSLContext(EncryptionOptions,boolean)",31,7,n/a,51,4,2,32,7
"org.apache.cassandra.security.SSLFactory.filterCipherSuites(String[],String[])",10,4,n/a,8,0,2,5,2
"org.apache.cassandra.security.SSLFactory.getServerSocket(EncryptionOptions,InetAddress,int)",11,1,n/a,12,0,3,9,1
"org.apache.cassandra.security.SSLFactory.getSocket(EncryptionOptions)",7,0,n/a,10,0,1,6,1
"org.apache.cassandra.security.SSLFactory.getSocket(EncryptionOptions,InetAddress,int)",7,2,n/a,10,0,3,6,1
"org.apache.cassandra.security.SSLFactory.getSocket(EncryptionOptions,InetAddress,int,InetAddress,int)",7,2,n/a,10,0,5,6,1
"org.apache.cassandra.serializers.AbstractTextSerializer.AbstractTextSerializer(Charset)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.AbstractTextSerializer.deserialize(ByteBuffer)",3,0,n/a,11,1,1,3,2
"org.apache.cassandra.serializers.AbstractTextSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.AbstractTextSerializer.serialize(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.AbstractTextSerializer.toString(String)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.AsciiSerializer.AsciiSerializer()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.AsciiSerializer.validate(ByteBuffer)",5,0,n/a,10,1,1,6,4
"org.apache.cassandra.serializers.BooleanSerializer.deserialize(ByteBuffer)",3,0,n/a,7,0,1,4,2
"org.apache.cassandra.serializers.BooleanSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.BooleanSerializer.serialize(Boolean)",0,0,n/a,5,0,1,1,3
"org.apache.cassandra.serializers.BooleanSerializer.toString(Boolean)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.BooleanSerializer.validate(ByteBuffer)",5,0,n/a,5,0,1,2,3
"org.apache.cassandra.serializers.ByteSerializer.deserialize(ByteBuffer)",3,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.ByteSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.ByteSerializer.serialize(Byte)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.ByteSerializer.toString(Byte)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.ByteSerializer.validate(ByteBuffer)",4,0,n/a,5,0,1,2,2
"org.apache.cassandra.serializers.BytesSerializer.deserialize(ByteBuffer)",0,0,n/a,5,0,1,1,1
"org.apache.cassandra.serializers.BytesSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.BytesSerializer.serialize(ByteBuffer)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.serializers.BytesSerializer.toString(ByteBuffer)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.BytesSerializer.validate(ByteBuffer)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.serializers.CollectionSerializer.deserialize(ByteBuffer)",1,0,n/a,9,0,1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.deserializeForNativeProtocol(ByteBuffer,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.serializers.CollectionSerializer.getElementCount(T)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.serializers.CollectionSerializer.pack(Collection<ByteBuffer>,int,int)",6,8,n/a,11,0,3,8,3
"org.apache.cassandra.serializers.CollectionSerializer.readCollectionSize(ByteBuffer,int)",1,6,n/a,4,0,2,1,1
"org.apache.cassandra.serializers.CollectionSerializer.readValue(ByteBuffer,int)",2,9,n/a,7,0,2,4,2
"org.apache.cassandra.serializers.CollectionSerializer.serialize(T)",3,0,n/a,6,0,1,2,1
"org.apache.cassandra.serializers.CollectionSerializer.serializeValues(T)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.serializers.CollectionSerializer.sizeOfCollectionSize(int,int)",0,1,n/a,4,0,2,1,1
"org.apache.cassandra.serializers.CollectionSerializer.sizeOfValue(ByteBuffer,int)",1,1,n/a,4,0,2,1,2
"org.apache.cassandra.serializers.CollectionSerializer.validate(ByteBuffer)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.serializers.CollectionSerializer.validateForNativeProtocol(ByteBuffer,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.serializers.CollectionSerializer.writeCollectionSize(ByteBuffer,int,int)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.serializers.CollectionSerializer.writeValue(ByteBuffer,ByteBuffer,int)",5,1,n/a,10,1,3,5,2
"org.apache.cassandra.serializers.DecimalSerializer.deserialize(ByteBuffer)",7,1,n/a,12,0,1,8,3
"org.apache.cassandra.serializers.DecimalSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.DecimalSerializer.serialize(BigDecimal)",7,1,n/a,13,0,1,10,2
"org.apache.cassandra.serializers.DecimalSerializer.toString(BigDecimal)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.DecimalSerializer.validate(ByteBuffer)",5,0,n/a,6,0,1,2,3
"org.apache.cassandra.serializers.DoubleSerializer.deserialize(ByteBuffer)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.serializers.DoubleSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.DoubleSerializer.serialize(Double)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.DoubleSerializer.toString(Double)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.DoubleSerializer.validate(ByteBuffer)",5,0,n/a,5,0,1,2,3
"org.apache.cassandra.serializers.EmptySerializer.deserialize(ByteBuffer)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.EmptySerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.EmptySerializer.serialize(Void)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.EmptySerializer.toString(Void)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.EmptySerializer.validate(ByteBuffer)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.serializers.FloatSerializer.deserialize(ByteBuffer)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.serializers.FloatSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.FloatSerializer.serialize(Float)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.FloatSerializer.toString(Float)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.FloatSerializer.validate(ByteBuffer)",5,0,n/a,5,0,1,2,3
"org.apache.cassandra.serializers.InetAddressSerializer.deserialize(ByteBuffer)",4,0,n/a,13,1,1,5,3
"org.apache.cassandra.serializers.InetAddressSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.InetAddressSerializer.serialize(InetAddress)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.InetAddressSerializer.toString(InetAddress)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.InetAddressSerializer.validate(ByteBuffer)",6,0,n/a,13,1,1,5,3
"org.apache.cassandra.serializers.Int32Serializer.deserialize(ByteBuffer)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.Int32Serializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.Int32Serializer.serialize(Integer)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.Int32Serializer.toString(Integer)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.Int32Serializer.validate(ByteBuffer)",5,0,n/a,5,0,1,2,3
"org.apache.cassandra.serializers.IntegerSerializer.deserialize(ByteBuffer)",3,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.IntegerSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.IntegerSerializer.serialize(BigInteger)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.IntegerSerializer.toString(BigInteger)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.IntegerSerializer.validate(ByteBuffer)",0,0,n/a,4,0,1,0,1
"org.apache.cassandra.serializers.ListSerializer.ListSerializer(TypeSerializer<T>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.ListSerializer.deserializeForNativeProtocol(ByteBuffer,int)",11,1,n/a,30,3,2,16,5
"org.apache.cassandra.serializers.ListSerializer.getElement(ByteBuffer,int)",7,0,n/a,26,2,2,12,4
"org.apache.cassandra.serializers.ListSerializer.getElementCount(List<T>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.ListSerializer.getInstance(TypeSerializer<T>)",3,1,n/a,10,1,1,5,2
"org.apache.cassandra.serializers.ListSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.ListSerializer.serializeValues(List<T>)",4,0,n/a,7,0,1,4,2
"org.apache.cassandra.serializers.ListSerializer.toString(List<T>)",7,0,n/a,16,1,1,10,3
"org.apache.cassandra.serializers.ListSerializer.validateForNativeProtocol(ByteBuffer,int)",7,0,n/a,16,1,2,10,4
"org.apache.cassandra.serializers.LongSerializer.deserialize(ByteBuffer)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.LongSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.LongSerializer.serialize(Long)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.LongSerializer.toString(Long)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.LongSerializer.validate(ByteBuffer)",5,0,n/a,5,0,1,2,3
"org.apache.cassandra.serializers.MapSerializer.MapSerializer(TypeSerializer<K>,TypeSerializer<V>,Comparator<ByteBuffer>)",1,1,n/a,6,0,3,3,1
"org.apache.cassandra.serializers.MapSerializer.deserializeForNativeProtocol(ByteBuffer,int)",13,1,n/a,24,2,2,16,4
"org.apache.cassandra.serializers.MapSerializer.getElementCount(Map<K, V>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.MapSerializer.getInstance(TypeSerializer<K>,TypeSerializer<V>,Comparator<ByteBuffer>)",4,1,n/a,11,1,3,6,2
"org.apache.cassandra.serializers.MapSerializer.getSerializedValue(ByteBuffer,ByteBuffer,AbstractType)",6,0,n/a,31,2,3,15,5
"org.apache.cassandra.serializers.MapSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.MapSerializer.serializeValues(Map<K, V>)",14,0,n/a,14,1,1,9,3
"org.apache.cassandra.serializers.MapSerializer.toString(Map<K, V>)",13,0,n/a,18,1,1,12,3
"org.apache.cassandra.serializers.MapSerializer.validateForNativeProtocol(ByteBuffer,int)",9,0,n/a,19,2,2,11,4
"org.apache.cassandra.serializers.MarshalException.MarshalException(String)",1,59,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.MarshalException.MarshalException(String,Throwable)",1,14,n/a,4,0,2,1,1
"org.apache.cassandra.serializers.SetSerializer.SetSerializer(TypeSerializer<T>,Comparator<ByteBuffer>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.serializers.SetSerializer.deserializeForNativeProtocol(ByteBuffer,int)",10,0,n/a,22,2,2,14,4
"org.apache.cassandra.serializers.SetSerializer.getElementCount(Set<T>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.SetSerializer.getInstance(TypeSerializer<T>,Comparator<ByteBuffer>)",3,2,n/a,10,1,2,5,2
"org.apache.cassandra.serializers.SetSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.SetSerializer.serializeValues(Set<T>)",5,0,n/a,8,0,1,5,2
"org.apache.cassandra.serializers.SetSerializer.toString(Set<T>)",7,0,n/a,20,2,1,10,3
"org.apache.cassandra.serializers.SetSerializer.validateForNativeProtocol(ByteBuffer,int)",7,0,n/a,16,1,2,10,4
"org.apache.cassandra.serializers.ShortSerializer.deserialize(ByteBuffer)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.ShortSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.ShortSerializer.serialize(Short)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.ShortSerializer.toString(Short)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.ShortSerializer.validate(ByteBuffer)",4,0,n/a,5,0,1,2,2
"org.apache.cassandra.serializers.SimpleDateSerializer.dateStringToDays(String)",19,4,n/a,36,2,1,18,9
"org.apache.cassandra.serializers.SimpleDateSerializer.dayToTimeInMillis(int)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.serializers.SimpleDateSerializer.deserialize(ByteBuffer)",2,31,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.SimpleDateSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.SimpleDateSerializer.serialize(Integer)",1,9,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.SimpleDateSerializer.timeInMillisToDay(long)",1,2,n/a,6,0,1,3,1
"org.apache.cassandra.serializers.SimpleDateSerializer.toString(Integer)",3,1,n/a,6,0,1,3,2
"org.apache.cassandra.serializers.SimpleDateSerializer.validate(ByteBuffer)",4,0,n/a,5,0,1,2,2
"org.apache.cassandra.serializers.TimeSerializer.deserialize(ByteBuffer)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.TimeSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.TimeSerializer.leftPadZeros(int,int,StringBuilder)",3,6,n/a,9,1,3,6,3
"org.apache.cassandra.serializers.TimeSerializer.parseTimeStrictly(String)",33,1,n/a,57,2,1,43,18
"org.apache.cassandra.serializers.TimeSerializer.serialize(Long)",1,12,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.TimeSerializer.timeStringToLong(String)",10,4,n/a,27,2,1,10,6
"org.apache.cassandra.serializers.TimeSerializer.toString(Long)",11,1,n/a,35,0,1,32,2
"org.apache.cassandra.serializers.TimeSerializer.validate(ByteBuffer)",4,0,n/a,5,0,1,2,2
"org.apache.cassandra.serializers.TimeUUIDSerializer.validate(ByteBuffer)",6,0,n/a,14,1,1,6,3
"org.apache.cassandra.serializers.TimestampSerializer.dateStringToTimestamp(String)",11,3,n/a,26,2,1,9,5
"org.apache.cassandra.serializers.TimestampSerializer.deserialize(ByteBuffer)",3,2,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.TimestampSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.TimestampSerializer.serialize(Date)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.TimestampSerializer.toString(Date)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.TimestampSerializer.validate(ByteBuffer)",5,0,n/a,5,0,1,2,3
"org.apache.cassandra.serializers.TypeSerializer.deserialize(ByteBuffer)",n/a,20,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.serializers.TypeSerializer.getType()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.serializers.TypeSerializer.serialize(T)",n/a,11,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.serializers.TypeSerializer.toString(T)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.serializers.TypeSerializer.validate(ByteBuffer)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.serializers.UTF8Serializer.UTF8Serializer()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.UTF8Serializer.UTF8Validator.validate(ByteBuffer)",3,1,n/a,103,3,1,68,28
"org.apache.cassandra.serializers.UTF8Serializer.validate(ByteBuffer)",2,0,n/a,5,0,1,2,2
"org.apache.cassandra.serializers.UUIDSerializer.deserialize(ByteBuffer)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.UUIDSerializer.getType()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.serializers.UUIDSerializer.serialize(UUID)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.UUIDSerializer.toString(UUID)",1,0,n/a,4,0,1,1,2
"org.apache.cassandra.serializers.UUIDSerializer.validate(ByteBuffer)",5,0,n/a,6,0,1,2,3
"org.apache.cassandra.service.AbstractReadExecutor.AbstractReadExecutor(Keyspace,ReadCommand,ConsistencyLevel,List<InetAddress>)",8,3,n/a,15,0,4,8,2
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor.AlwaysSpeculatingReadExecutor(Keyspace,ColumnFamilyStore,ReadCommand,ConsistencyLevel,List<InetAddress>)",1,2,n/a,9,0,5,2,1
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor.executeAsync()",8,0,n/a,8,0,0,4,3
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor.getContactedReplicas()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor.maybeTryAdditionalReplicas()",0,0,n/a,4,0,0,0,1
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor.NeverSpeculatingReadExecutor(Keyspace,ReadCommand,ConsistencyLevel,List<InetAddress>)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor.executeAsync()",6,0,n/a,6,0,0,3,2
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor.getContactedReplicas()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor.maybeTryAdditionalReplicas()",0,0,n/a,4,0,0,0,1
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor.SpeculatingReadExecutor(Keyspace,ColumnFamilyStore,ReadCommand,ConsistencyLevel,List<InetAddress>)",1,1,n/a,9,0,5,2,1
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor.executeAsync()",15,0,n/a,23,1,0,8,4
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor.getContactedReplicas()",2,0,n/a,6,0,0,1,2
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor.maybeTryAdditionalReplicas()",15,0,n/a,21,1,0,14,5
"org.apache.cassandra.service.AbstractReadExecutor.executeAsync()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.AbstractReadExecutor.get()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.service.AbstractReadExecutor.getContactedReplicas()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.AbstractReadExecutor.getReadExecutor(SinglePartitionReadCommand,ConsistencyLevel)",27,0,n/a,49,3,2,24,10
"org.apache.cassandra.service.AbstractReadExecutor.makeDataRequests(Iterable<InetAddress>)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.makeDigestRequests(Iterable<InetAddress>)",3,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.AbstractReadExecutor.makeRequests(ReadCommand,Iterable<InetAddress>)",15,2,n/a,25,2,2,15,9
"org.apache.cassandra.service.AbstractReadExecutor.maybeTryAdditionalReplicas()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.AbstractWriteResponseHandler.AbstractWriteResponseHandler(Keyspace,Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Runnable,WriteType)",1,0,n/a,18,0,6,7,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.ackCount()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.AbstractWriteResponseHandler.assureSufficientLiveNodes()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.get()",14,0,n/a,31,1,0,14,6
"org.apache.cassandra.service.AbstractWriteResponseHandler.onFailure(InetAddress)",6,0,n/a,10,0,1,4,3
"org.apache.cassandra.service.AbstractWriteResponseHandler.response(MessageIn<T>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.AbstractWriteResponseHandler.signal()",2,1,n/a,6,0,0,3,2
"org.apache.cassandra.service.AbstractWriteResponseHandler.totalBlockFor()",2,4,n/a,9,0,0,1,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.totalEndpoints()",2,2,n/a,7,0,0,1,1
"org.apache.cassandra.service.AbstractWriteResponseHandler.waitingFor(InetAddress)",0,1,n/a,7,0,1,1,1
"org.apache.cassandra.service.ActiveRepairService.ActiveRepairService(IFailureDetector,Gossiper)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.ParentRepairSession(List<ColumnFamilyStore>,Collection<Range<Token>>,boolean,long,boolean)",1,1,n/a,9,0,5,6,2
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.addSSTables(UUID,Set<SSTableReader>)",4,2,n/a,8,0,2,5,2
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.getAndReferenceSSTables(UUID)",14,1,n/a,24,2,1,12,4
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.getRepairedAt()",0,2,n/a,6,0,0,3,2
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession.toString()",0,0,n/a,10,0,0,1,1
"org.apache.cassandra.service.ActiveRepairService.currentlyRepairing(UUID,UUID)",7,2,n/a,11,1,2,6,4
"org.apache.cassandra.service.ActiveRepairService.doAntiCompaction(UUID,Collection<Range<Token>>)",19,2,n/a,5,2,2,17,4
"org.apache.cassandra.service.ActiveRepairService.finishParentSession(UUID,Set<InetAddress>,Collection<Range<Token>>)",8,1,n/a,20,1,3,7,2
"org.apache.cassandra.service.ActiveRepairService.getNeighbors(String,Range<Token>,Collection<String>,Collection<String>)",37,1,n/a,72,3,4,38,18
"org.apache.cassandra.service.ActiveRepairService.getParentRepairSession(UUID)",1,8,n/a,4,0,1,1,1
"org.apache.cassandra.service.ActiveRepairService.handleMessage(InetAddress,RepairMessage)",3,1,n/a,21,1,2,15,5
"org.apache.cassandra.service.ActiveRepairService.prepareForRepair(UUID,Set<InetAddress>,RepairOption,List<ColumnFamilyStore>)",35,1,n/a,6,2,4,26,5
"org.apache.cassandra.service.ActiveRepairService.registerParentRepairSession(UUID,List<ColumnFamilyStore>,Collection<Range<Token>>,boolean,long,boolean)",2,4,n/a,4,0,6,1,1
"org.apache.cassandra.service.ActiveRepairService.removeParentRepairSession(UUID)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.ActiveRepairService.submitRepairSession(UUID,Collection<Range<Token>>,String,RepairParallelism,Set<InetAddress>,long,ListeningExecutorService,String...)",15,1,n/a,9,2,8,14,3
"org.apache.cassandra.service.ActiveRepairService.terminateSessions()",4,0,n/a,9,1,0,4,2
"org.apache.cassandra.service.AsyncRepairCallback.AsyncRepairCallback(DataResolver,int)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.service.AsyncRepairCallback.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.AsyncRepairCallback.response(MessageIn<ReadResponse>)",6,0,n/a,4,3,1,4,2
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogCleanup.BatchlogCleanup(int,BatchlogCleanupCallback)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogCleanup.run()",2,1,n/a,5,0,0,2,2
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogCleanupCallback.invoke()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogResponseHandler(AbstractWriteResponseHandler<T>,int,BatchlogCleanup)",1,0,n/a,7,0,3,4,1
"org.apache.cassandra.service.BatchlogResponseHandler.ackCount()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.assureSufficientLiveNodes()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.get()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.isLatencyForSnitch()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.onFailure(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.response(MessageIn<T>)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.service.BatchlogResponseHandler.signal()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.totalBlockFor()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.totalEndpoints()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.BatchlogResponseHandler.waitingFor(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.CASRequest.appliesTo(FilteredPartition)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CASRequest.makeUpdates(FilteredPartition)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CASRequest.readCommand(int)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheService.CacheService()",7,1,n/a,15,1,0,7,2
"org.apache.cassandra.service.CacheService.CacheType.CacheType(String)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.service.CacheService.CacheType.toString()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.CounterCacheSerializer.deserialize(DataInputPlus,ColumnFamilyStore)",33,0,n/a,33,4,2,28,9
"org.apache.cassandra.service.CacheService.CounterCacheSerializer.serialize(CounterCacheKey,DataOutputPlus,ColumnFamilyStore)",4,0,n/a,7,0,3,4,1
"org.apache.cassandra.service.CacheService.KeyCacheSerializer.deserialize(DataInputPlus,ColumnFamilyStore)",18,0,n/a,29,1,2,13,5
"org.apache.cassandra.service.CacheService.KeyCacheSerializer.findDesc(int,Iterable<SSTableReader>)",0,1,n/a,9,1,2,4,3
"org.apache.cassandra.service.CacheService.KeyCacheSerializer.serialize(KeyCacheKey,DataOutputPlus,ColumnFamilyStore)",9,0,n/a,11,0,3,8,2
"org.apache.cassandra.service.CacheService.RowCacheSerializer.deserialize(DataInputPlus,ColumnFamilyStore)",17,0,n/a,10,3,2,11,3
"org.apache.cassandra.service.CacheService.RowCacheSerializer.serialize(RowCacheKey,DataOutputPlus,ColumnFamilyStore)",3,0,n/a,6,0,3,3,1
"org.apache.cassandra.service.CacheService.getCounterCacheKeysToSave()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.getCounterCacheSavePeriodInSeconds()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.getKeyCacheKeysToSave()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.getKeyCacheSavePeriodInSeconds()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.getRowCacheKeysToSave()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.getRowCacheSavePeriodInSeconds()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.initCounterCache()",11,1,n/a,15,0,0,7,2
"org.apache.cassandra.service.CacheService.initKeyCache()",9,1,n/a,16,0,0,8,1
"org.apache.cassandra.service.CacheService.initRowCache()",14,1,n/a,26,1,0,12,3
"org.apache.cassandra.service.CacheService.invalidateCounterCache()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.invalidateCounterCacheForCf(Pair<String, String>)",5,1,n/a,10,1,1,5,3
"org.apache.cassandra.service.CacheService.invalidateKeyCache()",1,6,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.invalidateKeyCacheForCf(Pair<String, String>)",5,1,n/a,10,1,1,5,3
"org.apache.cassandra.service.CacheService.invalidateRowCache()",1,6,n/a,4,0,0,1,1
"org.apache.cassandra.service.CacheService.invalidateRowCacheForCf(Pair<String, String>)",5,1,n/a,10,1,1,5,3
"org.apache.cassandra.service.CacheService.saveCaches()",13,0,n/a,10,0,0,7,1
"org.apache.cassandra.service.CacheService.setCounterCacheCapacityInMB(long)",2,2,n/a,6,0,1,3,2
"org.apache.cassandra.service.CacheService.setCounterCacheKeysToSave(int)",4,0,n/a,7,0,1,4,2
"org.apache.cassandra.service.CacheService.setCounterCacheSavePeriodInSeconds(int)",4,0,n/a,7,0,1,4,2
"org.apache.cassandra.service.CacheService.setKeyCacheCapacityInMB(long)",2,0,n/a,6,0,1,3,2
"org.apache.cassandra.service.CacheService.setKeyCacheKeysToSave(int)",4,0,n/a,7,0,1,4,2
"org.apache.cassandra.service.CacheService.setKeyCacheSavePeriodInSeconds(int)",4,0,n/a,7,0,1,4,2
"org.apache.cassandra.service.CacheService.setRowCacheCapacityInMB(long)",2,14,n/a,6,0,1,3,2
"org.apache.cassandra.service.CacheService.setRowCacheKeysToSave(int)",4,0,n/a,7,0,1,4,2
"org.apache.cassandra.service.CacheService.setRowCacheSavePeriodInSeconds(int)",4,0,n/a,7,0,1,4,2
"org.apache.cassandra.service.CacheServiceMBean.getCounterCacheKeysToSave()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.getCounterCacheSavePeriodInSeconds()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.getKeyCacheKeysToSave()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.getKeyCacheSavePeriodInSeconds()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.getRowCacheKeysToSave()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.getRowCacheSavePeriodInSeconds()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.invalidateCounterCache()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.invalidateKeyCache()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.invalidateRowCache()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.saveCaches()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setCounterCacheCapacityInMB(long)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setCounterCacheKeysToSave(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setCounterCacheSavePeriodInSeconds(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setKeyCacheCapacityInMB(long)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setKeyCacheKeysToSave(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setKeyCacheSavePeriodInSeconds(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setRowCacheCapacityInMB(long)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setRowCacheKeysToSave(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CacheServiceMBean.setRowCacheSavePeriodInSeconds(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.CassandraDaemon.CassandraDaemon()",1,6,n/a,3,0,0,1,1
"org.apache.cassandra.service.CassandraDaemon.CassandraDaemon(boolean)",2,1,n/a,5,0,1,3,1
"org.apache.cassandra.service.CassandraDaemon.NativeAccess.isAvailable()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.CassandraDaemon.NativeAccess.isMemoryLockable()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.CassandraDaemon.Server.isRunning()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CassandraDaemon.Server.start()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CassandraDaemon.Server.stop()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.CassandraDaemon.activate()",32,1,n/a,68,2,0,29,11
"org.apache.cassandra.service.CassandraDaemon.completeSetup()",0,4,n/a,5,0,0,1,1
"org.apache.cassandra.service.CassandraDaemon.deactivate()",3,1,n/a,12,1,0,4,2
"org.apache.cassandra.service.CassandraDaemon.destroy()",0,1,n/a,6,0,0,0,1
"org.apache.cassandra.service.CassandraDaemon.exitOrFail(int,String)",1,1,n/a,3,0,2,1,1
"org.apache.cassandra.service.CassandraDaemon.exitOrFail(int,String,Throwable)",4,5,n/a,10,1,3,5,3
"org.apache.cassandra.service.CassandraDaemon.init(String[])",1,2,n/a,13,0,1,1,1
"org.apache.cassandra.service.CassandraDaemon.isNativeTransportRunning()",1,0,n/a,4,0,0,1,2
"org.apache.cassandra.service.CassandraDaemon.loadRowAndKeyCacheAsync()",3,1,n/a,12,0,0,4,1
"org.apache.cassandra.service.CassandraDaemon.logSystemInfo()",20,1,n/a,19,2,0,9,4
"org.apache.cassandra.service.CassandraDaemon.main(String[])",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.CassandraDaemon.maybeInitJmx()",15,1,n/a,22,1,0,14,4
"org.apache.cassandra.service.CassandraDaemon.setup()",102,4,n/a,8,4,0,99,32
"org.apache.cassandra.service.CassandraDaemon.setupCompleted()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.CassandraDaemon.start()",11,3,n/a,22,1,0,9,9
"org.apache.cassandra.service.CassandraDaemon.startNativeTransport()",2,1,n/a,7,0,0,3,2
"org.apache.cassandra.service.CassandraDaemon.stop()",8,2,n/a,31,2,0,12,6
"org.apache.cassandra.service.CassandraDaemon.stop(String[])",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.CassandraDaemon.stopNativeTransport()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.service.CassandraDaemon.waitForGossipToSettle()",13,1,n/a,43,2,0,27,7
"org.apache.cassandra.service.ClientState.ClientState()",0,1,n/a,8,0,0,2,1
"org.apache.cassandra.service.ClientState.ClientState(InetSocketAddress)",2,2,n/a,7,0,1,4,2
"org.apache.cassandra.service.ClientState.authorize(IResource)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.ClientState.checkPermissionOnResourceChain(Permission,IResource)",6,2,n/a,10,0,2,4,3
"org.apache.cassandra.service.ClientState.ensureHasPermission(Permission,Function)",7,0,n/a,14,0,2,5,3
"org.apache.cassandra.service.ClientState.ensureHasPermission(Permission,IResource)",5,1,n/a,10,0,2,6,5
"org.apache.cassandra.service.ClientState.ensureIsSuper(String)",4,2,n/a,5,0,1,2,4
"org.apache.cassandra.service.ClientState.ensureNotAnonymous()",3,7,n/a,6,0,0,3,2
"org.apache.cassandra.service.ClientState.forExternalCalls(SocketAddress)",1,1,n/a,7,0,1,1,1
"org.apache.cassandra.service.ClientState.forInternalCalls()",1,29,n/a,7,0,0,1,1
"org.apache.cassandra.service.ClientState.getCQLQueryHandler()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.service.ClientState.getCQLSupportedVersion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.ClientState.getKeyspace()",1,8,n/a,6,0,0,3,2
"org.apache.cassandra.service.ClientState.getRawKeyspace()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.service.ClientState.getRemoteAddress()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.ClientState.getTimestamp()",3,1,n/a,15,1,0,6,4
"org.apache.cassandra.service.ClientState.getTimestamp(long)",4,0,n/a,15,1,1,6,4
"org.apache.cassandra.service.ClientState.getUser()",0,17,n/a,4,0,0,1,1
"org.apache.cassandra.service.ClientState.hasAccess(String,Permission,DataResource)",8,2,n/a,15,0,3,11,8
"org.apache.cassandra.service.ClientState.hasAllKeyspacesAccess(Permission)",3,0,n/a,7,0,1,4,2
"org.apache.cassandra.service.ClientState.hasColumnFamilyAccess(String,String,Permission)",3,14,n/a,6,0,3,2,1
"org.apache.cassandra.service.ClientState.hasKeyspaceAccess(String,Permission)",2,7,n/a,4,0,2,1,1
"org.apache.cassandra.service.ClientState.login(AuthenticatedUser)",7,0,n/a,13,0,1,3,3
"org.apache.cassandra.service.ClientState.preventSystemKSSchemaModification(String,DataResource,Permission)",9,1,n/a,18,1,3,6,10
"org.apache.cassandra.service.ClientState.setKeyspace(String)",2,3,n/a,8,0,1,3,3
"org.apache.cassandra.service.ClientState.validateKeyspace(String)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.ClientState.validateLogin()",1,4,n/a,5,0,0,2,2
"org.apache.cassandra.service.ClientWarn.ClientWarn()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.service.ClientWarn.add(String)",3,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.ClientWarn.captureWarnings()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.service.ClientWarn.getWarnings()",2,2,n/a,7,0,0,4,3
"org.apache.cassandra.service.ClientWarn.maybeTruncate(String)",3,1,n/a,6,0,1,1,2
"org.apache.cassandra.service.ClientWarn.resetWarnings()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.service.ClientWarn.warn(String)",2,5,n/a,6,0,1,3,2
"org.apache.cassandra.service.DataResolver.DataResolver(Keyspace,ReadCommand,ConsistencyLevel,int)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.MergeListener(DecoratedKey,PartitionColumns,boolean)",13,1,n/a,5,2,3,12,9
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.close()",6,0,n/a,13,1,0,8,3
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.currentRow(int,Clustering)",2,4,n/a,9,1,2,4,2
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.onMergedPartitionLevelDeletion(DeletionTime,DeletionTime[])",3,0,n/a,8,1,2,5,3
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.onMergedRangeTombstoneMarkers(RangeTombstoneMarker,RangeTombstoneMarker[])",12,0,n/a,19,2,2,11,9
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.onMergedRows(Row,Row[])",6,0,n/a,15,1,2,9,4
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener.update(int)",2,3,n/a,6,0,1,3,2
"org.apache.cassandra.service.DataResolver.RepairMergeListener.RepairMergeListener(InetAddress[])",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.DataResolver.RepairMergeListener.close()",7,0,n/a,17,1,0,7,3
"org.apache.cassandra.service.DataResolver.RepairMergeListener.columns(List<UnfilteredRowIterator>)",4,1,n/a,14,1,1,9,3
"org.apache.cassandra.service.DataResolver.RepairMergeListener.getRowMergeListener(DecoratedKey,List<UnfilteredRowIterator>)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.service.DataResolver.RepairMergeListener.isReversed(List<UnfilteredRowIterator>)",1,1,n/a,12,1,1,6,3
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadProtection(InetAddress,Counter)",4,1,n/a,6,0,2,3,1
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection.ShortReadRowProtection(CFMetaData,DecoratedKey)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection.applyToRow(Row)",1,0,n/a,6,0,1,2,1
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection.doShortReadRetry(SinglePartitionReadCommand)",16,1,n/a,13,0,1,8,2
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection.moreContents()",17,0,n/a,40,0,0,12,4
"org.apache.cassandra.service.DataResolver.ShortReadProtection.applyToPartition(UnfilteredRowIterator)",6,0,n/a,10,0,1,5,1
"org.apache.cassandra.service.DataResolver.getData()",6,0,n/a,5,0,0,2,1
"org.apache.cassandra.service.DataResolver.isDataPresent()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.DataResolver.mergeWithShortReadProtection(List<UnfilteredPartitionIterator>,InetAddress[],Counter)",14,1,n/a,15,1,3,9,4
"org.apache.cassandra.service.DataResolver.resolve()",11,0,n/a,18,1,0,11,2
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.DatacenterSyncWriteResponseHandler(Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Keyspace,Runnable,WriteType)",9,1,n/a,23,1,6,8,3
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.ackCount()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler.response(MessageIn<T>)",8,0,n/a,15,1,1,7,4
"org.apache.cassandra.service.DatacenterWriteResponseHandler.DatacenterWriteResponseHandler(Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Keyspace,Runnable,WriteType)",2,1,n/a,10,0,6,2,1
"org.apache.cassandra.service.DatacenterWriteResponseHandler.response(MessageIn<T>)",2,0,n/a,6,0,1,2,3
"org.apache.cassandra.service.DatacenterWriteResponseHandler.totalBlockFor()",2,0,n/a,7,0,0,1,1
"org.apache.cassandra.service.DatacenterWriteResponseHandler.waitingFor(InetAddress)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.service.DigestMismatchException.DigestMismatchException(DecoratedKey,ByteBuffer,ByteBuffer)",5,0,n/a,7,0,3,1,1
"org.apache.cassandra.service.DigestResolver.DigestResolver(Keyspace,ReadCommand,ConsistencyLevel,int)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.service.DigestResolver.getData()",5,1,n/a,8,0,0,2,1
"org.apache.cassandra.service.DigestResolver.isDataPresent()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.DigestResolver.preprocess(MessageIn<ReadResponse>)",2,0,n/a,7,0,1,3,3
"org.apache.cassandra.service.DigestResolver.resolve()",19,0,n/a,33,1,0,16,7
"org.apache.cassandra.service.EchoVerbHandler.doVerb(MessageIn<EchoMessage>,int)",4,0,n/a,6,0,2,3,1
"org.apache.cassandra.service.EmbeddedCassandraService.start()",3,5,n/a,6,0,0,3,1
"org.apache.cassandra.service.GCInspector.GCInspector()",13,1,n/a,18,2,0,8,3
"org.apache.cassandra.service.GCInspector.GCState.GCState(GarbageCollectorMXBean,boolean,boolean)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.service.GCInspector.GCState.keys(GarbageCollectionNotificationInfo)",5,1,n/a,8,0,1,5,2
"org.apache.cassandra.service.GCInspector.State.State()",1,2,n/a,5,0,0,2,1
"org.apache.cassandra.service.GCInspector.State.State(double,double,State)",1,1,n/a,9,0,3,6,1
"org.apache.cassandra.service.GCInspector.assumeGCIsOldGen(GarbageCollectorMXBean)",1,1,n/a,26,1,1,13,4
"org.apache.cassandra.service.GCInspector.assumeGCIsPartiallyConcurrent(GarbageCollectorMXBean)",1,1,n/a,29,1,1,13,4
"org.apache.cassandra.service.GCInspector.getAllocatedDirectMemory()",2,1,n/a,14,1,0,6,3
"org.apache.cassandra.service.GCInspector.getAndResetStats()",4,0,n/a,13,0,0,10,1
"org.apache.cassandra.service.GCInspector.getTotalSinceLastCheck()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.GCInspector.handleNotification(Notification,Object)",43,0,n/a,63,3,2,43,15
"org.apache.cassandra.service.GCInspector.register()",5,1,n/a,10,1,0,5,2
"org.apache.cassandra.service.GCInspectorMXBean.getAndResetStats()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.IEndpointLifecycleSubscriber.onDown(InetAddress)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.IEndpointLifecycleSubscriber.onJoinCluster(InetAddress)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.IEndpointLifecycleSubscriber.onLeaveCluster(InetAddress)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.IEndpointLifecycleSubscriber.onMove(InetAddress)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.IEndpointLifecycleSubscriber.onUp(InetAddress)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.LoadBroadcaster.LoadBroadcaster()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.LoadBroadcaster.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",0,0,n/a,1,0,4,0,1
"org.apache.cassandra.service.LoadBroadcaster.getLoadInfo()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.LoadBroadcaster.onAlive(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.service.LoadBroadcaster.onChange(InetAddress,ApplicationState,VersionedValue)",2,1,n/a,6,0,3,3,2
"org.apache.cassandra.service.LoadBroadcaster.onDead(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.service.LoadBroadcaster.onJoin(InetAddress,EndpointState)",2,0,n/a,8,1,2,3,2
"org.apache.cassandra.service.LoadBroadcaster.onRemove(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.LoadBroadcaster.onRestart(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.service.LoadBroadcaster.startBroadcasting()",7,0,n/a,7,2,0,5,2
"org.apache.cassandra.service.MigrationListener.onCreateAggregate(String,String,List<AbstractType<?>>)",0,0,n/a,3,0,3,0,1
"org.apache.cassandra.service.MigrationListener.onCreateColumnFamily(String,String)",0,1,n/a,3,0,2,0,1
"org.apache.cassandra.service.MigrationListener.onCreateFunction(String,String,List<AbstractType<?>>)",0,0,n/a,3,0,3,0,1
"org.apache.cassandra.service.MigrationListener.onCreateKeyspace(String)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.service.MigrationListener.onCreateUserType(String,String)",0,0,n/a,3,0,2,0,1
"org.apache.cassandra.service.MigrationListener.onCreateView(String,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.service.MigrationListener.onDropAggregate(String,String,List<AbstractType<?>>)",0,0,n/a,3,0,3,0,1
"org.apache.cassandra.service.MigrationListener.onDropColumnFamily(String,String)",0,1,n/a,3,0,2,0,1
"org.apache.cassandra.service.MigrationListener.onDropFunction(String,String,List<AbstractType<?>>)",0,0,n/a,3,0,3,0,1
"org.apache.cassandra.service.MigrationListener.onDropKeyspace(String)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.service.MigrationListener.onDropUserType(String,String)",0,0,n/a,3,0,2,0,1
"org.apache.cassandra.service.MigrationListener.onDropView(String,String)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.service.MigrationListener.onUpdateAggregate(String,String,List<AbstractType<?>>)",0,0,n/a,3,0,3,0,1
"org.apache.cassandra.service.MigrationListener.onUpdateColumnFamily(String,String,boolean)",0,1,n/a,3,0,3,0,1
"org.apache.cassandra.service.MigrationListener.onUpdateFunction(String,String,List<AbstractType<?>>)",0,0,n/a,3,0,3,0,1
"org.apache.cassandra.service.MigrationListener.onUpdateKeyspace(String)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.service.MigrationListener.onUpdateUserType(String,String)",0,0,n/a,3,0,2,0,1
"org.apache.cassandra.service.MigrationListener.onUpdateView(String,String,boolean)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.service.MigrationManager.MigrationManager()",0,1,n/a,1,0,0,0,1
"org.apache.cassandra.service.MigrationManager.MigrationsSerializer.deserialize(DataInputPlus,int)",4,21,n/a,8,0,2,7,2
"org.apache.cassandra.service.MigrationManager.MigrationsSerializer.serialize(Collection<Mutation>,DataOutputPlus,int)",3,22,n/a,6,0,3,3,2
"org.apache.cassandra.service.MigrationManager.MigrationsSerializer.serializedSize(Collection<Mutation>,int)",3,19,n/a,7,0,2,4,2
"org.apache.cassandra.service.MigrationManager.announce(Collection<Mutation>)",12,1,n/a,4,2,1,6,5
"org.apache.cassandra.service.MigrationManager.announce(Mutation,boolean)",5,15,n/a,11,0,2,3,2
"org.apache.cassandra.service.MigrationManager.announceAggregateDrop(UDAggregate,boolean)",9,1,n/a,6,0,2,3,1
"org.apache.cassandra.service.MigrationManager.announceColumnFamilyDrop(String,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.service.MigrationManager.announceColumnFamilyDrop(String,String,boolean)",9,2,n/a,9,0,3,6,2
"org.apache.cassandra.service.MigrationManager.announceColumnFamilyUpdate(CFMetaData,boolean)",1,4,n/a,4,0,2,1,1
"org.apache.cassandra.service.MigrationManager.announceColumnFamilyUpdate(CFMetaData,boolean,boolean)",11,7,n/a,11,0,3,8,2
"org.apache.cassandra.service.MigrationManager.announceFunctionDrop(UDFunction,boolean)",9,1,n/a,6,0,2,3,1
"org.apache.cassandra.service.MigrationManager.announceKeyspaceDrop(String)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.service.MigrationManager.announceKeyspaceDrop(String,boolean)",8,2,n/a,8,0,2,5,2
"org.apache.cassandra.service.MigrationManager.announceKeyspaceUpdate(KeyspaceMetadata)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.service.MigrationManager.announceKeyspaceUpdate(KeyspaceMetadata,boolean)",9,2,n/a,9,0,2,6,2
"org.apache.cassandra.service.MigrationManager.announceNewAggregate(UDAggregate,boolean)",8,1,n/a,6,0,2,3,1
"org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(CFMetaData)",1,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.MigrationManager.announceNewColumnFamily(CFMetaData,boolean)",11,2,n/a,12,0,2,8,3
"org.apache.cassandra.service.MigrationManager.announceNewFunction(UDFunction,boolean)",8,2,n/a,6,0,2,3,1
"org.apache.cassandra.service.MigrationManager.announceNewKeyspace(KeyspaceMetadata)",1,9,n/a,4,0,1,1,1
"org.apache.cassandra.service.MigrationManager.announceNewKeyspace(KeyspaceMetadata,boolean)",2,3,n/a,4,0,2,1,1
"org.apache.cassandra.service.MigrationManager.announceNewKeyspace(KeyspaceMetadata,long,boolean)",7,1,n/a,8,0,3,5,2
"org.apache.cassandra.service.MigrationManager.announceNewType(UserType,boolean)",4,2,n/a,5,0,2,2,1
"org.apache.cassandra.service.MigrationManager.announceNewView(ViewDefinition,boolean)",11,1,n/a,11,0,2,8,3
"org.apache.cassandra.service.MigrationManager.announceTypeDrop(UserType)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.MigrationManager.announceTypeDrop(UserType,boolean)",4,2,n/a,5,0,2,2,1
"org.apache.cassandra.service.MigrationManager.announceTypeUpdate(UserType,boolean)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.service.MigrationManager.announceViewDrop(String,String,boolean)",9,1,n/a,9,0,3,6,2
"org.apache.cassandra.service.MigrationManager.announceViewUpdate(ViewDefinition,boolean)",11,3,n/a,11,0,2,8,2
"org.apache.cassandra.service.MigrationManager.isReadyForBootstrap()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.MigrationManager.maybeScheduleSchemaPull(UUID,InetAddress)",20,1,n/a,43,3,2,19,8
"org.apache.cassandra.service.MigrationManager.notifyCreateAggregate(UDAggregate)",4,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateColumnFamily(CFMetaData)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateFunction(UDFunction)",4,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateKeyspace(KeyspaceMetadata)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateUserType(UserType)",2,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyCreateView(ViewDefinition)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropAggregate(UDAggregate)",4,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropColumnFamily(CFMetaData)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropFunction(UDFunction)",4,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropKeyspace(KeyspaceMetadata)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropUserType(UserType)",2,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyDropView(ViewDefinition)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateAggregate(UDAggregate)",4,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateColumnFamily(CFMetaData,boolean)",1,1,n/a,5,0,2,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateFunction(UDFunction)",4,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateKeyspace(KeyspaceMetadata)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateUserType(UserType)",7,1,n/a,7,0,1,3,2
"org.apache.cassandra.service.MigrationManager.notifyUpdateView(ViewDefinition,boolean)",1,1,n/a,5,0,2,2,2
"org.apache.cassandra.service.MigrationManager.passiveAnnounce(UUID)",3,1,n/a,11,0,1,2,1
"org.apache.cassandra.service.MigrationManager.pushSchemaMutation(InetAddress,Collection<Mutation>)",3,1,n/a,7,0,2,2,1
"org.apache.cassandra.service.MigrationManager.register(MigrationListener)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.MigrationManager.resetLocalSchema()",13,0,n/a,25,2,0,13,3
"org.apache.cassandra.service.MigrationManager.scheduleSchemaPull(InetAddress,EndpointState)",5,0,n/a,6,0,2,3,3
"org.apache.cassandra.service.MigrationManager.shouldPullSchemaFrom(InetAddress)",5,2,n/a,10,0,1,1,3
"org.apache.cassandra.service.MigrationManager.submitMigrationTask(InetAddress)",3,3,n/a,8,0,1,1,1
"org.apache.cassandra.service.MigrationManager.unregister(MigrationListener)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.MigrationTask.MigrationTask(InetAddress)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.MigrationTask.runMayThrow()",10,1,n/a,4,3,0,13,4
"org.apache.cassandra.service.NativeAccessMBean.isAvailable()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.NativeAccessMBean.isMemoryLockable()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.NativeTransportService.destroy()",7,0,n/a,20,1,0,7,2
"org.apache.cassandra.service.NativeTransportService.getEventExecutor()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.NativeTransportService.getServers()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.NativeTransportService.getWorkerGroup()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.NativeTransportService.initialize()",32,1,n/a,59,2,0,23,6
"org.apache.cassandra.service.NativeTransportService.isRunning()",1,0,n/a,9,0,0,4,3
"org.apache.cassandra.service.NativeTransportService.start()",2,0,n/a,8,0,0,2,1
"org.apache.cassandra.service.NativeTransportService.stop()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.service.NativeTransportService.useEpoll()",3,1,n/a,8,0,0,2,2
"org.apache.cassandra.service.PendingRangeCalculatorService.PendingRangeCalculatorService()",3,1,n/a,4,2,0,2,1
"org.apache.cassandra.service.PendingRangeCalculatorService.PendingRangeTask.run()",10,0,n/a,10,1,0,5,2
"org.apache.cassandra.service.PendingRangeCalculatorService.blockUntilFinished()",3,0,n/a,15,2,0,4,3
"org.apache.cassandra.service.PendingRangeCalculatorService.calculatePendingRanges(AbstractReplicationStrategy,String)",2,2,n/a,5,0,2,1,1
"org.apache.cassandra.service.PendingRangeCalculatorService.finishUpdate()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.service.PendingRangeCalculatorService.update()",3,0,n/a,5,0,0,2,1
"org.apache.cassandra.service.QueryState.QueryState(ClientState)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.QueryState.createTracingSession()",2,4,n/a,13,1,0,5,2
"org.apache.cassandra.service.QueryState.forInternalCalls()",2,9,n/a,7,0,0,1,1
"org.apache.cassandra.service.QueryState.getClientAddress()",2,5,n/a,6,0,0,1,2
"org.apache.cassandra.service.QueryState.getClientState()",0,12,n/a,4,0,0,1,1
"org.apache.cassandra.service.QueryState.getTimestamp()",1,3,n/a,8,0,0,1,1
"org.apache.cassandra.service.QueryState.prepareTracingSession(UUID)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.QueryState.traceNextQuery()",3,4,n/a,9,1,0,4,3
"org.apache.cassandra.service.ReadCallback.AsyncRepairRunner.AsyncRepairRunner(TraceState)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.ReadCallback.AsyncRepairRunner.run()",15,0,n/a,26,2,0,13,5
"org.apache.cassandra.service.ReadCallback.ReadCallback(ResponseResolver,ConsistencyLevel,ReadCommand,List<InetAddress>)",6,0,n/a,12,0,4,1,1
"org.apache.cassandra.service.ReadCallback.ReadCallback(ResponseResolver,ConsistencyLevel,int,ReadCommand,Keyspace,List<InetAddress>)",6,1,n/a,14,0,6,10,3
"org.apache.cassandra.service.ReadCallback.assureSufficientLiveNodes()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.ReadCallback.await(long,TimeUnit)",4,1,n/a,12,1,2,4,2
"org.apache.cassandra.service.ReadCallback.awaitResults()",13,1,n/a,21,1,0,11,12
"org.apache.cassandra.service.ReadCallback.blockFor()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.ReadCallback.get()",7,0,n/a,8,0,0,5,3
"org.apache.cassandra.service.ReadCallback.getReceivedCount()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.service.ReadCallback.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.ReadCallback.onFailure(InetAddress)",4,0,n/a,9,0,1,3,3
"org.apache.cassandra.service.ReadCallback.response(MessageIn<ReadResponse>)",12,1,n/a,20,2,1,9,7
"org.apache.cassandra.service.ReadCallback.response(ReadResponse)",4,0,n/a,9,0,1,2,1
"org.apache.cassandra.service.ReadCallback.waitingFor(InetAddress)",5,2,n/a,9,0,1,1,2
"org.apache.cassandra.service.ResponseResolver.ResponseResolver(Keyspace,ReadCommand,ConsistencyLevel,int)",1,0,n/a,7,0,4,4,1
"org.apache.cassandra.service.ResponseResolver.getData()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.ResponseResolver.getMessages()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.ResponseResolver.isDataPresent()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.ResponseResolver.preprocess(MessageIn<ReadResponse>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.ResponseResolver.resolve()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.SnapshotVerbHandler.doVerb(MessageIn<SnapshotCommand>,int)",8,0,n/a,12,1,2,6,2
"org.apache.cassandra.service.StartupCheck.execute()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StartupChecks.verify()",1,0,n/a,10,0,0,2,2
"org.apache.cassandra.service.StartupChecks.withDefaultTests()",1,0,n/a,5,0,0,2,1
"org.apache.cassandra.service.StartupChecks.withTest(StartupCheck)",1,0,n/a,9,0,1,2,1
"org.apache.cassandra.service.StorageProxy.BatchlogEndpoints.BatchlogEndpoints(Collection<InetAddress>)",6,2,n/a,13,1,1,7,3
"org.apache.cassandra.service.StorageProxy.DroppableRunnable.DroppableRunnable(Verb)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.DroppableRunnable.run()",7,0,n/a,16,1,0,6,3
"org.apache.cassandra.service.StorageProxy.DroppableRunnable.runMayThrow()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxy.HintRunnable.HintRunnable(Collection<InetAddress>)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.HintRunnable.run()",6,0,n/a,17,1,0,6,3
"org.apache.cassandra.service.StorageProxy.HintRunnable.runMayThrow()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxy.LocalMutationRunnable.run()",11,0,n/a,4,3,0,9,3
"org.apache.cassandra.service.StorageProxy.LocalMutationRunnable.runMayThrow()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxy.LocalReadRunnable.LocalReadRunnable(ReadCommand,ReadCallback)",1,2,n/a,6,0,2,3,1
"org.apache.cassandra.service.StorageProxy.LocalReadRunnable.runMayThrow()",14,1,n/a,19,2,0,8,3
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.RangeCommandIterator(RangeIterator,PartitionRangeReadCommand,int,Keyspace,ConsistencyLevel)",3,1,n/a,10,0,5,7,1
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.close()",6,0,n/a,14,1,0,6,2
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.computeNext()",8,1,n/a,20,2,0,9,5
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.query(RangeForQuery)",23,1,n/a,24,2,1,14,4
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.sendNextRequests()",11,1,n/a,14,1,0,9,3
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator.updateConcurrencyFactor()",6,1,n/a,16,1,0,7,2
"org.apache.cassandra.service.StorageProxy.RangeForQuery.RangeForQuery(AbstractBounds<PartitionPosition>,List<InetAddress>,List<InetAddress>)",0,2,n/a,6,0,3,3,1
"org.apache.cassandra.service.StorageProxy.RangeIterator.RangeIterator(PartitionRangeReadCommand,Keyspace,ConsistencyLevel)",9,1,n/a,10,0,3,5,2
"org.apache.cassandra.service.StorageProxy.RangeIterator.computeNext()",6,1,n/a,10,0,0,5,2
"org.apache.cassandra.service.StorageProxy.RangeIterator.rangeCount()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.RangeMerger.RangeMerger(Iterator<RangeForQuery>,Keyspace,ConsistencyLevel)",1,1,n/a,6,0,3,3,1
"org.apache.cassandra.service.StorageProxy.RangeMerger.computeNext()",14,1,n/a,32,1,0,16,6
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.SinglePartitionReadLifecycle(SinglePartitionReadCommand,ConsistencyLevel)",1,1,n/a,6,0,2,3,1
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.awaitResultsAndRetryOnDigestMismatch()",17,1,n/a,27,2,0,11,3
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.doInitialQueries()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.getResult()",0,1,n/a,5,0,0,2,1
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.isDone()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.maybeAwaitFullDataRead()",9,1,n/a,26,1,0,10,5
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle.maybeTryAdditionalReplicas()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse.SingleRangeResponse(ReadCallback)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse.close()",1,0,n/a,5,0,0,2,2
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse.computeNext()",4,1,n/a,5,0,0,2,2
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse.waitForResponse()",2,1,n/a,13,1,0,5,3
"org.apache.cassandra.service.StorageProxy.StorageProxy()",0,1,n/a,3,0,0,0,1
"org.apache.cassandra.service.StorageProxy.ViewWriteMetricsWrapped.ViewWriteMetricsWrapped(AbstractWriteResponseHandler<IMutation>,int,BatchlogCleanup)",3,1,n/a,5,0,3,2,1
"org.apache.cassandra.service.StorageProxy.ViewWriteMetricsWrapped.response(MessageIn<IMutation>)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.service.StorageProxy.WritePerformer.apply(IMutation,Iterable<InetAddress>,AbstractWriteResponseHandler<IMutation>,String,ConsistencyLevel)",n/a,1,3,n/a,n/a,5,n/a,n/a
"org.apache.cassandra.service.StorageProxy.WriteResponseHandlerWrapper.WriteResponseHandlerWrapper(BatchlogResponseHandler<IMutation>,Mutation)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.service.StorageProxy.applyCounterMutationOnCoordinator(CounterMutation,String)",2,1,n/a,7,0,2,1,1
"org.apache.cassandra.service.StorageProxy.applyCounterMutationOnLeader(CounterMutation,String,Runnable)",2,1,n/a,7,0,3,1,1
"org.apache.cassandra.service.StorageProxy.asyncRemoveFromBatchlog(BatchlogEndpoints,UUID)",4,1,n/a,7,0,2,4,3
"org.apache.cassandra.service.StorageProxy.asyncRemoveFromBatchlog(Collection<InetAddress>,UUID)",8,2,n/a,13,1,2,7,4
"org.apache.cassandra.service.StorageProxy.asyncWriteBatchedMutations(List<WriteResponseHandlerWrapper>,String,Stage)",4,1,n/a,15,2,3,5,3
"org.apache.cassandra.service.StorageProxy.beginAndRepairPaxos(long,DecoratedKey,CFMetaData,List<InetAddress>,int,ConsistencyLevel,ConsistencyLevel,boolean,ClientState)",34,2,n/a,93,4,9,38,10
"org.apache.cassandra.service.StorageProxy.canDoLocalRequest(InetAddress)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.cas(String,String,DecoratedKey,CASRequest,ConsistencyLevel,ConsistencyLevel,ClientState)",38,1,n/a,130,3,7,45,9
"org.apache.cassandra.service.StorageProxy.commitPaxos(Commit,ConsistencyLevel,boolean)",21,2,n/a,31,2,3,19,7
"org.apache.cassandra.service.StorageProxy.counterWriteTask(IMutation,Iterable<InetAddress>,AbstractWriteResponseHandler<IMutation>,String)",9,2,n/a,11,2,4,7,2
"org.apache.cassandra.service.StorageProxy.describeSchemaVersions()",40,1,n/a,4,2,0,34,12
"org.apache.cassandra.service.StorageProxy.disableHintsForDC(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.enableHintsForDC(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.estimateResultsPerRange(PartitionRangeReadCommand,Keyspace)",9,1,n/a,15,0,2,4,2
"org.apache.cassandra.service.StorageProxy.fetchRows(List<SinglePartitionReadCommand>,ConsistencyLevel)",13,2,n/a,35,1,2,30,8
"org.apache.cassandra.service.StorageProxy.findSuitableEndpoint(String,DecoratedKey,String,ConsistencyLevel)",18,1,n/a,35,1,4,13,5
"org.apache.cassandra.service.StorageProxy.getBatchlogEndpoints(String,ConsistencyLevel)",17,1,n/a,22,1,2,9,3
"org.apache.cassandra.service.StorageProxy.getCasContentionTimeout()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getCounterWriteRpcTimeout()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getHintedHandoffDisabledDCs()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getHintedHandoffEnabled()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getHintsInProgress()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getHintsInProgressFor(InetAddress)",2,3,n/a,11,1,1,3,2
"org.apache.cassandra.service.StorageProxy.getLiveSortedEndpoints(Keyspace,ByteBuffer)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.service.StorageProxy.getLiveSortedEndpoints(Keyspace,RingPosition)",4,0,n/a,6,0,2,3,1
"org.apache.cassandra.service.StorageProxy.getMaxHintWindow()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getMaxHintsInProgress()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getNativeTransportMaxConcurrentConnections()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getNativeTransportMaxConcurrentConnectionsPerIp()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getPaxosParticipants(CFMetaData,DecoratedKey,ConsistencyLevel)",26,2,n/a,28,1,3,16,4
"org.apache.cassandra.service.StorageProxy.getRangeRpcTimeout()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getRangeSlice(PartitionRangeReadCommand,ConsistencyLevel)",22,1,n/a,21,0,2,9,2
"org.apache.cassandra.service.StorageProxy.getReadRepairAttempted()",1,0,n/a,3,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getReadRepairRepairedBackground()",1,0,n/a,3,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getReadRepairRepairedBlocking()",1,0,n/a,3,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getReadRpcTimeout()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getRestrictedRanges(AbstractBounds<T>)",17,1,n/a,42,1,1,18,8
"org.apache.cassandra.service.StorageProxy.getRpcTimeout()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getSchemaVersions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getTotalHints()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getTruncateRpcTimeout()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.getWriteRpcTimeout()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.hintMutation(Mutation)",17,1,n/a,15,0,1,9,4
"org.apache.cassandra.service.StorageProxy.hintMutations(Collection<? extends IMutation>)",2,1,n/a,16,0,1,4,3
"org.apache.cassandra.service.StorageProxy.intersection(List<InetAddress>,List<InetAddress>)",2,1,n/a,11,0,2,3,1
"org.apache.cassandra.service.StorageProxy.isAnyStorageHostDown()",2,1,n/a,8,0,0,1,1
"org.apache.cassandra.service.StorageProxy.mutate(Collection<? extends IMutation>,ConsistencyLevel)",24,2,n/a,77,3,2,29,10
"org.apache.cassandra.service.StorageProxy.mutateAtomically(Collection<Mutation>,ConsistencyLevel,boolean)",25,2,n/a,76,2,3,29,7
"org.apache.cassandra.service.StorageProxy.mutateCounter(CounterMutation,String)",23,1,n/a,37,1,2,13,2
"org.apache.cassandra.service.StorageProxy.mutateMV(ByteBuffer,Collection<Mutation>,boolean,AtomicLong)",39,2,n/a,69,3,4,25,7
"org.apache.cassandra.service.StorageProxy.mutateWithTriggers(Collection<? extends IMutation>,ConsistencyLevel,boolean)",9,1,n/a,20,1,3,7,4
"org.apache.cassandra.service.StorageProxy.performLocally(Stage,Runnable)",5,1,n/a,11,3,2,4,2
"org.apache.cassandra.service.StorageProxy.performLocally(Stage,Runnable,IAsyncCallbackWithFailure<?>)",8,2,n/a,14,3,3,7,3
"org.apache.cassandra.service.StorageProxy.performWrite(IMutation,ConsistencyLevel,String,WritePerformer,Runnable,WriteType)",12,3,n/a,33,0,6,9,1
"org.apache.cassandra.service.StorageProxy.preparePaxos(Commit,List<InetAddress>,int,ConsistencyLevel)",7,1,n/a,10,0,4,6,2
"org.apache.cassandra.service.StorageProxy.proposePaxos(Commit,List<InetAddress>,int,boolean,ConsistencyLevel)",10,2,n/a,14,0,5,10,5
"org.apache.cassandra.service.StorageProxy.read(Group,ConsistencyLevel)",2,0,n/a,7,0,2,2,1
"org.apache.cassandra.service.StorageProxy.read(Group,ConsistencyLevel,ClientState)",7,4,n/a,16,1,3,4,4
"org.apache.cassandra.service.StorageProxy.readOne(SinglePartitionReadCommand,ConsistencyLevel)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.service.StorageProxy.readOne(SinglePartitionReadCommand,ConsistencyLevel,ClientState)",3,1,n/a,5,0,3,1,1
"org.apache.cassandra.service.StorageProxy.readRegular(Group,ConsistencyLevel)",14,1,n/a,38,1,2,16,6
"org.apache.cassandra.service.StorageProxy.readWithPaxos(Group,ConsistencyLevel,ClientState)",26,1,n/a,64,2,3,34,9
"org.apache.cassandra.service.StorageProxy.reloadTriggerClasses()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.service.StorageProxy.sameDCPredicateFor(String)",4,1,n/a,4,2,1,3,1
"org.apache.cassandra.service.StorageProxy.sendCommit(Commit,Iterable<InetAddress>)",3,1,n/a,9,0,2,3,2
"org.apache.cassandra.service.StorageProxy.sendMessagesToNonlocalDC(MessageOut<? extends IMutation>,Collection<InetAddress>,AbstractWriteResponseHandler<IMutation>)",19,1,n/a,34,2,3,14,3
"org.apache.cassandra.service.StorageProxy.sendToHintedEndpoints(Mutation,Iterable<InetAddress>,AbstractWriteResponseHandler<IMutation>,String,Stage)",28,4,n/a,97,5,5,35,19
"org.apache.cassandra.service.StorageProxy.setCasContentionTimeout(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setCounterWriteRpcTimeout(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setHintedHandoffEnabled(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setMaxHintWindow(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setMaxHintsInProgress(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setNativeTransportMaxConcurrentConnections(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setNativeTransportMaxConcurrentConnectionsPerIp(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setRangeRpcTimeout(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setReadRpcTimeout(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setRpcTimeout(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setTruncateRpcTimeout(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.setWriteRpcTimeout(Long)",1,0,n/a,1,0,1,1,1
"org.apache.cassandra.service.StorageProxy.shouldHint(InetAddress)",14,4,n/a,26,2,1,15,5
"org.apache.cassandra.service.StorageProxy.submitHint(HintRunnable)",6,2,n/a,7,0,1,4,2
"org.apache.cassandra.service.StorageProxy.submitHint(Mutation,Collection<InetAddress>,AbstractWriteResponseHandler<IMutation>)",9,1,n/a,10,2,3,7,3
"org.apache.cassandra.service.StorageProxy.submitHint(Mutation,InetAddress,AbstractWriteResponseHandler<IMutation>)",2,1,n/a,4,0,3,1,1
"org.apache.cassandra.service.StorageProxy.syncWriteBatchedMutations(List<WriteResponseHandlerWrapper>,String,Stage)",3,1,n/a,11,1,3,5,3
"org.apache.cassandra.service.StorageProxy.syncWriteToBatchlog(Collection<Mutation>,BatchlogEndpoints,UUID)",11,1,n/a,16,0,3,7,4
"org.apache.cassandra.service.StorageProxy.syncWriteToBatchlog(WriteResponseHandler<?>,Batch,Collection<InetAddress>)",8,1,n/a,13,1,3,6,3
"org.apache.cassandra.service.StorageProxy.systemKeyspaceQuery(List<? extends ReadCommand>)",2,1,n/a,7,0,1,4,3
"org.apache.cassandra.service.StorageProxy.truncateBlocking(String,String)",18,1,n/a,41,1,2,17,4
"org.apache.cassandra.service.StorageProxy.verifyNoHintsInProgress()",2,0,n/a,5,0,0,2,2
"org.apache.cassandra.service.StorageProxy.wrapBatchResponseHandler(Mutation,ConsistencyLevel,ConsistencyLevel,WriteType,BatchlogCleanup)",13,1,n/a,17,0,5,9,1
"org.apache.cassandra.service.StorageProxy.wrapViewBatchResponseHandler(Mutation,ConsistencyLevel,ConsistencyLevel,List<InetAddress>,AtomicLong,WriteType,BatchlogCleanup)",16,1,n/a,24,1,7,10,1
"org.apache.cassandra.service.StorageProxyMBean.disableHintsForDC(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.enableHintsForDC(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getCasContentionTimeout()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getCounterWriteRpcTimeout()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getHintedHandoffDisabledDCs()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getHintedHandoffEnabled()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getHintsInProgress()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getMaxHintWindow()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getMaxHintsInProgress()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getNativeTransportMaxConcurrentConnections()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getRangeRpcTimeout()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getReadRepairAttempted()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getReadRepairRepairedBackground()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getReadRepairRepairedBlocking()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getReadRpcTimeout()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getRpcTimeout()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getSchemaVersions()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getTotalHints()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getTruncateRpcTimeout()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.getWriteRpcTimeout()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.reloadTriggerClasses()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setCasContentionTimeout(Long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setCounterWriteRpcTimeout(Long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setHintedHandoffEnabled(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setMaxHintWindow(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setMaxHintsInProgress(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setNativeTransportMaxConcurrentConnections(Long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setRangeRpcTimeout(Long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setReadRpcTimeout(Long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setRpcTimeout(Long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setTruncateRpcTimeout(Long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageProxyMBean.setWriteRpcTimeout(Long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageService.RangeRelocator.RangeRelocator(Collection<Token>,List<String>)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.service.StorageService.RangeRelocator.calculateToFromStreams(Collection<Token>,List<String>)",63,1,n/a,104,7,2,55,19
"org.apache.cassandra.service.StorageService.RangeRelocator.stream()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.RangeRelocator.streamsNeeded()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.StorageService()",84,1,n/a,42,1,0,32,2
"org.apache.cassandra.service.StorageService.addExpireTimeIfFound(InetAddress,long)",1,2,n/a,7,1,2,2,2
"org.apache.cassandra.service.StorageService.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",0,0,n/a,4,0,4,0,1
"org.apache.cassandra.service.StorageService.bootstrap(Collection<Token>)",34,1,n/a,5,2,1,29,6
"org.apache.cassandra.service.StorageService.bulkLoad(String)",3,0,n/a,11,1,1,3,2
"org.apache.cassandra.service.StorageService.bulkLoadAsync(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.bulkLoadInternal(String)",15,2,n/a,4,4,1,13,6
"org.apache.cassandra.service.StorageService.calculateStreamAndFetchRanges(Collection<Range<Token>>,Collection<Range<Token>>)",11,2,n/a,48,3,2,19,9
"org.apache.cassandra.service.StorageService.checkForEndpointCollision()",26,1,n/a,28,2,0,16,10
"org.apache.cassandra.service.StorageService.clearSnapshot(String,String...)",10,0,n/a,24,2,2,12,8
"org.apache.cassandra.service.StorageService.confirmReplication(InetAddress)",3,1,n/a,14,1,1,3,2
"org.apache.cassandra.service.StorageService.constructRangeToEndpointMap(String,List<Range<Token>>)",6,1,n/a,15,1,2,4,2
"org.apache.cassandra.service.StorageService.createRepairRangeFrom(String,String)",20,1,n/a,33,1,2,16,4
"org.apache.cassandra.service.StorageService.createRepairTask(int,String,RepairOption)",9,1,n/a,10,1,3,5,3
"org.apache.cassandra.service.StorageService.decommission()",31,0,n/a,14,3,0,26,8
"org.apache.cassandra.service.StorageService.deliverHints(String)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.service.StorageService.describeLocalRing(String)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.service.StorageService.describeRing(String)",1,1,n/a,13,0,1,1,1
"org.apache.cassandra.service.StorageService.describeRing(String,boolean)",37,2,n/a,36,2,2,24,7
"org.apache.cassandra.service.StorageService.describeRingJMX(String)",7,0,n/a,23,1,1,8,3
"org.apache.cassandra.service.StorageService.disableAutoCompaction(String,String...)",2,0,n/a,7,1,2,2,2
"org.apache.cassandra.service.StorageService.doAuthSetup()",15,2,n/a,24,1,0,11,5
"org.apache.cassandra.service.StorageService.drain()",50,2,n/a,80,1,0,50,11
"org.apache.cassandra.service.StorageService.effectiveOwnership(String)",24,0,n/a,58,3,1,29,11
"org.apache.cassandra.service.StorageService.enableAutoCompaction(String,String...)",2,0,n/a,7,1,2,2,2
"org.apache.cassandra.service.StorageService.excise(Collection<Token>,InetAddress)",9,3,n/a,12,0,2,9,3
"org.apache.cassandra.service.StorageService.excise(Collection<Token>,InetAddress,long)",2,2,n/a,5,0,3,2,1
"org.apache.cassandra.service.StorageService.extractExpireTime(String[])",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.forceKeyspaceCleanup(String,String...)",4,0,n/a,13,1,2,8,4
"org.apache.cassandra.service.StorageService.forceKeyspaceCompaction(boolean,String,String...)",2,0,n/a,7,1,3,2,2
"org.apache.cassandra.service.StorageService.forceKeyspaceFlush(String,String...)",3,2,n/a,14,1,2,3,2
"org.apache.cassandra.service.StorageService.forceRemoveCompletion()",12,0,n/a,24,2,0,9,4
"org.apache.cassandra.service.StorageService.forceRepairAsync(String,RepairOption)",9,3,n/a,8,0,2,5,3
"org.apache.cassandra.service.StorageService.forceRepairAsync(String,boolean,Collection<String>,Collection<String>,boolean,boolean,String...)",3,0,n/a,11,0,7,1,2
"org.apache.cassandra.service.StorageService.forceRepairAsync(String,boolean,boolean,boolean,boolean,String...)",3,0,n/a,14,1,6,4,2
"org.apache.cassandra.service.StorageService.forceRepairAsync(String,int,Collection<String>,Collection<String>,boolean,boolean,String...)",33,0,n/a,52,2,7,22,14
"org.apache.cassandra.service.StorageService.forceRepairRangeAsync(String,String,String,boolean,Collection<String>,Collection<String>,boolean,String...)",3,0,n/a,13,0,8,1,2
"org.apache.cassandra.service.StorageService.forceRepairRangeAsync(String,String,String,boolean,boolean,boolean,String...)",3,0,n/a,15,1,7,4,2
"org.apache.cassandra.service.StorageService.forceRepairRangeAsync(String,String,String,int,Collection<String>,Collection<String>,boolean,String...)",15,0,n/a,37,2,8,16,8
"org.apache.cassandra.service.StorageService.forceTerminateAllRepairSessions()",1,0,n/a,3,0,0,1,1
"org.apache.cassandra.service.StorageService.getAllDataFileLocations()",2,0,n/a,7,0,0,6,2
"org.apache.cassandra.service.StorageService.getAllRanges(List<Token>)",15,1,n/a,23,1,1,14,4
"org.apache.cassandra.service.StorageService.getApplicationStateValue(InetAddress,ApplicationState)",3,2,n/a,5,0,2,2,1
"org.apache.cassandra.service.StorageService.getBatchSizeFailureThreshold()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getChangedRangesForLeaving(String,InetAddress)",26,3,n/a,36,1,2,20,7
"org.apache.cassandra.service.StorageService.getClusterName()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.StorageService.getCommitLogLocation()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getCompactionThroughputMbPerSec()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getCurrentGenerationNumber()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getDrainProgress()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getEndpointForHostId(UUID)",1,2,n/a,5,0,1,1,1
"org.apache.cassandra.service.StorageService.getEndpointToHostId()",9,1,n/a,7,0,0,4,2
"org.apache.cassandra.service.StorageService.getHostIdForEndpoint(InetAddress)",1,4,n/a,5,0,1,1,1
"org.apache.cassandra.service.StorageService.getHostIdMap()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getHostIdToEndpoint()",9,0,n/a,7,0,0,4,2
"org.apache.cassandra.service.StorageService.getJoiningNodes()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getKeyspaces()",3,1,n/a,5,0,0,2,1
"org.apache.cassandra.service.StorageService.getLeavingNodes()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getLiveNaturalEndpoints(Keyspace,ByteBuffer)",2,0,n/a,12,0,2,1,1
"org.apache.cassandra.service.StorageService.getLiveNaturalEndpoints(Keyspace,RingPosition)",6,0,n/a,11,1,2,6,3
"org.apache.cassandra.service.StorageService.getLiveNodes()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getLoadMap()",12,0,n/a,11,1,0,5,2
"org.apache.cassandra.service.StorageService.getLoadString()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getLocalHostId()",4,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getLocalHostUUID()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getLocalRanges(String)",2,11,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.getLocalTokens()",2,7,n/a,6,0,0,3,2
"org.apache.cassandra.service.StorageService.getLoggingLevels()",9,0,n/a,14,1,0,6,4
"org.apache.cassandra.service.StorageService.getMovingNodes()",4,0,n/a,9,1,0,4,2
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,ByteBuffer)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,RingPosition)",3,0,n/a,12,0,2,1,1
"org.apache.cassandra.service.StorageService.getNaturalEndpoints(String,String,String)",8,0,n/a,19,0,3,7,3
"org.apache.cassandra.service.StorageService.getNewSourceRanges(String,Set<Range<Token>>)",12,1,n/a,31,3,2,14,4
"org.apache.cassandra.service.StorageService.getNonSystemKeyspaces()",3,0,n/a,5,0,0,2,1
"org.apache.cassandra.service.StorageService.getOperationMode()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getOwnership()",12,0,n/a,17,1,0,10,3
"org.apache.cassandra.service.StorageService.getPartitionerName()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.StorageService.getPendingRangeToEndpointMap(String)",11,0,n/a,14,1,1,7,3
"org.apache.cassandra.service.StorageService.getPreferredHintsStreamTarget()",20,1,n/a,27,1,0,14,4
"org.apache.cassandra.service.StorageService.getPrimaryRangeForEndpointWithinDC(String,InetAddress)",16,1,n/a,32,4,2,13,5
"org.apache.cassandra.service.StorageService.getPrimaryRanges(String)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.getPrimaryRangesForEndpoint(String,InetAddress)",12,3,n/a,23,1,2,8,4
"org.apache.cassandra.service.StorageService.getPrimaryRangesWithinDC(String)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.getRangeToAddressMap(String)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.getRangeToAddressMap(String,List<Token>)",4,2,n/a,9,0,2,4,2
"org.apache.cassandra.service.StorageService.getRangeToAddressMapInLocalDC(String)",11,1,n/a,4,2,1,8,2
"org.apache.cassandra.service.StorageService.getRangeToEndpointMap(String)",8,0,n/a,15,1,1,4,2
"org.apache.cassandra.service.StorageService.getRangeToRpcaddressMap(String)",12,0,n/a,20,2,1,7,3
"org.apache.cassandra.service.StorageService.getRangesForEndpoint(String,InetAddress)",4,4,n/a,9,0,2,1,1
"org.apache.cassandra.service.StorageService.getReleaseVersion()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getRemovalStatus()",3,0,n/a,12,1,0,3,2
"org.apache.cassandra.service.StorageService.getRingDelay()",3,1,n/a,11,1,0,5,2
"org.apache.cassandra.service.StorageService.getRpcaddress(InetAddress)",9,2,n/a,14,0,1,5,3
"org.apache.cassandra.service.StorageService.getSavedCachesLocation()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getSchemaVersion()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getSeverity(InetAddress)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.getSnapshotDetails()",16,0,n/a,23,4,0,12,6
"org.apache.cassandra.service.StorageService.getSplits(List<Token>,int,ColumnFamilyStore)",10,1,n/a,16,1,3,12,2
"org.apache.cassandra.service.StorageService.getSplits(String,String,Range<Token>,int)",10,3,n/a,17,0,4,9,1
"org.apache.cassandra.service.StorageService.getStreamThroughputMbPerSec()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getTokenFactory()",1,9,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getTokenMetadata()",0,44,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getTokenToEndpointMap()",10,0,n/a,13,1,0,7,2
"org.apache.cassandra.service.StorageService.getTokens()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getTokens(InetAddress)",5,1,n/a,7,0,1,4,2
"org.apache.cassandra.service.StorageService.getTokens(String)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.getTokensFor(InetAddress)",5,4,n/a,13,1,1,3,2
"org.apache.cassandra.service.StorageService.getTokensInLocalDC()",5,1,n/a,11,1,0,6,3
"org.apache.cassandra.service.StorageService.getTombstoneFailureThreshold()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getTombstoneWarnThreshold()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getTraceProbability()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getUnreachableNodes()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.getValidColumnFamilies(boolean,boolean,String,String...)",2,9,n/a,12,0,4,2,1
"org.apache.cassandra.service.StorageService.getValidKeyspace(String)",4,4,n/a,8,1,1,3,2
"org.apache.cassandra.service.StorageService.gossipSnitchInfo()",9,3,n/a,8,0,0,5,1
"org.apache.cassandra.service.StorageService.handleStateBootstrap(InetAddress)",11,1,n/a,30,1,1,11,4
"org.apache.cassandra.service.StorageService.handleStateLeaving(InetAddress)",12,1,n/a,29,1,1,12,4
"org.apache.cassandra.service.StorageService.handleStateLeft(InetAddress,String[])",5,1,n/a,15,0,2,6,2
"org.apache.cassandra.service.StorageService.handleStateMoving(InetAddress,String[])",6,1,n/a,15,0,2,6,2
"org.apache.cassandra.service.StorageService.handleStateNormal(InetAddress)",69,1,n/a,115,3,1,62,22
"org.apache.cassandra.service.StorageService.handleStateRemoving(InetAddress,String[])",25,1,n/a,51,2,2,23,8
"org.apache.cassandra.service.StorageService.hasAppenders(Logger)",2,2,n/a,4,0,1,2,1
"org.apache.cassandra.service.StorageService.initServer()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.initServer(int)",85,6,n/a,53,3,1,72,19
"org.apache.cassandra.service.StorageService.isBootstrapMode()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.isGossipRunning()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.StorageService.isInShutdownHook()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.isIncrementalBackupsEnabled()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.isInitialized()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.isJoined()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.service.StorageService.isLocalDC(InetAddress)",6,2,n/a,6,0,1,3,1
"org.apache.cassandra.service.StorageService.isNativeTransportRunning()",1,1,n/a,8,1,0,3,2
"org.apache.cassandra.service.StorageService.isRPCServerRunning()",1,1,n/a,8,1,0,3,3
"org.apache.cassandra.service.StorageService.isRpcReady(InetAddress)",4,2,n/a,5,0,1,1,2
"org.apache.cassandra.service.StorageService.isSetupCompleted()",1,3,n/a,6,0,0,1,2
"org.apache.cassandra.service.StorageService.isStarting()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.isStatus(InetAddress,String)",3,1,n/a,4,0,2,1,1
"org.apache.cassandra.service.StorageService.joinRing()",11,1,n/a,24,2,0,12,4
"org.apache.cassandra.service.StorageService.joinTokenRing(int)",100,2,n/a,183,5,1,82,33
"org.apache.cassandra.service.StorageService.keySamples(Iterable<ColumnFamilyStore>,Range<Token>)",4,2,n/a,8,0,2,5,2
"org.apache.cassandra.service.StorageService.keysToTokens(Range<Token>,List<DecoratedKey>)",6,1,n/a,9,0,2,6,2
"org.apache.cassandra.service.StorageService.leaveRing()",11,1,n/a,10,0,0,7,1
"org.apache.cassandra.service.StorageService.loadNewSSTables(String,String)",1,0,n/a,7,0,2,1,1
"org.apache.cassandra.service.StorageService.maybeAddKeyspace(KeyspaceMetadata)",2,2,n/a,11,1,1,3,2
"org.apache.cassandra.service.StorageService.maybeAddTable(CFMetaData)",2,1,n/a,11,1,1,3,2
"org.apache.cassandra.service.StorageService.move(String)",7,0,n/a,12,1,1,4,2
"org.apache.cassandra.service.StorageService.move(Token)",41,1,n/a,54,2,1,27,9
"org.apache.cassandra.service.StorageService.notifyDown(InetAddress)",1,2,n/a,5,0,1,2,2
"org.apache.cassandra.service.StorageService.notifyJoined(InetAddress)",3,2,n/a,7,0,1,4,4
"org.apache.cassandra.service.StorageService.notifyLeft(InetAddress)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.StorageService.notifyMoved(InetAddress)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.StorageService.notifyRpcChange(InetAddress,boolean)",3,1,n/a,12,1,2,4,2
"org.apache.cassandra.service.StorageService.notifyUp(InetAddress)",3,2,n/a,7,0,1,4,4
"org.apache.cassandra.service.StorageService.onAlive(InetAddress,EndpointState)",3,0,n/a,6,0,2,3,2
"org.apache.cassandra.service.StorageService.onChange(InetAddress,ApplicationState,VersionedValue)",27,1,n/a,111,4,3,58,19
"org.apache.cassandra.service.StorageService.onDead(InetAddress,EndpointState)",3,1,n/a,5,0,2,2,1
"org.apache.cassandra.service.StorageService.onJoin(InetAddress,EndpointState)",6,0,n/a,8,1,2,3,2
"org.apache.cassandra.service.StorageService.onRemove(InetAddress)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.service.StorageService.onRestart(InetAddress,EndpointState)",2,0,n/a,6,0,2,2,2
"org.apache.cassandra.service.StorageService.populateTokenMetadata()",12,0,n/a,13,1,0,8,4
"org.apache.cassandra.service.StorageService.prepareReplacementInfo()",27,1,n/a,29,1,0,16,5
"org.apache.cassandra.service.StorageService.prepareToJoin()",51,1,n/a,57,3,0,37,13
"org.apache.cassandra.service.StorageService.rebuild(String)",23,0,n/a,42,1,1,16,8
"org.apache.cassandra.service.StorageService.rebuildSecondaryIndex(String,String,String...)",9,0,n/a,8,0,3,2,2
"org.apache.cassandra.service.StorageService.register(IEndpointLifecycleSubscriber)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.registerDaemon(CassandraDaemon)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.removeEndpoint(InetAddress)",2,3,n/a,6,0,1,2,1
"org.apache.cassandra.service.StorageService.removeNode(String)",33,0,n/a,64,2,1,35,11
"org.apache.cassandra.service.StorageService.removeShutdownHook()",5,1,n/a,10,0,0,4,3
"org.apache.cassandra.service.StorageService.repairAsync(String,Map<String, String>)",24,0,n/a,24,2,2,10,7
"org.apache.cassandra.service.StorageService.reportManualSeverity(double)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.reportSeverity(double)",1,2,n/a,7,0,1,1,1
"org.apache.cassandra.service.StorageService.rescheduleFailedDeletions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.resetLocalSchema()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.restoreReplicaCount(InetAddress,InetAddress)",30,2,n/a,6,2,2,25,8
"org.apache.cassandra.service.StorageService.resumeBootstrap()",24,0,n/a,8,4,0,21,5
"org.apache.cassandra.service.StorageService.sampleKeyRange()",13,0,n/a,16,1,0,8,4
"org.apache.cassandra.service.StorageService.scrub(boolean,boolean,String,String...)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.service.StorageService.scrub(boolean,boolean,boolean,String,String...)",2,1,n/a,11,1,5,6,3
"org.apache.cassandra.service.StorageService.sendReplicationNotification(InetAddress)",8,2,n/a,26,2,1,9,4
"org.apache.cassandra.service.StorageService.setBatchSizeFailureThreshold(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.setCompactionThroughputMbPerSec(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.setGossipTokens(Collection<Token>)",8,2,n/a,7,0,1,4,1
"org.apache.cassandra.service.StorageService.setHintedHandoffThrottleInKB(int)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.service.StorageService.setIncrementalBackupsEnabled(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.setLoggingLevel(String,String)",15,0,n/a,23,1,2,12,7
"org.apache.cassandra.service.StorageService.setMode(Mode,String,boolean)",4,21,n/a,9,0,3,5,3
"org.apache.cassandra.service.StorageService.setMode(Mode,boolean)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.service.StorageService.setPartitionerUnsafe(IPartitioner)",3,8,n/a,9,0,1,4,1
"org.apache.cassandra.service.StorageService.setRpcReady(boolean)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.setStreamThroughputMbPerSec(int)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.service.StorageService.setTokenMetadataUnsafe(TokenMetadata)",0,0,n/a,6,0,1,3,1
"org.apache.cassandra.service.StorageService.setTokens(Collection<Token>)",8,3,n/a,11,0,1,7,2
"org.apache.cassandra.service.StorageService.setTombstoneFailureThreshold(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.setTombstoneWarnThreshold(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.setTraceProbability(double)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.shouldBootstrap()",5,3,n/a,4,0,0,1,3
"org.apache.cassandra.service.StorageService.shutdownClientServers()",2,3,n/a,5,0,0,2,1
"org.apache.cassandra.service.StorageService.startGossiping()",6,0,n/a,12,1,0,6,2
"org.apache.cassandra.service.StorageService.startLeaving()",6,1,n/a,9,0,0,3,1
"org.apache.cassandra.service.StorageService.startNativeTransport()",4,0,n/a,15,1,0,5,3
"org.apache.cassandra.service.StorageService.startRPCServer()",2,0,n/a,9,1,0,3,2
"org.apache.cassandra.service.StorageService.stopClient()",6,3,n/a,9,0,0,5,1
"org.apache.cassandra.service.StorageService.stopDaemon()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.service.StorageService.stopGossiping()",2,1,n/a,10,1,0,4,2
"org.apache.cassandra.service.StorageService.stopNativeTransport()",2,2,n/a,8,1,0,3,2
"org.apache.cassandra.service.StorageService.stopRPCServer()",2,2,n/a,9,1,0,4,3
"org.apache.cassandra.service.StorageService.stopTransports()",9,3,n/a,18,1,0,9,4
"org.apache.cassandra.service.StorageService.streamHints()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.streamRanges(Map<String, Multimap<Range<Token>, InetAddress>>)",24,1,n/a,47,3,1,26,7
"org.apache.cassandra.service.StorageService.stringify(Iterable<InetAddress>)",3,6,n/a,9,1,1,4,2
"org.apache.cassandra.service.StorageService.takeMultipleTableSnapshot(String,String...)",22,0,n/a,55,3,2,25,12
"org.apache.cassandra.service.StorageService.takeSnapshot(String,String...)",10,0,n/a,31,1,2,16,9
"org.apache.cassandra.service.StorageService.takeTableSnapshot(String,String,String)",12,0,n/a,25,0,3,15,8
"org.apache.cassandra.service.StorageService.trueSnapshotsSize()",5,0,n/a,14,2,0,7,4
"org.apache.cassandra.service.StorageService.truncate(String,String)",3,0,n/a,11,1,2,3,2
"org.apache.cassandra.service.StorageService.unbootstrap(Runnable)",24,1,n/a,41,1,1,23,5
"org.apache.cassandra.service.StorageService.unregister(IEndpointLifecycleSubscriber)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.StorageService.unsafeInitialize()",10,2,n/a,10,0,0,6,2
"org.apache.cassandra.service.StorageService.updatePeerInfo(InetAddress)",20,1,n/a,35,3,1,23,9
"org.apache.cassandra.service.StorageService.updateSnitch(String,Boolean,Integer,Integer,Double)",14,0,n/a,30,1,5,16,5
"org.apache.cassandra.service.StorageService.updateTopology()",2,2,n/a,4,0,0,1,1
"org.apache.cassandra.service.StorageService.updateTopology(InetAddress)",4,3,n/a,7,1,1,2,2
"org.apache.cassandra.service.StorageService.upgradeSSTables(String,boolean,String...)",2,0,n/a,11,1,3,6,3
"org.apache.cassandra.service.StorageService.verify(boolean,String,String...)",2,0,n/a,11,1,3,6,3
"org.apache.cassandra.service.StorageServiceMBean.bulkLoad(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.bulkLoadAsync(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.clearSnapshot(String,String...)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.decommission()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.deliverHints(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.describeRingJMX(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.disableAutoCompaction(String,String...)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.drain()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.effectiveOwnership(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.enableAutoCompaction(String,String...)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceKeyspaceCleanup(String,String...)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceKeyspaceCompaction(boolean,String,String...)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceKeyspaceFlush(String,String...)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceRemoveCompletion()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceRepairAsync(String,boolean,Collection<String>,Collection<String>,boolean,boolean,String...)",n/a,0,0,n/a,n/a,7,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceRepairAsync(String,boolean,boolean,boolean,boolean,String...)",n/a,0,0,n/a,n/a,6,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceRepairAsync(String,int,Collection<String>,Collection<String>,boolean,boolean,String...)",n/a,0,0,n/a,n/a,7,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceRepairRangeAsync(String,String,String,boolean,Collection<String>,Collection<String>,boolean,String...)",n/a,0,0,n/a,n/a,8,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceRepairRangeAsync(String,String,String,boolean,boolean,boolean,String...)",n/a,0,0,n/a,n/a,7,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceRepairRangeAsync(String,String,String,int,Collection<String>,Collection<String>,boolean,String...)",n/a,0,0,n/a,n/a,8,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.forceTerminateAllRepairSessions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getAllDataFileLocations()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getBatchSizeFailureThreshold()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getClusterName()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getCommitLogLocation()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getCompactionThroughputMbPerSec()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getCurrentGenerationNumber()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getDrainProgress()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getEndpointToHostId()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getHostIdMap()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getHostIdToEndpoint()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getJoiningNodes()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getKeyspaces()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getLeavingNodes()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getLiveNodes()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getLoadMap()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getLoadString()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getLocalHostId()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getLoggingLevels()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getMovingNodes()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getNaturalEndpoints(String,ByteBuffer)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getNaturalEndpoints(String,String,String)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getNonSystemKeyspaces()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getOperationMode()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getOwnership()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getPartitionerName()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getPendingRangeToEndpointMap(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getRangeToEndpointMap(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getRangeToRpcaddressMap(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getReleaseVersion()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getRemovalStatus()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getSavedCachesLocation()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getSchemaVersion()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getSnapshotDetails()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getStreamThroughputMbPerSec()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getTokenToEndpointMap()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getTokens()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getTokens(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getTombstoneFailureThreshold()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getTombstoneWarnThreshold()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getTraceProbability()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.getUnreachableNodes()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.isGossipRunning()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.isIncrementalBackupsEnabled()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.isInitialized()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.isJoined()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.isNativeTransportRunning()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.isRPCServerRunning()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.isStarting()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.joinRing()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.loadNewSSTables(String,String)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.move(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.rebuild(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.rebuildSecondaryIndex(String,String,String...)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.removeNode(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.repairAsync(String,Map<String, String>)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.rescheduleFailedDeletions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.resetLocalSchema()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.resumeBootstrap()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.sampleKeyRange()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.scrub(boolean,boolean,String,String...)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.scrub(boolean,boolean,boolean,String,String...)",n/a,1,0,n/a,n/a,5,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setBatchSizeFailureThreshold(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setCompactionThroughputMbPerSec(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setHintedHandoffThrottleInKB(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setIncrementalBackupsEnabled(boolean)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setLoggingLevel(String,String)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setStreamThroughputMbPerSec(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setTombstoneFailureThreshold(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setTombstoneWarnThreshold(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.setTraceProbability(double)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.startGossiping()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.startNativeTransport()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.startRPCServer()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.stopDaemon()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.stopGossiping()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.stopNativeTransport()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.stopRPCServer()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.takeMultipleTableSnapshot(String,String...)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.takeSnapshot(String,String...)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.takeTableSnapshot(String,String,String)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.trueSnapshotsSize()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.truncate(String,String)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.updateSnitch(String,Boolean,Integer,Integer,Double)",n/a,0,0,n/a,n/a,5,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.upgradeSSTables(String,boolean,String...)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.service.StorageServiceMBean.verify(boolean,String,String...)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.service.TruncateResponseHandler.TruncateResponseHandler(int)",1,0,n/a,8,0,1,3,1
"org.apache.cassandra.service.TruncateResponseHandler.get()",7,0,n/a,17,1,0,7,3
"org.apache.cassandra.service.TruncateResponseHandler.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.TruncateResponseHandler.response(MessageIn)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.service.WriteResponseHandler.WriteResponseHandler(Collection<InetAddress>,Collection<InetAddress>,ConsistencyLevel,Keyspace,Runnable,WriteType)",2,4,n/a,10,0,6,2,1
"org.apache.cassandra.service.WriteResponseHandler.WriteResponseHandler(InetAddress,WriteType)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.service.WriteResponseHandler.WriteResponseHandler(InetAddress,WriteType,Runnable)",3,1,n/a,4,0,3,1,1
"org.apache.cassandra.service.WriteResponseHandler.ackCount()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.WriteResponseHandler.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.WriteResponseHandler.response(MessageIn<T>)",2,1,n/a,5,0,1,2,2
"org.apache.cassandra.service.pager.AbstractQueryPager.AbstractQueryPager(ReadCommand,int)",3,0,n/a,8,0,2,5,1
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.Pager(DataLimits,int)",1,2,n/a,5,0,2,2,1
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.applyToPartition(RowIterator)",8,0,n/a,23,2,1,10,6
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.applyToRow(Row)",0,0,n/a,6,0,1,2,1
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.applyToStatic(Row)",1,0,n/a,6,0,1,3,2
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager.onClose()",5,0,n/a,18,1,0,7,3
"org.apache.cassandra.service.pager.AbstractQueryPager.fetchPage(int,ConsistencyLevel,ClientState)",9,0,n/a,8,0,3,5,2
"org.apache.cassandra.service.pager.AbstractQueryPager.fetchPageInternal(int,ReadOrderGroup)",9,0,n/a,8,0,2,5,2
"org.apache.cassandra.service.pager.AbstractQueryPager.isExhausted()",0,2,n/a,4,0,0,1,4
"org.apache.cassandra.service.pager.AbstractQueryPager.isPreviouslyReturnedPartition(DecoratedKey)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.pager.AbstractQueryPager.maxRemaining()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.pager.AbstractQueryPager.nextPageReadCommand(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.service.pager.AbstractQueryPager.recordLast(DecoratedKey,Row)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.pager.AbstractQueryPager.remainingInPartition()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.pager.AbstractQueryPager.restoreState(DecoratedKey,int,int)",0,0,n/a,6,0,3,3,1
"org.apache.cassandra.service.pager.AbstractQueryPager.startOrderGroup()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.MultiPartitionPager(Group,PagingState,int)",15,0,n/a,24,1,3,18,7
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator.PagersIterator(int,ConsistencyLevel,ClientState,ReadOrderGroup)",0,2,n/a,7,0,4,4,1
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator.close()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator.computeNext()",8,1,n/a,16,1,0,8,6
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator.setCounter(Counter)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.fetchPage(int,ConsistencyLevel,ClientState)",6,0,n/a,9,0,3,5,1
"org.apache.cassandra.service.pager.MultiPartitionPager.fetchPageInternal(int,ReadOrderGroup)",6,0,n/a,9,0,2,5,1
"org.apache.cassandra.service.pager.MultiPartitionPager.isExhausted()",1,2,n/a,12,1,0,7,5
"org.apache.cassandra.service.pager.MultiPartitionPager.maxRemaining()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.pager.MultiPartitionPager.startOrderGroup()",2,0,n/a,11,1,0,6,3
"org.apache.cassandra.service.pager.MultiPartitionPager.state()",4,0,n/a,8,0,0,4,3
"org.apache.cassandra.service.pager.PagingState.PagingState(ByteBuffer,RowMark,int,int)",0,1,n/a,7,0,4,4,1
"org.apache.cassandra.service.pager.PagingState.RowMark.RowMark(ByteBuffer,int)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.service.pager.PagingState.RowMark.clustering(CFMetaData)",3,0,n/a,8,0,1,3,3
"org.apache.cassandra.service.pager.PagingState.RowMark.create(CFMetaData,Row,int)",17,0,n/a,27,2,3,9,4
"org.apache.cassandra.service.pager.PagingState.RowMark.equals(Object)",1,0,n/a,8,0,1,4,3
"org.apache.cassandra.service.pager.PagingState.RowMark.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.pager.PagingState.RowMark.makeClusteringTypes(CFMetaData)",4,2,n/a,13,0,1,7,2
"org.apache.cassandra.service.pager.PagingState.RowMark.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.pager.PagingState.deserialize(ByteBuffer,int)",16,3,n/a,37,2,2,17,7
"org.apache.cassandra.service.pager.PagingState.equals(Object)",2,0,n/a,11,0,1,4,5
"org.apache.cassandra.service.pager.PagingState.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.pager.PagingState.serialize(int)",12,2,n/a,28,2,1,15,6
"org.apache.cassandra.service.pager.PagingState.serializedSize(int)",6,3,n/a,19,1,1,6,5
"org.apache.cassandra.service.pager.PagingState.toString()",2,0,n/a,9,0,0,1,1
"org.apache.cassandra.service.pager.QueryPager.fetchPage(int,ConsistencyLevel,ClientState)",n/a,1,1,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.service.pager.QueryPager.fetchPageInternal(int,ReadOrderGroup)",n/a,6,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.service.pager.QueryPager.isExhausted()",n/a,41,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.pager.QueryPager.maxRemaining()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.pager.QueryPager.startOrderGroup()",n/a,5,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.pager.QueryPager.state()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.service.pager.QueryPagers.QueryPagers()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.service.pager.QueryPagers.countPaged(CFMetaData,DecoratedKey,ColumnFilter,ClusteringIndexFilter,DataLimits,ConsistencyLevel,ClientState,int,int,boolean)",8,1,n/a,28,2,10,9,2
"org.apache.cassandra.service.pager.RangeNamesQueryPager.RangeNamesQueryPager(PartitionRangeReadCommand,PagingState,int)",5,0,n/a,10,1,3,5,2
"org.apache.cassandra.service.pager.RangeNamesQueryPager.isPreviouslyReturnedPartition(DecoratedKey)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.service.pager.RangeNamesQueryPager.makeExcludingKeyBounds(PartitionPosition)",4,1,n/a,14,1,1,4,3
"org.apache.cassandra.service.pager.RangeNamesQueryPager.nextPageReadCommand(int)",5,0,n/a,8,0,1,4,2
"org.apache.cassandra.service.pager.RangeNamesQueryPager.recordLast(DecoratedKey,Row)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.service.pager.RangeNamesQueryPager.state()",4,0,n/a,6,0,0,1,2
"org.apache.cassandra.service.pager.RangeSliceQueryPager.RangeSliceQueryPager(PartitionRangeReadCommand,PagingState,int)",5,0,n/a,11,1,3,6,2
"org.apache.cassandra.service.pager.RangeSliceQueryPager.isPreviouslyReturnedPartition(DecoratedKey)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.service.pager.RangeSliceQueryPager.makeKeyBounds(PartitionPosition,boolean)",6,1,n/a,16,1,2,4,5
"org.apache.cassandra.service.pager.RangeSliceQueryPager.nextPageReadCommand(int)",22,0,n/a,31,2,1,14,4
"org.apache.cassandra.service.pager.RangeSliceQueryPager.recordLast(DecoratedKey,Row)",3,0,n/a,9,1,2,4,3
"org.apache.cassandra.service.pager.RangeSliceQueryPager.state()",4,0,n/a,6,0,0,1,2
"org.apache.cassandra.service.pager.SinglePartitionPager.SinglePartitionPager(SinglePartitionReadCommand,PagingState,int)",3,0,n/a,10,1,3,5,2
"org.apache.cassandra.service.pager.SinglePartitionPager.isPreviouslyReturnedPartition(DecoratedKey)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.pager.SinglePartitionPager.key()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.pager.SinglePartitionPager.limits()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.pager.SinglePartitionPager.nextPageReadCommand(int)",3,0,n/a,4,0,1,1,2
"org.apache.cassandra.service.pager.SinglePartitionPager.recordLast(DecoratedKey,Row)",3,0,n/a,5,0,2,2,3
"org.apache.cassandra.service.pager.SinglePartitionPager.state()",3,0,n/a,6,0,0,1,2
"org.apache.cassandra.service.paxos.AbstractPaxosCallback.AbstractPaxosCallback(int,ConsistencyLevel)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.service.paxos.AbstractPaxosCallback.await()",5,0,n/a,12,1,0,4,3
"org.apache.cassandra.service.paxos.AbstractPaxosCallback.getResponseCount()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.paxos.AbstractPaxosCallback.isLatencyForSnitch()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.service.paxos.Commit.Commit(UUID,PartitionUpdate)",0,8,n/a,7,0,2,4,1
"org.apache.cassandra.service.paxos.Commit.CommitSerializer.deserialize(DataInputPlus,int)",4,21,n/a,9,0,2,6,2
"org.apache.cassandra.service.paxos.Commit.CommitSerializer.serialize(Commit,DataOutputPlus,int)",5,22,n/a,7,0,3,4,2
"org.apache.cassandra.service.paxos.Commit.CommitSerializer.serializedSize(Commit,int)",5,19,n/a,9,0,2,4,2
"org.apache.cassandra.service.paxos.Commit.emptyCommit(DecoratedKey,CFMetaData)",3,3,n/a,4,0,2,1,1
"org.apache.cassandra.service.paxos.Commit.equals(Object)",4,0,n/a,8,0,1,6,5
"org.apache.cassandra.service.paxos.Commit.hasBallot(UUID)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.service.paxos.Commit.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.paxos.Commit.isAfter(Commit)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.service.paxos.Commit.makeMutation()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.service.paxos.Commit.newPrepare(DecoratedKey,CFMetaData,UUID)",2,1,n/a,4,0,3,1,1
"org.apache.cassandra.service.paxos.Commit.newProposal(UUID,PartitionUpdate)",3,4,n/a,5,0,2,2,1
"org.apache.cassandra.service.paxos.Commit.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.paxos.CommitVerbHandler.doVerb(MessageIn<Commit>,int)",5,0,n/a,6,0,2,3,1
"org.apache.cassandra.service.paxos.PaxosState.PaxosState(Commit,Commit,Commit)",10,2,n/a,8,0,3,5,3
"org.apache.cassandra.service.paxos.PaxosState.PaxosState(DecoratedKey,CFMetaData)",4,1,n/a,4,0,2,1,1
"org.apache.cassandra.service.paxos.PaxosState.commit(Commit)",17,3,n/a,30,2,1,9,2
"org.apache.cassandra.service.paxos.PaxosState.prepare(Commit)",20,0,n/a,33,3,1,14,2
"org.apache.cassandra.service.paxos.PaxosState.propose(Commit)",19,0,n/a,32,3,1,14,3
"org.apache.cassandra.service.paxos.PrepareCallback.PrepareCallback(DecoratedKey,CFMetaData,int,ConsistencyLevel)",4,1,n/a,8,0,4,4,1
"org.apache.cassandra.service.paxos.PrepareCallback.replicasMissingMostRecentCommit()",5,1,n/a,4,2,0,2,1
"org.apache.cassandra.service.paxos.PrepareCallback.response(MessageIn<PrepareResponse>)",9,0,n/a,25,1,1,15,7
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponse(boolean,Commit,Commit)",5,1,n/a,8,0,3,5,1
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponseSerializer.deserialize(DataInputPlus,int)",8,21,n/a,17,1,2,9,2
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponseSerializer.serialize(PrepareResponse,DataOutputPlus,int)",5,22,n/a,14,1,3,6,2
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponseSerializer.serializedSize(PrepareResponse,int)",5,19,n/a,15,1,2,6,2
"org.apache.cassandra.service.paxos.PrepareResponse.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.service.paxos.PrepareVerbHandler.doVerb(MessageIn<Commit>,int)",4,0,n/a,6,0,2,3,1
"org.apache.cassandra.service.paxos.ProposeCallback.ProposeCallback(int,int,boolean,ConsistencyLevel)",1,1,n/a,6,0,4,3,1
"org.apache.cassandra.service.paxos.ProposeCallback.getAcceptCount()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.service.paxos.ProposeCallback.isFullyRefused()",2,1,n/a,7,0,0,1,2
"org.apache.cassandra.service.paxos.ProposeCallback.isSuccessful()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.service.paxos.ProposeCallback.response(MessageIn<Boolean>)",8,0,n/a,12,1,1,7,6
"org.apache.cassandra.service.paxos.ProposeVerbHandler.doVerb(MessageIn<Commit>,int)",4,0,n/a,6,0,2,3,1
"org.apache.cassandra.streaming.ConnectionHandler.ConnectionHandler(StreamSession)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.streaming.ConnectionHandler.IncomingMessageHandler.IncomingMessageHandler(StreamSession)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.IncomingMessageHandler.name()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.ConnectionHandler.IncomingMessageHandler.run()",10,0,n/a,34,3,0,11,5
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.MessageHandler(StreamSession)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.close()",3,5,n/a,8,0,0,2,2
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.getReadChannel(Socket)",3,1,n/a,8,0,1,2,2
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.getWriteChannel(Socket)",5,2,n/a,9,0,1,4,2
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.isClosed()",1,4,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.name()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.sendInitMessage(Socket,boolean)",11,2,n/a,16,0,2,5,1
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.signalCloseDone()",4,2,n/a,15,1,0,4,2
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler.start(Socket,int)",3,4,n/a,6,0,2,3,1
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.OutgoingMessageHandler(StreamSession)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.enqueue(StreamMessage)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.name()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.run()",12,0,n/a,34,3,0,14,7
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler.sendMessage(DataOutputStreamPlus,StreamMessage)",5,2,n/a,17,1,2,6,3
"org.apache.cassandra.streaming.ConnectionHandler.close()",7,0,n/a,7,0,0,4,3
"org.apache.cassandra.streaming.ConnectionHandler.initiate()",10,0,n/a,19,0,0,8,1
"org.apache.cassandra.streaming.ConnectionHandler.initiateOnReceivingSide(Socket,boolean,int)",2,0,n/a,14,0,3,3,2
"org.apache.cassandra.streaming.ConnectionHandler.isOutgoingConnected()",1,0,n/a,7,0,0,1,2
"org.apache.cassandra.streaming.ConnectionHandler.sendMessage(StreamMessage)",3,1,n/a,6,0,1,3,2
"org.apache.cassandra.streaming.ConnectionHandler.sendMessages(Collection<? extends StreamMessage>)",1,0,n/a,10,0,1,2,2
"org.apache.cassandra.streaming.DefaultConnectionFactory.createConnection(InetAddress)",9,0,n/a,38,3,1,14,5
"org.apache.cassandra.streaming.ProgressInfo.Direction.Direction(int)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.ProgressInfo.Direction.fromByte(byte)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.streaming.ProgressInfo.ProgressInfo(InetAddress,int,String,Direction,long,long)",0,1,n/a,10,0,6,7,1
"org.apache.cassandra.streaming.ProgressInfo.equals(Object)",4,0,n/a,15,0,1,14,8
"org.apache.cassandra.streaming.ProgressInfo.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.ProgressInfo.isCompleted()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.ProgressInfo.toString()",14,2,n/a,12,0,0,8,2
"org.apache.cassandra.streaming.ReplicationFinishedVerbHandler.doVerb(MessageIn,int)",6,0,n/a,8,0,2,5,2
"org.apache.cassandra.streaming.SessionInfo.SessionInfo(InetAddress,int,InetAddress,Collection<StreamSummary>,Collection<StreamSummary>,State)",4,1,n/a,16,0,6,8,1
"org.apache.cassandra.streaming.SessionInfo.getReceivingFiles()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getSendingFiles()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFiles(Collection<StreamSummary>)",0,2,n/a,7,0,1,4,2
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesCompleted(Collection<ProgressInfo>)",4,2,n/a,4,2,1,3,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesReceived()",2,2,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesSent()",2,2,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesToReceive()",1,2,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalFilesToSend()",1,2,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeInProgress(Collection<ProgressInfo>)",0,2,n/a,7,0,1,4,2
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeReceived()",2,3,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeSent()",2,3,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeToReceive()",1,3,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizeToSend()",1,3,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.getTotalSizes(Collection<StreamSummary>)",0,2,n/a,7,0,1,4,2
"org.apache.cassandra.streaming.SessionInfo.isFailed()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.SessionInfo.updateProgress(ProgressInfo)",2,2,n/a,12,0,1,3,2
"org.apache.cassandra.streaming.StreamConnectionFactory.createConnection(InetAddress)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.addSessionInfo(SessionInfo)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.connectAllStreamSessions()",3,1,n/a,7,1,0,2,2
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.getAllSessionInfo()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.getAllStreamSessions()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.getOrCreateNextSession(InetAddress,InetAddress)",6,3,n/a,17,1,2,7,3
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.getOrCreateSessionById(InetAddress,int,InetAddress)",3,1,n/a,10,1,3,5,2
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.hasActiveSessions()",2,1,n/a,10,1,0,5,4
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData.updateProgress(ProgressInfo)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.StreamCoordinator(int,boolean,boolean,StreamConnectionFactory)",0,0,n/a,7,0,4,4,1
"org.apache.cassandra.streaming.StreamCoordinator.StreamSessionConnector.StreamSessionConnector(StreamSession)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.StreamSessionConnector.run()",4,0,n/a,6,0,0,2,1
"org.apache.cassandra.streaming.StreamCoordinator.addSessionInfo(SessionInfo)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.streaming.StreamCoordinator.connectAllStreamSessions()",2,0,n/a,5,0,0,2,2
"org.apache.cassandra.streaming.StreamCoordinator.getAllSessionInfo()",4,0,n/a,9,1,0,4,2
"org.apache.cassandra.streaming.StreamCoordinator.getAllStreamSessions()",4,0,n/a,9,1,0,4,2
"org.apache.cassandra.streaming.StreamCoordinator.getHostData(InetAddress)",2,1,n/a,7,0,1,4,2
"org.apache.cassandra.streaming.StreamCoordinator.getOrCreateHostData(InetAddress)",3,4,n/a,10,1,1,5,2
"org.apache.cassandra.streaming.StreamCoordinator.getOrCreateNextSession(InetAddress,InetAddress)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.streaming.StreamCoordinator.getOrCreateSessionById(InetAddress,int,InetAddress)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.streaming.StreamCoordinator.getPeers()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamCoordinator.hasActiveSessions()",2,0,n/a,12,1,0,4,3
"org.apache.cassandra.streaming.StreamCoordinator.isReceiving()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamCoordinator.setConnectionFactory(StreamConnectionFactory)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamCoordinator.sliceSSTableDetails(Collection<SSTableStreamingSections>)",12,1,n/a,23,2,1,15,3
"org.apache.cassandra.streaming.StreamCoordinator.transferFiles(InetAddress,Collection<SSTableStreamingSections>)",6,0,n/a,18,2,2,8,3
"org.apache.cassandra.streaming.StreamCoordinator.updateProgress(ProgressInfo)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamEvent.ProgressEvent.ProgressEvent(UUID,ProgressInfo)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.streaming.StreamEvent.ProgressEvent.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.StreamEvent.SessionCompleteEvent.SessionCompleteEvent(StreamSession)",5,3,n/a,8,0,1,5,1
"org.apache.cassandra.streaming.StreamEvent.SessionPreparedEvent.SessionPreparedEvent(UUID,SessionInfo)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.streaming.StreamEvent.StreamEvent(Type,UUID)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.streaming.StreamEventHandler.handleStreamEvent(StreamEvent)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.streaming.StreamException.StreamException(StreamState,String)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.streaming.StreamException.StreamException(StreamState,String,Throwable)",1,0,n/a,5,0,3,2,1
"org.apache.cassandra.streaming.StreamManager.StreamRateLimiter.StreamRateLimiter(InetAddress)",10,1,n/a,12,0,1,7,3
"org.apache.cassandra.streaming.StreamManager.StreamRateLimiter.acquire(int)",2,2,n/a,6,0,1,3,2
"org.apache.cassandra.streaming.StreamManager.StreamRateLimiter.mayUpdateThroughput(double,RateLimiter)",2,2,n/a,8,0,2,4,3
"org.apache.cassandra.streaming.StreamManager.addNotificationListener(NotificationListener,NotificationFilter,Object)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.streaming.StreamManager.getCurrentStreams()",8,0,n/a,4,2,0,2,1
"org.apache.cassandra.streaming.StreamManager.getNotificationInfo()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamManager.getRateLimiter(InetAddress)",1,0,n/a,12,0,1,1,1
"org.apache.cassandra.streaming.StreamManager.getReceivingStream(UUID)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamManager.register(StreamResultFuture)",6,0,n/a,4,2,1,4,1
"org.apache.cassandra.streaming.StreamManager.registerReceiving(StreamResultFuture)",6,0,n/a,4,2,1,4,1
"org.apache.cassandra.streaming.StreamManager.removeNotificationListener(NotificationListener)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamManager.removeNotificationListener(NotificationListener,NotificationFilter,Object)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.streaming.StreamManagerMBean.getCurrentStreams()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.streaming.StreamPlan.StreamPlan(String)",1,4,n/a,9,0,1,1,1
"org.apache.cassandra.streaming.StreamPlan.StreamPlan(String,boolean)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.streaming.StreamPlan.StreamPlan(String,long,int,boolean,boolean)",2,4,n/a,6,0,5,3,1
"org.apache.cassandra.streaming.StreamPlan.connectionFactory(StreamConnectionFactory)",1,0,n/a,11,0,1,2,1
"org.apache.cassandra.streaming.StreamPlan.execute()",1,7,n/a,9,0,0,1,1
"org.apache.cassandra.streaming.StreamPlan.flushBeforeTransfer(boolean)",0,2,n/a,12,0,1,2,1
"org.apache.cassandra.streaming.StreamPlan.isEmpty()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.StreamPlan.listeners(StreamEventHandler,StreamEventHandler...)",2,3,n/a,7,0,2,4,2
"org.apache.cassandra.streaming.StreamPlan.requestRanges(InetAddress,InetAddress,String,Collection<Range<Token>>)",1,2,n/a,13,0,4,1,1
"org.apache.cassandra.streaming.StreamPlan.requestRanges(InetAddress,InetAddress,String,Collection<Range<Token>>,String...)",3,1,n/a,16,0,5,3,1
"org.apache.cassandra.streaming.StreamPlan.transferFiles(InetAddress,Collection<SSTableStreamingSections>)",1,1,n/a,13,0,2,2,1
"org.apache.cassandra.streaming.StreamPlan.transferRanges(InetAddress,InetAddress,String,Collection<Range<Token>>)",1,0,n/a,13,0,4,1,1
"org.apache.cassandra.streaming.StreamPlan.transferRanges(InetAddress,InetAddress,String,Collection<Range<Token>>,String...)",3,3,n/a,16,0,5,3,1
"org.apache.cassandra.streaming.StreamPlan.transferRanges(InetAddress,String,Collection<Range<Token>>,String...)",1,0,n/a,9,0,4,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.StreamDeserializer(CFMetaData,DataInputPlus,Version,SerializationHeader)",3,2,n/a,8,0,4,5,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.checkForExceptions()",0,1,n/a,5,0,0,2,2
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.close()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.columns()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.hasNext()",4,0,n/a,16,2,0,6,4
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.isReverseOrder()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.maybeMarkLocalToBeCleared(Row)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.metadata()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.newPartition()",5,1,n/a,8,0,0,5,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.next()",4,0,n/a,10,0,0,2,3
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.partitionKey()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.partitionLevelDeletion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.staticRow()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer.stats()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamReader.StreamReader(FileMessageHeader,StreamSession)",0,2,n/a,12,0,2,9,1
"org.apache.cassandra.streaming.StreamReader.createWriter(ColumnFamilyStore,long,long,Type)",10,2,n/a,8,0,4,5,2
"org.apache.cassandra.streaming.StreamReader.drain(InputStream,long)",3,2,n/a,16,1,2,10,4
"org.apache.cassandra.streaming.StreamReader.read(ReadableByteChannel)",22,1,n/a,47,2,1,23,6
"org.apache.cassandra.streaming.StreamReader.totalSize()",0,2,n/a,7,0,0,4,2
"org.apache.cassandra.streaming.StreamReader.writePartition(StreamDeserializer,SSTableMultiWriter,ColumnFamilyStore)",4,2,n/a,7,0,3,4,1
"org.apache.cassandra.streaming.StreamReceiveTask.OnCompletionRunnable.OnCompletionRunnable(StreamReceiveTask)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamReceiveTask.OnCompletionRunnable.run()",28,0,n/a,75,7,0,31,8
"org.apache.cassandra.streaming.StreamReceiveTask.StreamReceiveTask(StreamSession,UUID,int,long)",3,0,n/a,10,0,4,5,1
"org.apache.cassandra.streaming.StreamReceiveTask.abort()",3,0,n/a,15,0,0,6,2
"org.apache.cassandra.streaming.StreamReceiveTask.getTotalNumberOfFiles()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamReceiveTask.getTotalSize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamReceiveTask.received(SSTableMultiWriter)",6,0,n/a,17,1,1,7,3
"org.apache.cassandra.streaming.StreamRequest.StreamRequest(String,Collection<Range<Token>>,Collection<String>,long)",1,1,n/a,7,0,4,4,1
"org.apache.cassandra.streaming.StreamRequest.StreamRequestSerializer.deserialize(DataInputPlus,int)",15,21,n/a,18,1,2,17,3
"org.apache.cassandra.streaming.StreamRequest.StreamRequestSerializer.serialize(StreamRequest,DataOutputPlus,int)",10,22,n/a,15,1,3,10,3
"org.apache.cassandra.streaming.StreamRequest.StreamRequestSerializer.serializedSize(StreamRequest,int)",9,19,n/a,15,1,2,10,3
"org.apache.cassandra.streaming.StreamResultFuture.StreamResultFuture(UUID,String,StreamCoordinator)",4,2,n/a,17,0,3,5,3
"org.apache.cassandra.streaming.StreamResultFuture.StreamResultFuture(UUID,String,boolean,boolean)",3,1,n/a,4,0,4,1,1
"org.apache.cassandra.streaming.StreamResultFuture.addEventListener(StreamEventHandler)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.streaming.StreamResultFuture.attachSocket(InetAddress,int,Socket,boolean,int)",4,1,n/a,6,0,5,3,1
"org.apache.cassandra.streaming.StreamResultFuture.createAndRegister(UUID,String,StreamCoordinator)",2,1,n/a,6,0,3,3,1
"org.apache.cassandra.streaming.StreamResultFuture.equals(Object)",3,0,n/a,8,0,1,6,4
"org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent(StreamEvent)",1,3,n/a,6,0,1,2,2
"org.apache.cassandra.streaming.StreamResultFuture.getCurrentState()",2,2,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.StreamResultFuture.handleProgress(ProgressInfo)",3,0,n/a,5,0,1,2,1
"org.apache.cassandra.streaming.StreamResultFuture.handleSessionComplete(StreamSession)",7,0,n/a,8,0,1,5,1
"org.apache.cassandra.streaming.StreamResultFuture.handleSessionPrepared(StreamSession)",11,0,n/a,14,0,1,5,1
"org.apache.cassandra.streaming.StreamResultFuture.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.StreamResultFuture.init(UUID,String,Collection<StreamEventHandler>,StreamCoordinator)",6,0,n/a,17,1,4,9,4
"org.apache.cassandra.streaming.StreamResultFuture.initReceivingSide(int,UUID,String,InetAddress,Socket,boolean,int,boolean,boolean)",6,1,n/a,22,1,9,8,2
"org.apache.cassandra.streaming.StreamResultFuture.maybeComplete()",8,1,n/a,17,2,0,7,3
"org.apache.cassandra.streaming.StreamSession.SSTableStreamingSections.SSTableStreamingSections(Ref<SSTableReader>,List<Pair<Long, Long>>,long,long)",0,2,n/a,7,0,4,4,1
"org.apache.cassandra.streaming.StreamSession.StreamSession(InetAddress,InetAddress,StreamConnectionFactory,int,boolean,boolean)",2,2,n/a,18,0,6,8,1
"org.apache.cassandra.streaming.StreamSession.addStreamRequest(String,Collection<Range<Token>>,Collection<String>,long)",2,2,n/a,11,0,4,1,1
"org.apache.cassandra.streaming.StreamSession.addTransferFiles(Collection<SSTableStreamingSections>)",12,1,n/a,27,2,1,16,5
"org.apache.cassandra.streaming.StreamSession.addTransferRanges(String,Collection<Range<Token>>,Collection<String>,boolean,long)",6,1,n/a,28,1,5,9,3
"org.apache.cassandra.streaming.StreamSession.beforeChange(InetAddress,EndpointState,ApplicationState,VersionedValue)",0,0,n/a,1,0,4,0,1
"org.apache.cassandra.streaming.StreamSession.closeSession(State)",8,7,n/a,16,2,1,7,4
"org.apache.cassandra.streaming.StreamSession.complete()",4,1,n/a,19,2,0,6,3
"org.apache.cassandra.streaming.StreamSession.createConnection()",1,0,n/a,5,0,0,2,1
"org.apache.cassandra.streaming.StreamSession.description()",0,0,n/a,4,0,0,1,2
"org.apache.cassandra.streaming.StreamSession.doRetry(FileMessageHeader,Throwable)",7,1,n/a,10,0,2,5,2
"org.apache.cassandra.streaming.StreamSession.fileSent(FileMessageHeader)",5,1,n/a,17,1,1,6,2
"org.apache.cassandra.streaming.StreamSession.flushSSTables(Iterable<ColumnFamilyStore>)",4,1,n/a,11,0,1,4,2
"org.apache.cassandra.streaming.StreamSession.getColumnFamilyStores(String,Collection<String>)",8,1,n/a,15,1,2,6,3
"org.apache.cassandra.streaming.StreamSession.getSSTableSectionsForRanges(Collection<Range<Token>>,Collection<ColumnFamilyStore>,long)",25,1,n/a,51,5,3,24,11
"org.apache.cassandra.streaming.StreamSession.getSessionInfo()",9,0,n/a,13,0,0,7,3
"org.apache.cassandra.streaming.StreamSession.getTransaction(UUID)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.streaming.StreamSession.init(StreamResultFuture)",0,0,n/a,10,0,1,1,1
"org.apache.cassandra.streaming.StreamSession.isIncremental()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamSession.isSuccess()",0,0,n/a,9,0,0,1,1
"org.apache.cassandra.streaming.StreamSession.keepSSTableLevel()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamSession.maybeCompleted()",8,3,n/a,24,3,0,11,5
"org.apache.cassandra.streaming.StreamSession.messageReceived(StreamMessage)",6,0,n/a,27,1,1,22,7
"org.apache.cassandra.streaming.StreamSession.onAlive(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.streaming.StreamSession.onChange(InetAddress,ApplicationState,VersionedValue)",0,0,n/a,1,0,3,0,1
"org.apache.cassandra.streaming.StreamSession.onDead(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.streaming.StreamSession.onError(Throwable)",6,2,n/a,14,0,1,4,2
"org.apache.cassandra.streaming.StreamSession.onInitializationComplete()",9,1,n/a,16,0,0,8,3
"org.apache.cassandra.streaming.StreamSession.onJoin(InetAddress,EndpointState)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.streaming.StreamSession.onRemove(InetAddress)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.StreamSession.onRestart(InetAddress,EndpointState)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.streaming.StreamSession.planId()",0,4,n/a,4,0,0,1,2
"org.apache.cassandra.streaming.StreamSession.prepare(Collection<StreamRequest>,Collection<StreamSummary>)",11,1,n/a,23,1,2,12,6
"org.apache.cassandra.streaming.StreamSession.prepareReceiving(StreamSummary)",2,1,n/a,5,0,1,2,2
"org.apache.cassandra.streaming.StreamSession.progress(Descriptor,Direction,long,long)",3,0,n/a,5,0,4,2,1
"org.apache.cassandra.streaming.StreamSession.receive(IncomingFileMessage)",7,1,n/a,14,0,1,5,1
"org.apache.cassandra.streaming.StreamSession.received(UUID,int)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.streaming.StreamSession.retry(UUID,int)",3,1,n/a,11,0,2,2,1
"org.apache.cassandra.streaming.StreamSession.sessionFailed()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.StreamSession.sessionIndex()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamSession.start()",12,0,n/a,22,1,0,10,5
"org.apache.cassandra.streaming.StreamSession.startStreamingFiles()",7,2,n/a,13,1,0,7,3
"org.apache.cassandra.streaming.StreamSession.state()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.StreamSession.state(State)",0,8,n/a,9,0,1,1,1
"org.apache.cassandra.streaming.StreamSession.taskCompleted(StreamReceiveTask)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.streaming.StreamSession.taskCompleted(StreamTransferTask)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.streaming.StreamState.StreamState(UUID,String,Set<SessionInfo>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.streaming.StreamState.hasFailedSession()",3,0,n/a,4,2,0,2,1
"org.apache.cassandra.streaming.StreamSummary.StreamSummary(UUID,int,long)",0,2,n/a,6,0,3,3,1
"org.apache.cassandra.streaming.StreamSummary.StreamSummarySerializer.deserialize(DataInputPlus,int)",4,21,n/a,7,0,2,4,1
"org.apache.cassandra.streaming.StreamSummary.StreamSummarySerializer.serialize(StreamSummary,DataOutputPlus,int)",3,22,n/a,7,0,3,3,1
"org.apache.cassandra.streaming.StreamSummary.StreamSummarySerializer.serializedSize(StreamSummary,int)",3,19,n/a,7,0,2,4,1
"org.apache.cassandra.streaming.StreamSummary.equals(Object)",3,0,n/a,8,0,1,6,6
"org.apache.cassandra.streaming.StreamSummary.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.StreamSummary.toString()",9,0,n/a,10,0,0,6,1
"org.apache.cassandra.streaming.StreamTask.StreamTask(StreamSession,UUID)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.streaming.StreamTask.abort()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.streaming.StreamTask.getSummary()",3,0,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.StreamTask.getTotalNumberOfFiles()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.streaming.StreamTask.getTotalSize()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.streaming.StreamTransferTask.StreamTransferTask(StreamSession,UUID)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.streaming.StreamTransferTask.abort()",8,0,n/a,25,2,0,16,7
"org.apache.cassandra.streaming.StreamTransferTask.addTransferFile(Ref<SSTableReader>,long,List<Pair<Long, Long>>,long)",8,0,n/a,7,0,4,4,2
"org.apache.cassandra.streaming.StreamTransferTask.complete(int)",6,1,n/a,22,1,1,11,4
"org.apache.cassandra.streaming.StreamTransferTask.createMessageForRetry(int)",3,0,n/a,8,0,1,4,2
"org.apache.cassandra.streaming.StreamTransferTask.getFileMessages()",2,0,n/a,6,0,0,1,1
"org.apache.cassandra.streaming.StreamTransferTask.getTotalNumberOfFiles()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamTransferTask.getTotalSize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.StreamTransferTask.scheduleTimeout(int,long,TimeUnit)",6,0,n/a,9,3,3,9,2
"org.apache.cassandra.streaming.StreamWriter.StreamWriter(SSTableReader,Collection<Pair<Long, Long>>,StreamSession)",1,2,n/a,7,0,3,4,1
"org.apache.cassandra.streaming.StreamWriter.totalSize()",0,1,n/a,7,0,0,4,2
"org.apache.cassandra.streaming.StreamWriter.write(DataOutputStreamPlus)",13,1,n/a,46,3,1,20,7
"org.apache.cassandra.streaming.StreamWriter.write(RandomAccessReader,ChecksumValidator,int,long,long)",8,1,n/a,24,0,5,8,2
"org.apache.cassandra.streaming.compress.CompressedInputStream.CompressedInputStream(InputStream,CompressionInfo,ChecksumType,Supplier<Double>)",7,1,n/a,14,0,4,6,1
"org.apache.cassandra.streaming.compress.CompressedInputStream.Reader.Reader(InputStream,CompressionInfo,BlockingQueue<byte[]>)",1,1,n/a,6,0,3,3,1
"org.apache.cassandra.streaming.compress.CompressedInputStream.Reader.runMayThrow()",5,1,n/a,22,3,0,13,4
"org.apache.cassandra.streaming.compress.CompressedInputStream.decompress(byte[])",11,1,n/a,18,1,1,9,3
"org.apache.cassandra.streaming.compress.CompressedInputStream.getTotalCompressedBytesRead()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.compress.CompressedInputStream.position(long)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.streaming.compress.CompressedInputStream.read()",4,0,n/a,19,2,0,9,6
"org.apache.cassandra.streaming.compress.CompressedStreamReader.CompressedStreamReader(FileMessageHeader,StreamSession)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.streaming.compress.CompressedStreamReader.read(ReadableByteChannel)",26,1,n/a,56,3,1,28,7
"org.apache.cassandra.streaming.compress.CompressedStreamReader.totalSize()",0,3,n/a,9,0,0,4,2
"org.apache.cassandra.streaming.compress.CompressedStreamWriter.CompressedStreamWriter(SSTableReader,Collection<Pair<Long, Long>>,CompressionInfo,StreamSession)",1,1,n/a,5,0,4,2,1
"org.apache.cassandra.streaming.compress.CompressedStreamWriter.getTransferSections(Chunk[])",6,1,n/a,29,3,1,12,5
"org.apache.cassandra.streaming.compress.CompressedStreamWriter.totalSize()",0,2,n/a,9,0,0,4,2
"org.apache.cassandra.streaming.compress.CompressedStreamWriter.write(DataOutputStreamPlus)",9,1,n/a,29,3,1,15,3
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfo(Chunk[],CompressionParams)",0,3,n/a,6,0,2,3,2
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfoSerializer.deserialize(DataInputPlus,int)",4,21,n/a,13,0,2,10,3
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfoSerializer.serialize(CompressionInfo,DataOutputPlus,int)",4,22,n/a,14,1,3,10,3
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfoSerializer.serializedSize(CompressionInfo,int)",4,19,n/a,13,0,2,10,3
"org.apache.cassandra.streaming.management.ProgressInfoCompositeData.fromCompositeData(CompositeData)",5,0,n/a,17,1,1,4,2
"org.apache.cassandra.streaming.management.ProgressInfoCompositeData.toCompositeData(UUID,ProgressInfo)",13,0,n/a,19,1,2,11,2
"org.apache.cassandra.streaming.management.SessionCompleteEventCompositeData.toCompositeData(SessionCompleteEvent)",8,0,n/a,15,1,1,7,2
"org.apache.cassandra.streaming.management.SessionInfoCompositeData.fromArrayOfCompositeData(CompositeData[],Function<CompositeData, T>)",3,4,n/a,4,0,2,1,1
"org.apache.cassandra.streaming.management.SessionInfoCompositeData.fromCompositeData(CompositeData)",18,0,n/a,4,2,1,17,4
"org.apache.cassandra.streaming.management.SessionInfoCompositeData.toArrayOfCompositeData(Collection<T>,Function<T, CompositeData>)",4,4,n/a,5,0,2,2,1
"org.apache.cassandra.streaming.management.SessionInfoCompositeData.toCompositeData(UUID,SessionInfo)",26,0,n/a,4,2,2,17,2
"org.apache.cassandra.streaming.management.StreamEventJMXNotifier.handleStreamEvent(StreamEvent)",19,0,n/a,33,2,1,20,6
"org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onFailure(Throwable)",7,0,n/a,8,0,1,3,1
"org.apache.cassandra.streaming.management.StreamEventJMXNotifier.onSuccess(StreamState)",6,0,n/a,8,0,1,3,1
"org.apache.cassandra.streaming.management.StreamStateCompositeData.fromCompositeData(CompositeData)",10,1,n/a,4,2,1,7,1
"org.apache.cassandra.streaming.management.StreamStateCompositeData.toCompositeData(StreamState)",23,1,n/a,4,2,1,27,5
"org.apache.cassandra.streaming.management.StreamSummaryCompositeData.fromCompositeData(CompositeData)",3,0,n/a,7,0,1,2,1
"org.apache.cassandra.streaming.management.StreamSummaryCompositeData.toCompositeData(StreamSummary)",7,0,n/a,15,1,1,7,2
"org.apache.cassandra.streaming.messages.CompleteMessage.CompleteMessage()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.messages.CompleteMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeader(UUID,int,Version,Type,long,List<Pair<Long, Long>>,CompressionInfo,long,int,Component)",0,1,n/a,22,0,10,10,1
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer.deserialize(DataInputPlus,int)",19,21,n/a,21,0,2,18,4
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer.serialize(FileMessageHeader,DataOutputPlus,int)",15,22,n/a,23,1,3,17,7
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer.serializedSize(FileMessageHeader,int)",13,19,n/a,20,1,2,15,4
"org.apache.cassandra.streaming.messages.FileMessageHeader.equals(Object)",3,0,n/a,8,0,1,6,5
"org.apache.cassandra.streaming.messages.FileMessageHeader.hashCode()",1,0,n/a,7,0,0,3,1
"org.apache.cassandra.streaming.messages.FileMessageHeader.size()",0,1,n/a,19,1,0,7,4
"org.apache.cassandra.streaming.messages.FileMessageHeader.toString()",22,0,n/a,16,0,0,12,1
"org.apache.cassandra.streaming.messages.IncomingFileMessage.IncomingFileMessage(SSTableMultiWriter,FileMessageHeader)",1,1,n/a,6,0,2,3,1
"org.apache.cassandra.streaming.messages.IncomingFileMessage.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.messages.OutgoingFileMessage.OutgoingFileMessage(Ref<SSTableReader>,int,long,List<Pair<Long, Long>>,long,boolean)",9,1,n/a,23,1,6,9,4
"org.apache.cassandra.streaming.messages.OutgoingFileMessage.complete()",1,2,n/a,8,1,0,3,2
"org.apache.cassandra.streaming.messages.OutgoingFileMessage.serialize(DataOutputStreamPlus,int,StreamSession)",5,1,n/a,14,1,3,6,3
"org.apache.cassandra.streaming.messages.OutgoingFileMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.messages.PrepareMessage.PrepareMessage()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.messages.PrepareMessage.toString()",9,0,n/a,12,0,0,8,2
"org.apache.cassandra.streaming.messages.ReceivedMessage.ReceivedMessage(UUID,int)",1,1,n/a,6,0,2,3,1
"org.apache.cassandra.streaming.messages.ReceivedMessage.toString()",6,0,n/a,7,0,0,3,1
"org.apache.cassandra.streaming.messages.RetryMessage.RetryMessage(UUID,int)",1,1,n/a,6,0,2,3,1
"org.apache.cassandra.streaming.messages.RetryMessage.toString()",6,0,n/a,7,0,0,3,1
"org.apache.cassandra.streaming.messages.SessionFailedMessage.SessionFailedMessage()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.streaming.messages.SessionFailedMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessage(InetAddress,int,UUID,String,boolean,boolean,boolean)",0,2,n/a,10,0,7,7,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessageSerializer.deserialize(DataInputPlus,int)",8,21,n/a,11,0,2,8,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessageSerializer.serialize(StreamInitMessage,DataOutputPlus,int)",7,22,n/a,10,0,3,7,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessageSerializer.serializedSize(StreamInitMessage,int)",7,19,n/a,11,0,2,8,1
"org.apache.cassandra.streaming.messages.StreamInitMessage.createMessage(boolean,int)",10,1,n/a,39,2,2,19,3
"org.apache.cassandra.streaming.messages.StreamMessage.Serializer.deserialize(ReadableByteChannel,int,StreamSession)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.streaming.messages.StreamMessage.Serializer.serialize(V,DataOutputStreamPlus,int,StreamSession)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.streaming.messages.StreamMessage.StreamMessage(Type)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.streaming.messages.StreamMessage.Type.Type(int,int,Serializer)",1,5,n/a,5,0,3,1,1
"org.apache.cassandra.streaming.messages.StreamMessage.Type.Type(int,int,Serializer,Serializer)",0,2,n/a,8,0,4,4,1
"org.apache.cassandra.streaming.messages.StreamMessage.Type.get(byte)",2,1,n/a,9,1,1,4,3
"org.apache.cassandra.streaming.messages.StreamMessage.deserialize(ReadableByteChannel,int,StreamSession)",7,1,n/a,21,1,3,9,3
"org.apache.cassandra.streaming.messages.StreamMessage.getPriority()",0,2,n/a,7,0,0,1,1
"org.apache.cassandra.streaming.messages.StreamMessage.serialize(StreamMessage,DataOutputStreamPlus,int,StreamSession)",5,1,n/a,9,0,4,5,1
"org.apache.cassandra.thrift.CassandraServer.CassandraServer()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.ThriftCASRequest(List<LegacyCell>,PartitionUpdate,int)",2,1,n/a,8,0,3,5,1
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.appliesTo(FilteredPartition)",21,0,n/a,45,4,1,24,12
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.expectedToUnfilteredRowIterator()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.makeUpdates(FilteredPartition)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest.readCommand(int)",20,0,n/a,21,1,1,11,4
"org.apache.cassandra.thrift.CassandraServer.add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel)",38,0,n/a,54,2,4,28,8
"org.apache.cassandra.thrift.CassandraServer.addColumnOrSuperColumn(List<LegacyCell>,CFMetaData,ColumnOrSuperColumn,int)",10,1,n/a,29,2,4,11,7
"org.apache.cassandra.thrift.CassandraServer.addRange(CFMetaData,LegacyDeletionInfo,Bound,Bound,long,int)",4,2,n/a,4,0,6,1,1
"org.apache.cassandra.thrift.CassandraServer.atomic_batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>>,ConsistencyLevel)",18,0,n/a,31,2,2,11,4
"org.apache.cassandra.thrift.CassandraServer.batch_mutate(Map<ByteBuffer, Map<String, List<Mutation>>>,ConsistencyLevel)",18,0,n/a,31,2,2,11,4
"org.apache.cassandra.thrift.CassandraServer.cas(ByteBuffer,String,List<Column>,List<Column>,ConsistencyLevel,ConsistencyLevel)",58,0,n/a,81,2,6,38,10
"org.apache.cassandra.thrift.CassandraServer.cellFromColumn(CFMetaData,LegacyCellName,Column)",4,1,n/a,7,0,3,2,3
"org.apache.cassandra.thrift.CassandraServer.createMutationList(ConsistencyLevel,Map<ByteBuffer, Map<String, List<Mutation>>>,boolean)",42,2,n/a,72,4,3,45,16
"org.apache.cassandra.thrift.CassandraServer.deleteColumnOrSuperColumn(LegacyDeletionInfo,List<LegacyCell>,CFMetaData,Deletion,int)",23,1,n/a,49,3,5,18,12
"org.apache.cassandra.thrift.CassandraServer.describe_cluster_name()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_keyspace(String)",4,1,n/a,8,0,1,5,2
"org.apache.cassandra.thrift.CassandraServer.describe_keyspaces()",7,0,n/a,18,2,0,8,3
"org.apache.cassandra.thrift.CassandraServer.describe_local_ring(String)",2,0,n/a,12,1,1,3,2
"org.apache.cassandra.thrift.CassandraServer.describe_partitioner()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_ring(String)",2,0,n/a,11,1,1,3,2
"org.apache.cassandra.thrift.CassandraServer.describe_schema_versions()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.thrift.CassandraServer.describe_snitch()",7,0,n/a,6,0,0,3,2
"org.apache.cassandra.thrift.CassandraServer.describe_splits(String,String,String,int)",8,0,n/a,11,0,4,6,2
"org.apache.cassandra.thrift.CassandraServer.describe_splits_ex(String,String,String,int)",14,1,n/a,19,1,4,9,3
"org.apache.cassandra.thrift.CassandraServer.describe_token_map()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.CassandraServer.describe_version()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.CassandraServer.doInsert(ConsistencyLevel,List<? extends IMutation>)",1,5,n/a,5,0,2,1,1
"org.apache.cassandra.thrift.CassandraServer.doInsert(ConsistencyLevel,List<? extends IMutation>,boolean)",11,2,n/a,24,1,3,12,4
"org.apache.cassandra.thrift.CassandraServer.execute_cql3_query(ByteBuffer,Compression,ConsistencyLevel)",17,0,n/a,35,2,3,10,4
"org.apache.cassandra.thrift.CassandraServer.execute_cql_query(ByteBuffer,Compression)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.thrift.CassandraServer.execute_prepared_cql3_query(int,List<ByteBuffer>,ConsistencyLevel)",21,0,n/a,39,1,3,13,5
"org.apache.cassandra.thrift.CassandraServer.execute_prepared_cql_query(int,List<ByteBuffer>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.thrift.CassandraServer.fixOptionalSliceParameters(ColumnSlice)",4,1,n/a,10,0,1,4,3
"org.apache.cassandra.thrift.CassandraServer.get(ByteBuffer,ColumnPath,ConsistencyLevel)",59,0,n/a,94,3,3,48,11
"org.apache.cassandra.thrift.CassandraServer.getLimits(int,boolean,SlicePredicate)",1,2,n/a,5,0,3,2,2
"org.apache.cassandra.thrift.CassandraServer.getLimits(int,boolean,int)",2,1,n/a,6,0,3,1,2
"org.apache.cassandra.thrift.CassandraServer.getSlice(List<SinglePartitionReadCommand>,boolean,int,ConsistencyLevel,ClientState)",9,2,n/a,17,3,5,7,2
"org.apache.cassandra.thrift.CassandraServer.getSliceInternal(String,ByteBuffer,ColumnParent,int,SlicePredicate,ConsistencyLevel,ClientState)",3,2,n/a,11,0,7,1,1
"org.apache.cassandra.thrift.CassandraServer.get_count(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel)",41,0,n/a,86,2,4,36,11
"org.apache.cassandra.thrift.CassandraServer.get_indexed_slices(ColumnParent,IndexClause,SlicePredicate,ConsistencyLevel)",37,0,n/a,61,2,4,26,5
"org.apache.cassandra.thrift.CassandraServer.get_multi_slice(MultiSliceRequest)",62,0,n/a,63,2,1,37,10
"org.apache.cassandra.thrift.CassandraServer.get_paged_slice(String,KeyRange,ByteBuffer,ConsistencyLevel)",49,0,n/a,89,3,4,37,10
"org.apache.cassandra.thrift.CassandraServer.get_range_slices(ColumnParent,SlicePredicate,KeyRange,ConsistencyLevel)",46,0,n/a,84,3,4,37,7
"org.apache.cassandra.thrift.CassandraServer.get_slice(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel)",17,0,n/a,32,1,4,12,4
"org.apache.cassandra.thrift.CassandraServer.insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel)",11,0,n/a,28,1,4,8,3
"org.apache.cassandra.thrift.CassandraServer.internal_insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel)",25,1,n/a,34,1,4,21,5
"org.apache.cassandra.thrift.CassandraServer.internal_remove(ByteBuffer,ColumnPath,long,ConsistencyLevel,boolean)",32,2,n/a,45,2,5,28,10
"org.apache.cassandra.thrift.CassandraServer.login(AuthenticationRequest)",6,0,n/a,11,1,1,3,2
"org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(CFMetaData,ColumnParent,SlicePredicate)",22,4,n/a,51,5,3,22,9
"org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(CFMetaData,ColumnParent,SliceRange)",18,4,n/a,25,2,3,16,11
"org.apache.cassandra.thrift.CassandraServer.makeColumnFilter(CFMetaData,Slices)",10,2,n/a,17,2,2,9,5
"org.apache.cassandra.thrift.CassandraServer.makeSlices(CFMetaData,SliceRange)",4,3,n/a,7,0,2,3,3
"org.apache.cassandra.thrift.CassandraServer.multigetSliceInternal(String,List<ByteBuffer>,ColumnParent,int,SlicePredicate,ConsistencyLevel,ClientState)",19,3,n/a,26,1,7,14,3
"org.apache.cassandra.thrift.CassandraServer.multiget_count(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel)",24,0,n/a,46,2,4,18,5
"org.apache.cassandra.thrift.CassandraServer.multiget_slice(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel)",18,0,n/a,34,1,4,14,4
"org.apache.cassandra.thrift.CassandraServer.prepare_cql3_query(ByteBuffer,Compression)",9,0,n/a,15,1,2,7,2
"org.apache.cassandra.thrift.CassandraServer.prepare_cql_query(ByteBuffer,Compression)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.thrift.CassandraServer.read(List<SinglePartitionReadCommand>,ConsistencyLevel,ClientState)",6,2,n/a,20,2,3,6,2
"org.apache.cassandra.thrift.CassandraServer.registerMetrics()",3,1,n/a,5,2,0,2,1
"org.apache.cassandra.thrift.CassandraServer.release()",1,5,n/a,7,0,0,1,1
"org.apache.cassandra.thrift.CassandraServer.remove(ByteBuffer,ColumnPath,long,ConsistencyLevel)",10,0,n/a,28,1,4,8,3
"org.apache.cassandra.thrift.CassandraServer.remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel)",11,0,n/a,27,1,3,8,3
"org.apache.cassandra.thrift.CassandraServer.schedule(long)",5,6,n/a,14,1,1,3,2
"org.apache.cassandra.thrift.CassandraServer.set_cql_version(String)",0,0,n/a,6,0,1,0,1
"org.apache.cassandra.thrift.CassandraServer.set_keyspace(String)",3,0,n/a,11,1,1,3,2
"org.apache.cassandra.thrift.CassandraServer.sortAndMerge(CFMetaData,List<LegacyCell>,int)",22,2,n/a,54,3,3,32,9
"org.apache.cassandra.thrift.CassandraServer.startSessionIfRequested()",6,19,n/a,9,1,0,4,2
"org.apache.cassandra.thrift.CassandraServer.state()",1,38,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.CassandraServer.system_add_column_family(CfDef)",15,0,n/a,21,1,1,13,3
"org.apache.cassandra.thrift.CassandraServer.system_add_keyspace(KsDef)",26,0,n/a,34,3,1,18,6
"org.apache.cassandra.thrift.CassandraServer.system_drop_column_family(String)",11,0,n/a,20,1,1,11,3
"org.apache.cassandra.thrift.CassandraServer.system_drop_keyspace(String)",8,0,n/a,16,1,1,7,2
"org.apache.cassandra.thrift.CassandraServer.system_update_column_family(CfDef)",24,0,n/a,30,1,1,21,9
"org.apache.cassandra.thrift.CassandraServer.system_update_keyspace(KsDef)",14,0,n/a,22,1,1,10,4
"org.apache.cassandra.thrift.CassandraServer.thriftifyColumnWithName(CFMetaData,LegacyCell,ByteBuffer)",8,2,n/a,7,0,3,3,2
"org.apache.cassandra.thrift.CassandraServer.thriftifyColumns(CFMetaData,Iterator<LegacyCell>)",6,1,n/a,10,1,2,5,2
"org.apache.cassandra.thrift.CassandraServer.thriftifyColumnsAsColumns(CFMetaData,Iterator<LegacyCell>)",5,1,n/a,7,0,2,4,2
"org.apache.cassandra.thrift.CassandraServer.thriftifyCounterSuperColumns(CFMetaData,Iterator<LegacyCell>,boolean)",17,1,n/a,21,2,3,12,6
"org.apache.cassandra.thrift.CassandraServer.thriftifyKeySlices(PartitionIterator,ColumnParent,int)",9,3,n/a,16,3,3,7,2
"org.apache.cassandra.thrift.CassandraServer.thriftifyPartition(RowIterator,boolean,boolean,int)",12,3,n/a,21,1,4,9,4
"org.apache.cassandra.thrift.CassandraServer.thriftifySubColumn(CFMetaData,LegacyCell)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.thrift.CassandraServer.thriftifySubColumn(LegacyCell,ByteBuffer)",6,1,n/a,8,0,2,5,2
"org.apache.cassandra.thrift.CassandraServer.thriftifySubCounter(CFMetaData,LegacyCell)",5,2,n/a,5,0,2,2,1
"org.apache.cassandra.thrift.CassandraServer.thriftifySuperColumns(CFMetaData,Iterator<LegacyCell>,boolean,boolean,boolean)",9,1,n/a,28,2,5,11,5
"org.apache.cassandra.thrift.CassandraServer.thriftifySuperColumns(Iterator<LegacyCell>,boolean)",17,1,n/a,23,2,2,14,8
"org.apache.cassandra.thrift.CassandraServer.toCounterLegacyCell(CFMetaData,ByteBuffer,CounterColumn)",1,2,n/a,5,0,3,1,1
"org.apache.cassandra.thrift.CassandraServer.toCounterLegacyCell(CFMetaData,CounterColumn)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.thrift.CassandraServer.toInternalFilter(CFMetaData,ColumnParent,SlicePredicate)",19,4,n/a,45,4,3,17,8
"org.apache.cassandra.thrift.CassandraServer.toInternalFilter(CFMetaData,ColumnParent,SliceRange)",8,4,n/a,7,0,3,3,3
"org.apache.cassandra.thrift.CassandraServer.toLegacyCell(CFMetaData,ByteBuffer,Column,int)",2,2,n/a,7,0,4,1,2
"org.apache.cassandra.thrift.CassandraServer.toLegacyCell(CFMetaData,Column,int)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.thrift.CassandraServer.toLegacyCells(CFMetaData,List<Column>,int)",5,2,n/a,9,0,3,5,2
"org.apache.cassandra.thrift.CassandraServer.toLegacyDeletion(CFMetaData,ByteBuffer,ByteBuffer,long,int)",1,2,n/a,5,0,5,1,1
"org.apache.cassandra.thrift.CassandraServer.toLegacyDeletion(CFMetaData,ByteBuffer,long,int)",1,1,n/a,5,0,4,1,1
"org.apache.cassandra.thrift.CassandraServer.trace_next_query()",5,0,n/a,6,0,0,3,1
"org.apache.cassandra.thrift.CassandraServer.truncate(String)",22,0,n/a,49,2,1,19,7
"org.apache.cassandra.thrift.CassandraServer.uncompress(ByteBuffer,Compression)",19,2,n/a,50,3,2,29,11
"org.apache.cassandra.thrift.CassandraServer.validateLogin()",4,2,n/a,11,1,0,3,2
"org.apache.cassandra.thrift.CustomTNonBlockingServer.CustomFrameBuffer.CustomFrameBuffer(TNonblockingTransport,SelectionKey,AbstractSelectThread)",1,0,n/a,5,0,3,1,1
"org.apache.cassandra.thrift.CustomTNonBlockingServer.CustomFrameBuffer.getTransport()",0,1,n/a,3,0,0,1,1
"org.apache.cassandra.thrift.CustomTNonBlockingServer.CustomTNonBlockingServer(Args)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.thrift.CustomTNonBlockingServer.Factory.buildTServer(Args)",14,0,n/a,24,1,1,9,3
"org.apache.cassandra.thrift.CustomTNonBlockingServer.requestInvoke(FrameBuffer)",6,0,n/a,9,0,1,4,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.CustomTThreadPoolServer(Args,ExecutorService)",1,1,n/a,5,0,2,3,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.Factory.buildTServer(Args)",32,0,n/a,49,3,1,20,4
"org.apache.cassandra.thrift.CustomTThreadPoolServer.WorkerProcess.WorkerProcess(TTransport)",0,1,n/a,9,0,1,1,1
"org.apache.cassandra.thrift.CustomTThreadPoolServer.WorkerProcess.run()",17,0,n/a,49,2,0,20,7
"org.apache.cassandra.thrift.CustomTThreadPoolServer.serve()",14,0,n/a,65,3,0,22,9
"org.apache.cassandra.thrift.CustomTThreadPoolServer.stop()",1,0,n/a,5,0,0,2,1
"org.apache.cassandra.thrift.ITransportFactory.openTransport(String,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.thrift.ITransportFactory.setOptions(Map<String, String>)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.thrift.ITransportFactory.supportedOptions()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.thrift.SSLTransportFactory.openTransport(String,int)",5,0,n/a,11,0,2,6,2
"org.apache.cassandra.thrift.SSLTransportFactory.setOptions(Map<String, String>)",13,0,n/a,16,0,1,12,7
"org.apache.cassandra.thrift.SSLTransportFactory.supportedOptions()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.thrift.TCustomNonblockingServerSocket.TCustomNonblockingServerSocket(InetSocketAddress,boolean,Integer,Integer)",1,0,n/a,7,0,4,4,1
"org.apache.cassandra.thrift.TCustomNonblockingServerSocket.acceptImpl()",12,0,n/a,40,2,0,16,8
"org.apache.cassandra.thrift.TCustomServerSocket.TCustomServerSocket(InetSocketAddress,boolean,Integer,Integer,Integer)",4,0,n/a,31,1,5,9,2
"org.apache.cassandra.thrift.TCustomServerSocket.TCustomServerSocket(ServerSocket,boolean,Integer,Integer)",0,0,n/a,7,0,4,4,1
"org.apache.cassandra.thrift.TCustomServerSocket.acceptImpl()",13,0,n/a,50,2,0,21,8
"org.apache.cassandra.thrift.TCustomServerSocket.close()",2,1,n/a,16,2,0,5,3
"org.apache.cassandra.thrift.TCustomServerSocket.interrupt()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.thrift.TCustomServerSocket.listen()",2,0,n/a,16,2,0,4,3
"org.apache.cassandra.thrift.TCustomSocket.TCustomSocket(Socket)",10,0,n/a,24,2,1,11,4
"org.apache.cassandra.thrift.TCustomSocket.TCustomSocket(String,int)",1,0,n/a,10,0,2,1,1
"org.apache.cassandra.thrift.TCustomSocket.TCustomSocket(String,int,int)",1,1,n/a,14,0,3,4,1
"org.apache.cassandra.thrift.TCustomSocket.close()",3,2,n/a,16,2,0,6,3
"org.apache.cassandra.thrift.TCustomSocket.getSocket()",1,0,n/a,9,1,0,3,2
"org.apache.cassandra.thrift.TCustomSocket.initSocket()",5,3,n/a,13,1,0,6,2
"org.apache.cassandra.thrift.TCustomSocket.isOpen()",1,2,n/a,9,1,0,3,2
"org.apache.cassandra.thrift.TCustomSocket.open()",14,0,n/a,25,1,0,14,6
"org.apache.cassandra.thrift.TCustomSocket.setTimeout(int)",2,0,n/a,13,1,1,4,2
"org.apache.cassandra.thrift.TFramedTransportFactory.openTransport(String,int)",3,0,n/a,8,0,2,4,1
"org.apache.cassandra.thrift.TFramedTransportFactory.setOptions(Map<String, String>)",3,0,n/a,5,0,1,2,2
"org.apache.cassandra.thrift.TFramedTransportFactory.supportedOptions()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.THsHaDisruptorServer.Factory.buildTServer(Args)",25,0,n/a,33,1,1,11,3
"org.apache.cassandra.thrift.THsHaDisruptorServer.THsHaDisruptorServer(Args)",2,1,n/a,11,0,1,2,1
"org.apache.cassandra.thrift.THsHaDisruptorServer.beforeClose(Message)",4,0,n/a,5,0,1,2,1
"org.apache.cassandra.thrift.THsHaDisruptorServer.beforeInvoke(Message)",4,0,n/a,6,0,1,2,1
"org.apache.cassandra.thrift.TServerCustomFactory.TServerCustomFactory(String)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.thrift.TServerCustomFactory.buildTServer(Args)",27,0,n/a,33,2,1,16,5
"org.apache.cassandra.thrift.TServerFactory.buildTServer(Args)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.thrift.ThriftClientState.ThriftClientState(InetSocketAddress)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.thrift.ThriftClientState.getQueryState()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.ThriftClientState.getSchedulingValue()",2,0,n/a,8,1,0,4,2
"org.apache.cassandra.thrift.ThriftConversion.addDefaultCQLMetadata(Collection<ColumnDefinition>,String,String,AbstractType<?>,AbstractType<?>,AbstractType<?>,AbstractType<?>)",24,1,n/a,38,2,7,18,7
"org.apache.cassandra.thrift.ThriftConversion.applyImplicitDefaults(CfDef)",30,1,n/a,34,1,1,22,12
"org.apache.cassandra.thrift.ThriftConversion.cachingFromThrift(String,String)",5,1,n/a,16,1,2,9,4
"org.apache.cassandra.thrift.ThriftConversion.cachingFromTrhfit(String)",4,1,n/a,16,1,1,11,6
"org.apache.cassandra.thrift.ThriftConversion.columnDefinitionsToThrift(CFMetaData,Collection<ColumnDefinition>)",7,1,n/a,8,0,2,5,3
"org.apache.cassandra.thrift.ThriftConversion.compactionParamsFromThrift(CfDef)",10,1,n/a,15,1,1,8,2
"org.apache.cassandra.thrift.ThriftConversion.compressionParametersFromThrift(Map<String, String>)",2,1,n/a,6,0,1,3,1
"org.apache.cassandra.thrift.ThriftConversion.compressionParametersToThrift(CompressionParams)",10,2,n/a,11,0,1,7,2
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(CfDef)",3,5,n/a,7,0,1,2,2
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(ConsistencyLevel)",1,5,n/a,18,1,1,24,12
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(KsDef,CFMetaData...)",10,0,n/a,11,0,2,8,3
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(String,String,AbstractType<?>,AbstractType<?>,ColumnDef)",8,2,n/a,28,1,5,7,4
"org.apache.cassandra.thrift.ThriftConversion.fromThrift(String,String,AbstractType<?>,AbstractType<?>,List<ColumnDef>)",5,2,n/a,14,0,5,6,3
"org.apache.cassandra.thrift.ThriftConversion.fromThriftCellsPerRow(String)",2,1,n/a,6,0,1,1,2
"org.apache.cassandra.thrift.ThriftConversion.fromThriftForUpdate(CfDef,CFMetaData)",3,3,n/a,5,0,2,1,1
"org.apache.cassandra.thrift.ThriftConversion.indexDefsFromThrift(CFMetaData,String,String,AbstractType<?>,AbstractType<?>,List<ColumnDef>)",20,1,n/a,32,2,6,19,8
"org.apache.cassandra.thrift.ThriftConversion.internalFromThrift(CfDef,boolean,Collection<ColumnDefinition>,boolean)",56,2,n/a,116,2,4,56,30
"org.apache.cassandra.thrift.ThriftConversion.isSuper(String)",2,1,n/a,10,1,1,7,4
"org.apache.cassandra.thrift.ThriftConversion.rethrow(RequestExecutionException)",3,0,n/a,11,0,1,5,3
"org.apache.cassandra.thrift.ThriftConversion.rowFilterFromThrift(CFMetaData,List<IndexExpression>)",6,0,n/a,9,0,2,6,4
"org.apache.cassandra.thrift.ThriftConversion.toThrift(AuthenticationException)",2,6,n/a,4,0,1,1,1
"org.apache.cassandra.thrift.ThriftConversion.toThrift(CFMetaData)",56,6,n/a,39,1,1,30,4
"org.apache.cassandra.thrift.ThriftConversion.toThrift(CFMetaData,ColumnDefinition)",17,2,n/a,40,2,2,16,6
"org.apache.cassandra.thrift.ThriftConversion.toThrift(CachingParams)",4,3,n/a,10,0,1,7,5
"org.apache.cassandra.thrift.ThriftConversion.toThrift(ConsistencyLevel)",1,6,n/a,18,1,1,24,12
"org.apache.cassandra.thrift.ThriftConversion.toThrift(KeyspaceMetadata)",8,6,n/a,11,0,1,8,3
"org.apache.cassandra.thrift.ThriftConversion.toThrift(RequestFailureException)",1,6,n/a,5,0,1,1,1
"org.apache.cassandra.thrift.ThriftConversion.toThrift(RequestTimeoutException)",5,6,n/a,16,1,1,11,5
"org.apache.cassandra.thrift.ThriftConversion.toThrift(RequestValidationException)",2,6,n/a,4,0,1,1,1
"org.apache.cassandra.thrift.ThriftConversion.toThrift(UnavailableException)",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.thrift.ThriftConversion.toThriftCellsPerRow(CachingParams)",3,1,n/a,6,0,1,1,2
"org.apache.cassandra.thrift.ThriftConversion.triggerDefinitionsFromThrift(List<TriggerDef>)",7,1,n/a,7,0,1,4,2
"org.apache.cassandra.thrift.ThriftConversion.triggerDefinitionsToThrift(Triggers)",6,1,n/a,12,1,1,7,2
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.PartitionMerger(UnfilteredRowIterator,int)",4,2,n/a,7,0,2,4,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.consumeNextToMerge()",1,3,n/a,6,0,0,3,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.consumeNextWrapped()",0,3,n/a,6,0,0,3,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.hasNext()",2,0,n/a,7,0,0,3,4
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.init()",5,2,n/a,9,0,0,6,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.next()",13,0,n/a,24,1,0,17,9
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.staticRow()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger.updateNextToMerge()",15,2,n/a,14,1,0,7,2
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.SuperColumnsPartitionMerger(UnfilteredRowIterator,int)",6,2,n/a,9,0,2,6,2
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.applyToRow(Row)",37,0,n/a,28,1,1,21,9
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.makeDynamicCell(Cell)",7,3,n/a,4,0,1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger.simpleCellsIterator(Row)",8,1,n/a,10,3,1,7,3
"org.apache.cassandra.thrift.ThriftResultsMerger.ThriftResultsMerger(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.thrift.ThriftResultsMerger.applyToPartition(UnfilteredRowIterator)",5,0,n/a,7,0,1,1,2
"org.apache.cassandra.thrift.ThriftResultsMerger.maybeWrap(UnfilteredPartitionIterator,CFMetaData,int)",4,2,n/a,6,0,3,3,3
"org.apache.cassandra.thrift.ThriftResultsMerger.maybeWrap(UnfilteredRowIterator,int)",9,4,n/a,8,0,2,3,4
"org.apache.cassandra.thrift.ThriftServer.ThriftServer(InetAddress,int,int)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.thrift.ThriftServer.ThriftServerThread.ThriftServerThread(InetAddress,int,int,TProcessor,TTransportFactory)",11,1,n/a,20,0,5,12,1
"org.apache.cassandra.thrift.ThriftServer.ThriftServerThread.run()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.thrift.ThriftServer.ThriftServerThread.stopServer()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.thrift.ThriftServer.getCassandraServer()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.thrift.ThriftServer.getProcessor(CassandraServer)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.thrift.ThriftServer.getTransportFactory()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.thrift.ThriftServer.isRunning()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.ThriftServer.start()",5,1,n/a,9,1,0,4,2
"org.apache.cassandra.thrift.ThriftServer.stop()",3,1,n/a,16,2,0,6,3
"org.apache.cassandra.thrift.ThriftSessionManager.connectionComplete(SocketAddress)",3,0,n/a,10,0,1,4,2
"org.apache.cassandra.thrift.ThriftSessionManager.currentSession()",4,0,n/a,18,1,0,9,3
"org.apache.cassandra.thrift.ThriftSessionManager.getConnectedClients()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.thrift.ThriftSessionManager.setCurrentSocket(SocketAddress)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.thrift.ThriftValidation.getThriftColumnNameComparator(CFMetaData,ByteBuffer)",4,4,n/a,15,1,2,5,3
"org.apache.cassandra.thrift.ThriftValidation.isEmpty(List<IndexExpression>)",1,2,n/a,4,0,1,1,2
"org.apache.cassandra.thrift.ThriftValidation.summarize(ByteBuffer)",4,1,n/a,11,0,1,4,2
"org.apache.cassandra.thrift.ThriftValidation.validateColumnData(CFMetaData,ByteBuffer,Column)",18,2,n/a,30,1,3,12,6
"org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily(String,String)",5,12,n/a,11,0,2,7,3
"org.apache.cassandra.thrift.ThriftValidation.validateColumnFamily(String,String,boolean)",5,0,n/a,15,1,3,7,4
"org.apache.cassandra.thrift.ThriftValidation.validateColumnNames(CFMetaData,ByteBuffer,Iterable<ByteBuffer>)",29,0,n/a,56,4,3,30,16
"org.apache.cassandra.thrift.ThriftValidation.validateColumnNames(CFMetaData,ColumnParent,Iterable<ByteBuffer>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.thrift.ThriftValidation.validateColumnOrSuperColumn(CFMetaData,ColumnOrSuperColumn)",25,1,n/a,43,2,2,33,16
"org.apache.cassandra.thrift.ThriftValidation.validateColumnParent(CFMetaData,ColumnParent)",4,0,n/a,14,2,2,5,4
"org.apache.cassandra.thrift.ThriftValidation.validateColumnPath(CFMetaData,ColumnPath)",8,4,n/a,30,2,2,11,7
"org.apache.cassandra.thrift.ThriftValidation.validateColumnPathOrParent(CFMetaData,ColumnPath)",7,0,n/a,27,2,2,9,7
"org.apache.cassandra.thrift.ThriftValidation.validateDeletion(CFMetaData,Deletion)",10,1,n/a,21,1,2,11,7
"org.apache.cassandra.thrift.ThriftValidation.validateFilterClauses(CFMetaData,List<IndexExpression>)",28,2,n/a,48,2,2,22,9
"org.apache.cassandra.thrift.ThriftValidation.validateIndexClauses(CFMetaData,IndexClause)",4,0,n/a,8,0,2,4,3
"org.apache.cassandra.thrift.ThriftValidation.validateKey(CFMetaData,ByteBuffer)",9,2,n/a,22,1,2,7,5
"org.apache.cassandra.thrift.ThriftValidation.validateKeyRange(CFMetaData,ByteBuffer,KeyRange)",20,0,n/a,40,2,3,21,17
"org.apache.cassandra.thrift.ThriftValidation.validateKeyspace(String)",3,1,n/a,7,1,1,2,2
"org.apache.cassandra.thrift.ThriftValidation.validateKeyspaceNotSystem(String)",3,6,n/a,5,0,1,2,2
"org.apache.cassandra.thrift.ThriftValidation.validateKeyspaceNotYetExisting(String)",4,0,n/a,13,1,1,3,3
"org.apache.cassandra.thrift.ThriftValidation.validateMutation(CFMetaData,Mutation)",3,0,n/a,21,1,2,12,5
"org.apache.cassandra.thrift.ThriftValidation.validatePredicate(CFMetaData,ColumnParent,SlicePredicate)",5,0,n/a,12,0,3,7,6
"org.apache.cassandra.thrift.ThriftValidation.validateRange(CFMetaData,ColumnParent,SliceRange)",15,2,n/a,27,1,3,15,9
"org.apache.cassandra.thrift.ThriftValidation.validateSlicePredicate(CFMetaData,ByteBuffer,SlicePredicate)",5,1,n/a,9,0,3,6,5
"org.apache.cassandra.thrift.ThriftValidation.validateTtl(Column)",4,2,n/a,15,1,1,6,4
"org.apache.cassandra.tools.AbstractJmxClient.AbstractJmxClient(String,Integer,String,String)",1,0,n/a,8,0,4,5,3
"org.apache.cassandra.tools.AbstractJmxClient.addCmdOption(String,String,boolean,String)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.tools.AbstractJmxClient.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.AbstractJmxClient.printHelp(String,String)",9,0,n/a,13,1,2,8,2
"org.apache.cassandra.tools.AbstractJmxClient.processArguments(String[])",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.tools.AbstractJmxClient.setOutput(PrintStream)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.write(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.write(String,Object...)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.tools.AbstractJmxClient.writeln(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.tools.AbstractJmxClient.writeln(String,Object...)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.tools.AbstractJmxClient.writeln(Throwable)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.BootstrapMonitor(PrintStream)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.awaitCompletion()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.BootstrapMonitor.handleConnectionClosed(long,String)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.tools.BootstrapMonitor.handleConnectionFailed(long,String)",6,2,n/a,8,0,2,3,1
"org.apache.cassandra.tools.BootstrapMonitor.handleNotificationLost(long,String)",1,2,n/a,5,0,2,1,1
"org.apache.cassandra.tools.BootstrapMonitor.isInterestedIn(String)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.tools.BootstrapMonitor.progress(String,ProgressEvent)",8,0,n/a,15,1,2,7,3
"org.apache.cassandra.tools.BulkLoadConnectionFactory.BulkLoadConnectionFactory(int,int,ServerEncryptionOptions,boolean)",0,0,n/a,7,0,4,4,1
"org.apache.cassandra.tools.BulkLoadConnectionFactory.createConnection(InetAddress)",10,0,n/a,20,1,1,8,6
"org.apache.cassandra.tools.BulkLoader.CmdLineOptions.addOption(String,String,String)",2,24,n/a,11,0,3,1,1
"org.apache.cassandra.tools.BulkLoader.CmdLineOptions.addOption(String,String,String,String)",3,18,n/a,14,0,4,3,1
"org.apache.cassandra.tools.BulkLoader.ExternalClient.ExternalClient(Set<InetAddress>,int,String,String,int,int,ServerEncryptionOptions,SSLOptions)",1,1,n/a,14,0,8,4,1
"org.apache.cassandra.tools.BulkLoader.ExternalClient.getConnectionFactory()",1,1,n/a,5,0,0,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.LoaderOptions(File)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.errorMsg(String,CmdLineOptions)",3,6,n/a,6,0,2,3,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.getCmdLineOptions()",20,1,n/a,25,0,0,21,1
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.parseArgs(String[])",82,1,n/a,145,4,1,82,28
"org.apache.cassandra.tools.BulkLoader.LoaderOptions.printUsage(Options)",5,5,n/a,14,0,1,4,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.ProgressIndicator()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.handleStreamEvent(StreamEvent)",38,0,n/a,61,4,1,43,16
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.mbPerSec(long,long)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.onFailure(Throwable)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.onSuccess(StreamState)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator.printSummary(int)",18,1,n/a,15,0,1,12,1
"org.apache.cassandra.tools.BulkLoader.buildSSLOptions(ClientEncryptionOptions)",3,1,n/a,15,1,1,7,3
"org.apache.cassandra.tools.BulkLoader.main(String[])",27,0,n/a,58,2,1,27,6
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.ColumnFamilyStoreMBeanIterator(MBeanServerConnection)",18,1,n/a,23,2,1,19,9
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.getCFSMBeans(MBeanServerConnection,String)",8,2,n/a,14,1,2,8,2
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.hasNext()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.GetVersion.main(String[])",2,0,n/a,3,0,1,1,1
"org.apache.cassandra.tools.JMXConnection.JMXConnection(String,int,String,String)",1,1,n/a,8,0,4,5,1
"org.apache.cassandra.tools.JMXConnection.close()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.JMXConnection.connect()",6,1,n/a,9,0,0,6,2
"org.apache.cassandra.tools.JMXConnection.getMbeanServerConn()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String)",1,0,n/a,12,0,1,3,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String,int)",1,0,n/a,13,0,2,3,1
"org.apache.cassandra.tools.NodeProbe.NodeProbe(String,int,String,String)",3,0,n/a,17,0,4,6,4
"org.apache.cassandra.tools.NodeProbe.assassinateEndpoint(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.clearSnapshot(String,String...)",1,0,n/a,7,0,2,1,1
"org.apache.cassandra.tools.NodeProbe.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.connect()",33,3,n/a,52,1,0,34,3
"org.apache.cassandra.tools.NodeProbe.decommission()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.describeRing(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.disableAutoCompaction(String,String...)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.tools.NodeProbe.disableHintedHandoff()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.disableHintsForDC(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.drain()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.effectiveOwnership(String)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.enableAutoCompaction(String,String...)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.tools.NodeProbe.enableHintedHandoff()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.enableHintsForDC(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.forceKeyspaceCleanup(PrintStream,String,String...)",2,0,n/a,8,1,3,3,2
"org.apache.cassandra.tools.NodeProbe.forceKeyspaceCleanup(String,String...)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.tools.NodeProbe.forceKeyspaceCompaction(boolean,String,String...)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.tools.NodeProbe.forceKeyspaceFlush(String,String...)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.tools.NodeProbe.forceRemoveCompletion()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getAndResetGCStats()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getCacheMetric(String,String)",8,18,n/a,32,2,2,13,5
"org.apache.cassandra.tools.NodeProbe.getCacheServiceMBean()",3,1,n/a,12,1,0,4,2
"org.apache.cassandra.tools.NodeProbe.getCfsProxy(String,String)",11,4,n/a,26,1,2,14,6
"org.apache.cassandra.tools.NodeProbe.getClusterName()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getColumnFamilyMetric(String,String,String)",11,40,n/a,62,2,3,46,8
"org.apache.cassandra.tools.NodeProbe.getColumnFamilyStoreMBeanProxies()",3,2,n/a,15,1,0,4,3
"org.apache.cassandra.tools.NodeProbe.getCompactionHistory()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getCompactionManagerProxy()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getCompactionMetric(String)",9,1,n/a,32,2,1,12,6
"org.apache.cassandra.tools.NodeProbe.getCompactionThroughput()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getCurrentGenerationNumber()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getDataCenter()",3,2,n/a,11,1,0,3,2
"org.apache.cassandra.tools.NodeProbe.getDroppedMessages()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getEndpoint()",3,2,n/a,5,0,0,2,1
"org.apache.cassandra.tools.NodeProbe.getEndpointSnitchInfoProxy()",3,5,n/a,11,1,0,3,2
"org.apache.cassandra.tools.NodeProbe.getEndpoints(String,String,String)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.tools.NodeProbe.getExceptionCount()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getFailureDetectorPhilValues()",2,1,n/a,11,1,0,3,2
"org.apache.cassandra.tools.NodeProbe.getGossipInfo()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getHeapMemoryUsage()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getHintedHandoffDisabledDCs()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getHostIdMap()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getJoiningNodes()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getKeyspaces()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getLeavingNodes()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getLiveNodes()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getLoadMap()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getLoadString()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getLocalHostId()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getLoggingLevels()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getMovingNodes()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getNonSystemKeyspaces()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getOperationMode()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getOwnership()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getPartitionSample(String,String,int,int,int,List<Sampler>)",8,1,n/a,15,1,6,8,3
"org.apache.cassandra.tools.NodeProbe.getPartitioner()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getProxyMetric(String)",3,3,n/a,17,1,1,3,2
"org.apache.cassandra.tools.NodeProbe.getRMIClientSocketFactory()",4,1,n/a,7,0,0,3,2
"org.apache.cassandra.tools.NodeProbe.getRack()",3,1,n/a,11,1,0,3,2
"org.apache.cassandra.tools.NodeProbe.getReadRepairAttempted()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getReadRepairRepairedBackground()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getReadRepairRepairedBlocking()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getReleaseVersion()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getRemovalStatus()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getSSTables(String,String,String)",2,1,n/a,5,0,3,2,1
"org.apache.cassandra.tools.NodeProbe.getSchemaVersion()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getSnapshotDetails()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getSpProxy()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getStorageMetric(String)",4,1,n/a,17,1,1,3,2
"org.apache.cassandra.tools.NodeProbe.getStreamStatus()",5,1,n/a,4,2,0,2,1
"org.apache.cassandra.tools.NodeProbe.getStreamThroughput()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getThreadPoolMetric(Stage,String)",3,5,n/a,4,0,2,1,1
"org.apache.cassandra.tools.NodeProbe.getTokenToEndpointMap()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getTokens()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getTokens(String)",2,0,n/a,11,1,1,3,2
"org.apache.cassandra.tools.NodeProbe.getTraceProbability()",1,1,n/a,1,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getUnreachableNodes()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.getUptime()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.invalidateCounterCache()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.invalidateKeyCache()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.invalidateRowCache()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isFailed()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isGossipRunning()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isHandoffEnabled()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isIncrementalBackupsEnabled()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isInitialized()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isJoined()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isNativeTransportRunning()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isStarting()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.isThriftServerRunning()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.joinRing()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.loadNewSSTables(String,String)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.tools.NodeProbe.metricPercentilesAsArray(JmxHistogramMBean)",7,1,n/a,10,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.metricPercentilesAsArray(JmxTimerMBean)",7,5,n/a,10,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.move(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.pauseHintsDelivery()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.rebuild(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.rebuildIndex(String,String,String...)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.tools.NodeProbe.reloadTriggers()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.removeNode(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.repairAsync(PrintStream,String,Map<String, String>)",8,1,n/a,26,2,3,10,3
"org.apache.cassandra.tools.NodeProbe.replayBatchlog()",2,1,n/a,11,1,0,3,2
"org.apache.cassandra.tools.NodeProbe.resetLocalSchema()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.resumeBootstrap(PrintStream)",11,1,n/a,34,2,1,13,4
"org.apache.cassandra.tools.NodeProbe.resumeHintsDelivery()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.sampleKeyRange()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.scrub(PrintStream,boolean,boolean,boolean,String,String...)",2,0,n/a,8,1,6,3,2
"org.apache.cassandra.tools.NodeProbe.scrub(boolean,boolean,boolean,String,String...)",1,1,n/a,4,0,5,1,1
"org.apache.cassandra.tools.NodeProbe.setCacheCapacities(int,int,int)",6,1,n/a,15,1,3,7,2
"org.apache.cassandra.tools.NodeProbe.setCacheKeysToSave(int,int,int)",6,1,n/a,15,1,3,7,2
"org.apache.cassandra.tools.NodeProbe.setCompactionThreshold(String,String,int,int)",2,1,n/a,11,0,4,2,1
"org.apache.cassandra.tools.NodeProbe.setCompactionThroughput(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.setHintedHandoffThrottleInKB(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.setIncrementalBackupsEnabled(boolean)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.setLoggingLevel(String,String)",2,1,n/a,11,1,2,3,2
"org.apache.cassandra.tools.NodeProbe.setStreamThroughput(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.setTraceProbability(double)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.startGossiping()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.startNativeTransport()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.startThriftServer()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.stop(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.stopById(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.stopCassandraDaemon()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.stopGossiping()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.stopNativeTransport()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.stopThriftServer()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.takeMultipleTableSnapshot(String,String...)",2,0,n/a,20,1,2,3,3
"org.apache.cassandra.tools.NodeProbe.takeSnapshot(String,String,String...)",3,0,n/a,20,2,3,5,3
"org.apache.cassandra.tools.NodeProbe.trueSnapshotsSize()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tools.NodeProbe.truncate(String,String)",3,0,n/a,15,1,2,4,3
"org.apache.cassandra.tools.NodeProbe.truncateHints()",2,1,n/a,11,1,0,3,2
"org.apache.cassandra.tools.NodeProbe.truncateHints(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.NodeProbe.upgradeSSTables(PrintStream,String,boolean,String...)",2,0,n/a,8,1,4,3,2
"org.apache.cassandra.tools.NodeProbe.upgradeSSTables(String,boolean,String...)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.tools.NodeProbe.verify(PrintStream,boolean,String,String...)",2,0,n/a,8,1,4,3,2
"org.apache.cassandra.tools.NodeProbe.verify(boolean,String,String...)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.connect()",12,1,n/a,17,1,0,9,3
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.execute(NodeProbe)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.parseOptionalKeyspace(List<String>,NodeProbe)",1,9,n/a,4,0,2,1,1
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.parseOptionalKeyspace(List<String>,NodeProbe,boolean)",11,1,n/a,14,1,3,8,6
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.parseOptionalTables(List<String>)",4,9,n/a,4,0,1,1,2
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.promptAndReadPassword()",3,1,n/a,8,0,0,5,2
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.readUserPasswordFromFile(String,String)",11,1,n/a,24,4,2,12,6
"org.apache.cassandra.tools.NodeTool.NodeToolCmd.run()",10,0,n/a,20,1,0,10,6
"org.apache.cassandra.tools.NodeTool.badUse(Exception)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.tools.NodeTool.err(Throwable)",5,1,n/a,6,0,1,3,1
"org.apache.cassandra.tools.NodeTool.getOwnershipByDc(NodeProbe,boolean,Map<String, String>,Map<InetAddress, Float>)",13,2,n/a,22,2,4,10,4
"org.apache.cassandra.tools.NodeTool.main(String...)",17,0,n/a,124,1,1,15,3
"org.apache.cassandra.tools.NodeTool.printHistory(String...)",15,1,n/a,17,1,1,7,3
"org.apache.cassandra.tools.RepairRunner.RepairRunner(PrintStream,StorageServiceMBean,String,Map<String, String>)",0,0,n/a,7,0,4,4,1
"org.apache.cassandra.tools.RepairRunner.handleConnectionClosed(long,String)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.tools.RepairRunner.handleConnectionFailed(long,String)",4,2,n/a,8,0,2,2,1
"org.apache.cassandra.tools.RepairRunner.handleNotificationLost(long,String)",0,2,n/a,5,0,2,1,1
"org.apache.cassandra.tools.RepairRunner.isInterestedIn(String)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.tools.RepairRunner.progress(String,ProgressEvent)",8,0,n/a,15,1,2,7,3
"org.apache.cassandra.tools.RepairRunner.run()",8,0,n/a,21,2,0,9,4
"org.apache.cassandra.tools.SSTableExpiredBlockers.checkForExpiredSSTableBlockers(Iterable<SSTableReader>,int)",7,2,n/a,18,3,2,7,7
"org.apache.cassandra.tools.SSTableExpiredBlockers.formatForExpiryTracing(Iterable<SSTableReader>)",8,2,n/a,7,0,1,4,2
"org.apache.cassandra.tools.SSTableExpiredBlockers.main(String[])",38,0,n/a,52,3,1,29,8
"org.apache.cassandra.tools.SSTableLevelResetter.main(String[])",35,0,n/a,68,4,1,36,10
"org.apache.cassandra.tools.SSTableMetadataViewer.main(String[])",36,0,n/a,55,4,1,32,8
"org.apache.cassandra.tools.SSTableMetadataViewer.printHistograms(StatsMetadata,PrintStream)",7,1,n/a,15,1,2,8,4
"org.apache.cassandra.tools.SSTableOfflineRelevel.Relevel.Relevel(Set<SSTableReader>)",3,1,n/a,5,0,1,2,1
"org.apache.cassandra.tools.SSTableOfflineRelevel.Relevel.relevel(boolean)",39,1,n/a,5,3,1,41,15
"org.apache.cassandra.tools.SSTableOfflineRelevel.main(String[])",31,0,n/a,50,3,1,29,7
"org.apache.cassandra.tools.SSTableRepairedAtSetter.main(String[])",31,0,n/a,53,3,1,25,10
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.FileType.FileType(String,String)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.FileType.descr()",7,1,n/a,12,1,0,7,2
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.FileType.fromOption(String)",2,1,n/a,9,1,1,4,3
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.Options(String,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.errorMsg(String,CmdLineOptions)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.getCmdLineOptions()",8,1,n/a,11,0,0,8,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.parseArgs(String[])",19,1,n/a,36,2,1,24,5
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.printUsage(CmdLineOptions)",9,3,n/a,10,0,1,7,1
"org.apache.cassandra.tools.StandaloneSSTableUtil.getFilter(Options)",1,1,n/a,17,2,1,10,5
"org.apache.cassandra.tools.StandaloneSSTableUtil.listFiles(Options,CFMetaData,OutputHandler)",7,1,n/a,9,1,3,4,3
"org.apache.cassandra.tools.StandaloneSSTableUtil.main(String[])",15,0,n/a,33,2,1,17,5
"org.apache.cassandra.tools.StandaloneScrubber.Options.Options(String,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.tools.StandaloneScrubber.Options.errorMsg(String,CmdLineOptions)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.tools.StandaloneScrubber.Options.getCmdLineOptions()",7,1,n/a,11,0,0,8,1
"org.apache.cassandra.tools.StandaloneScrubber.Options.parseArgs(String[])",18,1,n/a,36,2,1,24,5
"org.apache.cassandra.tools.StandaloneScrubber.Options.printUsage(CmdLineOptions)",9,3,n/a,10,0,1,7,1
"org.apache.cassandra.tools.StandaloneScrubber.checkManifest(CompactionStrategyManager,ColumnFamilyStore,Collection<SSTableReader>)",20,1,n/a,5,3,3,17,5
"org.apache.cassandra.tools.StandaloneScrubber.main(String[])",55,0,n/a,92,6,1,51,16
"org.apache.cassandra.tools.StandaloneSplitter.Options.Options(List<String>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.tools.StandaloneSplitter.Options.errorMsg(String,CmdLineOptions)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.tools.StandaloneSplitter.Options.getCmdLineOptions()",5,1,n/a,9,0,0,6,1
"org.apache.cassandra.tools.StandaloneSplitter.Options.parseArgs(String[])",19,1,n/a,33,2,1,21,5
"org.apache.cassandra.tools.StandaloneSplitter.Options.printUsage(CmdLineOptions)",9,3,n/a,10,0,1,7,1
"org.apache.cassandra.tools.StandaloneSplitter.isSSTableLargerEnough(SSTableReader,int)",1,1,n/a,6,0,2,1,1
"org.apache.cassandra.tools.StandaloneSplitter.main(String[])",71,0,n/a,113,4,1,72,24
"org.apache.cassandra.tools.StandaloneUpgrader.Options.Options(String,String,String)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.tools.StandaloneUpgrader.Options.errorMsg(String,CmdLineOptions)",3,2,n/a,6,0,2,3,1
"org.apache.cassandra.tools.StandaloneUpgrader.Options.getCmdLineOptions()",4,1,n/a,8,0,0,5,1
"org.apache.cassandra.tools.StandaloneUpgrader.Options.parseArgs(String[])",14,1,n/a,35,2,1,23,7
"org.apache.cassandra.tools.StandaloneUpgrader.Options.printUsage(CmdLineOptions)",16,2,n/a,17,0,1,14,1
"org.apache.cassandra.tools.StandaloneUpgrader.main(String[])",50,0,n/a,77,3,1,45,14
"org.apache.cassandra.tools.StandaloneVerifier.Options.Options(String,String)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.tools.StandaloneVerifier.Options.errorMsg(String,CmdLineOptions)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.tools.StandaloneVerifier.Options.getCmdLineOptions()",5,1,n/a,9,0,0,6,1
"org.apache.cassandra.tools.StandaloneVerifier.Options.parseArgs(String[])",16,1,n/a,34,2,1,22,5
"org.apache.cassandra.tools.StandaloneVerifier.Options.printUsage(CmdLineOptions)",9,3,n/a,10,0,1,7,1
"org.apache.cassandra.tools.StandaloneVerifier.main(String[])",42,0,n/a,70,4,1,38,13
"org.apache.cassandra.tools.Util.Util()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.tools.Util.initDatabaseDescriptor()",11,0,n/a,27,2,0,10,4
"org.apache.cassandra.tools.nodetool.Assassinate.execute(NodeProbe)",2,0,n/a,12,1,1,3,2
"org.apache.cassandra.tools.nodetool.BootstrapResume.execute(NodeProbe)",2,0,n/a,12,1,1,3,2
"org.apache.cassandra.tools.nodetool.Cleanup.execute(NodeProbe)",5,0,n/a,19,2,1,8,4
"org.apache.cassandra.tools.nodetool.ClearSnapshot.execute(NodeProbe)",17,0,n/a,20,1,1,11,4
"org.apache.cassandra.tools.nodetool.Compact.execute(NodeProbe)",4,0,n/a,16,2,1,6,3
"org.apache.cassandra.tools.nodetool.CompactionHistory.execute(NodeProbe)",11,0,n/a,20,1,1,12,3
"org.apache.cassandra.tools.nodetool.CompactionStats.addLine(List<String[]>,int[],String...)",3,2,n/a,6,1,3,5,2
"org.apache.cassandra.tools.nodetool.CompactionStats.execute(NodeProbe)",35,0,n/a,50,2,1,37,10
"org.apache.cassandra.tools.nodetool.Decommission.execute(NodeProbe)",4,0,n/a,14,1,1,4,3
"org.apache.cassandra.tools.nodetool.DescribeCluster.execute(NodeProbe)",15,0,n/a,16,1,1,8,2
"org.apache.cassandra.tools.nodetool.DescribeRing.execute(NodeProbe)",6,0,n/a,16,2,1,6,3
"org.apache.cassandra.tools.nodetool.DisableAutoCompaction.execute(NodeProbe)",4,0,n/a,16,2,1,6,3
"org.apache.cassandra.tools.nodetool.DisableBackup.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.DisableBinary.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.DisableGossip.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.DisableHandoff.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.DisableHintsForDC.execute(NodeProbe)",4,0,n/a,5,0,1,2,1
"org.apache.cassandra.tools.nodetool.DisableThrift.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.Drain.execute(NodeProbe)",2,0,n/a,11,1,1,3,2
"org.apache.cassandra.tools.nodetool.EnableAutoCompaction.execute(NodeProbe)",4,0,n/a,16,2,1,6,3
"org.apache.cassandra.tools.nodetool.EnableBackup.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.EnableBinary.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.EnableGossip.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.EnableHandoff.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.EnableHintsForDC.execute(NodeProbe)",4,0,n/a,5,0,1,2,1
"org.apache.cassandra.tools.nodetool.EnableThrift.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.FailureDetectorInfo.execute(NodeProbe)",9,0,n/a,12,1,1,5,2
"org.apache.cassandra.tools.nodetool.Flush.execute(NodeProbe)",4,0,n/a,16,2,1,6,3
"org.apache.cassandra.tools.nodetool.GcStats.execute(NodeProbe)",4,0,n/a,9,0,1,5,1
"org.apache.cassandra.tools.nodetool.GetCompactionThreshold.execute(NodeProbe)",8,0,n/a,11,0,1,5,1
"org.apache.cassandra.tools.nodetool.GetCompactionThroughput.execute(NodeProbe)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.GetEndpoints.execute(NodeProbe)",8,0,n/a,13,1,1,7,2
"org.apache.cassandra.tools.nodetool.GetLoggingLevels.execute(NodeProbe)",6,0,n/a,8,0,1,3,2
"org.apache.cassandra.tools.nodetool.GetSSTables.execute(NodeProbe)",7,0,n/a,13,1,1,7,2
"org.apache.cassandra.tools.nodetool.GetStreamThroughput.execute(NodeProbe)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.GetTraceProbability.execute(NodeProbe)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.GossipInfo.execute(NodeProbe)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.HostStat.HostStat(String,InetAddress,boolean,Float)",0,0,n/a,7,0,4,4,1
"org.apache.cassandra.tools.nodetool.HostStat.ipOrDns()",2,0,n/a,4,0,0,1,2
"org.apache.cassandra.tools.nodetool.Info.execute(NodeProbe)",66,0,n/a,84,1,1,33,8
"org.apache.cassandra.tools.nodetool.Info.getOffHeapMemoryUsed(NodeProbe)",10,1,n/a,21,1,1,11,2
"org.apache.cassandra.tools.nodetool.InvalidateCounterCache.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.InvalidateKeyCache.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.InvalidateRowCache.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.Join.execute(NodeProbe)",4,0,n/a,12,1,1,4,2
"org.apache.cassandra.tools.nodetool.ListSnapshots.execute(NodeProbe)",23,0,n/a,33,3,1,17,5
"org.apache.cassandra.tools.nodetool.Move.execute(NodeProbe)",2,0,n/a,11,1,1,3,2
"org.apache.cassandra.tools.nodetool.NetStats.execute(NodeProbe)",69,0,n/a,76,4,1,53,18
"org.apache.cassandra.tools.nodetool.PauseHandoff.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.ProxyHistograms.execute(NodeProbe)",14,0,n/a,22,1,1,12,2
"org.apache.cassandra.tools.nodetool.RangeKeySample.execute(NodeProbe)",3,0,n/a,10,1,1,4,2
"org.apache.cassandra.tools.nodetool.Rebuild.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.RebuildIndex.execute(NodeProbe)",8,0,n/a,6,0,1,2,1
"org.apache.cassandra.tools.nodetool.Refresh.execute(NodeProbe)",5,0,n/a,6,0,1,2,1
"org.apache.cassandra.tools.nodetool.ReloadTriggers.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.RemoveNode.execute(NodeProbe)",6,0,n/a,17,1,1,11,4
"org.apache.cassandra.tools.nodetool.Repair.execute(NodeProbe)",33,0,n/a,46,2,1,28,14
"org.apache.cassandra.tools.nodetool.ReplayBatchlog.execute(NodeProbe)",2,0,n/a,11,1,1,3,2
"org.apache.cassandra.tools.nodetool.ResetLocalSchema.execute(NodeProbe)",2,0,n/a,11,1,1,3,2
"org.apache.cassandra.tools.nodetool.ResumeHandoff.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.Ring.execute(NodeProbe)",33,0,n/a,5,2,1,27,6
"org.apache.cassandra.tools.nodetool.Ring.printDc(NodeProbe,String,String,LinkedHashMultimap<String, String>,SetHostStat,boolean)",33,1,n/a,58,2,6,35,13
"org.apache.cassandra.tools.nodetool.Scrub.execute(NodeProbe)",4,0,n/a,19,2,1,7,4
"org.apache.cassandra.tools.nodetool.SetCacheCapacity.execute(NodeProbe)",6,0,n/a,6,0,1,2,1
"org.apache.cassandra.tools.nodetool.SetCacheKeysToSave.execute(NodeProbe)",6,0,n/a,6,0,1,2,1
"org.apache.cassandra.tools.nodetool.SetCompactionThreshold.execute(NodeProbe)",12,0,n/a,11,0,1,7,3
"org.apache.cassandra.tools.nodetool.SetCompactionThroughput.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.SetHintedHandoffThrottleInKB.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.SetHostStat.SetHostStat(boolean)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.tools.nodetool.SetHostStat.add(String,String,Map<InetAddress, Float>)",4,0,n/a,6,0,3,3,1
"org.apache.cassandra.tools.nodetool.SetHostStat.iterator()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.tools.nodetool.SetHostStat.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tools.nodetool.SetLoggingLevel.execute(NodeProbe)",5,0,n/a,7,0,1,3,3
"org.apache.cassandra.tools.nodetool.SetStreamThroughput.execute(NodeProbe)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.tools.nodetool.SetTraceProbability.execute(NodeProbe)",2,0,n/a,6,0,1,2,2
"org.apache.cassandra.tools.nodetool.Snapshot.execute(NodeProbe)",34,0,n/a,42,3,1,22,9
"org.apache.cassandra.tools.nodetool.Status.execute(NodeProbe)",43,0,n/a,58,2,1,42,8
"org.apache.cassandra.tools.nodetool.Status.findMaxAddressLength(Map<String, SetHostStat>)",5,1,n/a,11,2,1,4,3
"org.apache.cassandra.tools.nodetool.Status.getFormat(boolean,boolean)",12,2,n/a,25,1,2,17,5
"org.apache.cassandra.tools.nodetool.Status.printNode(String,Float,List<HostStat>,boolean,boolean)",19,1,n/a,27,1,5,24,11
"org.apache.cassandra.tools.nodetool.Status.printNodesHeader(boolean,boolean)",3,1,n/a,9,0,2,5,3
"org.apache.cassandra.tools.nodetool.StatusBackup.execute(NodeProbe)",2,0,n/a,8,0,1,1,2
"org.apache.cassandra.tools.nodetool.StatusBinary.execute(NodeProbe)",2,0,n/a,8,0,1,1,2
"org.apache.cassandra.tools.nodetool.StatusGossip.execute(NodeProbe)",2,0,n/a,8,0,1,1,2
"org.apache.cassandra.tools.nodetool.StatusHandoff.execute(NodeProbe)",6,0,n/a,10,0,1,3,3
"org.apache.cassandra.tools.nodetool.StatusThrift.execute(NodeProbe)",2,0,n/a,8,0,1,1,2
"org.apache.cassandra.tools.nodetool.Stop.execute(NodeProbe)",4,0,n/a,8,0,1,3,2
"org.apache.cassandra.tools.nodetool.StopDaemon.execute(NodeProbe)",3,0,n/a,13,1,1,4,2
"org.apache.cassandra.tools.nodetool.TableHistograms.execute(NodeProbe)",42,0,n/a,78,2,1,55,11
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter.OptionFilter(boolean,List<String>)",15,1,n/a,27,3,2,13,5
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter.isColumnFamilyIncluded(String,String)",6,2,n/a,17,0,2,9,4
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter.verifyColumnFamilies()",5,1,n/a,6,0,0,3,3
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter.verifyKeyspaces(List<String>)",3,1,n/a,6,0,1,3,3
"org.apache.cassandra.tools.nodetool.TableStats.execute(NodeProbe)",132,0,n/a,156,4,1,118,27
"org.apache.cassandra.tools.nodetool.TableStats.format(long,boolean)",2,13,n/a,3,0,2,1,2
"org.apache.cassandra.tools.nodetool.TopPartitions.execute(NodeProbe)",46,0,n/a,4,3,1,34,9
"org.apache.cassandra.tools.nodetool.TpStats.execute(NodeProbe)",15,0,n/a,18,1,1,6,3
"org.apache.cassandra.tools.nodetool.TruncateHints.execute(NodeProbe)",3,0,n/a,8,0,1,3,2
"org.apache.cassandra.tools.nodetool.UpgradeSSTable.execute(NodeProbe)",4,0,n/a,16,2,1,6,3
"org.apache.cassandra.tools.nodetool.Verify.execute(NodeProbe)",4,0,n/a,16,2,1,6,3
"org.apache.cassandra.tools.nodetool.Version.execute(NodeProbe)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.tracing.ExpiredTraceState.ExpiredTraceState(UUID,TraceType)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.tracing.ExpiredTraceState.elapsed()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.tracing.TraceKeyspace.TraceKeyspace()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.tracing.TraceKeyspace.compile(String,String,String)",3,2,n/a,5,0,3,1,1
"org.apache.cassandra.tracing.TraceKeyspace.makeEventMutation(ByteBuffer,String,int,String,int)",10,0,n/a,11,0,5,7,2
"org.apache.cassandra.tracing.TraceKeyspace.makeStartSessionMutation(ByteBuffer,InetAddress,Map<String, String>,String,long,String,int)",15,0,n/a,19,0,7,4,2
"org.apache.cassandra.tracing.TraceKeyspace.makeStopSessionMutation(ByteBuffer,int,int)",5,0,n/a,7,0,3,1,1
"org.apache.cassandra.tracing.TraceKeyspace.metadata()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.tracing.TraceState.TraceState(InetAddress,UUID,TraceType)",3,0,n/a,12,0,3,9,1
"org.apache.cassandra.tracing.TraceState.acquireReference()",2,0,n/a,11,1,0,6,4
"org.apache.cassandra.tracing.TraceState.addProgressListener(ProgressListener)",1,1,n/a,6,0,1,2,1
"org.apache.cassandra.tracing.TraceState.elapsed()",1,1,n/a,5,0,0,2,2
"org.apache.cassandra.tracing.TraceState.enableActivityNotification(String)",0,1,n/a,11,0,1,3,1
"org.apache.cassandra.tracing.TraceState.executeMutation(Mutation)",4,1,n/a,4,2,1,2,1
"org.apache.cassandra.tracing.TraceState.mutateWithCatch(Mutation)",3,2,n/a,11,1,1,3,2
"org.apache.cassandra.tracing.TraceState.mutateWithTracing(ByteBuffer,String,int,int)",7,1,n/a,4,2,4,3,1
"org.apache.cassandra.tracing.TraceState.notifyActivity()",1,1,n/a,5,0,0,2,1
"org.apache.cassandra.tracing.TraceState.releaseReference()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.tracing.TraceState.removeProgressListener(ProgressListener)",1,1,n/a,6,0,1,2,1
"org.apache.cassandra.tracing.TraceState.stop()",1,0,n/a,5,0,0,2,1
"org.apache.cassandra.tracing.TraceState.trace(String)",8,5,n/a,12,1,1,7,3
"org.apache.cassandra.tracing.TraceState.trace(String,Object)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.tracing.TraceState.trace(String,Object,Object)",3,3,n/a,4,0,3,1,1
"org.apache.cassandra.tracing.TraceState.trace(String,Object[])",3,1,n/a,4,0,2,1,1
"org.apache.cassandra.tracing.TraceState.waitActivity(long)",2,1,n/a,27,2,1,8,4
"org.apache.cassandra.tracing.Tracing.TraceType.deserialize(byte)",0,2,n/a,6,0,1,3,3
"org.apache.cassandra.tracing.Tracing.TraceType.getTTL()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tracing.Tracing.TraceType.serialize(TraceType)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tracing.Tracing.begin(String,InetAddress,Map<String, String>)",6,5,n/a,11,0,3,8,1
"org.apache.cassandra.tracing.Tracing.begin(String,Map<String, String>)",1,20,n/a,4,0,2,1,1
"org.apache.cassandra.tracing.Tracing.doneWithNonLocalSession(TraceState)",2,1,n/a,5,0,1,2,2
"org.apache.cassandra.tracing.Tracing.get()",1,13,n/a,4,0,0,1,1
"org.apache.cassandra.tracing.Tracing.get(UUID)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.tracing.Tracing.getSessionId()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.tracing.Tracing.getTTL()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.tracing.Tracing.getTraceType()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.tracing.Tracing.initializeFromMessage(MessageIn<?>)",10,1,n/a,31,1,1,17,6
"org.apache.cassandra.tracing.Tracing.isTracing()",1,14,n/a,7,0,0,1,1
"org.apache.cassandra.tracing.Tracing.newSession()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.tracing.Tracing.newSession(TraceType)",4,2,n/a,4,0,1,1,1
"org.apache.cassandra.tracing.Tracing.newSession(UUID)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.tracing.Tracing.newSession(UUID,TraceType)",4,2,n/a,8,0,2,5,1
"org.apache.cassandra.tracing.Tracing.set(TraceState)",1,5,n/a,4,0,1,1,1
"org.apache.cassandra.tracing.Tracing.stopSession()",8,24,n/a,21,1,0,10,2
"org.apache.cassandra.tracing.Tracing.trace(String)",2,32,n/a,8,0,1,4,2
"org.apache.cassandra.tracing.Tracing.trace(String,Object)",2,0,n/a,7,0,2,4,2
"org.apache.cassandra.tracing.Tracing.trace(String,Object,Object)",2,0,n/a,7,0,3,4,2
"org.apache.cassandra.tracing.Tracing.trace(String,Object...)",2,9,n/a,7,0,2,4,2
"org.apache.cassandra.tracing.Tracing.traceRepair(String,Object...)",2,11,n/a,8,0,2,4,2
"org.apache.cassandra.transport.CBCodec.decode(ByteBuf,int)",n/a,2,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.transport.CBCodec.encode(T,ByteBuf,int)",n/a,2,1,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.transport.CBCodec.encodedSize(T,int)",n/a,2,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.transport.CBUtil.CBUtil()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.transport.CBUtil.decodeString(ByteBuffer)",13,1,n/a,18,0,1,10,3
"org.apache.cassandra.transport.CBUtil.readBoundValue(ByteBuf,int)",5,2,n/a,17,1,2,11,5
"org.apache.cassandra.transport.CBUtil.readBytes(ByteBuf)",3,0,n/a,14,1,1,6,2
"org.apache.cassandra.transport.CBUtil.readBytesMap(ByteBuf)",5,0,n/a,12,1,1,9,2
"org.apache.cassandra.transport.CBUtil.readConsistencyLevel(ByteBuf)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.transport.CBUtil.readEnumValue(Class<T>,ByteBuf)",6,0,n/a,12,1,2,4,2
"org.apache.cassandra.transport.CBUtil.readInet(ByteBuf)",7,0,n/a,15,1,1,7,2
"org.apache.cassandra.transport.CBUtil.readLongString(ByteBuf)",3,1,n/a,12,1,1,4,2
"org.apache.cassandra.transport.CBUtil.readNameAndValueList(ByteBuf,int)",11,1,n/a,14,1,2,11,3
"org.apache.cassandra.transport.CBUtil.readRawBytes(ByteBuf)",2,2,n/a,9,0,1,3,1
"org.apache.cassandra.transport.CBUtil.readString(ByteBuf)",3,8,n/a,12,1,1,4,2
"org.apache.cassandra.transport.CBUtil.readString(ByteBuf,int)",7,2,n/a,16,1,2,8,3
"org.apache.cassandra.transport.CBUtil.readStringList(ByteBuf)",4,1,n/a,8,0,1,7,2
"org.apache.cassandra.transport.CBUtil.readStringMap(ByteBuf)",5,1,n/a,12,1,1,9,2
"org.apache.cassandra.transport.CBUtil.readStringToStringListMap(ByteBuf)",6,1,n/a,12,1,1,9,2
"org.apache.cassandra.transport.CBUtil.readUUID(ByteBuf)",3,0,n/a,6,0,1,3,1
"org.apache.cassandra.transport.CBUtil.readValue(ByteBuf)",4,4,n/a,8,0,1,5,2
"org.apache.cassandra.transport.CBUtil.readValueList(ByteBuf,int)",5,1,n/a,10,0,2,9,3
"org.apache.cassandra.transport.CBUtil.sizeOfBytes(byte[])",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfBytesMap(Map<String, ByteBuffer>)",5,0,n/a,10,1,1,5,2
"org.apache.cassandra.transport.CBUtil.sizeOfConsistencyLevel(ConsistencyLevel)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfEnumValue(T)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfInet(InetSocketAddress)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.transport.CBUtil.sizeOfLongString(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfString(String)",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfStringList(List<String>)",1,1,n/a,7,0,1,4,2
"org.apache.cassandra.transport.CBUtil.sizeOfStringMap(Map<String, String>)",5,1,n/a,10,1,1,5,2
"org.apache.cassandra.transport.CBUtil.sizeOfStringToStringListMap(Map<String, List<String>>)",5,1,n/a,10,1,1,5,2
"org.apache.cassandra.transport.CBUtil.sizeOfUUID(UUID)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.CBUtil.sizeOfValue(ByteBuffer)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.transport.CBUtil.sizeOfValue(byte[])",0,2,n/a,4,0,1,1,2
"org.apache.cassandra.transport.CBUtil.sizeOfValue(int)",0,1,n/a,6,0,1,1,2
"org.apache.cassandra.transport.CBUtil.sizeOfValueList(List<ByteBuffer>)",1,1,n/a,7,0,1,4,2
"org.apache.cassandra.transport.CBUtil.writeBytes(byte[],ByteBuf)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.transport.CBUtil.writeBytesMap(Map<String, ByteBuffer>,ByteBuf)",7,0,n/a,9,1,2,4,2
"org.apache.cassandra.transport.CBUtil.writeConsistencyLevel(ConsistencyLevel,ByteBuf)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.transport.CBUtil.writeEnumValue(T,ByteBuf)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.CBUtil.writeInet(InetSocketAddress,ByteBuf)",6,0,n/a,7,0,2,4,1
"org.apache.cassandra.transport.CBUtil.writeLongString(String,ByteBuf)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.transport.CBUtil.writeString(String,ByteBuf)",3,7,n/a,6,0,2,3,1
"org.apache.cassandra.transport.CBUtil.writeStringList(List<String>,ByteBuf)",3,1,n/a,6,0,2,3,2
"org.apache.cassandra.transport.CBUtil.writeStringMap(Map<String, String>,ByteBuf)",7,1,n/a,9,1,2,4,2
"org.apache.cassandra.transport.CBUtil.writeStringToStringListMap(Map<String, List<String>>,ByteBuf)",7,1,n/a,9,1,2,4,2
"org.apache.cassandra.transport.CBUtil.writeUUID(UUID,ByteBuf)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.CBUtil.writeValue(ByteBuffer,ByteBuf)",5,2,n/a,12,1,2,7,3
"org.apache.cassandra.transport.CBUtil.writeValue(byte[],ByteBuf)",3,2,n/a,10,1,2,5,2
"org.apache.cassandra.transport.CBUtil.writeValueList(List<ByteBuffer>,ByteBuf)",3,1,n/a,6,0,2,3,2
"org.apache.cassandra.transport.Client.Client(String,int,int,ClientEncryptionOptions)",2,1,n/a,5,0,4,2,1
"org.apache.cassandra.transport.Client.encodeCredentialsForSasl(Map<String, String>)",6,1,n/a,11,0,1,8,1
"org.apache.cassandra.transport.Client.main(String[])",10,0,n/a,18,1,1,11,4
"org.apache.cassandra.transport.Client.parseLine(String)",66,1,n/a,112,4,1,62,20
"org.apache.cassandra.transport.Client.readCredentials(Iterator<String>)",6,2,n/a,16,2,1,9,3
"org.apache.cassandra.transport.Client.run()",19,1,n/a,40,2,0,23,6
"org.apache.cassandra.transport.Connection.Connection(Channel,int,Tracker)",1,0,n/a,7,0,3,4,1
"org.apache.cassandra.transport.Connection.Factory.newConnection(Channel,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.transport.Connection.Tracker.addConnection(Channel,Connection)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.transport.Connection.channel()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Connection.getCompressor()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Connection.getTracker()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Connection.getVersion()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Connection.setCompressor(FrameCompressor)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.ConnectionLimitHandler.channelActive(ChannelHandlerContext)",15,0,n/a,43,4,1,21,7
"org.apache.cassandra.transport.ConnectionLimitHandler.channelInactive(ChannelHandlerContext)",8,0,n/a,15,2,1,7,3
"org.apache.cassandra.transport.DataType.DataType(int,AbstractType,int)",0,26,n/a,6,0,3,3,1
"org.apache.cassandra.transport.DataType.fromType(AbstractType,int)",18,11,n/a,43,3,2,23,13
"org.apache.cassandra.transport.DataType.getId(int)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.transport.DataType.getProtocolVersion()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.DataType.readValue(ByteBuf,int)",31,0,n/a,37,2,2,34,10
"org.apache.cassandra.transport.DataType.serializedValueSize(Object,int)",25,0,n/a,40,2,2,36,10
"org.apache.cassandra.transport.DataType.toType(Pair<DataType, Object>)",8,6,n/a,28,2,1,18,9
"org.apache.cassandra.transport.DataType.writeValue(Object,ByteBuf,int)",31,0,n/a,44,2,3,38,10
"org.apache.cassandra.transport.Event.Event(Type)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Event.NodeEvent.NodeEvent(Type,InetSocketAddress)",1,2,n/a,5,0,2,2,1
"org.apache.cassandra.transport.Event.NodeEvent.nodeAddress()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Event.SchemaChange.SchemaChange(Change,String)",1,6,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Event.SchemaChange.SchemaChange(Change,Target,String,String)",1,21,n/a,4,0,4,1,1
"org.apache.cassandra.transport.Event.SchemaChange.SchemaChange(Change,Target,String,String,List<String>)",1,12,n/a,11,0,5,8,2
"org.apache.cassandra.transport.Event.SchemaChange.deserializeEvent(ByteBuf,int)",11,1,n/a,21,1,2,12,7
"org.apache.cassandra.transport.Event.SchemaChange.equals(Object)",5,0,n/a,12,0,1,4,6
"org.apache.cassandra.transport.Event.SchemaChange.eventSerializedSize(int)",21,1,n/a,40,2,1,14,9
"org.apache.cassandra.transport.Event.SchemaChange.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.Event.SchemaChange.serializeEvent(ByteBuf,int)",19,1,n/a,50,2,2,26,9
"org.apache.cassandra.transport.Event.SchemaChange.toString()",17,0,n/a,21,2,0,12,5
"org.apache.cassandra.transport.Event.StatusChange.StatusChange(Status,InetSocketAddress)",1,3,n/a,5,0,2,2,1
"org.apache.cassandra.transport.Event.StatusChange.deserializeEvent(ByteBuf,int)",3,1,n/a,7,0,2,3,1
"org.apache.cassandra.transport.Event.StatusChange.equals(Object)",2,0,n/a,9,0,1,4,3
"org.apache.cassandra.transport.Event.StatusChange.eventSerializedSize(int)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Event.StatusChange.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.Event.StatusChange.nodeDown(InetAddress,int)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Event.StatusChange.nodeUp(InetAddress,int)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Event.StatusChange.serializeEvent(ByteBuf,int)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.transport.Event.StatusChange.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.Event.TopologyChange.TopologyChange(Change,InetSocketAddress)",1,4,n/a,5,0,2,2,1
"org.apache.cassandra.transport.Event.TopologyChange.deserializeEvent(ByteBuf,int)",3,1,n/a,7,0,2,3,1
"org.apache.cassandra.transport.Event.TopologyChange.equals(Object)",2,0,n/a,9,0,1,4,3
"org.apache.cassandra.transport.Event.TopologyChange.eventSerializedSize(int)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Event.TopologyChange.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.Event.TopologyChange.movedNode(InetAddress,int)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Event.TopologyChange.newNode(InetAddress,int)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Event.TopologyChange.removedNode(InetAddress,int)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Event.TopologyChange.serializeEvent(ByteBuf,int)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.transport.Event.TopologyChange.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.Event.Type.Type(int)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Event.deserialize(ByteBuf,int)",7,1,n/a,16,1,2,11,5
"org.apache.cassandra.transport.Event.eventSerializedSize(int)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.transport.Event.serialize(ByteBuf,int)",4,1,n/a,7,0,2,4,2
"org.apache.cassandra.transport.Event.serializeEvent(ByteBuf,int)",n/a,1,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.transport.Event.serializedSize(int)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Frame.Compressor.encode(ChannelHandlerContext,Frame,List<Object>)",9,0,n/a,19,1,3,10,4
"org.apache.cassandra.transport.Frame.Decoder.Decoder(Factory)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Frame.Decoder.decode(ChannelHandlerContext,ByteBuf,List<Object>)",36,0,n/a,73,1,3,44,12
"org.apache.cassandra.transport.Frame.Decoder.fail()",3,2,n/a,9,0,0,5,1
"org.apache.cassandra.transport.Frame.Decompressor.decode(ChannelHandlerContext,Frame,List<Object>)",9,0,n/a,17,1,3,9,4
"org.apache.cassandra.transport.Frame.Encoder.encode(ChannelHandlerContext,Frame,List<Object>)",12,0,n/a,16,0,3,11,2
"org.apache.cassandra.transport.Frame.Frame(Header,ByteBuf)",0,3,n/a,17,0,2,2,1
"org.apache.cassandra.transport.Frame.Header.Flag.deserialize(int)",2,1,n/a,10,1,1,7,3
"org.apache.cassandra.transport.Frame.Header.Flag.serialize(EnumSet<Flag>)",1,1,n/a,7,0,1,4,2
"org.apache.cassandra.transport.Frame.Header.Header(int,EnumSet<Flag>,int,Type)",0,2,n/a,7,0,4,4,1
"org.apache.cassandra.transport.Frame.Header.Header(int,int,int,Type)",2,1,n/a,4,0,4,1,1
"org.apache.cassandra.transport.Frame.create(Type,int,int,EnumSet<Flag>,ByteBuf)",2,0,n/a,5,0,5,2,1
"org.apache.cassandra.transport.Frame.discard(ByteBuf,long)",3,2,n/a,7,0,2,3,1
"org.apache.cassandra.transport.Frame.release()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Frame.retain()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Frame.with(ByteBuf)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.FrameCompressor.LZ4Compressor.LZ4Compressor()",3,1,n/a,6,0,0,3,1
"org.apache.cassandra.transport.FrameCompressor.LZ4Compressor.compress(Frame)",10,0,n/a,28,1,1,16,2
"org.apache.cassandra.transport.FrameCompressor.LZ4Compressor.decompress(Frame)",10,0,n/a,27,1,1,12,3
"org.apache.cassandra.transport.FrameCompressor.SnappyCompressor.SnappyCompressor()",1,1,n/a,6,0,0,1,1
"org.apache.cassandra.transport.FrameCompressor.SnappyCompressor.compress(Frame)",10,0,n/a,21,1,1,9,2
"org.apache.cassandra.transport.FrameCompressor.SnappyCompressor.decompress(Frame)",12,0,n/a,23,1,1,11,3
"org.apache.cassandra.transport.FrameCompressor.compress(Frame)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.transport.FrameCompressor.decompress(Frame)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.transport.Message.Direction.addToVersion(int)",0,3,n/a,4,0,1,1,2
"org.apache.cassandra.transport.Message.Direction.extractFromVersion(int)",0,0,n/a,4,0,1,1,2
"org.apache.cassandra.transport.Message.Dispatcher.Dispatcher()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.Dispatcher.FlushItem.FlushItem(ChannelHandlerContext,Object,Frame)",0,2,n/a,6,0,3,3,1
"org.apache.cassandra.transport.Message.Dispatcher.Flusher.Flusher(EventLoop)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Message.Dispatcher.Flusher.run()",14,0,n/a,38,2,0,23,11
"org.apache.cassandra.transport.Message.Dispatcher.Flusher.start()",3,1,n/a,7,1,0,2,3
"org.apache.cassandra.transport.Message.Dispatcher.channelRead0(ChannelHandlerContext,Request)",31,0,n/a,33,1,2,21,3
"org.apache.cassandra.transport.Message.Dispatcher.exceptionCaught(ChannelHandlerContext,Throwable)",9,0,n/a,3,4,2,6,3
"org.apache.cassandra.transport.Message.Dispatcher.flush(FlushItem)",7,2,n/a,13,1,1,8,3
"org.apache.cassandra.transport.Message.Message(Type)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Message.ProtocolDecoder.decode(ChannelHandlerContext,Frame,List)",21,0,n/a,43,2,3,29,13
"org.apache.cassandra.transport.Message.ProtocolEncoder.encode(ChannelHandlerContext,Message,List)",35,0,n/a,78,3,3,47,16
"org.apache.cassandra.transport.Message.Request.Request(Type)",2,3,n/a,6,0,1,3,2
"org.apache.cassandra.transport.Message.Request.execute(QueryState)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.transport.Message.Request.isTracingRequested()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.Request.setTracingRequested()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.Response.Response(Type)",2,6,n/a,6,0,1,3,2
"org.apache.cassandra.transport.Message.Response.getTracingId()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.Response.getWarnings()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.Response.setTracingId(UUID)",0,2,n/a,5,0,1,2,1
"org.apache.cassandra.transport.Message.Response.setWarnings(List<String>)",0,2,n/a,5,0,1,2,1
"org.apache.cassandra.transport.Message.Type.Type(int,Direction,Codec<?>)",0,17,n/a,6,0,3,3,1
"org.apache.cassandra.transport.Message.Type.fromOpcode(int,Direction)",6,0,n/a,15,0,2,8,4
"org.apache.cassandra.transport.Message.UnexpectedChannelExceptionHandler.UnexpectedChannelExceptionHandler(Channel,boolean)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.transport.Message.UnexpectedChannelExceptionHandler.apply(Throwable)",5,0,n/a,34,2,1,10,5
"org.apache.cassandra.transport.Message.attach(Connection)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Message.connection()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.getCustomPayload()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.getSourceFrame()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.getStreamId()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Message.setCustomPayload(Map<String, ByteBuffer>)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Message.setSourceFrame(Frame)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Message.setStreamId(int)",0,3,n/a,5,0,1,2,1
"org.apache.cassandra.transport.OptionCodec.Codecable.getId(int)",n/a,6,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.transport.OptionCodec.Codecable.readValue(ByteBuf,int)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.transport.OptionCodec.Codecable.serializedValueSize(Object,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.transport.OptionCodec.Codecable.writeValue(Object,ByteBuf,int)",n/a,2,0,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.transport.OptionCodec.OptionCodec(Class<T>)",9,0,n/a,16,1,1,10,4
"org.apache.cassandra.transport.OptionCodec.decode(ByteBuf,int)",10,0,n/a,14,1,2,11,3
"org.apache.cassandra.transport.OptionCodec.decodeOne(ByteBuf,int)",4,0,n/a,6,0,2,3,1
"org.apache.cassandra.transport.OptionCodec.encode(Map<T, Object>,int)",13,0,n/a,15,1,2,10,3
"org.apache.cassandra.transport.OptionCodec.fromId(int)",2,2,n/a,7,0,1,4,2
"org.apache.cassandra.transport.OptionCodec.oneSerializedSize(Pair<T, Object>,int)",1,0,n/a,6,0,2,3,1
"org.apache.cassandra.transport.OptionCodec.writeOne(Pair<T, Object>,ByteBuf,int)",3,0,n/a,7,0,3,4,1
"org.apache.cassandra.transport.ProtocolException.ProtocolException(String)",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.transport.ProtocolException.code()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.awaitTermination(long,TimeUnit)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.execute(Runnable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.inEventLoop(Thread)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.isShutdown()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.isShuttingDown()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.isTerminated()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.parent()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.shutdown()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.shutdownGracefully(long,long,TimeUnit)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.shutdownNow()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.RequestThreadPoolExecutor.terminationFuture()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Server.AbstractSecureIntializer.AbstractSecureIntializer(Server,EncryptionOptions)",3,2,n/a,13,1,2,5,2
"org.apache.cassandra.transport.Server.AbstractSecureIntializer.createSslHandler()",6,2,n/a,8,0,0,6,1
"org.apache.cassandra.transport.Server.Builder.build()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Server.Builder.getSocket()",3,1,n/a,15,1,0,8,4
"org.apache.cassandra.transport.Server.Builder.withEventExecutor(EventExecutor)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.transport.Server.Builder.withEventLoopGroup(EventLoopGroup)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.transport.Server.Builder.withHost(InetAddress)",0,1,n/a,6,0,1,3,1
"org.apache.cassandra.transport.Server.Builder.withPort(int)",0,1,n/a,6,0,1,3,1
"org.apache.cassandra.transport.Server.Builder.withSSL(boolean)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.transport.Server.ConnectionTracker.ConnectionTracker()",4,1,n/a,5,0,0,2,2
"org.apache.cassandra.transport.Server.ConnectionTracker.addConnection(Channel,Connection)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.ConnectionTracker.closeAll()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Server.ConnectionTracker.getConnectedClients()",2,1,n/a,9,0,0,1,2
"org.apache.cassandra.transport.Server.ConnectionTracker.register(Type,Channel)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.ConnectionTracker.send(Event)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.EventNotifier(Server)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.getRpcAddress(InetAddress)",4,5,n/a,19,1,1,5,3
"org.apache.cassandra.transport.Server.EventNotifier.onCreateAggregate(String,String,List<AbstractType<?>>)",3,0,n/a,5,0,3,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onCreateColumnFamily(String,String)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onCreateFunction(String,String,List<AbstractType<?>>)",3,0,n/a,5,0,3,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onCreateKeyspace(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onCreateUserType(String,String)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDown(InetAddress)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropAggregate(String,String,List<AbstractType<?>>)",3,0,n/a,5,0,3,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropColumnFamily(String,String)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropFunction(String,String,List<AbstractType<?>>)",3,0,n/a,5,0,3,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropKeyspace(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onDropUserType(String,String)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onJoinCluster(InetAddress)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onLeaveCluster(InetAddress)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onMove(InetAddress)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onStatusChange(InetAddress,StatusChange)",6,2,n/a,12,1,2,7,5
"org.apache.cassandra.transport.Server.EventNotifier.onTopologyChange(InetAddress,TopologyChange)",6,3,n/a,12,1,2,7,5
"org.apache.cassandra.transport.Server.EventNotifier.onUp(InetAddress)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateAggregate(String,String,List<AbstractType<?>>)",3,0,n/a,5,0,3,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateColumnFamily(String,String,boolean)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateFunction(String,String,List<AbstractType<?>>)",3,0,n/a,5,0,3,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateKeyspace(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.onUpdateUserType(String,String)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.EventNotifier.send(Event)",1,16,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.EventNotifier.send(InetAddress,NodeEvent)",9,2,n/a,14,0,2,5,4
"org.apache.cassandra.transport.Server.Initializer.Initializer(Server)",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.transport.Server.Initializer.initChannel(Channel)",13,2,n/a,22,1,1,12,4
"org.apache.cassandra.transport.Server.LatestEvent.LatestEvent(Status,Change)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.transport.Server.LatestEvent.forStatusChange(Status,LatestEvent)",1,1,n/a,7,0,2,1,2
"org.apache.cassandra.transport.Server.LatestEvent.forTopologyChange(Change,LatestEvent)",1,1,n/a,7,0,2,1,2
"org.apache.cassandra.transport.Server.LatestEvent.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.Server.OptionalSecureInitializer.OptionalSecureInitializer(Server,EncryptionOptions)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.OptionalSecureInitializer.initChannel(Channel)",11,2,n/a,23,3,1,8,3
"org.apache.cassandra.transport.Server.SecureInitializer.SecureInitializer(Server,EncryptionOptions)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.transport.Server.SecureInitializer.initChannel(Channel)",4,2,n/a,6,0,1,3,1
"org.apache.cassandra.transport.Server.Server(Builder)",6,1,n/a,21,1,1,12,4
"org.apache.cassandra.transport.Server.close()",2,1,n/a,6,0,0,2,1
"org.apache.cassandra.transport.Server.getConnectedClients()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Server.isRunning()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.transport.Server.start()",35,1,n/a,42,2,0,20,8
"org.apache.cassandra.transport.Server.stop()",2,1,n/a,5,0,0,2,2
"org.apache.cassandra.transport.ServerConnection.ServerConnection(Channel,int,Tracker)",3,0,n/a,6,0,3,3,1
"org.apache.cassandra.transport.ServerConnection.applyStateTransition(Type,Type)",1,0,n/a,29,2,2,18,11
"org.apache.cassandra.transport.ServerConnection.getQueryState(int)",3,1,n/a,12,1,1,6,3
"org.apache.cassandra.transport.ServerConnection.getSaslNegotiator(QueryState)",3,0,n/a,6,0,1,3,2
"org.apache.cassandra.transport.ServerConnection.validateNewMessage(Type,int,int)",7,0,n/a,22,1,3,16,11
"org.apache.cassandra.transport.ServerError.ServerError(String)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.ServerError.ServerError(Throwable)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.ServerError.code()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.SimpleClient.ConnectionTracker.addConnection(Channel,Connection)",0,0,n/a,1,0,2,0,1
"org.apache.cassandra.transport.SimpleClient.ConnectionTracker.isRegistered(Type,Channel)",0,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.SimpleClient.EventHandler.onEvent(Event)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.transport.SimpleClient.Initializer.initChannel(Channel)",12,1,n/a,13,0,1,10,1
"org.apache.cassandra.transport.SimpleClient.ResponseHandler.channelRead0(ChannelHandlerContext,Response)",3,0,n/a,18,2,2,6,4
"org.apache.cassandra.transport.SimpleClient.ResponseHandler.exceptionCaught(ChannelHandlerContext,Throwable)",4,0,n/a,6,0,2,3,2
"org.apache.cassandra.transport.SimpleClient.SecureInitializer.SecureInitializer()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.SimpleClient.SecureInitializer.initChannel(Channel)",8,1,n/a,9,0,1,6,1
"org.apache.cassandra.transport.SimpleClient.SimpleClient(String,int)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.SimpleClient.SimpleClient(String,int,ClientEncryptionOptions)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.transport.SimpleClient.SimpleClient(String,int,int)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.transport.SimpleClient.SimpleClient(String,int,int,ClientEncryptionOptions)",0,2,n/a,7,0,4,4,1
"org.apache.cassandra.transport.SimpleClient.SimpleEventHandler.onEvent(Event)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.transport.SimpleClient.close()",5,0,n/a,11,0,0,4,2
"org.apache.cassandra.transport.SimpleClient.connect(boolean)",7,2,n/a,12,1,1,7,2
"org.apache.cassandra.transport.SimpleClient.establishConnection()",18,1,n/a,25,1,0,9,3
"org.apache.cassandra.transport.SimpleClient.execute(Request)",5,8,n/a,16,1,1,8,3
"org.apache.cassandra.transport.SimpleClient.execute(String,ConsistencyLevel)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.transport.SimpleClient.execute(String,List<ByteBuffer>,ConsistencyLevel)",3,1,n/a,6,0,3,3,1
"org.apache.cassandra.transport.SimpleClient.executePrepared(byte[],List<ByteBuffer>,ConsistencyLevel)",4,0,n/a,6,0,3,3,1
"org.apache.cassandra.transport.SimpleClient.login(Map<String, String>)",3,0,n/a,6,0,1,3,1
"org.apache.cassandra.transport.SimpleClient.prepare(String)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.transport.SimpleClient.setEventHandler(EventHandler)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.messages.AuthChallenge.AuthChallenge(byte[])",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.AuthChallenge.getToken()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.AuthResponse.AuthResponse(byte[])",1,1,n/a,6,0,1,3,1
"org.apache.cassandra.transport.messages.AuthResponse.execute(QueryState)",9,0,n/a,24,2,1,9,3
"org.apache.cassandra.transport.messages.AuthSuccess.AuthSuccess(byte[])",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.AuthSuccess.getToken()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.AuthenticateMessage.AuthenticateMessage(String)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.AuthenticateMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.BatchMessage.BatchMessage(Type,List<Object>,List<List<ByteBuffer>>,QueryOptions)",1,3,n/a,8,0,4,5,1
"org.apache.cassandra.transport.messages.BatchMessage.execute(QueryState)",49,0,n/a,72,3,1,47,13
"org.apache.cassandra.transport.messages.BatchMessage.toString()",15,0,n/a,13,1,0,10,3
"org.apache.cassandra.transport.messages.CredentialsMessage.CredentialsMessage()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.CredentialsMessage.CredentialsMessage(Map<String, String>)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.CredentialsMessage.execute(QueryState)",6,1,n/a,13,1,1,5,2
"org.apache.cassandra.transport.messages.CredentialsMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.ErrorMessage(TransportException)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.ErrorMessage.ErrorMessage(TransportException,int)",2,2,n/a,5,0,2,2,1
"org.apache.cassandra.transport.messages.ErrorMessage.WrappedException.WrappedException(Throwable,int)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.transport.messages.ErrorMessage.WrappedException.getStreamId()",0,2,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.fromException(Throwable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.fromException(Throwable,Predicate<Throwable>)",8,1,n/a,38,3,2,17,9
"org.apache.cassandra.transport.messages.ErrorMessage.getBackwardsCompatibleException(ErrorMessage,int)",5,2,n/a,18,2,2,11,5
"org.apache.cassandra.transport.messages.ErrorMessage.toString()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ErrorMessage.wrap(Throwable,int)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.transport.messages.EventMessage.EventMessage(Event)",2,2,n/a,6,0,1,3,1
"org.apache.cassandra.transport.messages.EventMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ExecuteMessage.ExecuteMessage(MD5Digest,QueryOptions)",1,4,n/a,6,0,2,3,1
"org.apache.cassandra.transport.messages.ExecuteMessage.execute(QueryState)",36,0,n/a,51,2,1,33,12
"org.apache.cassandra.transport.messages.ExecuteMessage.toString()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.OptionsMessage.OptionsMessage()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.OptionsMessage.execute(QueryState)",10,1,n/a,14,0,1,10,2
"org.apache.cassandra.transport.messages.OptionsMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.PrepareMessage.PrepareMessage(String)",1,4,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.PrepareMessage.execute(QueryState)",15,0,n/a,30,2,1,15,5
"org.apache.cassandra.transport.messages.PrepareMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.QueryMessage.QueryMessage(String,QueryOptions)",1,7,n/a,6,0,2,3,1
"org.apache.cassandra.transport.messages.QueryMessage.execute(QueryState)",34,1,n/a,44,2,1,29,13
"org.apache.cassandra.transport.messages.QueryMessage.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ReadyMessage.ReadyMessage()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.ReadyMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.RegisterMessage.RegisterMessage(List<Type>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.RegisterMessage.execute(QueryState)",9,0,n/a,13,1,1,8,3
"org.apache.cassandra.transport.messages.RegisterMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Kind.Kind(int,Codec<ResultMessage>)",0,5,n/a,5,0,2,2,1
"org.apache.cassandra.transport.messages.ResultMessage.Kind.fromId(int)",2,1,n/a,7,0,1,4,2
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.Prepared(MD5Digest,Prepared)",3,2,n/a,4,0,2,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.Prepared(MD5Digest,int,PreparedMetadata,ResultMetadata)",1,3,n/a,8,0,4,5,1
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.extractResultMetadata(CQLStatement)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.forThrift(int,List<ColumnSpecification>)",2,2,n/a,4,0,2,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.toThriftPreparedResult()",12,0,n/a,11,1,0,6,2
"org.apache.cassandra.transport.messages.ResultMessage.Prepared.toThriftResult()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.ResultMessage(Kind)",1,5,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.ResultMessage.Rows.Rows(ResultSet)",1,10,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.ResultMessage.Rows.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Rows.toThriftResult()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SchemaChange.SchemaChange(SchemaChange)",1,4,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.ResultMessage.SchemaChange.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SchemaChange.toThriftResult()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SetKeyspace.SetKeyspace(String)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.ResultMessage.SetKeyspace.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.SetKeyspace.toThriftResult()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Void.Void()",1,10,n/a,6,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Void.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.Void.toThriftResult()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.transport.messages.ResultMessage.toThriftResult()",n/a,0,5,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.transport.messages.StartupMessage.StartupMessage(Map<String, String>)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.StartupMessage.execute(QueryState)",26,0,n/a,37,2,1,19,9
"org.apache.cassandra.transport.messages.StartupMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.transport.messages.StartupMessage.upperCaseKeys(Map<String, String>)",7,1,n/a,7,0,1,4,2
"org.apache.cassandra.transport.messages.SupportedMessage.SupportedMessage(Map<String, List<String>>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.transport.messages.SupportedMessage.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.triggers.CustomClassLoader.CustomClassLoader(ClassLoader)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.triggers.CustomClassLoader.CustomClassLoader(ClassLoader,File)",3,0,n/a,7,0,2,4,1
"org.apache.cassandra.triggers.CustomClassLoader.addClassPath(File)",18,1,n/a,3,2,1,16,6
"org.apache.cassandra.triggers.CustomClassLoader.loadClass(String)",2,0,n/a,8,0,1,4,2
"org.apache.cassandra.triggers.CustomClassLoader.loadClassInternal(String)",4,1,n/a,15,1,1,6,2
"org.apache.cassandra.triggers.ITrigger.augment(Partition)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.triggers.TriggerExecutor.TriggerExecutor()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.triggers.TriggerExecutor.execute(Collection<? extends IMutation>)",9,1,n/a,42,2,1,19,9
"org.apache.cassandra.triggers.TriggerExecutor.execute(PartitionUpdate)",6,0,n/a,23,0,1,4,3
"org.apache.cassandra.triggers.TriggerExecutor.executeInternal(PartitionUpdate)",16,2,n/a,36,3,1,17,6
"org.apache.cassandra.triggers.TriggerExecutor.loadTriggerInstance(String)",5,2,n/a,7,0,1,3,2
"org.apache.cassandra.triggers.TriggerExecutor.mergeMutations(Iterable<Mutation>)",12,1,n/a,13,1,1,8,3
"org.apache.cassandra.triggers.TriggerExecutor.reloadClasses()",3,2,n/a,12,0,0,5,2
"org.apache.cassandra.triggers.TriggerExecutor.validate(Collection<Mutation>)",5,2,n/a,9,1,1,4,3
"org.apache.cassandra.triggers.TriggerExecutor.validateForSinglePartition(UUID,DecoratedKey,Collection<Mutation>)",14,1,n/a,25,2,3,13,5
"org.apache.cassandra.triggers.TriggerExecutor.validateSamePartition(UUID,DecoratedKey,PartitionUpdate)",6,2,n/a,8,0,3,4,3
"org.apache.cassandra.utils.AbstractIterator.computeNext()",n/a,1,39,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.AbstractIterator.endOfData()",0,42,n/a,5,0,0,2,1
"org.apache.cassandra.utils.AbstractIterator.hasNext()",2,7,n/a,16,1,0,11,5
"org.apache.cassandra.utils.AbstractIterator.next()",2,4,n/a,9,0,0,6,3
"org.apache.cassandra.utils.AbstractIterator.peek()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.utils.AbstractIterator.remove()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.add(FilterKey)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.utils.AlwaysPresentFilter.addTo(IdentityCollection)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.utils.AlwaysPresentFilter.clear()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.utils.AlwaysPresentFilter.close()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.utils.AlwaysPresentFilter.close(Throwable)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.isPresent(FilterKey)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.offHeapSize()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.serializedSize()",0,0,n/a,1,0,0,1,1
"org.apache.cassandra.utils.AlwaysPresentFilter.sharedCopy()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.Reversed.compare(T1,T1)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.Reversed.compareAsymmetric(T1,T2)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.Reversed.reverse()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.binarySearchAsymmetric(List<? extends T1>,T2,Op)",5,0,n/a,20,1,3,10,3
"org.apache.cassandra.utils.AsymmetricOrdering.compareAsymmetric(T1,T2)",n/a,2,1,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.AsymmetricOrdering.reverse()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.AsymmetricOrdering.selectBoundary(Op,int,int)",1,1,n/a,18,1,3,8,3
"org.apache.cassandra.utils.AsymmetricOrdering.strictnessOfLessThan(Op)",1,1,n/a,21,1,1,8,3
"org.apache.cassandra.utils.BackgroundActivityMonitor.BackgroundActivityMonitor()",6,1,n/a,15,1,0,7,3
"org.apache.cassandra.utils.BackgroundActivityMonitor.BackgroundActivityReporter.run()",8,0,n/a,21,1,0,12,5
"org.apache.cassandra.utils.BackgroundActivityMonitor.compareAtIndex(long[],long[],int)",0,1,n/a,16,1,3,12,3
"org.apache.cassandra.utils.BackgroundActivityMonitor.getIOWait()",2,1,n/a,9,0,0,6,2
"org.apache.cassandra.utils.BackgroundActivityMonitor.getNormalizedLoadAvg()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.utils.BackgroundActivityMonitor.getSeverity(InetAddress)",3,1,n/a,8,0,1,5,3
"org.apache.cassandra.utils.BackgroundActivityMonitor.incrCompactionSeverity(double)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.BackgroundActivityMonitor.incrManualSeverity(double)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.BackgroundActivityMonitor.readAndCompute()",8,2,n/a,11,0,0,10,2
"org.apache.cassandra.utils.BatchRemoveIterator.commit()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.BiMultiValMap.BiMultiValMap()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.utils.BiMultiValMap.BiMultiValMap(BiMultiValMap<K, V>)",4,1,n/a,6,0,1,3,1
"org.apache.cassandra.utils.BiMultiValMap.BiMultiValMap(Map<K, V>,Multimap<V, K>)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.utils.BiMultiValMap.clear()",2,2,n/a,5,0,0,2,1
"org.apache.cassandra.utils.BiMultiValMap.containsKey(Object)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.BiMultiValMap.containsValue(Object)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.BiMultiValMap.entrySet()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BiMultiValMap.get(Object)",1,11,n/a,4,0,1,1,1
"org.apache.cassandra.utils.BiMultiValMap.inverse()",1,6,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BiMultiValMap.isEmpty()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BiMultiValMap.keySet()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BiMultiValMap.put(K,V)",3,3,n/a,8,0,2,5,2
"org.apache.cassandra.utils.BiMultiValMap.putAll(Map<? extends K, ? extends V>)",4,0,n/a,5,0,1,2,2
"org.apache.cassandra.utils.BiMultiValMap.remove(Object)",2,1,n/a,6,0,1,3,1
"org.apache.cassandra.utils.BiMultiValMap.removeValue(V)",2,5,n/a,7,0,1,4,2
"org.apache.cassandra.utils.BiMultiValMap.size()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BiMultiValMap.valueSet()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BiMultiValMap.values()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BloomCalculations.BloomSpecification.BloomSpecification(int,int)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.utils.BloomCalculations.BloomSpecification.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BloomCalculations.computeBloomSpec(int)",1,0,n/a,13,0,1,3,1
"org.apache.cassandra.utils.BloomCalculations.computeBloomSpec(int,double)",4,0,n/a,41,1,2,15,5
"org.apache.cassandra.utils.BloomCalculations.maxBucketsPerElement(long)",3,0,n/a,15,1,1,5,2
"org.apache.cassandra.utils.BloomFilter.BloomFilter(BloomFilter)",1,1,n/a,7,0,1,4,1
"org.apache.cassandra.utils.BloomFilter.BloomFilter(int,IBitSet,boolean)",1,0,n/a,7,0,3,4,1
"org.apache.cassandra.utils.BloomFilter.add(FilterKey)",2,0,n/a,8,1,1,5,2
"org.apache.cassandra.utils.BloomFilter.addTo(IdentityCollection)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.utils.BloomFilter.clear()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BloomFilter.getHashBuckets(FilterKey,int,long)",2,0,n/a,11,0,3,5,1
"org.apache.cassandra.utils.BloomFilter.indexes(FilterKey)",4,2,n/a,13,0,1,4,1
"org.apache.cassandra.utils.BloomFilter.isPresent(FilterKey)",2,0,n/a,12,2,1,7,3
"org.apache.cassandra.utils.BloomFilter.offHeapSize()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.BloomFilter.serializedSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BloomFilter.setIndexes(long,long,int,long,long[])",1,2,n/a,14,1,5,9,3
"org.apache.cassandra.utils.BloomFilter.sharedCopy()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BloomFilter.toString()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BloomFilterSerializer.BloomFilterSerializer()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.utils.BloomFilterSerializer.deserialize(DataInput,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.BloomFilterSerializer.deserialize(DataInput,boolean,boolean)",4,1,n/a,7,0,3,3,2
"org.apache.cassandra.utils.BloomFilterSerializer.serialize(BloomFilter,DataOutputPlus)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.utils.BloomFilterSerializer.serializedSize(BloomFilter)",2,0,n/a,13,0,1,3,1
"org.apache.cassandra.utils.BooleanSerializer.deserialize(DataInputPlus,int)",1,21,n/a,4,0,2,1,1
"org.apache.cassandra.utils.BooleanSerializer.serialize(Boolean,DataOutputPlus,int)",1,22,n/a,4,0,3,1,1
"org.apache.cassandra.utils.BooleanSerializer.serializedSize(Boolean,int)",0,19,n/a,4,0,2,1,1
"org.apache.cassandra.utils.ByteBufferUtil.arrayCopy(ByteBuffer,int,ByteBuffer,int,int)",1,0,n/a,14,0,5,1,1
"org.apache.cassandra.utils.ByteBufferUtil.arrayCopy(ByteBuffer,int,byte[],int,int)",1,0,n/a,4,0,5,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(InetAddress)",2,319,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(String)",2,319,n/a,10,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(String,Charset)",2,1,n/a,11,0,2,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(UUID)",2,319,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(double)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(float)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(int)",2,194,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(long)",2,21,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytes(short)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.bytesToHex(ByteBuffer)",4,47,n/a,13,1,1,10,2
"org.apache.cassandra.utils.ByteBufferUtil.clone(ByteBuffer)",13,6,n/a,22,1,1,9,3
"org.apache.cassandra.utils.ByteBufferUtil.compare(ByteBuffer,byte[])",1,3,n/a,5,0,2,1,1
"org.apache.cassandra.utils.ByteBufferUtil.compare(byte[],ByteBuffer)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.utils.ByteBufferUtil.compareSubArrays(ByteBuffer,int,ByteBuffer,int,int)",4,0,n/a,28,1,5,15,7
"org.apache.cassandra.utils.ByteBufferUtil.compareUnsigned(ByteBuffer,ByteBuffer)",1,16,n/a,5,0,2,1,1
"org.apache.cassandra.utils.ByteBufferUtil.getArray(ByteBuffer)",8,13,n/a,16,1,1,7,2
"org.apache.cassandra.utils.ByteBufferUtil.getShortLength(ByteBuffer,int)",2,2,n/a,6,0,2,2,1
"org.apache.cassandra.utils.ByteBufferUtil.hexToBytes(String)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.inputStream(ByteBuffer)",9,0,n/a,5,2,1,11,3
"org.apache.cassandra.utils.ByteBufferUtil.isPrefix(ByteBuffer,ByteBuffer)",8,0,n/a,8,0,2,4,2
"org.apache.cassandra.utils.ByteBufferUtil.lastIndexOf(ByteBuffer,byte,int)",5,0,n/a,27,1,3,11,5
"org.apache.cassandra.utils.ByteBufferUtil.minimalBufferFor(ByteBuffer)",5,0,n/a,5,0,1,1,3
"org.apache.cassandra.utils.ByteBufferUtil.put(ByteBuffer,ByteBuffer)",10,0,n/a,8,0,2,5,1
"org.apache.cassandra.utils.ByteBufferUtil.read(DataInput,int)",2,22,n/a,8,0,2,5,2
"org.apache.cassandra.utils.ByteBufferUtil.readBytes(ByteBuffer,int)",5,12,n/a,8,0,2,4,1
"org.apache.cassandra.utils.ByteBufferUtil.readBytes(DataInput,int)",1,12,n/a,7,0,2,4,1
"org.apache.cassandra.utils.ByteBufferUtil.readBytesWithShortLength(ByteBuffer)",2,8,n/a,6,0,1,2,1
"org.apache.cassandra.utils.ByteBufferUtil.readShortLength(ByteBuffer)",2,7,n/a,6,0,1,2,1
"org.apache.cassandra.utils.ByteBufferUtil.readShortLength(DataInput)",1,7,n/a,5,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readWithLength(DataInput)",3,9,n/a,9,1,1,4,2
"org.apache.cassandra.utils.ByteBufferUtil.readWithShortLength(DataInput)",2,49,n/a,9,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.readWithVIntLength(DataInputPlus)",3,12,n/a,7,0,1,4,2
"org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithLength(ByteBuffer)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithShortLength(ByteBuffer)",2,24,n/a,5,0,1,2,1
"org.apache.cassandra.utils.ByteBufferUtil.serializedSizeWithVIntLength(ByteBuffer)",2,10,n/a,5,0,1,2,1
"org.apache.cassandra.utils.ByteBufferUtil.skipShortLength(DataInputPlus)",2,2,n/a,10,0,1,2,1
"org.apache.cassandra.utils.ByteBufferUtil.skipWithVIntLength(DataInputPlus)",3,2,n/a,7,0,1,4,2
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer)",1,17,n/a,11,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,Charset)",4,6,n/a,11,0,2,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,int,int)",1,0,n/a,13,0,3,1,1
"org.apache.cassandra.utils.ByteBufferUtil.string(ByteBuffer,int,int,Charset)",5,1,n/a,16,0,4,4,1
"org.apache.cassandra.utils.ByteBufferUtil.toDouble(ByteBuffer)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toFloat(ByteBuffer)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toInt(ByteBuffer)",2,17,n/a,11,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toLong(ByteBuffer)",2,7,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.toShort(ByteBuffer)",2,1,n/a,11,0,1,1,1
"org.apache.cassandra.utils.ByteBufferUtil.writeShortLength(ByteBuffer,int)",2,3,n/a,6,0,2,2,1
"org.apache.cassandra.utils.ByteBufferUtil.writeWithLength(ByteBuffer,DataOutputPlus)",3,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.ByteBufferUtil.writeWithLength(byte[],DataOutput)",2,3,n/a,5,0,2,2,1
"org.apache.cassandra.utils.ByteBufferUtil.writeWithShortLength(ByteBuffer,DataOutputPlus)",3,15,n/a,7,0,2,4,2
"org.apache.cassandra.utils.ByteBufferUtil.writeWithShortLength(byte[],DataOutput)",2,3,n/a,7,0,2,4,2
"org.apache.cassandra.utils.ByteBufferUtil.writeWithVIntLength(ByteBuffer,DataOutputPlus)",3,11,n/a,5,0,2,2,1
"org.apache.cassandra.utils.BytesReadTracker.BytesReadTracker(DataInput)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.utils.BytesReadTracker.getBytesRead()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BytesReadTracker.readBoolean()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readByte()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readChar()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readDouble()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readFloat()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readFully(byte[])",1,0,n/a,5,0,1,2,1
"org.apache.cassandra.utils.BytesReadTracker.readFully(byte[],int,int)",1,0,n/a,5,0,3,2,1
"org.apache.cassandra.utils.BytesReadTracker.readInt()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readLine()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.utils.BytesReadTracker.readLong()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readShort()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readUTF()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.BytesReadTracker.readUnsignedByte()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.readUnsignedShort()",1,0,n/a,6,0,0,3,1
"org.apache.cassandra.utils.BytesReadTracker.reset(long)",0,1,n/a,7,0,1,1,1
"org.apache.cassandra.utils.BytesReadTracker.skipBytes(int)",1,4,n/a,6,0,1,3,1
"org.apache.cassandra.utils.CLibrary.CLibrary()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.utils.CLibrary.close(int)",0,1,n/a,1,-1,1,0,1
"org.apache.cassandra.utils.CLibrary.errno(RuntimeException)",2,7,n/a,13,1,1,5,2
"org.apache.cassandra.utils.CLibrary.fcntl(int,int,long)",0,1,n/a,1,-1,3,0,1
"org.apache.cassandra.utils.CLibrary.fsync(int)",0,1,n/a,1,-1,1,0,1
"org.apache.cassandra.utils.CLibrary.getfd(FileChannel)",5,7,n/a,13,1,1,5,2
"org.apache.cassandra.utils.CLibrary.getfd(FileDescriptor)",5,7,n/a,19,1,1,6,2
"org.apache.cassandra.utils.CLibrary.getfd(String)",4,7,n/a,13,1,1,4,2
"org.apache.cassandra.utils.CLibrary.jnaAvailable()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CLibrary.jnaMemoryLockable()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CLibrary.mlockall(int)",0,1,n/a,1,-1,1,0,1
"org.apache.cassandra.utils.CLibrary.munlockall()",0,0,n/a,1,-1,0,0,1
"org.apache.cassandra.utils.CLibrary.open(String,int)",0,1,n/a,1,-1,2,0,1
"org.apache.cassandra.utils.CLibrary.posix_fadvise(int,long,int,int)",0,1,n/a,1,-1,4,0,1
"org.apache.cassandra.utils.CLibrary.strerror(int)",0,1,n/a,1,-1,1,0,1
"org.apache.cassandra.utils.CLibrary.tryCloseFD(int)",4,2,n/a,19,1,1,7,5
"org.apache.cassandra.utils.CLibrary.tryFcntl(int,int,int)",4,0,n/a,20,1,3,7,4
"org.apache.cassandra.utils.CLibrary.tryMlockall()",12,0,n/a,29,2,0,10,7
"org.apache.cassandra.utils.CLibrary.tryOpenDirectory(String)",4,3,n/a,19,1,1,7,4
"org.apache.cassandra.utils.CLibrary.trySkipCache(String,long,long)",2,0,n/a,4,0,3,1,1
"org.apache.cassandra.utils.CLibrary.trySkipCache(int,long,int,String)",10,2,n/a,31,2,4,10,7
"org.apache.cassandra.utils.CLibrary.trySkipCache(int,long,long,String)",3,1,n/a,12,1,4,7,3
"org.apache.cassandra.utils.CLibrary.trySync(int)",4,1,n/a,19,1,1,7,5
"org.apache.cassandra.utils.CassandraVersion.CassandraVersion(String)",18,5,n/a,28,1,1,13,7
"org.apache.cassandra.utils.CassandraVersion.CassandraVersion(int,int,int,String[],String[])",0,0,n/a,8,0,5,5,1
"org.apache.cassandra.utils.CassandraVersion.compareIdentifiers(String[],String[],int)",4,2,n/a,35,2,3,25,13
"org.apache.cassandra.utils.CassandraVersion.compareTo(CassandraVersion)",2,3,n/a,19,0,1,16,8
"org.apache.cassandra.utils.CassandraVersion.equals(Object)",2,0,n/a,12,0,1,4,6
"org.apache.cassandra.utils.CassandraVersion.findSupportingVersion(CassandraVersion...)",1,0,n/a,20,1,1,4,3
"org.apache.cassandra.utils.CassandraVersion.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.CassandraVersion.isSupportedBy(CassandraVersion)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.utils.CassandraVersion.parseIdentifiers(String,String)",4,2,n/a,12,1,2,6,3
"org.apache.cassandra.utils.CassandraVersion.toString()",13,0,n/a,11,0,0,7,3
"org.apache.cassandra.utils.CassandraVersion.tryParseInt(String)",1,2,n/a,11,1,1,3,2
"org.apache.cassandra.utils.ChecksumType.newInstance()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.ChecksumType.update(Checksum,ByteBuffer)",n/a,0,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.CloseableIterator.close()",n/a,3,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.CoalescingStrategies.Clock.nanoTime()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.CoalescingStrategies.Coalescable.timestampNanos()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.CoalescingStrategy(Parker,Logger,String)",11,4,n/a,14,5,3,21,6
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.coalesce(BlockingQueue<C>,List<C>,int)",3,14,n/a,15,0,3,2,1
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",n/a,1,4,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.debugGap(long)",2,2,n/a,11,1,1,3,3
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.debugTimestamp(long)",3,3,n/a,11,1,1,3,3
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy.debugTimestamps(Collection<C>)",2,2,n/a,11,2,1,3,3
"org.apache.cassandra.utils.CoalescingStrategies.DisabledCoalescingStrategy.DisabledCoalescingStrategy(int,Parker,Logger,String)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.utils.CoalescingStrategies.DisabledCoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",5,1,n/a,10,1,3,4,2
"org.apache.cassandra.utils.CoalescingStrategies.DisabledCoalescingStrategy.toString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CoalescingStrategies.FixedCoalescingStrategy.FixedCoalescingStrategy(int,Parker,Logger,String)",2,0,n/a,5,0,4,2,1
"org.apache.cassandra.utils.CoalescingStrategies.FixedCoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",6,1,n/a,11,1,3,5,2
"org.apache.cassandra.utils.CoalescingStrategies.FixedCoalescingStrategy.toString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.MovingAverageCoalescingStrategy(int,Parker,Logger,String)",2,0,n/a,8,0,4,7,2
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",15,1,n/a,14,1,3,10,3
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.logSample(int)",0,2,n/a,9,0,1,6,1
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.notifyOfSample(long)",4,2,n/a,14,1,1,6,2
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy.toString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CoalescingStrategies.Parker.park(long)",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.TimeHorizonMovingAverageCoalescingStrategy(int,Parker,Logger,String)",2,0,n/a,6,0,4,3,1
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.averageGap()",0,1,n/a,6,0,0,3,2
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.coalesceInternal(BlockingQueue<C>,List<C>,int)",16,1,n/a,22,1,3,16,5
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.epoch(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.ix(long)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.logSample(long)",4,2,n/a,16,0,1,11,4
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.rollepoch(long,long,long)",4,1,n/a,27,2,3,12,3
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy.toString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CoalescingStrategies.maybeSleep(int,long,long,Parker)",1,2,n/a,14,0,4,7,3
"org.apache.cassandra.utils.CoalescingStrategies.newCoalescingStrategy(String,int,Logger,String)",1,1,n/a,4,0,4,1,1
"org.apache.cassandra.utils.CoalescingStrategies.newCoalescingStrategy(String,int,Parker,Logger,String)",12,1,n/a,41,2,5,24,8
"org.apache.cassandra.utils.CoalescingStrategies.parkLoop(long)",3,1,n/a,11,1,1,4,2
"org.apache.cassandra.utils.ConcurrentBiMap.ConcurrentBiMap()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.ConcurrentBiMap(Map<K, V>,Map<V, K>)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.ConcurrentBiMap.clear()",2,0,n/a,5,0,0,2,1
"org.apache.cassandra.utils.ConcurrentBiMap.containsKey(Object)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.containsValue(Object)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.entrySet()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.get(Object)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.inverse()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.isEmpty()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.keySet()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.put(K,V)",8,3,n/a,11,0,2,8,5
"org.apache.cassandra.utils.ConcurrentBiMap.putAll(Map<? extends K, ? extends V>)",4,0,n/a,5,0,1,2,2
"org.apache.cassandra.utils.ConcurrentBiMap.remove(Object)",4,2,n/a,10,0,1,7,4
"org.apache.cassandra.utils.ConcurrentBiMap.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ConcurrentBiMap.values()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CounterId.CounterId(ByteBuffer)",2,3,n/a,6,0,1,3,2
"org.apache.cassandra.utils.CounterId.LocalCounterIdHolder.LocalCounterIdHolder()",4,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CounterId.LocalCounterIdHolder.get()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CounterId.bytes()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.utils.CounterId.compareTo(CounterId)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.CounterId.equals(Object)",3,2,n/a,10,0,1,6,4
"org.apache.cassandra.utils.CounterId.fromInt(int)",4,174,n/a,11,0,1,2,1
"org.apache.cassandra.utils.CounterId.generate()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CounterId.getLocalId()",2,5,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CounterId.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.CounterId.isLocalId()",2,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CounterId.localId()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.CounterId.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.CounterId.wrap(ByteBuffer)",1,2,n/a,7,0,1,1,1
"org.apache.cassandra.utils.CounterId.wrap(ByteBuffer,int)",5,1,n/a,7,0,2,4,1
"org.apache.cassandra.utils.DefaultValue.DefaultValue(T)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.utils.DefaultValue.isModified()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.DefaultValue.reset()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.DefaultValue.set(T)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.DefaultValue.value()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.DynamicList.DynamicList(int)",5,2,n/a,5,0,1,2,1
"org.apache.cassandra.utils.DynamicList.Node.Node(int,E)",1,2,n/a,7,0,2,4,1
"org.apache.cassandra.utils.DynamicList.Node.height()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.utils.DynamicList.Node.next(int)",0,10,n/a,4,0,1,1,1
"org.apache.cassandra.utils.DynamicList.Node.parent(int)",2,2,n/a,11,1,1,6,3
"org.apache.cassandra.utils.DynamicList.Node.prev(int)",0,6,n/a,4,0,1,1,1
"org.apache.cassandra.utils.DynamicList.Node.setNext(int,Node<E>)",0,2,n/a,4,0,2,1,1
"org.apache.cassandra.utils.DynamicList.Node.setPrev(int,Node<E>)",0,2,n/a,4,0,2,1,1
"org.apache.cassandra.utils.DynamicList.append(E)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.utils.DynamicList.append(E,int)",8,1,n/a,26,1,2,21,6
"org.apache.cassandra.utils.DynamicList.get(int)",1,4,n/a,19,2,1,13,4
"org.apache.cassandra.utils.DynamicList.isWellFormed()",11,2,n/a,24,3,0,19,12
"org.apache.cassandra.utils.DynamicList.main(String[])",18,0,n/a,31,2,1,27,4
"org.apache.cassandra.utils.DynamicList.randomLevel()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.DynamicList.remove(Node<E>)",8,3,n/a,32,1,1,19,5
"org.apache.cassandra.utils.DynamicList.size()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram(int)",2,6,n/a,5,0,1,2,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogram(long[],long[])",1,3,n/a,6,0,2,3,1
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer.deserialize(DataInputPlus)",4,12,n/a,11,1,1,9,3
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer.serialize(EstimatedHistogram,DataOutputPlus)",5,12,n/a,11,1,2,8,3
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer.serializedSize(EstimatedHistogram)",5,10,n/a,13,1,1,10,3
"org.apache.cassandra.utils.EstimatedHistogram.add(long)",2,3,n/a,15,1,1,4,2
"org.apache.cassandra.utils.EstimatedHistogram.appendRange(StringBuilder,long[],int)",8,1,n/a,19,0,3,11,4
"org.apache.cassandra.utils.EstimatedHistogram.count()",2,2,n/a,10,0,0,6,2
"org.apache.cassandra.utils.EstimatedHistogram.equals(Object)",6,0,n/a,11,0,1,6,4
"org.apache.cassandra.utils.EstimatedHistogram.get(int)",1,0,n/a,7,0,1,1,1
"org.apache.cassandra.utils.EstimatedHistogram.getBucketOffsets()",0,8,n/a,7,0,0,1,1
"org.apache.cassandra.utils.EstimatedHistogram.getBuckets(boolean)",3,9,n/a,16,0,1,12,4
"org.apache.cassandra.utils.EstimatedHistogram.hashCode()",3,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.EstimatedHistogram.isOverflowed()",2,2,n/a,7,0,0,1,1
"org.apache.cassandra.utils.EstimatedHistogram.log(Logger)",10,0,n/a,33,1,1,19,6
"org.apache.cassandra.utils.EstimatedHistogram.max()",3,3,n/a,16,1,0,9,4
"org.apache.cassandra.utils.EstimatedHistogram.mean()",5,2,n/a,19,1,0,12,3
"org.apache.cassandra.utils.EstimatedHistogram.min()",2,3,n/a,12,1,0,6,4
"org.apache.cassandra.utils.EstimatedHistogram.nameOfRange(long[],int)",3,1,n/a,6,0,2,3,1
"org.apache.cassandra.utils.EstimatedHistogram.newOffsets(int)",1,1,n/a,15,1,1,12,3
"org.apache.cassandra.utils.EstimatedHistogram.percentile(double)",6,4,n/a,22,1,1,15,6
"org.apache.cassandra.utils.ExpiringMap.CacheableObject.CacheableObject(T,long)",1,1,n/a,7,0,2,4,1
"org.apache.cassandra.utils.ExpiringMap.CacheableObject.isReadyToDieAt(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ExpiringMap.ExpiringMap(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ExpiringMap.ExpiringMap(long,Function<Pair<K, CacheableObject<V>>, ?>)",14,1,n/a,18,5,2,14,6
"org.apache.cassandra.utils.ExpiringMap.containsKey(K)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ExpiringMap.get(K)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.utils.ExpiringMap.getAge(K)",1,0,n/a,8,0,1,2,2
"org.apache.cassandra.utils.ExpiringMap.isEmpty()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ExpiringMap.keySet()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ExpiringMap.put(K,V)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.ExpiringMap.put(K,V,long)",3,1,n/a,13,1,3,4,3
"org.apache.cassandra.utils.ExpiringMap.remove(K)",1,0,n/a,5,0,1,2,2
"org.apache.cassandra.utils.ExpiringMap.reset()",1,0,n/a,5,0,0,2,1
"org.apache.cassandra.utils.ExpiringMap.shutdownBlocking()",3,0,n/a,12,1,0,4,2
"org.apache.cassandra.utils.ExpiringMap.size()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.FBUtilities.WrappedCloseableIterator.WrappedCloseableIterator(Iterator<T>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.FBUtilities.WrappedCloseableIterator.close()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.utils.FBUtilities.WrappedCloseableIterator.computeNext()",3,0,n/a,6,0,0,3,2
"org.apache.cassandra.utils.FBUtilities.abs(long)",0,0,n/a,5,0,1,2,1
"org.apache.cassandra.utils.FBUtilities.cassandraTriggerDir()",9,1,n/a,20,1,0,10,5
"org.apache.cassandra.utils.FBUtilities.classForName(String,String)",3,9,n/a,17,1,2,3,2
"org.apache.cassandra.utils.FBUtilities.closeAll(List<? extends AutoCloseable>)",2,3,n/a,20,2,1,9,5
"org.apache.cassandra.utils.FBUtilities.closeableIterator(Iterator<T>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.FBUtilities.compareUnsigned(byte[],byte[])",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.FBUtilities.compareUnsigned(byte[],byte[],int,int,int,int)",1,2,n/a,4,0,6,1,1
"org.apache.cassandra.utils.FBUtilities.construct(Class<T>,String,String)",9,2,n/a,22,1,3,7,5
"org.apache.cassandra.utils.FBUtilities.construct(String,String)",2,8,n/a,11,0,2,2,1
"org.apache.cassandra.utils.FBUtilities.copy(InputStream,OutputStream,long)",2,3,n/a,19,1,3,14,5
"org.apache.cassandra.utils.FBUtilities.emptySortedSet(Comparator<? super T>)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.FBUtilities.exec(ProcessBuilder)",21,1,n/a,33,3,1,14,5
"org.apache.cassandra.utils.FBUtilities.fromJsonList(String)",2,0,n/a,11,1,1,3,2
"org.apache.cassandra.utils.FBUtilities.fromJsonMap(String)",2,5,n/a,11,1,1,3,2
"org.apache.cassandra.utils.FBUtilities.getAllLocalAddresses()",8,0,n/a,18,2,0,8,4
"org.apache.cassandra.utils.FBUtilities.getAvailableProcessors()",5,9,n/a,7,0,0,3,2
"org.apache.cassandra.utils.FBUtilities.getBroadcastAddress()",3,148,n/a,8,0,0,3,3
"org.apache.cassandra.utils.FBUtilities.getLocalAddress()",4,16,n/a,18,1,0,5,4
"org.apache.cassandra.utils.FBUtilities.getProtectedField(Class,String)",3,2,n/a,19,1,2,5,2
"org.apache.cassandra.utils.FBUtilities.getReleaseVersionString()",8,8,n/a,19,2,0,9,3
"org.apache.cassandra.utils.FBUtilities.getThreadLocalScratchBuffer()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.FBUtilities.getToolsOutputDirectory()",3,1,n/a,6,0,0,3,1
"org.apache.cassandra.utils.FBUtilities.hasProcFS()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.FBUtilities.hash(ByteBuffer...)",10,1,n/a,12,1,1,6,3
"org.apache.cassandra.utils.FBUtilities.hashToBigInteger(ByteBuffer)",3,3,n/a,4,0,1,1,1
"org.apache.cassandra.utils.FBUtilities.instanceOrConstruct(String,String)",5,1,n/a,20,1,2,5,2
"org.apache.cassandra.utils.FBUtilities.isWindows()",0,17,n/a,4,0,0,1,1
"org.apache.cassandra.utils.FBUtilities.json(Object)",2,4,n/a,11,1,1,3,2
"org.apache.cassandra.utils.FBUtilities.midpoint(BigInteger,BigInteger,int)",12,4,n/a,30,1,3,11,2
"org.apache.cassandra.utils.FBUtilities.newAuthenticator(String)",2,1,n/a,6,0,1,3,2
"org.apache.cassandra.utils.FBUtilities.newAuthorizer(String)",2,1,n/a,6,0,1,3,2
"org.apache.cassandra.utils.FBUtilities.newMessageDigest(String)",2,2,n/a,11,1,1,3,2
"org.apache.cassandra.utils.FBUtilities.newPartitioner(String)",2,4,n/a,6,0,1,3,2
"org.apache.cassandra.utils.FBUtilities.newRoleManager(String)",2,1,n/a,6,0,1,3,2
"org.apache.cassandra.utils.FBUtilities.nowInSeconds()",1,113,n/a,4,0,0,1,1
"org.apache.cassandra.utils.FBUtilities.prettyPrintMemory(long)",3,2,n/a,8,0,1,5,3
"org.apache.cassandra.utils.FBUtilities.resourceToFile(String)",6,3,n/a,8,0,1,5,2
"org.apache.cassandra.utils.FBUtilities.serialize(T,IVersionedSerializer<T>,int)",10,1,n/a,17,1,3,6,3
"org.apache.cassandra.utils.FBUtilities.singleton(T,Comparator<? super T>)",2,2,n/a,6,0,2,3,1
"org.apache.cassandra.utils.FBUtilities.sortSampledKeys(List<DecoratedKey>,Range<Token>)",14,1,n/a,10,4,2,8,6
"org.apache.cassandra.utils.FBUtilities.threadLocalMD5Digest()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.FBUtilities.timestampMicros()",1,76,n/a,6,0,0,1,1
"org.apache.cassandra.utils.FBUtilities.toString(Map<?, ?>)",3,4,n/a,15,0,1,4,2
"org.apache.cassandra.utils.FBUtilities.toWriteUTFBytes(String)",6,2,n/a,15,1,1,7,2
"org.apache.cassandra.utils.FBUtilities.updateChecksum(CRC32,ByteBuffer)",3,9,n/a,11,0,2,3,1
"org.apache.cassandra.utils.FBUtilities.updateChecksum(CRC32,ByteBuffer,int,int)",7,5,n/a,13,0,4,5,1
"org.apache.cassandra.utils.FBUtilities.updateChecksumInt(Checksum,int)",4,27,n/a,7,0,2,4,1
"org.apache.cassandra.utils.FBUtilities.updateWithBoolean(MessageDigest,boolean)",1,4,n/a,4,0,2,1,2
"org.apache.cassandra.utils.FBUtilities.updateWithByte(MessageDigest,int)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.utils.FBUtilities.updateWithInt(MessageDigest,int)",4,3,n/a,7,0,2,4,1
"org.apache.cassandra.utils.FBUtilities.updateWithLong(MessageDigest,long)",8,3,n/a,11,0,2,8,1
"org.apache.cassandra.utils.FBUtilities.updateWithShort(MessageDigest,int)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.utils.FBUtilities.waitOnFuture(Future<T>)",3,8,n/a,15,1,1,4,3
"org.apache.cassandra.utils.FBUtilities.waitOnFutures(Iterable<? extends Future<? extends T>>)",5,24,n/a,18,2,1,8,3
"org.apache.cassandra.utils.FBUtilities.waitOnFutures(List<AsyncOneResponse>,long)",1,1,n/a,5,0,2,2,2
"org.apache.cassandra.utils.FBUtilities.xor(byte[],byte[])",1,0,n/a,22,1,2,12,5
"org.apache.cassandra.utils.FastByteOperations.BestHolder.getBest()",11,1,n/a,26,1,0,10,6
"org.apache.cassandra.utils.FastByteOperations.ByteOperations.compare(ByteBuffer,ByteBuffer)",n/a,1,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.FastByteOperations.ByteOperations.compare(ByteBuffer,byte[],int,int)",n/a,2,2,n/a,n/a,4,n/a,n/a
"org.apache.cassandra.utils.FastByteOperations.ByteOperations.compare(byte[],int,int,byte[],int,int)",n/a,1,2,n/a,n/a,6,n/a,n/a
"org.apache.cassandra.utils.FastByteOperations.ByteOperations.copy(ByteBuffer,int,ByteBuffer,int,int)",n/a,1,2,n/a,n/a,5,n/a,n/a
"org.apache.cassandra.utils.FastByteOperations.ByteOperations.copy(ByteBuffer,int,byte[],int,int)",n/a,1,2,n/a,n/a,5,n/a,n/a
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.compare(ByteBuffer,ByteBuffer)",8,2,n/a,15,2,2,10,4
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.compare(ByteBuffer,byte[],int,int)",8,2,n/a,7,0,4,3,2
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.compare(byte[],int,int,byte[],int,int)",0,2,n/a,20,2,6,12,7
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.copy(ByteBuffer,int,ByteBuffer,int,int)",13,1,n/a,13,1,5,8,3
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations.copy(ByteBuffer,int,byte[],int,int)",7,1,n/a,11,1,5,6,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compare(ByteBuffer,ByteBuffer)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compare(ByteBuffer,byte[],int,int)",7,2,n/a,23,1,4,13,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compare(byte[],int,int,byte[],int,int)",1,1,n/a,5,0,6,1,1
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compareTo(ByteBuffer,ByteBuffer)",7,1,n/a,20,1,2,11,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compareTo(Object,long,int,ByteBuffer)",7,1,n/a,21,1,4,12,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.compareTo(Object,long,int,Object,long,int)",9,3,n/a,42,2,6,19,6
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(ByteBuffer,int,ByteBuffer,int,int)",5,1,n/a,16,1,5,8,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(ByteBuffer,int,byte[],int,int)",6,1,n/a,7,0,5,3,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(Object,long,ByteBuffer,int,int)",6,1,n/a,7,0,5,3,2
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(Object,long,Object,long,long)",1,0,n/a,11,1,5,6,3
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations.copy(Object,long,byte[],int,int)",2,1,n/a,12,1,5,6,3
"org.apache.cassandra.utils.FastByteOperations.compareUnsigned(ByteBuffer,ByteBuffer)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.FastByteOperations.compareUnsigned(ByteBuffer,byte[],int,int)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.utils.FastByteOperations.compareUnsigned(byte[],int,int,ByteBuffer)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.utils.FastByteOperations.compareUnsigned(byte[],int,int,byte[],int,int)",1,0,n/a,7,0,6,1,1
"org.apache.cassandra.utils.FastByteOperations.copy(ByteBuffer,int,ByteBuffer,int,int)",1,0,n/a,4,0,5,1,1
"org.apache.cassandra.utils.FastByteOperations.copy(ByteBuffer,int,byte[],int,int)",1,1,n/a,4,0,5,1,1
"org.apache.cassandra.utils.FilterFactory.createFilter(int,long,int,boolean,boolean)",3,2,n/a,7,0,5,3,2
"org.apache.cassandra.utils.FilterFactory.deserialize(DataInput,boolean,boolean)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.utils.FilterFactory.getFilter(long,double,boolean,boolean)",4,2,n/a,16,0,4,6,2
"org.apache.cassandra.utils.FilterFactory.getFilter(long,int,boolean,boolean)",7,0,n/a,15,1,4,6,2
"org.apache.cassandra.utils.FilterFactory.serialize(IFilter,DataOutputPlus)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.GuidGenerator.convertToStandardFormat(String)",17,2,n/a,14,0,1,4,1
"org.apache.cassandra.utils.GuidGenerator.guid()",10,0,n/a,11,1,0,10,3
"org.apache.cassandra.utils.GuidGenerator.guidAsBytes()",15,2,n/a,14,0,0,7,1
"org.apache.cassandra.utils.GuidGenerator.guidToString(byte[])",6,0,n/a,10,1,1,9,3
"org.apache.cassandra.utils.Hex.bytesToHex(byte...)",1,4,n/a,11,1,1,8,2
"org.apache.cassandra.utils.Hex.getProtectedConstructor(Class<T>,Class<?>...)",2,1,n/a,21,1,2,6,2
"org.apache.cassandra.utils.Hex.hexToBytes(String)",6,6,n/a,15,1,1,12,5
"org.apache.cassandra.utils.Hex.wrapCharArray(char[])",7,1,n/a,28,2,1,10,7
"org.apache.cassandra.utils.HistogramBuilder.HistogramBuilder()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.utils.HistogramBuilder.HistogramBuilder(long[])",1,0,n/a,7,1,1,2,2
"org.apache.cassandra.utils.HistogramBuilder.add(long)",1,1,n/a,6,0,1,3,2
"org.apache.cassandra.utils.HistogramBuilder.buildRange(long,long,boolean,double,int)",2,2,n/a,43,2,5,27,11
"org.apache.cassandra.utils.HistogramBuilder.buildWithStdevRangesAroundMean()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.utils.HistogramBuilder.buildWithStdevRangesAroundMean(int)",10,2,n/a,47,1,1,32,7
"org.apache.cassandra.utils.IFilter.FilterKey.filterHash(long[])",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.IFilter.add(FilterKey)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.IFilter.clear()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.IFilter.close()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.IFilter.isPresent(FilterKey)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.IFilter.offHeapSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.IFilter.serializedSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.IFilter.sharedCopy()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.IMergeIterator.iterators()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.IndexedSearchIterator.current()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.IndexedSearchIterator.indexOfCurrent()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.Interval.Interval(C,C,D)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.utils.Interval.create(C,C)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.Interval.create(C,C,D)",1,2,n/a,4,0,3,1,1
"org.apache.cassandra.utils.Interval.equals(Object)",3,0,n/a,9,0,1,4,4
"org.apache.cassandra.utils.Interval.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.Interval.maxOrdering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.Interval.minOrdering()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.Interval.toString()",2,0,n/a,5,0,0,1,2
"org.apache.cassandra.utils.IntervalTree.IntervalNode.IntervalNode(Collection<I>)",44,3,n/a,55,2,1,34,8
"org.apache.cassandra.utils.IntervalTree.IntervalNode.searchInternal(Interval<C, D>,List<D>)",19,5,n/a,34,1,2,24,14
"org.apache.cassandra.utils.IntervalTree.IntervalTree(Collection<I>)",3,4,n/a,5,0,1,2,4
"org.apache.cassandra.utils.IntervalTree.Serializer.Serializer(ISerializer<C>,ISerializer<D>,Constructor<I>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.utils.IntervalTree.Serializer.deserialize(DataInputPlus,int)",1,21,n/a,10,0,2,1,1
"org.apache.cassandra.utils.IntervalTree.Serializer.deserialize(DataInputPlus,int,Comparator<C>)",9,1,n/a,20,2,3,12,3
"org.apache.cassandra.utils.IntervalTree.Serializer.serialize(IntervalTree<C, D, I>,DataOutputPlus,int)",4,22,n/a,10,1,3,5,2
"org.apache.cassandra.utils.IntervalTree.Serializer.serializedSize(IntervalTree<C, D, I>,int)",4,19,n/a,11,1,2,6,2
"org.apache.cassandra.utils.IntervalTree.TreeIterator.TreeIterator(IntervalNode)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.utils.IntervalTree.TreeIterator.computeNext()",7,2,n/a,13,0,0,8,4
"org.apache.cassandra.utils.IntervalTree.TreeIterator.gotoMinOf(IntervalNode)",1,2,n/a,8,1,1,3,2
"org.apache.cassandra.utils.IntervalTree.build(Collection<I>)",3,0,n/a,6,0,1,3,3
"org.apache.cassandra.utils.IntervalTree.emptyTree()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.utils.IntervalTree.equals(Object)",3,0,n/a,8,0,1,4,2
"org.apache.cassandra.utils.IntervalTree.hashCode()",1,0,n/a,8,0,0,4,2
"org.apache.cassandra.utils.IntervalTree.intervalCount()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.IntervalTree.isEmpty()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.IntervalTree.iterator()",2,2,n/a,6,0,0,3,2
"org.apache.cassandra.utils.IntervalTree.max()",1,0,n/a,6,0,0,3,2
"org.apache.cassandra.utils.IntervalTree.min()",1,0,n/a,6,0,0,3,2
"org.apache.cassandra.utils.IntervalTree.search(C)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.IntervalTree.search(Interval<C, D>)",3,0,n/a,8,0,1,5,2
"org.apache.cassandra.utils.IntervalTree.serializer(ISerializer<C>,ISerializer<D>,Constructor<I>)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.utils.IntervalTree.toString()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.JVMStabilityInspector.JVMStabilityInspector()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.utils.JVMStabilityInspector.Killer.killCurrentJVM(Throwable)",1,4,n/a,10,0,1,1,1
"org.apache.cassandra.utils.JVMStabilityInspector.Killer.killCurrentJVM(Throwable,boolean)",5,3,n/a,13,1,2,6,3
"org.apache.cassandra.utils.JVMStabilityInspector.inspectCommitLogThrowable(Throwable)",6,1,n/a,11,1,1,6,3
"org.apache.cassandra.utils.JVMStabilityInspector.inspectThrowable(Throwable)",7,46,n/a,23,0,1,13,10
"org.apache.cassandra.utils.JVMStabilityInspector.killCurrentJVM(Throwable,boolean)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.JVMStabilityInspector.replaceKiller(Killer)",0,10,n/a,6,0,1,3,1
"org.apache.cassandra.utils.JVMStabilityInspector.userFunctionTimeout(Throwable)",6,1,n/a,16,1,1,10,4
"org.apache.cassandra.utils.LockedDynamicList.LockedDynamicList(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.LockedDynamicList.append(E,int)",5,0,n/a,14,1,2,4,1
"org.apache.cassandra.utils.LockedDynamicList.get(int)",5,0,n/a,13,1,1,4,1
"org.apache.cassandra.utils.LockedDynamicList.remove(Node<E>)",5,0,n/a,13,1,1,4,1
"org.apache.cassandra.utils.LockedDynamicList.size()",5,0,n/a,12,1,0,4,1
"org.apache.cassandra.utils.MD5Digest.MD5Digest(byte[])",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.utils.MD5Digest.compute(String)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MD5Digest.compute(byte[])",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MD5Digest.equals(Object)",1,0,n/a,9,0,1,4,2
"org.apache.cassandra.utils.MD5Digest.hashCode()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.MD5Digest.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.MD5Digest.wrap(byte[])",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MergeIterator.Candidate.Candidate(int,Iterator<? extends In>,Comparator<? super In>)",0,1,n/a,6,0,3,3,1
"org.apache.cassandra.utils.MergeIterator.Candidate.advance()",2,1,n/a,8,0,0,4,2
"org.apache.cassandra.utils.MergeIterator.Candidate.compareTo(Candidate<In>)",1,4,n/a,5,0,1,2,2
"org.apache.cassandra.utils.MergeIterator.Candidate.consume()",0,3,n/a,7,0,0,4,1
"org.apache.cassandra.utils.MergeIterator.Candidate.needsAdvance()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MergeIterator.ManyToOne.ManyToOne(List<? extends Iterator<In>>,Comparator<? super In>,Reducer<In, Out>)",5,1,n/a,14,1,3,10,2
"org.apache.cassandra.utils.MergeIterator.ManyToOne.advance()",3,1,n/a,30,1,0,6,3
"org.apache.cassandra.utils.MergeIterator.ManyToOne.computeNext()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.utils.MergeIterator.ManyToOne.consume()",10,1,n/a,28,2,0,18,4
"org.apache.cassandra.utils.MergeIterator.ManyToOne.consumeHeap(int)",6,3,n/a,13,0,1,5,3
"org.apache.cassandra.utils.MergeIterator.ManyToOne.replaceAndSink(Candidate<In>,int)",5,1,n/a,98,5,2,46,16
"org.apache.cassandra.utils.MergeIterator.MergeIterator(List<? extends Iterator<In>>,Reducer<In, Out>)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.utils.MergeIterator.OneToOne.OneToOne(List<? extends Iterator<In>>,Reducer<In, Out>)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.MergeIterator.OneToOne.computeNext()",6,1,n/a,8,0,0,5,2
"org.apache.cassandra.utils.MergeIterator.Reducer.close()",0,1,n/a,4,0,0,0,1
"org.apache.cassandra.utils.MergeIterator.Reducer.getReduced()",n/a,2,9,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.MergeIterator.Reducer.onKeyChange()",0,2,n/a,5,0,0,0,1
"org.apache.cassandra.utils.MergeIterator.Reducer.reduce(int,In)",n/a,4,9,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.MergeIterator.Reducer.trivialReduceIsTrivial()",0,1,n/a,7,0,0,1,1
"org.apache.cassandra.utils.MergeIterator.TrivialOneToOne.TrivialOneToOne(List<? extends Iterator<In>>,Reducer<In, Out>)",2,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.MergeIterator.TrivialOneToOne.computeNext()",3,1,n/a,7,0,0,3,2
"org.apache.cassandra.utils.MergeIterator.close()",3,2,n/a,16,2,0,6,4
"org.apache.cassandra.utils.MergeIterator.get(List<? extends Iterator<In>>,Comparator<? super In>,Reducer<In, Out>)",5,7,n/a,12,1,3,3,3
"org.apache.cassandra.utils.MergeIterator.iterators()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.Hashable(byte[])",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer.deserialize(DataInput,IPartitioner,int)",4,0,n/a,10,0,3,6,3
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer.serialize(Hashable,DataOutputPlus,int)",7,3,n/a,15,1,3,7,3
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer.serializedSize(Hashable,int)",4,3,n/a,8,0,2,5,3
"org.apache.cassandra.utils.MerkleTree.Hashable.addHash(byte[],long)",1,1,n/a,13,0,2,5,2
"org.apache.cassandra.utils.MerkleTree.Hashable.binaryHash(byte[],byte[])",1,4,n/a,8,0,2,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.calc()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash()",0,13,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash(byte[])",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.hash(byte[],byte[])",1,1,n/a,9,0,2,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.rowsInRange()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.sizeOfRange()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Hashable.toString(StringBuilder,int)",n/a,3,2,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.MerkleTree.Hashable.toString(byte[])",1,3,n/a,6,0,1,3,2
"org.apache.cassandra.utils.MerkleTree.Inner.Inner(Token,Hashable,Hashable)",1,3,n/a,10,0,3,4,1
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer.deserialize(DataInput,IPartitioner,int)",6,1,n/a,14,1,3,9,4
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer.serialize(Inner,DataOutputPlus,int)",6,4,n/a,16,2,3,8,3
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer.serializedSize(Inner,int)",7,4,n/a,14,1,2,5,3
"org.apache.cassandra.utils.MerkleTree.Inner.calc()",3,3,n/a,14,1,0,7,2
"org.apache.cassandra.utils.MerkleTree.Inner.lchild()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.lchild(Hashable)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.rchild()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.rchild(Hashable)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.Inner.toString()",3,0,n/a,7,0,0,3,1
"org.apache.cassandra.utils.MerkleTree.Inner.toString(StringBuilder,int)",18,4,n/a,27,1,2,14,4
"org.apache.cassandra.utils.MerkleTree.Leaf.Leaf()",1,5,n/a,7,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.Leaf(byte[])",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer.deserialize(DataInput,IPartitioner,int)",4,1,n/a,8,0,3,5,4
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer.serialize(Leaf,DataOutputPlus,int)",5,4,n/a,18,1,3,8,4
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer.serializedSize(Leaf,int)",2,4,n/a,9,1,2,4,3
"org.apache.cassandra.utils.MerkleTree.Leaf.toString()",2,1,n/a,5,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.Leaf.toString(StringBuilder,int)",2,3,n/a,4,0,2,1,1
"org.apache.cassandra.utils.MerkleTree.MerkleTree(IPartitioner,Range<Token>,byte,long)",3,1,n/a,17,0,4,7,1
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer.deserialize(DataInputPlus,int)",11,21,n/a,23,1,2,14,2
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer.serialize(MerkleTree,DataOutputPlus,int)",9,22,n/a,11,0,3,7,1
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer.serializedSize(MerkleTree,int)",8,19,n/a,12,0,2,5,1
"org.apache.cassandra.utils.MerkleTree.RowHash.RowHash(Token,byte[],long)",0,5,n/a,6,0,3,3,1
"org.apache.cassandra.utils.MerkleTree.RowHash.toString()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.BadRange.BadRange()",1,2,n/a,1,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.InvalidHash.InvalidHash()",1,0,n/a,1,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.TooDeep.TooDeep()",1,2,n/a,1,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.TreeDifference(Token,Token,byte)",1,3,n/a,4,0,3,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.rowsOnLeft()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.rowsOnRight()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.setRows(long,long)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.setSize(long,long)",0,3,n/a,5,0,2,2,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.sizeOnLeft()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.sizeOnRight()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference.totalRows()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.TreeRange(MerkleTree,Token,Token,byte,Hashable)",1,5,n/a,7,0,5,4,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.addAll(Iterator<RowHash>)",3,6,n/a,5,0,1,2,2
"org.apache.cassandra.utils.MerkleTree.TreeRange.addHash(RowHash)",1,4,n/a,9,0,1,3,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.ensureHashInitialised()",0,2,n/a,7,0,0,4,2
"org.apache.cassandra.utils.MerkleTree.TreeRange.hash()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.hash(byte[])",1,3,n/a,5,0,1,2,1
"org.apache.cassandra.utils.MerkleTree.TreeRange.toString()",7,1,n/a,7,0,0,3,1
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.TreeRangeIterator(MerkleTree)",3,3,n/a,6,0,1,3,1
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.computeNext()",15,0,n/a,36,2,0,15,6
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator.iterator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.difference(MerkleTree,MerkleTree)",15,0,n/a,25,1,2,15,8
"org.apache.cassandra.utils.MerkleTree.differenceHelper(MerkleTree,MerkleTree,List<TreeRange>,TreeRange)",32,3,n/a,59,1,4,40,14
"org.apache.cassandra.utils.MerkleTree.find(Range<Token>)",3,7,n/a,17,1,1,3,2
"org.apache.cassandra.utils.MerkleTree.findHelper(Hashable,Range<Token>,Range<Token>)",11,3,n/a,29,1,3,14,6
"org.apache.cassandra.utils.MerkleTree.get(Token)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.getHelper(Hashable,Token,Token,byte,Token)",6,3,n/a,15,1,5,6,3
"org.apache.cassandra.utils.MerkleTree.hash(Range<Token>)",2,0,n/a,14,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.histogramOfRowCountPerLeaf()",4,0,n/a,9,1,0,4,2
"org.apache.cassandra.utils.MerkleTree.histogramOfRowSizePerLeaf()",4,0,n/a,9,1,0,4,2
"org.apache.cassandra.utils.MerkleTree.inc(byte)",0,10,n/a,5,0,1,2,1
"org.apache.cassandra.utils.MerkleTree.init()",5,0,n/a,14,0,0,4,1
"org.apache.cassandra.utils.MerkleTree.initHelper(Token,Token,byte,byte)",10,3,n/a,12,0,4,8,4
"org.apache.cassandra.utils.MerkleTree.invalidate(Token)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.invalidateHelper(Hashable,Token,Token)",4,3,n/a,14,0,3,7,3
"org.apache.cassandra.utils.MerkleTree.invalids()",1,0,n/a,8,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.maxsize()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.maxsize(long)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.MerkleTree.partitioner()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.root()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.size()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.utils.MerkleTree.split(Token)",1,0,n/a,21,1,1,6,3
"org.apache.cassandra.utils.MerkleTree.splitHelper(Hashable,Token,Token,byte,Token)",15,3,n/a,26,1,5,13,6
"org.apache.cassandra.utils.MerkleTree.toString()",5,0,n/a,9,0,0,5,1
"org.apache.cassandra.utils.MerkleTrees.MerkleTrees(IPartitioner)",2,4,n/a,9,0,1,1,1
"org.apache.cassandra.utils.MerkleTrees.MerkleTrees(IPartitioner,Collection<MerkleTree>)",1,2,n/a,5,0,2,2,1
"org.apache.cassandra.utils.MerkleTrees.MerkleTreesSerializer.deserialize(DataInputPlus,int)",7,22,n/a,19,2,2,13,4
"org.apache.cassandra.utils.MerkleTrees.MerkleTreesSerializer.serialize(MerkleTrees,DataOutputPlus,int)",4,23,n/a,8,1,3,3,2
"org.apache.cassandra.utils.MerkleTrees.MerkleTreesSerializer.serializedSize(MerkleTrees,int)",4,20,n/a,10,1,2,5,2
"org.apache.cassandra.utils.MerkleTrees.TokenRangeComparator.compare(Range<Token>,Range<Token>)",2,0,n/a,7,0,2,3,2
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator.TreeRangeIterator()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator.computeNext()",3,0,n/a,6,0,0,3,3
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator.iterator()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator.nextIterator()",5,1,n/a,9,1,0,4,2
"org.apache.cassandra.utils.MerkleTrees.addMerkleTree(int,Range<Token>)",1,3,n/a,11,0,2,1,1
"org.apache.cassandra.utils.MerkleTrees.addMerkleTree(int,byte,Range<Token>)",2,1,n/a,7,0,3,3,1
"org.apache.cassandra.utils.MerkleTrees.addMerkleTrees(int,Collection<Range<Token>>)",1,2,n/a,13,1,2,2,2
"org.apache.cassandra.utils.MerkleTrees.addTree(MerkleTree)",2,2,n/a,5,0,1,2,1
"org.apache.cassandra.utils.MerkleTrees.addTrees(Collection<MerkleTree>)",1,1,n/a,7,1,1,2,2
"org.apache.cassandra.utils.MerkleTrees.difference(MerkleTrees,MerkleTrees)",5,1,n/a,16,1,2,4,2
"org.apache.cassandra.utils.MerkleTrees.get(Token)",2,1,n/a,11,0,1,1,1
"org.apache.cassandra.utils.MerkleTrees.getMerkleTree(Range<Token>)",1,1,n/a,10,0,1,1,1
"org.apache.cassandra.utils.MerkleTrees.getMerkleTree(Token)",4,3,n/a,15,1,1,4,3
"org.apache.cassandra.utils.MerkleTrees.hash(Range<Token>)",8,1,n/a,26,4,1,11,6
"org.apache.cassandra.utils.MerkleTrees.init()",2,2,n/a,10,1,0,2,2
"org.apache.cassandra.utils.MerkleTrees.init(Range<Token>)",2,2,n/a,9,0,1,1,1
"org.apache.cassandra.utils.MerkleTrees.invalidate(Token)",2,1,n/a,10,0,1,1,1
"org.apache.cassandra.utils.MerkleTrees.invalids()",1,4,n/a,9,0,0,1,1
"org.apache.cassandra.utils.MerkleTrees.iterator()",2,0,n/a,7,0,0,1,1
"org.apache.cassandra.utils.MerkleTrees.logRowCountPerLeaf(Logger)",3,1,n/a,12,1,1,2,2
"org.apache.cassandra.utils.MerkleTrees.logRowSizePerLeaf(Logger)",3,1,n/a,12,1,1,2,2
"org.apache.cassandra.utils.MerkleTrees.maxsize(Range<Token>,int)",2,0,n/a,5,0,2,1,1
"org.apache.cassandra.utils.MerkleTrees.partitioner()",0,2,n/a,9,0,0,1,1
"org.apache.cassandra.utils.MerkleTrees.ranges()",1,1,n/a,9,0,0,1,1
"org.apache.cassandra.utils.MerkleTrees.size()",2,2,n/a,9,1,0,4,2
"org.apache.cassandra.utils.MerkleTrees.split(Token)",2,2,n/a,10,0,1,1,1
"org.apache.cassandra.utils.MerkleTrees.validateNonOverlapping(MerkleTree)",2,1,n/a,9,1,1,4,3
"org.apache.cassandra.utils.MurmurHash.fmix(long)",0,2,n/a,9,0,1,6,1
"org.apache.cassandra.utils.MurmurHash.getblock(ByteBuffer,int,int)",8,2,n/a,9,0,3,3,1
"org.apache.cassandra.utils.MurmurHash.hash2_64(ByteBuffer,int,int,long)",15,1,n/a,45,1,4,37,10
"org.apache.cassandra.utils.MurmurHash.hash32(ByteBuffer,int,int,int)",7,0,n/a,46,2,4,34,6
"org.apache.cassandra.utils.MurmurHash.hash3_x64_128(ByteBuffer,int,int,long,long[])",25,2,n/a,56,1,5,76,17
"org.apache.cassandra.utils.MurmurHash.rotl64(long,int)",0,6,n/a,4,0,2,1,1
"org.apache.cassandra.utils.Mx4jTool.getAddress()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.Mx4jTool.getPort()",3,1,n/a,10,1,0,5,3
"org.apache.cassandra.utils.Mx4jTool.maybeLoad()",24,0,n/a,36,1,0,20,3
"org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis.convert(long)",1,1,n/a,14,0,1,2,1
"org.apache.cassandra.utils.NativeSSTableLoaderClient.NativeSSTableLoaderClient(Collection<InetAddress>,int,String,String,SSLOptions)",2,2,n/a,10,0,5,7,1
"org.apache.cassandra.utils.NativeSSTableLoaderClient.createDefinitionFromRow(Row,String,String,Types)",14,1,n/a,11,0,4,8,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.createTableMetadata(String,Session,IPartitioner,boolean,Row,String,Types)",13,2,n/a,31,0,7,11,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.fetchTables(String,Session,IPartitioner,Types)",6,1,n/a,20,1,4,6,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.fetchTypes(String,Session)",8,1,n/a,13,1,2,8,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.fetchViews(String,Session,IPartitioner,Types)",6,1,n/a,14,1,4,6,2
"org.apache.cassandra.utils.NativeSSTableLoaderClient.getTableMetadata(String)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.NativeSSTableLoaderClient.init(String)",29,1,n/a,27,2,1,18,6
"org.apache.cassandra.utils.NativeSSTableLoaderClient.setTableMetadata(CFMetaData)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.utils.NoSpamLogger.Clock.nanoTime()",n/a,7,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.NoSpamLogStatement(String,long)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.error(Object...)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.error(long,Object...)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.info(Object...)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.info(long,Object...)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.log(Level,long,Object...)",5,5,n/a,19,1,3,15,6
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.shouldLog(long)",2,1,n/a,5,0,1,2,2
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.warn(Object...)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement.warn(long,Object...)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogger(Logger,long,TimeUnit)",1,1,n/a,5,0,3,2,1
"org.apache.cassandra.utils.NoSpamLogger.clearWrappedLoggersForTest()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.NoSpamLogger.error(String,Object...)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.NoSpamLogger.error(long,String,Object...)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.utils.NoSpamLogger.getLogger(Logger,long,TimeUnit)",3,3,n/a,12,1,3,7,3
"org.apache.cassandra.utils.NoSpamLogger.getStatement(Logger,String,long,TimeUnit)",2,0,n/a,5,0,4,2,1
"org.apache.cassandra.utils.NoSpamLogger.getStatement(String)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.NoSpamLogger.getStatement(String,long)",3,3,n/a,12,1,2,7,3
"org.apache.cassandra.utils.NoSpamLogger.getStatement(String,long,TimeUnit)",2,0,n/a,3,0,3,1,1
"org.apache.cassandra.utils.NoSpamLogger.info(String,Object...)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.NoSpamLogger.info(long,String,Object...)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.utils.NoSpamLogger.log(Level,String,long,Object...)",2,3,n/a,3,0,4,1,1
"org.apache.cassandra.utils.NoSpamLogger.log(Logger,Level,long,TimeUnit,String,Object...)",2,0,n/a,4,0,6,1,1
"org.apache.cassandra.utils.NoSpamLogger.log(Logger,Level,long,TimeUnit,long,String,Object...)",3,1,n/a,6,0,7,3,1
"org.apache.cassandra.utils.NoSpamLogger.warn(String,Object...)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.NoSpamLogger.warn(long,String,Object...)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.utils.ObjectSizes.measure(Object)",1,21,n/a,8,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.measureDeep(Object)",1,6,n/a,10,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOf(String)",2,3,n/a,9,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(Object[])",1,5,n/a,9,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(byte[])",1,3,n/a,9,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(int,long)",1,6,n/a,4,0,2,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(int[])",1,1,n/a,9,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfArray(long[])",1,1,n/a,9,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOfReferenceArray(int)",2,2,n/a,9,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOnHeapExcludingData(ByteBuffer)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOnHeapExcludingData(ByteBuffer[])",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.ObjectSizes.sizeOnHeapOf(ByteBuffer)",6,2,n/a,15,0,1,5,3
"org.apache.cassandra.utils.ObjectSizes.sizeOnHeapOf(ByteBuffer[])",2,1,n/a,11,0,1,7,3
"org.apache.cassandra.utils.OutputHandler.LogOutput.debug(String)",1,6,n/a,4,0,1,1,1
"org.apache.cassandra.utils.OutputHandler.LogOutput.output(String)",1,22,n/a,4,0,1,1,1
"org.apache.cassandra.utils.OutputHandler.LogOutput.warn(String)",1,9,n/a,4,0,1,1,1
"org.apache.cassandra.utils.OutputHandler.LogOutput.warn(String,Throwable)",1,4,n/a,4,0,2,1,1
"org.apache.cassandra.utils.OutputHandler.SystemOutput.SystemOutput(boolean,boolean)",0,10,n/a,5,0,2,2,1
"org.apache.cassandra.utils.OutputHandler.SystemOutput.debug(String)",1,6,n/a,5,0,1,2,2
"org.apache.cassandra.utils.OutputHandler.SystemOutput.output(String)",1,22,n/a,4,0,1,1,1
"org.apache.cassandra.utils.OutputHandler.SystemOutput.warn(String)",1,9,n/a,4,0,1,1,1
"org.apache.cassandra.utils.OutputHandler.SystemOutput.warn(String,Throwable)",2,5,n/a,6,0,2,3,3
"org.apache.cassandra.utils.OutputHandler.debug(String)",n/a,6,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.OutputHandler.output(String)",n/a,22,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.OutputHandler.warn(String)",n/a,9,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.OutputHandler.warn(String,Throwable)",n/a,4,3,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.OverlapIterator.OverlapIterator(Collection<Interval<I, V>>)",6,1,n/a,11,0,1,4,1
"org.apache.cassandra.utils.OverlapIterator.overlaps()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.OverlapIterator.update(I)",10,1,n/a,11,0,1,4,5
"org.apache.cassandra.utils.Pair.Pair(T1,T2)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.Pair.create(X,Y)",1,131,n/a,4,0,2,1,1
"org.apache.cassandra.utils.Pair.equals(Object)",2,0,n/a,9,0,1,4,3
"org.apache.cassandra.utils.Pair.hashCode()",2,0,n/a,6,0,0,2,3
"org.apache.cassandra.utils.Pair.toString()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.RMIServerSocketFactoryImpl.createServerSocket(int)",3,0,n/a,3,0,1,1,1
"org.apache.cassandra.utils.RMIServerSocketFactoryImpl.equals(Object)",3,0,n/a,12,1,1,5,3
"org.apache.cassandra.utils.RMIServerSocketFactoryImpl.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.ResourceWatcher.WatchedResource.WatchedResource(String,Runnable)",0,1,n/a,6,0,2,3,1
"org.apache.cassandra.utils.ResourceWatcher.WatchedResource.run()",8,0,n/a,18,2,0,8,3
"org.apache.cassandra.utils.ResourceWatcher.watch(String,Runnable,int)",2,2,n/a,4,0,3,1,1
"org.apache.cassandra.utils.SearchIterator.hasNext()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.SearchIterator.next(K)",n/a,8,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.SigarLibrary.SigarLibrary()",7,0,n/a,18,1,0,7,3
"org.apache.cassandra.utils.SigarLibrary.hasAcceptableAddressSpace()",4,1,n/a,23,2,0,9,4
"org.apache.cassandra.utils.SigarLibrary.hasAcceptableFileLimits()",3,1,n/a,20,2,0,7,4
"org.apache.cassandra.utils.SigarLibrary.hasAcceptableProcNumber()",3,1,n/a,20,2,0,7,4
"org.apache.cassandra.utils.SigarLibrary.initialized()",0,0,n/a,8,0,0,1,1
"org.apache.cassandra.utils.SigarLibrary.isSwapEnabled()",3,1,n/a,21,2,0,8,3
"org.apache.cassandra.utils.SigarLibrary.warnIfRunningInDegradedMode()",7,0,n/a,24,2,0,9,6
"org.apache.cassandra.utils.SortedBiMultiValMap.SortedBiMultiValMap(SortedMap<K, V>,SortedSetMultimap<V, K>)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.utils.SortedBiMultiValMap.create()",3,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.SortedBiMultiValMap.create(BiMultiValMap<K, V>)",4,0,n/a,7,0,1,4,1
"org.apache.cassandra.utils.SortedBiMultiValMap.create(BiMultiValMap<K, V>,Comparator<K>,Comparator<V>)",4,1,n/a,7,0,3,4,1
"org.apache.cassandra.utils.SortedBiMultiValMap.create(Comparator<K>,Comparator<V>)",5,2,n/a,8,0,2,5,3
"org.apache.cassandra.utils.SortedBiMultiValMap.defaultComparator()",2,2,n/a,5,2,0,2,1
"org.apache.cassandra.utils.StatusLogger.log()",54,1,n/a,56,1,0,22,7
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogram(int)",1,1,n/a,9,0,1,2,1
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogram(int,Map<Double, Long>)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogramSerializer.deserialize(DataInputPlus)",7,10,n/a,11,1,1,8,2
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogramSerializer.serialize(StreamingHistogram,DataOutputPlus)",9,10,n/a,11,1,2,6,2
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogramSerializer.serializedSize(StreamingHistogram)",5,9,n/a,9,0,1,5,1
"org.apache.cassandra.utils.StreamingHistogram.equals(Object)",1,0,n/a,10,0,1,6,4
"org.apache.cassandra.utils.StreamingHistogram.getAsMap()",1,3,n/a,4,0,0,1,1
"org.apache.cassandra.utils.StreamingHistogram.hashCode()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.StreamingHistogram.merge(StreamingHistogram)",5,1,n/a,12,0,1,4,3
"org.apache.cassandra.utils.StreamingHistogram.sum(double)",14,1,n/a,33,1,1,15,5
"org.apache.cassandra.utils.StreamingHistogram.update(double)",1,1,n/a,8,0,1,1,1
"org.apache.cassandra.utils.StreamingHistogram.update(double,long)",13,2,n/a,44,4,2,21,5
"org.apache.cassandra.utils.SyncUtil.force(FileChannel,boolean)",4,3,n/a,13,1,2,5,3
"org.apache.cassandra.utils.SyncUtil.force(MappedByteBuffer)",5,1,n/a,27,3,1,11,6
"org.apache.cassandra.utils.SyncUtil.sync(FileDescriptor)",10,4,n/a,33,2,1,15,9
"org.apache.cassandra.utils.SyncUtil.sync(FileOutputStream)",3,4,n/a,5,0,1,2,1
"org.apache.cassandra.utils.SyncUtil.sync(RandomAccessFile)",3,4,n/a,5,0,1,2,1
"org.apache.cassandra.utils.SyncUtil.trySync(int)",1,2,n/a,7,0,1,3,2
"org.apache.cassandra.utils.SyncUtil.trySyncDir(File)",4,2,n/a,14,1,1,6,2
"org.apache.cassandra.utils.Throwables.DiscreteAction.perform()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.Throwables.close(Throwable,Iterable<? extends AutoCloseable>)",2,1,n/a,15,2,2,5,3
"org.apache.cassandra.utils.Throwables.failIfCanCast(Throwable,Class<T>)",2,3,n/a,12,0,2,9,6
"org.apache.cassandra.utils.Throwables.maybeFail(Throwable)",2,27,n/a,5,0,1,2,2
"org.apache.cassandra.utils.Throwables.maybeFail(Throwable,Class<T>)",2,0,n/a,5,0,2,2,2
"org.apache.cassandra.utils.Throwables.merge(T,T)",1,26,n/a,7,0,2,4,2
"org.apache.cassandra.utils.Throwables.perform(DiscreteAction<? extends E>...)",2,1,n/a,5,0,1,1,1
"org.apache.cassandra.utils.Throwables.perform(File,FileOpType,DiscreteAction<? extends IOException>...)",2,1,n/a,5,0,3,1,1
"org.apache.cassandra.utils.Throwables.perform(Stream<? extends DiscreteAction<? extends E>>,DiscreteAction<? extends E>...)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.Throwables.perform(Stream<DiscreteAction<? extends E>>)",2,0,n/a,7,0,1,3,2
"org.apache.cassandra.utils.Throwables.perform(String,FileOpType,DiscreteAction<? extends IOException>...)",2,1,n/a,5,0,3,1,1
"org.apache.cassandra.utils.Throwables.perform(Throwable,DiscreteAction<?>...)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.Throwables.perform(Throwable,Iterator<? extends DiscreteAction<?>>)",4,1,n/a,16,2,2,6,3
"org.apache.cassandra.utils.Throwables.perform(Throwable,Stream<? extends DiscreteAction<?>>)",2,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.Throwables.perform(Throwable,String,FileOpType,DiscreteAction<? extends IOException>...)",2,1,n/a,5,0,4,1,1
"org.apache.cassandra.utils.Throwables.perform(Throwable,String,FileOpType,Stream<DiscreteAction<? extends IOException>>)",5,0,n/a,14,2,4,4,3
"org.apache.cassandra.utils.TopKSampler.SamplerResult.SamplerResult(List<Counter<S>>,long)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.TopKSampler.addSample(T)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.TopKSampler.addSample(T,long,int)",5,1,n/a,19,6,3,9,4
"org.apache.cassandra.utils.TopKSampler.beginSampling(int)",2,0,n/a,17,1,1,4,2
"org.apache.cassandra.utils.TopKSampler.finishSampling(int)",3,0,n/a,16,1,1,7,2
"org.apache.cassandra.utils.UUIDGen.UUIDGen()",1,1,n/a,5,0,0,2,2
"org.apache.cassandra.utils.UUIDGen.createTime(long)",0,7,n/a,9,0,1,6,1
"org.apache.cassandra.utils.UUIDGen.createTimeSafe()",2,2,n/a,11,0,0,5,2
"org.apache.cassandra.utils.UUIDGen.createTimeUUIDBytes(long)",0,2,n/a,10,0,1,11,3
"org.apache.cassandra.utils.UUIDGen.createTimeUnsafe(long,int)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.UUIDGen.decompose(UUID)",2,39,n/a,13,1,1,9,2
"org.apache.cassandra.utils.UUIDGen.fromUnixTimestamp(long)",1,3,n/a,7,0,1,1,1
"org.apache.cassandra.utils.UUIDGen.fromUnixTimestamp(long,long)",0,3,n/a,4,0,2,1,1
"org.apache.cassandra.utils.UUIDGen.getAdjustedTimestamp(UUID)",4,1,n/a,13,0,1,3,2
"org.apache.cassandra.utils.UUIDGen.getTimeUUID()",2,67,n/a,9,0,0,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUID(long)",3,1,n/a,9,0,1,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUID(long,long)",3,7,n/a,4,0,2,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUID(long,long,long)",3,0,n/a,5,0,3,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUIDBytes()",2,7,n/a,10,0,0,1,1
"org.apache.cassandra.utils.UUIDGen.getTimeUUIDBytes(long,int)",3,6,n/a,18,0,2,3,2
"org.apache.cassandra.utils.UUIDGen.getTimeUUIDFromMicros(long)",1,1,n/a,6,0,1,3,1
"org.apache.cassandra.utils.UUIDGen.getUUID(ByteBuffer)",5,17,n/a,5,0,1,1,1
"org.apache.cassandra.utils.UUIDGen.hash(Collection<InetAddress>)",5,1,n/a,14,1,1,6,3
"org.apache.cassandra.utils.UUIDGen.makeClockSeqAndNode()",4,1,n/a,9,0,0,6,1
"org.apache.cassandra.utils.UUIDGen.makeNode()",5,1,n/a,26,0,0,11,3
"org.apache.cassandra.utils.UUIDGen.maxTimeUUID(long)",3,4,n/a,15,0,1,2,1
"org.apache.cassandra.utils.UUIDGen.microsTimestamp(UUID)",1,1,n/a,8,0,1,1,1
"org.apache.cassandra.utils.UUIDGen.minTimeUUID(long)",3,5,n/a,10,0,1,1,1
"org.apache.cassandra.utils.UUIDGen.unixTimestamp(UUID)",1,9,n/a,8,0,1,1,1
"org.apache.cassandra.utils.UUIDSerializer.deserialize(DataInputPlus,int)",3,37,n/a,4,0,2,1,1
"org.apache.cassandra.utils.UUIDSerializer.serialize(UUID,DataOutputPlus,int)",4,39,n/a,5,0,3,2,1
"org.apache.cassandra.utils.UUIDSerializer.serializedSize(UUID,int)",4,34,n/a,4,0,2,1,1
"org.apache.cassandra.utils.WindowsTimer.WindowsTimer()",0,0,n/a,1,0,0,0,1
"org.apache.cassandra.utils.WindowsTimer.endTimerPeriod(int)",2,2,n/a,8,0,1,5,3
"org.apache.cassandra.utils.WindowsTimer.startTimerPeriod(int)",2,0,n/a,8,0,1,5,3
"org.apache.cassandra.utils.WindowsTimer.timeBeginPeriod(int)",0,1,n/a,1,-1,1,0,1
"org.apache.cassandra.utils.WindowsTimer.timeEndPeriod(int)",0,1,n/a,1,-1,1,0,1
"org.apache.cassandra.utils.WrappedRunnable.run()",2,0,n/a,11,1,0,3,2
"org.apache.cassandra.utils.WrappedRunnable.runMayThrow()",n/a,1,21,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.btree.BTree.Builder.Builder(Comparator<? super V>)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.Builder(Comparator<? super V>,int)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.btree.BTree.Builder.QuickResolver.resolve(V,V)",n/a,4,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.btree.BTree.Builder.Resolver.resolve(Object[],int,int)",n/a,2,1,n/a,n/a,3,n/a,n/a
"org.apache.cassandra.utils.btree.BTree.Builder.add(V)",3,17,n/a,24,2,1,15,9
"org.apache.cassandra.utils.btree.BTree.Builder.addAll(Collection<V>)",8,3,n/a,15,1,1,8,6
"org.apache.cassandra.utils.btree.BTree.Builder.auto(boolean)",0,7,n/a,5,0,1,2,1
"org.apache.cassandra.utils.btree.BTree.Builder.autoEnforce()",3,2,n/a,20,2,0,14,6
"org.apache.cassandra.utils.btree.BTree.Builder.build()",5,18,n/a,6,0,0,3,2
"org.apache.cassandra.utils.btree.BTree.Builder.equalComparators(Comparator<?>,Comparator<?>)",2,1,n/a,4,0,2,1,3
"org.apache.cassandra.utils.btree.BTree.Builder.isEmpty()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.isNaturalComparator(Comparator<?>)",2,2,n/a,4,0,1,1,3
"org.apache.cassandra.utils.btree.BTree.Builder.mergeAll(Iterable<V>,int)",5,1,n/a,25,1,2,11,4
"org.apache.cassandra.utils.btree.BTree.Builder.mergeAll(int)",7,1,n/a,62,2,1,39,16
"org.apache.cassandra.utils.btree.BTree.Builder.resolve(Resolver)",3,4,n/a,19,3,1,12,4
"org.apache.cassandra.utils.btree.BTree.Builder.reuse()",1,7,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTree.Builder.reuse(Comparator<? super V>)",0,2,n/a,6,0,1,3,1
"org.apache.cassandra.utils.btree.BTree.Builder.reverse()",0,3,n/a,12,1,0,9,2
"org.apache.cassandra.utils.btree.BTree.Builder.setQuickResolver(QuickResolver<V>)",0,2,n/a,5,0,1,2,1
"org.apache.cassandra.utils.btree.BTree.Builder.sort()",1,4,n/a,5,0,0,2,1
"org.apache.cassandra.utils.btree.BTree.Dir.asc(boolean)",0,0,n/a,1,0,1,1,2
"org.apache.cassandra.utils.btree.BTree.Dir.desc(boolean)",0,2,n/a,1,0,1,1,2
"org.apache.cassandra.utils.btree.BTree.Dir.invert()",0,1,n/a,1,0,0,1,2
"org.apache.cassandra.utils.btree.BTree.FiltrationTracker.FiltrationTracker(Function<? super V, ? extends V>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.FiltrationTracker.apply(V)",1,1,n/a,7,0,1,5,2
"org.apache.cassandra.utils.btree.BTree.build(Collection<K>,UpdateFunction<K, V>)",2,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTree.build(Iterable<K>,UpdateFunction<K, V>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTree.build(Iterable<K>,int,UpdateFunction<K, V>)",3,1,n/a,13,0,3,3,2
"org.apache.cassandra.utils.btree.BTree.buildInternal(Iterable<K>,int,UpdateFunction<K, V>)",8,4,n/a,28,2,3,16,5
"org.apache.cassandra.utils.btree.BTree.builder(Comparator<? super V>)",1,9,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.builder(Comparator<? super V>,int)",1,5,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTree.ceil(Object[],Comparator<? super V>,V)",3,0,n/a,5,0,3,2,2
"org.apache.cassandra.utils.btree.BTree.ceilIndex(Object[],Comparator<? super V>,V)",1,3,n/a,7,0,3,4,2
"org.apache.cassandra.utils.btree.BTree.compare(Comparator<V>,Object,Object)",1,2,n/a,11,0,3,7,4
"org.apache.cassandra.utils.btree.BTree.depth(Object[])",2,0,n/a,10,1,1,5,2
"org.apache.cassandra.utils.btree.BTree.empty()",0,9,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTree.equals(Object[],Object[])",5,2,n/a,4,0,2,1,2
"org.apache.cassandra.utils.btree.BTree.find(Object[],Comparator<? super V>,V)",3,5,n/a,17,1,3,9,4
"org.apache.cassandra.utils.btree.BTree.findByIndex(Object[],int)",8,10,n/a,34,2,2,18,6
"org.apache.cassandra.utils.btree.BTree.findIndex(Object[],Comparator<? super V>,V)",4,8,n/a,24,1,3,15,7
"org.apache.cassandra.utils.btree.BTree.floor(Object[],Comparator<? super V>,V)",2,0,n/a,5,0,3,2,2
"org.apache.cassandra.utils.btree.BTree.floorIndex(Object[],Comparator<? super V>,V)",1,2,n/a,7,0,3,4,2
"org.apache.cassandra.utils.btree.BTree.getBranchKeyEnd(Object[])",0,3,n/a,6,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.getChildCount(Object[])",0,3,n/a,7,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.getChildEnd(Object[])",0,3,n/a,7,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.getChildStart(Object[])",1,8,n/a,7,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.getKeyEnd(Object[])",3,11,n/a,8,0,1,3,2
"org.apache.cassandra.utils.btree.BTree.getLeafKeyEnd(Object[])",0,8,n/a,6,0,1,2,2
"org.apache.cassandra.utils.btree.BTree.getSizeMap(Object[])",1,5,n/a,7,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.hashCode(Object[])",2,1,n/a,9,0,1,4,2
"org.apache.cassandra.utils.btree.BTree.higher(Object[],Comparator<? super V>,V)",3,0,n/a,5,0,3,2,2
"org.apache.cassandra.utils.btree.BTree.higherIndex(Object[],Comparator<? super V>,V)",1,2,n/a,7,0,3,5,2
"org.apache.cassandra.utils.btree.BTree.isEmpty(Object[])",0,11,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.isLeaf(Object[])",0,18,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.isNodeWellFormed(Comparator<?>,Object[],Object,Object)",3,1,n/a,13,1,4,10,3
"org.apache.cassandra.utils.btree.BTree.isWellFormed(Comparator<?>,Object[],boolean,Object,Object)",7,2,n/a,23,1,5,17,10
"org.apache.cassandra.utils.btree.BTree.isWellFormed(Object[],Comparator<? extends Object>)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTree.iterable(Object[])",1,8,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.iterable(Object[],Dir)",1,4,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTree.iterable(Object[],int,int,Dir)",1,2,n/a,4,0,4,1,1
"org.apache.cassandra.utils.btree.BTree.iterator(Object[])",1,7,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.iterator(Object[],Dir)",1,3,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTree.iterator(Object[],int,int,Dir)",1,3,n/a,4,0,4,1,1
"org.apache.cassandra.utils.btree.BTree.lookupSizeMap(Object[],int)",1,2,n/a,7,0,2,1,1
"org.apache.cassandra.utils.btree.BTree.lower(Object[],Comparator<? super V>,V)",2,0,n/a,5,0,3,2,2
"org.apache.cassandra.utils.btree.BTree.lowerIndex(Object[],Comparator<? super V>,V)",1,2,n/a,7,0,3,4,2
"org.apache.cassandra.utils.btree.BTree.merge(Object[],Object[],Comparator<? super K>,UpdateFunction<K, K>)",4,2,n/a,10,1,4,5,2
"org.apache.cassandra.utils.btree.BTree.replaceInSitu(Object[],Comparator<? super V>,V,V)",4,2,n/a,22,2,4,11,4
"org.apache.cassandra.utils.btree.BTree.singleton(Object)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.size(Object[])",2,23,n/a,11,0,1,4,2
"org.apache.cassandra.utils.btree.BTree.sizeOfStructureOnHeap(Object[])",5,2,n/a,9,0,1,8,3
"org.apache.cassandra.utils.btree.BTree.slice(Object[],Comparator<? super K>,Dir)",1,5,n/a,12,0,3,1,1
"org.apache.cassandra.utils.btree.BTree.slice(Object[],Comparator<? super K>,K,K,Dir)",1,0,n/a,12,0,5,1,1
"org.apache.cassandra.utils.btree.BTree.slice(Object[],Comparator<? super K>,K,boolean,K,boolean,Dir)",8,2,n/a,22,0,7,3,5
"org.apache.cassandra.utils.btree.BTree.toArray(Object[],Object[],int)",2,1,n/a,11,0,3,1,1
"org.apache.cassandra.utils.btree.BTree.toArray(Object[],int,int,Object[],int)",9,2,n/a,25,2,5,17,7
"org.apache.cassandra.utils.btree.BTree.transformAndFilter(Object[],FiltrationTracker<V>)",6,0,n/a,23,2,2,17,10
"org.apache.cassandra.utils.btree.BTree.transformAndFilter(Object[],Function<? super V, ? extends V>)",11,4,n/a,21,0,2,11,3
"org.apache.cassandra.utils.btree.BTree.treeIndexOfBranchKey(Object[],int)",1,2,n/a,9,0,2,1,1
"org.apache.cassandra.utils.btree.BTree.treeIndexOfKey(Object[],int)",2,1,n/a,20,0,2,8,4
"org.apache.cassandra.utils.btree.BTree.treeIndexOfLeafKey(int)",0,1,n/a,8,0,1,1,1
"org.apache.cassandra.utils.btree.BTree.treeIndexOffsetOfChild(Object[],int)",1,2,n/a,11,0,2,3,2
"org.apache.cassandra.utils.btree.BTree.update(Object[],Comparator<C>,Collection<K>,UpdateFunction<K, V>)",2,9,n/a,7,0,4,1,1
"org.apache.cassandra.utils.btree.BTree.update(Object[],Comparator<C>,Iterable<K>,int,UpdateFunction<K, V>)",7,2,n/a,27,0,5,9,3
"org.apache.cassandra.utils.btree.BTreeSearchIterator.BTreeSearchIterator(Object[],Comparator<? super K>,Dir)",2,1,n/a,4,0,3,1,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.BTreeSearchIterator(Object[],Comparator<? super K>,Dir,int,int)",2,1,n/a,8,0,5,5,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.checkOnItem()",1,2,n/a,5,0,0,2,2
"org.apache.cassandra.utils.btree.BTreeSearchIterator.compareToFirst(int)",0,2,n/a,4,0,1,1,2
"org.apache.cassandra.utils.btree.BTreeSearchIterator.compareToLast(int)",0,2,n/a,7,0,1,1,2
"org.apache.cassandra.utils.btree.BTreeSearchIterator.current()",2,1,n/a,5,0,0,2,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.hasNext()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.indexOfCurrent()",2,5,n/a,5,0,0,2,1
"org.apache.cassandra.utils.btree.BTreeSearchIterator.next()",5,0,n/a,20,1,0,15,8
"org.apache.cassandra.utils.btree.BTreeSearchIterator.next(K)",6,6,n/a,25,2,1,18,7
"org.apache.cassandra.utils.btree.BTreeSearchIterator.rewind()",1,1,n/a,16,1,0,4,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.BTreeDescRange(BTreeRange<V>)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.ceiling(V)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.comparator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.descendingSet()",1,4,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.floor(V)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.get(int)",3,4,n/a,7,0,1,4,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.headSet(V,boolean)",2,2,n/a,5,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.higher(V)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.indexOf(Object)",3,4,n/a,7,0,1,2,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.lower(V)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.slice(Dir)",2,3,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.subList(int,int)",4,0,n/a,6,0,2,3,3
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.subSet(V,boolean,V,boolean)",2,2,n/a,5,0,4,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.tailSet(V,boolean)",2,2,n/a,5,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange.toArray(T[],int)",2,3,n/a,14,1,2,11,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(BTreeRange<V>)",1,1,n/a,6,0,1,3,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(BTreeRange<V>,BTreeRange<V>)",3,3,n/a,6,0,2,2,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(Object[],Comparator<? super V>)",1,1,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(Object[],Comparator<? super V>,V,boolean,V,boolean)",6,7,n/a,8,0,6,1,5
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.BTreeRange(Object[],Comparator<? super V>,int,int)",1,6,n/a,8,0,4,5,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.ceiling(V)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.descendingSet()",1,4,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.floor(V)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.get(int)",3,4,n/a,7,0,1,4,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.headSet(V,boolean)",2,2,n/a,5,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.higher(V)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.indexOf(Object)",3,4,n/a,13,0,1,10,5
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.isEmpty()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.lower(V)",3,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.maybe(int)",2,4,n/a,6,0,1,3,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.outOfBounds(int)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.size()",0,10,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.slice(Dir)",1,3,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.subList(int,int)",3,0,n/a,6,0,2,3,3
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.subSet(V,boolean,V,boolean)",2,2,n/a,5,0,4,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.tailSet(V,boolean)",2,2,n/a,5,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.toArray(T[])",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange.toArray(T[],int)",4,3,n/a,7,0,2,4,2
"org.apache.cassandra.utils.btree.BTreeSet.BTreeSet(Object[],Comparator<? super V>)",0,9,n/a,5,0,2,2,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.Builder(Comparator<? super V>)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.add(V)",1,11,n/a,5,0,1,2,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.addAll(Collection<V>)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.build()",2,10,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.Builder.isEmpty()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.add(V)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.add(int,V)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.addAll(Collection<? extends V>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.addAll(int,Collection<? extends V>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.builder(Comparator<? super V>)",1,12,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.ceiling(V)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.clear()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.comparator()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.contains(Object)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.containsAll(Collection<?>)",1,0,n/a,9,0,1,4,3
"org.apache.cassandra.utils.btree.BTreeSet.descendingIterator()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.descendingSet()",2,3,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.empty(Comparator<? super V>)",2,4,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.first()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.floor(V)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.get(int)",1,4,n/a,7,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.hashCode()",1,0,n/a,9,0,0,4,2
"org.apache.cassandra.utils.btree.BTreeSet.headSet(V)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.headSet(V,boolean)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.higher(V)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.indexOf(Object)",1,3,n/a,7,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.isEmpty()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.iterator()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.last()",2,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.lastIndexOf(Object)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.listIterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.listIterator(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.lower(V)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.of(Collection<V>)",4,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.of(Comparator<? super V>,V)",4,2,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.of(V)",5,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.pollFirst()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.pollLast()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.remove(Object)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.remove(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.removeAll(Collection<?>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.retainAll(Collection<?>)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.set(int,V)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.size()",1,2,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.slice(Dir)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.spliterator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.subList(int,int)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.subSet(V,V)",1,0,n/a,5,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.subSet(V,boolean,V,boolean)",1,1,n/a,5,0,4,1,1
"org.apache.cassandra.utils.btree.BTreeSet.tailSet(V)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.tailSet(V,boolean)",1,1,n/a,5,0,2,1,1
"org.apache.cassandra.utils.btree.BTreeSet.toArray()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.toArray(T[])",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.toArray(T[],int)",3,1,n/a,8,0,2,5,2
"org.apache.cassandra.utils.btree.BTreeSet.tree()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.BTreeSet.update(Collection<V>)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.BTreeSet.wrap(Object[],Comparator<V>)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.NodeBuilder.addExtraChild(Object[],Object)",1,2,n/a,7,0,2,3,1
"org.apache.cassandra.utils.btree.NodeBuilder.addNewKey(Object)",2,1,n/a,8,0,1,2,1
"org.apache.cassandra.utils.btree.NodeBuilder.ascend()",8,3,n/a,18,1,0,8,2
"org.apache.cassandra.utils.btree.NodeBuilder.ascendToRoot()",2,0,n/a,9,0,0,4,2
"org.apache.cassandra.utils.btree.NodeBuilder.buildFromRange(int,int,boolean,boolean)",10,5,n/a,36,2,4,23,7
"org.apache.cassandra.utils.btree.NodeBuilder.clear()",2,0,n/a,16,1,0,8,5
"org.apache.cassandra.utils.btree.NodeBuilder.clearSelf()",3,2,n/a,7,0,0,4,1
"org.apache.cassandra.utils.btree.NodeBuilder.compareUpperBound(Comparator<V>,Object,Object)",1,1,n/a,4,0,3,1,2
"org.apache.cassandra.utils.btree.NodeBuilder.copyChildren(int)",2,4,n/a,14,1,1,7,3
"org.apache.cassandra.utils.btree.NodeBuilder.copyKeys(int)",2,6,n/a,15,1,1,9,3
"org.apache.cassandra.utils.btree.NodeBuilder.ensureChild()",1,1,n/a,10,1,0,4,2
"org.apache.cassandra.utils.btree.NodeBuilder.ensureParent()",2,2,n/a,14,1,0,6,3
"org.apache.cassandra.utils.btree.NodeBuilder.ensureRoom(int)",6,4,n/a,19,1,1,12,3
"org.apache.cassandra.utils.btree.NodeBuilder.finish()",6,0,n/a,13,1,0,7,4
"org.apache.cassandra.utils.btree.NodeBuilder.finishChild(Object[])",0,2,n/a,6,0,1,2,1
"org.apache.cassandra.utils.btree.NodeBuilder.isRoot()",0,2,n/a,7,0,0,1,3
"org.apache.cassandra.utils.btree.NodeBuilder.replaceNextKey(Object)",1,2,n/a,8,0,1,3,1
"org.apache.cassandra.utils.btree.NodeBuilder.reset(Object[],Object,UpdateFunction,Comparator)",1,3,n/a,13,0,4,9,1
"org.apache.cassandra.utils.btree.NodeBuilder.toNode()",2,0,n/a,7,0,0,2,1
"org.apache.cassandra.utils.btree.NodeBuilder.update(Object)",20,0,n/a,111,3,1,47,17
"org.apache.cassandra.utils.btree.NodeCursor.NodeCursor(Object[],NodeCursor<K>,Comparator<? super K>)",3,1,n/a,9,0,3,4,2
"org.apache.cassandra.utils.btree.NodeCursor.advanceIntoBranchFromChild(boolean)",1,0,n/a,7,0,1,1,2
"org.apache.cassandra.utils.btree.NodeCursor.advanceLeafNode(boolean)",1,0,n/a,5,0,1,1,2
"org.apache.cassandra.utils.btree.NodeCursor.bound(boolean)",0,0,n/a,7,0,1,1,2
"org.apache.cassandra.utils.btree.NodeCursor.boundIterator(boolean)",1,0,n/a,14,0,1,4,4
"org.apache.cassandra.utils.btree.NodeCursor.descend()",3,1,n/a,9,0,0,5,1
"org.apache.cassandra.utils.btree.NodeCursor.descendToFirstChild(boolean)",4,0,n/a,11,1,1,6,4
"org.apache.cassandra.utils.btree.NodeCursor.globalBranchIndex()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.NodeCursor.globalIndex()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.NodeCursor.globalLeafIndex()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.NodeCursor.isLeaf()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.NodeCursor.resetNode(Object[],int)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.btree.NodeCursor.safeAdvanceIntoBranchFromChild(boolean)",0,0,n/a,8,0,1,2,2
"org.apache.cassandra.utils.btree.NodeCursor.seekInNode(K,boolean)",3,0,n/a,39,1,2,15,4
"org.apache.cassandra.utils.btree.NodeCursor.value()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.TreeBuilder.build(Iterable<K>,UpdateFunction<K, V>,int)",6,0,n/a,16,0,3,11,3
"org.apache.cassandra.utils.btree.TreeBuilder.update(Object[],Comparator<C>,Iterable<K>,UpdateFunction<K, V>)",8,0,n/a,56,3,4,21,7
"org.apache.cassandra.utils.btree.TreeCursor.TreeCursor(Comparator<? super K>,Object[])",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.btree.TreeCursor.currentValue()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.TreeCursor.ensureValidLocation(boolean,NodeCursor<K>)",4,1,n/a,14,0,2,5,2
"org.apache.cassandra.utils.btree.TreeCursor.moveOne(boolean)",9,0,n/a,28,1,1,14,5
"org.apache.cassandra.utils.btree.TreeCursor.moveOutOfLeaf(boolean,NodeCursor<K>,NodeCursor<K>)",2,3,n/a,20,2,3,9,4
"org.apache.cassandra.utils.btree.TreeCursor.reset(boolean)",5,1,n/a,11,0,1,3,2
"org.apache.cassandra.utils.btree.TreeCursor.root()",0,10,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.TreeCursor.rootNode()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.utils.btree.TreeCursor.seekTo(K,boolean,boolean)",16,0,n/a,70,2,3,35,17
"org.apache.cassandra.utils.btree.TreeCursor.seekTo(int)",14,0,n/a,42,2,1,27,6
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.Simple(BiFunction<V, V, V>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.abortEarly()",0,0,n/a,1,0,0,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.allocated(long)",0,0,n/a,1,0,1,0,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.apply(V)",0,0,n/a,1,0,1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.apply(V,V)",1,0,n/a,1,0,2,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.Simple.of(BiFunction<V, V, V>)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.btree.UpdateFunction.abortEarly()",n/a,0,6,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.btree.UpdateFunction.allocated(long)",n/a,0,6,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.btree.UpdateFunction.apply(V,K)",n/a,0,6,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.btree.UpdateFunction.noOp()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.Accumulator(int)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.add(E)",4,1,n/a,46,3,1,18,11
"org.apache.cassandra.utils.concurrent.Accumulator.capacity()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.get(int)",1,0,n/a,7,0,1,3,2
"org.apache.cassandra.utils.concurrent.Accumulator.isEmpty()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Accumulator.iterator()",2,0,n/a,4,2,0,4,1
"org.apache.cassandra.utils.concurrent.Accumulator.size()",0,0,n/a,7,0,0,1,1
"org.apache.cassandra.utils.concurrent.Blocker.ask()",3,0,n/a,16,2,0,6,3
"org.apache.cassandra.utils.concurrent.Blocker.block(boolean)",3,0,n/a,16,2,1,6,2
"org.apache.cassandra.utils.concurrent.Locks.monitorEnterUnsafe(Object)",1,2,n/a,6,0,1,2,2
"org.apache.cassandra.utils.concurrent.Locks.monitorExitUnsafe(Object)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.allPriorOpsAreFinished()",1,2,n/a,12,0,0,6,3
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.await()",5,6,n/a,18,2,0,7,3
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.getSyncPoint()",0,1,n/a,8,0,0,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.isAfter(Group)",0,2,n/a,15,0,1,3,2
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.issue()",3,7,n/a,17,1,0,8,2
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.markBlocking()",1,1,n/a,13,1,0,5,2
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier.register()",1,1,n/a,7,0,0,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.Group()",0,1,n/a,5,0,0,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.Group(Group)",0,1,n/a,5,0,1,2,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.close()",3,11,n/a,27,4,0,9,6
"org.apache.cassandra.utils.concurrent.OpOrder.Group.compareTo(Group)",0,0,n/a,12,0,1,6,3
"org.apache.cassandra.utils.concurrent.OpOrder.Group.expire()",3,1,n/a,19,2,0,8,5
"org.apache.cassandra.utils.concurrent.OpOrder.Group.isBlocking()",0,1,n/a,8,0,0,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.isBlockingSignal()",1,1,n/a,8,0,0,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.isBlockingSignal(Signal)",2,1,n/a,7,0,1,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.Group.register()",1,1,n/a,12,1,0,6,4
"org.apache.cassandra.utils.concurrent.OpOrder.Group.unlink()",1,2,n/a,35,1,0,16,6
"org.apache.cassandra.utils.concurrent.OpOrder.awaitNewBarrier()",3,4,n/a,6,0,0,3,1
"org.apache.cassandra.utils.concurrent.OpOrder.getCurrent()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.newBarrier()",1,4,n/a,12,0,0,1,1
"org.apache.cassandra.utils.concurrent.OpOrder.start()",1,8,n/a,15,1,0,4,3
"org.apache.cassandra.utils.concurrent.Ref.Debug.Debug()",3,1,n/a,6,0,0,3,1
"org.apache.cassandra.utils.concurrent.Ref.Debug.deallocate()",3,2,n/a,6,0,0,3,1
"org.apache.cassandra.utils.concurrent.Ref.Debug.log(String)",4,4,n/a,6,0,1,3,2
"org.apache.cassandra.utils.concurrent.Ref.Debug.print(String,StackTraceElement[])",7,2,n/a,13,1,2,8,2
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.GlobalState(Tidy)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.count()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.ref()",2,1,n/a,12,1,0,6,4
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.register(State)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.release(State,Throwable)",5,2,n/a,19,2,2,8,4
"org.apache.cassandra.utils.concurrent.Ref.GlobalState.toString()",4,0,n/a,6,0,0,3,2
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.IdentityCollection(Set<Tidy>)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(Memory)",1,2,n/a,5,0,1,2,2
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(Ref<?>)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(SelfRefCounted<?>)",2,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(SharedCloseable)",1,1,n/a,5,0,1,2,2
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection.add(SharedCloseableImpl)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Ref.Ref(T,GlobalState)",1,0,n/a,5,0,2,2,1
"org.apache.cassandra.utils.concurrent.Ref.Ref(T,Tidy)",2,5,n/a,5,0,2,2,1
"org.apache.cassandra.utils.concurrent.Ref.ReferenceReaper.run()",3,0,n/a,21,3,0,6,4
"org.apache.cassandra.utils.concurrent.Ref.State.State(GlobalState,Ref,ReferenceQueue<? super Ref>)",2,2,n/a,6,0,3,3,1
"org.apache.cassandra.utils.concurrent.Ref.State.assertNotReleased()",2,2,n/a,6,0,0,3,3
"org.apache.cassandra.utils.concurrent.Ref.State.ensureReleased(Throwable)",3,2,n/a,10,1,1,5,3
"org.apache.cassandra.utils.concurrent.Ref.State.release(boolean)",11,2,n/a,29,2,1,18,8
"org.apache.cassandra.utils.concurrent.Ref.StrongLeakDetector.removeExpected(Set<Tidy>)",7,1,n/a,13,2,1,6,4
"org.apache.cassandra.utils.concurrent.Ref.StrongLeakDetector.run()",10,0,n/a,16,1,0,11,4
"org.apache.cassandra.utils.concurrent.Ref.Visitor.run()",7,0,n/a,26,2,0,12,4
"org.apache.cassandra.utils.concurrent.Ref.Visitor.visit(Object)",10,2,n/a,28,3,1,11,7
"org.apache.cassandra.utils.concurrent.Ref.close()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Ref.ensureReleased()",2,4,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Ref.ensureReleased(Throwable)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Ref.get()",1,7,n/a,5,0,0,2,1
"org.apache.cassandra.utils.concurrent.Ref.getFields(Class<?>)",15,2,n/a,18,1,1,13,9
"org.apache.cassandra.utils.concurrent.Ref.globalCount()",1,8,n/a,8,0,0,1,1
"org.apache.cassandra.utils.concurrent.Ref.printDebugInfo()",2,1,n/a,9,1,0,4,2
"org.apache.cassandra.utils.concurrent.Ref.ref()",2,3,n/a,8,0,0,4,2
"org.apache.cassandra.utils.concurrent.Ref.release()",1,45,n/a,9,0,0,1,1
"org.apache.cassandra.utils.concurrent.Ref.tryRef()",2,3,n/a,4,0,0,1,2
"org.apache.cassandra.utils.concurrent.RefCounted.Tidy.name()",n/a,0,5,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.RefCounted.Tidy.tidy()",n/a,0,5,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.RefCounted.ref()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.RefCounted.tryRef()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.Refs.Refs()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Refs.Refs(Map<T, Ref<T>>)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Refs.addAll(Refs<T>)",11,1,n/a,17,1,1,8,3
"org.apache.cassandra.utils.concurrent.Refs.close()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.utils.concurrent.Refs.get(T)",1,2,n/a,8,0,1,1,1
"org.apache.cassandra.utils.concurrent.Refs.iterator()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Refs.ref(Iterable<T>)",2,9,n/a,7,0,1,4,2
"org.apache.cassandra.utils.concurrent.Refs.relaseAllExcept(Collection<T>)",4,0,n/a,6,0,1,3,1
"org.apache.cassandra.utils.concurrent.Refs.release()",3,13,n/a,14,1,0,3,1
"org.apache.cassandra.utils.concurrent.Refs.release(Collection<T>)",9,2,n/a,41,2,1,19,8
"org.apache.cassandra.utils.concurrent.Refs.release(Iterable<? extends Ref<?>>)",2,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Refs.release(Iterable<? extends Ref<?>>,Throwable)",2,5,n/a,15,2,2,5,3
"org.apache.cassandra.utils.concurrent.Refs.release(T)",3,0,n/a,10,0,1,4,2
"org.apache.cassandra.utils.concurrent.Refs.releaseIfHolds(T)",2,1,n/a,12,0,1,4,2
"org.apache.cassandra.utils.concurrent.Refs.selfRefs(Iterable<T>)",3,5,n/a,5,2,1,2,1
"org.apache.cassandra.utils.concurrent.Refs.size()",1,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Refs.tryRef(Iterable<T>)",6,4,n/a,18,2,1,8,3
"org.apache.cassandra.utils.concurrent.Refs.tryRef(T)",3,2,n/a,15,0,1,7,3
"org.apache.cassandra.utils.concurrent.SelfRefCounted.selfRef()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.SharedCloseable.addTo(IdentityCollection)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.concurrent.SharedCloseable.close(Throwable)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.concurrent.SharedCloseable.sharedCopy()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.SharedCloseableImpl(SharedCloseableImpl)",1,3,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.SharedCloseableImpl(Tidy)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.addTo(IdentityCollection)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.close()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.close(Throwable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl.isCleanedUp()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.await()",8,4,n/a,13,0,0,9,4
"org.apache.cassandra.utils.concurrent.SimpleCondition.await(long,TimeUnit)",10,6,n/a,16,1,2,11,5
"org.apache.cassandra.utils.concurrent.SimpleCondition.awaitNanos(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.awaitUninterruptibly()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.awaitUntil(Date)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.isSignaled()",0,11,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.signal()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.SimpleCondition.signalAll()",1,11,n/a,6,0,0,3,2
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.abort()",2,8,n/a,6,0,0,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.abort(Throwable)",5,10,n/a,26,2,1,12,4
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.close()",1,8,n/a,12,1,0,6,3
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.commit()",2,3,n/a,6,0,0,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.commit(Throwable)",3,7,n/a,14,0,1,8,4
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.doAbort(Throwable)",n/a,1,11,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.doCommit(Throwable)",n/a,1,11,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.doPostCleanup(Throwable)",0,4,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.doPreCleanup(Throwable)",0,2,n/a,5,0,1,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.doPrepare()",n/a,1,11,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.finish()",2,12,n/a,10,0,0,3,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.permitRedundantTransitions()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.prepareToCommit()",4,9,n/a,14,0,0,7,4
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.state()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.Transactional.abort(Throwable)",n/a,3,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.concurrent.Transactional.close()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.Transactional.commit(Throwable)",n/a,0,3,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.concurrent.Transactional.prepareToCommit()",n/a,0,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal.await()",4,1,n/a,9,1,0,4,2
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal.awaitUninterruptibly()",6,8,n/a,13,1,0,8,4
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal.awaitUntil(long)",5,0,n/a,11,1,1,6,3
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal.checkInterrupted()",3,2,n/a,8,1,0,3,2
"org.apache.cassandra.utils.concurrent.WaitQueue.AllSignal.AllSignal(Signal...)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.AllSignal.isSet()",1,2,n/a,7,0,0,4,3
"org.apache.cassandra.utils.concurrent.WaitQueue.AllSignal.isSignalled()",1,6,n/a,7,0,0,4,3
"org.apache.cassandra.utils.concurrent.WaitQueue.AnySignal.AnySignal(Signal...)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.AnySignal.isSet()",1,2,n/a,7,0,0,4,3
"org.apache.cassandra.utils.concurrent.WaitQueue.AnySignal.isSignalled()",1,6,n/a,7,0,0,4,3
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal.MultiSignal(Signal[])",0,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal.cancel()",1,9,n/a,5,0,0,2,2
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal.checkAndClear()",2,4,n/a,6,0,0,3,2
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal.isCancelled()",1,2,n/a,7,0,0,4,3
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.cancel()",4,10,n/a,18,1,0,7,3
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.checkAndClear()",3,5,n/a,11,1,0,5,3
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.isCancelled()",0,5,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.isSet()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.isSignalled()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal.signal()",3,2,n/a,11,1,0,6,3
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal.await()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal.awaitUninterruptibly()",n/a,8,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal.awaitUntil(long)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal.cancel()",n/a,9,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal.checkAndClear()",n/a,4,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal.isCancelled()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal.isSet()",n/a,2,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal.isSignalled()",n/a,6,3,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.TimedSignal.TimedSignal(Context)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.TimedSignal.cancel()",3,10,n/a,9,1,0,3,2
"org.apache.cassandra.utils.concurrent.WaitQueue.TimedSignal.checkAndClear()",2,5,n/a,6,0,0,2,1
"org.apache.cassandra.utils.concurrent.WaitQueue.all(Signal...)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.any(Signal...)",1,0,n/a,8,0,1,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.cleanUpCancelled()",5,2,n/a,11,1,0,5,3
"org.apache.cassandra.utils.concurrent.WaitQueue.getWaiting()",5,0,n/a,18,1,0,9,4
"org.apache.cassandra.utils.concurrent.WaitQueue.hasWaiters()",1,5,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.WaitQueue.register()",2,7,n/a,10,0,0,3,1
"org.apache.cassandra.utils.concurrent.WaitQueue.register(Context)",2,2,n/a,13,0,1,4,1
"org.apache.cassandra.utils.concurrent.WaitQueue.signal()",3,4,n/a,14,1,0,6,5
"org.apache.cassandra.utils.concurrent.WaitQueue.signalAll()",6,6,n/a,31,3,0,15,6
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.Tidy.Tidy(AutoCloseable[])",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.Tidy.name()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.Tidy.tidy()",3,0,n/a,16,2,0,6,3
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.WrappedSharedCloseable(AutoCloseable)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.WrappedSharedCloseable(AutoCloseable[])",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.WrappedSharedCloseable(WrappedSharedCloseable)",1,2,n/a,5,0,1,2,1
"org.apache.cassandra.utils.memory.AbstractAllocator.CloningBTreeRowBuilder.CloningBTreeRowBuilder(AbstractAllocator)",1,1,n/a,5,0,1,2,1
"org.apache.cassandra.utils.memory.AbstractAllocator.CloningBTreeRowBuilder.addCell(Cell)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.memory.AbstractAllocator.CloningBTreeRowBuilder.newRow(Clustering)",2,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.memory.AbstractAllocator.allocate(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.memory.AbstractAllocator.clone(ByteBuffer)",7,6,n/a,14,0,1,8,2
"org.apache.cassandra.utils.memory.AbstractAllocator.cloningBTreeRowBuilder()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.Chunk(ByteBuffer)",5,2,n/a,12,0,1,6,3
"org.apache.cassandra.utils.memory.BufferPool.Chunk.Chunk(Chunk)",1,1,n/a,11,0,1,8,2
"org.apache.cassandra.utils.memory.BufferPool.Chunk.acquire(LocalPool)",0,2,n/a,9,0,1,2,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.capacity()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.free()",2,5,n/a,5,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.free(ByteBuffer,boolean)",7,2,n/a,36,1,2,23,7
"org.apache.cassandra.utils.memory.BufferPool.Chunk.get(int)",4,3,n/a,67,3,1,21,7
"org.apache.cassandra.utils.memory.BufferPool.Chunk.get(int,int)",4,1,n/a,6,0,2,3,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.getParentChunk(ByteBuffer)",2,2,n/a,14,0,1,6,3
"org.apache.cassandra.utils.memory.BufferPool.Chunk.isFree()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.recycle()",2,3,n/a,5,0,0,2,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.release()",1,2,n/a,10,0,0,2,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.releaseAttachment(ByteBuffer)",2,1,n/a,9,0,1,6,3
"org.apache.cassandra.utils.memory.BufferPool.Chunk.reset()",3,0,n/a,9,0,0,4,2
"org.apache.cassandra.utils.memory.BufferPool.Chunk.roundUp(int)",2,1,n/a,7,0,1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.setAttachment(ByteBuffer)",3,1,n/a,8,0,1,4,2
"org.apache.cassandra.utils.memory.BufferPool.Chunk.setFreeSlots(long)",0,0,n/a,7,0,1,3,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.toString()",4,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.Chunk.tryRecycle()",3,2,n/a,6,0,0,3,3
"org.apache.cassandra.utils.memory.BufferPool.Chunk.unit()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.Debug.check()",0,1,n/a,6,0,0,3,2
"org.apache.cassandra.utils.memory.BufferPool.Debug.recycle(Chunk)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.BufferPool.Debug.register(Chunk)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.allocateMoreChunks()",11,1,n/a,31,2,0,18,6
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.get()",3,1,n/a,13,1,0,6,4
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.recycle(Chunk)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.reset()",7,1,n/a,10,0,0,5,3
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool.sizeInBytes()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.LocalPool()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.addChunk(Chunk)",6,1,n/a,18,1,1,13,5
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.addChunkFromGlobalPool()",2,1,n/a,8,0,0,5,2
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.allocate(int,boolean)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.get(int)",3,0,n/a,16,1,1,10,5
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.put(ByteBuffer)",6,0,n/a,27,1,1,12,7
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.removeFromLocalQueue(Chunk)",0,1,n/a,17,1,1,8,3
"org.apache.cassandra.utils.memory.BufferPool.LocalPool.reset()",1,0,n/a,15,2,0,9,3
"org.apache.cassandra.utils.memory.BufferPool.LocalPoolRef.LocalPoolRef(LocalPool,ReferenceQueue<? super LocalPool>)",1,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.memory.BufferPool.LocalPoolRef.release()",1,1,n/a,11,2,0,6,3
"org.apache.cassandra.utils.memory.BufferPool.allocate(int,boolean)",2,4,n/a,6,0,2,1,2
"org.apache.cassandra.utils.memory.BufferPool.allocateDirectAligned(int)",9,1,n/a,20,1,1,12,3
"org.apache.cassandra.utils.memory.BufferPool.assertAllRecycled()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.currentChunk()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.get(int)",2,0,n/a,7,0,1,3,2
"org.apache.cassandra.utils.memory.BufferPool.get(int,BufferType)",2,1,n/a,8,0,2,4,3
"org.apache.cassandra.utils.memory.BufferPool.maybeTakeFromPool(int,boolean)",7,2,n/a,14,1,2,9,5
"org.apache.cassandra.utils.memory.BufferPool.numChunks()",1,0,n/a,11,1,0,5,3
"org.apache.cassandra.utils.memory.BufferPool.put(ByteBuffer)",3,4,n/a,5,0,1,2,3
"org.apache.cassandra.utils.memory.BufferPool.reset()",3,0,n/a,7,0,0,2,1
"org.apache.cassandra.utils.memory.BufferPool.roundUp(int,int)",0,2,n/a,5,0,2,2,1
"org.apache.cassandra.utils.memory.BufferPool.roundUpNormal(int)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.memory.BufferPool.sizeInBytes()",1,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.BufferPool.takeFromPool(int,boolean)",5,2,n/a,9,0,2,6,3
"org.apache.cassandra.utils.memory.BufferPool.tryGet(int)",2,0,n/a,8,0,1,3,2
"org.apache.cassandra.utils.memory.ContextAllocator.ContextAllocator(Group,MemtableBufferAllocator)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.utils.memory.ContextAllocator.allocate(int)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.ContextAllocator.clone(ByteBuffer)",7,0,n/a,12,0,1,8,2
"org.apache.cassandra.utils.memory.HeapAllocator.HeapAllocator()",0,1,n/a,5,0,0,0,1
"org.apache.cassandra.utils.memory.HeapAllocator.allocate(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.HeapPool.HeapPool(long,float,Runnable)",1,0,n/a,4,0,3,1,1
"org.apache.cassandra.utils.memory.HeapPool.needToCopyOnHeap()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.HeapPool.newAllocator()",1,0,n/a,6,0,0,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.allocate(long)",1,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.duplicateDirectByteBuffer(ByteBuffer,ByteBuffer)",9,2,n/a,9,0,2,6,1
"org.apache.cassandra.utils.memory.MemoryUtil.free(long)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.getAddress(ByteBuffer)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.utils.memory.MemoryUtil.getAttachment(ByteBuffer)",2,0,n/a,5,0,1,2,1
"org.apache.cassandra.utils.memory.MemoryUtil.getByte(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.getByteBuffer(long,int)",2,5,n/a,6,0,2,3,1
"org.apache.cassandra.utils.memory.MemoryUtil.getBytes(long,byte[],int,int)",3,0,n/a,18,0,4,7,6
"org.apache.cassandra.utils.memory.MemoryUtil.getHollowByteBuffer()",4,0,n/a,14,1,0,6,2
"org.apache.cassandra.utils.memory.MemoryUtil.getHollowDirectByteBuffer()",4,5,n/a,14,1,0,6,2
"org.apache.cassandra.utils.memory.MemoryUtil.getInt(long)",2,1,n/a,4,0,1,1,2
"org.apache.cassandra.utils.memory.MemoryUtil.getIntByByte(long)",8,1,n/a,17,1,1,3,2
"org.apache.cassandra.utils.memory.MemoryUtil.getLong(long)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.utils.memory.MemoryUtil.getLongByByte(long)",16,1,n/a,25,1,1,3,2
"org.apache.cassandra.utils.memory.MemoryUtil.getShort(long)",2,0,n/a,4,0,1,1,2
"org.apache.cassandra.utils.memory.MemoryUtil.getShortByByte(long)",4,1,n/a,13,1,1,3,2
"org.apache.cassandra.utils.memory.MemoryUtil.pageSize()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.putIntByByte(long,int)",8,1,n/a,17,1,2,9,2
"org.apache.cassandra.utils.memory.MemoryUtil.putLongByByte(long,long)",16,1,n/a,25,1,2,17,2
"org.apache.cassandra.utils.memory.MemoryUtil.setAttachment(ByteBuffer,Object)",2,0,n/a,5,0,2,2,1
"org.apache.cassandra.utils.memory.MemoryUtil.setByte(long,byte)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.memory.MemoryUtil.setByteBuffer(ByteBuffer,long,int)",3,2,n/a,6,0,3,3,1
"org.apache.cassandra.utils.memory.MemoryUtil.setBytes(byte[],int,long,long)",1,1,n/a,11,1,4,6,3
"org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long,ByteBuffer)",8,1,n/a,11,0,2,7,3
"org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long,byte[],int,int)",1,0,n/a,14,0,4,3,3
"org.apache.cassandra.utils.memory.MemoryUtil.setBytes(long,long,long)",1,1,n/a,11,1,3,6,3
"org.apache.cassandra.utils.memory.MemoryUtil.setInt(long,int)",2,1,n/a,7,0,2,3,2
"org.apache.cassandra.utils.memory.MemoryUtil.setLong(long,long)",2,0,n/a,7,0,2,3,2
"org.apache.cassandra.utils.memory.MemoryUtil.setShort(long,short)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.DataReclaimer.cancel()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.DataReclaimer.commit()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.DataReclaimer.reclaim(Row)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.DataReclaimer.reclaimImmediately(DecoratedKey)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.DataReclaimer.reclaimImmediately(Row)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.LifeCycle.transition(LifeCycle)",1,2,n/a,14,1,1,9,4
"org.apache.cassandra.utils.memory.MemtableAllocator.MemtableAllocator(SubAllocator,SubAllocator)",0,0,n/a,5,0,2,2,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.SubAllocator(SubPool)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.acquired(long)",2,2,n/a,6,0,1,2,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.adjust(long,Group)",2,1,n/a,8,0,2,3,2
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.allocate(long,Group)",11,2,n/a,26,2,2,14,6
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.allocated(long)",2,1,n/a,6,0,1,2,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.markAllReclaiming()",2,2,n/a,13,1,0,7,3
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.ownershipRatio()",1,6,n/a,7,0,0,4,2
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.owns()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.releaseAll()",4,2,n/a,7,0,0,2,1
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator.released(long)",2,1,n/a,5,0,1,2,1
"org.apache.cassandra.utils.memory.MemtableAllocator.clone(DecoratedKey,Group)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.isLive()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.offHeap()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.onHeap()",0,6,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.MemtableAllocator.reclaimer()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.rowBuilder(Group)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarded()",3,2,n/a,11,0,0,3,1
"org.apache.cassandra.utils.memory.MemtableAllocator.setDiscarding()",3,2,n/a,11,0,0,3,1
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.MemtableBufferAllocator(SubAllocator,SubAllocator)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.allocate(int,Group)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.allocator(Group)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.clone(DecoratedKey,Group)",5,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.memory.MemtableBufferAllocator.rowBuilder(Group)",2,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.MemtableCleanerThread.MemtableCleanerThread(P,Runnable)",4,0,n/a,7,0,2,4,1
"org.apache.cassandra.utils.memory.MemtableCleanerThread.needsCleaning()",2,2,n/a,4,0,0,1,2
"org.apache.cassandra.utils.memory.MemtableCleanerThread.run()",6,0,n/a,16,2,0,7,4
"org.apache.cassandra.utils.memory.MemtableCleanerThread.trigger()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.memory.MemtablePool.MemtablePool(long,long,float,Runnable)",4,0,n/a,8,0,4,5,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.SubPool(long,float)",0,1,n/a,5,0,2,2,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.acquired(long)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.adjustAllocated(long)",1,2,n/a,13,1,1,4,3
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.allocated(long)",2,0,n/a,8,0,1,5,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.hasRoom()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.maybeClean()",2,2,n/a,5,0,0,2,3
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.needsCleaning()",2,1,n/a,6,0,0,1,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.newAllocator()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.reclaimed(long)",3,0,n/a,8,0,1,5,4
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.reclaiming(long)",1,0,n/a,6,0,1,3,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.reclaimingRatio()",1,0,n/a,7,0,0,4,2
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.released(long)",2,0,n/a,6,0,1,3,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.tryAllocate(long)",1,0,n/a,12,1,1,6,4
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.updateNextClean()",2,2,n/a,11,1,0,6,4
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.used()",0,2,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.MemtablePool.SubPool.usedRatio()",1,0,n/a,7,0,0,4,2
"org.apache.cassandra.utils.memory.MemtablePool.getCleaner(Runnable)",1,1,n/a,4,0,1,1,2
"org.apache.cassandra.utils.memory.MemtablePool.getSubPool(long,float)",1,2,n/a,4,0,2,1,1
"org.apache.cassandra.utils.memory.MemtablePool.needToCopyOnHeap()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.memory.MemtablePool.newAllocator()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.memory.NativeAllocator.NativeAllocator(NativePool)",3,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.RaceAllocated.poll()",2,1,n/a,7,0,0,4,2
"org.apache.cassandra.utils.memory.NativeAllocator.RaceAllocated.stash(Region)",2,1,n/a,7,0,1,4,2
"org.apache.cassandra.utils.memory.NativeAllocator.Region.Region(long,int)",0,2,n/a,11,0,2,2,1
"org.apache.cassandra.utils.memory.NativeAllocator.Region.allocate(int)",3,2,n/a,22,2,1,7,4
"org.apache.cassandra.utils.memory.NativeAllocator.Region.toString()",3,0,n/a,7,0,0,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.allocate(int,Group)",6,1,n/a,17,1,2,10,5
"org.apache.cassandra.utils.memory.NativeAllocator.allocateOversize(int)",5,1,n/a,11,0,1,6,2
"org.apache.cassandra.utils.memory.NativeAllocator.clone(DecoratedKey,Group)",3,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.reclaimer()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.rowBuilder(Group)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.memory.NativeAllocator.setDiscarded()",2,0,n/a,6,0,0,3,2
"org.apache.cassandra.utils.memory.NativeAllocator.trySwapRegion(Region,int)",10,1,n/a,24,0,2,15,6
"org.apache.cassandra.utils.memory.NativePool.NativePool(long,long,float,Runnable)",1,0,n/a,4,0,4,1,1
"org.apache.cassandra.utils.memory.NativePool.needToCopyOnHeap()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.memory.NativePool.newAllocator()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.Region.Region(ByteBuffer)",0,2,n/a,10,0,1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.Region.allocate(int)",7,2,n/a,22,2,1,7,4
"org.apache.cassandra.utils.memory.SlabAllocator.Region.toString()",4,0,n/a,7,0,0,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.SlabAllocator(SubAllocator,SubAllocator,boolean)",1,0,n/a,5,0,3,2,1
"org.apache.cassandra.utils.memory.SlabAllocator.allocate(int)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.allocate(int,Group)",12,1,n/a,28,1,2,17,7
"org.apache.cassandra.utils.memory.SlabAllocator.allocator(Group)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.getRegion()",10,1,n/a,29,2,0,14,7
"org.apache.cassandra.utils.memory.SlabAllocator.reclaimer()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.SlabAllocator.setDiscarded()",3,0,n/a,6,0,0,3,2
"org.apache.cassandra.utils.memory.SlabPool.SlabPool(long,long,float,Runnable)",1,0,n/a,5,0,4,2,1
"org.apache.cassandra.utils.memory.SlabPool.needToCopyOnHeap()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.memory.SlabPool.newAllocator()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.obs.BitUtil.isPowerOfTwo(int)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.obs.BitUtil.isPowerOfTwo(long)",0,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.obs.BitUtil.nextHighestPowerOfTwo(int)",0,0,n/a,11,0,1,8,1
"org.apache.cassandra.utils.obs.BitUtil.nextHighestPowerOfTwo(long)",0,0,n/a,12,0,1,9,1
"org.apache.cassandra.utils.obs.BitUtil.ntz(int)",0,0,n/a,15,0,1,10,4
"org.apache.cassandra.utils.obs.BitUtil.ntz(long)",0,0,n/a,37,1,1,23,8
"org.apache.cassandra.utils.obs.BitUtil.ntz2(long)",0,0,n/a,12,1,1,12,4
"org.apache.cassandra.utils.obs.BitUtil.ntz3(long)",0,0,n/a,17,1,1,18,6
"org.apache.cassandra.utils.obs.BitUtil.pop(long)",0,35,n/a,23,0,1,7,1
"org.apache.cassandra.utils.obs.BitUtil.pop_andnot(long[],long[],int,int)",7,0,n/a,109,2,4,66,5
"org.apache.cassandra.utils.obs.BitUtil.pop_array(long[],int,int)",7,0,n/a,125,2,3,66,5
"org.apache.cassandra.utils.obs.BitUtil.pop_intersect(long[],long[],int,int)",7,0,n/a,104,2,4,66,5
"org.apache.cassandra.utils.obs.BitUtil.pop_union(long[],long[],int,int)",7,0,n/a,109,2,4,66,5
"org.apache.cassandra.utils.obs.BitUtil.pop_xor(long[],long[],int,int)",7,0,n/a,105,2,4,66,5
"org.apache.cassandra.utils.obs.IBitSet.addTo(IdentityCollection)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.capacity()",n/a,6,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.clear()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.clear(long)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.close()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.get(long)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.offHeapSize()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.serialize(DataOutput)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.serializedSize()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.cassandra.utils.obs.IBitSet.set(long)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.obs.OffHeapBitSet.OffHeapBitSet(Memory)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.OffHeapBitSet(long)",5,6,n/a,18,1,1,8,3
"org.apache.cassandra.utils.obs.OffHeapBitSet.addTo(IdentityCollection)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.capacity()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.clear()",2,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.clear(long)",2,2,n/a,9,0,1,6,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.close()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.deserialize(DataInput)",12,2,n/a,19,1,1,14,2
"org.apache.cassandra.utils.obs.OffHeapBitSet.equals(Object)",1,0,n/a,10,0,1,6,3
"org.apache.cassandra.utils.obs.OffHeapBitSet.get(long)",1,5,n/a,7,0,1,4,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.hashCode()",2,0,n/a,12,1,0,6,2
"org.apache.cassandra.utils.obs.OffHeapBitSet.offHeapSize()",1,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.serialize(DataOutput)",12,0,n/a,16,1,1,5,2
"org.apache.cassandra.utils.obs.OffHeapBitSet.serializedSize()",3,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.set(long)",2,3,n/a,7,0,1,4,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.set(long,byte)",1,0,n/a,4,0,2,1,1
"org.apache.cassandra.utils.obs.OffHeapBitSet.toString()",0,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.OpenBitSet()",1,0,n/a,3,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.OpenBitSet(long)",1,7,n/a,16,0,1,11,4
"org.apache.cassandra.utils.obs.OpenBitSet.addTo(IdentityCollection)",0,0,n/a,3,0,1,0,1
"org.apache.cassandra.utils.obs.OpenBitSet.and(OpenBitSet)",1,0,n/a,4,0,1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.bits2words(long)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.capacity()",0,3,n/a,2,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.cardinality()",2,2,n/a,8,0,0,5,2
"org.apache.cassandra.utils.obs.OpenBitSet.clear()",2,0,n/a,3,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.clear(int)",0,0,n/a,17,0,1,4,1
"org.apache.cassandra.utils.obs.OpenBitSet.clear(int,int)",2,0,n/a,36,1,2,21,7
"org.apache.cassandra.utils.obs.OpenBitSet.clear(long)",0,1,n/a,10,0,1,4,1
"org.apache.cassandra.utils.obs.OpenBitSet.clear(long,long)",2,1,n/a,35,1,2,21,7
"org.apache.cassandra.utils.obs.OpenBitSet.close()",0,0,n/a,3,0,0,0,1
"org.apache.cassandra.utils.obs.OpenBitSet.deserialize(DataInput)",6,1,n/a,12,1,1,13,4
"org.apache.cassandra.utils.obs.OpenBitSet.equals(Object)",0,0,n/a,24,1,1,23,8
"org.apache.cassandra.utils.obs.OpenBitSet.get(int)",0,0,n/a,13,0,1,4,1
"org.apache.cassandra.utils.obs.OpenBitSet.get(long)",0,3,n/a,11,0,1,4,1
"org.apache.cassandra.utils.obs.OpenBitSet.getNumWords()",0,2,n/a,2,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getPage(int)",0,3,n/a,4,0,1,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getPageCount()",0,4,n/a,4,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.getPageSize()",0,3,n/a,7,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.hashCode()",0,0,n/a,13,1,0,6,2
"org.apache.cassandra.utils.obs.OpenBitSet.intersect(OpenBitSet)",1,1,n/a,19,1,1,13,4
"org.apache.cassandra.utils.obs.OpenBitSet.isEmpty()",1,0,n/a,2,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.length()",1,0,n/a,4,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.offHeapSize()",0,0,n/a,5,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.serialize(DataOutput)",6,0,n/a,12,2,1,12,4
"org.apache.cassandra.utils.obs.OpenBitSet.serializedSize()",6,0,n/a,12,1,0,13,4
"org.apache.cassandra.utils.obs.OpenBitSet.set(int)",0,0,n/a,10,0,1,4,1
"org.apache.cassandra.utils.obs.OpenBitSet.set(long)",0,2,n/a,10,0,1,4,1
"org.apache.cassandra.utils.obs.OpenBitSet.size()",1,0,n/a,7,0,0,1,1
"org.apache.cassandra.utils.obs.OpenBitSet.trimTrailingZeros()",0,0,n/a,8,0,0,4,3
"org.apache.cassandra.utils.progress.ProgressEvent.ProgressEvent(ProgressEventType,int,int)",1,1,n/a,4,0,3,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.ProgressEvent(ProgressEventType,int,int,String)",0,20,n/a,7,0,4,4,1
"org.apache.cassandra.utils.progress.ProgressEvent.createNotification(String)",1,2,n/a,4,0,1,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.getMessage()",0,3,n/a,7,0,0,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.getProgressCount()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.getProgressPercentage()",0,2,n/a,4,0,0,1,2
"org.apache.cassandra.utils.progress.ProgressEvent.getTotal()",0,1,n/a,4,0,0,1,1
"org.apache.cassandra.utils.progress.ProgressEvent.getType()",0,3,n/a,4,0,0,1,1
"org.apache.cassandra.utils.progress.ProgressEventNotifier.addProgressListener(ProgressListener)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.progress.ProgressEventNotifier.removeProgressListener(ProgressListener)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.progress.ProgressEventNotifierSupport.addProgressListener(ProgressListener)",1,2,n/a,5,0,1,1,1
"org.apache.cassandra.utils.progress.ProgressEventNotifierSupport.fireProgressEvent(String,ProgressEvent)",1,5,n/a,7,1,2,2,2
"org.apache.cassandra.utils.progress.ProgressEventNotifierSupport.removeProgressListener(ProgressListener)",1,0,n/a,5,0,1,1,1
"org.apache.cassandra.utils.progress.ProgressListener.progress(String,ProgressEvent)",n/a,4,0,n/a,n/a,2,n/a,n/a
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleConnectionClosed(long,String)",0,1,n/a,5,0,2,0,1
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleConnectionFailed(long,String)",0,1,n/a,5,0,2,0,1
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleNotification(Notification,Object)",20,0,n/a,30,2,2,18,6
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.handleNotificationLost(long,String)",0,2,n/a,4,0,2,0,1
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener.isInterestedIn(String)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.cassandra.utils.progress.jmx.JMXProgressSupport.JMXProgressSupport(NotificationBroadcasterSupport)",0,1,n/a,4,0,1,1,1
"org.apache.cassandra.utils.progress.jmx.JMXProgressSupport.progress(String,ProgressEvent)",14,4,n/a,15,0,2,7,1
"org.apache.cassandra.utils.vint.VIntCoding.computeUnsignedVIntSize(long)",1,5,n/a,5,0,1,2,1
"org.apache.cassandra.utils.vint.VIntCoding.computeVIntSize(long)",2,5,n/a,4,0,1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.decodeZigZag64(long)",0,2,n/a,13,0,1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.encodeExtraBytesToRead(int)",1,1,n/a,5,0,1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.encodeVInt(long,int)",2,2,n/a,12,1,2,9,2
"org.apache.cassandra.utils.vint.VIntCoding.encodeZigZag64(long)",0,3,n/a,14,0,1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.firstByteValueMask(int)",0,3,n/a,6,0,1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.numberOfExtraBytesToRead(int)",1,2,n/a,7,0,1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.readUnsignedVInt(DataInput)",4,3,n/a,15,1,1,12,3
"org.apache.cassandra.utils.vint.VIntCoding.readVInt(DataInput)",2,1,n/a,3,0,1,1,1
"org.apache.cassandra.utils.vint.VIntCoding.writeUnsignedVInt(long,DataOutput)",4,3,n/a,9,1,2,5,2
"org.apache.cassandra.utils.vint.VIntCoding.writeVInt(long,DataOutput)",2,2,n/a,3,0,2,1,1

Class,CBO,CSA,CSO,CSOA,Dcy*,DIT,Inner,LCOM,LOC,NCLOC,NOC,NOIC,NOOC,OCavg,Query,RFC,WMC
"org.apache.cassandra.auth.AllowAllAuthenticator",2,1,6,7,3,0,0,6,26,26,0,0,0,"1,00",4,6,6
"org.apache.cassandra.auth.AllowAllAuthenticator.Negotiator",2,0,3,3,1,0,0,3,15,15,0,0,0,"1,00",3,3,3
"org.apache.cassandra.auth.AllowAllAuthorizer",0,0,9,9,0,0,0,9,35,35,0,0,0,"1,00",3,9,9
"org.apache.cassandra.auth.AllowAllInternodeAuthenticator",1,0,2,2,1,0,0,2,10,10,0,0,0,"1,00",1,2,2
"org.apache.cassandra.auth.AuthKeyspace",5,10,3,13,986,0,0,1,54,54,0,0,0,"1,00",2,9,3
"org.apache.cassandra.auth.AuthMigrationListener",4,0,21,21,986,1,0,3,20,17,0,15,3,"1,00",0,4,3
"org.apache.cassandra.auth.AuthenticatedUser",4,7,11,18,987,0,0,4,90,63,0,0,0,"1,18",10,12,13
"org.apache.cassandra.auth.CassandraAuthorizer",15,8,21,29,990,0,0,3,358,320,0,0,0,"2,09",8,28,48
"org.apache.cassandra.auth.CassandraRoleManager",14,14,33,47,988,0,0,7,512,426,0,0,0,"1,79",19,41,68
"org.apache.cassandra.auth.CassandraRoleManager.Role",1,4,3,7,0,0,0,0,27,27,0,0,0,"1,67",2,3,5
"org.apache.cassandra.auth.DataResource",4,7,20,27,988,0,0,1,218,168,0,0,0,"2,00",17,22,40
"org.apache.cassandra.auth.DataResource.Level",1,3,0,3,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.auth.FunctionResource",10,9,21,30,988,0,0,2,253,191,0,0,0,"2,05",18,28,43
"org.apache.cassandra.auth.FunctionResource.Level",1,3,0,3,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.auth.IAuthenticator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.auth.IAuthenticator.SaslNegotiator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.auth.IAuthorizer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,9,n/a
"org.apache.cassandra.auth.IInternodeAuthenticator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.auth.IResource",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.auth.IRoleManager",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,16,n/a
"org.apache.cassandra.auth.IRoleManager.Option",2,4,0,4,0,n/a,0,0,9,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.auth.PasswordAuthenticator",13,8,9,17,990,0,0,5,97,82,0,0,0,"1,56",7,21,14
"org.apache.cassandra.auth.PasswordAuthenticator.PlainTextSaslAuthenticator",2,3,4,7,990,0,0,1,59,46,0,0,0,"2,75",3,5,11
"org.apache.cassandra.auth.Permission",22,12,0,12,0,n/a,0,0,38,18,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.auth.PermissionDetails",0,3,5,8,0,0,0,1,50,46,0,0,0,"1,40",4,5,7
"org.apache.cassandra.auth.PermissionsCache",3,5,8,13,987,0,0,3,101,101,0,0,0,"1,36",4,15,15
"org.apache.cassandra.auth.PermissionsCacheMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.auth.Resources",1,2,3,5,2,0,0,2,57,44,0,0,0,"3,33",3,4,10
"org.apache.cassandra.auth.RoleOptions",4,1,9,10,987,0,0,1,114,71,0,0,0,"2,00",7,13,18
"org.apache.cassandra.auth.RoleResource",5,6,15,21,988,0,0,1,128,94,0,0,0,"1,60",13,16,24
"org.apache.cassandra.auth.RoleResource.Level",1,2,0,2,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.auth.Roles",1,1,2,3,987,0,0,1,31,16,0,0,0,"2,00",2,3,4
"org.apache.cassandra.auth.RolesCache",2,5,8,13,987,0,0,3,100,100,0,0,0,"1,36",4,15,15
"org.apache.cassandra.auth.RolesCacheMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.batchlog.Batch",4,5,4,9,986,0,0,3,39,27,0,0,0,"1,00",3,4,4
"org.apache.cassandra.batchlog.Batch.Serializer",10,0,8,8,986,0,1,1,60,56,0,0,0,"2,00",4,18,10
"org.apache.cassandra.batchlog.BatchRemoveVerbHandler",3,0,2,2,986,0,1,1,7,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.batchlog.BatchStoreVerbHandler",5,0,2,2,986,0,1,1,8,8,0,0,0,"1,00",0,4,1
"org.apache.cassandra.batchlog.BatchlogManager",19,8,15,23,986,0,0,4,188,172,0,0,0,"1,67",5,38,25
"org.apache.cassandra.batchlog.BatchlogManager.EndpointFilter",3,2,4,6,986,0,0,1,66,57,0,0,0,"3,00",3,5,12
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch",13,5,9,14,986,0,0,1,147,136,0,0,0,"3,00",5,20,27
"org.apache.cassandra.batchlog.BatchlogManager.ReplayingBatch.ReplayWriteResponseHandler",4,2,9,11,986,1,0,2,25,21,0,3,1,"1,33",1,6,4
"org.apache.cassandra.batchlog.BatchlogManagerMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.batchlog.LegacyBatchlogMigrator",18,1,11,12,986,0,0,2,130,128,0,0,0,"2,00",5,29,22
"org.apache.cassandra.cache.AutoSavingCache",14,7,9,16,986,0,0,2,186,165,0,0,0,"2,00",6,20,28
"org.apache.cassandra.cache.AutoSavingCache.CacheSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cache.AutoSavingCache.IStreamFactory",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cache.AutoSavingCache.Writer",17,7,11,18,986,1,0,1,130,127,0,4,0,"3,67",3,20,22
"org.apache.cassandra.cache.CacheKey",1,1,1,2,1,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.cache.CacheProvider",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.cache.ConcurrentLinkedHashCache",0,2,17,19,0,0,0,2,91,86,0,0,0,"1,00",12,17,18
"org.apache.cassandra.cache.CounterCacheKey",3,3,7,10,987,0,0,2,59,59,0,0,0,"1,86",6,10,13
"org.apache.cassandra.cache.ICache",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,13,n/a
"org.apache.cassandra.cache.IMeasurableMemory",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.cache.IRowCacheEntry",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.cassandra.cache.InstrumentingCache",3,3,16,19,16,0,0,1,80,77,0,0,0,"1,06",11,17,17
"org.apache.cassandra.cache.KeyCacheKey",9,3,5,8,986,0,0,1,39,37,0,0,0,"1,40",4,11,7
"org.apache.cassandra.cache.NopCacheProvider",1,0,1,1,1,0,0,1,7,7,0,0,0,"1,00",1,1,1
"org.apache.cassandra.cache.NopCacheProvider.NopCache",1,0,13,13,0,0,0,13,51,51,0,0,0,"1,00",9,13,13
"org.apache.cassandra.cache.OHCProvider",4,0,1,1,991,0,0,1,12,12,0,0,0,"1,00",1,3,1
"org.apache.cassandra.cache.OHCProvider.KeySerializer",6,1,3,4,7,0,0,3,46,46,0,0,0,"1,00",2,6,3
"org.apache.cassandra.cache.OHCProvider.OHCacheAdapter",1,1,14,15,0,0,0,1,60,60,0,0,0,"1,00",9,14,14
"org.apache.cassandra.cache.OHCProvider.ValueSerializer",7,1,3,4,988,0,0,1,46,46,0,0,0,"2,00",2,11,6
"org.apache.cassandra.cache.RefCountedMemory",1,4,35,39,987,1,0,3,44,39,0,19,3,"1,67",2,10,10
"org.apache.cassandra.cache.RowCacheKey",6,2,7,9,36,0,0,1,44,44,0,0,0,"1,43",4,11,10
"org.apache.cassandra.cache.RowCacheSentinel",1,2,4,6,0,0,0,0,28,25,0,0,0,"1,25",2,4,5
"org.apache.cassandra.cache.SerializingCache",4,4,19,23,9,0,0,2,215,208,0,0,0,"1,62",14,25,34
"org.apache.cassandra.cache.SerializingCacheProvider",2,0,1,1,988,0,0,1,7,7,0,0,0,"1,00",1,2,1
"org.apache.cassandra.cache.SerializingCacheProvider.RowCacheSerializer",6,0,6,6,987,0,1,1,30,29,0,0,0,"2,00",2,7,6
"org.apache.cassandra.client.RingCache",4,4,5,9,988,0,0,1,72,65,0,0,0,"2,00",3,14,10
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService",4,1,15,16,989,0,0,6,76,75,0,0,0,"1,46",11,21,19
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.FutureTask",4,5,16,21,989,1,0,4,62,62,1,8,0,"1,38",5,14,11
"org.apache.cassandra.concurrent.AbstractTracingAwareExecutorService.TraceSessionFutureTask",4,6,19,25,989,2,0,1,27,27,0,13,1,"1,00",0,8,3
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor",7,2,6,8,986,0,0,3,68,53,0,0,0,"1,43",2,7,10
"org.apache.cassandra.concurrent.DebuggableScheduledThreadPoolExecutor.UncomplainingRunnable",2,1,2,3,986,0,0,1,20,20,0,0,0,"1,00",0,3,2
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor",11,2,20,22,986,0,0,11,227,159,0,0,0,"1,62",6,25,34
"org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.TraceSessionWrapper",3,1,4,5,986,0,0,1,28,22,0,0,0,"1,00",0,6,4
"org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutor",1,0,1,1,0,0,0,0,12,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.concurrent.JMXConfigurableThreadPoolExecutorMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor",10,2,19,21,15,0,0,5,136,126,2,0,0,"1,11",5,21,21
"org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutorMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.concurrent.NamedThreadFactory",15,5,4,9,0,0,0,1,38,33,0,0,0,"1,25",1,4,5
"org.apache.cassandra.concurrent.SEPExecutor",6,10,21,31,25,0,0,2,218,188,0,0,0,"2,00",15,32,42
"org.apache.cassandra.concurrent.SEPWorker",2,7,11,18,988,0,0,1,250,188,0,0,0,"3,91",5,17,43
"org.apache.cassandra.concurrent.SEPWorker.Work",3,5,8,13,0,0,0,4,71,40,0,0,0,"1,00",6,8,8
"org.apache.cassandra.concurrent.ScheduledExecutors",19,3,0,3,0,0,0,0,22,10,0,0,0,n/a,0,0,0
"org.apache.cassandra.concurrent.SharedExecutorPool",2,8,4,12,1,0,0,2,75,36,0,0,0,"2,00",1,5,8
"org.apache.cassandra.concurrent.Stage",25,12,3,15,0,n/a,0,2,56,56,n/a,0,0,"2,00",3,4,8
"org.apache.cassandra.concurrent.StageManager",24,3,5,8,986,0,0,3,75,62,0,0,0,"1,17",4,11,7
"org.apache.cassandra.concurrent.StageManager.ExecuteOnlyExecutor",2,0,6,6,986,0,0,4,35,31,0,0,0,"1,00",3,6,6
"org.apache.cassandra.concurrent.TracingAwareExecutorService",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.config.CFMetaData",333,27,88,115,986,0,0,10,899,795,0,0,0,"1,90",83,103,169
"org.apache.cassandra.config.CFMetaData.Builder",35,13,20,33,986,0,0,3,149,149,0,0,0,"1,50",19,25,30
"org.apache.cassandra.config.CFMetaData.DroppedColumn",6,3,4,7,0,0,0,0,38,36,0,0,0,"1,50",3,4,6
"org.apache.cassandra.config.CFMetaData.Flag",2,4,0,4,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.CFMetaData.Serializer",6,0,3,3,986,0,0,2,24,24,0,0,0,"1,33",2,3,4
"org.apache.cassandra.config.ColumnDefinition",226,8,39,47,3,0,0,13,292,257,0,0,0,"1,54",35,41,63
"org.apache.cassandra.config.ColumnDefinition.ClusteringOrder",3,3,0,3,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.ColumnDefinition.Kind",12,4,1,5,0,n/a,0,1,21,11,n/a,0,0,"1,00",1,1,1
"org.apache.cassandra.config.Config",44,155,4,159,13,0,0,2,232,178,0,0,0,"1,00",2,4,4
"org.apache.cassandra.config.Config.CommitFailurePolicy",4,4,0,4,0,n/a,0,0,7,7,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.Config.CommitLogSync",4,2,0,2,0,n/a,0,0,5,5,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.Config.DiskAccessMode",6,4,0,4,0,n/a,0,0,7,7,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.Config.DiskFailurePolicy",4,5,0,5,0,n/a,0,0,8,8,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.Config.DiskOptimizationStrategy",3,2,0,2,0,n/a,0,0,5,5,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.Config.InternodeCompression",2,3,0,3,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.Config.MemtableAllocationType",1,4,0,4,0,n/a,0,0,7,7,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.Config.RequestSchedulerId",3,1,0,1,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.Config.UserFunctionTimeoutPolicy",3,3,0,3,0,n/a,0,0,6,6,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.ConfigurationLoader",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.config.DatabaseDescriptor",214,25,222,247,986,0,0,6,1.578,1.525,0,0,0,"1,62",160,239,361
"org.apache.cassandra.config.EncryptionOptions",9,9,0,9,0,0,0,0,16,16,2,0,0,n/a,0,0,0
"org.apache.cassandra.config.EncryptionOptions.ClientEncryptionOptions",11,11,0,11,1,1,0,0,5,5,0,0,0,n/a,0,0,0
"org.apache.cassandra.config.EncryptionOptions.ServerEncryptionOptions",7,10,0,10,2,1,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.cassandra.config.EncryptionOptions.ServerEncryptionOptions.InternodeEncryption",4,4,0,4,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.ParameterizedClass",5,2,5,7,0,0,0,0,30,30,0,0,0,"1,40",3,5,7
"org.apache.cassandra.config.ReadRepairDecision",2,3,0,3,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.config.RequestSchedulerOptions",2,5,0,5,0,0,0,0,11,8,0,0,0,n/a,0,0,0
"org.apache.cassandra.config.Schema",121,9,54,63,986,0,0,2,622,419,0,0,0,"1,50",25,100,81
"org.apache.cassandra.config.ViewDefinition",11,8,10,18,986,0,0,1,127,111,0,0,0,"1,20",7,12,12
"org.apache.cassandra.config.YamlConfigurationLoader",4,3,4,7,3,0,0,1,86,81,1,0,0,"2,25",3,8,9
"org.apache.cassandra.config.YamlConfigurationLoader.CustomConstructor",1,0,5,5,0,0,0,4,30,30,0,0,0,"1,00",4,5,5
"org.apache.cassandra.config.YamlConfigurationLoader.MissingPropertiesChecker",2,1,3,4,1,0,0,1,25,25,0,0,0,"1,67",1,4,5
"org.apache.cassandra.cql3.AbstractConditions",2,0,7,7,27,0,0,7,35,31,0,0,0,"1,00",7,7,7
"org.apache.cassandra.cql3.AbstractMarker",2,2,4,6,24,0,0,3,25,22,0,0,0,"1,00",2,4,4
"org.apache.cassandra.cql3.AbstractMarker.INRaw",4,1,7,8,989,1,0,1,23,17,0,2,1,"1,00",2,5,3
"org.apache.cassandra.cql3.AbstractMarker.MultiColumnRaw",1,1,4,5,1,0,0,3,22,21,0,0,0,"1,00",3,4,4
"org.apache.cassandra.cql3.AbstractMarker.Raw",4,1,4,5,987,0,0,3,32,29,1,0,0,"2,00",3,4,8
"org.apache.cassandra.cql3.AssignmentTestable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.cql3.AssignmentTestable.TestResult",3,3,3,6,1,n/a,0,1,32,30,n/a,0,0,"2,33",3,4,7
"org.apache.cassandra.cql3.Attributes",10,3,8,11,30,0,0,2,88,84,0,0,0,"2,62",6,9,21
"org.apache.cassandra.cql3.Attributes.Raw",4,2,3,5,31,0,0,1,19,19,0,0,0,"1,67",3,4,5
"org.apache.cassandra.cql3.BatchQueryOptions",5,3,9,12,989,0,0,5,40,40,2,0,0,"1,00",7,11,8
"org.apache.cassandra.cql3.BatchQueryOptions.WithPerStatementVariables",2,3,11,14,989,1,0,1,42,42,0,4,1,"1,40",2,7,7
"org.apache.cassandra.cql3.BatchQueryOptions.WithoutPerStatementVariables",1,2,9,11,989,1,0,1,11,11,0,5,0,"1,00",1,3,2
"org.apache.cassandra.cql3.CFName",9,1,3,4,0,0,0,1,17,17,0,0,0,"1,00",2,3,3
"org.apache.cassandra.cql3.CQL3Type",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cql3.CQL3Type.Collection",3,1,8,9,1,0,1,2,57,57,0,0,0,"2,17",5,6,13
"org.apache.cassandra.cql3.CQL3Type.Custom",4,1,9,10,3,0,1,2,38,38,0,0,0,"1,14",5,7,8
"org.apache.cassandra.cql3.CQL3Type.Native",25,22,6,28,1,n/a,1,2,42,42,n/a,0,0,"1,00",3,4,4
"org.apache.cassandra.cql3.CQL3Type.Raw",17,1,18,19,986,0,0,15,77,75,4,0,0,"1,06",17,25,17
"org.apache.cassandra.cql3.CQL3Type.Raw.RawCollection",5,4,20,24,986,1,0,3,79,77,0,5,4,"2,56",7,17,23
"org.apache.cassandra.cql3.CQL3Type.Raw.RawTuple",5,2,18,20,986,1,0,3,54,54,0,6,3,"2,00",5,14,14
"org.apache.cassandra.cql3.CQL3Type.Raw.RawType",5,2,16,18,986,1,0,2,25,25,0,8,1,"1,00",4,5,5
"org.apache.cassandra.cql3.CQL3Type.Raw.RawUT",5,2,19,21,986,1,0,3,55,53,0,5,4,"1,50",6,11,12
"org.apache.cassandra.cql3.CQL3Type.Tuple",2,1,9,10,1,0,1,3,47,47,0,0,0,"1,43",6,7,10
"org.apache.cassandra.cql3.CQL3Type.UserDefined",2,2,9,11,1,0,1,3,41,40,0,0,0,"1,14",6,7,8
"org.apache.cassandra.cql3.CQLStatement",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.cql3.ColumnCondition",11,5,13,18,994,0,0,10,112,96,0,0,0,"2,38",11,19,31
"org.apache.cassandra.cql3.ColumnCondition.Bound",10,2,5,7,11,0,0,3,46,41,6,0,0,"2,75",4,6,11
"org.apache.cassandra.cql3.ColumnCondition.CollectionBound",5,3,13,16,994,1,0,1,138,129,0,3,0,"4,50",7,13,36
"org.apache.cassandra.cql3.ColumnCondition.CollectionInBound",5,3,7,10,994,1,0,1,86,84,0,3,0,"10,00",1,6,20
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessBound",5,4,10,14,994,1,0,1,66,64,0,2,1,"2,40",4,13,12
"org.apache.cassandra.cql3.ColumnCondition.ElementAccessInBound",4,4,7,11,994,1,0,1,88,88,0,3,0,"11,50",1,11,23
"org.apache.cassandra.cql3.ColumnCondition.Raw",3,5,8,13,995,0,0,7,99,92,0,0,0,"2,62",7,12,21
"org.apache.cassandra.cql3.ColumnCondition.SimpleBound",3,3,7,10,994,1,0,1,18,15,0,3,0,"1,00",1,5,2
"org.apache.cassandra.cql3.ColumnCondition.SimpleInBound",3,3,7,10,994,1,0,1,31,28,0,3,0,"3,00",1,5,6
"org.apache.cassandra.cql3.ColumnConditions",5,2,8,10,998,0,0,2,76,52,0,0,0,"1,25",6,10,10
"org.apache.cassandra.cql3.ColumnConditions.Builder",1,2,3,5,998,0,0,2,44,30,0,0,0,"2,00",2,4,6
"org.apache.cassandra.cql3.ColumnIdentifier",57,7,19,26,986,0,1,5,142,128,0,0,0,"1,67",15,29,30
"org.apache.cassandra.cql3.ColumnIdentifier.ColumnIdentifierValue",3,1,11,12,987,0,2,2,38,38,0,0,0,"1,14",6,11,8
"org.apache.cassandra.cql3.ColumnIdentifier.Literal",7,2,11,13,987,0,2,2,53,51,0,0,0,"1,86",6,15,13
"org.apache.cassandra.cql3.ColumnIdentifier.Raw",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cql3.ColumnSpecification",15,4,7,11,25,0,0,1,68,59,0,0,0,"1,57",6,7,11
"org.apache.cassandra.cql3.Conditions",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,8,n/a
"org.apache.cassandra.cql3.Constants",18,4,0,4,986,0,0,0,23,19,0,0,0,"1,00",0,1,2
"org.apache.cassandra.cql3.Constants.Adder",3,0,2,2,11,0,0,1,17,17,0,0,0,"2,00",0,4,4
"org.apache.cassandra.cql3.Constants.Deleter",2,0,2,2,5,0,0,1,16,14,0,0,0,"1,50",0,2,3
"org.apache.cassandra.cql3.Constants.Literal",9,2,12,14,988,0,0,1,142,140,0,0,0,"2,58",11,16,31
"org.apache.cassandra.cql3.Constants.Marker",5,0,3,3,987,0,0,1,32,32,0,0,0,"2,00",2,5,6
"org.apache.cassandra.cql3.Constants.NullLiteral",3,0,3,3,986,0,0,2,19,19,0,0,0,"1,67",3,4,5
"org.apache.cassandra.cql3.Constants.Setter",3,0,2,2,11,0,0,1,15,15,0,0,0,"2,00",0,2,4
"org.apache.cassandra.cql3.Constants.Substracter",3,0,2,2,11,0,0,1,19,19,0,0,0,"2,50",0,4,5
"org.apache.cassandra.cql3.Constants.Type",1,8,0,8,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.cql3.Constants.Value",25,1,4,5,6,0,0,1,25,22,1,0,0,"1,00",3,5,4
"org.apache.cassandra.cql3.CustomPayloadMirroringQueryHandler",6,1,6,7,987,0,0,1,50,45,0,0,0,"1,00",6,6,6
"org.apache.cassandra.cql3.ErrorCollector",2,4,16,20,2,0,0,1,230,117,0,0,0,"1,56",10,17,25
"org.apache.cassandra.cql3.ErrorListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cql3.IfExistsCondition",2,0,2,2,997,0,0,2,13,13,0,0,0,"1,00",1,3,2
"org.apache.cassandra.cql3.IfNotExistsCondition",2,0,2,2,997,0,0,2,13,13,0,0,0,"1,00",1,3,2
"org.apache.cassandra.cql3.IndexName",3,1,4,5,0,0,0,2,24,24,0,0,0,"1,25",3,4,5
"org.apache.cassandra.cql3.Json",13,3,3,6,5,0,0,1,84,75,0,0,0,"3,33",2,5,10
"org.apache.cassandra.cql3.Json.ColumnValue",2,1,4,5,1,0,0,2,28,22,0,0,0,"1,00",3,4,4
"org.apache.cassandra.cql3.Json.DelayedColumnValue",5,2,5,7,37,0,0,4,35,31,0,0,0,"1,20",3,7,6
"org.apache.cassandra.cql3.Json.Literal",6,1,3,4,991,0,1,1,16,12,0,0,0,"1,00",1,4,2
"org.apache.cassandra.cql3.Json.Marker",7,1,4,5,992,0,1,1,21,17,0,0,0,"1,00",2,4,3
"org.apache.cassandra.cql3.Json.Prepared",6,0,1,1,4,0,0,1,7,4,2,0,0,n/a,1,1,0
"org.apache.cassandra.cql3.Json.PreparedLiteral",4,1,3,4,7,1,0,1,16,13,0,0,0,"1,50",1,3,3
"org.apache.cassandra.cql3.Json.PreparedMarker",9,3,5,8,37,1,0,2,32,28,0,0,0,"1,50",2,9,6
"org.apache.cassandra.cql3.Json.Raw",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.cql3.Json.RawDelayedColumnValue",4,2,4,6,37,0,0,2,27,24,0,0,0,"1,00",3,5,4
"org.apache.cassandra.cql3.KeyspaceElementName",0,1,5,6,0,0,0,1,48,25,0,0,0,"1,40",4,5,7
"org.apache.cassandra.cql3.Lists",7,0,4,4,986,0,0,3,22,19,0,0,0,"1,50",3,5,6
"org.apache.cassandra.cql3.Lists.Appender",6,0,3,3,987,0,0,1,36,33,0,0,0,"2,33",0,4,7
"org.apache.cassandra.cql3.Lists.DelayedValue",8,1,5,6,986,0,0,3,48,37,0,0,0,"1,80",3,7,9
"org.apache.cassandra.cql3.Lists.Discarder",4,0,3,3,987,0,0,2,32,27,0,0,0,"2,33",1,3,7
"org.apache.cassandra.cql3.Lists.DiscarderByIndex",4,0,3,3,987,0,0,2,29,29,0,0,0,"2,33",1,6,7
"org.apache.cassandra.cql3.Lists.Literal",4,1,5,6,987,0,0,1,51,50,0,0,0,"2,80",3,9,14
"org.apache.cassandra.cql3.Lists.Marker",5,0,2,2,987,0,0,1,20,17,0,0,0,"2,00",1,3,4
"org.apache.cassandra.cql3.Lists.PrecisionTime",1,4,2,6,0,0,0,1,34,25,0,0,0,"2,50",1,2,5
"org.apache.cassandra.cql3.Lists.Prepender",6,0,2,2,988,0,0,1,22,22,0,0,0,"2,00",0,4,4
"org.apache.cassandra.cql3.Lists.Setter",4,0,2,2,988,0,0,1,17,16,0,0,0,"2,00",0,3,4
"org.apache.cassandra.cql3.Lists.SetterByIndex",5,1,4,5,987,0,0,2,52,50,0,0,0,"2,75",1,7,11
"org.apache.cassandra.cql3.Lists.Value",10,1,5,6,986,0,0,2,43,40,0,0,0,"2,00",4,10,10
"org.apache.cassandra.cql3.Maps",3,0,3,3,986,0,0,2,15,12,0,0,0,"1,00",2,5,3
"org.apache.cassandra.cql3.Maps.DelayedValue",8,2,5,7,986,0,0,3,52,49,0,0,0,"2,40",3,7,12
"org.apache.cassandra.cql3.Maps.DiscarderByKey",3,0,2,2,37,0,0,1,17,17,0,0,0,"2,00",0,3,4
"org.apache.cassandra.cql3.Maps.Literal",5,1,5,6,987,0,0,1,70,68,0,0,0,"3,60",3,11,18
"org.apache.cassandra.cql3.Maps.Marker",5,0,2,2,987,0,0,1,17,17,0,0,0,"2,00",1,3,4
"org.apache.cassandra.cql3.Maps.Putter",7,0,3,3,987,0,0,1,33,32,0,0,0,"2,67",0,3,8
"org.apache.cassandra.cql3.Maps.Setter",5,0,2,2,988,0,0,1,17,16,0,0,0,"2,00",0,3,4
"org.apache.cassandra.cql3.Maps.SetterByKey",5,1,3,4,987,0,0,1,39,38,0,0,0,"2,67",0,4,8
"org.apache.cassandra.cql3.Maps.Value",8,1,4,5,986,0,0,2,51,48,0,0,0,"2,25",3,10,9
"org.apache.cassandra.cql3.MultiColumnRelation",12,4,17,21,997,0,0,7,181,139,0,0,0,"1,41",16,25,24
"org.apache.cassandra.cql3.Operation",13,2,5,7,37,0,0,3,58,25,0,0,0,"1,50",2,5,6
"org.apache.cassandra.cql3.Operation.Addition",5,1,6,7,40,0,1,2,38,38,0,0,0,"2,50",3,5,10
"org.apache.cassandra.cql3.Operation.ColumnDeletion",4,1,5,6,39,0,1,2,17,16,0,0,0,"1,00",2,3,3
"org.apache.cassandra.cql3.Operation.ElementDeletion",4,2,5,7,39,0,1,2,34,34,0,0,0,"2,67",2,4,8
"org.apache.cassandra.cql3.Operation.Prepend",5,1,6,7,40,0,1,2,25,25,0,0,0,"1,50",3,5,6
"org.apache.cassandra.cql3.Operation.RawDeletion",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cql3.Operation.RawUpdate",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cql3.Operation.SetElement",5,2,6,8,40,0,1,2,41,39,0,0,0,"2,25",3,5,9
"org.apache.cassandra.cql3.Operation.SetValue",8,1,6,7,39,0,1,2,36,34,0,0,0,"2,25",3,5,9
"org.apache.cassandra.cql3.Operation.Substraction",5,1,6,7,40,0,1,2,42,41,0,0,0,"2,50",3,5,10
"org.apache.cassandra.cql3.Operations",2,3,10,13,25,0,0,3,107,56,0,0,0,"1,40",8,11,14
"org.apache.cassandra.cql3.Operator",29,11,7,18,986,n/a,0,3,171,145,n/a,0,0,"1,93",5,17,29
"org.apache.cassandra.cql3.QueryHandler",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.cql3.QueryOptions",39,2,18,20,986,0,0,12,96,67,2,0,0,"1,08",18,22,14
"org.apache.cassandra.cql3.QueryOptions.Codec",11,0,7,7,986,0,1,1,98,95,0,0,0,"7,25",3,30,29
"org.apache.cassandra.cql3.QueryOptions.Codec.Flag",2,8,2,10,1,n/a,0,2,29,28,n/a,0,0,"2,50",2,3,5
"org.apache.cassandra.cql3.QueryOptions.DefaultQueryOptions",5,5,18,23,986,1,0,5,36,36,0,7,0,"1,00",5,6,6
"org.apache.cassandra.cql3.QueryOptions.OptionsWithColumnSpecifications",2,2,22,24,986,2,0,2,22,19,0,11,2,"1,00",2,4,3
"org.apache.cassandra.cql3.QueryOptions.OptionsWithNames",4,3,22,25,986,2,0,1,35,35,0,10,2,"2,00",2,6,6
"org.apache.cassandra.cql3.QueryOptions.QueryOptionsWrapper",5,1,19,20,986,1,0,1,34,34,2,6,1,"1,00",6,13,7
"org.apache.cassandra.cql3.QueryOptions.SpecificOptions",6,5,1,6,986,0,0,0,16,15,0,0,0,"2,00",0,1,2
"org.apache.cassandra.cql3.QueryProcessor",53,12,36,48,986,0,0,5,414,394,0,0,0,"1,73",34,43,71
"org.apache.cassandra.cql3.QueryProcessor.InternalStateInstance",1,2,1,3,0,n/a,0,0,12,11,n/a,0,0,"1,00",0,1,1
"org.apache.cassandra.cql3.QueryProcessor.MigrationSubscriber",5,0,13,13,986,0,0,1,103,101,0,0,0,"1,69",1,15,22
"org.apache.cassandra.cql3.Relation",6,1,20,21,990,0,0,8,216,97,0,0,0,"2,18",20,21,24
"org.apache.cassandra.cql3.ResultSet",11,3,11,14,986,0,0,1,119,117,0,0,0,"2,00",5,15,22
"org.apache.cassandra.cql3.ResultSet.Codec",3,0,3,3,986,0,0,1,42,33,0,0,0,"2,67",2,5,8
"org.apache.cassandra.cql3.ResultSet.Flag",6,3,2,5,1,n/a,0,2,25,24,n/a,0,0,"2,50",2,3,5
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata",4,4,5,9,26,0,0,1,59,56,0,0,0,"2,20",3,5,11
"org.apache.cassandra.cql3.ResultSet.PreparedMetadata.Codec",4,0,3,3,26,0,0,1,98,95,0,0,0,"6,67",2,6,20
"org.apache.cassandra.cql3.ResultSet.ResultMetadata",7,6,9,15,986,0,0,1,90,71,0,0,0,"1,67",4,9,15
"org.apache.cassandra.cql3.ResultSet.ResultMetadata.Codec",4,0,3,3,986,0,0,1,93,91,0,0,0,"6,33",2,9,19
"org.apache.cassandra.cql3.RoleName",9,1,4,5,0,0,0,1,21,21,0,0,0,"1,25",3,4,5
"org.apache.cassandra.cql3.Sets",2,0,2,2,0,0,0,1,11,8,0,0,0,"1,00",1,2,2
"org.apache.cassandra.cql3.Sets.Adder",8,0,3,3,987,0,0,1,36,35,0,0,0,"3,00",0,3,9
"org.apache.cassandra.cql3.Sets.DelayedValue",8,2,5,7,986,0,0,3,42,39,0,0,0,"1,80",3,7,9
"org.apache.cassandra.cql3.Sets.Discarder",5,0,2,2,987,0,0,1,21,19,0,0,0,"2,50",0,2,5
"org.apache.cassandra.cql3.Sets.ElementDiscarder",3,0,2,2,37,0,0,1,15,15,0,0,0,"1,50",0,3,3
"org.apache.cassandra.cql3.Sets.Literal",3,1,5,6,987,0,0,1,66,60,0,0,0,"3,40",3,9,17
"org.apache.cassandra.cql3.Sets.Marker",4,0,2,2,987,0,0,1,17,17,0,0,0,"2,00",1,3,4
"org.apache.cassandra.cql3.Sets.Setter",5,0,2,2,988,0,0,1,17,16,0,0,0,"2,00",0,3,4
"org.apache.cassandra.cql3.Sets.Value",7,1,4,5,986,0,0,2,41,39,0,0,0,"2,00",3,6,8
"org.apache.cassandra.cql3.SingleColumnRelation",16,4,22,26,998,0,0,2,240,199,0,0,0,"1,68",19,36,37
"org.apache.cassandra.cql3.Term",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.cql3.Term.MultiColumnRaw",4,0,4,4,25,1,0,1,4,4,0,1,0,n/a,1,1,0
"org.apache.cassandra.cql3.Term.MultiItemTerminal",2,0,12,12,24,1,1,1,4,4,0,5,0,n/a,1,1,0
"org.apache.cassandra.cql3.Term.NonTerminal",3,0,6,6,24,0,1,1,18,8,0,0,0,"2,00",1,3,2
"org.apache.cassandra.cql3.Term.Raw",6,0,3,3,24,0,0,2,32,10,1,0,0,"1,00",3,3,1
"org.apache.cassandra.cql3.Term.Terminal",7,0,11,11,23,0,1,5,38,18,1,0,0,"1,00",5,6,5
"org.apache.cassandra.cql3.Terms",1,1,1,2,24,0,0,1,17,17,0,0,0,"1,50",1,1,3
"org.apache.cassandra.cql3.TokenRelation",10,2,14,16,993,0,0,6,129,106,0,0,0,"1,29",13,22,18
"org.apache.cassandra.cql3.Tuples",2,1,3,4,0,0,0,2,27,24,0,0,0,"1,67",2,3,5
"org.apache.cassandra.cql3.Tuples.DelayedValue",6,2,8,10,26,0,0,1,56,51,0,0,0,"1,62",6,11,13
"org.apache.cassandra.cql3.Tuples.INRaw",2,0,3,3,10,0,0,1,33,30,0,0,0,"2,00",2,5,6
"org.apache.cassandra.cql3.Tuples.InMarker",4,0,2,2,9,0,0,1,18,15,0,0,0,"2,00",1,4,4
"org.apache.cassandra.cql3.Tuples.InValue",3,1,4,5,2,0,0,3,40,33,0,0,0,"1,25",3,5,5
"org.apache.cassandra.cql3.Tuples.Literal",3,1,6,7,27,0,0,1,77,73,0,0,0,"2,83",4,10,17
"org.apache.cassandra.cql3.Tuples.Marker",4,0,2,2,8,0,0,1,19,14,0,0,0,"2,00",1,4,4
"org.apache.cassandra.cql3.Tuples.Raw",2,0,3,3,9,0,0,1,34,28,0,0,0,"1,67",2,4,5
"org.apache.cassandra.cql3.Tuples.Value",2,1,4,5,0,0,0,2,23,20,0,0,0,"1,00",3,4,4
"org.apache.cassandra.cql3.TypeCast",2,2,5,7,24,0,0,1,36,36,0,0,0,"1,80",4,6,9
"org.apache.cassandra.cql3.UTName",0,2,7,9,0,0,0,2,35,35,0,0,0,"1,29",5,7,9
"org.apache.cassandra.cql3.UntypedResultSet",37,0,7,7,986,0,0,6,24,22,3,0,0,"1,00",7,10,4
"org.apache.cassandra.cql3.UntypedResultSet.FromPager",7,4,9,13,986,1,0,3,47,47,0,1,0,"1,33",4,6,8
"org.apache.cassandra.cql3.UntypedResultSet.FromResultList",3,1,9,10,986,1,0,2,35,35,0,1,0,"1,33",4,6,8
"org.apache.cassandra.cql3.UntypedResultSet.FromResultSet",3,1,9,10,986,1,0,1,35,35,0,1,0,"1,33",4,6,8
"org.apache.cassandra.cql3.UntypedResultSet.Row",31,2,26,28,986,0,0,3,141,140,0,0,0,"1,50",24,32,39
"org.apache.cassandra.cql3.UpdateParameters",8,11,17,28,987,0,0,2,150,128,0,0,0,"1,59",6,30,27
"org.apache.cassandra.cql3.UserTypes",3,0,2,2,36,0,0,1,15,12,0,0,0,"1,00",1,4,2
"org.apache.cassandra.cql3.UserTypes.DelayedValue",5,2,7,9,26,0,0,1,48,46,0,0,0,"1,71",5,10,12
"org.apache.cassandra.cql3.UserTypes.Literal",5,1,5,6,38,0,0,1,81,80,0,0,0,"3,60",3,12,18
"org.apache.cassandra.cql3.VariableSpecifications",3,3,7,10,987,0,0,2,69,57,0,0,0,"1,86",5,10,13
"org.apache.cassandra.cql3.WhereClause",2,3,3,6,989,0,0,2,19,19,0,0,0,"1,00",2,3,3
"org.apache.cassandra.cql3.WhereClause.Builder",2,2,3,5,989,0,0,3,19,19,0,0,0,"1,00",3,4,3
"org.apache.cassandra.cql3.functions.AbstractFunction",4,3,10,13,26,0,0,5,77,72,0,0,0,"1,60",9,14,16
"org.apache.cassandra.cql3.functions.AggregateFcts",3,17,5,22,2,0,0,1,696,614,0,0,0,"1,36",5,7,116
"org.apache.cassandra.cql3.functions.AggregateFunction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.cql3.functions.AggregateFunction.Aggregate",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.cql3.functions.BytesConversionFcts",8,2,3,5,37,0,0,1,69,65,0,0,0,"1,43",3,6,10
"org.apache.cassandra.cql3.functions.FromJsonFct",4,2,3,5,987,0,0,2,42,42,0,0,0,"2,00",2,6,6
"org.apache.cassandra.cql3.functions.Function",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.cql3.functions.FunctionCall",5,2,8,10,9,0,0,1,71,70,0,0,0,"2,12",6,9,17
"org.apache.cassandra.cql3.functions.FunctionCall.Raw",2,2,4,6,10,0,0,1,65,56,0,0,0,"3,00",3,6,12
"org.apache.cassandra.cql3.functions.FunctionName",11,2,8,10,986,0,0,1,49,49,0,0,0,"1,38",7,8,11
"org.apache.cassandra.cql3.functions.FunctionResolver",3,1,6,7,987,0,0,1,151,123,0,0,0,"4,67",4,9,28
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction",8,12,9,21,989,0,0,5,309,288,0,0,0,"4,00",8,15,40
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjCompilationUnit",3,3,13,16,989,0,0,4,152,146,0,0,0,"2,38",10,14,31
"org.apache.cassandra.cql3.functions.JavaBasedUDFunction.EcjTargetClassLoader",3,1,5,6,989,0,0,2,34,27,0,0,0,"1,20",3,5,6
"org.apache.cassandra.cql3.functions.JavaUDF",16,2,11,13,0,0,0,10,67,54,16,0,0,"1,00",10,11,10
"org.apache.cassandra.cql3.functions.NativeAggregateFunction",1,0,2,2,24,0,0,1,14,11,0,0,0,"1,00",1,2,2
"org.apache.cassandra.cql3.functions.NativeFunction",1,0,2,2,24,0,0,1,14,11,0,0,0,"1,00",1,2,2
"org.apache.cassandra.cql3.functions.NativeScalarFunction",1,0,3,3,24,0,0,2,18,15,0,0,0,"1,00",2,3,3
"org.apache.cassandra.cql3.functions.ScalarFunction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cql3.functions.ScriptBasedUDFunction",5,6,3,9,987,0,0,2,196,178,0,0,0,"7,75",2,5,31
"org.apache.cassandra.cql3.functions.SecurityThreadGroup",1,2,3,5,1,0,0,2,22,19,0,0,0,"1,00",1,4,3
"org.apache.cassandra.cql3.functions.SecurityThreadGroup.ThreadInitializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.cql3.functions.ThreadAwareSecurityManager",2,6,8,14,0,0,0,2,150,119,0,0,0,"2,00",1,8,28
"org.apache.cassandra.cql3.functions.TimeFcts",2,13,1,14,7,0,0,1,185,156,0,0,0,"2,15",1,1,28
"org.apache.cassandra.cql3.functions.ToJsonFct",4,2,3,5,34,0,0,2,30,30,0,0,0,"2,00",2,5,6
"org.apache.cassandra.cql3.functions.TokenFct",6,1,3,4,989,0,0,2,29,29,0,0,0,"2,00",2,12,6
"org.apache.cassandra.cql3.functions.UDAggregate",8,5,15,20,986,0,0,6,180,176,1,0,0,"1,58",14,17,30
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier",3,5,4,9,2,0,0,3,92,83,0,0,0,"1,88",3,4,15
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ConstructorVisitor",1,1,4,5,2,0,0,1,30,30,0,0,0,"1,50",0,4,6
"org.apache.cassandra.cql3.functions.UDFByteCodeVerifier.ExecuteImplVisitor",1,1,3,4,2,0,0,1,37,37,0,0,0,"2,67",0,3,8
"org.apache.cassandra.cql3.functions.UDFExecutorService",3,3,22,25,987,1,0,2,24,19,0,11,0,"1,00",0,5,3
"org.apache.cassandra.cql3.functions.UDFunction",21,11,26,37,986,0,0,9,415,365,1,0,0,"2,08",21,41,54
"org.apache.cassandra.cql3.functions.UDFunction.ThreadIdAndCpuTime",1,2,2,4,986,0,0,1,20,15,0,0,0,"1,00",0,2,2
"org.apache.cassandra.cql3.functions.UDFunction.UDFClassLoader",1,1,5,6,986,0,0,3,31,30,0,0,0,"1,60",5,6,8
"org.apache.cassandra.cql3.functions.UDHelper",6,2,8,10,987,0,0,2,119,96,0,0,0,"2,38",8,11,19
"org.apache.cassandra.cql3.functions.UuidFcts",2,1,1,2,29,0,0,1,14,14,0,0,0,"1,00",1,1,2
"org.apache.cassandra.cql3.restrictions.AbstractPrimaryKeyRestrictions",4,1,4,5,988,0,0,3,29,23,0,0,0,"1,00",3,4,4
"org.apache.cassandra.cql3.restrictions.AbstractRestriction",3,0,10,10,988,0,0,10,56,53,0,0,0,"1,00",10,10,10
"org.apache.cassandra.cql3.restrictions.CustomIndexExpression",5,4,3,7,987,0,0,1,28,28,0,0,0,"1,00",0,5,3
"org.apache.cassandra.cql3.restrictions.ForwardingPrimaryKeyRestrictions",10,0,25,25,988,0,0,1,133,124,0,0,0,"1,00",24,26,24
"org.apache.cassandra.cql3.restrictions.IndexRestrictions",4,7,9,16,988,0,0,4,46,46,0,0,0,"1,00",7,11,9
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction",8,1,10,11,987,0,0,4,80,61,4,0,0,"1,62",9,11,13
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.EQRestriction",9,2,17,19,989,1,0,2,56,56,0,7,0,"1,57",5,13,11
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.INRestriction",10,1,17,18,989,1,0,3,53,50,2,7,0,"1,67",5,15,10
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithMarker",6,2,21,23,990,2,0,2,31,27,0,12,0,"1,00",3,6,4
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.InRestrictionWithValues",5,2,21,23,990,2,0,1,34,30,0,12,0,"1,25",3,5,5
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.NotNullRestriction",8,1,18,19,989,1,0,6,47,47,0,7,0,"1,25",6,11,10
"org.apache.cassandra.cql3.restrictions.MultiColumnRestriction.SliceRestriction",12,2,23,25,989,1,0,4,109,101,0,7,0,"1,54",10,21,20
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictionSet",10,6,24,30,987,0,0,9,240,211,0,0,0,"1,96",21,31,47
"org.apache.cassandra.cql3.restrictions.PrimaryKeyRestrictions",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.cql3.restrictions.Restriction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,18,n/a
"org.apache.cassandra.cql3.restrictions.RestrictionSet",7,2,18,20,990,0,0,1,204,143,0,0,0,"1,80",15,21,36
"org.apache.cassandra.cql3.restrictions.Restrictions",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction",11,1,10,11,987,0,0,3,69,47,5,0,0,"1,43",9,11,10
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.ContainsRestriction",11,5,30,35,989,1,0,8,150,135,0,5,1,"1,40",15,24,28
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.EQRestriction",9,2,19,21,989,1,0,2,54,54,0,6,0,"1,00",7,15,9
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.INRestriction",10,1,17,18,989,1,0,2,40,40,2,6,0,"1,00",5,14,6
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithMarker",7,2,22,24,990,2,0,2,33,33,0,11,0,"1,00",4,6,5
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.InRestrictionWithValues",6,2,22,24,990,2,0,1,32,32,0,11,0,"1,20",4,6,6
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.IsNotNullRestriction",9,1,19,20,989,1,0,5,49,49,0,6,0,"1,00",7,11,9
"org.apache.cassandra.cql3.restrictions.SingleColumnRestriction.SliceRestriction",10,2,23,25,989,1,0,3,81,81,0,6,0,"1,15",10,17,15
"org.apache.cassandra.cql3.restrictions.StatementRestrictions",27,10,36,46,986,0,0,2,621,415,0,0,0,"2,81",28,67,101
"org.apache.cassandra.cql3.restrictions.TermSlice",6,2,10,12,987,0,0,2,139,79,0,0,0,"2,40",9,13,24
"org.apache.cassandra.cql3.restrictions.TokenFilter",5,3,16,19,987,0,0,2,169,120,0,0,0,"1,62",15,18,26
"org.apache.cassandra.cql3.restrictions.TokenRestriction",12,2,14,16,988,0,0,8,101,74,2,0,0,"1,15",12,16,15
"org.apache.cassandra.cql3.restrictions.TokenRestriction.EQRestriction",8,3,19,22,989,1,0,3,30,30,0,11,0,"1,00",4,9,5
"org.apache.cassandra.cql3.restrictions.TokenRestriction.SliceRestriction",9,3,24,27,989,1,0,3,65,65,0,11,0,"1,30",8,12,13
"org.apache.cassandra.cql3.selection.AbstractFunctionSelector",6,3,4,7,31,0,0,2,87,80,0,0,0,"1,50",3,8,18
"org.apache.cassandra.cql3.selection.AggregateFunctionSelector",5,1,5,6,989,0,0,2,33,32,0,0,0,"1,20",2,8,6
"org.apache.cassandra.cql3.selection.FieldSelector",7,3,8,11,987,0,0,3,69,69,0,0,0,"1,15",5,10,15
"org.apache.cassandra.cql3.selection.RawSelector",4,2,3,5,986,0,0,1,30,24,0,0,0,"1,00",2,3,4
"org.apache.cassandra.cql3.selection.ScalarFunctionSelector",4,0,5,5,988,0,0,4,35,34,0,0,0,"1,60",2,5,8
"org.apache.cassandra.cql3.selection.Selectable",8,0,2,2,986,0,0,2,15,15,3,0,0,"2,00",2,2,2
"org.apache.cassandra.cql3.selection.Selectable.Raw",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection",8,2,4,6,987,1,0,1,37,37,0,0,0,"2,00",2,7,6
"org.apache.cassandra.cql3.selection.Selectable.WithFieldSelection.Raw",5,2,5,7,988,0,1,2,18,18,0,0,0,"1,00",2,6,3
"org.apache.cassandra.cql3.selection.Selectable.WithFunction",5,2,4,6,987,1,0,1,38,36,0,0,0,"2,00",2,4,6
"org.apache.cassandra.cql3.selection.Selectable.WithFunction.Raw",5,2,5,7,988,0,1,2,21,21,0,0,0,"1,33",2,5,4
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL",6,2,4,6,987,1,0,1,31,31,0,0,0,"3,00",2,7,9
"org.apache.cassandra.cql3.selection.Selectable.WritetimeOrTTL.Raw",5,2,5,7,988,0,1,2,18,18,0,0,0,"1,00",2,5,3
"org.apache.cassandra.cql3.selection.Selection",13,7,21,28,986,0,0,9,192,159,2,0,0,"1,80",20,30,36
"org.apache.cassandra.cql3.selection.Selection.ResultSetBuilder",18,6,9,15,986,0,0,1,119,106,0,0,0,"3,11",5,25,28
"org.apache.cassandra.cql3.selection.Selection.SelectionWithProcessing",7,7,22,29,986,1,0,1,71,71,0,10,3,"1,60",5,9,16
"org.apache.cassandra.cql3.selection.Selection.Selectors",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.cql3.selection.Selection.SimpleSelection",6,7,21,28,986,1,0,3,54,48,0,12,1,"1,00",3,6,9
"org.apache.cassandra.cql3.selection.SelectionColumnMapping",2,2,10,12,29,0,0,3,84,74,0,0,0,"1,40",9,10,14
"org.apache.cassandra.cql3.selection.SelectionColumns",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.cql3.selection.Selector",8,0,7,7,986,0,1,5,60,24,0,0,0,"3,00",4,10,6
"org.apache.cassandra.cql3.selection.Selector.Factory",8,0,10,10,986,0,0,8,96,34,0,0,0,"1,00",9,12,6
"org.apache.cassandra.cql3.selection.SelectorFactories",6,4,13,17,987,0,0,5,166,95,0,0,0,"1,33",11,17,20
"org.apache.cassandra.cql3.selection.SimpleSelector",6,5,7,12,986,0,0,3,74,74,0,0,0,"1,08",4,7,13
"org.apache.cassandra.cql3.selection.WritetimeOrTTLSelector",7,5,7,12,987,0,0,1,78,78,0,0,0,"1,54",4,9,20
"org.apache.cassandra.cql3.statements.AlterKeyspaceStatement",10,2,6,8,987,0,0,1,55,51,0,0,0,"2,00",3,12,12
"org.apache.cassandra.cql3.statements.AlterRoleStatement",5,2,4,6,988,0,0,1,53,49,0,0,0,"3,25",1,8,13
"org.apache.cassandra.cql3.statements.AlterTableStatement",25,6,7,13,988,0,0,4,304,282,0,0,0,"9,43",3,26,66
"org.apache.cassandra.cql3.statements.AlterTableStatement.Type",1,5,0,5,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.cql3.statements.AlterTypeStatement",10,1,15,16,989,0,0,6,184,171,2,0,0,"3,43",11,24,48
"org.apache.cassandra.cql3.statements.AlterTypeStatement.AddOrAlter",1,4,13,17,989,1,0,1,45,45,0,6,0,"2,25",3,7,9
"org.apache.cassandra.cql3.statements.AlterTypeStatement.Renames",1,2,11,13,989,1,0,1,26,26,0,6,0,"2,00",1,4,4
"org.apache.cassandra.cql3.statements.AlterViewStatement",17,1,6,7,987,0,0,4,47,46,0,0,0,"1,67",3,14,10
"org.apache.cassandra.cql3.statements.AuthenticationStatement",10,0,12,12,989,0,1,5,37,35,0,0,0,"1,00",5,9,5
"org.apache.cassandra.cql3.statements.AuthorizationStatement",10,0,12,12,990,0,1,5,33,32,0,0,0,"1,40",6,12,7
"org.apache.cassandra.cql3.statements.BatchStatement",23,12,23,35,986,0,0,3,355,330,0,0,0,"3,04",16,33,73
"org.apache.cassandra.cql3.statements.BatchStatement.MultiTableColumnsBuilder",2,1,2,3,986,0,0,1,21,21,0,0,0,"2,00",1,2,4
"org.apache.cassandra.cql3.statements.BatchStatement.Parsed",2,3,3,6,987,0,0,1,49,47,0,0,0,"2,67",1,5,8
"org.apache.cassandra.cql3.statements.BatchStatement.Type",7,3,0,3,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.cql3.statements.Bound",19,3,4,7,0,n/a,0,1,21,21,n/a,0,0,"1,25",3,4,5
"org.apache.cassandra.cql3.statements.CFProperties",3,3,4,7,987,0,0,3,26,26,0,0,0,"1,50",1,4,6
"org.apache.cassandra.cql3.statements.CFStatement",5,1,5,6,986,0,0,1,36,29,0,0,0,"1,40",2,7,7
"org.apache.cassandra.cql3.statements.CQL3CasRequest",16,9,13,22,996,0,1,1,131,113,0,0,0,"2,50",5,21,25
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ColumnsConditions",5,2,5,7,988,1,0,1,27,27,0,0,0,"2,33",1,5,7
"org.apache.cassandra.cql3.statements.CQL3CasRequest.ExistCondition",3,1,4,5,988,1,0,1,11,11,0,0,0,"1,00",1,3,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.NotExistCondition",3,1,4,5,988,1,0,1,11,11,0,0,0,"1,00",1,3,2
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowCondition",6,1,2,3,987,0,0,1,9,9,3,0,0,"1,00",1,2,1
"org.apache.cassandra.cql3.statements.CQL3CasRequest.RowUpdate",5,4,2,6,996,0,0,1,26,20,0,0,0,"1,50",0,3,3
"org.apache.cassandra.cql3.statements.CreateAggregateStatement",11,15,11,26,987,0,0,1,184,177,0,0,0,"3,55",6,22,39
"org.apache.cassandra.cql3.statements.CreateFunctionStatement",15,13,9,22,987,0,0,1,130,125,0,0,0,"2,89",4,24,26
"org.apache.cassandra.cql3.statements.CreateIndexStatement",22,5,10,15,988,0,0,3,170,160,0,0,0,"4,10",2,30,41
"org.apache.cassandra.cql3.statements.CreateKeyspaceStatement",9,3,7,10,987,0,0,2,96,77,0,0,0,"1,71",3,12,12
"org.apache.cassandra.cql3.statements.CreateRoleStatement",4,3,5,8,988,0,0,1,67,54,0,0,0,"2,20",1,10,11
"org.apache.cassandra.cql3.statements.CreateTableStatement",11,12,9,21,986,0,0,5,116,102,0,0,0,"2,00",5,13,18
"org.apache.cassandra.cql3.statements.CreateTableStatement.RawStatement",6,7,7,14,986,0,0,1,177,158,0,0,0,"6,57",3,8,46
"org.apache.cassandra.cql3.statements.CreateTriggerStatement",17,4,5,9,987,0,0,3,52,52,0,0,0,"1,60",2,19,8
"org.apache.cassandra.cql3.statements.CreateTypeStatement",11,4,10,14,987,0,0,1,84,83,0,0,0,"2,10",4,16,21
"org.apache.cassandra.cql3.statements.CreateViewStatement",30,7,7,14,994,0,0,3,238,218,0,0,0,"6,43",3,34,45
"org.apache.cassandra.cql3.statements.CreateViewStatement.AddColumn",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.cql3.statements.DeleteStatement",8,0,3,3,987,0,0,2,68,62,0,0,0,"3,33",0,5,10
"org.apache.cassandra.cql3.statements.DeleteStatement.Parsed",6,2,2,4,988,0,0,1,50,48,0,0,0,"2,00",1,6,4
"org.apache.cassandra.cql3.statements.DropAggregateStatement",15,5,7,12,987,0,0,2,102,95,0,0,0,"3,00",3,22,21
"org.apache.cassandra.cql3.statements.DropFunctionStatement",17,6,9,15,989,0,0,1,131,125,0,0,0,"2,67",5,25,24
"org.apache.cassandra.cql3.statements.DropIndexStatement",16,3,8,11,989,0,0,2,69,66,0,0,0,"2,00",5,20,16
"org.apache.cassandra.cql3.statements.DropKeyspaceStatement",11,2,6,8,987,0,0,1,42,42,0,0,0,"1,17",3,10,7
"org.apache.cassandra.cql3.statements.DropRoleStatement",4,2,4,6,988,0,0,1,41,36,0,0,0,"2,00",1,9,8
"org.apache.cassandra.cql3.statements.DropTableStatement",15,1,5,6,987,0,0,3,68,67,0,0,0,"2,60",2,12,13
"org.apache.cassandra.cql3.statements.DropTriggerStatement",15,3,5,8,987,0,0,4,40,40,0,0,0,"1,40",2,15,7
"org.apache.cassandra.cql3.statements.DropTypeStatement",9,2,8,10,987,0,0,1,104,97,0,0,0,"4,00",4,15,32
"org.apache.cassandra.cql3.statements.DropViewStatement",13,1,5,6,987,0,0,4,54,36,0,0,0,"1,40",2,9,7
"org.apache.cassandra.cql3.statements.GrantPermissionsStatement",8,0,2,2,989,0,0,1,12,12,0,0,0,"1,00",1,4,2
"org.apache.cassandra.cql3.statements.GrantRoleStatement",6,0,2,2,988,0,0,1,12,12,0,0,0,"1,00",1,4,2
"org.apache.cassandra.cql3.statements.IndexPropDefs",3,5,3,8,3,0,0,1,39,39,0,0,0,"3,00",2,4,9
"org.apache.cassandra.cql3.statements.IndexTarget",14,8,2,10,986,0,0,1,34,23,0,0,0,"1,50",1,6,3
"org.apache.cassandra.cql3.statements.IndexTarget.Raw",7,2,7,9,987,0,0,4,44,39,0,0,0,"1,29",6,11,9
"org.apache.cassandra.cql3.statements.IndexTarget.Type",11,5,2,7,0,n/a,0,1,30,30,n/a,0,0,"6,50",2,2,13
"org.apache.cassandra.cql3.statements.KeyspaceAttributes",3,2,6,8,988,0,0,2,47,47,0,0,0,"1,50",5,11,9
"org.apache.cassandra.cql3.statements.ListPermissionsStatement",9,7,6,13,987,0,0,2,85,82,0,0,0,"2,33",3,13,14
"org.apache.cassandra.cql3.statements.ListRolesStatement",8,6,7,13,989,0,0,2,78,75,0,0,0,"2,14",3,14,15
"org.apache.cassandra.cql3.statements.ListUsersStatement",8,3,1,4,989,0,0,1,23,22,0,0,0,"3,00",1,7,3
"org.apache.cassandra.cql3.statements.ModificationStatement",28,13,51,64,989,0,0,2,563,520,0,0,0,"1,92",44,82,94
"org.apache.cassandra.cql3.statements.ModificationStatement.Parsed",8,5,8,13,990,0,0,3,127,94,0,0,0,"1,86",7,16,13
"org.apache.cassandra.cql3.statements.ParsedStatement",3,1,5,6,26,0,0,3,22,21,0,0,0,"1,00",3,5,4
"org.apache.cassandra.cql3.statements.ParsedStatement.Prepared",11,3,3,6,0,0,0,0,20,20,0,0,0,"1,00",0,3,3
"org.apache.cassandra.cql3.statements.PermissionsManagementStatement",7,3,3,6,988,0,0,1,37,32,0,0,0,"2,33",0,8,7
"org.apache.cassandra.cql3.statements.PropertyDefinitions",1,2,11,13,1,0,0,1,104,101,0,0,0,"2,18",8,12,24
"org.apache.cassandra.cql3.statements.RequestValidations",23,0,12,12,7,0,0,3,168,68,0,0,0,"1,25",4,13,15
"org.apache.cassandra.cql3.statements.RevokePermissionsStatement",8,0,2,2,989,0,0,1,12,12,0,0,0,"1,00",1,4,2
"org.apache.cassandra.cql3.statements.RevokeRoleStatement",6,0,2,2,988,0,0,1,12,12,0,0,0,"1,00",1,4,2
"org.apache.cassandra.cql3.statements.RoleManagementStatement",8,2,3,5,990,0,0,1,22,22,0,0,0,"1,67",0,9,5
"org.apache.cassandra.cql3.statements.SchemaAlteringStatement",14,1,16,17,988,0,1,4,85,61,0,0,0,"1,75",6,14,14
"org.apache.cassandra.cql3.statements.SelectStatement",43,13,35,48,986,0,0,4,519,443,0,0,0,"2,49",29,91,87
"org.apache.cassandra.cql3.statements.SelectStatement.CompositeComparator",1,2,2,4,0,0,0,1,27,24,0,0,0,"2,00",1,2,4
"org.apache.cassandra.cql3.statements.SelectStatement.Pager",7,1,6,7,986,0,0,4,26,25,2,0,0,"1,00",5,10,5
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.InternalPager",3,2,6,8,986,1,0,1,13,13,0,2,0,"1,00",1,4,2
"org.apache.cassandra.cql3.statements.SelectStatement.Pager.NormalPager",4,3,6,9,986,1,0,1,15,15,0,2,0,"1,00",1,4,2
"org.apache.cassandra.cql3.statements.SelectStatement.Parameters",2,4,1,5,0,0,0,0,18,17,0,0,0,"1,00",0,1,1
"org.apache.cassandra.cql3.statements.SelectStatement.RawStatement",15,4,15,19,986,0,0,1,230,208,0,0,0,"2,31",10,41,37
"org.apache.cassandra.cql3.statements.SelectStatement.SingleColumnComparator",1,2,2,4,0,0,0,1,17,14,0,0,0,"1,00",1,2,2
"org.apache.cassandra.cql3.statements.StatementType",2,4,8,12,0,n/a,0,8,108,72,n/a,0,0,"1,00",8,8,13
"org.apache.cassandra.cql3.statements.TableAttributes",2,2,10,12,2,0,0,1,122,120,0,0,0,"2,80",9,13,28
"org.apache.cassandra.cql3.statements.TruncateStatement",10,0,7,7,987,0,0,6,51,51,0,0,0,"1,14",4,14,8
"org.apache.cassandra.cql3.statements.UpdateStatement",12,1,4,5,989,0,0,3,63,51,0,0,0,"2,50",1,5,10
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsert",5,2,2,4,990,0,0,1,73,63,0,0,0,"2,50",1,9,5
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedInsertJson",5,1,2,3,990,0,0,1,59,56,0,0,0,"2,50",1,9,5
"org.apache.cassandra.cql3.statements.UpdateStatement.ParsedUpdate",5,2,2,4,990,0,0,1,55,44,0,0,0,"1,50",1,4,3
"org.apache.cassandra.cql3.statements.UpdatesCollector",2,3,6,9,987,0,0,1,104,64,0,0,0,"2,67",4,8,16
"org.apache.cassandra.cql3.statements.UseStatement",8,1,13,14,987,0,1,5,34,32,0,0,0,"1,00",4,10,7
"org.apache.cassandra.db.AbstractClusteringPrefix",3,4,12,16,987,0,0,2,81,81,0,0,0,"1,75",10,16,21
"org.apache.cassandra.db.AbstractReadCommandBuilder",10,10,19,29,986,0,0,4,151,150,3,0,0,"1,89",18,24,34
"org.apache.cassandra.db.AbstractReadCommandBuilder.PartitionRangeBuilder",3,14,26,40,987,1,0,2,72,72,0,14,0,"1,86",6,14,13
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionBuilder",1,11,21,32,987,1,0,1,14,14,0,14,0,"1,00",1,6,2
"org.apache.cassandra.db.AbstractReadCommandBuilder.SinglePartitionSliceBuilder",2,12,23,35,986,1,0,1,26,26,0,13,1,"1,00",3,7,4
"org.apache.cassandra.db.BlacklistedDirectories",2,5,8,13,986,0,0,1,92,67,0,0,0,"1,62",7,9,13
"org.apache.cassandra.db.BlacklistedDirectoriesMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.db.BufferDecoratedKey",7,1,2,3,12,0,0,1,14,14,0,0,0,"1,00",1,2,2
"org.apache.cassandra.db.CBuilder",3,1,13,14,25,0,0,13,73,70,2,0,0,"1,00",13,14,13
"org.apache.cassandra.db.CBuilder.ArrayBackedBuilder",3,4,26,30,25,1,0,1,96,89,0,0,0,"1,57",13,15,22
"org.apache.cassandra.db.CachedHashDecoratedKey",5,3,2,5,12,0,0,1,27,27,0,0,0,"1,50",0,2,3
"org.apache.cassandra.db.ClockAndCount",4,4,7,11,3,0,1,2,40,40,0,0,0,"1,33",5,7,8
"org.apache.cassandra.db.Clusterable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.db.Clustering",24,3,5,8,986,0,0,3,85,67,2,0,0,"1,89",4,7,17
"org.apache.cassandra.db.Clustering.Serializer",3,0,5,5,986,0,0,3,49,43,0,0,0,"1,20",4,6,6
"org.apache.cassandra.db.ClusteringComparator",11,5,18,23,987,0,0,5,195,140,0,0,0,"2,22",15,21,40
"org.apache.cassandra.db.ClusteringPrefix",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.db.ClusteringPrefix.Deserializer",6,9,9,18,990,0,0,1,112,97,0,0,0,"3,00",6,13,27
"org.apache.cassandra.db.ClusteringPrefix.Kind",4,10,11,21,0,n/a,0,2,130,105,n/a,0,0,"2,91",10,11,32
"org.apache.cassandra.db.ClusteringPrefix.Serializer",7,0,9,9,989,0,0,3,130,112,0,0,0,"2,78",7,15,25
"org.apache.cassandra.db.ColumnFamilyStore",143,32,130,162,986,0,0,11,1.679,1.410,0,0,0,"1,96",79,185,268
"org.apache.cassandra.db.ColumnFamilyStore.Flush",7,4,3,7,986,0,0,1,110,74,0,0,0,"2,75",0,11,11
"org.apache.cassandra.db.ColumnFamilyStore.FlushLargestColumnFamily",5,0,1,1,986,0,0,1,52,43,0,0,0,"5,00",0,8,5
"org.apache.cassandra.db.ColumnFamilyStore.PostFlush",7,4,2,6,986,0,0,1,46,32,0,0,0,"2,00",0,5,4
"org.apache.cassandra.db.ColumnFamilyStore.RefViewFragment",4,3,4,7,7,1,0,1,17,17,0,0,0,"1,00",0,5,3
"org.apache.cassandra.db.ColumnFamilyStore.ViewFragment",3,2,1,3,0,0,0,0,10,10,1,0,0,"1,00",0,1,1
"org.apache.cassandra.db.ColumnFamilyStoreMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,26,n/a
"org.apache.cassandra.db.ColumnIndex",4,3,3,6,997,0,0,2,23,23,0,0,0,"1,00",2,7,3
"org.apache.cassandra.db.ColumnIndex.Builder",5,13,7,20,997,0,0,1,95,86,0,0,0,"2,14",3,11,15
"org.apache.cassandra.db.Columns",13,5,28,33,988,0,0,3,322,176,0,0,0,"1,61",25,51,45
"org.apache.cassandra.db.Columns.Serializer",10,0,10,10,988,0,0,5,242,211,0,0,0,"4,60",7,29,46
"org.apache.cassandra.db.CompactTables",7,2,7,9,988,0,0,4,90,44,0,0,0,"2,00",6,9,14
"org.apache.cassandra.db.CompactTables.DefaultNames",2,7,4,11,0,0,0,1,46,44,0,0,0,"3,00",3,4,12
"org.apache.cassandra.db.Conflicts",4,0,4,4,988,0,0,2,45,41,0,0,0,"3,50",3,6,14
"org.apache.cassandra.db.Conflicts.Resolution",3,3,0,3,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.ConsistencyLevel",46,15,22,37,986,n/a,0,2,323,307,n/a,0,0,"3,91",13,32,86
"org.apache.cassandra.db.CounterMutation",12,4,20,24,988,0,0,2,231,207,0,0,0,"1,96",14,32,45
"org.apache.cassandra.db.CounterMutation.CounterMutationSerializer",4,0,6,6,988,0,1,2,19,19,0,0,0,"1,00",2,4,3
"org.apache.cassandra.db.CounterMutationVerbHandler",6,1,2,3,987,0,1,1,24,17,0,0,0,"1,00",0,4,2
"org.apache.cassandra.db.DataRange",7,3,21,24,989,0,0,4,256,134,1,0,0,"1,62",18,26,34
"org.apache.cassandra.db.DataRange.Paging",3,5,22,27,989,1,0,3,70,56,0,8,5,"1,43",6,11,10
"org.apache.cassandra.db.DataRange.Serializer",5,0,3,3,989,0,0,1,43,43,0,0,0,"2,00",2,5,6
"org.apache.cassandra.db.DecoratedKey",57,2,14,16,33,0,1,3,93,81,0,0,0,"1,62",11,20,21
"org.apache.cassandra.db.DefinitionsUpdateVerbHandler",6,1,2,3,987,0,1,1,21,15,0,0,0,"1,00",0,2,2
"org.apache.cassandra.db.DeletionInfo",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,13,n/a
"org.apache.cassandra.db.DeletionPurger",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.db.DeletionTime",19,5,16,21,986,0,1,4,105,84,0,0,0,"1,33",13,18,20
"org.apache.cassandra.db.DeletionTime.Serializer",4,0,7,7,986,0,1,4,25,25,0,0,0,"1,25",2,8,5
"org.apache.cassandra.db.Directories",42,8,33,41,986,0,0,4,545,437,0,0,0,"3,00",27,48,105
"org.apache.cassandra.db.Directories.DataDirectory",9,1,4,5,0,0,0,1,25,25,5,0,0,"1,50",3,4,6
"org.apache.cassandra.db.Directories.DataDirectoryCandidate",2,3,3,6,1,0,0,1,27,26,0,0,0,"1,67",1,4,5
"org.apache.cassandra.db.Directories.FileAction",1,7,2,9,0,n/a,0,1,35,35,n/a,0,0,"4,50",1,2,9
"org.apache.cassandra.db.Directories.FileType",5,3,0,3,0,n/a,0,0,11,6,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.Directories.OnTxnErr",15,2,0,2,0,n/a,0,0,11,5,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.Directories.SSTableLister",12,8,9,17,986,0,0,1,133,122,0,0,0,"3,44",7,12,31
"org.apache.cassandra.db.Directories.TrueFilesSizeVisitor",4,3,5,8,986,0,0,2,43,43,0,0,0,"1,40",4,7,7
"org.apache.cassandra.db.EmptyIterators",10,0,5,5,986,0,0,5,31,30,0,0,0,"1,40",5,8,7
"org.apache.cassandra.db.EmptyIterators.EmptyBasePartitionIterator",3,0,6,6,986,0,2,3,17,17,2,0,0,"1,00",2,4,4
"org.apache.cassandra.db.EmptyIterators.EmptyBaseRowIterator",3,5,10,15,986,0,0,8,51,51,2,0,0,"1,00",8,10,10
"org.apache.cassandra.db.EmptyIterators.EmptyPartitionIterator",3,1,7,8,986,1,3,0,8,8,0,3,0,"1,00",0,2,1
"org.apache.cassandra.db.EmptyIterators.EmptyRowIterator",3,5,11,16,986,1,0,0,7,7,0,9,0,"1,00",0,2,1
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredPartitionIterator",4,2,11,13,986,1,3,2,18,18,0,3,0,"1,00",2,3,3
"org.apache.cassandra.db.EmptyIterators.EmptyUnfilteredRowIterator",3,6,14,20,986,1,0,2,22,22,0,8,1,"1,00",3,6,4
"org.apache.cassandra.db.HintedHandOffManager",2,2,7,9,987,0,0,4,52,45,0,0,0,"1,14",1,11,8
"org.apache.cassandra.db.HintedHandOffManagerMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.db.IMutation",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.db.Keyspace",100,11,40,51,986,0,0,5,506,432,0,0,0,"2,15",24,63,88
"org.apache.cassandra.db.KeyspaceNotDefinedException",2,0,2,2,1,1,0,0,7,7,0,0,0,"1,00",0,2,1
"org.apache.cassandra.db.LegacyLayout",25,7,37,44,986,0,0,2,859,773,0,0,0,"3,83",35,90,180
"org.apache.cassandra.db.LegacyLayout.CellGrouper",8,7,8,15,986,0,0,2,125,116,0,0,0,"3,25",5,15,26
"org.apache.cassandra.db.LegacyLayout.LegacyAtom",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.db.LegacyLayout.LegacyBound",8,5,3,8,986,0,0,1,34,34,0,0,0,"3,00",2,3,9
"org.apache.cassandra.db.LegacyLayout.LegacyBoundComparator",3,1,2,3,986,0,0,1,31,25,0,0,0,"5,50",1,2,11
"org.apache.cassandra.db.LegacyLayout.LegacyCell",9,11,23,34,986,0,1,6,115,107,0,0,0,"1,28",17,22,23
"org.apache.cassandra.db.LegacyLayout.LegacyCell.Kind",2,4,0,4,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.LegacyLayout.LegacyCellName",6,3,5,8,986,0,0,1,33,33,0,0,0,"2,20",4,6,11
"org.apache.cassandra.db.LegacyLayout.LegacyDeletionInfo",6,2,8,10,986,0,0,2,97,80,0,0,0,"2,38",4,16,19
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstone",7,3,16,19,986,0,1,4,89,73,0,0,0,"1,55",10,12,17
"org.apache.cassandra.db.LegacyLayout.LegacyRangeTombstoneList",7,6,22,28,986,0,0,1,437,337,0,0,0,"3,23",7,24,71
"org.apache.cassandra.db.LegacyLayout.LegacyUnfilteredPartition",6,3,2,5,986,0,0,1,38,35,0,0,0,"4,00",0,10,8
"org.apache.cassandra.db.LivenessInfo",8,5,19,24,988,0,0,6,169,96,1,0,0,"1,21",16,21,23
"org.apache.cassandra.db.LivenessInfo.ExpiringLivenessInfo",3,3,25,28,988,1,0,2,64,64,0,5,9,"1,20",7,15,12
"org.apache.cassandra.db.Memtable",30,16,22,38,986,0,0,3,233,200,0,0,0,"1,73",18,46,38
"org.apache.cassandra.db.Memtable.ColumnsCollector",3,2,4,6,4,0,0,1,40,40,0,0,0,"3,00",1,4,12
"org.apache.cassandra.db.Memtable.FlushRunnable",16,3,10,13,986,2,0,1,116,105,0,2,0,"2,33",4,22,14
"org.apache.cassandra.db.Memtable.LastReplayPosition",2,2,7,9,986,1,0,0,6,6,0,5,0,"1,00",0,2,1
"org.apache.cassandra.db.Memtable.MemtableUnfilteredPartitionIterator",5,6,6,12,986,0,0,4,43,42,0,0,0,"1,00",5,7,6
"org.apache.cassandra.db.Memtable.StatsCollector",3,1,2,3,5,0,0,1,18,18,0,0,0,"2,00",1,3,4
"org.apache.cassandra.db.MigrationRequestVerbHandler",8,1,2,3,987,0,1,1,16,12,0,0,0,"1,00",0,5,1
"org.apache.cassandra.db.MultiCBuilder",16,7,14,21,17,0,0,2,254,157,0,0,0,"2,71",12,19,38
"org.apache.cassandra.db.MutableDeletionInfo",4,3,27,30,988,0,0,3,200,156,0,0,0,"1,78",21,30,48
"org.apache.cassandra.db.MutableDeletionInfo.Builder",1,4,3,7,988,0,0,1,37,33,0,0,0,"2,00",1,5,6
"org.apache.cassandra.db.Mutation",39,9,24,33,986,0,0,4,195,172,0,0,0,"1,62",18,29,39
"org.apache.cassandra.db.Mutation.MutationSerializer",15,0,7,7,986,0,1,1,74,73,0,0,0,"3,50",3,13,14
"org.apache.cassandra.db.MutationVerbHandler",4,0,2,2,988,0,0,1,54,47,0,0,0,"3,00",0,6,6
"org.apache.cassandra.db.NativeDecoratedKey",4,1,2,3,990,0,0,1,17,17,0,0,0,"1,00",1,7,2
"org.apache.cassandra.db.PartitionColumns",7,3,17,20,17,0,0,3,101,96,0,0,0,"1,65",15,18,28
"org.apache.cassandra.db.PartitionColumns.Builder",4,2,4,6,17,0,0,1,48,45,0,0,0,"3,50",4,10,14
"org.apache.cassandra.db.PartitionPosition",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.db.PartitionPosition.ForKey",2,0,1,1,9,0,0,1,7,7,0,0,0,"2,00",1,1,2
"org.apache.cassandra.db.PartitionPosition.Kind",3,4,1,5,0,n/a,0,1,11,9,n/a,0,0,"1,00",1,2,1
"org.apache.cassandra.db.PartitionPosition.RowPositionSerializer",4,0,3,3,8,0,0,1,52,41,0,0,0,"2,33",2,6,7
"org.apache.cassandra.db.PartitionRangeReadCommand",24,3,24,27,989,0,0,6,230,207,0,0,0,"1,68",19,33,42
"org.apache.cassandra.db.PartitionRangeReadCommand.Deserializer",4,0,1,1,989,0,0,1,9,9,0,0,0,"1,00",1,2,1
"org.apache.cassandra.db.PreHashedDecoratedKey",2,2,2,4,12,0,0,1,17,17,0,0,0,"1,00",0,2,2
"org.apache.cassandra.db.RangeSliceVerbHandler",1,0,1,1,4,0,0,1,8,8,0,0,0,"1,00",1,1,1
"org.apache.cassandra.db.RangeTombstone",2,2,6,8,0,0,0,2,54,36,0,0,0,"1,17",5,6,7
"org.apache.cassandra.db.RangeTombstone.Bound",3,3,13,16,988,0,0,12,76,63,0,0,0,"1,54",12,14,20
"org.apache.cassandra.db.RangeTombstone.Bound.Serializer",4,0,3,3,988,0,0,3,24,24,0,0,0,"1,67",2,4,5
"org.apache.cassandra.db.RangeTombstoneList",5,9,45,54,987,0,1,1,645,520,0,0,0,"2,65",28,48,127
"org.apache.cassandra.db.ReadCommand",27,17,30,47,998,0,0,10,387,245,0,0,0,"1,57",26,37,44
"org.apache.cassandra.db.ReadCommand.Kind",6,3,1,4,998,n/a,0,0,10,10,n/a,0,0,"1,00",0,1,1
"org.apache.cassandra.db.ReadCommand.LegacyPagedRangeCommandSerializer",11,0,6,6,998,0,1,1,148,119,0,0,0,"4,67",2,14,14
"org.apache.cassandra.db.ReadCommand.LegacyRangeSliceCommandSerializer",12,0,11,11,998,0,1,2,217,205,0,0,0,"3,62",6,20,29
"org.apache.cassandra.db.ReadCommand.LegacyReadCommandSerializer",11,0,25,25,998,0,1,1,432,380,0,0,0,"3,59",15,36,79
"org.apache.cassandra.db.ReadCommand.LegacyType",1,3,3,6,0,n/a,0,1,20,20,n/a,0,0,"1,67",2,3,5
"org.apache.cassandra.db.ReadCommand.RangeSliceSerializer",5,0,6,6,998,0,1,1,24,22,0,0,0,"2,00",2,6,6
"org.apache.cassandra.db.ReadCommand.SelectionDeserializer",5,0,1,1,998,0,0,1,4,4,0,0,0,n/a,1,1,0
"org.apache.cassandra.db.ReadCommand.Serializer",10,0,13,13,998,0,1,1,95,93,0,0,0,"1,90",9,28,19
"org.apache.cassandra.db.ReadCommandVerbHandler",9,0,3,3,987,0,1,1,23,23,0,0,0,"1,50",1,6,3
"org.apache.cassandra.db.ReadOrderGroup",3,3,8,11,986,0,0,3,97,91,0,0,0,"1,75",6,10,14
"org.apache.cassandra.db.ReadQuery",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.db.ReadRepairVerbHandler",3,0,2,2,987,0,1,1,8,8,0,0,0,"1,00",0,3,1
"org.apache.cassandra.db.ReadResponse",13,4,8,12,995,0,0,6,39,33,3,0,0,"1,00",7,13,5
"org.apache.cassandra.db.ReadResponse.DataResponse",8,3,9,12,995,1,0,2,41,38,2,0,0,"1,00",4,8,4
"org.apache.cassandra.db.ReadResponse.DigestResponse",3,2,8,10,995,1,0,3,26,22,0,0,0,"1,00",3,5,4
"org.apache.cassandra.db.ReadResponse.LegacyRangeSliceReplySerializer",7,0,6,6,995,0,1,2,67,65,0,0,0,"2,67",2,7,8
"org.apache.cassandra.db.ReadResponse.LegacyRemoteDataResponse",5,2,8,10,995,1,0,2,80,69,0,0,0,"1,75",3,6,14
"org.apache.cassandra.db.ReadResponse.LocalDataResponse",5,4,12,16,995,2,0,2,30,26,0,3,0,"1,00",2,6,3
"org.apache.cassandra.db.ReadResponse.RangeSliceSerializer",5,0,6,6,995,0,1,1,22,22,0,0,0,"2,00",2,6,6
"org.apache.cassandra.db.ReadResponse.RemoteDataResponse",4,3,11,14,995,2,0,1,14,12,0,3,0,"1,00",1,3,2
"org.apache.cassandra.db.ReadResponse.Serializer",10,0,6,6,995,0,1,1,105,102,0,0,0,"5,33",2,13,16
"org.apache.cassandra.db.RowIndexEntry",16,2,10,12,986,0,1,7,62,46,1,0,0,"1,11",8,11,10
"org.apache.cassandra.db.RowIndexEntry.IndexSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.db.RowIndexEntry.IndexedEntry",5,5,15,20,986,1,1,1,59,55,0,2,5,"1,33",5,11,8
"org.apache.cassandra.db.RowIndexEntry.Serializer",12,2,10,12,986,0,1,2,131,123,0,0,0,"3,43",3,24,24
"org.apache.cassandra.db.RowUpdateBuilder",28,9,43,52,986,0,0,3,305,292,0,0,0,"1,44",32,57,62
"org.apache.cassandra.db.SchemaCheckVerbHandler",7,1,2,3,987,0,1,1,10,10,0,0,0,"1,00",0,5,1
"org.apache.cassandra.db.SerializationHeader",31,7,31,38,986,0,0,8,200,185,0,0,0,"1,23",21,40,38
"org.apache.cassandra.db.SerializationHeader.Component",10,5,8,13,986,1,0,2,77,66,0,1,0,"1,67",5,9,10
"org.apache.cassandra.db.SerializationHeader.Serializer",13,0,15,15,986,0,1,3,134,130,0,0,0,"2,25",7,24,27
"org.apache.cassandra.db.Serializers",7,1,2,3,987,0,0,1,78,65,0,0,0,"1,75",1,3,14
"org.apache.cassandra.db.SinglePartitionReadCommand",32,4,36,40,986,0,0,9,699,502,0,0,0,"2,70",32,60,100
"org.apache.cassandra.db.SinglePartitionReadCommand.Deserializer",4,0,1,1,986,0,0,1,10,10,0,0,0,"1,00",1,4,1
"org.apache.cassandra.db.SinglePartitionReadCommand.Group",5,3,12,15,986,0,0,3,71,65,0,0,0,"1,25",11,14,15
"org.apache.cassandra.db.SizeEstimatesRecorder",11,2,24,26,987,1,0,2,99,84,0,17,1,"2,50",2,18,15
"org.apache.cassandra.db.Slice",8,4,20,24,986,0,0,3,254,182,1,0,0,"2,17",19,28,50
"org.apache.cassandra.db.Slice.Bound",9,3,20,23,986,0,0,6,153,125,0,0,0,"1,90",19,20,38
"org.apache.cassandra.db.Slice.Bound.Serializer",6,0,4,4,986,0,0,3,34,28,0,0,0,"1,50",3,5,6
"org.apache.cassandra.db.Slice.Serializer",6,0,3,3,986,0,0,1,19,19,0,0,0,"1,00",2,7,3
"org.apache.cassandra.db.Slices",8,3,13,16,986,0,0,11,116,30,3,0,0,"1,33",12,14,4
"org.apache.cassandra.db.Slices.ArrayBackedSlices",11,2,27,29,986,1,0,2,234,219,0,1,0,"2,95",14,19,59
"org.apache.cassandra.db.Slices.ArrayBackedSlices.ComponentOfSlice",1,4,3,7,0,0,0,2,39,38,0,0,0,"2,00",2,3,6
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InForwardOrderTester",3,2,4,6,986,0,1,1,31,29,0,0,0,"3,50",2,2,7
"org.apache.cassandra.db.Slices.ArrayBackedSlices.InReverseOrderTester",3,2,5,7,986,0,1,1,35,33,0,0,0,"2,67",2,3,8
"org.apache.cassandra.db.Slices.Builder",3,3,7,10,987,0,0,1,95,83,0,0,0,"2,25",5,8,18
"org.apache.cassandra.db.Slices.InOrderTester",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.db.Slices.SelectAllSlices",5,1,24,25,986,1,0,11,68,63,0,1,0,"1,00",12,13,14
"org.apache.cassandra.db.Slices.SelectNoSlices",3,1,24,25,986,1,0,11,67,64,0,1,0,"1,00",12,12,14
"org.apache.cassandra.db.Slices.Serializer",7,0,3,3,986,0,0,1,39,39,0,0,0,"4,00",2,7,12
"org.apache.cassandra.db.SnapshotCommand",5,5,3,8,988,0,0,1,27,27,0,0,0,"1,00",2,4,3
"org.apache.cassandra.db.SnapshotCommandSerializer",4,0,6,6,988,0,1,2,25,25,0,0,0,"1,00",2,4,3
"org.apache.cassandra.db.SnapshotDetailsTabularData",2,7,1,8,987,0,0,1,45,45,0,0,0,"1,00",0,2,1
"org.apache.cassandra.db.SystemKeyspace",46,49,73,122,986,0,0,5,1.181,1.041,0,0,0,"1,73",40,119,126
"org.apache.cassandra.db.SystemKeyspace.BootstrapState",1,4,0,4,0,n/a,0,0,7,7,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.TruncateResponse",4,4,2,6,988,0,0,1,21,17,0,0,0,"1,00",1,3,2
"org.apache.cassandra.db.TruncateResponse.TruncateResponseSerializer",4,0,6,6,988,0,1,2,22,22,0,0,0,"1,00",2,4,3
"org.apache.cassandra.db.TruncateVerbHandler",5,1,3,4,987,0,1,1,30,30,0,0,0,"1,50",0,6,3
"org.apache.cassandra.db.Truncation",5,3,3,6,988,0,0,1,22,19,0,0,0,"1,00",2,4,3
"org.apache.cassandra.db.TruncationSerializer",4,0,6,6,988,0,1,2,18,18,0,0,0,"1,00",2,4,3
"org.apache.cassandra.db.TypeSizes",59,5,13,18,1,0,0,8,72,71,0,0,0,"1,23",12,15,16
"org.apache.cassandra.db.UnfilteredDeserializer",8,4,10,14,992,0,0,9,78,35,2,0,0,"1,50",7,12,3
"org.apache.cassandra.db.UnfilteredDeserializer.CurrentDeserializer",3,10,19,29,992,1,0,3,98,95,0,0,0,"1,70",6,11,17
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer",7,10,22,32,992,1,0,1,124,113,0,0,0,"2,00",9,20,26
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.AtomIterator",4,3,7,10,992,0,0,2,64,61,0,0,0,"1,86",4,8,13
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.TombstoneTracker",5,2,8,10,992,0,0,1,100,69,0,0,0,"1,88",6,9,15
"org.apache.cassandra.db.UnfilteredDeserializer.OldFormatDeserializer.UnfilteredIterator",4,4,7,11,992,0,0,2,84,77,0,0,0,"2,29",4,19,16
"org.apache.cassandra.db.UnknownColumnException",3,1,2,3,987,0,0,1,24,20,0,0,0,"1,00",1,3,2
"org.apache.cassandra.db.UnknownColumnFamilyException",3,1,1,2,0,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.WindowsFailedSnapshotTracker",5,3,3,6,986,0,0,1,70,65,0,0,0,"3,00",0,7,9
"org.apache.cassandra.db.WriteResponse",6,2,2,4,986,0,0,1,15,12,0,0,0,"1,00",1,3,2
"org.apache.cassandra.db.WriteResponse.Serializer",4,0,6,6,986,0,1,3,14,14,0,0,0,"1,00",2,3,3
"org.apache.cassandra.db.WriteType",10,7,0,7,0,n/a,0,0,10,10,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator",7,9,15,24,988,0,0,8,216,191,0,0,0,"2,21",11,28,31
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.IndexState",5,7,12,19,991,0,0,1,103,94,0,0,0,"1,67",9,17,20
"org.apache.cassandra.db.columniterator.AbstractSSTableIterator.Reader",5,5,12,17,988,0,0,3,105,99,0,0,0,"1,62",5,17,13
"org.apache.cassandra.db.columniterator.SSTableIterator",7,0,4,4,989,0,0,2,29,26,0,0,0,"1,25",2,7,5
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardIndexedReader",3,6,11,17,2,1,0,1,86,65,0,2,3,"3,00",1,6,12
"org.apache.cassandra.db.columniterator.SSTableIterator.ForwardReader",3,4,7,11,1,0,0,2,101,81,1,0,0,"2,86",4,7,20
"org.apache.cassandra.db.columniterator.SSTableReversedIterator",7,0,4,4,990,0,0,2,29,26,0,0,0,"1,25",2,7,5
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReusablePartitionData",5,7,4,11,987,0,0,1,40,40,0,0,0,"1,25",0,9,5
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseIndexedReader",3,5,15,20,989,1,0,2,104,79,0,4,4,"2,83",2,11,17
"org.apache.cassandra.db.columniterator.SSTableReversedIterator.ReverseReader",4,2,9,11,988,0,0,2,123,102,1,0,0,"2,56",4,13,23
"org.apache.cassandra.db.commitlog.AbstractCommitLogService",6,11,10,21,986,0,0,3,173,147,0,0,0,"2,00",3,11,20
"org.apache.cassandra.db.commitlog.BatchCommitLogService",1,0,2,2,987,0,0,1,15,14,0,0,0,"1,00",0,3,2
"org.apache.cassandra.db.commitlog.CommitLog",32,10,29,39,986,0,0,2,388,296,0,0,0,"1,67",20,49,50
"org.apache.cassandra.db.commitlog.CommitLogArchiver",6,10,8,18,987,0,0,1,202,196,0,0,0,"3,30",3,12,33
"org.apache.cassandra.db.commitlog.CommitLogDescriptor",7,15,15,30,987,0,0,1,174,163,0,0,0,"2,07",12,18,31
"org.apache.cassandra.db.commitlog.CommitLogMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,11,n/a
"org.apache.cassandra.db.commitlog.CommitLogReplayer",21,15,11,26,996,0,0,1,459,418,0,0,0,"5,75",6,33,69
"org.apache.cassandra.db.commitlog.CommitLogReplayer.AlwaysReplayFilter",3,0,4,4,989,1,0,2,11,11,0,0,0,"1,00",2,2,2
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CommitLogReplayException",3,0,2,2,0,0,0,0,12,12,0,0,0,"1,00",0,2,2
"org.apache.cassandra.db.commitlog.CommitLogReplayer.CustomReplayFilter",3,1,5,6,989,1,0,1,25,25,0,0,0,"1,25",2,3,5
"org.apache.cassandra.db.commitlog.CommitLogReplayer.ReplayFilter",7,0,3,3,989,0,0,3,26,25,2,0,0,"6,00",3,5,6
"org.apache.cassandra.db.commitlog.CommitLogSegment",16,19,32,51,986,0,0,4,426,327,0,0,0,"2,31",16,47,67
"org.apache.cassandra.db.commitlog.CommitLogSegment.Allocation",5,4,6,10,986,0,0,2,41,34,0,0,0,"1,00",3,8,6
"org.apache.cassandra.db.commitlog.CommitLogSegment.CommitLogSegmentFileComparator",1,0,1,1,0,0,0,1,9,9,0,0,0,"1,00",1,1,1
"org.apache.cassandra.db.commitlog.CommitLogSegmentManager",13,11,22,33,986,0,0,1,444,314,0,0,0,"2,62",7,34,63
"org.apache.cassandra.db.commitlog.CompressedSegment",6,7,7,14,988,0,0,2,112,96,0,0,0,"1,38",3,15,11
"org.apache.cassandra.db.commitlog.MemoryMappedSegment",5,0,5,5,988,0,0,4,80,60,0,0,0,"1,40",2,9,7
"org.apache.cassandra.db.commitlog.PeriodicCommitLogService",2,1,3,4,987,0,0,1,33,29,0,0,0,"2,00",1,6,6
"org.apache.cassandra.db.commitlog.ReplayPosition",20,5,7,12,986,0,0,1,77,68,1,0,0,"1,56",6,7,14
"org.apache.cassandra.db.commitlog.ReplayPosition.ReplayPositionSerializer",8,0,6,6,986,0,1,2,16,16,0,0,0,"1,00",2,6,3
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy",21,17,30,47,986,0,0,19,386,271,0,0,0,"2,12",19,45,51
"org.apache.cassandra.db.compaction.AbstractCompactionStrategy.ScannerList",5,1,2,3,986,0,0,1,29,29,0,0,0,"2,50",0,3,5
"org.apache.cassandra.db.compaction.AbstractCompactionTask",9,4,9,13,990,1,0,4,52,44,0,1,0,"1,20",6,10,6
"org.apache.cassandra.db.compaction.CompactionController",13,7,12,19,995,0,0,1,153,120,0,0,0,"2,33",6,26,28
"org.apache.cassandra.db.compaction.CompactionHistoryTabularData",6,7,1,8,986,0,0,1,44,44,0,0,0,"2,00",1,6,2
"org.apache.cassandra.db.compaction.CompactionInfo",7,7,14,21,986,0,0,1,86,84,0,0,0,"1,14",11,14,16
"org.apache.cassandra.db.compaction.CompactionInfo.Holder",8,3,5,8,986,0,0,2,32,26,3,0,0,"1,25",2,7,5
"org.apache.cassandra.db.compaction.CompactionInterruptedException",2,1,1,2,0,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.compaction.CompactionIterator",12,12,16,28,996,0,1,4,189,158,0,0,0,"1,50",8,20,30
"org.apache.cassandra.db.compaction.CompactionIterator.Purger",2,9,24,33,996,2,0,2,45,40,0,14,3,"1,80",1,7,9
"org.apache.cassandra.db.compaction.CompactionManager",67,12,54,66,986,0,0,9,1.172,1.033,0,0,0,"2,42",34,119,172
"org.apache.cassandra.db.compaction.CompactionManager.AllSSTableOpStatus",3,3,1,4,0,n/a,0,0,7,7,n/a,0,0,"1,00",0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.BackgroundCompactionCandidate",1,1,2,3,986,0,0,1,35,33,0,0,0,"2,00",0,4,4
"org.apache.cassandra.db.compaction.CompactionManager.CacheCleanupExecutor",2,2,25,27,986,2,0,0,7,7,0,13,0,"1,00",0,2,1
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy",8,2,4,6,986,0,0,3,18,18,2,0,0,"1,50",3,6,3
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Bounded",7,2,6,8,986,1,0,2,25,25,0,0,0,"1,00",2,5,4
"org.apache.cassandra.db.compaction.CompactionManager.CleanupStrategy.Full",6,3,6,9,986,1,0,2,23,23,0,0,0,"1,33",2,6,4
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutor",8,2,24,26,986,1,0,2,47,43,2,11,0,"1,80",0,12,9
"org.apache.cassandra.db.compaction.CompactionManager.CompactionExecutorStatsCollector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.db.compaction.CompactionManager.OneSSTableOperation",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionController",2,0,2,2,0,0,0,1,29,12,0,0,0,"1,00",1,2,2
"org.apache.cassandra.db.compaction.CompactionManager.ValidationCompactionIterator",4,0,1,1,986,0,0,0,7,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.compaction.CompactionManager.ValidationExecutor",2,2,25,27,986,2,0,0,7,7,0,13,0,"1,00",0,2,1
"org.apache.cassandra.db.compaction.CompactionManagerMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,14,n/a
"org.apache.cassandra.db.compaction.CompactionStrategyManager",18,8,35,43,997,0,0,1,418,368,0,0,0,"2,33",22,43,84
"org.apache.cassandra.db.compaction.CompactionTask",13,6,15,21,989,0,0,3,218,195,0,0,0,"2,38",11,32,38
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy",11,6,23,29,998,0,0,5,322,270,0,0,0,"2,16",19,30,54
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy.Target",1,2,4,6,0,0,0,1,45,25,0,0,0,"1,25",3,4,5
"org.apache.cassandra.db.compaction.DateTieredCompactionStrategyOptions",1,11,3,14,1,0,0,1,89,89,0,0,0,"4,67",1,4,14
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy",9,4,17,21,988,0,0,6,273,255,0,0,0,"2,78",13,25,50
"org.apache.cassandra.db.compaction.LeveledCompactionStrategy.LeveledScanner",7,6,14,20,987,0,2,5,87,83,0,0,0,"2,11",7,16,19
"org.apache.cassandra.db.compaction.LeveledCompactionTask",7,3,4,7,994,0,0,2,32,32,0,0,0,"1,25",3,6,5
"org.apache.cassandra.db.compaction.LeveledManifest",12,11,30,41,988,0,0,1,635,511,0,0,0,"3,58",24,43,111
"org.apache.cassandra.db.compaction.LeveledManifest.CompactionCandidate",2,3,1,4,987,0,0,0,12,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.compaction.OperationType",26,19,3,22,0,n/a,0,1,39,38,n/a,0,0,"1,67",2,4,5
"org.apache.cassandra.db.compaction.SSTableSplitter",5,2,2,4,994,0,0,1,12,12,0,0,0,"1,00",0,3,2
"org.apache.cassandra.db.compaction.SSTableSplitter.SplitController",1,0,2,2,0,0,0,1,12,12,0,0,0,"1,00",1,2,2
"org.apache.cassandra.db.compaction.SSTableSplitter.SplittingCompactionTask",6,1,4,5,992,0,0,3,29,29,0,0,0,"1,25",3,6,5
"org.apache.cassandra.db.compaction.SSTableSplitter.StatsCollector",1,0,2,2,994,0,0,2,11,10,0,0,0,"1,00",0,2,2
"org.apache.cassandra.db.compaction.Scrubber",13,24,13,37,989,0,0,1,335,322,0,0,0,"3,57",4,38,50
"org.apache.cassandra.db.compaction.Scrubber.ScrubInfo",4,3,2,5,987,0,0,1,27,27,0,0,0,"1,00",1,5,2
"org.apache.cassandra.db.compaction.Scrubber.ScrubResult",2,3,1,4,989,0,0,0,12,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy",11,5,19,24,996,0,0,4,254,222,0,0,0,"2,09",15,26,48
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.SplittingCompactionTask",7,0,2,2,991,0,0,1,15,15,0,0,0,"1,00",1,3,2
"org.apache.cassandra.db.compaction.SizeTieredCompactionStrategyOptions",1,9,4,13,1,0,0,1,66,66,0,0,0,"2,75",2,5,11
"org.apache.cassandra.db.compaction.Upgrader",11,8,3,11,988,0,0,1,59,59,0,0,0,"1,33",1,21,4
"org.apache.cassandra.db.compaction.Upgrader.UpgradeController",3,0,2,2,987,0,0,1,12,12,0,0,0,"1,00",1,2,2
"org.apache.cassandra.db.compaction.Verifier",16,11,7,18,993,0,0,1,162,158,0,0,0,"2,86",1,26,20
"org.apache.cassandra.db.compaction.Verifier.VerifyController",1,0,2,2,0,0,0,1,12,12,0,0,0,"1,00",1,2,2
"org.apache.cassandra.db.compaction.Verifier.VerifyInfo",4,3,2,5,987,0,0,1,27,27,0,0,0,"1,00",1,5,2
"org.apache.cassandra.db.compaction.writers.CompactionAwareWriter",16,11,31,42,989,1,1,3,110,83,0,9,2,"1,18",9,27,13
"org.apache.cassandra.db.compaction.writers.DefaultCompactionWriter",12,1,5,6,987,0,0,3,39,36,0,0,0,"1,00",2,8,5
"org.apache.cassandra.db.compaction.writers.MajorLeveledCompactionWriter",14,9,4,13,989,0,0,1,69,69,0,0,0,"1,50",1,11,6
"org.apache.cassandra.db.compaction.writers.MaxSSTableSizeWriter",14,6,5,11,987,0,0,1,62,62,0,0,0,"1,20",2,12,6
"org.apache.cassandra.db.compaction.writers.SplittingSizeTieredCompactionWriter",14,7,4,11,987,0,0,1,75,68,0,0,0,"2,00",1,10,8
"org.apache.cassandra.db.context.CounterContext",26,6,23,29,986,0,0,5,612,455,0,0,0,"4,78",21,41,110
"org.apache.cassandra.db.context.CounterContext.ContextState",3,6,21,27,986,0,0,1,142,125,0,0,0,"1,19",11,23,25
"org.apache.cassandra.db.context.CounterContext.LazyHolder",1,1,0,1,986,0,0,0,5,4,0,0,0,n/a,0,0,0
"org.apache.cassandra.db.context.CounterContext.Relationship",3,4,0,4,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter",5,2,5,7,988,0,0,3,26,26,0,0,0,"2,33",2,6,7
"org.apache.cassandra.db.filter.AbstractClusteringIndexFilter.FilterSerializer",4,0,3,3,988,0,0,3,23,23,0,0,0,"1,00",2,6,3
"org.apache.cassandra.db.filter.ClusteringIndexFilter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,13,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.InternalDeserializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.db.filter.ClusteringIndexFilter.Kind",2,3,1,4,986,n/a,0,0,10,10,n/a,0,0,"1,00",0,1,1
"org.apache.cassandra.db.filter.ClusteringIndexFilter.Serializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter",9,3,16,19,986,0,0,6,195,171,0,0,0,"2,05",14,19,43
"org.apache.cassandra.db.filter.ClusteringIndexNamesFilter.NamesDeserializer",5,0,1,1,986,0,0,1,12,12,0,0,0,"2,00",1,6,2
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter",13,2,16,18,989,0,0,2,111,101,0,0,0,"1,32",14,21,25
"org.apache.cassandra.db.filter.ClusteringIndexSliceFilter.SliceDeserializer",3,0,1,1,989,0,0,1,8,8,0,0,0,"1,00",1,2,1
"org.apache.cassandra.db.filter.ColumnFilter",45,5,14,19,986,0,0,5,176,116,0,0,0,"2,36",12,19,33
"org.apache.cassandra.db.filter.ColumnFilter.Builder",6,3,7,10,986,0,0,1,57,55,0,0,0,"2,00",6,8,14
"org.apache.cassandra.db.filter.ColumnFilter.Serializer",5,3,4,7,986,0,0,1,69,69,0,0,0,"4,25",3,7,17
"org.apache.cassandra.db.filter.ColumnFilter.Tester",4,3,4,7,986,0,0,1,35,34,0,0,0,"2,00",3,4,8
"org.apache.cassandra.db.filter.ColumnSubselection",7,2,8,10,991,0,0,5,43,33,2,0,0,"1,00",7,13,5
"org.apache.cassandra.db.filter.ColumnSubselection.Element",7,2,11,13,991,1,0,2,28,27,0,2,0,"1,00",4,11,5
"org.apache.cassandra.db.filter.ColumnSubselection.Kind",4,2,0,2,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.filter.ColumnSubselection.Serializer",12,0,3,3,991,0,0,1,69,66,0,0,0,"4,00",2,13,12
"org.apache.cassandra.db.filter.ColumnSubselection.Slice",7,3,11,14,991,1,0,2,36,35,0,2,0,"1,80",4,11,9
"org.apache.cassandra.db.filter.DataLimits",18,3,18,21,986,0,0,15,94,65,2,0,0,"1,00",18,27,11
"org.apache.cassandra.db.filter.DataLimits.CQLLimits",7,3,28,31,986,1,0,4,107,90,2,3,0,"1,40",12,19,21
"org.apache.cassandra.db.filter.DataLimits.CQLLimits.CQLCounter",4,8,28,36,986,2,0,1,60,57,1,13,1,"1,56",5,12,14
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits",6,5,32,37,986,2,0,4,31,31,0,10,4,"1,00",4,7,5
"org.apache.cassandra.db.filter.DataLimits.CQLPagingLimits.PagingAwareCounter",3,8,30,38,986,3,0,1,24,20,0,20,1,"1,50",0,4,3
"org.apache.cassandra.db.filter.DataLimits.Counter",18,3,19,22,986,1,0,6,62,53,2,6,0,"1,62",10,17,13
"org.apache.cassandra.db.filter.DataLimits.Kind",6,4,0,4,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.filter.DataLimits.Serializer",9,0,3,3,986,0,0,1,83,83,0,0,0,"4,67",2,14,14
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits",6,2,30,32,986,2,0,4,33,24,0,10,4,"1,00",4,7,5
"org.apache.cassandra.db.filter.DataLimits.SuperColumnCountingLimits.SuperColumnCountingCounter",4,8,29,37,986,3,0,1,19,18,0,20,1,"2,00",1,4,4
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits",7,2,25,27,986,1,0,5,86,68,1,3,0,"1,25",11,15,15
"org.apache.cassandra.db.filter.DataLimits.ThriftLimits.ThriftCounter",4,8,27,35,986,2,0,1,57,57,1,13,1,"1,62",5,11,13
"org.apache.cassandra.db.filter.RowFilter",36,3,18,21,986,0,0,6,144,116,2,0,0,"1,81",13,32,29
"org.apache.cassandra.db.filter.RowFilter.CQLFilter",5,1,17,18,986,1,0,2,36,36,0,11,0,"1,80",2,4,9
"org.apache.cassandra.db.filter.RowFilter.CustomExpression",9,5,20,25,986,1,0,5,48,40,0,10,0,"1,00",6,9,7
"org.apache.cassandra.db.filter.RowFilter.Expression",21,4,13,17,986,0,0,4,102,78,4,0,0,"1,64",11,17,18
"org.apache.cassandra.db.filter.RowFilter.Expression.Kind",6,4,0,4,0,n/a,0,0,2,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.filter.RowFilter.Expression.Serializer",16,0,3,3,986,0,0,1,129,122,0,0,0,"9,00",2,22,27
"org.apache.cassandra.db.filter.RowFilter.MapEqualityExpression",8,4,21,25,986,1,0,2,78,72,0,6,4,"1,62",6,14,13
"org.apache.cassandra.db.filter.RowFilter.Serializer",8,0,3,3,986,0,0,1,29,29,0,0,0,"2,33",2,10,7
"org.apache.cassandra.db.filter.RowFilter.SimpleExpression",6,3,17,20,986,1,0,2,118,110,0,10,0,"6,00",3,9,24
"org.apache.cassandra.db.filter.RowFilter.ThriftExpression",8,4,18,22,986,1,0,3,43,34,0,10,0,"1,20",4,12,6
"org.apache.cassandra.db.filter.RowFilter.ThriftFilter",6,1,17,18,986,1,0,2,40,34,0,11,0,"1,75",2,4,7
"org.apache.cassandra.db.filter.TombstoneOverwhelmingException",5,0,2,2,986,0,0,1,36,35,0,0,0,"4,00",1,3,8
"org.apache.cassandra.db.lifecycle.Helpers",8,0,19,19,986,0,0,12,208,163,0,0,0,"1,80",17,23,36
"org.apache.cassandra.db.lifecycle.LifecycleTransaction",66,11,59,70,986,1,1,9,427,286,0,9,2,"1,37",24,67,56
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState",4,5,5,10,986,0,0,1,38,34,0,0,0,"1,20",4,5,6
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.ReaderState.Action",3,3,1,4,0,n/a,0,1,9,9,n/a,0,0,"3,00",1,1,3
"org.apache.cassandra.db.lifecycle.LifecycleTransaction.State",2,2,4,6,986,0,0,1,32,25,0,0,0,"1,00",2,4,4
"org.apache.cassandra.db.lifecycle.LogAwareFileLister",2,4,12,16,2,0,0,1,152,128,0,0,0,"1,50",7,12,18
"org.apache.cassandra.db.lifecycle.LogFile",5,8,35,43,990,0,0,2,296,265,0,0,0,"1,31",24,38,46
"org.apache.cassandra.db.lifecycle.LogRecord",5,8,27,35,989,0,0,3,202,185,0,0,0,"1,33",23,34,36
"org.apache.cassandra.db.lifecycle.LogRecord.Status",1,3,2,5,989,0,0,1,23,15,0,0,0,"1,50",1,2,3
"org.apache.cassandra.db.lifecycle.LogRecord.Type",3,5,4,9,989,n/a,0,4,21,21,n/a,0,0,"1,00",4,5,4
"org.apache.cassandra.db.lifecycle.LogReplica",2,2,10,12,987,0,0,3,69,56,0,0,0,"1,30",5,13,13
"org.apache.cassandra.db.lifecycle.LogReplicaSet",2,2,14,16,987,0,0,2,162,152,0,0,0,"2,36",9,15,33
"org.apache.cassandra.db.lifecycle.LogTransaction",14,7,37,44,993,1,1,4,185,129,0,11,0,"1,32",9,27,25
"org.apache.cassandra.db.lifecycle.LogTransaction.CorruptTransactionLogException",0,1,1,2,0,0,0,0,13,9,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.LogFilesByName",1,1,4,5,993,0,0,3,43,43,0,0,0,"1,75",0,4,7
"org.apache.cassandra.db.lifecycle.LogTransaction.Obsoletion",2,2,1,3,994,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.lifecycle.LogTransaction.SSTableTidier",8,5,3,8,993,0,0,1,49,39,0,0,0,"1,33",0,10,4
"org.apache.cassandra.db.lifecycle.LogTransaction.TransactionTidier",2,1,6,7,993,0,1,1,46,40,0,0,0,"2,25",1,4,9
"org.apache.cassandra.db.lifecycle.SSTableIntervalTree",5,3,15,18,992,1,0,2,23,23,0,10,0,"1,25",3,6,5
"org.apache.cassandra.db.lifecycle.SSTableSet",23,3,0,3,0,n/a,0,0,10,6,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.lifecycle.Tracker",16,5,35,40,987,0,0,2,361,315,0,0,0,"1,75",19,53,63
"org.apache.cassandra.db.lifecycle.View",19,7,23,30,986,0,0,5,265,211,0,0,0,"1,39",22,26,43
"org.apache.cassandra.db.marshal.AbstractCompositeType",6,0,19,19,26,0,0,6,241,200,0,0,0,"3,75",17,27,45
"org.apache.cassandra.db.marshal.AbstractCompositeType.ParsedComparator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.db.marshal.AbstractType",122,4,40,44,23,0,0,17,322,216,1,0,0,"1,35",33,52,50
"org.apache.cassandra.db.marshal.AbstractType.ComparisonType",2,3,0,3,0,n/a,0,0,17,6,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.marshal.AsciiType",31,2,6,8,31,0,0,4,60,59,0,0,0,"1,00",5,9,7
"org.apache.cassandra.db.marshal.BooleanType",11,2,9,11,27,0,0,5,57,56,0,0,0,"2,11",8,13,19
"org.apache.cassandra.db.marshal.ByteType",12,1,7,8,27,0,0,3,60,59,0,0,0,"1,43",6,12,10
"org.apache.cassandra.db.marshal.BytesType",34,1,8,9,28,0,0,6,57,54,0,0,0,"1,12",7,13,9
"org.apache.cassandra.db.marshal.CollectionType",26,2,19,21,986,0,0,8,118,102,0,0,0,"1,77",17,24,23
"org.apache.cassandra.db.marshal.CollectionType.CollectionPathSerializer",6,0,8,8,986,0,1,4,19,19,0,0,0,"1,00",2,10,4
"org.apache.cassandra.db.marshal.CollectionType.Kind",9,3,1,4,986,n/a,0,1,25,25,n/a,0,0,"1,33",1,1,4
"org.apache.cassandra.db.marshal.ColumnToCollectionType",7,2,14,16,25,0,0,10,101,96,0,0,0,"1,43",11,18,20
"org.apache.cassandra.db.marshal.CompositeType",17,3,28,31,986,0,0,6,281,243,0,0,0,"2,07",27,36,58
"org.apache.cassandra.db.marshal.CompositeType.Builder",7,5,14,19,986,0,0,2,118,109,0,0,0,"1,64",11,17,23
"org.apache.cassandra.db.marshal.CompositeType.CompositeComponent",1,2,1,3,0,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.marshal.CompositeType.StaticParsedComparator",1,2,5,7,0,0,0,4,23,23,0,0,0,"1,00",3,5,5
"org.apache.cassandra.db.marshal.CounterColumnType",12,1,12,13,986,0,0,11,54,54,0,0,0,"1,00",10,17,12
"org.apache.cassandra.db.marshal.DateType",9,2,10,12,27,0,0,8,72,71,0,0,0,"1,40",9,15,14
"org.apache.cassandra.db.marshal.DecimalType",10,1,8,9,27,0,0,5,55,54,0,0,0,"1,50",7,13,12
"org.apache.cassandra.db.marshal.DoubleType",9,1,9,10,27,0,0,5,65,64,0,0,0,"1,56",8,14,14
"org.apache.cassandra.db.marshal.DynamicCompositeType",6,3,13,16,26,0,0,6,206,163,0,0,0,"2,38",12,18,31
"org.apache.cassandra.db.marshal.DynamicCompositeType.DynamicParsedComparator",3,4,5,9,26,0,0,3,59,56,0,0,0,"2,20",3,7,11
"org.apache.cassandra.db.marshal.DynamicCompositeType.FixedValueComparator",3,3,10,13,24,0,0,9,56,52,0,0,0,"1,00",8,10,10
"org.apache.cassandra.db.marshal.EmptyType",8,1,8,9,27,0,0,6,46,42,0,0,0,"1,38",7,10,11
"org.apache.cassandra.db.marshal.FloatType",9,1,9,10,27,0,0,5,64,63,0,0,0,"1,56",8,15,14
"org.apache.cassandra.db.marshal.FrozenType",5,0,7,7,24,0,0,6,38,35,0,0,0,"1,14",6,8,8
"org.apache.cassandra.db.marshal.InetAddressType",9,1,7,8,27,0,0,4,51,50,0,0,0,"1,14",6,11,8
"org.apache.cassandra.db.marshal.Int32Type",29,1,9,10,27,0,0,5,73,72,0,0,0,"1,78",8,15,16
"org.apache.cassandra.db.marshal.IntegerType",17,1,11,12,27,0,0,6,133,119,0,0,0,"2,55",10,16,28
"org.apache.cassandra.db.marshal.LexicalUUIDType",7,1,7,8,27,0,0,5,54,53,0,0,0,"1,57",6,11,11
"org.apache.cassandra.db.marshal.ListType",17,6,19,25,986,0,0,3,161,159,0,0,0,"2,05",18,26,39
"org.apache.cassandra.db.marshal.LongType",20,1,11,12,27,0,0,6,79,78,0,0,0,"1,64",10,17,18
"org.apache.cassandra.db.marshal.MapType",23,6,20,26,986,0,0,3,187,185,0,0,0,"2,15",19,30,43
"org.apache.cassandra.db.marshal.PartitionerDefinedOrder",12,1,12,13,986,0,0,10,69,66,0,0,0,"1,08",10,17,13
"org.apache.cassandra.db.marshal.ReversedType",15,2,18,20,24,0,0,3,108,106,0,0,0,"1,33",17,19,24
"org.apache.cassandra.db.marshal.SetType",15,5,17,22,986,0,0,4,128,126,0,0,0,"1,65",16,22,28
"org.apache.cassandra.db.marshal.ShortType",9,1,7,8,27,0,0,3,62,61,0,0,0,"1,57",6,13,11
"org.apache.cassandra.db.marshal.SimpleDateType",11,1,10,11,27,0,0,7,54,54,0,0,0,"1,00",9,19,10
"org.apache.cassandra.db.marshal.TimeType",8,1,8,9,27,0,0,5,48,45,0,0,0,"1,00",7,13,8
"org.apache.cassandra.db.marshal.TimeUUIDType",13,1,11,12,27,0,0,6,92,85,0,0,0,"1,55",10,13,17
"org.apache.cassandra.db.marshal.TimestampType",10,2,12,14,27,0,0,9,85,77,0,0,0,"1,33",11,17,16
"org.apache.cassandra.db.marshal.TupleType",4,1,21,22,8,0,0,3,287,270,0,0,0,"3,52",19,22,74
"org.apache.cassandra.db.marshal.TypeParser",5,4,29,33,986,0,0,6,454,425,0,0,0,"2,69",25,33,78
"org.apache.cassandra.db.marshal.UTF8Type",49,1,7,8,33,0,0,5,49,47,0,0,0,"1,00",6,10,7
"org.apache.cassandra.db.marshal.UUIDType",19,2,11,13,28,0,0,8,124,107,0,0,0,"1,91",10,15,21
"org.apache.cassandra.db.marshal.UserType",17,4,15,19,9,0,0,6,180,170,0,0,0,"2,33",13,18,35
"org.apache.cassandra.db.partitions.AbstractBTreePartition",14,3,28,31,986,0,0,1,212,204,0,0,0,"1,71",27,48,48
"org.apache.cassandra.db.partitions.AbstractBTreePartition.AbstractIterator",5,2,3,5,986,0,0,0,29,27,2,0,0,"1,00",0,6,3
"org.apache.cassandra.db.partitions.AbstractBTreePartition.Holder",3,5,1,6,0,0,0,0,17,16,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SliceableIterator",3,3,6,9,986,1,0,1,20,20,0,0,0,"1,67",2,6,5
"org.apache.cassandra.db.partitions.AbstractBTreePartition.SlicesIterator",4,5,5,10,986,1,0,1,32,32,0,0,0,"3,50",1,4,7
"org.apache.cassandra.db.partitions.AbstractUnfilteredPartitionIterator",0,0,2,2,0,0,0,2,10,10,0,0,0,"1,00",0,2,2
"org.apache.cassandra.db.partitions.AtomicBTreePartition",13,12,7,19,990,0,0,2,170,131,0,0,0,"3,71",6,22,26
"org.apache.cassandra.db.partitions.AtomicBTreePartition.RowUpdater",11,12,13,25,990,0,1,2,93,91,0,0,0,"1,60",4,26,16
"org.apache.cassandra.db.partitions.BasePartitionIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.db.partitions.CachedBTreePartition",4,5,7,12,986,0,0,5,120,80,0,0,0,"1,86",6,8,13
"org.apache.cassandra.db.partitions.CachedBTreePartition.Serializer",7,0,6,6,987,0,1,1,66,60,0,0,0,"1,00",2,7,3
"org.apache.cassandra.db.partitions.CachedPartition",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.db.partitions.FilteredPartition",15,0,3,3,986,0,0,2,57,51,0,0,0,"1,00",2,3,12
"org.apache.cassandra.db.partitions.ImmutableBTreePartition",12,1,6,7,986,0,0,3,58,38,0,0,0,"1,00",4,6,6
"org.apache.cassandra.db.partitions.Partition",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,10,n/a
"org.apache.cassandra.db.partitions.PartitionIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.cassandra.db.partitions.PartitionIterators",9,0,7,7,986,0,0,6,89,77,0,0,0,"1,60",4,12,16
"org.apache.cassandra.db.partitions.PartitionIterators.SingletonPartitionIterator",2,4,9,13,2,1,0,1,20,20,0,5,0,"1,33",1,4,4
"org.apache.cassandra.db.partitions.PartitionStatisticsCollector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.db.partitions.PartitionUpdate",67,9,34,43,986,0,0,9,491,313,1,0,0,"1,74",21,48,59
"org.apache.cassandra.db.partitions.PartitionUpdate.CounterMark",2,3,6,9,4,0,0,1,42,35,0,0,0,"1,17",4,6,7
"org.apache.cassandra.db.partitions.PartitionUpdate.PartitionUpdateSerializer",10,0,6,6,986,0,0,1,92,91,0,0,0,"2,17",5,17,13
"org.apache.cassandra.db.partitions.PurgeFunction",2,4,19,23,987,1,0,2,82,77,1,6,4,"1,78",6,11,16
"org.apache.cassandra.db.partitions.SingletonUnfilteredPartitionIterator",2,3,7,10,987,0,0,3,38,38,0,0,0,"1,14",4,7,8
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators",12,2,9,11,992,0,0,5,203,177,0,0,0,"1,21",7,12,35
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.MergeListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.db.partitions.UnfilteredPartitionIterators.Serializer",6,0,2,2,987,0,0,1,80,74,0,0,0,"1,71",1,2,12
"org.apache.cassandra.db.rows.AbstractCell",6,0,7,7,987,0,0,3,84,77,0,0,0,"2,71",4,16,19
"org.apache.cassandra.db.rows.AbstractRangeTombstoneMarker",1,1,8,9,987,0,0,2,42,42,0,0,0,"1,25",6,8,10
"org.apache.cassandra.db.rows.AbstractRow",5,0,9,9,987,0,0,4,126,120,0,0,0,"3,22",7,13,29
"org.apache.cassandra.db.rows.AbstractUnfilteredRowIterator",2,9,15,24,987,1,0,8,57,57,0,5,0,"1,00",7,9,9
"org.apache.cassandra.db.rows.BTreeRow",12,6,40,46,986,0,0,8,297,269,0,0,0,"1,85",37,60,74
"org.apache.cassandra.db.rows.BTreeRow.Builder",7,7,11,18,986,0,0,1,77,74,1,0,0,"1,27",3,22,14
"org.apache.cassandra.db.rows.BTreeRow.Builder.CellResolver",6,1,3,4,20,0,1,1,35,31,0,0,0,"2,50",1,4,5
"org.apache.cassandra.db.rows.BTreeRow.Builder.ComplexColumnDeletion",4,0,1,1,10,0,0,0,8,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.rows.BTreeRow.CellInLegacyOrderIterator",8,9,13,22,986,1,0,1,74,73,0,5,0,"2,86",6,11,20
"org.apache.cassandra.db.rows.BTreeRow.CellIterator",2,4,7,11,986,1,0,1,24,24,0,5,0,"6,00",1,3,6
"org.apache.cassandra.db.rows.BaseRowIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.db.rows.BufferCell",13,6,23,29,987,0,0,2,136,128,0,0,0,"1,48",22,31,34
"org.apache.cassandra.db.rows.BufferCell.Serializer",5,5,4,9,988,0,0,2,132,112,0,0,0,"8,25",3,7,33
"org.apache.cassandra.db.rows.Cell",33,4,14,18,986,0,0,13,97,33,0,0,0,"3,00",13,14,3
"org.apache.cassandra.db.rows.Cell.Serializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.db.rows.CellPath",26,2,9,11,986,0,0,4,51,47,2,0,0,"2,40",8,10,12
"org.apache.cassandra.db.rows.CellPath.CollectionCellPath",4,2,13,15,986,1,0,2,26,26,0,4,0,"1,00",4,8,5
"org.apache.cassandra.db.rows.CellPath.EmptyCellPath",2,0,12,12,986,1,0,4,19,19,0,4,0,"1,00",4,4,4
"org.apache.cassandra.db.rows.CellPath.Serializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.db.rows.Cells",6,0,6,6,989,0,0,2,200,113,0,0,0,"4,67",4,11,28
"org.apache.cassandra.db.rows.ColumnData",2,2,9,11,5,0,0,8,49,17,0,0,0,"1,00",6,9,2
"org.apache.cassandra.db.rows.ComplexColumnData",14,4,21,25,986,0,0,3,151,131,0,0,0,"1,67",17,45,35
"org.apache.cassandra.db.rows.ComplexColumnData.Builder",5,4,4,8,986,0,0,1,31,31,0,0,0,"1,50",1,12,6
"org.apache.cassandra.db.rows.CounterCells",1,1,2,3,987,0,0,1,9,9,0,0,0,"1,00",1,4,2
"org.apache.cassandra.db.rows.EncodingStats",14,8,5,13,4,0,0,1,92,65,0,0,0,"3,00",4,5,15
"org.apache.cassandra.db.rows.EncodingStats.Collector",4,6,15,21,986,0,1,3,78,77,0,0,0,"2,00",2,11,20
"org.apache.cassandra.db.rows.EncodingStats.Serializer",3,0,3,3,4,0,0,1,22,22,0,0,0,"1,00",2,6,3
"org.apache.cassandra.db.rows.LazilyInitializedUnfilteredRowIterator",2,4,18,22,987,1,0,2,66,59,0,5,0,"1,27",9,13,14
"org.apache.cassandra.db.rows.RangeTombstoneBoundMarker",2,1,19,20,987,0,0,10,107,101,0,0,0,"1,37",16,19,26
"org.apache.cassandra.db.rows.RangeTombstoneBoundaryMarker",2,2,21,23,987,0,0,6,122,111,0,0,0,"1,38",19,21,29
"org.apache.cassandra.db.rows.RangeTombstoneMarker",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,11,n/a
"org.apache.cassandra.db.rows.RangeTombstoneMarker.Merger",2,6,8,14,988,0,0,1,121,92,0,0,0,"2,88",4,11,23
"org.apache.cassandra.db.rows.Row",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,24,n/a
"org.apache.cassandra.db.rows.Row.Builder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,8,n/a
"org.apache.cassandra.db.rows.Row.Deletion",5,3,15,18,986,0,0,3,107,75,0,0,0,"1,20",13,16,18
"org.apache.cassandra.db.rows.Row.Merger",6,7,6,13,989,0,0,1,86,80,0,0,0,"3,17",3,18,19
"org.apache.cassandra.db.rows.Row.Merger.CellReducer",2,3,10,13,1,1,0,1,28,28,0,2,1,"1,40",1,5,7
"org.apache.cassandra.db.rows.Row.Merger.ColumnDataReducer",5,7,10,17,13,1,0,1,75,75,0,2,1,"3,20",1,9,16
"org.apache.cassandra.db.rows.RowAndDeletionMergeIterator",2,8,11,19,987,0,0,1,144,125,0,0,0,"2,45",8,12,27
"org.apache.cassandra.db.rows.RowDiffListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.db.rows.RowIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.db.rows.RowIterators",4,1,3,4,988,0,0,2,52,41,0,0,0,"1,40",1,6,7
"org.apache.cassandra.db.rows.Rows",6,1,6,7,987,0,0,4,255,214,0,0,0,"7,33",4,9,66
"org.apache.cassandra.db.rows.SerializationHelper",12,6,13,19,986,0,0,2,68,68,0,0,0,"1,38",9,23,18
"org.apache.cassandra.db.rows.SerializationHelper.Flag",6,3,0,3,0,n/a,0,0,15,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.rows.SliceableUnfilteredRowIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.db.rows.Unfiltered",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.db.rows.Unfiltered.Kind",2,2,0,2,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.db.rows.UnfilteredRowIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer",6,7,7,14,988,0,0,2,163,129,0,0,0,"3,50",4,14,28
"org.apache.cassandra.db.rows.UnfilteredRowIteratorSerializer.Header",1,7,2,9,0,0,0,0,32,32,0,0,0,"1,00",1,2,2
"org.apache.cassandra.db.rows.UnfilteredRowIterators",22,1,10,11,986,0,0,9,209,155,0,0,0,"1,24",8,15,26
"org.apache.cassandra.db.rows.UnfilteredRowIterators.MergeListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator",8,2,9,11,986,0,0,4,145,141,0,0,0,"3,11",6,15,28
"org.apache.cassandra.db.rows.UnfilteredRowIterators.UnfilteredRowMergeIterator.MergeReducer",3,4,10,14,2,1,0,1,51,50,0,1,2,"2,20",2,7,11
"org.apache.cassandra.db.rows.UnfilteredSerializer",4,11,31,42,7,0,0,4,454,402,0,0,0,"2,90",18,35,90
"org.apache.cassandra.db.rows.WrappingUnfilteredRowIterator",1,1,11,12,987,0,0,1,57,48,0,0,0,"1,00",9,11,11
"org.apache.cassandra.db.transform.BaseIterator",3,3,9,12,7,0,0,1,96,78,0,0,0,"2,00",6,12,14
"org.apache.cassandra.db.transform.BaseIterator.Stop",1,1,0,1,0,0,0,0,6,4,0,0,0,n/a,0,0,0
"org.apache.cassandra.db.transform.BasePartitions",4,0,8,8,986,0,2,3,74,73,0,0,0,"2,33",3,8,14
"org.apache.cassandra.db.transform.BaseRows",5,1,11,12,986,0,0,7,110,107,0,0,0,"1,91",8,12,21
"org.apache.cassandra.db.transform.Filter",1,2,6,8,1,0,0,3,43,43,0,0,0,"1,83",5,6,11
"org.apache.cassandra.db.transform.FilteredPartitions",5,0,4,4,987,0,1,1,30,24,0,0,0,"1,25",1,5,5
"org.apache.cassandra.db.transform.FilteredRows",6,0,6,6,986,0,1,2,29,26,0,0,1,"1,00",2,5,5
"org.apache.cassandra.db.transform.MoreContents",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.db.transform.MorePartitions",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.db.transform.MoreRows",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.db.transform.Stack",2,4,7,11,2,0,0,1,56,53,0,0,0,"1,71",2,8,12
"org.apache.cassandra.db.transform.Stack.MoreContentsHolder",1,2,1,3,0,0,0,0,11,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.transform.StoppingTransformation",5,2,6,8,986,0,0,1,49,40,1,0,0,"1,33",0,6,8
"org.apache.cassandra.db.transform.Transformation",29,0,19,19,986,0,0,11,124,77,23,0,0,"1,21",15,19,23
"org.apache.cassandra.db.transform.UnfilteredPartitions",3,1,5,6,987,0,1,2,18,17,0,0,0,"1,00",2,4,3
"org.apache.cassandra.db.transform.UnfilteredRows",4,1,8,9,990,0,1,2,28,28,0,0,1,"1,00",3,7,5
"org.apache.cassandra.db.view.TemporalRow",21,17,15,32,997,0,0,1,188,180,0,0,0,"2,67",12,44,40
"org.apache.cassandra.db.view.TemporalRow.Resolver",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.db.view.TemporalRow.Set",10,7,9,16,998,0,0,2,72,72,0,0,0,"1,56",5,16,14
"org.apache.cassandra.db.view.TemporalRow.TemporalCell",11,5,7,12,997,0,0,1,71,71,0,0,0,"2,57",6,11,18
"org.apache.cassandra.db.view.TemporalRow.TemporalCell.Versions",7,3,5,8,997,0,0,1,70,54,0,0,0,"3,40",3,9,17
"org.apache.cassandra.db.view.View",27,10,23,33,986,0,0,5,596,469,0,0,0,"4,43",20,41,102
"org.apache.cassandra.db.view.View.Columns",1,3,1,4,0,0,0,0,18,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.db.view.ViewBuilder",21,9,10,19,986,1,0,1,140,133,0,3,1,"3,67",1,19,22
"org.apache.cassandra.db.view.ViewManager",7,5,11,16,986,0,0,2,146,129,0,0,0,"3,00",4,16,33
"org.apache.cassandra.db.view.ViewManager.ForStore",3,1,8,9,986,0,0,1,45,45,0,0,0,"1,50",2,8,12
"org.apache.cassandra.db.view.ViewUtils",8,0,2,2,986,0,0,1,67,38,0,0,0,"5,00",1,9,10
"org.apache.cassandra.dht.AbstractBounds",20,5,26,31,986,0,0,9,144,118,0,0,0,"1,88",25,30,30
"org.apache.cassandra.dht.AbstractBounds.AbstractBoundsSerializer",5,4,6,10,986,0,0,1,81,74,0,0,0,"3,00",4,9,18
"org.apache.cassandra.dht.AbstractBounds.Boundary",3,2,1,3,0,0,0,0,11,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.dht.AbstractBounds.Type",1,2,0,2,0,n/a,0,0,5,5,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.dht.BootStrapper",14,5,9,14,986,1,0,1,151,143,0,3,0,"2,78",5,18,25
"org.apache.cassandra.dht.BootStrapper.StringSerializer",5,1,6,7,5,0,1,3,16,16,0,0,0,"1,00",2,4,3
"org.apache.cassandra.dht.Bounds",6,0,15,15,10,0,0,10,87,74,0,0,0,"1,13",14,16,17
"org.apache.cassandra.dht.ByteOrderedPartitioner",25,5,12,17,988,0,0,7,158,142,0,0,0,"1,76",12,20,30
"org.apache.cassandra.dht.ByteOrderedPartitioner.BytesToken",12,2,11,13,988,0,0,4,66,66,0,0,0,"1,18",9,15,13
"org.apache.cassandra.dht.ComparableObjectToken",0,2,8,10,0,0,0,3,53,53,0,0,0,"1,38",7,8,11
"org.apache.cassandra.dht.ExcludingBounds",1,0,13,13,1,0,0,9,71,66,0,0,0,"1,15",12,14,15
"org.apache.cassandra.dht.IPartitioner",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,10,n/a
"org.apache.cassandra.dht.IPartitionerDependentSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.dht.IncludingExcludingBounds",1,0,13,13,1,0,0,9,70,64,0,0,0,"1,08",12,14,14
"org.apache.cassandra.dht.LocalPartitioner",7,3,11,14,37,0,0,7,72,72,0,0,0,"1,00",10,14,16
"org.apache.cassandra.dht.LocalPartitioner.LocalToken",4,1,7,8,37,0,0,2,45,45,0,0,0,"1,29",6,8,9
"org.apache.cassandra.dht.Murmur3Partitioner",22,6,14,20,986,0,0,5,163,145,0,0,0,"1,37",14,19,26
"org.apache.cassandra.dht.Murmur3Partitioner.LongToken",7,2,10,12,986,0,0,3,57,57,0,0,0,"1,30",9,10,13
"org.apache.cassandra.dht.OrderPreservingPartitioner",13,5,12,17,988,0,0,8,163,147,0,0,0,"1,71",12,19,29
"org.apache.cassandra.dht.OrderPreservingPartitioner.StringToken",6,1,3,4,988,0,0,2,18,18,0,0,0,"1,00",2,4,3
"org.apache.cassandra.dht.RandomPartitioner",19,7,10,17,991,0,0,7,122,112,0,0,0,"1,60",10,18,24
"org.apache.cassandra.dht.RandomPartitioner.BigIntegerToken",10,1,4,5,991,0,0,2,23,22,0,0,0,"1,00",2,4,4
"org.apache.cassandra.dht.Range",78,1,35,36,10,0,0,12,409,307,1,0,0,"1,97",34,36,71
"org.apache.cassandra.dht.RangeStreamer",15,11,10,21,986,0,0,1,225,178,0,0,0,"3,60",7,30,36
"org.apache.cassandra.dht.RangeStreamer.FailureDetectorSourceFilter",4,1,3,4,2,0,1,1,16,12,0,0,0,"1,00",1,3,2
"org.apache.cassandra.dht.RangeStreamer.ISourceFilter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.dht.RangeStreamer.SingleDatacenterFilter",3,2,3,5,2,0,1,1,17,14,0,0,0,"1,00",1,3,2
"org.apache.cassandra.dht.RingPosition",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.dht.StreamStateStore",8,0,6,6,986,0,1,4,51,36,0,0,0,"2,00",2,7,10
"org.apache.cassandra.dht.Token",120,2,11,13,11,0,0,6,70,40,0,0,0,"1,33",11,12,8
"org.apache.cassandra.dht.Token.KeyBound",4,2,12,14,11,0,1,1,62,62,0,0,0,"2,00",9,12,20
"org.apache.cassandra.dht.Token.TokenFactory",5,0,5,5,13,0,0,4,8,8,0,0,0,n/a,4,5,0
"org.apache.cassandra.dht.Token.TokenSerializer",7,0,3,3,11,0,0,3,22,22,0,0,0,"1,00",2,5,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator",13,5,23,28,45,0,0,2,364,283,0,0,0,"2,39",17,42,55
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.BaseTokenInfo",6,7,5,12,45,1,0,1,38,21,2,2,0,"1,00",2,3,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CandidateInfo",6,8,7,15,45,2,0,1,17,13,0,3,1,"1,00",1,3,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.CircularList",4,2,2,4,0,0,0,1,34,26,1,0,0,"2,50",2,2,5
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupInfo",5,4,2,6,0,0,0,0,31,15,0,0,0,"1,50",1,2,3
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.GroupVisitor",4,2,6,8,45,0,0,1,40,35,2,0,0,"1,50",4,6,6
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.PopulateVisitor",3,2,8,10,45,1,0,1,11,11,0,4,0,"1,00",1,2,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.ReplicationVisitor",3,2,8,10,45,1,0,1,11,11,0,4,0,"1,00",1,2,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.TokenInfo",6,7,7,14,45,2,0,1,14,11,0,3,1,"1,00",1,3,2
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitAdjustmentTracker",2,1,3,4,45,0,0,1,55,46,0,0,0,"2,00",1,4,6
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.UnitInfo",6,6,3,9,45,0,0,0,36,26,0,0,0,"2,33",1,5,7
"org.apache.cassandra.dht.tokenallocator.ReplicationAwareTokenAllocator.Weighted",1,2,3,5,0,0,0,1,21,21,0,0,0,"1,00",2,3,3
"org.apache.cassandra.dht.tokenallocator.ReplicationStrategy",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.dht.tokenallocator.TokenAllocation",11,1,10,11,986,0,0,1,181,177,0,0,0,"1,84",9,28,35
"org.apache.cassandra.dht.tokenallocator.TokenAllocation.StrategyAdapter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.dht.tokenallocator.TokenAllocator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.exceptions.AlreadyExistsException",3,2,3,5,0,0,0,0,19,19,0,0,0,"1,00",0,3,3
"org.apache.cassandra.exceptions.AuthenticationException",6,0,1,1,0,0,0,0,7,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.CassandraException",0,1,3,4,0,0,0,1,18,18,0,0,0,"1,00",1,3,3
"org.apache.cassandra.exceptions.ConfigurationException",163,1,4,5,0,0,0,0,29,24,0,0,0,"1,00",0,4,4
"org.apache.cassandra.exceptions.ExceptionCode",3,20,2,22,3,n/a,0,1,44,39,n/a,0,0,"2,00",1,4,4
"org.apache.cassandra.exceptions.FunctionExecutionException",8,3,2,5,986,0,0,1,20,20,0,0,0,"1,00",1,5,2
"org.apache.cassandra.exceptions.InvalidRequestException",205,0,1,1,0,0,0,0,7,7,1,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.IsBootstrappingException",0,0,1,1,0,0,0,0,7,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.OverloadedException",1,0,1,1,0,0,0,0,7,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.PreparedQueryNotFoundException",3,1,2,3,2,0,0,1,16,16,0,0,0,"1,00",1,2,2
"org.apache.cassandra.exceptions.ReadFailureException",3,1,1,2,987,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.ReadTimeoutException",4,1,1,2,987,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.RepairException",3,1,3,4,987,0,0,1,22,19,0,0,0,"1,00",1,3,3
"org.apache.cassandra.exceptions.RequestExecutionException",25,0,2,2,0,0,0,0,11,11,0,0,0,"1,00",0,2,2
"org.apache.cassandra.exceptions.RequestFailureException",1,4,1,5,987,0,0,0,15,15,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.RequestTimeoutException",1,3,1,4,987,0,0,0,13,13,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.RequestValidationException",32,0,2,2,0,0,0,0,11,11,0,0,0,"1,00",0,2,2
"org.apache.cassandra.exceptions.StartupException",4,1,2,3,0,0,0,0,18,14,0,0,0,"1,00",0,2,2
"org.apache.cassandra.exceptions.SyntaxException",27,0,1,1,0,0,0,0,7,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.TransportException",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.exceptions.TruncateException",0,0,2,2,0,0,0,0,11,11,0,0,0,"1,00",0,2,2
"org.apache.cassandra.exceptions.UnauthorizedException",15,0,1,1,0,0,0,0,7,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.UnavailableException",4,3,3,6,986,0,0,0,21,21,0,0,0,"1,00",0,3,3
"org.apache.cassandra.exceptions.UnrecognizedEntityException",2,2,1,3,990,0,0,0,25,11,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.WriteFailureException",4,1,1,2,986,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.cassandra.exceptions.WriteTimeoutException",12,1,1,2,986,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.cassandra.gms.ApplicationState",15,25,0,25,0,n/a,0,0,29,28,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.gms.ArrayBackedBoundedStats",2,5,5,10,1,0,0,1,40,37,0,0,0,"1,60",3,5,8
"org.apache.cassandra.gms.ArrivalWindow",2,5,7,12,986,0,0,1,74,66,0,0,0,"1,43",5,11,10
"org.apache.cassandra.gms.EchoMessage",4,2,1,3,5,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.gms.EchoMessage.EchoMessageSerializer",4,0,6,6,5,0,1,3,14,14,0,0,0,"1,00",2,3,3
"org.apache.cassandra.gms.EndpointState",10,6,14,20,7,0,0,3,87,75,0,0,0,"1,07",8,14,15
"org.apache.cassandra.gms.EndpointStateSerializer",5,0,6,6,7,0,1,2,43,41,0,0,0,"2,00",2,6,6
"org.apache.cassandra.gms.FailureDetector",18,13,21,34,986,0,0,7,289,271,0,0,0,"2,48",11,30,52
"org.apache.cassandra.gms.FailureDetectorMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,9,n/a
"org.apache.cassandra.gms.GossipDigest",2,4,6,10,8,0,0,2,45,41,0,0,0,"1,17",5,6,7
"org.apache.cassandra.gms.GossipDigestAck",3,3,3,6,8,0,0,2,23,19,0,0,0,"1,00",2,3,3
"org.apache.cassandra.gms.GossipDigestAck2",3,2,2,4,8,0,0,1,17,13,0,0,0,"1,00",1,2,2
"org.apache.cassandra.gms.GossipDigestAck2Serializer",6,0,6,6,8,0,1,2,33,33,0,0,0,"2,00",2,7,6
"org.apache.cassandra.gms.GossipDigestAck2VerbHandler",3,1,2,3,986,0,1,1,22,21,0,0,0,"4,00",0,1,4
"org.apache.cassandra.gms.GossipDigestAckSerializer",6,0,6,6,8,0,1,2,36,36,0,0,0,"2,00",2,7,6
"org.apache.cassandra.gms.GossipDigestAckVerbHandler",6,1,2,3,986,0,1,1,48,46,0,0,0,"10,00",0,4,10
"org.apache.cassandra.gms.GossipDigestSerializationHelper",4,0,3,3,4,0,0,3,24,24,0,0,0,"2,00",2,3,6
"org.apache.cassandra.gms.GossipDigestSerializer",6,0,6,6,8,0,1,2,23,23,0,0,0,"1,00",2,8,3
"org.apache.cassandra.gms.GossipDigestSyn",3,4,2,6,7,0,0,1,21,17,0,0,0,"1,00",1,2,2
"org.apache.cassandra.gms.GossipDigestSynSerializer",6,0,6,6,7,0,1,2,24,24,0,0,0,"1,00",2,8,3
"org.apache.cassandra.gms.GossipDigestSynVerbHandler",7,1,3,4,986,0,1,1,90,73,0,0,0,"7,00",0,7,14
"org.apache.cassandra.gms.GossipShutdownVerbHandler",3,1,2,3,986,0,1,1,13,13,0,0,0,"2,00",0,1,2
"org.apache.cassandra.gms.Gossiper",48,25,79,104,986,0,0,3,1.263,1.021,0,0,0,"2,67",30,109,219
"org.apache.cassandra.gms.Gossiper.GossipTask",7,0,1,1,986,0,0,1,55,39,0,0,0,"4,00",0,13,4
"org.apache.cassandra.gms.GossiperMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.gms.HeartBeatState",2,3,8,11,6,0,0,2,42,39,0,0,0,"1,00",3,8,8
"org.apache.cassandra.gms.HeartBeatStateSerializer",5,0,6,6,6,0,1,3,16,16,0,0,0,"1,00",2,7,3
"org.apache.cassandra.gms.IEndpointStateChangeSubscriber",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.gms.IFailureDetectionEventListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.gms.IFailureDetector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.gms.TokenSerializer",4,1,2,3,34,0,0,2,29,29,0,0,0,"2,50",1,3,5
"org.apache.cassandra.gms.VersionGenerator",0,1,1,2,0,0,0,1,12,8,0,0,0,"1,00",1,1,1
"org.apache.cassandra.gms.VersionedValue",10,15,5,20,6,0,0,2,63,41,0,0,0,"1,00",3,5,5
"org.apache.cassandra.gms.VersionedValue.VersionedValueFactory",16,1,25,26,986,0,0,16,119,119,0,0,0,"1,00",24,29,25
"org.apache.cassandra.gms.VersionedValue.VersionedValueSerializer",5,0,7,7,6,0,1,2,22,22,0,0,0,"1,00",3,7,4
"org.apache.cassandra.hadoop.ColumnFamilySplit",3,4,11,15,1,0,0,1,86,81,0,0,0,"1,27",6,11,14
"org.apache.cassandra.hadoop.ConfigHelper",13,28,64,92,987,0,0,16,471,387,0,0,0,"1,17",35,66,75
"org.apache.cassandra.hadoop.HadoopCompat",4,13,13,26,0,0,0,6,239,188,0,0,0,"1,15",10,13,15
"org.apache.cassandra.hadoop.ReporterWrapper",0,1,9,10,0,0,0,2,41,37,0,0,0,"1,00",4,9,9
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat",3,4,17,21,990,0,0,12,136,93,0,0,0,"1,18",8,19,20
"org.apache.cassandra.hadoop.cql3.CqlBulkOutputFormat.NullOutputCommitter",1,0,6,6,0,0,0,6,12,12,0,0,0,"1,00",1,6,6
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter",16,21,11,32,997,0,0,1,211,180,0,0,0,"2,25",2,33,27
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.ExternalClient",3,7,13,20,989,2,0,1,27,27,0,8,0,"1,50",1,6,3
"org.apache.cassandra.hadoop.cql3.CqlBulkRecordWriter.NullOutputHandler",2,0,8,8,1,0,1,4,7,7,0,0,0,"1,00",0,4,4
"org.apache.cassandra.hadoop.cql3.CqlConfigHelper",1,27,65,92,988,0,0,5,467,442,0,0,0,"1,46",41,66,95
"org.apache.cassandra.hadoop.cql3.CqlInputFormat",2,6,9,15,988,0,0,3,216,188,0,0,0,"3,11",8,10,28
"org.apache.cassandra.hadoop.cql3.CqlInputFormat.SplitCallable",1,3,2,5,988,0,0,1,47,41,0,0,0,"3,50",1,3,7
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat",1,2,6,8,1,0,0,6,87,37,0,0,0,"1,50",3,6,9
"org.apache.cassandra.hadoop.cql3.CqlOutputFormat.NullOutputCommitter",1,0,6,6,0,0,0,6,15,12,0,0,0,"1,00",1,6,6
"org.apache.cassandra.hadoop.cql3.CqlRecordReader",8,16,18,34,992,0,0,3,235,191,0,0,0,"2,05",14,28,39
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.RowIterator",7,6,8,14,992,1,0,1,51,43,0,5,0,"4,00",1,11,8
"org.apache.cassandra.hadoop.cql3.CqlRecordReader.WrappedRow",1,1,65,66,0,0,0,1,328,328,0,0,0,"1,00",64,65,65
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter",7,12,10,22,991,0,0,1,198,138,0,0,0,"2,40",3,23,24
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.NativeRingCache",4,4,4,8,988,0,0,1,50,50,0,0,0,"2,00",2,9,8
"org.apache.cassandra.hadoop.cql3.CqlRecordWriter.RangeClient",1,5,7,12,991,0,0,1,187,156,0,0,0,"3,71",2,7,26
"org.apache.cassandra.hadoop.cql3.LimitedLocalNodeFirstLocalBalancingPolicy",0,4,12,16,0,0,0,3,151,137,0,0,0,"1,77",4,12,23
"org.apache.cassandra.hints.ChecksummedDataInput",6,13,38,51,992,2,0,3,104,91,0,23,1,"1,25",4,19,15
"org.apache.cassandra.hints.ChecksummedDataInput.Builder",3,7,12,19,992,1,0,1,11,11,0,7,1,"1,00",1,4,2
"org.apache.cassandra.hints.EncodedHintMessage",5,4,2,6,988,0,0,1,26,17,0,0,0,"1,00",1,3,2
"org.apache.cassandra.hints.EncodedHintMessage.Serializer",6,0,6,6,988,0,1,2,24,24,0,0,0,"1,67",2,8,5
"org.apache.cassandra.hints.Hint",3,4,5,9,6,0,0,3,69,38,0,0,0,"1,80",3,5,9
"org.apache.cassandra.hints.Hint.Serializer",5,0,6,6,6,0,1,2,22,22,0,0,0,"1,00",2,8,3
"org.apache.cassandra.hints.HintMessage",5,4,3,7,986,0,0,1,37,25,0,0,0,"1,00",1,4,3
"org.apache.cassandra.hints.HintMessage.Serializer",8,0,6,6,986,0,1,1,42,33,0,0,0,"1,00",2,13,3
"org.apache.cassandra.hints.HintResponse",5,3,1,4,986,0,0,0,13,10,0,0,0,"1,00",0,2,1
"org.apache.cassandra.hints.HintResponse.Serializer",4,0,6,6,986,0,1,3,14,14,0,0,0,"1,00",2,3,3
"org.apache.cassandra.hints.HintVerbHandler",6,1,3,4,986,0,1,1,50,36,0,0,0,"2,00",0,5,4
"org.apache.cassandra.hints.HintsBuffer",5,6,14,20,988,0,0,2,144,123,0,0,0,"1,67",10,19,25
"org.apache.cassandra.hints.HintsBuffer.Allocation",6,3,4,7,988,0,0,2,44,41,0,0,0,"1,25",0,9,5
"org.apache.cassandra.hints.HintsBufferPool",2,4,8,12,988,0,0,1,74,64,0,0,0,"2,00",5,9,16
"org.apache.cassandra.hints.HintsBufferPool.FlushCallback",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.hints.HintsCatalog",3,2,10,12,17,0,0,2,93,72,0,0,0,"1,50",4,13,15
"org.apache.cassandra.hints.HintsDescriptor",6,7,17,24,987,0,0,2,162,155,0,0,0,"1,29",12,21,22
"org.apache.cassandra.hints.HintsDispatchExecutor",4,5,7,12,989,0,0,1,72,55,0,0,0,"1,14",4,11,8
"org.apache.cassandra.hints.HintsDispatchExecutor.DispatchHintsTask",6,3,4,7,989,0,0,1,82,74,0,0,0,"3,00",1,7,12
"org.apache.cassandra.hints.HintsDispatchExecutor.TransferHintsTask",2,2,3,5,989,0,0,1,45,41,0,0,0,"1,67",1,4,5
"org.apache.cassandra.hints.HintsDispatchTrigger",3,4,4,8,987,0,0,1,52,39,0,0,0,"1,75",1,6,7
"org.apache.cassandra.hints.HintsDispatcher",6,6,13,19,990,0,0,2,125,99,0,0,0,"1,69",10,18,22
"org.apache.cassandra.hints.HintsDispatcher.Action",1,3,0,3,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.hints.HintsDispatcher.Callback",8,3,5,8,988,0,1,2,34,34,0,0,0,"1,25",2,7,5
"org.apache.cassandra.hints.HintsDispatcher.Callback.Outcome",2,3,0,3,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.hints.HintsReader",5,6,7,13,15,0,0,4,65,52,0,0,0,"1,00",4,7,7
"org.apache.cassandra.hints.HintsReader.BuffersIterator",5,3,10,13,15,1,0,1,59,54,0,5,0,"2,50",3,6,10
"org.apache.cassandra.hints.HintsReader.HintsIterator",5,3,10,13,15,1,0,1,73,68,0,5,0,"2,50",3,5,10
"org.apache.cassandra.hints.HintsReader.Page",4,1,3,4,15,0,0,1,16,16,0,0,0,"1,00",2,5,3
"org.apache.cassandra.hints.HintsReader.PagesIterator",4,2,7,9,15,1,0,1,11,11,0,5,0,"2,00",1,3,2
"org.apache.cassandra.hints.HintsService",10,13,14,27,986,0,0,3,242,156,0,0,0,"1,50",1,19,21
"org.apache.cassandra.hints.HintsServiceMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.hints.HintsStore",4,8,20,28,988,0,0,2,146,131,0,0,0,"1,30",10,22,26
"org.apache.cassandra.hints.HintsWriteExecutor",7,4,11,15,991,0,0,1,110,89,0,0,0,"1,36",5,17,15
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferPoolTask",1,1,2,3,991,0,0,1,14,14,0,0,0,"1,00",0,3,2
"org.apache.cassandra.hints.HintsWriteExecutor.FlushBufferTask",1,2,2,4,991,0,0,1,24,24,0,0,0,"1,50",0,3,3
"org.apache.cassandra.hints.HintsWriteExecutor.FsyncWritersTask",1,1,2,3,991,0,0,1,13,13,0,0,0,"1,00",0,2,2
"org.apache.cassandra.hints.HintsWriteExecutor.PartiallyFlushBufferPoolTask",1,2,2,4,991,0,0,1,16,16,0,0,0,"1,00",0,3,2
"org.apache.cassandra.hints.HintsWriter",8,8,8,16,989,0,0,2,83,82,0,0,0,"1,00",3,15,8
"org.apache.cassandra.hints.HintsWriter.Session",5,3,8,11,989,0,0,1,111,82,0,0,0,"1,88",1,14,15
"org.apache.cassandra.hints.LegacyHintsMigrator",13,5,13,18,987,0,0,2,172,157,0,0,0,"1,62",3,22,21
"org.apache.cassandra.index.Index",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,19,n/a
"org.apache.cassandra.index.Index.Indexer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.index.Index.Searcher",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.index.IndexRegistry",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.index.SecondaryIndexBuilder",12,7,8,15,986,1,0,1,42,39,0,4,0,"1,67",1,12,5
"org.apache.cassandra.index.SecondaryIndexManager",57,5,43,48,986,0,0,4,610,412,0,0,0,"1,77",21,63,76
"org.apache.cassandra.index.SecondaryIndexManager.CleanupGCTransaction",2,5,5,10,3,0,0,2,51,44,0,0,0,"1,80",0,5,9
"org.apache.cassandra.index.SecondaryIndexManager.IndexGCTransaction",4,5,4,9,8,0,0,1,82,73,0,0,0,"2,25",0,4,18
"org.apache.cassandra.index.SecondaryIndexManager.WriteTimeTransaction",2,1,8,9,4,0,0,1,84,70,0,0,0,"1,67",1,8,20
"org.apache.cassandra.index.internal.CassandraIndex",50,7,73,80,986,0,1,7,672,576,6,0,0,"1,84",39,87,116
"org.apache.cassandra.index.internal.CassandraIndexFunctions",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.index.internal.CassandraIndexSearcher",11,4,8,12,986,0,1,1,133,114,2,0,0,"2,50",6,11,15
"org.apache.cassandra.index.internal.IndexEntry",9,5,1,6,986,0,0,0,25,20,0,0,0,"1,00",0,1,1
"org.apache.cassandra.index.internal.composites.ClusteringColumnIndex",6,5,73,78,987,1,1,2,63,46,0,24,0,"1,80",4,12,9
"org.apache.cassandra.index.internal.composites.CollectionEntryIndex",10,0,3,3,987,0,0,2,32,26,0,0,0,"1,33",2,12,4
"org.apache.cassandra.index.internal.composites.CollectionKeyIndex",9,0,4,4,987,0,0,3,30,24,0,0,0,"1,00",3,8,4
"org.apache.cassandra.index.internal.composites.CollectionKeyIndexBase",5,5,71,76,987,1,1,2,46,31,0,24,0,"1,67",2,8,5
"org.apache.cassandra.index.internal.composites.CollectionValueIndex",7,5,74,79,987,1,1,4,67,55,0,23,1,"2,00",5,10,12
"org.apache.cassandra.index.internal.composites.CompositesSearcher",13,4,13,17,986,1,1,1,180,162,0,2,0,"2,00",3,7,30
"org.apache.cassandra.index.internal.composites.PartitionKeyIndex",7,5,73,78,987,1,1,3,61,43,0,24,0,"1,40",4,13,7
"org.apache.cassandra.index.internal.composites.RegularColumnIndex",6,5,73,78,987,1,1,4,61,44,0,24,0,"1,40",4,13,7
"org.apache.cassandra.index.internal.keys.KeysIndex",10,5,74,79,987,1,1,5,41,40,0,24,0,"1,17",5,11,7
"org.apache.cassandra.index.internal.keys.KeysSearcher",8,4,11,15,986,1,1,1,137,128,0,2,0,"1,80",2,6,18
"org.apache.cassandra.index.transactions.CleanupTransaction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.index.transactions.CompactionTransaction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.index.transactions.IndexTransaction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.index.transactions.IndexTransaction.Type",4,3,0,3,0,n/a,0,0,8,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.index.transactions.UpdateTransaction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.io.FSError",6,1,2,3,0,0,0,1,23,18,0,0,0,"2,00",1,2,4
"org.apache.cassandra.io.FSReadError",18,0,3,3,0,0,0,0,16,16,0,0,0,"1,00",1,3,3
"org.apache.cassandra.io.FSWriteError",26,0,3,3,0,0,0,0,16,16,0,0,0,"1,00",1,3,3
"org.apache.cassandra.io.ISSTableSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.io.ISerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.io.IVersionedSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.io.compress.BufferType",12,2,2,4,0,n/a,0,2,22,22,n/a,0,0,"1,33",2,2,4
"org.apache.cassandra.io.compress.CompressedRandomAccessReader",5,4,8,12,988,0,0,1,178,162,0,0,0,"2,50",4,9,20
"org.apache.cassandra.io.compress.CompressedRandomAccessReader.Builder",2,1,5,6,988,0,0,3,35,35,0,0,0,"1,00",3,6,5
"org.apache.cassandra.io.compress.CompressedSequentialWriter",16,21,40,61,995,1,1,3,189,167,0,22,4,"1,78",4,20,16
"org.apache.cassandra.io.compress.CompressedSequentialWriter.CompressedFileWriterMark",2,4,1,5,1,0,1,0,19,14,0,0,0,"1,00",0,1,1
"org.apache.cassandra.io.compress.CompressedSequentialWriter.TransactionalProxy",7,2,26,28,995,2,1,2,34,34,0,10,4,"1,50",3,13,6
"org.apache.cassandra.io.compress.CompressionMetadata",25,7,11,18,986,0,0,2,198,158,0,0,0,"1,92",7,24,23
"org.apache.cassandra.io.compress.CompressionMetadata.Chunk",14,3,4,7,6,0,0,0,32,29,0,0,0,"1,50",3,4,6
"org.apache.cassandra.io.compress.CompressionMetadata.ChunkSerializer",5,0,6,6,6,0,1,2,18,18,0,0,0,"1,00",2,6,3
"org.apache.cassandra.io.compress.CompressionMetadata.Writer",7,9,30,39,987,1,1,4,129,106,0,10,1,"1,50",7,22,18
"org.apache.cassandra.io.compress.CorruptBlockException",0,0,4,4,0,0,0,0,19,19,0,0,0,"1,00",0,4,4
"org.apache.cassandra.io.compress.DeflateCompressor",2,3,13,16,987,0,0,6,165,159,0,0,0,"1,67",8,14,25
"org.apache.cassandra.io.compress.ICompressor",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.io.compress.LZ4Compressor",1,4,9,13,0,0,0,5,94,94,0,0,0,"1,22",6,9,11
"org.apache.cassandra.io.compress.SnappyCompressor",1,2,9,11,987,0,0,8,76,69,0,0,0,"1,11",7,10,10
"org.apache.cassandra.io.sstable.AbstractSSTableSimpleWriter",7,5,7,12,987,0,0,1,72,63,0,0,0,"1,71",5,9,12
"org.apache.cassandra.io.sstable.BloomFilterTracker",1,4,6,10,0,0,0,2,47,47,0,0,0,"1,00",4,6,6
"org.apache.cassandra.io.sstable.CQLSSTableWriter",8,3,9,12,991,0,0,4,218,97,0,0,0,"2,00",7,12,18
"org.apache.cassandra.io.sstable.CQLSSTableWriter.Builder",17,7,13,20,991,0,0,1,234,125,0,0,0,"2,00",10,22,26
"org.apache.cassandra.io.sstable.Component",32,19,8,27,4,0,0,2,117,99,0,0,0,"3,38",6,10,27
"org.apache.cassandra.io.sstable.Component.Type",1,11,3,14,4,n/a,0,1,41,30,n/a,0,0,"2,00",1,3,6
"org.apache.cassandra.io.sstable.CorruptSSTableException",16,1,2,3,0,0,0,0,13,13,0,0,0,"1,00",0,2,2
"org.apache.cassandra.io.sstable.Descriptor",57,13,26,39,986,0,0,2,276,221,0,0,0,"1,62",21,36,42
"org.apache.cassandra.io.sstable.Downsampling",6,3,4,7,0,0,0,1,112,70,0,0,0,"4,25",4,4,17
"org.apache.cassandra.io.sstable.ISSTableScanner",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.io.sstable.IndexHelper",3,0,2,2,1,0,0,1,54,29,0,0,0,"3,50",1,3,7
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo",11,6,2,8,0,0,0,1,30,28,0,0,0,"1,50",1,2,3
"org.apache.cassandra.io.sstable.IndexHelper.IndexInfo.Serializer",10,3,4,7,986,0,0,1,59,55,0,0,0,"2,00",2,14,8
"org.apache.cassandra.io.sstable.IndexSummary",11,11,25,36,991,1,0,3,202,148,0,0,0,"1,23",18,25,27
"org.apache.cassandra.io.sstable.IndexSummary.IndexSummarySerializer",4,0,2,2,991,0,0,2,80,68,0,0,0,"4,50",1,5,9
"org.apache.cassandra.io.sstable.IndexSummaryBuilder",7,14,16,30,990,0,0,2,250,190,0,0,0,"1,88",9,28,30
"org.apache.cassandra.io.sstable.IndexSummaryBuilder.ReadableBoundary",3,5,1,6,34,0,0,0,21,16,0,0,0,"1,00",0,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManager",16,9,15,24,990,0,0,2,378,338,0,0,0,"3,00",11,43,51
"org.apache.cassandra.io.sstable.IndexSummaryManager.ReadRateComparator",2,1,2,3,987,0,0,1,23,22,0,0,0,"2,50",1,2,5
"org.apache.cassandra.io.sstable.IndexSummaryManager.ResampleEntry",2,3,1,4,987,0,0,0,12,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.io.sstable.IndexSummaryManagerMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,8,n/a
"org.apache.cassandra.io.sstable.KeyIterator",9,5,12,17,988,1,1,1,39,39,0,5,0,"1,20",3,15,6
"org.apache.cassandra.io.sstable.KeyIterator.In",3,2,7,9,987,0,0,1,39,39,0,0,0,"1,29",4,12,9
"org.apache.cassandra.io.sstable.ReducingKeyIterator",10,2,9,11,986,0,1,2,76,73,0,0,0,"1,45",4,10,16
"org.apache.cassandra.io.sstable.SSTable",23,8,20,28,986,0,0,4,250,198,1,0,0,"1,85",16,29,37
"org.apache.cassandra.io.sstable.SSTableIdentityIterator",6,8,18,26,987,1,0,6,94,85,0,5,0,"1,17",10,19,14
"org.apache.cassandra.io.sstable.SSTableLoader",16,8,11,19,986,0,0,2,168,153,1,0,0,"2,55",5,25,28
"org.apache.cassandra.io.sstable.SSTableLoader.Client",6,1,7,8,986,0,0,6,53,31,2,0,0,"1,20",3,7,6
"org.apache.cassandra.io.sstable.SSTableMultiWriter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,11,n/a
"org.apache.cassandra.io.sstable.SSTableRewriter",16,17,36,53,986,1,1,2,282,225,0,10,1,"2,61",10,57,47
"org.apache.cassandra.io.sstable.SSTableRewriter.InvalidateKeys",5,2,2,4,986,0,0,1,19,19,0,0,0,"2,50",0,5,5
"org.apache.cassandra.io.sstable.SSTableSimpleIterator",7,5,9,14,990,1,0,2,26,20,2,5,0,"1,50",2,5,3
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.CurrentFormatIterator",4,7,11,18,990,2,0,1,27,27,0,5,0,"1,67",2,5,5
"org.apache.cassandra.io.sstable.SSTableSimpleIterator.OldFormatIterator",7,6,11,17,990,2,0,1,60,53,0,5,0,"3,00",2,11,9
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter",9,7,9,16,991,0,0,1,128,109,0,0,0,"1,70",2,13,17
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.Buffer",3,0,0,0,987,0,0,0,2,1,0,0,0,n/a,0,0,0
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.DiskWriter",4,1,1,2,991,0,0,1,29,28,0,0,0,"5,00",0,2,5
"org.apache.cassandra.io.sstable.SSTableSimpleUnsortedWriter.SyncException",1,0,1,1,0,0,0,0,7,7,0,0,0,"1,00",0,1,1
"org.apache.cassandra.io.sstable.SSTableSimpleWriter",2,3,5,8,987,0,0,1,59,47,0,0,0,"2,20",2,5,11
"org.apache.cassandra.io.sstable.SSTableTxnWriter",11,4,31,35,986,1,1,2,78,72,0,10,1,"1,00",11,22,13
"org.apache.cassandra.io.sstable.SimpleSSTableMultiWriter",10,1,14,15,986,0,0,2,70,70,0,0,0,"1,00",11,25,14
"org.apache.cassandra.io.sstable.SnapshotDeletingTask",7,3,5,8,986,0,0,1,42,39,0,0,0,"1,20",1,7,6
"org.apache.cassandra.io.sstable.format.SSTableFormat",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.io.sstable.format.SSTableFormat.Type",13,4,2,6,986,n/a,0,1,30,24,n/a,0,0,"2,50",1,3,5
"org.apache.cassandra.io.sstable.format.SSTableReader",178,25,134,159,986,0,1,10,1.678,1.305,1,0,0,"1,78",107,165,240
"org.apache.cassandra.io.sstable.format.SSTableReader.AndThen",1,2,3,5,0,0,0,2,21,21,0,0,0,"1,33",1,3,4
"org.apache.cassandra.io.sstable.format.SSTableReader.DropPageCache",1,5,2,7,0,0,0,1,23,23,0,0,0,"1,50",0,2,3
"org.apache.cassandra.io.sstable.format.SSTableReader.Factory",5,0,1,1,986,0,0,1,10,10,1,0,0,n/a,1,1,0
"org.apache.cassandra.io.sstable.format.SSTableReader.GlobalTidy",6,5,6,11,986,0,0,1,91,72,0,0,0,"2,00",2,10,14
"org.apache.cassandra.io.sstable.format.SSTableReader.InstanceTidier",7,11,5,16,986,0,0,2,87,74,0,0,0,"2,50",1,10,15
"org.apache.cassandra.io.sstable.format.SSTableReader.OpenReason",11,4,0,4,0,n/a,0,0,7,7,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator",14,3,1,4,3,0,0,1,14,7,3,0,0,n/a,1,1,0
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.Equals",1,0,2,2,3,1,0,1,4,4,0,0,0,"1,00",1,1,1
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.GreaterThan",1,0,2,2,3,1,0,1,4,4,0,0,0,"2,00",1,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.Operator.GreaterThanOrEqualTo",1,0,2,2,3,1,0,1,4,4,0,0,0,"2,00",1,1,2
"org.apache.cassandra.io.sstable.format.SSTableReader.SizeComparator",4,0,1,1,986,0,0,1,7,7,0,0,0,"1,00",1,2,1
"org.apache.cassandra.io.sstable.format.SSTableReader.UniqueIdentifier",2,0,0,0,0,0,0,0,2,1,0,0,0,n/a,0,0,0
"org.apache.cassandra.io.sstable.format.SSTableWriter",38,13,46,59,986,1,1,11,192,161,1,11,0,"1,24",22,51,26
"org.apache.cassandra.io.sstable.format.SSTableWriter.Factory",8,0,1,1,986,0,0,1,10,10,1,0,0,n/a,1,1,0
"org.apache.cassandra.io.sstable.format.SSTableWriter.TransactionalProxy",4,4,18,22,8,1,1,0,7,5,1,11,0,n/a,0,0,0
"org.apache.cassandra.io.sstable.format.Version",32,3,22,25,1,0,0,18,73,57,1,0,0,"1,71",21,22,12
"org.apache.cassandra.io.sstable.format.big.BigFormat",20,4,11,15,986,0,1,5,38,35,0,0,0,"1,00",5,8,6
"org.apache.cassandra.io.sstable.format.big.BigFormat.BigVersion",4,17,37,54,986,1,0,14,144,118,0,5,0,"1,19",15,17,19
"org.apache.cassandra.io.sstable.format.big.BigFormat.ReaderFactory",9,0,2,2,986,1,0,1,8,8,0,0,0,"1,00",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigFormat.WriterFactory",8,0,2,2,986,1,0,1,14,14,0,0,0,"1,00",1,1,1
"org.apache.cassandra.io.sstable.format.big.BigTableReader",19,20,120,140,994,1,1,6,187,145,0,94,0,"3,86",6,22,27
"org.apache.cassandra.io.sstable.format.big.BigTableScanner",15,11,25,36,990,0,2,5,193,187,0,0,0,"1,75",15,46,35
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.EmptySSTableScanner",4,1,13,14,987,0,2,6,36,36,0,0,0,"1,00",7,9,8
"org.apache.cassandra.io.sstable.format.big.BigTableScanner.KeyScanningIterator",8,6,7,13,990,1,0,1,82,74,0,5,0,"4,50",1,8,9
"org.apache.cassandra.io.sstable.format.big.BigTableWriter",21,19,53,72,1.004,2,1,3,188,171,1,24,0,"1,71",8,33,24
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.IndexWriter",15,7,28,35,1.004,1,1,1,119,105,0,10,1,"1,17",4,18,14
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.StatsCollector",3,2,15,17,987,1,0,1,50,50,0,5,4,"1,33",4,9,8
"org.apache.cassandra.io.sstable.format.big.BigTableWriter.TransactionalProxy",9,4,22,26,1.004,2,1,2,34,31,0,10,1,"1,25",3,10,5
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata",1,2,4,6,9,0,0,1,35,27,0,0,0,"1,50",3,4,6
"org.apache.cassandra.io.sstable.metadata.CompactionMetadata.CompactionMetadataSerializer",7,0,3,3,9,0,0,2,22,22,0,0,0,"1,33",2,7,4
"org.apache.cassandra.io.sstable.metadata.IMetadataComponentSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.io.sstable.metadata.IMetadataSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.io.sstable.metadata.LegacyMetadataSerializer",15,0,2,2,986,0,0,1,105,96,0,0,0,"5,50",1,14,11
"org.apache.cassandra.io.sstable.metadata.MetadataCollector",43,17,31,48,986,0,1,2,230,216,0,0,0,"1,46",16,45,38
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxIntTracker",1,5,5,10,0,0,0,1,40,40,0,0,0,"2,00",2,5,10
"org.apache.cassandra.io.sstable.metadata.MetadataCollector.MinMaxLongTracker",1,5,5,10,0,0,0,1,40,40,0,0,0,"2,00",2,5,10
"org.apache.cassandra.io.sstable.metadata.MetadataComponent",4,0,2,2,0,0,0,1,14,8,1,0,0,"1,00",2,2,1
"org.apache.cassandra.io.sstable.metadata.MetadataSerializer",10,1,7,8,986,0,0,2,117,96,0,0,0,"2,00",3,15,14
"org.apache.cassandra.io.sstable.metadata.MetadataType",8,5,1,6,986,n/a,0,0,19,12,n/a,0,0,"1,00",0,1,1
"org.apache.cassandra.io.sstable.metadata.StatsMetadata",14,19,8,27,986,0,0,2,182,171,0,0,0,"1,38",7,11,11
"org.apache.cassandra.io.sstable.metadata.StatsMetadata.StatsMetadataSerializer",12,0,3,3,986,0,0,1,110,107,0,0,0,"7,00",2,20,21
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata",1,3,4,7,7,0,0,1,39,33,0,0,0,"1,50",3,4,6
"org.apache.cassandra.io.sstable.metadata.ValidationMetadata.ValidationMetadataSerializer",5,0,3,3,7,0,0,2,16,16,0,0,0,"1,00",2,5,3
"org.apache.cassandra.io.util.BufferedDataOutputStreamPlus",12,4,33,37,17,0,0,2,275,252,0,0,0,"1,76",2,38,58
"org.apache.cassandra.io.util.BufferedSegmentedFile",3,0,3,3,0,0,0,1,15,15,0,0,0,"1,00",1,3,3
"org.apache.cassandra.io.util.BufferedSegmentedFile.Builder",1,0,1,1,1,0,0,1,8,8,0,0,0,"2,00",1,2,2
"org.apache.cassandra.io.util.ChannelProxy",12,3,19,22,5,1,0,3,106,97,0,4,0,"1,00",9,16,13
"org.apache.cassandra.io.util.ChannelProxy.Cleanup",3,2,5,7,2,0,1,1,25,25,0,0,0,"1,00",1,3,3
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader",5,1,5,6,14,0,0,2,55,54,0,0,0,"1,40",0,7,7
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.Builder",3,1,2,3,14,0,0,1,19,19,0,0,0,"1,00",1,3,2
"org.apache.cassandra.io.util.ChecksummedRandomAccessReader.CorruptFileException",3,1,1,2,0,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.io.util.ChecksummedSequentialWriter",3,2,3,5,2,0,0,2,26,26,0,0,0,"1,00",1,3,3
"org.apache.cassandra.io.util.ChecksummedSequentialWriter.TransactionalProxy",1,0,3,3,2,0,0,1,21,21,0,0,0,"1,33",2,3,4
"org.apache.cassandra.io.util.CompressedSegmentedFile",9,4,11,15,990,0,0,6,63,63,0,0,0,"1,18",6,17,13
"org.apache.cassandra.io.util.CompressedSegmentedFile.Builder",3,1,3,4,1.000,0,0,1,18,18,0,0,0,"1,33",2,6,4
"org.apache.cassandra.io.util.CompressedSegmentedFile.Cleanup",3,2,2,4,990,0,0,1,23,22,0,0,0,"2,00",0,4,4
"org.apache.cassandra.io.util.DataInputBuffer",25,0,6,6,0,0,0,3,43,35,0,0,0,"1,33",2,6,8
"org.apache.cassandra.io.util.DataInputPlus",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.io.util.DataInputPlus.DataInputStreamPlus",13,0,5,5,2,0,1,0,10,7,0,3,0,"1,00",0,1,1
"org.apache.cassandra.io.util.DataIntegrityMetadata",5,0,2,2,989,0,0,2,11,11,0,0,0,"1,00",2,4,2
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumValidator",6,4,6,10,987,0,0,1,43,43,0,0,0,"1,17",1,9,7
"org.apache.cassandra.io.util.DataIntegrityMetadata.ChecksumWriter",4,3,4,7,987,0,0,1,65,59,0,0,0,"1,50",0,6,6
"org.apache.cassandra.io.util.DataIntegrityMetadata.FileDigestValidator",7,5,3,8,987,0,0,1,41,39,0,0,0,"1,67",0,8,5
"org.apache.cassandra.io.util.DataOutputBuffer",34,0,14,14,1,0,0,8,77,71,1,0,0,"1,00",7,14,14
"org.apache.cassandra.io.util.DataOutputBuffer.GrowingChannel",1,0,3,3,1,0,0,3,17,17,0,0,0,"1,00",2,4,3
"org.apache.cassandra.io.util.DataOutputBufferFixed",9,0,5,5,0,0,0,2,37,25,0,0,0,"1,00",0,5,5
"org.apache.cassandra.io.util.DataOutputPlus",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,9,n/a
"org.apache.cassandra.io.util.DataOutputStreamPlus",24,3,4,7,20,0,0,1,89,77,0,0,0,"1,62",2,4,13
"org.apache.cassandra.io.util.DiskAwareRunnable",4,0,4,4,986,1,0,1,15,11,1,1,0,"2,00",2,3,2
"org.apache.cassandra.io.util.FastByteArrayInputStream",2,4,10,14,1,0,0,3,187,69,0,0,0,"1,90",5,10,19
"org.apache.cassandra.io.util.FileDataInput",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,8,n/a
"org.apache.cassandra.io.util.FileMark",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.cassandra.io.util.FileSegmentInputStream",1,2,11,13,0,0,0,7,61,57,0,0,0,"1,09",8,11,12
"org.apache.cassandra.io.util.FileUtils",73,8,43,51,986,0,0,19,520,493,0,0,0,"2,02",14,54,89
"org.apache.cassandra.io.util.ICompressedFile",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.io.util.LengthAvailableInputStream",0,1,10,11,0,0,0,5,65,61,0,0,0,"1,20",6,10,12
"org.apache.cassandra.io.util.Memory",11,7,31,38,986,0,0,1,356,330,1,0,0,"1,97",13,36,61
"org.apache.cassandra.io.util.MemoryInputStream",2,3,6,9,2,0,0,1,39,39,0,0,0,"1,17",3,7,7
"org.apache.cassandra.io.util.MemoryOutputStream",1,2,4,6,0,0,0,1,26,23,0,0,0,"1,00",1,4,4
"org.apache.cassandra.io.util.MmappedRegions",8,5,20,25,991,1,0,5,130,113,0,4,0,"1,79",8,26,25
"org.apache.cassandra.io.util.MmappedRegions.Region",2,2,3,5,0,0,0,1,18,18,0,0,0,"1,00",2,3,3
"org.apache.cassandra.io.util.MmappedRegions.State",6,5,8,13,991,0,0,1,81,71,0,0,0,"1,62",5,9,13
"org.apache.cassandra.io.util.MmappedRegions.Tidier",5,1,5,6,991,0,1,1,23,23,0,0,0,"1,00",1,5,3
"org.apache.cassandra.io.util.MmappedSegmentedFile",2,2,5,7,988,0,0,2,35,35,0,0,0,"1,00",3,6,5
"org.apache.cassandra.io.util.MmappedSegmentedFile.Builder",3,1,6,7,989,0,0,3,54,51,0,0,0,"2,17",2,9,13
"org.apache.cassandra.io.util.MmappedSegmentedFile.Cleanup",2,1,2,3,988,0,0,1,20,19,0,0,0,"1,50",0,3,3
"org.apache.cassandra.io.util.NIODataInputStream",1,1,6,7,0,0,0,2,58,46,0,0,0,"1,50",2,6,9
"org.apache.cassandra.io.util.RandomAccessReader",28,10,27,37,986,0,0,5,280,234,1,0,0,"1,89",18,34,51
"org.apache.cassandra.io.util.RandomAccessReader.BufferedRandomAccessFileMark",1,1,1,2,0,0,0,0,11,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.io.util.RandomAccessReader.Builder",5,7,10,17,986,0,0,4,89,76,1,0,0,"1,40",8,13,14
"org.apache.cassandra.io.util.RandomAccessReader.RandomAccessReaderWithOwnChannel",3,8,26,34,986,1,0,1,24,19,1,22,1,"1,00",0,4,2
"org.apache.cassandra.io.util.RebufferingInputStream",6,1,24,25,6,0,0,5,222,205,0,0,0,"1,96",19,29,45
"org.apache.cassandra.io.util.SafeMemory",6,1,12,13,986,0,1,3,54,53,0,0,0,"1,11",3,17,10
"org.apache.cassandra.io.util.SafeMemory.MemoryTidy",3,2,5,7,3,0,1,1,20,19,0,0,0,"1,33",1,4,4
"org.apache.cassandra.io.util.SafeMemoryWriter",1,1,12,13,0,0,0,2,67,67,0,0,0,"1,08",7,12,13
"org.apache.cassandra.io.util.SegmentedFile",10,5,18,23,1.005,1,0,4,90,73,0,4,0,"1,18",8,13,13
"org.apache.cassandra.io.util.SegmentedFile.Builder",13,1,15,16,1.005,0,0,3,128,105,0,0,0,"1,71",12,24,24
"org.apache.cassandra.io.util.SegmentedFile.Cleanup",2,1,5,6,1,0,1,1,16,16,0,0,0,"1,00",1,3,3
"org.apache.cassandra.io.util.SequentialWriter",21,12,35,47,995,0,1,9,282,240,1,0,0,"1,23",18,43,38
"org.apache.cassandra.io.util.SequentialWriter.BufferedFileWriterMark",1,1,1,2,0,0,0,0,11,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.io.util.SequentialWriter.TransactionalProxy",5,2,22,24,995,1,1,4,30,28,1,10,1,"1,25",3,6,5
"org.apache.cassandra.io.util.UnbufferedDataOutputStreamPlus",2,2,20,22,2,0,0,4,326,191,0,0,0,"2,17",1,22,39
"org.apache.cassandra.io.util.WrappedDataOutputStreamPlus",4,1,6,7,0,0,0,1,40,34,0,0,0,"1,00",0,6,6
"org.apache.cassandra.locator.AbstractEndpointSnitch",1,0,6,6,987,0,0,3,55,40,0,0,0,"1,50",4,7,9
"org.apache.cassandra.locator.AbstractNetworkTopologySnitch",0,0,3,3,0,0,0,1,41,27,0,0,0,"7,00",3,3,7
"org.apache.cassandra.locator.AbstractReplicationStrategy",24,8,20,28,986,0,0,4,251,210,0,0,0,"2,00",15,28,34
"org.apache.cassandra.locator.CloudstackSnitch",9,8,6,14,987,0,0,3,142,135,0,0,0,"3,50",5,12,21
"org.apache.cassandra.locator.DynamicEndpointSnitch",6,11,26,37,986,0,0,5,298,270,0,0,0,"1,93",14,35,56
"org.apache.cassandra.locator.DynamicEndpointSnitchMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,8,n/a
"org.apache.cassandra.locator.Ec2MultiRegionSnitch",6,3,2,5,987,0,0,1,34,22,0,0,0,"1,00",0,7,2
"org.apache.cassandra.locator.Ec2Snitch",8,7,4,11,987,0,0,2,81,73,0,0,0,"3,50",3,9,14
"org.apache.cassandra.locator.EndpointSnitchInfo",1,0,4,4,987,0,0,4,27,27,0,0,0,"1,00",3,5,4
"org.apache.cassandra.locator.EndpointSnitchInfoMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.locator.GoogleCloudSnitch",8,7,4,11,987,0,0,2,82,75,0,0,0,"3,25",3,9,13
"org.apache.cassandra.locator.GossipingPropertyFileSnitch",10,11,7,18,989,0,0,1,147,134,0,0,0,"3,12",2,23,25
"org.apache.cassandra.locator.IEndpointSnitch",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.locator.ILatencySubscriber",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.locator.LocalStrategy",8,0,6,6,986,0,0,5,35,29,0,0,0,"1,00",4,7,6
"org.apache.cassandra.locator.NetworkTopologyStrategy",8,3,9,12,986,0,0,3,152,122,0,0,0,"3,00",7,13,27
"org.apache.cassandra.locator.OldNetworkTopologyStrategy",3,0,5,5,13,0,0,3,82,69,0,0,0,"3,00",3,6,15
"org.apache.cassandra.locator.PropertyFileSnitch",8,5,7,12,989,0,0,1,156,127,0,0,0,"2,50",4,15,20
"org.apache.cassandra.locator.RackInferringSnitch",0,0,2,2,0,0,0,2,15,11,0,0,0,"1,00",2,2,2
"org.apache.cassandra.locator.ReconnectableSnitchHelper",1,4,10,14,987,0,0,5,69,60,0,0,0,"1,40",0,12,14
"org.apache.cassandra.locator.SeedProvider",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.locator.SimpleSeedProvider",3,1,2,3,987,0,0,1,32,31,0,0,0,"1,50",1,3,3
"org.apache.cassandra.locator.SimpleSnitch",2,0,4,4,0,0,0,4,27,19,0,0,0,"1,00",3,4,4
"org.apache.cassandra.locator.SimpleStrategy",3,0,5,5,13,0,0,3,45,38,0,0,0,"1,80",3,6,9
"org.apache.cassandra.locator.SnitchProperties",1,3,2,5,987,0,0,1,38,34,0,0,0,"2,00",1,2,4
"org.apache.cassandra.locator.TokenMetadata",38,14,58,72,986,0,0,2,974,810,0,0,0,"2,15",40,86,129
"org.apache.cassandra.locator.TokenMetadata.Topology",8,3,12,15,986,0,0,1,114,92,0,0,0,"1,75",2,14,21
"org.apache.cassandra.metrics.BufferPoolMetrics",3,3,1,4,986,0,0,0,19,17,0,0,0,"1,00",0,3,2
"org.apache.cassandra.metrics.CASClientRequestMetrics",1,3,2,5,14,0,0,1,20,19,0,0,0,"1,00",0,5,2
"org.apache.cassandra.metrics.CQLMetrics",3,6,1,7,986,0,0,0,37,37,0,0,0,"1,00",0,3,5
"org.apache.cassandra.metrics.CacheMetrics",4,9,1,10,15,0,0,0,86,68,0,0,0,"1,00",0,3,8
"org.apache.cassandra.metrics.CassandraMetricsRegistry",30,2,16,18,13,0,0,1,141,135,0,0,0,"1,38",12,23,22
"org.apache.cassandra.metrics.CassandraMetricsRegistry.AbstractBean",6,1,3,4,1,0,1,1,13,13,4,0,0,"1,00",1,2,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxCounter",3,2,6,8,3,1,2,1,14,14,0,1,0,"1,00",1,3,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxCounterMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxGauge",3,2,6,8,3,1,2,1,14,14,0,1,0,"1,00",1,3,2
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxGaugeMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogram",3,2,28,30,3,1,2,1,69,69,0,1,0,"1,00",12,14,13
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxHistogramMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,12,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeter",4,4,17,21,3,1,2,3,48,48,1,1,0,"1,00",7,9,8
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxMeterMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimer",3,7,42,49,5,2,3,2,76,76,0,7,0,"1,00",12,14,13
"org.apache.cassandra.metrics.CassandraMetricsRegistry.JmxTimerMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,12,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.metrics.CassandraMetricsRegistry.MetricName",1,5,20,25,0,0,0,5,251,157,0,0,0,"1,60",15,20,32
"org.apache.cassandra.metrics.ClearableHistogram",2,1,2,3,0,0,0,1,22,14,0,0,0,"1,00",0,2,2
"org.apache.cassandra.metrics.ClientMetrics",3,2,2,4,14,0,0,1,24,24,0,0,0,"1,00",0,3,3
"org.apache.cassandra.metrics.ClientRequestMetrics",1,3,2,5,14,0,0,1,20,20,0,0,0,"1,00",0,4,2
"org.apache.cassandra.metrics.CommitLogMetrics",4,6,2,8,986,0,0,1,46,38,0,0,0,"1,00",0,4,5
"org.apache.cassandra.metrics.CompactionMetrics",10,6,6,12,986,0,1,1,65,53,0,0,0,"1,50",1,11,9
"org.apache.cassandra.metrics.ConnectionMetrics",3,14,2,16,986,0,0,1,120,99,0,0,0,"1,00",0,5,11
"org.apache.cassandra.metrics.DefaultNameFactory",1,3,5,8,0,0,0,1,44,41,0,0,0,"1,40",3,5,7
"org.apache.cassandra.metrics.DroppedMessageMetrics",4,1,1,2,15,0,0,0,13,9,0,0,0,"1,00",0,2,1
"org.apache.cassandra.metrics.EstimatedHistogramReservoir",3,1,6,7,9,0,0,1,38,32,0,0,0,"1,00",2,11,6
"org.apache.cassandra.metrics.EstimatedHistogramReservoir.HistogramSnapshot",2,1,5,6,8,0,0,1,29,29,0,0,0,"1,00",4,10,5
"org.apache.cassandra.metrics.HintedHandoffMetrics",7,4,3,7,986,0,0,2,43,38,0,0,0,"1,40",0,5,7
"org.apache.cassandra.metrics.HintedHandoffMetrics.DifferencingCounter",2,2,4,6,986,0,0,1,24,24,0,0,0,"1,00",2,5,4
"org.apache.cassandra.metrics.HintsServiceMetrics",0,0,0,0,0,0,0,0,6,3,0,0,0,n/a,0,0,0
"org.apache.cassandra.metrics.KeyspaceMetrics",5,31,3,34,986,0,0,1,240,190,0,0,0,"1,10",1,8,22
"org.apache.cassandra.metrics.KeyspaceMetrics.KeyspaceMetricNameFactory",2,1,2,3,986,0,0,1,18,18,0,0,0,"1,00",1,3,2
"org.apache.cassandra.metrics.KeyspaceMetrics.MetricValue",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.metrics.LatencyMetrics",2,6,7,13,14,0,0,2,99,64,0,0,0,"1,43",0,13,10
"org.apache.cassandra.metrics.MetricNameFactory",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.metrics.ReadRepairMetrics",3,4,0,4,14,0,0,0,10,7,0,0,0,n/a,0,1,0
"org.apache.cassandra.metrics.RestorableMeter",9,8,9,17,1,0,0,1,108,66,0,0,0,"1,44",4,14,13
"org.apache.cassandra.metrics.RestorableMeter.RestorableEWMA",1,5,5,10,1,0,0,1,50,31,0,0,0,"1,20",1,5,6
"org.apache.cassandra.metrics.SEPMetrics",2,7,2,9,25,0,0,1,69,53,0,0,0,"1,00",0,5,6
"org.apache.cassandra.metrics.StorageMetrics",10,5,0,5,14,0,0,0,11,8,0,0,0,n/a,0,1,0
"org.apache.cassandra.metrics.StreamingMetrics",2,7,2,9,14,0,0,1,29,26,0,0,0,"1,50",1,3,3
"org.apache.cassandra.metrics.TableMetrics",28,59,14,73,986,0,0,3,721,636,0,0,0,"2,00",11,29,104
"org.apache.cassandra.metrics.TableMetrics.AllTableMetricNameFactory",1,1,2,3,986,0,0,1,17,17,0,0,0,"1,00",1,2,2
"org.apache.cassandra.metrics.TableMetrics.GetHistogram",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.metrics.TableMetrics.Sampler",5,2,0,2,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.metrics.TableMetrics.TableHistogram",3,2,2,4,0,0,0,1,17,17,0,0,0,"1,50",0,2,3
"org.apache.cassandra.metrics.TableMetrics.TableMetricNameFactory",2,4,2,6,986,0,0,1,26,26,0,0,0,"1,50",1,3,3
"org.apache.cassandra.metrics.TableMetrics.TableTimer",1,2,2,4,0,0,0,1,17,17,0,0,0,"1,50",0,2,3
"org.apache.cassandra.metrics.ThreadPoolMetricNameFactory",0,3,2,5,0,0,0,1,23,23,0,0,0,"1,00",1,2,2
"org.apache.cassandra.metrics.ThreadPoolMetrics",5,7,3,10,14,0,0,2,100,81,0,0,0,"1,57",1,6,11
"org.apache.cassandra.metrics.ViewWriteMetrics",1,3,2,5,14,0,0,1,28,27,0,0,0,"1,00",0,6,3
"org.apache.cassandra.net.AsyncOneResponse",2,3,3,6,0,0,0,2,58,54,0,0,0,"2,33",2,3,7
"org.apache.cassandra.net.CallbackInfo",1,4,4,8,4,0,0,2,44,31,0,0,0,"1,00",3,4,4
"org.apache.cassandra.net.CompactEndpointSerializationHelper",7,0,3,3,1,0,0,2,22,22,0,0,0,"1,33",2,3,4
"org.apache.cassandra.net.IAsyncCallback",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.net.IAsyncCallbackWithFailure",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.net.IMessageSink",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.net.IVerbHandler",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.net.IncomingStreamingConnection",6,4,3,7,996,0,0,1,59,51,0,0,0,"1,67",0,6,5
"org.apache.cassandra.net.IncomingTcpConnection",6,7,5,12,988,0,0,1,159,146,0,0,0,"3,20",1,9,16
"org.apache.cassandra.net.MessageDeliveryTask",2,6,3,9,987,0,0,1,65,65,0,0,0,"2,33",0,4,7
"org.apache.cassandra.net.MessageIn",47,6,8,14,986,0,0,3,83,82,0,0,0,"1,62",7,11,13
"org.apache.cassandra.net.MessageOut",44,7,11,18,986,0,0,1,119,104,0,0,0,"1,73",6,22,19
"org.apache.cassandra.net.MessagingService",156,29,69,98,986,0,0,10,828,721,0,0,0,"1,76",41,86,127
"org.apache.cassandra.net.MessagingService.CallbackDeterminedSerializer",4,1,6,7,4,0,1,3,20,16,0,0,0,"1,00",2,3,3
"org.apache.cassandra.net.MessagingService.DroppedMessages",3,3,1,4,16,0,0,0,12,12,0,0,0,"1,00",0,2,1
"org.apache.cassandra.net.MessagingService.MSHandle",1,1,0,1,986,0,0,0,4,4,0,0,0,n/a,0,1,0
"org.apache.cassandra.net.MessagingService.MSTestHandle",1,1,0,1,986,0,0,0,4,4,0,0,0,n/a,0,1,0
"org.apache.cassandra.net.MessagingService.SocketThread",3,2,4,6,986,0,0,1,81,78,0,0,0,"2,00",1,8,8
"org.apache.cassandra.net.MessagingService.Verb",40,42,0,42,0,n/a,0,0,48,46,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.net.MessagingServiceMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,13,n/a
"org.apache.cassandra.net.OutboundTcpConnection",17,21,19,40,1.000,0,0,1,426,393,0,0,0,"3,00",9,45,60
"org.apache.cassandra.net.OutboundTcpConnection.QueuedMessage",3,4,5,9,1,0,1,1,28,26,1,0,0,"1,00",3,4,4
"org.apache.cassandra.net.OutboundTcpConnection.RetriedQueuedMessage",2,4,7,11,2,1,1,1,11,11,0,2,1,"1,00",1,3,2
"org.apache.cassandra.net.OutboundTcpConnectionPool",12,8,14,22,986,0,0,1,158,143,0,0,0,"2,57",6,29,36
"org.apache.cassandra.net.ResponseVerbHandler",2,1,1,2,986,0,0,1,28,27,0,0,0,"3,00",0,1,3
"org.apache.cassandra.net.WriteCallbackInfo",5,1,5,6,987,0,0,2,37,36,0,0,0,"1,40",4,7,7
"org.apache.cassandra.notifications.INotification",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.cassandra.notifications.INotificationConsumer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.notifications.MemtableRenewedNotification",1,1,1,2,987,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.notifications.SSTableAddedNotification",2,1,1,2,987,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.notifications.SSTableDeletingNotification",1,1,1,2,987,0,0,0,11,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.notifications.SSTableListChangedNotification",2,3,1,4,987,0,0,0,12,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.notifications.SSTableRepairStatusChanged",2,1,1,2,987,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.notifications.TruncationNotification",0,1,1,2,0,0,0,0,12,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.repair.AnticompactionTask",8,4,2,6,986,0,0,1,32,27,0,0,0,"1,50",0,10,3
"org.apache.cassandra.repair.AnticompactionTask.AnticompactionCallback",3,1,5,6,986,0,1,2,23,20,0,0,0,"1,00",1,4,4
"org.apache.cassandra.repair.LocalSyncTask",18,3,6,9,991,0,1,3,77,67,0,0,0,"2,60",0,16,13
"org.apache.cassandra.repair.NodePair",5,3,3,6,7,0,0,0,29,24,0,0,0,"1,67",2,3,5
"org.apache.cassandra.repair.NodePair.NodePairSerializer",5,0,6,6,7,0,1,2,18,18,0,0,0,"1,00",2,7,3
"org.apache.cassandra.repair.RemoteSyncTask",7,1,3,4,990,0,0,2,34,28,0,0,0,"1,33",0,9,4
"org.apache.cassandra.repair.RepairJob",5,6,5,11,987,0,0,1,232,188,0,0,0,"1,92",3,11,25
"org.apache.cassandra.repair.RepairJobDesc",19,6,4,10,986,0,0,0,47,40,0,0,0,"3,25",3,4,13
"org.apache.cassandra.repair.RepairJobDesc.RepairJobDescSerializer",10,0,6,6,986,0,1,1,60,60,0,0,0,"4,00",2,11,12
"org.apache.cassandra.repair.RepairMessageVerbHandler",17,1,2,3,986,0,1,1,113,104,0,0,0,"4,67",0,19,14
"org.apache.cassandra.repair.RepairParallelism",5,4,4,8,0,n/a,0,1,48,29,n/a,0,0,"1,50",3,4,6
"org.apache.cassandra.repair.RepairResult",0,2,1,3,0,0,0,0,13,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.repair.RepairRunnable",31,6,12,18,986,1,1,1,320,307,0,1,0,"2,67",1,33,40
"org.apache.cassandra.repair.RepairSession",10,15,19,34,986,0,0,6,274,181,0,0,0,"1,57",3,24,33
"org.apache.cassandra.repair.RepairSessionResult",2,4,1,5,14,0,0,0,17,14,0,0,0,"1,00",0,1,1
"org.apache.cassandra.repair.SnapshotTask",3,2,2,4,990,0,0,1,19,16,0,0,0,"1,00",0,6,2
"org.apache.cassandra.repair.SnapshotTask.SnapshotCallback",3,1,5,6,990,0,1,2,26,17,0,0,0,"1,00",1,4,4
"org.apache.cassandra.repair.StreamingRepairTask",10,4,6,10,993,0,1,2,56,42,0,0,0,"1,20",0,14,6
"org.apache.cassandra.repair.SyncStat",0,2,1,3,0,0,0,0,13,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.repair.SyncTask",4,5,4,9,987,0,0,1,45,35,0,0,0,"1,33",1,6,4
"org.apache.cassandra.repair.SystemDistributedKeyspace",13,6,11,17,986,0,0,1,144,144,0,0,0,"1,45",2,18,16
"org.apache.cassandra.repair.SystemDistributedKeyspace.RepairState",1,3,0,3,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.repair.TreeResponse",1,2,1,3,41,0,0,0,13,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.repair.ValidationTask",4,3,3,6,990,0,0,1,40,28,0,0,0,"1,33",0,7,4
"org.apache.cassandra.repair.Validator",21,9,9,18,986,0,0,1,172,132,0,0,0,"2,56",2,37,23
"org.apache.cassandra.repair.Validator.CountingDigest",1,2,5,7,0,0,0,1,32,32,0,0,0,"1,00",1,5,5
"org.apache.cassandra.repair.messages.AnticompactionRequest",4,3,2,5,986,0,0,0,22,19,0,0,0,"1,00",1,2,2
"org.apache.cassandra.repair.messages.AnticompactionRequest.AnticompactionRequestSerializer",7,0,3,3,986,0,0,1,29,29,0,0,0,"2,00",2,8,6
"org.apache.cassandra.repair.messages.CleanupMessage",1,2,1,3,7,0,0,0,15,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.repair.messages.CleanupMessage.CleanupMessageSerializer",4,0,3,3,7,0,0,1,16,16,0,0,0,"1,00",2,7,3
"org.apache.cassandra.repair.messages.PrepareMessage",3,7,2,9,988,0,0,0,32,32,0,0,0,"1,00",1,2,2
"org.apache.cassandra.repair.messages.PrepareMessage.PrepareMessageSerializer",8,0,3,3,988,0,0,1,50,50,0,0,0,"3,00",2,10,9
"org.apache.cassandra.repair.messages.RepairMessage",9,3,2,5,986,0,0,1,20,15,0,0,0,"1,00",1,3,2
"org.apache.cassandra.repair.messages.RepairMessage.MessageSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.cassandra.repair.messages.RepairMessage.RepairMessageSerializer",6,0,6,6,986,0,2,1,19,19,0,0,0,"1,00",2,8,3
"org.apache.cassandra.repair.messages.RepairMessage.Type",4,10,2,12,986,n/a,0,1,27,27,n/a,0,0,"2,00",1,3,4
"org.apache.cassandra.repair.messages.RepairOption",12,20,13,33,986,0,0,7,251,170,0,0,0,"2,00",12,19,26
"org.apache.cassandra.repair.messages.SnapshotMessage",3,1,1,2,988,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.repair.messages.SnapshotMessage.SnapshotMessageSerializer",5,0,3,3,988,0,0,1,16,16,0,0,0,"1,00",2,7,3
"org.apache.cassandra.repair.messages.SyncComplete",4,3,2,5,990,0,0,0,24,18,0,0,0,"1,00",0,3,2
"org.apache.cassandra.repair.messages.SyncComplete.SyncCompleteSerializer",7,0,3,3,990,0,0,1,22,22,0,0,0,"1,00",2,8,3
"org.apache.cassandra.repair.messages.SyncRequest",6,5,2,7,988,0,0,0,32,26,0,0,0,"1,00",1,2,2
"org.apache.cassandra.repair.messages.SyncRequest.SyncRequestSerializer",11,0,3,3,988,0,0,1,37,37,0,0,0,"2,00",2,11,6
"org.apache.cassandra.repair.messages.ValidationComplete",5,2,3,5,986,0,0,1,26,20,0,0,0,"1,00",1,3,3
"org.apache.cassandra.repair.messages.ValidationComplete.ValidationCompleteSerializer",8,0,3,3,986,0,0,1,29,29,0,0,0,"2,00",2,13,6
"org.apache.cassandra.repair.messages.ValidationRequest",3,2,4,6,988,0,0,0,35,30,0,0,0,"1,50",3,4,6
"org.apache.cassandra.repair.messages.ValidationRequest.ValidationRequestSerializer",6,0,3,3,988,0,0,1,19,19,0,0,0,"1,00",2,8,3
"org.apache.cassandra.scheduler.IRequestScheduler",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.scheduler.NoScheduler",2,0,4,4,1,0,0,2,11,7,0,0,0,"1,00",0,4,4
"org.apache.cassandra.scheduler.RoundRobinScheduler",1,6,7,13,1,0,0,1,115,97,0,0,0,"1,88",3,7,15
"org.apache.cassandra.scheduler.WeightedQueue",2,4,4,8,16,0,0,1,32,32,0,0,0,"1,50",2,7,6
"org.apache.cassandra.scheduler.WeightedQueue.Entry",1,2,1,3,0,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.cassandra.schema.CQLTypeParser",6,1,2,3,26,0,0,1,54,48,0,0,0,"2,50",2,4,5
"org.apache.cassandra.schema.CachingParams",8,10,14,24,2,0,0,1,124,123,0,0,0,"1,86",13,16,26
"org.apache.cassandra.schema.CachingParams.Option",1,2,1,3,0,n/a,0,0,10,10,n/a,0,0,"1,00",1,1,1
"org.apache.cassandra.schema.CompactionParams",13,9,18,27,996,0,0,2,212,206,0,0,0,"2,00",16,21,36
"org.apache.cassandra.schema.CompactionParams.Option",3,4,1,5,0,n/a,0,0,12,12,n/a,0,0,"1,00",1,1,1
"org.apache.cassandra.schema.CompressionParams",22,18,33,51,8,0,0,5,390,336,0,0,0,"2,03",29,34,67
"org.apache.cassandra.schema.CompressionParams.Serializer",6,0,6,6,8,0,1,2,49,49,0,0,0,"2,00",2,5,6
"org.apache.cassandra.schema.Functions",5,1,20,21,25,0,0,4,147,101,0,0,0,"1,25",19,25,25
"org.apache.cassandra.schema.Functions.Builder",1,1,5,6,25,0,0,3,29,28,0,0,0,"1,20",4,6,6
"org.apache.cassandra.schema.IndexMetadata",49,6,15,21,986,0,0,4,173,168,0,0,0,"2,07",12,19,31
"org.apache.cassandra.schema.IndexMetadata.Kind",7,3,0,3,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.schema.IndexMetadata.Serializer",8,0,3,3,986,0,0,1,16,16,0,0,0,"1,00",2,7,3
"org.apache.cassandra.schema.Indexes",6,2,17,19,986,0,0,3,128,87,0,0,0,"1,18",16,21,20
"org.apache.cassandra.schema.Indexes.Builder",1,2,4,6,986,0,0,3,23,23,0,0,0,"1,00",3,5,4
"org.apache.cassandra.schema.KeyspaceMetadata",36,6,17,23,986,0,0,4,123,120,0,0,0,"1,53",15,20,26
"org.apache.cassandra.schema.KeyspaceParams",85,3,9,12,1,0,0,5,57,54,0,0,0,"1,22",7,10,11
"org.apache.cassandra.schema.KeyspaceParams.Option",2,2,1,3,0,n/a,0,0,10,10,n/a,0,0,"1,00",1,1,1
"org.apache.cassandra.schema.Keyspaces",1,1,11,12,1,0,0,1,53,53,0,0,0,"1,00",10,14,11
"org.apache.cassandra.schema.Keyspaces.Builder",1,1,5,6,1,0,0,3,27,27,0,0,0,"1,20",4,6,6
"org.apache.cassandra.schema.LegacySchemaMigrator",20,2,42,44,992,0,0,1,694,611,0,0,0,"2,26",35,70,95
"org.apache.cassandra.schema.LegacySchemaMigrator.Aggregate",3,2,1,3,987,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Function",3,2,1,3,987,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Keyspace",5,7,1,8,991,0,0,0,26,26,0,0,0,"1,00",0,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Table",2,2,1,3,0,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.schema.LegacySchemaMigrator.Type",2,2,1,3,0,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.schema.ReplicationParams",5,3,9,12,987,0,0,3,63,62,0,0,0,"1,33",7,11,12
"org.apache.cassandra.schema.SchemaKeyspace",22,25,76,101,986,0,0,3,1.125,1.023,0,0,0,"2,05",54,86,156
"org.apache.cassandra.schema.SpeculativeRetryParam",3,6,11,17,2,0,0,3,107,106,0,0,0,"2,00",10,12,22
"org.apache.cassandra.schema.SpeculativeRetryParam.Kind",1,4,0,4,0,n/a,0,0,4,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.schema.TableParams",10,25,8,33,3,0,0,2,183,183,0,0,0,"2,50",5,27,20
"org.apache.cassandra.schema.TableParams.Builder",1,15,17,32,3,0,0,16,100,100,0,0,0,"1,00",16,18,17
"org.apache.cassandra.schema.TableParams.Option",2,15,1,16,0,n/a,0,0,23,23,n/a,0,0,"1,00",1,1,1
"org.apache.cassandra.schema.Tables",7,1,15,16,986,0,0,1,93,72,0,0,0,"1,07",14,20,16
"org.apache.cassandra.schema.Tables.Builder",2,1,5,6,986,0,0,3,27,27,0,0,0,"1,20",4,6,6
"org.apache.cassandra.schema.TriggerMetadata",4,3,5,8,0,0,0,1,40,38,0,0,0,"1,40",4,5,7
"org.apache.cassandra.schema.Triggers",4,1,12,13,1,0,0,1,71,59,0,0,0,"1,08",11,15,13
"org.apache.cassandra.schema.Triggers.Builder",1,1,4,5,1,0,0,3,21,21,0,0,0,"1,00",3,5,4
"org.apache.cassandra.schema.Types",13,2,15,17,986,0,0,3,97,73,0,0,0,"1,07",13,20,16
"org.apache.cassandra.schema.Types.Builder",3,1,5,6,986,0,0,3,27,27,0,0,0,"1,20",4,6,6
"org.apache.cassandra.schema.Types.RawBuilder",6,2,3,5,986,0,0,1,51,37,0,0,0,"2,67",1,8,8
"org.apache.cassandra.schema.Types.RawBuilder.RawUDT",6,3,3,6,986,0,0,1,28,28,0,0,0,"1,00",2,5,3
"org.apache.cassandra.schema.UnknownIndexException",2,1,1,2,987,0,0,0,14,9,0,0,0,"1,00",0,1,1
"org.apache.cassandra.schema.Views",3,1,16,17,988,0,0,1,97,76,0,0,0,"1,06",15,19,17
"org.apache.cassandra.schema.Views.Builder",2,1,4,5,988,0,0,3,21,21,0,0,0,"1,00",3,5,4
"org.apache.cassandra.security.SSLFactory",9,3,6,9,986,0,0,1,111,104,0,0,0,"2,00",6,6,12
"org.apache.cassandra.serializers.AbstractTextSerializer",1,1,5,6,6,0,0,2,31,31,0,0,0,"1,00",4,8,5
"org.apache.cassandra.serializers.AsciiSerializer",1,1,2,3,0,0,0,1,18,17,0,0,0,"2,00",0,2,4
"org.apache.cassandra.serializers.BooleanSerializer",2,3,5,8,6,0,0,4,31,31,0,0,0,"2,00",4,5,10
"org.apache.cassandra.serializers.ByteSerializer",2,1,5,6,6,0,0,4,25,25,0,0,0,"1,80",4,5,9
"org.apache.cassandra.serializers.BytesSerializer",4,1,5,6,6,0,0,4,26,23,0,0,0,"1,00",4,6,5
"org.apache.cassandra.serializers.CollectionSerializer",9,0,14,14,986,0,0,3,71,64,0,0,0,"1,50",10,15,15
"org.apache.cassandra.serializers.CounterSerializer",1,0,0,0,0,0,0,0,3,3,0,0,0,n/a,0,0,0
"org.apache.cassandra.serializers.DecimalSerializer",4,1,5,6,6,0,0,4,43,41,0,0,0,"1,80",4,5,9
"org.apache.cassandra.serializers.DoubleSerializer",2,1,5,6,6,0,0,4,27,27,0,0,0,"1,80",4,6,9
"org.apache.cassandra.serializers.EmptySerializer",2,1,5,6,6,0,0,4,25,25,0,0,0,"1,20",4,5,6
"org.apache.cassandra.serializers.FloatSerializer",2,1,5,6,6,0,0,4,27,27,0,0,0,"1,80",4,6,9
"org.apache.cassandra.serializers.InetAddressSerializer",2,1,5,6,6,0,0,4,42,42,0,0,0,"1,80",4,7,9
"org.apache.cassandra.serializers.Int32Serializer",3,1,5,6,6,0,0,4,25,25,0,0,0,"1,80",4,6,9
"org.apache.cassandra.serializers.IntegerSerializer",2,1,5,6,6,0,0,4,24,23,0,0,0,"1,60",4,6,8
"org.apache.cassandra.serializers.ListSerializer",3,2,9,11,986,0,0,5,123,115,0,0,0,"2,22",7,9,20
"org.apache.cassandra.serializers.LongSerializer",2,1,5,6,6,0,0,4,25,25,0,0,0,"1,80",4,6,9
"org.apache.cassandra.serializers.MapSerializer",5,4,9,13,986,0,0,5,139,130,0,0,0,"2,33",7,11,21
"org.apache.cassandra.serializers.MarshalException",64,0,2,2,0,0,0,0,11,11,0,0,0,"1,00",0,2,2
"org.apache.cassandra.serializers.SetSerializer",2,3,8,11,0,0,0,4,96,95,0,0,0,"2,00",6,8,16
"org.apache.cassandra.serializers.ShortSerializer",2,1,5,6,6,0,0,4,25,25,0,0,0,"1,80",4,6,9
"org.apache.cassandra.serializers.SimpleDateSerializer",5,7,8,15,6,0,0,6,81,76,0,0,0,"2,12",7,9,17
"org.apache.cassandra.serializers.TimeSerializer",5,2,8,10,6,0,0,6,150,145,0,0,0,"3,25",6,9,26
"org.apache.cassandra.serializers.TimeUUIDSerializer",1,1,1,2,0,0,0,1,18,16,0,0,0,"3,00",0,1,3
"org.apache.cassandra.serializers.TimestampSerializer",4,6,6,12,6,0,0,5,115,111,0,0,0,"1,86",5,7,13
"org.apache.cassandra.serializers.TypeSerializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.serializers.UTF8Serializer",3,1,2,3,2,0,0,1,13,13,0,0,0,"1,50",0,3,3
"org.apache.cassandra.serializers.UTF8Serializer.UTF8Validator",2,0,1,1,1,0,0,1,106,89,0,0,0,"28,00",1,1,28
"org.apache.cassandra.serializers.UTF8Serializer.UTF8Validator.State",1,8,0,8,0,n/a,0,0,10,10,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.serializers.UUIDSerializer",5,1,5,6,7,0,0,4,26,25,0,0,0,"1,80",4,7,9
"org.apache.cassandra.service.AbstractReadExecutor",22,5,9,14,1.007,0,0,5,136,96,3,0,0,"3,67",3,30,22
"org.apache.cassandra.service.AbstractReadExecutor.AlwaysSpeculatingReadExecutor",6,5,12,17,1.007,1,0,2,29,28,0,3,0,"1,50",1,7,6
"org.apache.cassandra.service.AbstractReadExecutor.NeverSpeculatingReadExecutor",4,4,12,16,1.007,1,0,2,21,20,0,3,0,"1,25",1,7,5
"org.apache.cassandra.service.AbstractReadExecutor.SpeculatingReadExecutor",7,6,12,18,1.007,1,0,1,64,55,0,3,0,"3,00",1,14,12
"org.apache.cassandra.service.AbstractWriteResponseHandler",9,11,11,22,986,0,1,2,113,92,0,0,0,"1,88",4,16,15
"org.apache.cassandra.service.ActiveRepairService",44,8,12,20,986,0,0,2,308,254,0,0,0,"2,65",8,32,45
"org.apache.cassandra.service.ActiveRepairService.ParentRepairSession",13,6,5,11,986,0,0,2,66,66,0,0,0,"2,20",3,7,11
"org.apache.cassandra.service.AsyncRepairCallback",5,3,5,8,996,0,1,2,29,29,0,0,0,"1,25",1,4,5
"org.apache.cassandra.service.BatchlogResponseHandler",4,4,11,15,989,0,0,1,57,57,0,0,0,"1,09",5,12,12
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogCleanup",2,3,2,5,1,0,0,1,17,17,0,0,0,"1,50",0,3,3
"org.apache.cassandra.service.BatchlogResponseHandler.BatchlogCleanupCallback",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.service.CASRequest",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.service.CacheService",22,6,26,32,986,0,0,4,217,208,0,0,0,"1,65",9,43,43
"org.apache.cassandra.service.CacheService.CacheType",4,4,2,6,0,n/a,0,0,15,15,n/a,0,0,"1,00",1,2,2
"org.apache.cassandra.service.CacheService.CounterCacheSerializer",12,0,4,4,986,0,1,2,56,54,0,0,0,"3,00",1,5,9
"org.apache.cassandra.service.CacheService.KeyCacheSerializer",10,0,5,5,986,0,1,2,52,46,0,0,0,"2,67",2,7,8
"org.apache.cassandra.service.CacheService.RowCacheSerializer",12,0,4,4,986,0,1,2,32,30,0,0,0,"1,33",1,5,4
"org.apache.cassandra.service.CacheServiceMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,19,n/a
"org.apache.cassandra.service.CassandraDaemon",23,9,22,31,998,0,0,1,545,461,0,0,0,"3,08",3,45,77
"org.apache.cassandra.service.CassandraDaemon.NativeAccess",1,0,2,2,0,0,0,2,11,11,0,0,0,"1,00",2,2,2
"org.apache.cassandra.service.CassandraDaemon.Server",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.service.ClientState",83,12,27,39,986,0,0,7,280,231,1,0,0,"2,19",11,42,59
"org.apache.cassandra.service.ClientWarn",7,3,7,10,986,0,0,1,41,41,0,0,0,"1,57",2,7,11
"org.apache.cassandra.service.DataResolver",6,1,5,6,992,0,0,3,50,43,0,0,0,"1,80",4,8,9
"org.apache.cassandra.service.DataResolver.RepairMergeListener",6,1,5,6,992,0,0,2,55,53,0,0,0,"2,00",3,10,10
"org.apache.cassandra.service.DataResolver.RepairMergeListener.MergeListener",5,8,7,15,992,0,0,1,110,104,0,0,0,"2,64",2,7,29
"org.apache.cassandra.service.DataResolver.ShortReadProtection",5,3,11,14,992,1,0,1,22,21,0,9,1,"1,00",1,4,2
"org.apache.cassandra.service.DataResolver.ShortReadProtection.ShortReadRowProtection",10,4,13,17,992,1,1,1,71,52,0,8,1,"1,75",3,10,7
"org.apache.cassandra.service.DatacenterSyncWriteResponseHandler",8,3,4,7,986,0,0,2,55,48,0,0,0,"2,25",2,10,9
"org.apache.cassandra.service.DatacenterWriteResponseHandler",5,0,4,4,986,0,0,2,34,29,0,0,0,"1,25",2,5,5
"org.apache.cassandra.service.DigestMismatchException",2,0,1,1,34,0,0,0,11,11,0,0,0,"1,00",0,3,1
"org.apache.cassandra.service.DigestResolver",3,1,5,6,993,0,0,1,60,45,0,0,0,"2,40",3,6,12
"org.apache.cassandra.service.EchoVerbHandler",6,1,2,3,987,0,1,1,10,10,0,0,0,"1,00",0,4,1
"org.apache.cassandra.service.EmbeddedCassandraService",6,1,1,2,999,0,0,1,28,10,0,0,0,"1,00",0,4,1
"org.apache.cassandra.service.GCInspector",8,8,8,16,990,0,0,4,209,177,0,0,0,"3,75",5,15,30
"org.apache.cassandra.service.GCInspector.GCState",1,5,2,7,0,0,0,1,22,22,0,0,0,"1,50",1,2,3
"org.apache.cassandra.service.GCInspector.State",1,6,2,8,0,0,0,0,23,23,0,0,0,"1,00",0,2,2
"org.apache.cassandra.service.GCInspectorMXBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.service.IEndpointLifecycleSubscriber",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.service.LoadBroadcaster",2,4,10,14,16,0,0,6,53,51,0,0,0,"1,27",1,10,14
"org.apache.cassandra.service.MigrationListener",3,0,18,18,24,0,0,15,60,60,2,0,0,"1,00",0,18,18
"org.apache.cassandra.service.MigrationManager",44,5,55,60,986,0,0,1,412,377,0,0,0,"1,70",4,94,95
"org.apache.cassandra.service.MigrationManager.MigrationsSerializer",5,1,6,7,4,0,1,3,25,25,0,0,0,"2,00",2,3,6
"org.apache.cassandra.service.MigrationTask",10,2,4,6,987,1,0,1,46,43,0,1,0,"1,50",0,5,6
"org.apache.cassandra.service.NativeAccessMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.service.NativeTransportService",5,5,9,14,991,0,0,1,137,110,0,0,0,"1,78",5,16,16
"org.apache.cassandra.service.PendingRangeCalculatorService",5,4,5,9,988,0,0,2,48,46,0,0,0,"1,17",0,7,7
"org.apache.cassandra.service.PendingRangeCalculatorService.PendingRangeTask",3,0,1,1,988,0,0,1,13,13,0,0,0,"2,00",0,6,2
"org.apache.cassandra.service.QueryState",37,2,8,10,986,0,0,3,63,53,0,0,0,"1,38",5,10,11
"org.apache.cassandra.service.ReadCallback",17,13,14,27,991,0,1,2,151,138,0,0,0,"2,54",6,30,33
"org.apache.cassandra.service.ReadCallback.AsyncRepairRunner",5,1,2,3,991,0,0,1,34,31,0,0,0,"2,50",0,5,5
"org.apache.cassandra.service.ResponseResolver",2,5,6,11,988,0,0,4,27,26,0,0,0,"1,00",4,8,3
"org.apache.cassandra.service.SnapshotVerbHandler",7,1,2,3,989,0,1,1,16,16,0,0,0,"2,00",0,7,2
"org.apache.cassandra.service.StartupCheck",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.service.StartupChecks",6,12,3,15,988,0,0,1,239,191,0,0,0,"2,62",2,8,34
"org.apache.cassandra.service.StorageProxy",46,16,92,108,986,0,0,34,1.672,1.357,0,0,0,"2,20",56,176,227
"org.apache.cassandra.service.StorageProxy.BatchlogEndpoints",1,3,1,4,0,0,0,0,22,19,0,0,0,"3,00",0,1,3
"org.apache.cassandra.service.StorageProxy.DroppableRunnable",2,2,3,5,986,0,0,1,29,26,2,0,0,"1,50",0,4,3
"org.apache.cassandra.service.StorageProxy.HintRunnable",2,1,3,4,986,0,0,1,30,26,2,0,0,"1,50",0,4,3
"org.apache.cassandra.service.StorageProxy.LocalMutationRunnable",3,1,2,3,987,0,0,1,33,29,2,0,0,"1,50",0,5,3
"org.apache.cassandra.service.StorageProxy.LocalReadRunnable",5,5,5,10,986,1,0,1,31,31,0,1,0,"1,50",0,3,3
"org.apache.cassandra.service.StorageProxy.RangeCommandIterator",13,13,12,25,986,1,0,1,114,103,0,5,0,"2,33",3,16,14
"org.apache.cassandra.service.StorageProxy.RangeForQuery",3,3,1,4,0,0,0,0,12,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.service.StorageProxy.RangeIterator",4,6,9,15,986,1,0,2,31,31,0,5,0,"1,67",2,6,5
"org.apache.cassandra.service.StorageProxy.RangeMerger",5,5,8,13,986,1,0,1,44,33,0,5,0,"3,50",1,6,7
"org.apache.cassandra.service.StorageProxy.SinglePartitionReadLifecycle",2,5,7,12,986,0,0,1,84,79,0,0,0,"1,43",2,9,10
"org.apache.cassandra.service.StorageProxy.SingleRangeResponse",3,4,10,14,3,1,0,1,32,32,0,5,0,"1,75",1,5,7
"org.apache.cassandra.service.StorageProxy.ViewWriteMetricsWrapped",1,0,2,2,986,0,0,1,16,13,0,0,0,"1,00",0,2,2
"org.apache.cassandra.service.StorageProxy.WritePerformer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.service.StorageProxy.WriteResponseHandlerWrapper",1,2,1,3,0,0,0,0,11,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.service.StorageProxyMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,32,n/a
"org.apache.cassandra.service.StorageService",141,28,232,260,986,0,1,38,3.606,3.101,0,0,0,"2,61",126,406,617
"org.apache.cassandra.service.StorageService.Mode",1,8,0,8,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.service.StorageService.RangeRelocator",13,1,4,5,986,0,0,1,120,101,0,0,0,"5,00",2,20,20
"org.apache.cassandra.service.StorageServiceMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,106,n/a
"org.apache.cassandra.service.TruncateResponseHandler",4,5,6,11,987,0,1,2,43,41,0,0,0,"1,50",1,7,6
"org.apache.cassandra.service.WriteResponseHandler",7,3,6,9,986,0,0,3,41,38,1,0,0,"1,17",2,6,7
"org.apache.cassandra.service.pager.AbstractQueryPager",6,7,11,18,988,0,0,3,62,59,0,0,0,"1,25",8,15,10
"org.apache.cassandra.service.pager.AbstractQueryPager.Pager",4,4,14,18,988,1,0,1,65,58,0,6,4,"2,00",3,14,10
"org.apache.cassandra.service.pager.MultiPartitionPager",7,5,7,12,988,0,0,1,99,78,0,0,0,"2,86",6,12,20
"org.apache.cassandra.service.pager.MultiPartitionPager.PagersIterator",4,8,10,18,988,1,0,1,44,41,0,5,0,"2,25",1,7,9
"org.apache.cassandra.service.pager.PagingState",16,4,7,11,986,0,0,1,123,119,0,0,0,"2,71",6,20,19
"org.apache.cassandra.service.pager.PagingState.RowMark",12,2,7,9,986,0,0,1,85,66,0,0,0,"2,00",6,17,14
"org.apache.cassandra.service.pager.QueryPager",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.cassandra.service.pager.QueryPagers",6,0,2,2,987,0,0,1,35,29,0,0,0,"1,50",1,2,3
"org.apache.cassandra.service.pager.RangeNamesQueryPager",1,1,6,7,1,0,0,1,60,48,0,0,0,"1,67",4,6,10
"org.apache.cassandra.service.pager.RangeSliceQueryPager",3,3,6,9,987,0,0,1,90,80,0,0,0,"2,50",4,7,15
"org.apache.cassandra.service.pager.SinglePartitionPager",0,3,7,10,0,0,0,1,48,43,0,0,0,"1,57",5,7,11
"org.apache.cassandra.service.paxos.AbstractPaxosCallback",5,3,6,9,987,0,1,2,32,32,0,0,0,"1,25",2,6,5
"org.apache.cassandra.service.paxos.Commit",11,3,10,13,986,0,0,5,56,56,0,0,0,"1,20",9,14,12
"org.apache.cassandra.service.paxos.Commit.CommitSerializer",9,0,6,6,986,0,1,1,28,28,0,0,0,"2,00",2,11,6
"org.apache.cassandra.service.paxos.CommitVerbHandler",6,0,2,2,986,0,1,1,9,9,0,0,0,"1,00",0,4,1
"org.apache.cassandra.service.paxos.PaxosState",6,4,5,9,986,0,0,2,114,105,0,0,0,"1,60",2,7,8
"org.apache.cassandra.service.paxos.PrepareCallback",5,6,3,9,986,0,0,1,52,46,0,0,0,"2,25",1,3,9
"org.apache.cassandra.service.paxos.PrepareResponse",2,4,2,6,986,0,0,0,25,20,0,0,0,"1,00",1,2,2
"org.apache.cassandra.service.paxos.PrepareResponse.PrepareResponseSerializer",11,0,6,6,986,0,1,1,49,49,0,0,0,"2,00",2,10,6
"org.apache.cassandra.service.paxos.PrepareVerbHandler",6,0,2,2,986,0,1,1,9,9,0,0,0,"1,00",0,4,1
"org.apache.cassandra.service.paxos.ProposeCallback",3,4,5,9,986,0,0,1,53,37,0,0,0,"1,60",3,5,8
"org.apache.cassandra.service.paxos.ProposeVerbHandler",7,0,2,2,986,0,1,1,9,9,0,0,0,"1,00",0,4,1
"org.apache.cassandra.streaming.ConnectionHandler",4,4,7,11,1.000,0,0,1,84,54,0,0,0,"1,71",2,14,12
"org.apache.cassandra.streaming.ConnectionHandler.IncomingMessageHandler",4,4,10,14,1.000,1,0,2,48,41,0,5,0,"1,67",1,10,5
"org.apache.cassandra.streaming.ConnectionHandler.MessageHandler",8,4,9,13,1.000,0,0,2,78,72,2,0,0,"1,38",5,14,11
"org.apache.cassandra.streaming.ConnectionHandler.OutgoingMessageHandler",5,5,12,17,1.000,1,0,2,82,72,0,5,0,"1,67",1,11,10
"org.apache.cassandra.streaming.DefaultConnectionFactory",3,2,1,3,987,0,0,1,43,34,0,0,0,"3,00",1,4,3
"org.apache.cassandra.streaming.ProgressInfo",7,6,5,11,1,0,0,1,61,52,0,0,0,"2,40",4,5,12
"org.apache.cassandra.streaming.ProgressInfo.Direction",5,3,2,5,0,n/a,0,1,17,14,n/a,0,0,"1,50",1,2,3
"org.apache.cassandra.streaming.ReplicationFinishedVerbHandler",6,1,2,3,986,0,1,1,12,12,0,0,0,"2,00",0,5,2
"org.apache.cassandra.streaming.SessionInfo",3,8,17,25,0,0,0,3,145,110,0,0,0,"1,22",15,17,22
"org.apache.cassandra.streaming.StreamConnectionFactory",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.streaming.StreamCoordinator",4,7,16,23,989,0,0,2,149,136,0,0,0,"1,69",10,26,27
"org.apache.cassandra.streaming.StreamCoordinator.HostStreamingData",3,3,8,11,989,0,0,2,66,64,0,0,0,"1,75",5,10,14
"org.apache.cassandra.streaming.StreamCoordinator.StreamSessionConnector",2,1,2,3,989,0,0,1,14,14,0,0,0,"1,00",0,2,2
"org.apache.cassandra.streaming.StreamEvent",9,2,1,3,1,0,0,0,10,10,3,0,0,"1,00",0,1,1
"org.apache.cassandra.streaming.StreamEvent.ProgressEvent",3,3,3,6,2,1,0,0,14,14,0,0,0,"1,00",1,3,2
"org.apache.cassandra.streaming.StreamEvent.SessionCompleteEvent",6,6,2,8,2,1,0,0,15,15,0,0,0,"1,00",0,2,1
"org.apache.cassandra.streaming.StreamEvent.SessionPreparedEvent",3,3,2,5,2,1,0,0,9,9,0,0,0,"1,00",0,2,1
"org.apache.cassandra.streaming.StreamEvent.Type",6,3,0,3,0,n/a,0,0,6,6,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.streaming.StreamEventHandler",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.streaming.StreamException",0,1,2,3,0,0,0,0,14,14,0,0,0,"1,00",0,2,2
"org.apache.cassandra.streaming.StreamManager",4,4,9,13,986,0,0,2,85,65,0,0,0,"1,00",4,10,12
"org.apache.cassandra.streaming.StreamManager.StreamRateLimiter",4,4,3,7,986,0,0,2,33,32,0,0,0,"2,33",0,7,7
"org.apache.cassandra.streaming.StreamManagerMBean",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.streaming.StreamPlan",10,6,14,20,986,0,0,1,159,77,0,0,0,"1,07",11,15,15
"org.apache.cassandra.streaming.StreamReader",12,11,6,17,996,0,0,1,114,102,1,0,0,"2,50",3,15,15
"org.apache.cassandra.streaming.StreamReader.StreamDeserializer",8,9,14,23,991,0,0,3,95,91,0,0,0,"1,29",11,24,18
"org.apache.cassandra.streaming.StreamReceiveTask",6,7,5,12,988,0,0,2,68,47,0,0,0,"1,60",2,10,8
"org.apache.cassandra.streaming.StreamReceiveTask.OnCompletionRunnable",17,1,2,3,988,0,0,1,83,74,0,0,0,"4,00",0,18,8
"org.apache.cassandra.streaming.StreamRequest",6,5,1,6,986,0,0,0,15,15,0,0,0,"1,00",0,1,1
"org.apache.cassandra.streaming.StreamRequest.StreamRequestSerializer",9,0,6,6,986,0,1,1,51,51,0,0,0,"3,00",2,11,9
"org.apache.cassandra.streaming.StreamResultFuture",3,5,15,20,0,0,0,1,168,140,0,0,0,"1,67",6,15,25
"org.apache.cassandra.streaming.StreamSession",33,17,45,62,990,0,0,7,604,422,0,0,0,"2,11",13,69,95
"org.apache.cassandra.streaming.StreamSession.SSTableStreamingSections",5,4,1,5,987,0,0,0,14,14,0,0,0,"1,00",0,1,1
"org.apache.cassandra.streaming.StreamSession.State",3,6,0,6,0,n/a,0,0,9,9,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.streaming.StreamState",10,3,2,5,0,0,0,1,25,22,0,0,0,"1,00",1,2,3
"org.apache.cassandra.streaming.StreamSummary",5,4,4,8,988,0,0,0,42,36,0,0,0,"1,50",3,4,6
"org.apache.cassandra.streaming.StreamSummary.StreamSummarySerializer",7,0,6,6,988,0,1,1,24,23,0,0,0,"1,00",2,9,3
"org.apache.cassandra.streaming.StreamTask",0,2,5,7,0,0,0,2,34,17,0,0,0,"1,00",3,5,2
"org.apache.cassandra.streaming.StreamTransferTask",5,6,9,15,1.004,0,0,1,122,99,0,0,0,"2,00",5,13,20
"org.apache.cassandra.streaming.StreamWriter",11,7,4,11,990,0,0,1,98,67,1,0,0,"3,00",2,13,12
"org.apache.cassandra.streaming.compress.CompressedInputStream",4,11,5,16,11,0,0,1,83,65,0,0,0,"1,80",2,7,9
"org.apache.cassandra.streaming.compress.CompressedInputStream.Reader",3,3,4,7,11,1,0,1,34,34,0,1,0,"2,50",0,2,5
"org.apache.cassandra.streaming.compress.CompressedStreamReader",16,12,9,21,1.003,1,0,1,78,66,0,3,2,"3,00",2,16,9
"org.apache.cassandra.streaming.compress.CompressedStreamWriter",11,8,8,16,1.000,1,0,1,80,70,0,1,2,"2,75",2,9,11
"org.apache.cassandra.streaming.compress.CompressionInfo",8,3,1,4,988,0,0,0,15,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.streaming.compress.CompressionInfo.CompressionInfoSerializer",9,0,6,6,988,0,1,1,43,38,0,0,0,"3,00",2,8,9
"org.apache.cassandra.streaming.management.ProgressInfoCompositeData",2,4,2,6,2,0,0,1,75,75,0,0,0,"1,00",2,4,2
"org.apache.cassandra.streaming.management.SessionCompleteEventCompositeData",2,4,1,5,3,0,0,1,42,42,0,0,0,"1,00",1,1,1
"org.apache.cassandra.streaming.management.SessionInfoCompositeData",5,4,4,8,995,0,0,1,134,134,0,0,0,"1,25",4,9,10
"org.apache.cassandra.streaming.management.StreamEventJMXNotifier",1,3,3,6,0,0,0,1,58,55,0,0,0,"2,33",0,3,7
"org.apache.cassandra.streaming.management.StreamStateCompositeData",4,4,2,6,2,0,0,1,96,94,0,0,0,"1,75",2,7,7
"org.apache.cassandra.streaming.management.StreamSummaryCompositeData",1,4,2,6,989,0,0,1,51,49,0,0,0,"1,00",2,3,2
"org.apache.cassandra.streaming.messages.CompleteMessage",2,1,2,3,991,0,0,0,20,20,0,0,0,"1,00",1,2,4
"org.apache.cassandra.streaming.messages.FileMessageHeader",10,11,5,16,990,0,0,1,91,82,0,0,0,"2,00",4,5,10
"org.apache.cassandra.streaming.messages.FileMessageHeader.FileMessageHeaderSerializer",16,0,6,6,990,0,1,1,67,66,0,0,0,"4,33",2,21,13
"org.apache.cassandra.streaming.messages.IncomingFileMessage",8,3,2,5,1.004,0,0,0,59,51,0,0,0,"1,75",1,3,7
"org.apache.cassandra.streaming.messages.OutgoingFileMessage",10,5,4,9,1.003,0,0,1,72,69,0,0,0,"2,00",1,14,12
"org.apache.cassandra.streaming.messages.PrepareMessage",7,3,2,5,993,0,0,0,56,46,0,0,0,"2,25",1,2,9
"org.apache.cassandra.streaming.messages.ReceivedMessage",6,3,2,5,991,0,0,0,32,32,0,0,0,"1,00",1,2,4
"org.apache.cassandra.streaming.messages.RetryMessage",6,3,2,5,991,0,0,0,32,32,0,0,0,"1,00",1,2,4
"org.apache.cassandra.streaming.messages.SessionFailedMessage",2,1,2,3,991,0,0,0,20,20,0,0,0,"1,00",1,2,4
"org.apache.cassandra.streaming.messages.StreamInitMessage",8,8,2,10,988,0,0,1,65,50,0,0,0,"1,50",1,6,3
"org.apache.cassandra.streaming.messages.StreamInitMessage.StreamInitMessageSerializer",8,0,6,6,988,0,1,1,35,35,0,0,0,"1,00",2,13,3
"org.apache.cassandra.streaming.messages.StreamMessage",8,5,4,9,993,0,0,2,55,43,0,0,0,"1,50",2,7,6
"org.apache.cassandra.streaming.messages.StreamMessage.Serializer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.streaming.messages.StreamMessage.Type",3,10,3,13,993,n/a,0,1,36,35,n/a,0,0,"1,67",1,4,5
"org.apache.cassandra.thrift.CassandraServer",16,4,94,98,990,0,0,14,2.184,2.115,0,0,0,"2,89",70,112,275
"org.apache.cassandra.thrift.CassandraServer.ThriftCASRequest",3,5,5,10,12,0,0,2,90,84,0,0,0,"3,60",4,8,18
"org.apache.cassandra.thrift.CustomTNonBlockingServer",2,0,2,2,1,0,0,1,16,16,0,0,0,"1,00",1,3,2
"org.apache.cassandra.thrift.CustomTNonBlockingServer.CustomFrameBuffer",1,0,2,2,0,0,0,1,11,11,0,0,0,"1,00",1,2,2
"org.apache.cassandra.thrift.CustomTNonBlockingServer.Factory",3,0,1,1,989,0,0,1,27,25,0,0,0,"2,00",1,3,2
"org.apache.cassandra.thrift.CustomTThreadPoolServer",2,5,3,8,988,0,0,1,95,63,0,0,0,"2,67",0,4,8
"org.apache.cassandra.thrift.CustomTThreadPoolServer.Factory",6,0,1,1,989,0,0,1,52,51,0,0,0,"3,00",1,6,3
"org.apache.cassandra.thrift.CustomTThreadPoolServer.WorkerProcess",2,1,2,3,988,0,0,1,65,48,0,0,0,"2,00",0,3,4
"org.apache.cassandra.thrift.ITransportFactory",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.thrift.SSLTransportFactory",0,15,3,18,0,0,0,2,55,55,0,0,0,"3,33",2,3,10
"org.apache.cassandra.thrift.TCustomNonblockingServerSocket",0,4,2,6,0,0,0,1,54,54,0,0,0,"2,50",1,2,5
"org.apache.cassandra.thrift.TCustomServerSocket",0,5,6,11,0,0,0,1,141,120,0,0,0,"1,83",1,6,11
"org.apache.cassandra.thrift.TCustomSocket",0,5,9,14,0,0,0,1,158,97,0,0,0,"1,89",2,9,17
"org.apache.cassandra.thrift.TFramedTransportFactory",0,2,3,5,0,0,0,1,22,22,0,0,0,"1,33",2,3,4
"org.apache.cassandra.thrift.THsHaDisruptorServer",1,1,3,4,0,0,0,2,26,20,0,0,0,"1,00",0,3,3
"org.apache.cassandra.thrift.THsHaDisruptorServer.Factory",5,0,1,1,988,0,0,1,36,36,0,0,0,"2,00",1,8,2
"org.apache.cassandra.thrift.TServerCustomFactory",0,2,2,4,0,0,0,1,47,43,0,0,0,"2,50",1,2,5
"org.apache.cassandra.thrift.TServerFactory",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.thrift.TServerFactory.Args",1,9,0,9,0,0,0,0,12,12,0,0,0,n/a,0,0,0
"org.apache.cassandra.thrift.ThriftClientState",5,5,25,30,986,1,0,2,28,21,0,16,0,"1,33",2,7,4
"org.apache.cassandra.thrift.ThriftConversion",24,0,33,33,989,0,0,10,593,542,0,0,0,"4,42",31,45,146
"org.apache.cassandra.thrift.ThriftResultsMerger",6,1,13,14,986,1,0,3,55,29,0,9,1,"2,00",3,9,8
"org.apache.cassandra.thrift.ThriftResultsMerger.PartitionMerger",1,6,8,14,0,0,0,2,88,84,0,0,0,"2,12",5,8,17
"org.apache.cassandra.thrift.ThriftResultsMerger.SuperColumnsPartitionMerger",6,4,13,17,986,1,0,1,65,65,0,8,1,"2,80",3,6,14
"org.apache.cassandra.thrift.ThriftServer",4,8,10,18,986,0,1,1,62,59,0,0,0,"1,29",4,10,9
"org.apache.cassandra.thrift.ThriftServer.ThriftServerThread",2,1,3,4,986,0,0,1,38,33,0,0,0,"1,00",0,7,3
"org.apache.cassandra.thrift.ThriftSessionManager",0,4,4,8,0,0,0,1,52,36,0,0,0,"1,75",2,4,7
"org.apache.cassandra.thrift.ThriftValidation",30,1,25,26,986,0,0,5,545,483,0,0,0,"4,88",6,45,122
"org.apache.cassandra.tools.AbstractJmxClient",1,9,11,20,1,0,0,4,78,78,0,0,0,"1,27",1,13,14
"org.apache.cassandra.tools.BootstrapMonitor",4,3,13,16,5,1,1,3,52,52,0,1,3,"1,29",1,11,9
"org.apache.cassandra.tools.BulkLoadConnectionFactory",6,4,3,7,988,0,1,1,34,31,0,0,0,"2,50",1,5,5
"org.apache.cassandra.tools.BulkLoader",8,20,2,22,993,0,0,1,97,95,0,0,0,"3,00",1,12,6
"org.apache.cassandra.tools.BulkLoader.CmdLineOptions",6,0,2,2,0,0,0,2,28,13,0,0,0,"1,00",2,2,2
"org.apache.cassandra.tools.BulkLoader.ExternalClient",2,10,13,23,988,2,0,1,25,25,0,7,1,"1,00",1,3,2
"org.apache.cassandra.tools.BulkLoader.LoaderOptions",3,15,5,20,993,0,0,1,212,208,0,0,0,"5,80",2,7,29
"org.apache.cassandra.tools.BulkLoader.ProgressIndicator",1,6,6,12,0,0,0,3,101,99,0,0,0,"3,00",1,6,18
"org.apache.cassandra.tools.ColumnFamilyStoreMBeanIterator",3,2,5,7,2,0,0,3,65,59,0,0,0,"2,00",3,5,12
"org.apache.cassandra.tools.GetVersion",1,0,1,1,987,0,0,1,5,5,0,0,0,"1,00",0,2,1
"org.apache.cassandra.tools.JMXConnection",1,7,4,11,0,0,0,1,33,33,0,0,0,"1,25",1,4,5
"org.apache.cassandra.tools.NodeProbe",118,23,139,162,1.006,0,0,4,1.075,999,0,0,0,"1,20",78,271,168
"org.apache.cassandra.tools.NodeTool",5,1,5,6,988,0,0,2,178,175,0,0,0,"1,60",1,7,8
"org.apache.cassandra.tools.NodeTool.NodeToolCmd",83,5,8,13,0,0,0,3,105,105,83,0,0,"3,00",6,8,21
"org.apache.cassandra.tools.RepairRunner",5,9,13,22,6,1,1,1,78,78,0,1,3,"1,71",1,11,12
"org.apache.cassandra.tools.SSTableExpiredBlockers",12,0,3,3,987,0,0,1,88,80,0,0,0,"4,67",2,14,14
"org.apache.cassandra.tools.SSTableLevelResetter",12,0,1,1,987,0,0,1,74,64,0,0,0,"8,00",0,10,8
"org.apache.cassandra.tools.SSTableMetadataViewer",2,0,2,2,987,0,0,1,76,70,0,0,0,"6,00",0,4,12
"org.apache.cassandra.tools.SSTableOfflineRelevel",11,0,1,1,988,0,0,1,80,50,0,0,0,"6,00",0,10,6
"org.apache.cassandra.tools.SSTableOfflineRelevel.Relevel",3,2,2,4,987,0,0,1,71,71,0,0,0,"5,33",0,4,16
"org.apache.cassandra.tools.SSTableRepairedAtSetter",7,0,1,1,987,0,0,1,67,52,0,0,0,"7,00",0,7,7
"org.apache.cassandra.tools.StandaloneSSTableUtil",10,7,3,10,991,0,0,1,69,68,0,0,0,"4,00",1,12,12
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options",4,7,5,12,991,0,0,1,78,78,0,0,0,"1,60",2,9,8
"org.apache.cassandra.tools.StandaloneSSTableUtil.Options.FileType",2,5,3,8,0,n/a,0,1,34,34,n/a,0,0,"2,00",2,4,6
"org.apache.cassandra.tools.StandaloneScrubber",12,7,2,9,990,0,0,1,130,126,0,0,0,"5,67",0,17,17
"org.apache.cassandra.tools.StandaloneScrubber.Options",3,7,5,12,990,0,0,1,78,78,0,0,0,"1,60",2,6,8
"org.apache.cassandra.tools.StandaloneSplitter",13,6,2,8,997,0,0,1,128,123,0,0,0,"10,50",1,18,21
"org.apache.cassandra.tools.StandaloneSplitter.Options",3,4,5,9,997,0,0,1,69,69,0,0,0,"1,60",2,7,8
"org.apache.cassandra.tools.StandaloneUpgrader",19,4,1,5,992,0,0,1,84,80,0,0,0,"10,00",0,24,10
"org.apache.cassandra.tools.StandaloneUpgrader.Options",3,5,5,10,992,0,0,1,80,80,0,0,0,"1,80",2,6,9
"org.apache.cassandra.tools.StandaloneVerifier",14,5,1,6,990,0,0,1,78,75,0,0,0,"8,00",0,11,8
"org.apache.cassandra.tools.StandaloneVerifier.Options",3,5,5,10,990,0,0,1,72,72,0,0,0,"1,60",2,6,8
"org.apache.cassandra.tools.Util",2,0,2,2,987,0,0,1,33,29,0,0,0,"1,50",0,3,3
"org.apache.cassandra.tools.nodetool.Assassinate",2,6,9,15,1.008,1,0,1,18,18,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.BootstrapResume",2,5,9,14,1.008,1,0,1,16,16,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.CfHistograms",0,0,0,0,0,0,0,0,8,5,0,0,0,n/a,0,0,0
"org.apache.cassandra.tools.nodetool.CfStats",0,0,0,0,0,0,0,0,8,5,0,0,0,n/a,0,0,0
"org.apache.cassandra.tools.nodetool.Cleanup",3,6,9,15,1.008,1,0,1,25,25,0,4,0,"3,00",0,4,3
"org.apache.cassandra.tools.nodetool.ClearSnapshot",2,7,9,16,1.008,1,0,1,28,28,0,4,0,"3,00",0,1,3
"org.apache.cassandra.tools.nodetool.Compact",2,7,9,16,1.008,1,0,1,24,24,0,4,0,"2,00",0,4,2
"org.apache.cassandra.tools.nodetool.CompactionHistory",2,5,9,14,1.008,1,0,1,24,24,0,4,0,"3,00",0,2,3
"org.apache.cassandra.tools.nodetool.CompactionStats",6,6,10,16,1.008,1,0,1,64,64,0,4,0,"6,00",0,8,12
"org.apache.cassandra.tools.nodetool.Decommission",2,5,9,14,1.008,1,0,1,18,18,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.DescribeCluster",4,5,9,14,1.008,1,0,1,20,18,0,4,0,"2,00",0,7,2
"org.apache.cassandra.tools.nodetool.DescribeRing",2,6,9,15,1.008,1,0,1,22,22,0,4,0,"2,00",0,3,2
"org.apache.cassandra.tools.nodetool.DisableAutoCompaction",2,6,9,15,1.008,1,0,1,22,22,0,4,0,"2,00",0,4,2
"org.apache.cassandra.tools.nodetool.DisableBackup",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.DisableBinary",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.DisableGossip",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.DisableHandoff",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.DisableHintsForDC",2,6,9,15,1.008,1,0,1,11,11,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.DisableThrift",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.Drain",2,5,9,14,1.008,1,0,1,15,15,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.EnableAutoCompaction",2,6,9,15,1.008,1,0,1,22,22,0,4,0,"2,00",0,4,2
"org.apache.cassandra.tools.nodetool.EnableBackup",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.EnableBinary",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.EnableGossip",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.EnableHandoff",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.EnableHintsForDC",2,6,9,15,1.008,1,0,1,11,11,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.EnableThrift",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.FailureDetectorInfo",2,5,9,14,1.008,1,0,1,16,16,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.Flush",2,6,9,15,1.008,1,0,1,22,22,0,4,0,"2,00",0,4,2
"org.apache.cassandra.tools.nodetool.GcStats",2,5,9,14,1.008,1,0,1,13,13,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.GetCompactionThreshold",3,6,9,15,1.008,1,0,1,17,17,0,4,0,"1,00",0,4,1
"org.apache.cassandra.tools.nodetool.GetCompactionThroughput",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.GetEndpoints",2,6,9,15,1.008,1,0,1,19,19,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.GetLoggingLevels",2,5,9,14,1.008,1,0,1,12,11,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.GetSSTables",2,6,9,15,1.008,1,0,1,19,19,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.GetStreamThroughput",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.GetTraceProbability",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.GossipInfo",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.HostStat",0,4,2,6,0,0,0,1,18,18,0,0,0,"1,50",1,2,3
"org.apache.cassandra.tools.nodetool.Info",5,6,10,16,1.008,1,0,1,111,96,0,4,0,"4,00",1,23,8
"org.apache.cassandra.tools.nodetool.InvalidateCounterCache",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.InvalidateKeyCache",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.InvalidateRowCache",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.Join",2,5,9,14,1.008,1,0,1,16,16,0,4,0,"1,00",0,3,1
"org.apache.cassandra.tools.nodetool.ListSnapshots",3,5,9,14,1.008,1,0,1,37,36,0,4,0,"4,00",0,4,4
"org.apache.cassandra.tools.nodetool.Move",2,6,9,15,1.008,1,0,1,17,17,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.NetStats",7,6,9,15,1.010,1,0,1,84,83,0,4,0,"18,00",0,25,18
"org.apache.cassandra.tools.nodetool.PauseHandoff",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.ProxyHistograms",3,5,9,14,1.008,1,0,1,26,26,0,4,0,"2,00",0,3,2
"org.apache.cassandra.tools.nodetool.RangeKeySample",2,5,9,14,1.008,1,0,1,14,14,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.Rebuild",2,6,9,15,1.008,1,0,1,11,11,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.RebuildIndex",2,6,9,15,1.008,1,0,1,12,12,0,4,0,"1,00",0,1,1
"org.apache.cassandra.tools.nodetool.Refresh",2,6,9,15,1.008,1,0,1,12,12,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.ReloadTriggers",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.RemoveNode",2,6,9,15,1.008,1,0,1,23,23,0,4,0,"4,00",0,4,4
"org.apache.cassandra.tools.nodetool.Repair",5,18,9,27,1.008,1,0,1,77,76,0,4,0,"8,00",0,6,8
"org.apache.cassandra.tools.nodetool.ReplayBatchlog",2,5,9,14,1.008,1,0,1,15,15,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.ResetLocalSchema",2,5,9,14,1.008,1,0,1,15,15,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.ResumeHandoff",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.Ring",4,7,10,17,1.009,1,0,1,116,114,0,4,0,"5,33",0,14,16
"org.apache.cassandra.tools.nodetool.Scrub",2,9,9,18,1.008,1,0,1,37,37,0,4,0,"2,00",0,3,2
"org.apache.cassandra.tools.nodetool.SetCacheCapacity",2,6,9,15,1.008,1,0,1,15,15,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.SetCacheKeysToSave",2,6,9,15,1.008,1,0,1,15,15,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.SetCompactionThreshold",2,6,9,15,1.008,1,0,1,17,17,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.SetCompactionThroughput",2,6,9,15,1.008,1,0,1,11,11,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.SetHintedHandoffThrottleInKB",2,6,9,15,1.008,1,0,1,11,11,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.SetHostStat",0,2,4,6,0,0,0,1,24,24,0,0,0,"1,00",2,4,4
"org.apache.cassandra.tools.nodetool.SetLoggingLevel",2,6,9,15,1.008,1,0,1,13,13,0,4,0,"3,00",0,2,3
"org.apache.cassandra.tools.nodetool.SetStreamThroughput",2,6,9,15,1.008,1,0,1,11,11,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.SetTraceProbability",2,6,9,15,1.008,1,0,1,12,12,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tools.nodetool.Snapshot",2,9,9,18,1.008,1,0,1,54,53,0,4,0,"6,00",0,1,6
"org.apache.cassandra.tools.nodetool.Status",4,18,13,31,1.009,1,0,1,144,141,0,4,0,"5,20",1,18,26
"org.apache.cassandra.tools.nodetool.StatusBackup",2,5,9,14,1.008,1,0,1,12,12,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.StatusBinary",2,5,9,14,1.008,1,0,1,12,12,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.StatusGossip",2,5,9,14,1.008,1,0,1,12,12,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.StatusHandoff",2,5,9,14,1.008,1,0,1,14,14,0,4,0,"3,00",0,3,3
"org.apache.cassandra.tools.nodetool.StatusThrift",2,5,9,14,1.008,1,0,1,12,12,0,4,0,"2,00",0,2,2
"org.apache.cassandra.tools.nodetool.Stop",3,7,9,16,1.008,1,0,1,22,22,0,4,0,"2,00",0,3,2
"org.apache.cassandra.tools.nodetool.StopDaemon",3,5,9,14,1.008,1,0,1,17,16,0,4,0,"1,00",0,3,1
"org.apache.cassandra.tools.nodetool.TableHistograms",6,6,9,15,1.008,1,0,1,84,80,0,4,0,"10,00",0,11,10
"org.apache.cassandra.tools.nodetool.TableStats",9,8,10,18,1.009,1,0,1,171,165,0,4,0,"13,50",1,16,27
"org.apache.cassandra.tools.nodetool.TableStats.OptionFilter",2,4,4,8,1,0,0,1,66,57,0,0,0,"3,75",1,4,15
"org.apache.cassandra.tools.nodetool.TopPartitions",4,9,9,18,1.008,1,0,1,73,71,0,4,0,"4,00",0,4,8
"org.apache.cassandra.tools.nodetool.TpStats",3,5,9,14,1.008,1,0,1,22,22,0,4,0,"3,00",0,5,3
"org.apache.cassandra.tools.nodetool.TruncateHints",2,6,9,15,1.008,1,0,1,14,14,0,4,0,"2,00",0,3,2
"org.apache.cassandra.tools.nodetool.UpgradeSSTable",2,7,9,16,1.008,1,0,1,24,24,0,4,0,"2,00",0,3,2
"org.apache.cassandra.tools.nodetool.Verify",2,7,9,16,1.008,1,0,1,26,26,0,4,0,"2,00",0,3,2
"org.apache.cassandra.tools.nodetool.Version",2,5,9,14,1.008,1,0,1,9,9,0,4,0,"1,00",0,2,1
"org.apache.cassandra.tracing.ExpiredTraceState",1,0,2,2,987,0,0,1,11,11,0,0,0,"1,00",1,3,2
"org.apache.cassandra.tracing.TraceKeyspace",11,5,6,11,986,0,0,1,79,79,0,0,0,"1,33",5,17,8
"org.apache.cassandra.tracing.TraceState",24,11,19,30,986,0,1,2,172,150,0,0,0,"1,42",4,22,27
"org.apache.cassandra.tracing.TraceState.Status",2,3,0,3,0,n/a,0,0,6,6,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.tracing.Tracing",52,7,21,28,986,0,0,1,177,159,0,0,0,"1,52",13,25,32
"org.apache.cassandra.tracing.Tracing.TraceType",6,5,3,8,986,n/a,0,3,24,24,n/a,0,0,"1,33",3,6,4
"org.apache.cassandra.transport.CBCodec",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.transport.CBUtil",14,3,48,51,986,0,0,15,416,400,0,0,0,"1,67",33,54,82
"org.apache.cassandra.transport.Client",11,1,6,7,991,0,0,1,206,201,0,0,0,"4,67",3,12,28
"org.apache.cassandra.transport.Connection",2,5,6,11,1,0,0,4,35,35,0,0,0,"1,00",4,7,6
"org.apache.cassandra.transport.Connection.Factory",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.transport.Connection.Tracker",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.transport.ConnectionLimitHandler",1,3,2,5,987,0,0,1,69,62,0,0,0,"5,00",0,4,10
"org.apache.cassandra.transport.DataType",2,31,8,39,2,n/a,0,1,251,245,n/a,0,0,"6,88",6,10,55
"org.apache.cassandra.transport.Event",29,1,6,7,9,0,0,1,37,37,2,0,0,"2,25",3,9,9
"org.apache.cassandra.transport.Event.NodeEvent",4,2,7,9,9,1,0,1,13,13,2,2,0,"1,00",1,3,2
"org.apache.cassandra.transport.Event.SchemaChange",28,6,14,20,9,1,0,1,176,171,0,2,0,"3,78",5,10,34
"org.apache.cassandra.transport.Event.SchemaChange.Change",26,3,0,3,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.transport.Event.SchemaChange.Target",22,5,0,5,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.transport.Event.StatusChange",5,3,16,19,9,2,0,4,52,51,0,3,0,"1,11",7,10,10
"org.apache.cassandra.transport.Event.StatusChange.Status",1,2,0,2,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.transport.Event.TopologyChange",5,3,17,20,9,2,0,5,56,55,0,3,0,"1,10",8,11,11
"org.apache.cassandra.transport.Event.TopologyChange.Change",1,3,0,3,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.transport.Event.Type",5,5,1,6,0,n/a,0,0,11,11,n/a,0,0,"1,00",0,1,1
"org.apache.cassandra.transport.Frame",6,3,6,9,3,0,0,4,47,34,0,0,0,"1,00",4,7,6
"org.apache.cassandra.transport.Frame.Compressor",3,0,1,1,4,0,0,1,23,22,0,0,0,"3,00",0,1,3
"org.apache.cassandra.transport.Frame.Decoder",5,6,3,9,992,0,0,1,95,88,0,0,0,"4,00",0,9,12
"org.apache.cassandra.transport.Frame.Decompressor",3,0,1,1,4,0,0,1,21,21,0,0,0,"3,00",0,1,3
"org.apache.cassandra.transport.Frame.Encoder",3,0,1,1,4,0,0,1,20,20,0,0,0,"2,00",0,2,2
"org.apache.cassandra.transport.Frame.Header",6,6,2,8,2,0,0,0,21,20,0,0,0,"1,00",0,3,2
"org.apache.cassandra.transport.Frame.Header.Flag",6,5,2,7,1,n/a,0,2,26,25,n/a,0,0,"2,50",2,3,5
"org.apache.cassandra.transport.FrameCompressor",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.transport.FrameCompressor.LZ4Compressor",2,4,5,9,2,0,1,1,76,66,0,0,0,"1,33",2,3,4
"org.apache.cassandra.transport.FrameCompressor.SnappyCompressor",4,1,5,6,988,0,1,1,76,68,0,0,0,"1,33",2,4,4
"org.apache.cassandra.transport.Message",18,7,9,16,4,0,0,4,59,51,2,0,0,"1,00",5,9,9
"org.apache.cassandra.transport.Message.Codec",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.cassandra.transport.Message.Direction",5,2,2,4,0,n/a,0,1,12,12,n/a,0,0,"2,00",2,2,4
"org.apache.cassandra.transport.Message.Dispatcher",9,1,4,5,991,0,0,2,74,73,0,0,0,"2,00",0,19,10
"org.apache.cassandra.transport.Message.Dispatcher.FlushItem",2,3,1,4,0,0,0,0,12,12,0,0,0,"1,00",0,1,1
"org.apache.cassandra.transport.Message.Dispatcher.Flusher",2,7,3,10,1,0,0,1,59,58,0,0,0,"3,67",0,3,11
"org.apache.cassandra.transport.Message.ProtocolDecoder",4,0,1,1,988,0,0,1,47,46,0,0,0,"9,00",0,8,9
"org.apache.cassandra.transport.Message.ProtocolEncoder",5,0,1,1,988,0,0,1,82,81,0,0,0,"14,00",0,6,14
"org.apache.cassandra.transport.Message.Request",11,6,13,19,987,1,0,2,19,19,3,8,0,"1,33",2,5,4
"org.apache.cassandra.transport.Message.Response",17,7,14,21,5,1,0,2,29,29,6,8,0,"1,20",4,6,6
"org.apache.cassandra.transport.Message.Type",16,21,2,23,4,n/a,0,1,58,58,n/a,0,0,"4,00",1,3,8
"org.apache.cassandra.transport.Message.UnexpectedChannelExceptionHandler",2,2,2,4,5,0,0,1,49,39,0,0,0,"2,00",1,2,4
"org.apache.cassandra.transport.OptionCodec",2,2,7,9,2,0,0,3,76,76,0,0,0,"2,14",5,12,15
"org.apache.cassandra.transport.OptionCodec.Codecable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.transport.ProtocolException",7,0,4,4,3,0,1,1,14,11,0,0,0,"1,00",1,2,2
"org.apache.cassandra.transport.RequestThreadPoolExecutor",4,3,11,14,989,0,0,5,55,55,0,0,0,"1,00",9,14,11
"org.apache.cassandra.transport.Server",37,13,6,19,986,0,0,1,108,105,0,0,0,"2,57",2,16,18
"org.apache.cassandra.transport.Server.AbstractSecureIntializer",6,3,4,7,986,1,0,1,26,26,2,1,0,"1,00",1,4,2
"org.apache.cassandra.transport.Server.Builder",2,6,7,13,986,0,0,5,55,55,0,0,0,"1,43",7,8,10
"org.apache.cassandra.transport.Server.ConnectionTracker",3,2,6,8,17,0,0,2,36,30,0,0,0,"1,33",1,7,8
"org.apache.cassandra.transport.Server.EventNotifier",6,3,26,29,986,0,0,1,169,156,0,0,0,"1,35",1,32,35
"org.apache.cassandra.transport.Server.Initializer",5,8,2,10,986,0,0,1,38,34,1,0,0,"2,00",0,4,4
"org.apache.cassandra.transport.Server.LatestEvent",1,2,4,6,0,0,0,2,29,29,0,0,0,"1,50",3,4,6
"org.apache.cassandra.transport.Server.OptionalSecureInitializer",4,3,6,9,986,2,0,1,37,31,0,1,1,"1,67",0,4,5
"org.apache.cassandra.transport.Server.SecureInitializer",4,3,6,9,986,2,0,1,13,13,0,1,1,"1,00",0,5,2
"org.apache.cassandra.transport.ServerConnection",5,4,5,9,988,0,0,1,82,78,0,0,0,"4,80",3,9,24
"org.apache.cassandra.transport.ServerConnection.State",1,3,0,3,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.transport.ServerError",2,0,5,5,4,0,1,1,18,15,0,0,0,"1,00",1,3,3
"org.apache.cassandra.transport.SimpleClient",18,17,14,31,1.002,0,0,1,147,138,0,0,0,"1,33",5,22,20
"org.apache.cassandra.transport.SimpleClient.ConnectionTracker",1,0,2,2,0,0,0,2,8,8,0,0,0,"1,00",1,2,2
"org.apache.cassandra.transport.SimpleClient.EventHandler",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.transport.SimpleClient.Initializer",2,0,1,1,1.002,0,0,1,16,16,1,0,0,"1,00",0,1,1
"org.apache.cassandra.transport.SimpleClient.ResponseHandler",3,2,2,4,1.002,0,0,2,30,30,0,0,0,"2,50",0,3,5
"org.apache.cassandra.transport.SimpleClient.SecureInitializer",4,1,3,4,1.002,1,0,1,17,17,0,0,1,"1,00",0,4,2
"org.apache.cassandra.transport.SimpleClient.SimpleEventHandler",1,1,2,3,1,0,1,1,8,8,0,0,0,"1,00",0,1,1
"org.apache.cassandra.transport.messages.AuthChallenge",5,9,16,25,987,2,0,1,34,31,0,12,0,"1,00",1,3,5
"org.apache.cassandra.transport.messages.AuthResponse",4,2,2,4,988,0,0,1,59,53,0,0,0,"1,40",1,6,7
"org.apache.cassandra.transport.messages.AuthSuccess",5,9,16,25,987,2,0,1,41,35,0,12,0,"1,20",1,3,6
"org.apache.cassandra.transport.messages.AuthenticateMessage",5,9,16,25,987,2,0,0,33,30,0,12,0,"1,00",1,3,5
"org.apache.cassandra.transport.messages.BatchMessage",13,5,3,8,991,0,0,1,181,178,0,0,0,"4,75",2,15,38
"org.apache.cassandra.transport.messages.CredentialsMessage",12,8,17,25,989,2,0,1,53,50,0,10,0,"1,14",2,7,8
"org.apache.cassandra.transport.messages.ErrorMessage",7,3,7,10,988,0,0,3,295,283,0,0,0,"5,80",5,8,58
"org.apache.cassandra.transport.messages.ErrorMessage.WrappedException",2,1,2,3,0,0,0,1,14,14,0,0,0,"1,00",1,2,2
"org.apache.cassandra.transport.messages.EventMessage",7,9,16,25,16,2,0,0,30,30,0,12,0,"1,00",1,4,5
"org.apache.cassandra.transport.messages.ExecuteMessage",14,3,3,6,988,0,0,1,103,100,0,0,0,"2,83",2,22,17
"org.apache.cassandra.transport.messages.OptionsMessage",9,7,16,23,990,2,0,1,43,39,0,10,0,"1,17",2,4,7
"org.apache.cassandra.transport.messages.PrepareMessage",8,2,3,5,987,0,0,1,60,60,0,0,0,"1,50",2,13,9
"org.apache.cassandra.transport.messages.QueryMessage",20,9,16,25,988,2,0,1,92,89,0,10,0,"2,83",2,22,17
"org.apache.cassandra.transport.messages.ReadyMessage",4,8,16,24,6,2,0,0,29,26,0,12,0,"1,00",1,3,5
"org.apache.cassandra.transport.messages.RegisterMessage",1,2,3,5,987,0,0,1,51,51,0,0,0,"1,83",2,3,11
"org.apache.cassandra.transport.messages.ResultMessage",31,2,2,4,986,0,0,1,27,27,5,0,0,"1,00",1,2,4
"org.apache.cassandra.transport.messages.ResultMessage.Kind",6,8,2,10,986,n/a,0,1,36,36,n/a,0,0,"3,00",1,3,6
"org.apache.cassandra.transport.messages.ResultMessage.Prepared",19,6,9,15,986,1,0,3,86,83,0,0,0,"1,50",5,12,15
"org.apache.cassandra.transport.messages.ResultMessage.Rows",16,3,5,8,986,1,0,1,37,37,0,0,0,"1,00",2,5,6
"org.apache.cassandra.transport.messages.ResultMessage.SchemaChange",5,3,5,8,986,1,0,1,37,37,0,0,0,"1,00",2,4,6
"org.apache.cassandra.transport.messages.ResultMessage.SetKeyspace",3,3,5,8,986,1,0,1,36,36,0,0,0,"1,00",2,4,6
"org.apache.cassandra.transport.messages.ResultMessage.Void",7,2,5,7,986,1,0,1,33,31,0,0,0,"1,00",2,4,6
"org.apache.cassandra.transport.messages.StartupMessage",4,4,4,8,987,0,0,2,79,75,0,0,0,"2,14",3,7,15
"org.apache.cassandra.transport.messages.SupportedMessage",5,9,16,25,987,2,0,0,32,29,0,12,0,"1,00",1,3,5
"org.apache.cassandra.triggers.CustomClassLoader",0,3,5,8,0,0,0,1,80,72,0,0,0,"1,67",2,5,10
"org.apache.cassandra.triggers.ITrigger",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.triggers.TriggerExecutor",10,4,10,14,986,0,0,1,186,146,0,0,0,"3,40",6,17,34
"org.apache.cassandra.utils.AbstractIterator",40,2,6,8,1,0,0,2,46,46,37,0,0,"2,20",5,6,11
"org.apache.cassandra.utils.AbstractIterator.State",1,4,0,4,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.utils.AlwaysPresentFilter",4,0,9,9,987,0,0,9,27,27,0,0,0,"1,00",5,9,9
"org.apache.cassandra.utils.AsymmetricOrdering",2,0,5,5,2,0,0,2,67,48,1,0,0,"2,50",5,5,10
"org.apache.cassandra.utils.AsymmetricOrdering.Op",2,4,0,4,0,n/a,0,0,11,7,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.utils.AsymmetricOrdering.Reversed",1,0,6,6,2,1,0,3,15,15,0,1,1,"1,00",3,4,3
"org.apache.cassandra.utils.BackgroundActivityMonitor",8,15,8,23,986,0,0,5,90,89,0,0,0,"1,75",5,11,14
"org.apache.cassandra.utils.BackgroundActivityMonitor.BackgroundActivityReporter",6,0,1,1,986,0,0,1,24,23,0,0,0,"4,00",0,5,4
"org.apache.cassandra.utils.BatchRemoveIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.BiMultiValMap",4,2,18,20,0,0,0,1,100,92,0,0,0,"1,17",13,18,21
"org.apache.cassandra.utils.BloomCalculations",2,5,3,8,2,0,0,1,134,84,0,0,0,"3,67",3,4,11
"org.apache.cassandra.utils.BloomCalculations.BloomSpecification",1,2,2,4,0,0,0,0,18,14,0,0,0,"1,00",1,2,2
"org.apache.cassandra.utils.BloomFilter",3,5,16,21,990,1,0,3,120,103,0,0,0,"1,36",7,20,19
"org.apache.cassandra.utils.BloomFilterSerializer",5,0,5,5,990,0,0,3,35,28,0,0,0,"1,20",3,7,6
"org.apache.cassandra.utils.BooleanSerializer",4,1,6,7,4,0,1,3,16,16,0,0,0,"1,00",2,3,3
"org.apache.cassandra.utils.ByteBufferUtil",290,2,54,56,5,0,0,40,507,352,0,0,0,"1,39",44,61,79
"org.apache.cassandra.utils.BytesReadTracker",5,2,22,24,3,0,1,3,109,101,0,3,0,"1,00",14,18,18
"org.apache.cassandra.utils.CLibrary",10,17,23,40,0,0,0,3,270,255,0,0,0,"2,00",16,23,38
"org.apache.cassandra.utils.CassandraVersion",6,8,11,19,1,0,0,2,181,155,0,0,0,"3,55",9,11,39
"org.apache.cassandra.utils.ChecksumType",12,2,2,4,0,n/a,0,2,31,31,n/a,0,0,"1,00",1,2,4
"org.apache.cassandra.utils.CloseableIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.CoalescingStrategies",10,6,4,10,995,0,0,3,106,99,0,0,0,"3,00",3,6,18
"org.apache.cassandra.utils.CoalescingStrategies.Clock",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.CoalescingStrategies.Coalescable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.CoalescingStrategies.CoalescingStrategy",9,6,6,12,995,0,0,2,101,81,4,0,0,"2,17",0,7,13
"org.apache.cassandra.utils.CoalescingStrategies.DisabledCoalescingStrategy",4,6,9,15,995,1,0,1,25,22,0,4,0,"1,33",1,5,4
"org.apache.cassandra.utils.CoalescingStrategies.FixedCoalescingStrategy",4,7,9,16,995,1,0,1,28,25,0,4,0,"1,33",1,6,4
"org.apache.cassandra.utils.CoalescingStrategies.MovingAverageCoalescingStrategy",5,11,11,22,995,1,0,1,64,58,0,4,0,"1,80",3,9,9
"org.apache.cassandra.utils.CoalescingStrategies.Parker",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.CoalescingStrategies.TimeHorizonMovingAverageCoalescingStrategy",5,15,14,29,995,1,0,1,107,95,0,4,0,"2,25",5,14,18
"org.apache.cassandra.utils.ConcurrentBiMap",1,2,15,17,0,0,0,1,90,81,0,0,0,"1,33",11,15,20
"org.apache.cassandra.utils.CounterId",5,2,13,15,989,0,0,4,84,71,0,0,0,"1,23",12,14,16
"org.apache.cassandra.utils.CounterId.LocalCounterIdHolder",3,1,2,3,989,0,0,1,12,12,0,0,0,"1,00",1,4,2
"org.apache.cassandra.utils.CounterId.LocalId",2,1,0,1,989,0,0,0,6,4,0,0,0,n/a,0,1,0
"org.apache.cassandra.utils.DefaultValue",0,2,5,7,0,0,0,1,26,26,0,0,0,"1,00",2,5,5
"org.apache.cassandra.utils.DynamicList",2,3,9,12,2,0,0,1,160,141,0,0,0,"3,44",6,16,31
"org.apache.cassandra.utils.DynamicList.Node",3,3,7,10,1,0,0,1,49,44,0,0,0,"1,29",4,7,9
"org.apache.cassandra.utils.EstimatedHistogram",12,3,19,22,7,0,0,2,253,192,0,0,0,"2,47",13,19,47
"org.apache.cassandra.utils.EstimatedHistogram.EstimatedHistogramSerializer",8,0,6,6,7,0,1,2,38,38,0,0,0,"3,00",2,8,9
"org.apache.cassandra.utils.ExpiringMap",2,5,13,18,988,0,0,1,115,103,0,0,0,"1,71",9,15,24
"org.apache.cassandra.utils.ExpiringMap.CacheableObject",1,3,2,5,0,0,0,1,17,17,0,0,0,"1,00",1,2,2
"org.apache.cassandra.utils.FBUtilities",230,12,56,68,986,0,0,37,672,600,0,0,0,"1,68",44,67,101
"org.apache.cassandra.utils.FBUtilities.WrappedCloseableIterator",1,1,3,4,0,0,0,2,16,16,0,0,0,"1,33",1,3,4
"org.apache.cassandra.utils.FastByteOperations",5,0,6,6,3,0,0,1,35,27,0,0,0,"1,00",4,11,6
"org.apache.cassandra.utils.FastByteOperations.BestHolder",3,2,1,3,3,0,0,1,38,25,0,0,0,"2,00",1,1,2
"org.apache.cassandra.utils.FastByteOperations.ByteOperations",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.utils.FastByteOperations.PureJavaOperations",2,0,10,10,1,0,1,3,70,69,0,0,0,"2,60",3,5,13
"org.apache.cassandra.utils.FastByteOperations.UnsafeOperations",2,6,16,22,1,0,1,1,223,199,0,0,0,"2,33",6,11,28
"org.apache.cassandra.utils.FilterFactory",6,3,5,8,990,0,0,3,52,41,0,0,0,"1,60",4,7,8
"org.apache.cassandra.utils.GuidGenerator",2,3,4,7,1,0,0,1,72,68,0,0,0,"2,25",4,4,9
"org.apache.cassandra.utils.Hex",8,4,4,8,1,0,0,2,101,88,0,0,0,"4,25",4,4,17
"org.apache.cassandra.utils.HistogramBuilder",1,2,6,8,1,0,0,1,120,93,0,0,0,"3,83",3,6,23
"org.apache.cassandra.utils.IFilter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.cassandra.utils.IFilter.FilterKey",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.IMergeIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.IndexedSearchIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.utils.Interval",2,6,8,14,0,0,0,3,72,71,0,0,0,"1,17",7,8,14
"org.apache.cassandra.utils.IntervalTree",5,4,14,18,12,0,0,5,87,87,1,0,0,"1,64",13,18,23
"org.apache.cassandra.utils.IntervalTree.IntervalNode",3,7,2,9,12,0,0,1,99,93,0,0,0,"10,00",0,2,20
"org.apache.cassandra.utils.IntervalTree.Serializer",6,3,8,11,12,0,1,1,63,57,0,0,0,"1,60",3,10,8
"org.apache.cassandra.utils.IntervalTree.TreeIterator",3,4,9,13,12,1,0,1,31,29,0,5,0,"2,00",1,4,6
"org.apache.cassandra.utils.JVMStabilityInspector",53,2,6,8,986,0,0,1,69,58,0,0,0,"3,00",1,12,18
"org.apache.cassandra.utils.JVMStabilityInspector.Killer",5,1,2,3,986,0,0,1,28,22,0,0,0,"2,00",0,3,4
"org.apache.cassandra.utils.LockedDynamicList",0,1,5,6,0,0,0,1,63,56,0,0,0,"1,00",3,5,5
"org.apache.cassandra.utils.MD5Digest",12,2,7,9,1,0,0,3,49,40,0,0,0,"1,14",6,7,8
"org.apache.cassandra.utils.MergeIterator",11,4,10,14,7,1,0,2,43,42,3,5,0,"2,00",2,9,8
"org.apache.cassandra.utils.MergeIterator.Candidate",1,5,5,10,0,0,0,1,39,37,0,0,0,"1,20",4,5,6
"org.apache.cassandra.utils.MergeIterator.ManyToOne",4,8,15,23,7,2,0,1,251,141,0,7,0,"4,67",3,16,28
"org.apache.cassandra.utils.MergeIterator.OneToOne",3,5,11,16,7,2,0,1,17,17,0,7,0,"1,50",1,7,3
"org.apache.cassandra.utils.MergeIterator.Reducer",11,0,5,5,0,0,0,5,27,11,9,0,0,"1,00",2,5,3
"org.apache.cassandra.utils.MergeIterator.TrivialOneToOne",3,5,11,16,7,2,0,1,16,16,0,7,0,"1,50",1,4,3
"org.apache.cassandra.utils.MerkleTree",14,13,24,37,986,0,0,3,380,267,0,0,0,"2,25",19,47,54
"org.apache.cassandra.utils.MerkleTree.Hashable",12,5,11,16,986,0,0,2,72,56,2,0,0,"1,20",6,11,12
"org.apache.cassandra.utils.MerkleTree.Hashable.HashableSerializer",8,0,6,6,986,0,1,1,36,36,0,0,0,"3,00",2,9,9
"org.apache.cassandra.utils.MerkleTree.Inner",6,9,17,26,986,1,0,1,87,75,0,6,1,"1,50",4,14,12
"org.apache.cassandra.utils.MerkleTree.Inner.InnerSerializer",11,0,6,6,986,0,1,1,47,47,0,0,0,"3,33",2,13,10
"org.apache.cassandra.utils.MerkleTree.Leaf",6,6,13,19,986,1,0,0,35,23,0,7,0,"1,00",1,7,4
"org.apache.cassandra.utils.MerkleTree.Leaf.LeafSerializer",9,0,6,6,986,0,1,1,38,38,0,0,0,"3,67",2,7,11
"org.apache.cassandra.utils.MerkleTree.MerkleTreeSerializer",12,0,6,6,986,0,1,1,49,46,0,0,0,"1,00",2,12,3
"org.apache.cassandra.utils.MerkleTree.RowHash",8,3,2,5,986,0,0,0,22,17,0,0,0,"1,00",1,3,2
"org.apache.cassandra.utils.MerkleTree.StopRecursion",4,0,0,0,0,0,0,0,7,3,3,0,0,n/a,0,0,0
"org.apache.cassandra.utils.MerkleTree.StopRecursion.BadRange",2,0,1,1,1,1,0,0,4,4,0,0,0,"1,00",0,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.InvalidHash",1,0,1,1,1,1,0,0,4,4,0,0,0,"1,00",0,1,1
"org.apache.cassandra.utils.MerkleTree.StopRecursion.TooDeep",2,0,1,1,1,1,0,0,4,4,0,0,0,"1,00",0,1,1
"org.apache.cassandra.utils.MerkleTree.TreeDifference",3,8,39,47,986,2,0,2,42,42,0,28,0,"1,00",5,9,8
"org.apache.cassandra.utils.MerkleTree.TreeRange",12,4,31,35,986,1,0,1,59,48,1,21,1,"1,29",2,12,9
"org.apache.cassandra.utils.MerkleTree.TreeRangeIterator",6,2,3,5,986,0,0,2,61,42,0,0,0,"2,33",2,6,7
"org.apache.cassandra.utils.MerkleTrees",16,3,25,28,40,0,0,2,266,171,0,0,0,"1,60",14,28,40
"org.apache.cassandra.utils.MerkleTrees.MerkleTreesSerializer",7,0,6,6,40,0,1,2,40,40,0,0,0,"2,67",2,4,8
"org.apache.cassandra.utils.MerkleTrees.TokenRangeComparator",3,0,1,1,14,0,0,1,10,10,0,0,0,"2,00",1,2,2
"org.apache.cassandra.utils.MerkleTrees.TreeRangeIterator",3,2,4,6,40,0,0,2,30,30,0,0,0,"1,50",3,4,6
"org.apache.cassandra.utils.MurmurHash",3,0,6,6,0,0,0,3,186,164,0,0,0,"6,00",5,6,36
"org.apache.cassandra.utils.Mx4jTool",0,1,3,4,0,0,0,1,60,50,0,0,0,"1,33",3,3,4
"org.apache.cassandra.utils.NanoTimeToCurrentTimeMillis",2,4,1,5,14,0,0,1,58,42,0,0,0,"1,50",1,1,3
"org.apache.cassandra.utils.NativeSSTableLoaderClient",16,7,16,23,987,1,0,1,144,131,2,4,1,"2,00",6,20,18
"org.apache.cassandra.utils.NoSpamLogger",7,5,16,21,3,0,0,1,110,98,0,0,0,"1,24",14,19,21
"org.apache.cassandra.utils.NoSpamLogger.Clock",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.NoSpamLogger.Level",6,3,0,3,0,n/a,0,0,7,4,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.utils.NoSpamLogger.NoSpamLogStatement",4,3,9,12,3,0,0,1,59,59,0,0,0,"1,56",8,10,14
"org.apache.cassandra.utils.ObjectSizes",28,3,13,16,1,0,0,2,122,69,0,0,0,"1,31",13,13,17
"org.apache.cassandra.utils.OutputHandler",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.utils.OutputHandler.LogOutput",4,1,8,9,1,0,1,1,20,20,0,0,0,"1,00",0,4,4
"org.apache.cassandra.utils.OutputHandler.SystemOutput",8,2,9,11,1,0,1,3,29,29,0,0,0,"1,40",0,5,7
"org.apache.cassandra.utils.OverlapIterator",1,6,3,9,0,0,0,2,46,27,0,0,0,"1,67",1,3,5
"org.apache.cassandra.utils.Pair",108,2,5,7,0,0,0,1,34,33,0,0,0,"1,60",4,5,8
"org.apache.cassandra.utils.RMIServerSocketFactoryImpl",0,0,3,3,0,0,0,1,22,22,0,0,0,"1,67",3,3,5
"org.apache.cassandra.utils.ResourceWatcher",4,0,1,1,2,0,0,1,7,7,0,0,0,"1,00",0,2,1
"org.apache.cassandra.utils.ResourceWatcher.WatchedResource",1,4,2,6,0,0,0,1,31,31,0,0,0,"1,50",0,2,3
"org.apache.cassandra.utils.SearchIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.utils.SigarLibrary",0,8,7,15,0,0,0,1,148,140,0,0,0,"2,00",5,7,14
"org.apache.cassandra.utils.SortedBiMultiValMap",1,0,6,6,0,0,0,2,44,44,0,0,0,"1,29",5,6,9
"org.apache.cassandra.utils.StatusLogger",10,1,1,2,987,0,0,1,60,56,0,0,0,"7,00",0,13,7
"org.apache.cassandra.utils.StreamingHistogram",5,3,9,12,6,0,0,1,145,104,0,0,0,"2,33",4,9,21
"org.apache.cassandra.utils.StreamingHistogram.StreamingHistogramSerializer",7,0,6,6,6,0,1,2,34,33,0,0,0,"1,67",2,6,5
"org.apache.cassandra.utils.SyncUtil",10,4,7,11,14,0,0,3,151,143,0,0,0,"2,57",1,7,18
"org.apache.cassandra.utils.Throwables",28,0,15,15,4,0,0,7,116,116,0,0,0,"1,73",8,16,26
"org.apache.cassandra.utils.Throwables.DiscreteAction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.Throwables.FileOpType",4,2,0,2,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.utils.TopKSampler",2,5,4,9,1,0,0,1,85,66,0,0,0,"1,80",1,5,9
"org.apache.cassandra.utils.TopKSampler.SamplerResult",3,2,1,3,0,0,0,0,14,10,0,0,0,"1,00",0,1,1
"org.apache.cassandra.utils.UUIDGen",52,6,24,30,1,0,0,4,258,160,0,0,0,"1,42",23,24,34
"org.apache.cassandra.utils.UUIDSerializer",20,1,6,7,5,0,1,3,17,17,0,0,0,"1,00",2,3,3
"org.apache.cassandra.utils.WindowsTimer",1,1,5,6,0,0,0,1,34,34,0,0,0,"2,33",2,5,9
"org.apache.cassandra.utils.WrappedRunnable",6,0,2,2,0,0,0,1,15,15,22,0,0,"1,00",0,2,1
"org.apache.cassandra.utils.btree.BTree",28,7,59,66,7,0,0,6,665,506,0,0,0,"2,28",58,64,137
"org.apache.cassandra.utils.btree.BTree.Builder",13,6,18,24,7,0,0,1,238,224,0,0,0,"2,83",13,20,51
"org.apache.cassandra.utils.btree.BTree.Builder.QuickResolver",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.btree.BTree.Builder.Resolver",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.btree.BTree.Dir",9,2,3,5,0,n/a,0,1,8,7,n/a,0,0,"2,00",3,3,6
"org.apache.cassandra.utils.btree.BTree.FiltrationTracker",1,3,2,5,0,0,0,1,18,17,0,0,0,"1,50",1,2,3
"org.apache.cassandra.utils.btree.BTreeSearchIterator",6,10,13,23,9,0,1,1,117,108,0,0,0,"2,45",7,12,27
"org.apache.cassandra.utils.btree.BTreeSet",17,2,53,55,11,0,0,22,267,258,1,0,0,"1,08",50,59,57
"org.apache.cassandra.utils.btree.BTreeSet.BTreeDescRange",3,4,85,89,11,2,0,12,87,84,0,50,14,"1,27",14,31,19
"org.apache.cassandra.utils.btree.BTreeSet.BTreeRange",4,4,70,74,11,1,0,2,135,133,1,37,16,"1,57",18,27,36
"org.apache.cassandra.utils.btree.BTreeSet.Builder",9,1,5,6,11,0,0,1,26,26,0,0,0,"1,00",4,6,5
"org.apache.cassandra.utils.btree.NodeBuilder",3,14,20,34,8,0,0,1,372,298,0,0,0,"2,85",10,23,57
"org.apache.cassandra.utils.btree.NodeCursor",1,7,15,22,8,0,0,1,155,111,0,0,0,"1,87",12,24,28
"org.apache.cassandra.utils.btree.TreeBuilder",1,1,2,3,8,0,0,1,82,50,0,0,0,"5,00",2,2,10
"org.apache.cassandra.utils.btree.TreeCursor",2,1,10,11,8,0,0,1,217,156,0,0,0,"3,70",7,13,37
"org.apache.cassandra.utils.btree.UpdateFunction",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.utils.btree.UpdateFunction.Simple",2,1,9,10,1,0,1,5,16,16,0,0,0,"1,00",4,6,6
"org.apache.cassandra.utils.concurrent.Accumulator",2,5,7,12,1,0,0,1,105,78,0,0,0,"1,70",5,7,17
"org.apache.cassandra.utils.concurrent.Blocker",0,3,2,5,0,0,0,1,38,38,0,0,0,"2,50",0,2,5
"org.apache.cassandra.utils.concurrent.Locks",1,1,2,3,0,0,0,1,28,27,0,0,0,"2,00",0,2,4
"org.apache.cassandra.utils.concurrent.OpOrder",14,2,4,6,2,0,0,2,100,28,0,0,0,"1,50",3,8,6
"org.apache.cassandra.utils.concurrent.OpOrder.Barrier",10,1,7,8,2,0,0,1,104,65,0,0,0,"2,00",4,9,14
"org.apache.cassandra.utils.concurrent.OpOrder.Group",39,8,10,18,2,0,0,4,170,112,0,0,0,"2,90",5,10,29
"org.apache.cassandra.utils.concurrent.Ref",36,9,12,21,986,0,0,2,134,94,0,0,0,"1,75",7,22,21
"org.apache.cassandra.utils.concurrent.Ref.Debug",2,4,4,8,986,0,0,1,36,36,0,0,0,"1,50",1,4,6
"org.apache.cassandra.utils.concurrent.Ref.GlobalState",6,3,6,9,986,0,0,1,63,54,0,0,0,"2,00",4,7,12
"org.apache.cassandra.utils.concurrent.Ref.IdentityCollection",15,1,6,7,986,0,0,4,30,30,0,0,0,"1,33",0,7,8
"org.apache.cassandra.utils.concurrent.Ref.ReferenceReaper",2,0,1,1,986,0,0,1,24,24,0,0,0,"3,00",0,2,3
"org.apache.cassandra.utils.concurrent.Ref.State",5,4,4,8,986,0,0,1,60,58,0,0,0,"3,75",1,9,15
"org.apache.cassandra.utils.concurrent.Ref.StrongLeakDetector",7,1,2,3,986,0,0,1,33,33,0,0,0,"4,00",0,8,8
"org.apache.cassandra.utils.concurrent.Ref.Visitor",4,3,2,5,986,0,0,1,60,59,0,0,0,"3,50",0,3,7
"org.apache.cassandra.utils.concurrent.RefCounted",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.utils.concurrent.RefCounted.Tidy",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.utils.concurrent.Refs",20,1,18,19,5,0,0,4,212,172,0,0,0,"1,84",10,20,35
"org.apache.cassandra.utils.concurrent.SelfRefCounted",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.concurrent.SharedCloseable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.cassandra.utils.concurrent.SharedCloseableImpl",4,1,6,7,0,0,0,1,31,28,3,0,0,"1,00",2,6,6
"org.apache.cassandra.utils.concurrent.SimpleCondition",10,3,8,11,0,0,0,5,64,61,1,0,0,"1,88",4,8,15
"org.apache.cassandra.utils.concurrent.Transactional",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional",26,2,18,20,7,0,1,1,129,86,10,0,0,"1,73",8,16,19
"org.apache.cassandra.utils.concurrent.Transactional.AbstractTransactional.State",3,4,0,4,0,n/a,0,0,7,7,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.utils.concurrent.WaitQueue",13,5,9,14,7,0,0,3,168,92,0,0,0,"2,44",7,15,22
"org.apache.cassandra.utils.concurrent.WaitQueue.AbstractSignal",3,0,12,12,1,0,1,2,47,44,2,0,0,"2,50",1,7,10
"org.apache.cassandra.utils.concurrent.WaitQueue.AllSignal",3,1,19,20,3,2,1,1,24,21,0,6,0,"2,33",2,6,7
"org.apache.cassandra.utils.concurrent.WaitQueue.AnySignal",3,1,19,20,3,2,1,1,24,21,0,6,0,"2,33",2,6,7
"org.apache.cassandra.utils.concurrent.WaitQueue.MultiSignal",4,1,16,17,2,1,1,1,29,26,2,3,0,"2,00",2,8,8
"org.apache.cassandra.utils.concurrent.WaitQueue.RegisteredSignal",3,2,18,20,7,1,1,1,60,50,1,3,0,"1,67",5,8,10
"org.apache.cassandra.utils.concurrent.WaitQueue.Signal",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,8,n/a
"org.apache.cassandra.utils.concurrent.WaitQueue.TimedSignal",2,3,21,24,7,2,1,1,28,23,0,6,2,"1,33",1,6,4
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable",3,1,3,4,6,0,0,0,22,18,2,0,0,"1,00",0,4,3
"org.apache.cassandra.utils.concurrent.WrappedSharedCloseable.Tidy",2,1,3,4,5,0,0,1,28,28,0,0,0,"1,33",1,5,4
"org.apache.cassandra.utils.memory.AbstractAllocator",18,0,3,3,986,0,0,2,22,19,0,0,0,"1,50",3,4,3
"org.apache.cassandra.utils.memory.AbstractAllocator.CloningBTreeRowBuilder",4,8,14,22,986,1,0,1,19,19,0,9,0,"1,00",0,8,3
"org.apache.cassandra.utils.memory.BufferPool",12,13,15,28,986,0,0,2,179,171,0,0,0,"2,00",12,22,34
"org.apache.cassandra.utils.memory.BufferPool.Chunk",7,8,20,28,986,0,0,1,268,185,0,0,0,"2,05",13,27,41
"org.apache.cassandra.utils.memory.BufferPool.Debug",3,2,3,5,986,0,0,1,19,19,0,0,0,"1,33",0,3,4
"org.apache.cassandra.utils.memory.BufferPool.GlobalPool",4,5,5,10,986,0,0,1,91,74,0,0,0,"3,60",3,10,18
"org.apache.cassandra.utils.memory.BufferPool.LocalPool",7,3,8,11,986,0,0,2,127,107,0,0,0,"3,12",3,21,25
"org.apache.cassandra.utils.memory.BufferPool.LocalPoolRef",4,1,2,3,986,0,0,1,20,20,0,0,0,"2,00",0,3,4
"org.apache.cassandra.utils.memory.ContextAllocator",2,2,3,5,9,0,0,1,30,26,0,0,0,"1,33",2,3,4
"org.apache.cassandra.utils.memory.HeapAllocator",3,1,2,3,0,0,0,1,13,9,0,0,0,"1,00",1,2,2
"org.apache.cassandra.utils.memory.HeapPool",0,0,3,3,0,0,0,2,66,15,0,0,0,"1,00",2,3,3
"org.apache.cassandra.utils.memory.MemoryUtil",9,15,29,44,1,0,0,3,323,307,0,0,0,"1,66",15,29,48
"org.apache.cassandra.utils.memory.MemtableAllocator",9,4,9,13,7,0,0,3,69,59,0,0,0,"1,00",6,12,11
"org.apache.cassandra.utils.memory.MemtableAllocator.DataReclaimer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.cassandra.utils.memory.MemtableAllocator.LifeCycle",1,3,1,4,0,n/a,0,1,18,18,n/a,0,0,"4,00",1,1,4
"org.apache.cassandra.utils.memory.MemtableAllocator.SubAllocator",7,5,10,15,4,0,0,1,99,87,0,0,0,"1,80",2,14,18
"org.apache.cassandra.utils.memory.MemtableBufferAllocator",1,0,5,5,3,0,0,2,20,20,0,0,0,"1,00",4,5,4
"org.apache.cassandra.utils.memory.MemtableCleanerThread",2,3,4,7,8,0,0,1,45,37,0,0,0,"1,75",1,8,7
"org.apache.cassandra.utils.memory.MemtablePool",3,7,5,12,9,0,0,4,33,28,0,0,0,"1,67",4,6,5
"org.apache.cassandra.utils.memory.MemtablePool.SubPool",2,5,16,21,9,0,0,2,127,111,0,0,0,"1,88",8,17,30
"org.apache.cassandra.utils.memory.NativeAllocator",6,6,8,14,990,0,0,3,91,78,0,0,0,"2,38",5,15,19
"org.apache.cassandra.utils.memory.NativeAllocator.RaceAllocated",2,2,2,4,1,0,0,1,20,19,0,0,0,"2,00",2,2,4
"org.apache.cassandra.utils.memory.NativeAllocator.Region",2,4,3,7,0,0,0,1,65,33,0,0,0,"2,00",2,3,6
"org.apache.cassandra.utils.memory.NativePool",0,0,3,3,0,0,0,2,17,17,0,0,0,"1,00",2,3,3
"org.apache.cassandra.utils.memory.SlabAllocator",3,9,7,16,10,0,0,3,108,80,0,0,0,"2,86",5,9,20
"org.apache.cassandra.utils.memory.SlabAllocator.Region",1,3,3,6,0,0,0,1,63,31,0,0,0,"2,00",2,3,6
"org.apache.cassandra.utils.memory.SlabPool",0,1,3,4,0,0,0,1,17,17,0,0,0,"1,00",2,3,3
"org.apache.cassandra.utils.obs.BitUtil",0,1,14,15,0,0,0,7,704,552,0,0,0,"3,71",14,14,52
"org.apache.cassandra.utils.obs.IBitSet",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,10,n/a
"org.apache.cassandra.utils.obs.OffHeapBitSet",7,1,17,18,987,0,0,2,143,136,0,0,0,"1,35",8,26,23
"org.apache.cassandra.utils.obs.OpenBitSet",7,4,32,36,987,0,0,5,363,246,0,0,0,"2,06",17,34,66
"org.apache.cassandra.utils.progress.ProgressEvent",8,4,8,12,0,0,0,4,48,42,0,0,0,"1,12",6,8,9
"org.apache.cassandra.utils.progress.ProgressEventNotifier",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.cassandra.utils.progress.ProgressEventNotifierSupport",2,1,3,4,0,0,0,1,24,21,1,0,0,"1,33",0,3,4
"org.apache.cassandra.utils.progress.ProgressEventType",6,7,0,7,0,n/a,0,0,47,10,n/a,0,0,n/a,0,0,0
"org.apache.cassandra.utils.progress.ProgressListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.cassandra.utils.progress.jmx.JMXNotificationProgressListener",5,0,6,6,3,0,1,1,59,37,2,0,0,"2,25",1,8,9
"org.apache.cassandra.utils.progress.jmx.JMXProgressSupport",3,2,3,5,2,0,1,1,27,24,0,0,0,"1,00",0,6,2
"org.apache.cassandra.utils.vint.VIntCoding",7,1,12,13,0,0,0,1,111,77,0,0,0,"1,31",10,12,17

Package,C(rec),LOC(rec),METH(rec)
"",2.725,213.096,16.293
"java",2.725,213.073,16.293
"java.org",2.725,213.073,16.293
"java.org.apache",2.725,213.073,16.293
"java.org.apache.cassandra",2.725,213.073,16.293
"java.org.apache.cassandra.auth",45,3.512,262
"java.org.apache.cassandra.batchlog",10,873,56
"java.org.apache.cassandra.cache",32,1.632,163
"java.org.apache.cassandra.client",1,107,5
"java.org.apache.cassandra.concurrent",25,1.875,152
"java.org.apache.cassandra.config",36,4.638,467
"java.org.apache.cassandra.cql3",430,28.858,2.253
"java.org.apache.cassandra.cql3.functions",101,4.206,313
"java.org.apache.cassandra.cql3.restrictions",33,3.398,346
"java.org.apache.cassandra.cql3.selection",35,1.764,183
"java.org.apache.cassandra.cql3.statements",85,8.342,529
"java.org.apache.cassandra.db",616,55.453,4.515
"java.org.apache.cassandra.db.columniterator",10,1.021,77
"java.org.apache.cassandra.db.commitlog",31,3.228,193
"java.org.apache.cassandra.db.compaction",82,6.934,464
"java.org.apache.cassandra.db.compaction.writers",5,509,31
"java.org.apache.cassandra.db.context",4,793,44
"java.org.apache.cassandra.db.filter",50,2.743,285
"java.org.apache.cassandra.db.lifecycle",32,2.963,278
"java.org.apache.cassandra.db.marshal",47,5.761,536
"java.org.apache.cassandra.db.partitions",41,2.600,224
"java.org.apache.cassandra.db.rows",64,5.570,507
"java.org.apache.cassandra.db.transform",16,788,87
"java.org.apache.cassandra.db.view",12,1.620,88
"java.org.apache.cassandra.dht",59,4.034,391
"java.org.apache.cassandra.dht.tokenallocator",19,974,76
"java.org.apache.cassandra.exceptions",26,870,45
"java.org.apache.cassandra.gms",38,3.299,246
"java.org.apache.cassandra.hadoop",24,3.708,346
"java.org.apache.cassandra.hadoop.cql3",20,2.748,249
"java.org.apache.cassandra.hints",42,3.160,234
"java.org.apache.cassandra.index",44,3.629,276
"java.org.apache.cassandra.index.internal",25,2.041,152
"java.org.apache.cassandra.index.internal.composites",10,763,46
"java.org.apache.cassandra.index.internal.keys",3,220,16
"java.org.apache.cassandra.index.transactions",8,213,22
"java.org.apache.cassandra.io",191,16.787,1.345
"java.org.apache.cassandra.io.compress",18,1.501,106
"java.org.apache.cassandra.io.sstable",104,9.595,721
"java.org.apache.cassandra.io.sstable.format",42,3.688,321
"java.org.apache.cassandra.io.sstable.format.big",15,1.258,97
"java.org.apache.cassandra.io.sstable.metadata",15,1.323,81
"java.org.apache.cassandra.io.util",63,5.446,502
"java.org.apache.cassandra.locator",35,3.685,232
"java.org.apache.cassandra.metrics",141,3.589,307
"java.org.apache.cassandra.net",34,2.941,186
"java.org.apache.cassandra.notifications",8,226,7
"java.org.apache.cassandra.repair",59,3.482,191
"java.org.apache.cassandra.repair.messages",21,992,61
"java.org.apache.cassandra.scheduler",6,274,19
"java.org.apache.cassandra.schema",44,5.188,436
"java.org.apache.cassandra.security",1,150,6
"java.org.apache.cassandra.serializers",30,1.935,146
"java.org.apache.cassandra.service",142,13.883,1.052
"java.org.apache.cassandra.service.pager",12,1.021,74
"java.org.apache.cassandra.service.paxos",12,697,39
"java.org.apache.cassandra.streaming",86,5.368,328
"java.org.apache.cassandra.streaming.compress",6,460,18
"java.org.apache.cassandra.streaming.management",12,608,20
"java.org.apache.cassandra.streaming.messages",21,922,52
"java.org.apache.cassandra.thrift",30,5.212,236
"java.org.apache.cassandra.tools",127,8.487,362
"java.org.apache.cassandra.tools.nodetool",90,4.286,103
"java.org.apache.cassandra.tracing",8,594,51
"java.org.apache.cassandra.transport",114,5.736,427
"java.org.apache.cassandra.transport.messages",46,1.968,140
"java.org.apache.cassandra.triggers",4,380,17
"java.org.apache.cassandra.utils",237,19.508,1.534
"java.org.apache.cassandra.utils.btree",18,2.636,249
"java.org.apache.cassandra.utils.concurrent",36,2.308,177
"java.org.apache.cassandra.utils.memory",30,2.311,187
"java.org.apache.cassandra.utils.obs",4,1.326,73
"java.org.apache.cassandra.utils.progress",7,378,21
"java.org.apache.cassandra.utils.progress.jmx",2,136,7
"java.org.apache.cassandra.utils.vint",2,162,13
"resources",n/a,23,n/a
"resources.org",n/a,23,n/a
"resources.org.apache",n/a,23,n/a
"resources.org.apache.cassandra",n/a,23,n/a
"resources.org.apache.cassandra.cql3",n/a,23,n/a
"resources.org.apache.cassandra.cql3.functions",n/a,23,n/a

Project,C,L(J),LOCp,METH
"project",2.725,211.379,213.096,15.698

