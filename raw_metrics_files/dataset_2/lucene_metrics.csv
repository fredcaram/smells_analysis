SmellMetrics,Seg, 4 jun 2018 20:43:46 BRT
Method,CALL,CALLED,IMP,LOC,NBD,NP,STAT,v(G)
"null.accept(AttributeSource)",0,1,n/a,4,0,1,1,1
"null.accept(String)",1,3,n/a,6,1,1,3,2
"null.add(BooleanClause)",1,28,n/a,4,0,1,1,1
"null.add(Query,Occur)",1,137,n/a,4,0,2,1,1
"null.addClause(BooleanQuery,Term,float)",3,2,n/a,6,0,3,3,1
"null.addClause(SpanOrQuery,Term,float)",3,2,n/a,6,0,3,3,1
"null.advance(int)",0,54,n/a,2,0,1,1,1
"null.close()",0,42,n/a,2,0,0,0,1
"null.compare(DocFieldProcessorPerField,DocFieldProcessorPerField)",1,0,n/a,3,0,2,1,1
"null.compare(InstantiatedTerm,InstantiatedTerm)",3,0,n/a,3,0,2,1,1
"null.compare(InstantiatedTermDocumentInformation,InstantiatedTermDocumentInformation)",5,0,n/a,3,0,2,1,1
"null.compare(Long,Long)",1,0,n/a,3,0,2,1,1
"null.compare(MergeThread,MergeThread)",2,0,n/a,7,0,2,5,3
"null.compare(Object,Object)",3,0,n/a,5,0,2,3,1
"null.compare(SegmentInfo,SegmentInfo)",2,0,n/a,11,1,2,6,3
"null.compare(Spans,Spans)",2,0,n/a,3,0,2,1,1
"null.compare(String,String)",11,0,n/a,24,3,2,14,8
"null.compare(Token,Token)",2,0,n/a,3,0,2,1,1
"null.compare(byte[],byte[])",1,0,n/a,9,1,2,8,3
"null.computeNorm(String,FieldInvertState)",4,27,n/a,4,0,2,1,2
"null.createComponents(String,Reader)",3,5,n/a,6,0,2,2,1
"null.difference()",1,1,n/a,3,0,0,1,1
"null.docFreq()",1,28,n/a,3,0,0,1,1
"null.docID()",0,45,n/a,2,0,0,1,1
"null.endEnum()",1,1,n/a,3,0,0,1,1
"null.equals(Object)",0,0,n/a,4,0,1,1,1
"null.getChain(DocumentsWriter)",7,2,n/a,27,0,1,6,1
"null.getComparator()",0,5,n/a,3,0,0,1,1
"null.getLabel()",0,1,n/a,2,0,0,1,1
"null.getTopLevelQuery()",1,2,n/a,4,0,0,1,1
"null.hashCode()",0,0,n/a,6,0,0,1,1
"null.initialValue()",2,0,n/a,8,1,0,4,2
"null.isAnalyzed()",0,2,n/a,2,0,0,1,1
"null.isCacheable()",0,4,n/a,4,0,0,1,1
"null.isIndexed()",0,3,n/a,2,0,0,1,1
"null.isStored()",0,1,n/a,2,0,0,1,1
"null.iterator()",0,24,n/a,4,0,0,1,1
"null.next()",0,38,n/a,4,0,0,1,1
"null.nextDoc()",0,62,n/a,2,0,0,1,1
"null.omitNorms()",0,2,n/a,2,0,0,1,1
"null.onClose(IndexReader)",1,1,n/a,4,0,1,1,1
"null.onClose(SegmentReader)",1,1,n/a,4,0,1,1,1
"null.parseByte(String)",1,1,n/a,3,0,1,1,1
"null.parseDouble(String)",4,1,n/a,6,0,1,4,3
"null.parseFloat(String)",4,1,n/a,6,0,1,4,3
"null.parseInt(String)",3,1,n/a,6,0,1,4,3
"null.parseLong(String)",3,1,n/a,6,0,1,4,3
"null.parseShort(String)",1,1,n/a,3,0,1,1,1
"null.readResolve()",0,0,n/a,4,0,0,1,1
"null.rewrite(IndexReader,MultiTermQuery)",4,2,n/a,6,0,2,3,1
"null.setBoost(float)",1,79,n/a,4,0,1,1,1
"null.setDocCountPercent(double)",1,2,n/a,4,0,1,1,1
"null.setTermCountCutoff(int)",1,2,n/a,4,0,1,1,1
"null.term()",0,112,n/a,3,0,0,1,1
"null.termCompare(Term)",1,2,n/a,3,0,1,1,1
"null.toQueryString()",0,1,n/a,2,0,0,1,1
"null.toString()",0,0,n/a,2,0,0,1,1
"null.withOffsets()",0,1,n/a,2,0,0,1,1
"null.withPositions()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.LucenePackage.LucenePackage()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.LucenePackage.get()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ASCIIFoldingFilter.ASCIIFoldingFilter(TokenStream)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ASCIIFoldingFilter.foldToASCII(char[],int)",2,1,n/a,15,1,2,4,2
"org.apache.lucene.analysis.ASCIIFoldingFilter.foldToASCII(char[],int,char[],int,int)",0,1,n/a,1.936,3,5,1.919,233
"org.apache.lucene.analysis.ASCIIFoldingFilter.incrementToken()",5,216,n/a,21,3,0,13,4
"org.apache.lucene.analysis.Analyzer.Analyzer()",2,33,n/a,4,0,0,2,1
"org.apache.lucene.analysis.Analyzer.assertFinal()",10,1,n/a,17,1,0,7,6
"org.apache.lucene.analysis.Analyzer.close()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.Analyzer.getOffsetGap(Fieldable)",1,3,n/a,17,0,1,3,2
"org.apache.lucene.analysis.Analyzer.getPositionIncrementGap(String)",0,9,n/a,16,0,1,1,1
"org.apache.lucene.analysis.Analyzer.getPreviousTokenStream()",2,9,n/a,14,2,0,5,3
"org.apache.lucene.analysis.Analyzer.reusableTokenStream(String,Reader)",1,46,n/a,10,0,2,1,1
"org.apache.lucene.analysis.Analyzer.setPreviousTokenStream(Object)",2,22,n/a,14,2,1,5,3
"org.apache.lucene.analysis.Analyzer.tokenStream(String,Reader)",n/a,78,33,n/a,n/a,2,n/a,n/a
"org.apache.lucene.analysis.BaseCharFilter.BaseCharFilter(CharStream)",1,6,n/a,3,0,1,1,1
"org.apache.lucene.analysis.BaseCharFilter.addOffCorrectMap(int,int)",4,24,n/a,31,1,2,11,6
"org.apache.lucene.analysis.BaseCharFilter.correct(int)",0,2,n/a,25,1,1,17,9
"org.apache.lucene.analysis.BaseCharFilter.getLastCumulativeDiff()",0,1,n/a,4,0,0,1,2
"org.apache.lucene.analysis.CachingTokenFilter.CachingTokenFilter(TokenStream)",1,7,n/a,3,0,1,1,1
"org.apache.lucene.analysis.CachingTokenFilter.end()",1,40,n/a,6,1,0,2,2
"org.apache.lucene.analysis.CachingTokenFilter.fillCache()",5,1,n/a,8,1,0,4,2
"org.apache.lucene.analysis.CachingTokenFilter.incrementToken()",6,233,n/a,16,1,0,8,3
"org.apache.lucene.analysis.CachingTokenFilter.reset()",1,123,n/a,6,1,0,2,2
"org.apache.lucene.analysis.CharArrayMap.CharArrayMap(CharArrayMap<V>)",0,2,n/a,9,0,1,6,1
"org.apache.lucene.analysis.CharArrayMap.CharArrayMap(Version,Map<?, ? extends V>,boolean)",3,2,n/a,16,0,3,2,1
"org.apache.lucene.analysis.CharArrayMap.CharArrayMap(Version,int,boolean)",1,11,n/a,23,0,3,8,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.EmptyCharArrayMap()",2,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.containsKey(CharSequence)",1,2,n/a,6,0,1,3,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.containsKey(Object)",1,2,n/a,6,0,1,3,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.containsKey(char[],int,int)",1,2,n/a,6,0,3,3,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.get(CharSequence)",1,1,n/a,6,0,1,3,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.get(Object)",1,1,n/a,6,0,1,3,2
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap.get(char[],int,int)",1,11,n/a,6,0,3,3,2
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.EntryIterator(boolean)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.currentValue()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.goNext()",0,3,n/a,5,0,0,4,3
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.hasNext()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.next()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.nextKey()",1,1,n/a,5,0,0,2,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.nextKeyString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.EntryIterator.setValue(V)",1,0,n/a,8,0,1,5,2
"org.apache.lucene.analysis.CharArrayMap.EntrySet.EntrySet(boolean)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntrySet.clear()",2,0,n/a,6,0,0,3,2
"org.apache.lucene.analysis.CharArrayMap.EntrySet.contains(Object)",4,0,n/a,11,0,1,7,3
"org.apache.lucene.analysis.CharArrayMap.EntrySet.iterator()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.EntrySet.remove(Object)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArrayMap.EntrySet.size()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.MapEntry.MapEntry(int,boolean)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.analysis.CharArrayMap.MapEntry.getKey()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.MapEntry.getValue()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.MapEntry.setValue(V)",1,0,n/a,7,0,1,5,2
"org.apache.lucene.analysis.CharArrayMap.MapEntry.toString()",5,0,n/a,6,0,0,1,2
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.UnmodifiableCharArrayMap(CharArrayMap<V>)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.createEntrySet()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.put(CharSequence,V)",1,25,n/a,4,0,2,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.put(Object,V)",1,25,n/a,4,0,2,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.put(String,V)",1,25,n/a,4,0,2,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.put(char[],V)",1,2,n/a,4,0,2,1,1
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap.remove(Object)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArrayMap.clear()",2,2,n/a,7,0,0,3,1
"org.apache.lucene.analysis.CharArrayMap.containsKey(CharSequence)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArrayMap.containsKey(Object)",3,2,n/a,8,1,1,4,2
"org.apache.lucene.analysis.CharArrayMap.containsKey(char[],int,int)",1,2,n/a,5,0,3,1,1
"org.apache.lucene.analysis.CharArrayMap.copy(Version,Map<?, ? extends V>)",5,4,n/a,40,1,2,13,3
"org.apache.lucene.analysis.CharArrayMap.createEntrySet()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.emptyMap()",0,7,n/a,5,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.entrySet()",1,1,n/a,7,1,0,3,2
"org.apache.lucene.analysis.CharArrayMap.equals(CharSequence,char[])",6,2,n/a,19,2,2,16,7
"org.apache.lucene.analysis.CharArrayMap.equals(char[],int,int,char[])",4,2,n/a,19,2,4,16,7
"org.apache.lucene.analysis.CharArrayMap.get(CharSequence)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArrayMap.get(Object)",3,1,n/a,8,1,1,4,2
"org.apache.lucene.analysis.CharArrayMap.get(char[],int,int)",1,11,n/a,5,0,3,1,1
"org.apache.lucene.analysis.CharArrayMap.getHashCode(CharSequence)",6,1,n/a,18,2,1,15,5
"org.apache.lucene.analysis.CharArrayMap.getHashCode(char[],int,int)",4,1,n/a,18,2,3,15,5
"org.apache.lucene.analysis.CharArrayMap.getSlot(CharSequence)",3,2,n/a,15,2,1,10,5
"org.apache.lucene.analysis.CharArrayMap.getSlot(char[],int,int)",3,4,n/a,14,2,3,10,5
"org.apache.lucene.analysis.CharArrayMap.keySet()",5,1,n/a,4,3,0,7,2
"org.apache.lucene.analysis.CharArrayMap.originalKeySet()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.put(CharSequence,V)",2,25,n/a,4,0,2,1,1
"org.apache.lucene.analysis.CharArrayMap.put(Object,V)",3,25,n/a,7,1,2,3,2
"org.apache.lucene.analysis.CharArrayMap.put(String,V)",2,25,n/a,4,0,2,1,1
"org.apache.lucene.analysis.CharArrayMap.put(char[],V)",5,2,n/a,25,1,2,15,5
"org.apache.lucene.analysis.CharArrayMap.rehash()",1,1,n/a,18,2,0,14,3
"org.apache.lucene.analysis.CharArrayMap.remove(Object)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArrayMap.size()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArrayMap.toString()",7,0,n/a,9,1,0,6,3
"org.apache.lucene.analysis.CharArrayMap.unmodifiableMap(CharArrayMap<V>)",5,2,n/a,19,0,1,7,5
"org.apache.lucene.analysis.CharArraySet.CharArraySet(CharArrayMap<Object>)",0,5,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySet(Collection<?>,boolean)",3,0,n/a,15,0,2,2,1
"org.apache.lucene.analysis.CharArraySet.CharArraySet(Version,Collection<?>,boolean)",3,2,n/a,16,0,3,2,1
"org.apache.lucene.analysis.CharArraySet.CharArraySet(Version,int,boolean)",2,13,n/a,15,0,3,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySet(int,boolean)",1,1,n/a,14,0,2,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.CharArraySetIterator()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.goNext()",0,2,n/a,5,0,0,4,3
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.hasNext()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.next()",2,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.nextCharArray()",1,1,n/a,6,0,0,3,1
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.CharArraySet.add(CharSequence)",1,19,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArraySet.add(Object)",1,19,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArraySet.add(String)",1,19,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArraySet.add(char[])",1,3,n/a,7,0,1,1,1
"org.apache.lucene.analysis.CharArraySet.clear()",1,2,n/a,5,0,0,1,1
"org.apache.lucene.analysis.CharArraySet.contains(CharSequence)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArraySet.contains(Object)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharArraySet.contains(char[],int,int)",1,30,n/a,5,0,3,1,1
"org.apache.lucene.analysis.CharArraySet.copy(Set<?>)",1,0,n/a,17,0,1,3,2
"org.apache.lucene.analysis.CharArraySet.copy(Version,Set<?>)",3,37,n/a,30,1,2,6,3
"org.apache.lucene.analysis.CharArraySet.iterator()",4,2,n/a,15,0,0,1,2
"org.apache.lucene.analysis.CharArraySet.size()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharArraySet.stringIterator()",1,2,n/a,7,0,0,1,1
"org.apache.lucene.analysis.CharArraySet.toString()",7,0,n/a,13,2,0,8,4
"org.apache.lucene.analysis.CharArraySet.unmodifiableSet(CharArraySet)",3,46,n/a,19,0,1,7,4
"org.apache.lucene.analysis.CharFilter.CharFilter(CharStream)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.CharFilter.close()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharFilter.correct(int)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.CharFilter.correctOffset(int)",2,7,n/a,8,0,1,1,1
"org.apache.lucene.analysis.CharFilter.mark(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharFilter.markSupported()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharFilter.read(char[],int,int)",1,1,n/a,4,0,3,1,1
"org.apache.lucene.analysis.CharFilter.reset()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharReader.CharReader(Reader)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.CharReader.close()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharReader.correctOffset(int)",0,7,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharReader.get(Reader)",1,41,n/a,4,0,1,1,2
"org.apache.lucene.analysis.CharReader.mark(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.CharReader.markSupported()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharReader.read(char[],int,int)",1,0,n/a,4,0,3,1,1
"org.apache.lucene.analysis.CharReader.reset()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.CharStream.correctOffset(int)",n/a,6,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(AttributeFactory,Reader)",1,2,n/a,11,0,2,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(AttributeSource,Reader)",1,2,n/a,11,0,2,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(Reader)",1,2,n/a,10,0,1,1,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(Version,AttributeFactory,Reader)",3,7,n/a,16,0,3,3,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(Version,AttributeSource,Reader)",3,7,n/a,16,0,3,3,1
"org.apache.lucene.analysis.CharTokenizer.CharTokenizer(Version,Reader)",3,7,n/a,13,0,2,3,1
"org.apache.lucene.analysis.CharTokenizer.end()",1,39,n/a,5,0,0,1,1
"org.apache.lucene.analysis.CharTokenizer.incrementToken()",17,216,n/a,48,4,0,38,11
"org.apache.lucene.analysis.CharTokenizer.incrementTokenOld()",11,1,n/a,45,4,0,31,10
"org.apache.lucene.analysis.CharTokenizer.isTokenChar(char)",1,3,n/a,19,0,1,1,1
"org.apache.lucene.analysis.CharTokenizer.isTokenChar(int)",1,12,n/a,19,0,1,1,1
"org.apache.lucene.analysis.CharTokenizer.normalize(char)",1,3,n/a,18,0,1,1,1
"org.apache.lucene.analysis.CharTokenizer.normalize(int)",0,13,n/a,18,0,1,1,1
"org.apache.lucene.analysis.CharTokenizer.reset(Reader)",2,30,n/a,9,0,1,6,1
"org.apache.lucene.analysis.CharTokenizer.useOldAPI(Version)",6,3,n/a,12,0,1,4,4
"org.apache.lucene.analysis.FilteringTokenFilter.FilteringTokenFilter(boolean,TokenStream)",1,5,n/a,4,0,2,2,1
"org.apache.lucene.analysis.FilteringTokenFilter.accept()",n/a,3,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.FilteringTokenFilter.getEnablePositionIncrements()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.FilteringTokenFilter.incrementToken()",9,218,n/a,30,5,0,16,9
"org.apache.lucene.analysis.FilteringTokenFilter.reset()",1,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.FilteringTokenFilter.setEnablePositionIncrements(boolean)",0,3,n/a,19,0,1,1,1
"org.apache.lucene.analysis.ISOLatin1AccentFilter.ISOLatin1AccentFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ISOLatin1AccentFilter.incrementToken()",5,216,n/a,19,3,0,13,5
"org.apache.lucene.analysis.ISOLatin1AccentFilter.removeAccents(char[],int)",0,1,n/a,189,3,2,168,39
"org.apache.lucene.analysis.KeywordAnalyzer.KeywordAnalyzer()",0,7,n/a,2,0,0,0,1
"org.apache.lucene.analysis.KeywordAnalyzer.createComponents(String,Reader)",2,5,n/a,4,0,2,1,1
"org.apache.lucene.analysis.KeywordMarkerFilter.KeywordMarkerFilter(TokenStream,CharArraySet)",1,9,n/a,15,0,2,2,1
"org.apache.lucene.analysis.KeywordMarkerFilter.KeywordMarkerFilter(TokenStream,Set<?>)",2,30,n/a,14,0,2,1,2
"org.apache.lucene.analysis.KeywordMarkerFilter.incrementToken()",5,216,n/a,11,2,0,5,3
"org.apache.lucene.analysis.KeywordTokenizer.KeywordTokenizer(AttributeFactory,Reader,int)",2,0,n/a,4,0,3,2,1
"org.apache.lucene.analysis.KeywordTokenizer.KeywordTokenizer(AttributeSource,Reader,int)",2,0,n/a,4,0,3,2,1
"org.apache.lucene.analysis.KeywordTokenizer.KeywordTokenizer(Reader)",1,75,n/a,3,0,1,1,1
"org.apache.lucene.analysis.KeywordTokenizer.KeywordTokenizer(Reader,int)",2,1,n/a,4,0,2,2,1
"org.apache.lucene.analysis.KeywordTokenizer.end()",1,39,n/a,5,0,0,1,1
"org.apache.lucene.analysis.KeywordTokenizer.incrementToken()",8,216,n/a,21,2,0,17,5
"org.apache.lucene.analysis.KeywordTokenizer.reset(Reader)",1,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.LengthFilter.LengthFilter(TokenStream,int,int)",1,0,n/a,9,0,3,1,1
"org.apache.lucene.analysis.LengthFilter.LengthFilter(boolean,TokenStream,int,int)",1,3,n/a,9,0,4,3,1
"org.apache.lucene.analysis.LengthFilter.accept()",1,3,n/a,5,0,0,2,2
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(AttributeFactory,Reader)",1,1,n/a,11,0,2,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(AttributeSource,Reader)",1,1,n/a,10,0,2,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(Reader)",1,1,n/a,10,0,1,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(Version,AttributeFactory,Reader)",1,4,n/a,14,0,3,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(Version,AttributeSource,Reader)",1,4,n/a,13,0,3,1,1
"org.apache.lucene.analysis.LetterTokenizer.LetterTokenizer(Version,Reader)",1,5,n/a,11,0,2,1,1
"org.apache.lucene.analysis.LetterTokenizer.isTokenChar(int)",1,14,n/a,6,0,1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.LimitTokenCountAnalyzer(Analyzer,int)",0,0,n/a,7,0,2,2,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.getOffsetGap(Fieldable)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.getPositionIncrementGap(String)",1,9,n/a,4,0,1,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.reusableTokenStream(String,Reader)",2,46,n/a,6,0,2,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.LimitTokenCountAnalyzer.tokenStream(String,Reader)",2,78,n/a,6,0,2,1,1
"org.apache.lucene.analysis.LimitTokenCountFilter.LimitTokenCountFilter(TokenStream,int)",1,3,n/a,7,0,2,2,1
"org.apache.lucene.analysis.LimitTokenCountFilter.incrementToken()",1,216,n/a,8,1,0,4,3
"org.apache.lucene.analysis.LimitTokenCountFilter.reset()",1,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.LowerCaseFilter.LowerCaseFilter(TokenStream)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.LowerCaseFilter.LowerCaseFilter(Version,TokenStream)",2,53,n/a,10,0,2,2,1
"org.apache.lucene.analysis.LowerCaseFilter.incrementToken()",6,216,n/a,14,2,0,8,3
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(AttributeFactory,Reader)",1,0,n/a,11,0,2,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(AttributeSource,Reader)",1,0,n/a,10,0,2,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(Reader)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(Version,AttributeFactory,Reader)",1,1,n/a,14,0,3,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(Version,AttributeSource,Reader)",1,1,n/a,13,0,3,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.LowerCaseTokenizer(Version,Reader)",1,4,n/a,12,0,2,1,1
"org.apache.lucene.analysis.LowerCaseTokenizer.normalize(int)",1,13,n/a,6,0,1,1,1
"org.apache.lucene.analysis.MappingCharFilter.MappingCharFilter(NormalizeCharMap,CharStream)",1,3,n/a,5,0,2,2,1
"org.apache.lucene.analysis.MappingCharFilter.MappingCharFilter(NormalizeCharMap,Reader)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.analysis.MappingCharFilter.match(NormalizeCharMap)",5,2,n/a,19,3,1,12,7
"org.apache.lucene.analysis.MappingCharFilter.nextChar()",4,2,n/a,7,1,0,4,3
"org.apache.lucene.analysis.MappingCharFilter.pushChar(int)",3,1,n/a,6,0,1,4,2
"org.apache.lucene.analysis.MappingCharFilter.pushLastChar(int)",3,1,n/a,6,1,1,3,2
"org.apache.lucene.analysis.MappingCharFilter.read()",9,1,n/a,26,3,0,22,11
"org.apache.lucene.analysis.MappingCharFilter.read(char[],int,int)",3,1,n/a,17,1,3,17,6
"org.apache.lucene.analysis.NormalizeCharMap.add(String,String)",11,5,n/a,28,2,2,16,5
"org.apache.lucene.analysis.NumericTokenStream.NumericTokenStream()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.NumericTokenStream.NumericTokenStream(AttributeFactory,int)",2,0,n/a,13,0,2,4,2
"org.apache.lucene.analysis.NumericTokenStream.NumericTokenStream(AttributeSource,int)",2,0,n/a,12,0,2,4,2
"org.apache.lucene.analysis.NumericTokenStream.NumericTokenStream(int)",2,3,n/a,11,0,1,4,2
"org.apache.lucene.analysis.NumericTokenStream.getPrecisionStep()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.NumericTokenStream.incrementToken()",11,217,n/a,26,1,0,21,8
"org.apache.lucene.analysis.NumericTokenStream.reset()",1,93,n/a,6,0,0,3,2
"org.apache.lucene.analysis.NumericTokenStream.setDoubleValue(double)",1,3,n/a,12,0,1,4,1
"org.apache.lucene.analysis.NumericTokenStream.setFloatValue(float)",1,3,n/a,12,0,1,4,1
"org.apache.lucene.analysis.NumericTokenStream.setIntValue(int)",0,3,n/a,12,0,1,4,1
"org.apache.lucene.analysis.NumericTokenStream.setLongValue(long)",0,4,n/a,12,0,1,4,1
"org.apache.lucene.analysis.NumericTokenStream.toString()",6,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.PerFieldAnalyzerWrapper(Analyzer)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.PerFieldAnalyzerWrapper(Analyzer,Map<String, Analyzer>)",1,2,n/a,16,1,2,3,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.addAnalyzer(String,Analyzer)",1,0,n/a,12,0,2,1,1
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.getOffsetGap(Fieldable)",3,3,n/a,8,0,1,4,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.getPositionIncrementGap(String)",2,9,n/a,8,0,1,4,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.reusableTokenStream(String,Reader)",2,46,n/a,7,0,2,4,2
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper.tokenStream(String,Reader)",2,78,n/a,8,1,2,4,2
"org.apache.lucene.analysis.PorterStemFilter.PorterStemFilter(TokenStream)",1,5,n/a,3,0,1,1,1
"org.apache.lucene.analysis.PorterStemFilter.incrementToken()",8,216,n/a,8,0,0,5,4
"org.apache.lucene.analysis.PorterStemmer.PorterStemmer()",0,2,n/a,4,0,0,2,1
"org.apache.lucene.analysis.PorterStemmer.add(char)",1,1,n/a,10,1,1,3,2
"org.apache.lucene.analysis.PorterStemmer.cons(int)",1,9,n/a,10,1,1,11,5
"org.apache.lucene.analysis.PorterStemmer.cvc(int)",3,2,n/a,9,1,1,6,8
"org.apache.lucene.analysis.PorterStemmer.doublec(int)",1,2,n/a,7,0,1,5,3
"org.apache.lucene.analysis.PorterStemmer.ends(String)",2,56,n/a,11,0,1,11,4
"org.apache.lucene.analysis.PorterStemmer.getResultBuffer()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.PorterStemmer.getResultLength()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.analysis.PorterStemmer.m()",3,6,n/a,31,2,0,25,11
"org.apache.lucene.analysis.PorterStemmer.main(String[])",15,0,n/a,46,5,1,29,8
"org.apache.lucene.analysis.PorterStemmer.r(String)",2,28,n/a,1,0,1,2,2
"org.apache.lucene.analysis.PorterStemmer.reset()",0,3,n/a,6,0,0,2,1
"org.apache.lucene.analysis.PorterStemmer.setto(String)",2,6,n/a,8,0,1,8,2
"org.apache.lucene.analysis.PorterStemmer.stem()",1,1,n/a,8,0,0,1,1
"org.apache.lucene.analysis.PorterStemmer.stem(String)",4,0,n/a,9,0,1,3,2
"org.apache.lucene.analysis.PorterStemmer.stem(char[])",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.PorterStemmer.stem(char[],int)",1,2,n/a,8,0,2,1,1
"org.apache.lucene.analysis.PorterStemmer.stem(char[],int,int)",4,2,n/a,14,1,3,6,2
"org.apache.lucene.analysis.PorterStemmer.stem(int)",6,2,n/a,13,1,1,13,3
"org.apache.lucene.analysis.PorterStemmer.step1()",18,1,n/a,24,2,0,24,19
"org.apache.lucene.analysis.PorterStemmer.step2()",2,1,n/a,6,1,0,3,3
"org.apache.lucene.analysis.PorterStemmer.step3()",42,1,n/a,41,2,0,81,31
"org.apache.lucene.analysis.PorterStemmer.step4()",14,1,n/a,19,2,0,30,12
"org.apache.lucene.analysis.PorterStemmer.step5()",20,1,n/a,52,1,0,69,38
"org.apache.lucene.analysis.PorterStemmer.step6()",4,1,n/a,10,1,0,7,8
"org.apache.lucene.analysis.PorterStemmer.toString()",1,2,n/a,7,0,0,1,1
"org.apache.lucene.analysis.PorterStemmer.vowelinstem()",1,2,n/a,7,0,0,7,3
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents.TokenStreamComponents(Tokenizer)",0,5,n/a,10,0,1,2,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents.TokenStreamComponents(Tokenizer,TokenStream)",0,192,n/a,13,0,2,2,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents.getTokenStream()",0,2,n/a,8,0,0,1,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents.reset(Reader)",1,5,n/a,18,0,1,2,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.createComponents(String,Reader)",n/a,5,191,n/a,n/a,2,n/a,n/a
"org.apache.lucene.analysis.ReusableAnalyzerBase.initReader(Reader)",0,2,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ReusableAnalyzerBase.reusableTokenStream(String,Reader)",6,47,n/a,24,1,2,6,3
"org.apache.lucene.analysis.ReusableAnalyzerBase.tokenStream(String,Reader)",3,83,n/a,15,0,2,1,1
"org.apache.lucene.analysis.SimpleAnalyzer.SimpleAnalyzer()",1,1,n/a,7,0,0,1,1
"org.apache.lucene.analysis.SimpleAnalyzer.SimpleAnalyzer(Version)",0,11,n/a,7,0,1,1,1
"org.apache.lucene.analysis.SimpleAnalyzer.createComponents(String,Reader)",2,5,n/a,5,0,2,1,1
"org.apache.lucene.analysis.StopAnalyzer.StopAnalyzer(Version)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.analysis.StopAnalyzer.StopAnalyzer(Version,File)",3,1,n/a,8,0,2,1,1
"org.apache.lucene.analysis.StopAnalyzer.StopAnalyzer(Version,Reader)",2,1,n/a,7,0,2,1,1
"org.apache.lucene.analysis.StopAnalyzer.StopAnalyzer(Version,Set<?>)",1,1,n/a,6,0,2,1,1
"org.apache.lucene.analysis.StopAnalyzer.createComponents(String,Reader)",3,5,n/a,16,0,2,2,1
"org.apache.lucene.analysis.StopFilter.StopFilter(Version,TokenStream,Set<?>)",1,13,n/a,17,0,3,1,1
"org.apache.lucene.analysis.StopFilter.StopFilter(Version,TokenStream,Set<?>,boolean)",2,3,n/a,28,0,4,1,1
"org.apache.lucene.analysis.StopFilter.StopFilter(Version,boolean,TokenStream,Set<?>,boolean)",2,3,n/a,7,0,5,2,2
"org.apache.lucene.analysis.StopFilter.StopFilter(boolean,TokenStream,Set<?>)",1,0,n/a,14,0,3,1,1
"org.apache.lucene.analysis.StopFilter.StopFilter(boolean,TokenStream,Set<?>,boolean)",1,0,n/a,22,0,4,1,1
"org.apache.lucene.analysis.StopFilter.accept()",3,3,n/a,7,0,0,1,1
"org.apache.lucene.analysis.StopFilter.getEnablePositionIncrementsVersionDefault(Version)",1,0,n/a,12,0,1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(List<?>)",1,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(List<?>,boolean)",1,0,n/a,11,0,2,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(String...)",1,1,n/a,13,0,1,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(String[],boolean)",1,0,n/a,11,0,2,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(Version,List<?>)",1,1,n/a,14,0,2,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(Version,List<?>,boolean)",3,5,n/a,12,0,3,3,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(Version,String...)",1,19,n/a,13,0,2,1,1
"org.apache.lucene.analysis.StopFilter.makeStopSet(Version,String[],boolean)",3,8,n/a,13,0,3,3,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.StopwordAnalyzerBase(Version)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.StopwordAnalyzerBase(Version,Set<?>)",2,37,n/a,14,0,2,2,2
"org.apache.lucene.analysis.StopwordAnalyzerBase.getStopwordSet()",0,0,n/a,10,0,0,1,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.loadStopwordSet(File,Version)",3,0,n/a,23,1,2,5,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.loadStopwordSet(Reader,Version)",2,0,n/a,21,1,2,3,1
"org.apache.lucene.analysis.StopwordAnalyzerBase.loadStopwordSet(boolean,Class<? extends ReusableAnalyzerBase>,String,String)",5,15,n/a,29,1,4,5,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkFilter.accept(AttributeSource)",n/a,1,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkFilter.reset()",0,0,n/a,7,0,0,0,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.SinkTokenStream(AttributeSource,SinkFilter)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.accept(AttributeSource)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.addState(State)",2,1,n/a,6,1,1,3,2
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.end()",1,39,n/a,6,1,0,2,2
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.incrementToken()",4,219,n/a,13,1,0,7,3
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.reset()",1,96,n/a,4,0,0,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream.setFinalState(State)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.TeeSinkTokenFilter(TokenStream)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.addSinkTokenStream(SinkTokenStream)",11,0,n/a,16,1,1,6,3
"org.apache.lucene.analysis.TeeSinkTokenFilter.consumeAllTokens()",1,1,n/a,9,1,0,1,2
"org.apache.lucene.analysis.TeeSinkTokenFilter.end()",4,40,n/a,11,2,0,6,3
"org.apache.lucene.analysis.TeeSinkTokenFilter.incrementToken()",5,220,n/a,20,5,0,11,6
"org.apache.lucene.analysis.TeeSinkTokenFilter.newSinkTokenStream()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.newSinkTokenStream(SinkFilter)",4,4,n/a,10,0,1,3,1
"org.apache.lucene.analysis.Token.Token()",0,14,n/a,3,0,0,0,1
"org.apache.lucene.analysis.Token.Token(String,int,int)",1,7,n/a,14,0,3,3,1
"org.apache.lucene.analysis.Token.Token(String,int,int,String)",1,3,n/a,15,0,4,4,1
"org.apache.lucene.analysis.Token.Token(String,int,int,int)",1,0,n/a,16,0,4,4,1
"org.apache.lucene.analysis.Token.Token(char[],int,int,int,int)",1,16,n/a,15,0,5,3,1
"org.apache.lucene.analysis.Token.Token(int,int)",0,7,n/a,8,0,2,2,1
"org.apache.lucene.analysis.Token.Token(int,int,String)",0,2,n/a,10,0,3,3,1
"org.apache.lucene.analysis.Token.Token(int,int,int)",0,0,n/a,12,0,3,3,1
"org.apache.lucene.analysis.Token.TokenAttributeFactory.TokenAttributeFactory(AttributeFactory)",0,1,n/a,5,0,1,1,1
"org.apache.lucene.analysis.Token.TokenAttributeFactory.createAttributeInstance(Class<? extends Attribute>)",3,2,n/a,5,0,1,1,2
"org.apache.lucene.analysis.Token.TokenAttributeFactory.equals(Object)",1,0,n/a,9,1,1,6,3
"org.apache.lucene.analysis.Token.TokenAttributeFactory.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.Token.clear()",1,13,n/a,12,0,0,6,1
"org.apache.lucene.analysis.Token.clearNoTermBuffer()",0,2,n/a,8,0,0,5,1
"org.apache.lucene.analysis.Token.clone()",2,9,n/a,9,1,0,4,2
"org.apache.lucene.analysis.Token.clone(char[],int,int,int,int)",2,0,n/a,14,0,5,7,2
"org.apache.lucene.analysis.Token.copyTo(AttributeImpl)",9,6,n/a,18,2,1,11,4
"org.apache.lucene.analysis.Token.endOffset()",0,90,n/a,6,0,0,1,1
"org.apache.lucene.analysis.Token.equals(Object)",3,1,n/a,17,1,1,6,11
"org.apache.lucene.analysis.Token.getFlags()",0,16,n/a,13,0,0,1,1
"org.apache.lucene.analysis.Token.getPayload()",0,33,n/a,6,0,0,1,1
"org.apache.lucene.analysis.Token.getPositionIncrement()",0,70,n/a,6,0,0,1,1
"org.apache.lucene.analysis.Token.hashCode()",3,1,n/a,13,0,0,10,3
"org.apache.lucene.analysis.Token.reflectWith(AttributeReflector)",7,10,n/a,10,0,1,7,1
"org.apache.lucene.analysis.Token.reinit(String,int,int)",2,0,n/a,14,0,3,6,1
"org.apache.lucene.analysis.Token.reinit(String,int,int,String)",2,0,n/a,14,0,4,6,1
"org.apache.lucene.analysis.Token.reinit(String,int,int,int,int)",2,0,n/a,14,0,5,6,1
"org.apache.lucene.analysis.Token.reinit(String,int,int,int,int,String)",2,0,n/a,14,0,6,6,1
"org.apache.lucene.analysis.Token.reinit(Token)",3,2,n/a,13,0,1,7,1
"org.apache.lucene.analysis.Token.reinit(Token,String)",2,0,n/a,14,0,2,7,1
"org.apache.lucene.analysis.Token.reinit(Token,char[],int,int)",1,0,n/a,16,0,4,7,1
"org.apache.lucene.analysis.Token.reinit(char[],int,int,int,int)",2,0,n/a,14,0,5,6,1
"org.apache.lucene.analysis.Token.reinit(char[],int,int,int,int,String)",2,0,n/a,16,0,6,8,1
"org.apache.lucene.analysis.Token.setEndOffset(int)",0,12,n/a,5,0,1,1,1
"org.apache.lucene.analysis.Token.setFlags(int)",0,18,n/a,6,0,1,1,1
"org.apache.lucene.analysis.Token.setOffset(int,int)",0,109,n/a,6,0,2,2,1
"org.apache.lucene.analysis.Token.setPayload(Payload)",0,25,n/a,6,0,1,1,1
"org.apache.lucene.analysis.Token.setPositionIncrement(int)",1,99,n/a,32,0,1,3,2
"org.apache.lucene.analysis.Token.setStartOffset(int)",0,12,n/a,5,0,1,1,1
"org.apache.lucene.analysis.Token.setType(String)",0,50,n/a,5,0,1,1,1
"org.apache.lucene.analysis.Token.startOffset()",0,97,n/a,8,0,0,1,1
"org.apache.lucene.analysis.Token.type()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.analysis.TokenFilter.TokenFilter(TokenStream)",1,113,n/a,5,0,1,2,1
"org.apache.lucene.analysis.TokenFilter.close()",1,33,n/a,5,0,0,1,1
"org.apache.lucene.analysis.TokenFilter.end()",1,40,n/a,7,0,0,1,1
"org.apache.lucene.analysis.TokenFilter.reset()",1,118,n/a,5,0,0,1,1
"org.apache.lucene.analysis.TokenStream.TokenStream()",2,24,n/a,7,0,0,2,1
"org.apache.lucene.analysis.TokenStream.TokenStream(AttributeFactory)",2,6,n/a,7,0,1,2,1
"org.apache.lucene.analysis.TokenStream.TokenStream(AttributeSource)",2,8,n/a,7,0,1,2,1
"org.apache.lucene.analysis.TokenStream.assertFinal()",7,3,n/a,14,1,0,7,5
"org.apache.lucene.analysis.TokenStream.close()",0,33,n/a,2,0,0,0,1
"org.apache.lucene.analysis.TokenStream.end()",0,39,n/a,16,0,0,0,1
"org.apache.lucene.analysis.TokenStream.incrementToken()",n/a,216,161,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.TokenStream.reset()",0,92,n/a,11,0,0,0,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer()",0,0,n/a,5,0,0,0,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(AttributeFactory)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(AttributeFactory,Reader)",1,13,n/a,5,0,2,2,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(AttributeSource)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(AttributeSource,Reader)",1,13,n/a,5,0,2,2,1
"org.apache.lucene.analysis.Tokenizer.Tokenizer(Reader)",0,23,n/a,4,0,1,1,1
"org.apache.lucene.analysis.Tokenizer.close()",1,38,n/a,10,1,0,3,2
"org.apache.lucene.analysis.Tokenizer.correctOffset(int)",1,74,n/a,9,0,1,1,2
"org.apache.lucene.analysis.Tokenizer.reset(Reader)",0,28,n/a,6,0,1,1,1
"org.apache.lucene.analysis.TypeTokenFilter.TypeTokenFilter(boolean,TokenStream,Set<String>)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.TypeTokenFilter.TypeTokenFilter(boolean,TokenStream,Set<String>,boolean)",1,2,n/a,5,0,4,3,1
"org.apache.lucene.analysis.TypeTokenFilter.accept()",2,3,n/a,8,0,0,1,1
"org.apache.lucene.analysis.WhitespaceAnalyzer.WhitespaceAnalyzer()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.WhitespaceAnalyzer.WhitespaceAnalyzer(Version)",0,35,n/a,7,0,1,1,1
"org.apache.lucene.analysis.WhitespaceAnalyzer.createComponents(String,Reader)",2,5,n/a,5,0,2,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(AttributeFactory,Reader)",1,0,n/a,11,0,2,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(AttributeSource,Reader)",1,0,n/a,10,0,2,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(Reader)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(Version,AttributeFactory,Reader)",1,1,n/a,15,0,3,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(Version,AttributeSource,Reader)",1,1,n/a,13,0,3,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.WhitespaceTokenizer(Version,Reader)",1,5,n/a,10,0,2,1,1
"org.apache.lucene.analysis.WhitespaceTokenizer.isTokenChar(int)",1,12,n/a,6,0,1,1,1
"org.apache.lucene.analysis.WordlistLoader.getBufferedReader(Reader)",1,4,n/a,4,0,1,1,2
"org.apache.lucene.analysis.WordlistLoader.getSnowballWordSet(Reader,CharArraySet)",8,2,n/a,33,2,2,16,5
"org.apache.lucene.analysis.WordlistLoader.getSnowballWordSet(Reader,Version)",2,12,n/a,18,0,2,1,1
"org.apache.lucene.analysis.WordlistLoader.getStemDict(Reader,CharArrayMap<String>)",5,1,n/a,22,2,2,9,2
"org.apache.lucene.analysis.WordlistLoader.getWordSet(Reader,CharArraySet)",5,1,n/a,24,2,2,8,2
"org.apache.lucene.analysis.WordlistLoader.getWordSet(Reader,String,CharArraySet)",6,2,n/a,27,3,3,9,3
"org.apache.lucene.analysis.WordlistLoader.getWordSet(Reader,String,Version)",2,9,n/a,14,0,3,1,1
"org.apache.lucene.analysis.WordlistLoader.getWordSet(Reader,Version)",2,28,n/a,13,0,2,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,File)",3,5,n/a,9,0,2,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,Hashtable<?, ?>)",2,5,n/a,8,0,2,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,Set<?>)",1,5,n/a,11,0,2,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,Set<?>,Set<?>)",3,0,n/a,17,0,3,2,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.ArabicAnalyzer(Version,String...)",2,0,n/a,8,0,2,1,1
"org.apache.lucene.analysis.ar.ArabicAnalyzer.createComponents(String,Reader)",10,5,n/a,26,1,2,7,3
"org.apache.lucene.analysis.ar.ArabicAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(AttributeFactory,Reader)",1,0,n/a,11,0,2,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(AttributeSource,Reader)",1,0,n/a,10,0,2,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(Reader)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(Version,AttributeFactory,Reader)",1,1,n/a,14,0,3,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(Version,AttributeSource,Reader)",1,1,n/a,13,0,3,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.ArabicLetterTokenizer(Version,Reader)",1,3,n/a,11,0,2,1,1
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer.isTokenChar(int)",2,15,n/a,8,0,1,1,2
"org.apache.lucene.analysis.ar.ArabicNormalizationFilter.ArabicNormalizationFilter(TokenStream)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ar.ArabicNormalizationFilter.incrementToken()",5,216,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ar.ArabicNormalizer.normalize(char[],int)",1,0,n/a,39,2,2,30,7
"org.apache.lucene.analysis.ar.ArabicStemFilter.ArabicStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ar.ArabicStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.ar.ArabicStemmer.endsWithCheckLength(char[],int,char[])",0,1,n/a,17,1,3,8,4
"org.apache.lucene.analysis.ar.ArabicStemmer.startsWithCheckLength(char[],int,char[])",0,1,n/a,19,1,3,10,6
"org.apache.lucene.analysis.ar.ArabicStemmer.stem(char[],int)",2,0,n/a,12,0,2,3,1
"org.apache.lucene.analysis.ar.ArabicStemmer.stemPrefix(char[],int)",2,1,n/a,12,0,2,6,3
"org.apache.lucene.analysis.ar.ArabicStemmer.stemSuffix(char[],int)",2,1,n/a,12,0,2,6,3
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testBasicFeatures()",11,0,n/a,16,0,0,11,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testCustomStopwords()",4,0,n/a,9,0,0,3,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testEnglishInput()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testReusableTokenStream()",3,0,n/a,8,0,0,3,1
"org.apache.lucene.analysis.ar.TestArabicAnalyzer.testWithStemExclusionSet()",8,0,n/a,9,0,0,7,1
"org.apache.lucene.analysis.ar.TestArabicLetterTokenizer.testArabicLetterTokenizer()",3,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.ar.TestArabicLetterTokenizer.testArabicLetterTokenizerBWCompat()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.check(String,String)",4,14,n/a,5,0,2,3,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testAlifHamzaAbove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testAlifHamzaBelow()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testAlifMadda()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testAlifMaksura()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testDamma()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testDammatan()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testFatha()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testFathatan()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testKasra()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testKasratan()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testShaddah()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testSukun()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testTatweel()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter.testTehMarbuta()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.check(String,String)",4,21,n/a,5,0,2,3,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testAhSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testAlPrefix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testAnSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testAtSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testBalPrefix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testComboPrefSuf()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testComboSuf()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testFalPrefix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testHSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testKalPrefix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testLlPrefix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testNonArabic()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testPSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testShouldntStem()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testWaPrefix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testWalPrefix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testWithKeywordAttribute()",7,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testWnSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testYSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testYhSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testYnSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ar.TestArabicStemFilter.testYpSuffix()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.BulgarianAnalyzer(Version)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.BulgarianAnalyzer(Version,Set<?>)",1,1,n/a,6,0,2,1,1
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.BulgarianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,9,0,3,2,1
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.createComponents(String,Reader)",8,5,n/a,23,0,2,8,2
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.getDefaultStopSet()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.bg.BulgarianStemFilter.BulgarianStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.bg.BulgarianStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.bg.BulgarianStemmer.removeArticle(char[],int)",7,1,n/a,21,1,2,8,11
"org.apache.lucene.analysis.bg.BulgarianStemmer.removePlural(char[],int)",9,1,n/a,39,2,2,29,15
"org.apache.lucene.analysis.bg.BulgarianStemmer.stem(char[],int)",8,0,n/a,35,1,2,18,13
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testBasicExamples()",6,0,n/a,11,0,0,6,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testCustomStopwords()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testResourcesAvailable()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testReusableTokenStream()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testStopwords()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer.testWithStemExclusionSet()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testAdjectives()",10,0,n/a,15,0,0,10,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testExceptions()",34,0,n/a,50,0,0,34,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testFeminineNouns()",5,0,n/a,10,0,0,5,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testMasculineNouns()",42,0,n/a,58,0,0,42,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testNeuterNouns()",15,0,n/a,25,0,0,15,1
"org.apache.lucene.analysis.bg.TestBulgarianStemmer.testWithKeywordAttribute()",7,0,n/a,8,0,0,5,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,File)",3,6,n/a,10,0,2,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,Map<?, ?>)",2,6,n/a,8,0,2,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,Set<?>)",1,6,n/a,11,0,2,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,Set<?>,Set<?>)",3,3,n/a,14,0,3,2,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.BrazilianAnalyzer(Version,String...)",2,0,n/a,8,0,2,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.createComponents(String,Reader)",8,5,n/a,21,0,2,7,3
"org.apache.lucene.analysis.br.BrazilianAnalyzer.getDefaultStopSet()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.setStemExclusionTable(File)",3,0,n/a,10,0,1,2,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.setStemExclusionTable(Map<?, ?>)",3,0,n/a,9,0,1,2,1
"org.apache.lucene.analysis.br.BrazilianAnalyzer.setStemExclusionTable(String...)",2,0,n/a,9,0,1,2,1
"org.apache.lucene.analysis.br.BrazilianStemFilter.BrazilianStemFilter(TokenStream)",1,2,n/a,8,0,1,1,1
"org.apache.lucene.analysis.br.BrazilianStemFilter.BrazilianStemFilter(TokenStream,Set<?>)",1,0,n/a,12,0,2,2,1
"org.apache.lucene.analysis.br.BrazilianStemFilter.incrementToken()",8,216,n/a,16,2,0,8,7
"org.apache.lucene.analysis.br.BrazilianStemmer.BrazilianStemmer()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.br.BrazilianStemmer.changeTerm(String)",16,1,n/a,48,2,1,31,16
"org.apache.lucene.analysis.br.BrazilianStemmer.createCT(String)",30,1,n/a,32,1,1,9,19
"org.apache.lucene.analysis.br.BrazilianStemmer.getR1(String)",6,2,n/a,37,2,1,19,8
"org.apache.lucene.analysis.br.BrazilianStemmer.getRV(String)",14,1,n/a,60,3,1,24,14
"org.apache.lucene.analysis.br.BrazilianStemmer.isIndexable(String)",2,1,n/a,8,0,1,1,2
"org.apache.lucene.analysis.br.BrazilianStemmer.isStemmable(String)",3,1,n/a,14,2,1,6,3
"org.apache.lucene.analysis.br.BrazilianStemmer.isVowel(char)",0,7,n/a,12,0,1,1,5
"org.apache.lucene.analysis.br.BrazilianStemmer.log()",0,0,n/a,12,0,0,1,1
"org.apache.lucene.analysis.br.BrazilianStemmer.removeSuffix(String,String)",4,160,n/a,14,1,2,3,4
"org.apache.lucene.analysis.br.BrazilianStemmer.replaceSuffix(String,String,String)",2,8,n/a,20,1,3,7,5
"org.apache.lucene.analysis.br.BrazilianStemmer.stem(String)",11,0,n/a,32,1,1,18,5
"org.apache.lucene.analysis.br.BrazilianStemmer.step1()",132,1,n/a,155,2,0,133,92
"org.apache.lucene.analysis.br.BrazilianStemmer.step2()",234,1,n/a,373,2,0,351,122
"org.apache.lucene.analysis.br.BrazilianStemmer.step3()",3,1,n/a,10,1,0,4,4
"org.apache.lucene.analysis.br.BrazilianStemmer.step4()",8,1,n/a,22,1,0,14,6
"org.apache.lucene.analysis.br.BrazilianStemmer.step5()",8,1,n/a,24,2,0,13,5
"org.apache.lucene.analysis.br.BrazilianStemmer.suffix(String,String)",6,207,n/a,15,1,2,5,4
"org.apache.lucene.analysis.br.BrazilianStemmer.suffixPreceded(String,String,String)",3,5,n/a,15,1,3,3,5
"org.apache.lucene.analysis.br.TestBrazilianStemmer.check(String,String)",2,86,n/a,3,0,2,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.checkReuse(Analyzer,String,String)",1,7,n/a,3,0,3,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testExclusionTableReuse()",4,0,n/a,10,0,0,4,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testNormalization()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testReusableTokenStream()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testStemExclusionTable()",4,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testStemExclusionTableBWCompat()",6,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testWithKeywordAttribute()",7,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testWithKeywordAttributeAndExclusionTable()",9,0,n/a,10,0,0,6,1
"org.apache.lucene.analysis.br.TestBrazilianStemmer.testWithSnowballExamples()",81,0,n/a,83,0,0,81,1
"org.apache.lucene.analysis.ca.CatalanAnalyzer.CatalanAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ca.CatalanAnalyzer.CatalanAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.ca.CatalanAnalyzer.CatalanAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.ca.CatalanAnalyzer.createComponents(String,Reader)",11,5,n/a,27,1,2,10,3
"org.apache.lucene.analysis.ca.CatalanAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testContractions()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.HTMLStripCharFilter(CharStream)",1,1,n/a,7,0,1,2,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.HTMLStripCharFilter(CharStream,Set<String>)",6,1,n/a,25,4,2,13,7
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.TextSegment(char[],int)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.TextSegment(int)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.clear()",2,22,n/a,5,0,0,2,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.isRead()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.nextChar()",1,16,n/a,5,0,0,2,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment.restart()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.close()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.getInitialBufferSize()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.nextChar()",255,1,n/a,635,6,0,504,156
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.read()",3,1,n/a,14,2,0,9,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.read(char[],int,int)",1,1,n/a,10,1,3,8,5
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yybegin(int)",0,60,n/a,8,0,1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yycharat(int)",0,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yyclose()",1,1,n/a,9,0,0,4,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yylength()",0,39,n/a,6,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yypushback(int)",2,4,n/a,13,0,1,3,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yyreset(Reader)",0,0,n/a,24,0,1,10,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yystate()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.yytext()",1,5,n/a,6,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzDoEOF()",8,1,n/a,56,3,0,39,6
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzRefill()",4,1,n/a,46,2,0,21,6
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzScanError(int)",1,2,n/a,24,1,1,5,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackAction()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackAction(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackAttribute()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackAttribute(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackCMap(String)",2,1,n/a,17,1,1,9,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackRowMap()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackRowMap(String,int,int[])",3,1,n/a,10,1,3,7,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackTrans()",14,1,n/a,19,0,0,17,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.zzUnpackTrans(String,int,int[])",3,14,n/a,12,1,3,10,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.appendChars(StringBuilder,int)",2,4,n/a,6,1,2,5,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.assertLegalOffsets(String)",8,2,n/a,12,1,1,8,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.doTestOffsets(String)",8,3,n/a,14,2,1,10,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.newTestAnalyzer()",5,5,n/a,4,2,0,4,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.processBuffer(String,String)",10,1,n/a,15,2,2,7,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.test()",11,0,n/a,24,1,0,13,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testBR()",8,0,n/a,20,2,0,13,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testBufferOverflow()",52,0,n/a,57,2,0,40,4
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testCDATA()",18,0,n/a,30,2,0,18,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testCloseBR()",3,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testComment()",10,0,n/a,16,2,0,9,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testEntities()",10,0,n/a,14,1,0,11,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testEscapeBR()",11,0,n/a,18,2,0,10,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testEscapeScript()",11,0,n/a,18,2,0,10,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testEscapeStyle()",11,0,n/a,18,2,0,10,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testGamma()",10,0,n/a,14,1,0,11,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testHTML()",20,0,n/a,15,1,0,11,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testInlineTagsNoSpace()",9,0,n/a,16,2,0,9,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testLegalOffsets()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testMSWord14GeneratedHTML()",13,0,n/a,16,2,0,9,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testMSWordMalformedProcessingInstruction()",9,0,n/a,16,2,0,9,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testMalformedHTML()",8,0,n/a,128,2,0,13,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testMoreEntities()",10,0,n/a,14,1,0,11,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testOffsets()",3,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testRandom()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testRandomBrokenHTML()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testRandomHugeStrings()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testRandomText()",17,0,n/a,34,3,0,29,8
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testReserved()",20,0,n/a,17,1,0,13,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testScriptQuotes()",18,0,n/a,30,2,0,18,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testServerSideIncludes()",19,0,n/a,31,2,0,18,3
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testStyle()",9,0,n/a,20,2,0,9,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testSupplementaryCharsInTags()",9,0,n/a,16,2,0,9,2
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testUTF16Surrogates()",21,0,n/a,28,0,0,21,1
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest.testUppercaseCharacterEntityVariants()",9,0,n/a,16,2,0,9,2
"org.apache.lucene.analysis.cjk.CJKAnalyzer.CJKAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.cjk.CJKAnalyzer.CJKAnalyzer(Version,Set<?>)",1,2,n/a,11,0,2,1,1
"org.apache.lucene.analysis.cjk.CJKAnalyzer.CJKAnalyzer(Version,String...)",2,0,n/a,10,0,2,1,1
"org.apache.lucene.analysis.cjk.CJKAnalyzer.createComponents(String,Reader)",10,5,n/a,15,1,2,8,2
"org.apache.lucene.analysis.cjk.CJKAnalyzer.getDefaultStopSet()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.CJKBigramFilter(TokenStream)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.CJKBigramFilter(TokenStream,int)",1,4,n/a,12,0,2,5,5
"org.apache.lucene.analysis.cjk.CJKBigramFilter.doNext()",2,1,n/a,19,2,0,10,4
"org.apache.lucene.analysis.cjk.CJKBigramFilter.flushBigram()",7,1,n/a,14,0,0,8,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.flushUnigram()",6,3,n/a,15,0,0,7,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.hasBufferedBigram()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.cjk.CJKBigramFilter.hasBufferedUnigram()",0,3,n/a,8,0,0,1,2
"org.apache.lucene.analysis.cjk.CJKBigramFilter.incrementToken()",14,216,n/a,58,5,0,24,12
"org.apache.lucene.analysis.cjk.CJKBigramFilter.refill()",11,1,n/a,42,2,0,32,5
"org.apache.lucene.analysis.cjk.CJKBigramFilter.reset()",1,118,n/a,9,0,0,6,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.CJKTokenizer(AttributeFactory,Reader)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.CJKTokenizer(AttributeSource,Reader)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.CJKTokenizer(Reader)",1,1,n/a,8,0,1,1,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.end()",2,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.incrementToken()",11,216,n/a,148,7,0,77,30
"org.apache.lucene.analysis.cjk.CJKTokenizer.reset()",1,93,n/a,7,0,0,4,1
"org.apache.lucene.analysis.cjk.CJKTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.cjk.CJKWidthFilter.CJKWidthFilter(TokenStream)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.cjk.CJKWidthFilter.combine(char[],int,char)",0,1,n/a,11,1,3,5,4
"org.apache.lucene.analysis.cjk.CJKWidthFilter.incrementToken()",6,216,n/a,24,4,0,16,11
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.FakeStandardTokenizer.FakeStandardTokenizer(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.FakeStandardTokenizer.incrementToken()",2,216,n/a,9,1,0,4,2
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testC()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testChangedOffsets()",10,0,n/a,4,2,0,8,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testFinalOffset()",6,0,n/a,41,0,0,6,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testJa1()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testJa2()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testMix()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testMix2()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testNonIdeographic()",1,0,n/a,11,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testNonIdeographicNonLetter()",1,0,n/a,11,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testRandomHugeStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testReusableTokenStream()",2,0,n/a,14,0,0,2,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testSingleChar()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testSingleChar2()",7,0,n/a,8,2,0,7,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testSurrogates()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.testTokenStream()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.checkCJKToken(String,TestToken[])",2,15,n/a,14,1,2,13,2
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.checkCJKTokenReusable(Analyzer,String,TestToken[])",2,2,n/a,14,1,3,13,2
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.newToken(String,int,int,int)",1,90,n/a,8,0,4,6,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testC()",7,0,n/a,12,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testFinalOffset()",14,0,n/a,19,0,0,6,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testFullWidth()",3,0,n/a,11,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testJa1()",10,0,n/a,15,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testJa2()",9,0,n/a,14,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testMix()",10,0,n/a,15,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testMix2()",12,0,n/a,17,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testNonIdeographic()",9,0,n/a,17,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testNonIdeographicNonLetter()",9,0,n/a,18,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testReusableTokenStream()",23,0,n/a,31,0,0,7,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testSingleChar()",2,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.testTokenStream()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter.testFullWidthASCII()",1,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter.testHalfWidthKana()",3,0,n/a,13,0,0,3,1
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter.testRandomData()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.cn.ChineseAnalyzer.createComponents(String,Reader)",3,5,n/a,15,0,2,2,1
"org.apache.lucene.analysis.cn.ChineseFilter.ChineseFilter(TokenStream)",3,1,n/a,4,0,1,2,1
"org.apache.lucene.analysis.cn.ChineseFilter.incrementToken()",5,216,n/a,24,4,0,13,6
"org.apache.lucene.analysis.cn.ChineseTokenizer.ChineseTokenizer(AttributeFactory,Reader)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.ChineseTokenizer(AttributeSource,Reader)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.ChineseTokenizer(Reader)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.end()",2,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.flush()",4,5,n/a,11,1,0,5,2
"org.apache.lucene.analysis.cn.ChineseTokenizer.incrementToken()",10,216,n/a,38,3,0,32,10
"org.apache.lucene.analysis.cn.ChineseTokenizer.push(char)",1,2,n/a,4,0,1,3,2
"org.apache.lucene.analysis.cn.ChineseTokenizer.reset()",1,93,n/a,5,0,0,2,1
"org.apache.lucene.analysis.cn.ChineseTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.JustChineseFilterAnalyzer.tokenStream(String,Reader)",2,78,n/a,4,0,2,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.JustChineseTokenizerAnalyzer.tokenStream(String,Reader)",1,78,n/a,4,0,2,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testEnglish()",6,0,n/a,19,0,0,6,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testNumerics()",4,0,n/a,11,0,0,4,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testOtherLetterOffset()",8,0,n/a,14,1,0,10,2
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.testReusableTokenStream()",3,0,n/a,12,0,0,3,1
"org.apache.lucene.analysis.cn.smart.AnalyzerProfile.getAnalysisDataDir(File)",5,2,n/a,12,1,1,8,2
"org.apache.lucene.analysis.cn.smart.AnalyzerProfile.init()",17,1,n/a,31,3,0,20,8
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.SentenceTokenizer(AttributeFactory,Reader)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.SentenceTokenizer(AttributeSource,Reader)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.SentenceTokenizer(Reader)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.end()",2,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.incrementToken()",18,216,n/a,48,3,0,35,9
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.reset()",1,93,n/a,5,0,0,2,1
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.DefaultSetHolder.loadDefaultStopWordSet()",3,1,n/a,7,0,0,1,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.SmartChineseAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.SmartChineseAnalyzer(Version,Set)",0,0,n/a,13,0,2,2,2
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.SmartChineseAnalyzer(Version,boolean)",0,1,n/a,16,0,2,2,2
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.reusableTokenStream(String,Reader)",10,46,n/a,19,2,2,12,3
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.tokenStream(String,Reader)",5,78,n/a,13,1,2,6,2
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseAnalyzer()",2,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWords2()",2,0,n/a,13,0,0,7,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWordsDefault()",5,0,n/a,9,0,0,6,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWordsDefaultTwoPhrases()",2,0,n/a,10,0,0,4,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWordsDefaultTwoPhrasesIdeoSpace()",2,0,n/a,10,0,0,4,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testChineseStopWordsOff()",4,0,n/a,17,1,0,6,2
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testDelimiters()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testEmptyTerm()",6,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testFullWidth()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testInvalidOffset()",6,0,n/a,7,2,0,6,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testLargeDocument()",8,0,n/a,12,1,0,9,3
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testLargeSentence()",8,0,n/a,12,1,0,9,3
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testMixedLatinChinese()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testNonChinese()",2,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testNumerics()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testOOV()",4,0,n/a,11,0,0,2,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testOffsets()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testRandomHugeStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer.testReusableTokenStream()",3,0,n/a,11,0,0,3,1
"org.apache.lucene.analysis.cn.smart.Utility.compareArray(char[],int,char[],int)",0,7,n/a,52,2,4,21,13
"org.apache.lucene.analysis.cn.smart.Utility.compareArrayByPrefix(char[],int,char[],int)",0,2,n/a,36,1,4,13,10
"org.apache.lucene.analysis.cn.smart.Utility.getCharType(char)",0,2,n/a,30,0,1,17,28
"org.apache.lucene.analysis.cn.smart.WordSegmenter.convertSegToken(SegToken,String,int)",3,1,n/a,28,1,3,13,3
"org.apache.lucene.analysis.cn.smart.WordSegmenter.segmentSentence(String,int)",6,0,n/a,17,0,2,7,3
"org.apache.lucene.analysis.cn.smart.WordTokenFilter.WordTokenFilter(TokenStream)",2,2,n/a,9,0,1,2,1
"org.apache.lucene.analysis.cn.smart.WordTokenFilter.incrementToken()",16,216,n/a,36,2,0,18,6
"org.apache.lucene.analysis.cn.smart.WordTokenFilter.reset()",1,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.getCCByGB2312Id(int)",1,0,n/a,27,1,1,11,4
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.getGB2312Id(char)",3,0,n/a,22,2,1,9,3
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.hash1(char)",0,0,n/a,18,0,1,10,1
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.hash1(char[])",0,0,n/a,21,1,1,9,2
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.hash2(char)",0,0,n/a,17,0,1,4,1
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary.hash2(char[])",0,0,n/a,20,1,1,8,2
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.BiSegGraph(SegGraph)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.addSegTokenPair(SegTokenPair)",6,1,n/a,16,1,1,7,2
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.generateBiSegGraph(SegGraph)",12,1,n/a,62,5,1,33,8
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getShortPath()",20,0,n/a,51,3,0,43,6
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getToCount()",1,1,n/a,7,0,0,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.getToList(int)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.isToExist(int)",2,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph.toString()",4,0,n/a,11,2,0,6,3
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.BigramDictionary()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getAvaliableIndex(long,char[])",1,1,n/a,21,1,2,14,9
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getBigramItemIndex(char[])",2,1,n/a,28,1,1,19,9
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getFrequency(char[])",1,0,n/a,6,0,1,4,2
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.getInstance()",4,0,n/a,14,2,0,8,4
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load()",3,1,n/a,4,0,0,2,1
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.load(String)",7,1,n/a,20,3,1,14,5
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.loadFromFile(String)",21,1,n/a,65,5,1,37,8
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.loadFromInputStream(InputStream)",4,2,n/a,8,0,1,4,1
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.loadFromObj(File)",5,1,n/a,13,1,1,7,4
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary.saveToObj(File)",5,1,n/a,12,1,1,5,2
"org.apache.lucene.analysis.cn.smart.hhmm.HHMMSegmenter.createSegGraph(String)",40,1,n/a,134,4,1,97,28
"org.apache.lucene.analysis.cn.smart.hhmm.HHMMSegmenter.getCharTypes(String)",3,1,n/a,16,1,1,7,2
"org.apache.lucene.analysis.cn.smart.hhmm.HHMMSegmenter.process(String)",3,1,n/a,11,0,1,4,1
"org.apache.lucene.analysis.cn.smart.hhmm.PathNode.compareTo(PathNode)",0,0,n/a,8,0,1,5,3
"org.apache.lucene.analysis.cn.smart.hhmm.PathNode.equals(Object)",4,0,n/a,19,0,1,12,6
"org.apache.lucene.analysis.cn.smart.hhmm.PathNode.hashCode()",1,0,n/a,13,0,0,7,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.addToken(SegToken)",6,0,n/a,17,1,1,9,3
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.getMaxStart()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.getStartList(int)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.isStartExist(int)",1,3,n/a,9,0,1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.makeIndex()",5,0,n/a,23,3,0,14,4
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.toString()",4,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph.toTokenList()",5,1,n/a,21,3,0,11,4
"org.apache.lucene.analysis.cn.smart.hhmm.SegToken.SegToken(char[],int,int,int,int)",0,8,n/a,16,0,5,5,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegToken.equals(Object)",3,0,n/a,26,0,1,20,10
"org.apache.lucene.analysis.cn.smart.hhmm.SegToken.hashCode()",0,0,n/a,17,1,0,12,2
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenFilter.filter(SegToken)",0,1,n/a,35,2,1,24,12
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair.SegTokenPair(char[],int,int,double)",0,0,n/a,6,0,4,4,1
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair.equals(Object)",5,0,n/a,23,0,1,16,8
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair.hashCode()",1,0,n/a,17,1,0,12,2
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.WordDictionary()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.expandDelimiterData()",3,1,n/a,45,3,0,24,7
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.findInTable(short,char[])",1,1,n/a,29,1,2,15,7
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getAvaliableTableIndex(char)",2,1,n/a,21,1,1,14,9
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getFrequency(char[])",2,0,n/a,15,0,1,7,3
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getInstance()",4,0,n/a,18,2,0,8,4
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char[])",1,1,n/a,10,0,1,1,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getPrefixMatch(char[],int)",3,2,n/a,33,2,2,18,7
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.getWordItemTableIndex(char)",2,3,n/a,19,1,1,14,8
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.isEqual(char[],int)",2,0,n/a,12,0,2,2,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.load()",3,1,n/a,10,0,0,2,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.load(String)",10,1,n/a,31,3,1,19,5
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.loadFromObj(File)",5,1,n/a,13,1,1,7,4
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.loadFromObjectInputStream(InputStream)",6,2,n/a,10,0,1,6,1
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.loadMainDataFromFile(String)",24,1,n/a,68,3,1,38,5
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.mergeSameWords()",2,1,n/a,38,4,0,28,8
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.saveToObj(File)",7,1,n/a,14,1,1,7,2
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.setTableIndex(char,int)",1,2,n/a,13,1,2,6,2
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary.sortEachItems()",1,1,n/a,22,5,0,19,7
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundToken.CompoundToken(int,int)",4,0,n/a,17,1,2,9,2
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,Set<?>)",1,0,n/a,7,0,2,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,Set<?>,boolean)",1,0,n/a,7,0,3,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,Set<?>,int,int,int,boolean)",1,0,n/a,7,0,6,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,String[])",2,0,n/a,7,0,2,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,String[],boolean)",2,0,n/a,7,0,3,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(TokenStream,String[],int,int,int,boolean)",2,0,n/a,7,0,6,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,Set<?>)",1,1,n/a,3,0,3,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,Set<?>,boolean)",1,1,n/a,3,0,4,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,Set<?>,int,int,int,boolean)",3,6,n/a,13,1,7,9,3
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,String[])",2,1,n/a,3,0,3,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,String[],boolean)",2,1,n/a,3,0,4,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundWordTokenFilterBase(Version,TokenStream,String[],int,int,int,boolean)",2,1,n/a,3,0,7,1,1
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.decompose()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.incrementToken()",12,216,n/a,27,3,0,16,5
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.makeDictionary(Version,String[])",2,6,n/a,8,1,2,3,2
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.reset()",2,118,n/a,6,0,0,3,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(TokenStream,Set)",1,0,n/a,12,0,2,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(TokenStream,Set,int,int,int,boolean)",1,0,n/a,17,0,6,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(TokenStream,String[])",1,0,n/a,11,0,2,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(TokenStream,String[],int,int,int,boolean)",1,0,n/a,15,0,6,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(Version,TokenStream,Set<?>)",1,1,n/a,16,0,3,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(Version,TokenStream,Set<?>,int,int,int,boolean)",1,1,n/a,25,0,7,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(Version,TokenStream,String[])",1,1,n/a,19,0,3,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.DictionaryCompoundWordTokenFilter(Version,TokenStream,String[],int,int,int,boolean)",1,1,n/a,27,0,7,1,1
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter.decompose()",9,0,n/a,28,6,0,19,10
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set<?>)",1,0,n/a,15,0,3,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,Set<?>,int,int,int,boolean)",1,0,n/a,23,0,7,2,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,String[])",2,0,n/a,14,0,3,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(TokenStream,HyphenationTree,String[],int,int,int,boolean)",2,0,n/a,21,0,7,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree)",1,0,n/a,12,0,3,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set<?>)",1,1,n/a,20,0,4,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set<?>,int,int,int,boolean)",1,3,n/a,30,0,8,2,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,String[])",2,1,n/a,22,0,4,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,String[],int,int,int,boolean)",2,1,n/a,31,0,8,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,int,int,int)",1,2,n/a,13,0,6,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.decompose()",19,0,n/a,61,6,0,34,17
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(File)",4,5,n/a,11,0,1,1,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(InputSource)",2,5,n/a,13,0,1,3,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(Reader)",4,5,n/a,20,0,1,3,1
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter.getHyphenationTree(String)",2,5,n/a,11,0,1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttribute.getRetain()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttribute.setRetain(boolean)",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeFilter.MockRetainAttributeFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeFilter.incrementToken()",2,216,n/a,9,1,0,4,2
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl.getRetain()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl.setRetain(boolean)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testDumbCompoundWordsSE()",4,0,n/a,27,0,0,3,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testDumbCompoundWordsSELongestMatch()",4,0,n/a,14,0,0,3,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testEmptyTerm()",15,0,n/a,6,2,0,12,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testHyphenationCompoundWordsDA()",9,0,n/a,16,0,0,5,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testHyphenationCompoundWordsDELongestMatch()",9,0,n/a,16,0,0,5,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testHyphenationOnly()",17,0,n/a,40,0,0,8,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testInvalidOffsets()",9,0,n/a,4,2,0,9,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testRandomStrings()",15,0,n/a,6,2,0,12,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testReset()",19,0,n/a,20,0,0,12,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testRetainMockAttribute()",8,0,n/a,15,1,0,7,2
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testTokenEndingWithWordComponentOfMinimumLength()",4,0,n/a,18,0,0,3,1
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.testWordComponentWithLessThanMinimumLength()",4,0,n/a,19,0,0,3,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.ByteVector()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.ByteVector(byte[])",0,0,n/a,5,0,1,3,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.ByteVector(byte[],int)",0,0,n/a,9,1,2,5,2
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.ByteVector(int)",0,1,n/a,9,1,1,5,2
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.alloc(int)",1,0,n/a,14,1,1,8,2
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.capacity()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.get(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.getArray()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.length()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.put(int,byte)",0,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.compound.hyphenation.ByteVector.trimToSize()",1,0,n/a,7,1,0,4,2
"org.apache.lucene.analysis.compound.hyphenation.CharVector.CharVector()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.CharVector(char[])",0,0,n/a,5,0,1,3,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.CharVector(char[],int)",0,1,n/a,9,1,2,5,2
"org.apache.lucene.analysis.compound.hyphenation.CharVector.CharVector(int)",0,1,n/a,9,1,1,5,2
"org.apache.lucene.analysis.compound.hyphenation.CharVector.alloc(int)",1,0,n/a,11,1,1,8,2
"org.apache.lucene.analysis.compound.hyphenation.CharVector.capacity()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.clear()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.clone()",2,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.get(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.getArray()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.length()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.put(int,char)",0,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.compound.hyphenation.CharVector.trimToSize()",1,0,n/a,7,1,0,4,2
"org.apache.lucene.analysis.compound.hyphenation.Hyphen.Hyphen(String)",0,0,n/a,5,0,1,3,1
"org.apache.lucene.analysis.compound.hyphenation.Hyphen.Hyphen(String,String,String)",0,0,n/a,5,0,3,3,1
"org.apache.lucene.analysis.compound.hyphenation.Hyphen.toString()",9,0,n/a,15,1,0,10,5
"org.apache.lucene.analysis.compound.hyphenation.Hyphenation.Hyphenation(int[])",0,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.Hyphenation.getHyphenationPoints()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.Hyphenation.length()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationException.HyphenationException(String)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.HyphenationTree()",4,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.addClass(String)",5,0,n/a,21,2,1,9,3
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.addException(String,ArrayList<Object>)",1,0,n/a,12,0,2,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.addPattern(String,String)",4,0,n/a,18,1,2,5,2
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.findPattern(String)",2,0,n/a,7,1,1,4,2
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.getValues(int)",7,2,n/a,20,2,1,17,4
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hstrcmp(char[],int,char[],int)",0,1,n/a,14,2,4,7,4
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(String,int,int)",2,0,n/a,16,0,3,2,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.hyphenate(char[],int,int,int,int)",10,2,n/a,100,4,5,56,17
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(File)",6,2,n/a,15,1,1,4,2
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.loadPatterns(InputSource)",6,2,n/a,18,0,1,7,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.packValues(String)",4,1,n/a,26,2,1,14,4
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.printStats()",4,0,n/a,6,0,0,2,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.searchPatterns(char[],int,byte[])",4,1,n/a,83,6,3,39,18
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree.unpackValues(int)",6,1,n/a,16,2,1,12,3
"org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addClass(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addException(String,ArrayList<Object>)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.analysis.compound.hyphenation.PatternConsumer.addPattern(String,String)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.PatternParser()",5,2,n/a,8,0,0,6,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.PatternParser(PatternConsumer)",1,0,n/a,4,0,1,2,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.addClass(String)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.addException(String,ArrayList<Object>)",2,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.addPattern(String,String)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.characters(char[],int,int)",14,0,n/a,29,2,3,18,5
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.createParser()",6,1,n/a,14,1,0,5,2
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.endElement(String,String,String)",12,0,n/a,36,2,3,21,8
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.getExceptionWord(ArrayList<?>)",6,2,n/a,14,3,1,10,4
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.getInterletterValues(String)",7,2,n/a,15,2,1,12,3
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.getLocationString(SAXParseException)",12,0,n/a,19,2,1,12,3
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.getPattern(String)",7,2,n/a,10,2,1,8,3
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.main(String[])",3,0,n/a,7,1,1,4,2
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.normalizeException(ArrayList<?>)",17,2,n/a,30,4,1,23,6
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(File)",6,3,n/a,15,1,1,4,2
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(InputSource)",6,3,n/a,17,1,1,5,4
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.parse(String)",2,3,n/a,9,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.readToken(StringBuffer)",25,2,n/a,44,2,1,38,10
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.resolveEntity(String,String)",6,0,n/a,15,1,2,3,4
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.setConsumer(PatternConsumer)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.PatternParser.startElement(String,String,String,Attributes)",18,0,n/a,29,2,4,17,9
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Item.Item()",0,1,n/a,4,0,0,2,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Item.Item(char,char)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Item.clone()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Iterator()",3,2,n/a,6,0,0,4,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.getValue()",0,1,n/a,6,1,0,3,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.hasMoreElements()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.nextElement()",3,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.rewind()",3,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.run()",9,2,n/a,43,3,0,25,10
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.up()",14,2,n/a,47,3,0,34,11
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.TernaryTree()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.balance()",6,1,n/a,20,1,0,9,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.clone()",6,0,n/a,13,0,0,10,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.compact(CharVector,TernaryTree,char)",13,4,n/a,21,2,3,14,5
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(String)",3,4,n/a,7,0,1,5,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.find(char[],int)",2,2,n/a,29,3,2,20,7
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.init()",1,2,n/a,10,0,0,8,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(String,char)",4,5,n/a,17,1,2,7,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(char,char[],int,char)",9,5,n/a,70,3,4,42,9
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insert(char[],int,char)",3,1,n/a,7,1,3,4,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.insertBalanced(String[],char[],int,int)",3,3,n/a,15,1,4,7,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.keys()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.knows(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.main(String[])",13,0,n/a,12,0,1,10,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.printStats()",7,1,n/a,12,0,0,3,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.redimNodeArrays(int)",4,3,n/a,16,0,1,13,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.size()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strcmp(String,char[],int)",2,0,n/a,19,2,3,12,5
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strcmp(char[],int,char[],int)",0,1,n/a,11,2,4,5,3
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strcpy(char[],int,char[],int)",0,2,n/a,6,1,4,3,2
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strlen(char[])",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.strlen(char[],int)",0,3,n/a,7,1,2,6,3
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.trimToSize()",7,1,n/a,24,0,0,8,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,File)",3,7,n/a,13,0,2,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,HashSet<?>)",1,7,n/a,12,0,2,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,Set<?>)",1,8,n/a,10,0,2,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,Set<?>,Set<?>)",4,1,n/a,14,0,3,3,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.CzechAnalyzer(Version,String...)",2,0,n/a,12,0,2,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.createComponents(String,Reader)",9,5,n/a,28,1,2,9,3
"org.apache.lucene.analysis.cz.CzechAnalyzer.getDefaultStopSet()",0,2,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cz.CzechAnalyzer.loadStopWords(InputStream,String)",5,0,n/a,26,1,2,8,4
"org.apache.lucene.analysis.cz.CzechStemFilter.CzechStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.cz.CzechStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.cz.CzechStemmer.normalize(char[],int)",2,1,n/a,31,1,2,24,9
"org.apache.lucene.analysis.cz.CzechStemmer.removeCase(char[],int)",41,1,n/a,68,2,2,24,48
"org.apache.lucene.analysis.cz.CzechStemmer.removePossessives(char[],int)",3,1,n/a,8,0,2,3,5
"org.apache.lucene.analysis.cz.CzechStemmer.stem(char[],int)",3,0,n/a,18,1,2,5,2
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.UnreliableInputStream.read()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testInvalidStopWordFile()",4,0,n/a,13,0,0,3,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testReusableTokenStream()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testReusableTokenStreamLegacy()",3,0,n/a,9,0,0,3,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testStopWord()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testStopWordFileReuse()",6,0,n/a,14,0,0,5,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testStopWordLegacy()",2,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.testWithStemExclusionSet()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testAdjectives()",18,0,n/a,25,0,0,18,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testDontStem()",3,0,n/a,8,0,0,3,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testExceptions()",18,0,n/a,31,0,0,18,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testFeminineNouns()",29,0,n/a,39,0,0,29,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testMasculineNouns()",50,0,n/a,61,0,0,50,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testNeuterNouns()",29,0,n/a,38,0,0,29,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testPossessive()",3,0,n/a,8,0,0,3,1
"org.apache.lucene.analysis.cz.TestCzechStemmer.testWithKeywordAttribute()",7,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.da.DanishAnalyzer.DanishAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.da.DanishAnalyzer.DanishAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.da.DanishAnalyzer.DanishAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.da.DanishAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.da.DanishAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.da.TestDanishAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.da.TestDanishAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.da.TestDanishAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.da.TestDanishAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version)",2,0,n/a,9,0,1,1,2
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,File)",3,5,n/a,9,0,2,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,Map<?, ?>)",2,5,n/a,8,0,2,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,Set<?>)",1,5,n/a,11,0,2,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,Set<?>,Set<?>)",3,3,n/a,14,0,3,2,1
"org.apache.lucene.analysis.de.GermanAnalyzer.GermanAnalyzer(Version,String...)",2,0,n/a,8,0,2,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.createComponents(String,Reader)",13,5,n/a,29,1,2,12,3
"org.apache.lucene.analysis.de.GermanAnalyzer.getDefaultStopSet()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.analysis.de.GermanAnalyzer.setStemExclusionTable(File)",3,0,n/a,10,0,1,2,1
"org.apache.lucene.analysis.de.GermanAnalyzer.setStemExclusionTable(Map<?, ?>)",3,0,n/a,9,0,1,2,1
"org.apache.lucene.analysis.de.GermanAnalyzer.setStemExclusionTable(String[])",2,0,n/a,9,0,1,2,1
"org.apache.lucene.analysis.de.GermanLightStemFilter.GermanLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.de.GermanLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.de.GermanLightStemmer.stEnding(char)",0,2,n/a,15,1,1,14,3
"org.apache.lucene.analysis.de.GermanLightStemmer.stem(char[],int)",2,0,n/a,23,1,2,30,6
"org.apache.lucene.analysis.de.GermanLightStemmer.step1(char[],int)",1,1,n/a,16,1,2,14,13
"org.apache.lucene.analysis.de.GermanLightStemmer.step2(char[],int)",1,1,n/a,9,0,2,7,13
"org.apache.lucene.analysis.de.GermanMinimalStemFilter.GermanMinimalStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.de.GermanMinimalStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.de.GermanMinimalStemmer.stem(char[],int)",0,0,n/a,26,1,2,42,20
"org.apache.lucene.analysis.de.GermanNormalizationFilter.GermanNormalizationFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.de.GermanNormalizationFilter.incrementToken()",7,216,n/a,57,3,0,52,15
"org.apache.lucene.analysis.de.GermanStemFilter.GermanStemFilter(TokenStream)",1,2,n/a,8,0,1,1,1
"org.apache.lucene.analysis.de.GermanStemFilter.GermanStemFilter(TokenStream,Set<?>)",1,0,n/a,10,0,2,2,1
"org.apache.lucene.analysis.de.GermanStemFilter.incrementToken()",8,216,n/a,19,2,0,8,7
"org.apache.lucene.analysis.de.GermanStemFilter.setExclusionSet(Set<?>)",0,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.de.GermanStemFilter.setStemmer(GermanStemmer)",0,0,n/a,9,1,1,2,2
"org.apache.lucene.analysis.de.GermanStemmer.isStemmable(String)",3,1,n/a,13,1,1,6,3
"org.apache.lucene.analysis.de.GermanStemmer.optimize(StringBuilder)",13,1,n/a,17,1,1,5,5
"org.apache.lucene.analysis.de.GermanStemmer.removeParticleDenotion(StringBuilder)",5,1,n/a,14,3,1,7,4
"org.apache.lucene.analysis.de.GermanStemmer.resubstitute(StringBuilder)",22,1,n/a,38,2,1,24,9
"org.apache.lucene.analysis.de.GermanStemmer.stem(String)",11,0,n/a,23,0,1,11,2
"org.apache.lucene.analysis.de.GermanStemmer.strip(StringBuilder)",41,2,n/a,43,2,1,17,13
"org.apache.lucene.analysis.de.GermanStemmer.substitute(StringBuilder)",40,1,n/a,72,3,1,41,23
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testExclusionTableBWCompat()",7,0,n/a,8,0,0,5,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testExclusionTableReuse()",4,0,n/a,10,0,0,4,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testGermanSpecials()",6,0,n/a,13,0,0,6,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testReusableTokenStream()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testStemExclusionTable()",4,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testWithKeywordAttribute()",7,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.de.TestGermanAnalyzer.testWithKeywordAttributeAndExclusionTable()",11,0,n/a,12,0,0,8,1
"org.apache.lucene.analysis.de.TestGermanLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.de.TestGermanLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter.testExamples()",8,0,n/a,11,0,0,8,1
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testBasicExamples()",2,0,n/a,7,0,0,2,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testSpecialFolding()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter.testUHeuristic()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanStemFilter.testEmpty()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.de.TestGermanStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.de.TestGermanStemFilter.testStemming()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.el.GreekAnalyzer.GreekAnalyzer(Version)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.GreekAnalyzer(Version,Map<?, ?>)",2,4,n/a,8,0,2,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.GreekAnalyzer(Version,Set<?>)",1,4,n/a,13,0,2,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.GreekAnalyzer(Version,String...)",2,0,n/a,9,0,2,1,1
"org.apache.lucene.analysis.el.GreekAnalyzer.createComponents(String,Reader)",8,5,n/a,22,0,2,8,3
"org.apache.lucene.analysis.el.GreekAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testAcronymBWCompat()",2,0,n/a,10,0,0,2,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testAnalyzer()",4,0,n/a,21,0,0,4,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testAnalyzerBWCompat()",4,0,n/a,22,0,0,4,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.el.GreekAnalyzerTest.testReusableTokenStream()",4,0,n/a,16,0,0,4,1
"org.apache.lucene.analysis.el.GreekLowerCaseFilter.GreekLowerCaseFilter(TokenStream)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.analysis.el.GreekLowerCaseFilter.GreekLowerCaseFilter(Version,TokenStream)",2,3,n/a,11,0,2,2,1
"org.apache.lucene.analysis.el.GreekLowerCaseFilter.incrementToken()",6,216,n/a,14,2,0,8,3
"org.apache.lucene.analysis.el.GreekLowerCaseFilter.lowerCase(int)",1,1,n/a,49,1,1,34,11
"org.apache.lucene.analysis.el.GreekStemFilter.GreekStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.el.GreekStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.el.GreekStemmer.endsWith(char[],int,String)",2,288,n/a,9,0,3,9,4
"org.apache.lucene.analysis.el.GreekStemmer.endsWithVowel(char[],int)",0,5,n/a,16,1,2,13,4
"org.apache.lucene.analysis.el.GreekStemmer.endsWithVowelNoY(char[],int)",0,2,n/a,15,1,2,12,4
"org.apache.lucene.analysis.el.GreekStemmer.rule0(char[],int)",39,1,n/a,57,0,2,31,55
"org.apache.lucene.analysis.el.GreekStemmer.rule1(char[],int)",12,1,n/a,17,1,2,5,14
"org.apache.lucene.analysis.el.GreekStemmer.rule10(char[],int)",4,1,n/a,14,2,2,9,7
"org.apache.lucene.analysis.el.GreekStemmer.rule11(char[],int)",4,1,n/a,19,2,2,14,9
"org.apache.lucene.analysis.el.GreekStemmer.rule12(char[],int)",4,1,n/a,13,1,2,9,7
"org.apache.lucene.analysis.el.GreekStemmer.rule13(char[],int)",13,1,n/a,25,1,2,14,19
"org.apache.lucene.analysis.el.GreekStemmer.rule14(char[],int)",17,1,n/a,27,1,2,10,21
"org.apache.lucene.analysis.el.GreekStemmer.rule15(char[],int)",16,1,n/a,28,1,2,13,20
"org.apache.lucene.analysis.el.GreekStemmer.rule16(char[],int)",4,1,n/a,13,1,2,10,8
"org.apache.lucene.analysis.el.GreekStemmer.rule17(char[],int)",2,1,n/a,8,1,2,5,4
"org.apache.lucene.analysis.el.GreekStemmer.rule18(char[],int)",4,1,n/a,17,1,2,13,8
"org.apache.lucene.analysis.el.GreekStemmer.rule19(char[],int)",4,1,n/a,17,1,2,13,8
"org.apache.lucene.analysis.el.GreekStemmer.rule2(char[],int)",10,1,n/a,15,1,2,5,12
"org.apache.lucene.analysis.el.GreekStemmer.rule20(char[],int)",3,1,n/a,7,0,2,5,6
"org.apache.lucene.analysis.el.GreekStemmer.rule21(char[],int)",78,1,n/a,90,0,2,19,88
"org.apache.lucene.analysis.el.GreekStemmer.rule22(char[],int)",8,1,n/a,13,0,2,5,9
"org.apache.lucene.analysis.el.GreekStemmer.rule3(char[],int)",17,1,n/a,22,1,2,5,19
"org.apache.lucene.analysis.el.GreekStemmer.rule4(char[],int)",3,1,n/a,8,1,2,5,5
"org.apache.lucene.analysis.el.GreekStemmer.rule5(char[],int)",5,1,n/a,12,1,2,9,8
"org.apache.lucene.analysis.el.GreekStemmer.rule6(char[],int)",6,1,n/a,15,1,2,11,10
"org.apache.lucene.analysis.el.GreekStemmer.rule7(char[],int)",8,1,n/a,18,1,2,13,14
"org.apache.lucene.analysis.el.GreekStemmer.rule8(char[],int)",15,1,n/a,38,2,2,24,22
"org.apache.lucene.analysis.el.GreekStemmer.rule9(char[],int)",35,1,n/a,43,2,2,7,38
"org.apache.lucene.analysis.el.GreekStemmer.stem(char[],int)",23,0,n/a,31,0,2,27,3
"org.apache.lucene.analysis.el.TestGreekStemmer.testAdjectives()",31,0,n/a,38,0,0,31,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testExceptions()",12,0,n/a,14,0,0,12,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testFeminineNouns()",36,0,n/a,47,0,0,36,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testMasculineNouns()",67,0,n/a,87,0,0,67,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testNeuterNouns()",57,0,n/a,78,0,0,57,1
"org.apache.lucene.analysis.el.TestGreekStemmer.testVerbs()",139,0,n/a,152,0,0,139,1
"org.apache.lucene.analysis.en.EnglishAnalyzer.EnglishAnalyzer(Version)",1,2,n/a,6,0,1,1,1
"org.apache.lucene.analysis.en.EnglishAnalyzer.EnglishAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.en.EnglishAnalyzer.EnglishAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.en.EnglishAnalyzer.createComponents(String,Reader)",10,5,n/a,27,0,2,10,3
"org.apache.lucene.analysis.en.EnglishAnalyzer.getDefaultStopSet()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.analysis.en.EnglishMinimalStemFilter.EnglishMinimalStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.en.EnglishMinimalStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.en.EnglishMinimalStemmer.stem(char[],int)",0,0,n/a,17,2,2,14,14
"org.apache.lucene.analysis.en.EnglishPossessiveFilter.EnglishPossessiveFilter(TokenStream)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.analysis.en.EnglishPossessiveFilter.EnglishPossessiveFilter(Version,TokenStream)",1,3,n/a,4,0,2,2,1
"org.apache.lucene.analysis.en.EnglishPossessiveFilter.incrementToken()",5,216,n/a,15,1,0,7,9
"org.apache.lucene.analysis.en.KStemData1.KStemData1()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.en.KStemData2.KStemData2()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.en.KStemData3.KStemData3()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.en.KStemData4.KStemData4()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.en.KStemData5.KStemData5()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.en.KStemData6.KStemData6()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.en.KStemData7.KStemData7()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.en.KStemData8.KStemData8()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.en.KStemFilter.KStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.en.KStemFilter.incrementToken()",8,216,n/a,15,1,0,7,4
"org.apache.lucene.analysis.en.KStemmer.DictEntry.DictEntry(String,boolean)",0,4,n/a,4,0,2,2,1
"org.apache.lucene.analysis.en.KStemmer.KStemmer()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.analysis.en.KStemmer.alEndings()",32,1,n/a,58,2,0,51,15
"org.apache.lucene.analysis.en.KStemmer.asCharSequence()",0,0,n/a,3,0,0,1,2
"org.apache.lucene.analysis.en.KStemmer.asString()",2,1,n/a,8,0,0,4,2
"org.apache.lucene.analysis.en.KStemmer.aspect()",19,1,n/a,63,2,0,31,12
"org.apache.lucene.analysis.en.KStemmer.bleEndings()",20,1,n/a,34,2,0,32,9
"org.apache.lucene.analysis.en.KStemmer.doubleC(int)",3,6,n/a,6,0,1,5,3
"org.apache.lucene.analysis.en.KStemmer.endsIn(char,char)",2,7,n/a,9,1,2,6,4
"org.apache.lucene.analysis.en.KStemmer.endsIn(char,char,char)",3,12,n/a,9,1,3,6,5
"org.apache.lucene.analysis.en.KStemmer.endsIn(char,char,char,char)",4,3,n/a,9,1,4,6,6
"org.apache.lucene.analysis.en.KStemmer.endsIn(char[])",2,4,n/a,10,1,1,11,4
"org.apache.lucene.analysis.en.KStemmer.erAndOrEndings()",31,1,n/a,56,2,0,47,14
"org.apache.lucene.analysis.en.KStemmer.finalChar()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.en.KStemmer.getChars()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.en.KStemmer.getLength()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.en.KStemmer.getString()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.en.KStemmer.icEndings()",12,1,n/a,26,1,0,21,6
"org.apache.lucene.analysis.en.KStemmer.initializeDictHash()",45,1,n/a,124,2,0,95,27
"org.apache.lucene.analysis.en.KStemmer.ionEndings()",35,1,n/a,99,1,0,60,14
"org.apache.lucene.analysis.en.KStemmer.isAlpha(char)",0,1,n/a,3,0,1,1,2
"org.apache.lucene.analysis.en.KStemmer.isCons(int)",2,5,n/a,7,0,1,7,8
"org.apache.lucene.analysis.en.KStemmer.isVowel(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.en.KStemmer.ismEndings()",3,1,n/a,12,1,0,5,2
"org.apache.lucene.analysis.en.KStemmer.ityEndings()",23,1,n/a,58,2,0,35,14
"org.apache.lucene.analysis.en.KStemmer.iveEndings()",20,1,n/a,36,2,0,31,10
"org.apache.lucene.analysis.en.KStemmer.izeEndings()",14,1,n/a,25,2,0,22,6
"org.apache.lucene.analysis.en.KStemmer.lookup()",3,70,n/a,13,0,0,2,1
"org.apache.lucene.analysis.en.KStemmer.lyEndings()",19,1,n/a,55,2,0,30,12
"org.apache.lucene.analysis.en.KStemmer.matched()",0,17,n/a,9,0,0,1,1
"org.apache.lucene.analysis.en.KStemmer.mentEndings()",4,1,n/a,13,1,0,9,3
"org.apache.lucene.analysis.en.KStemmer.nceEndings()",9,1,n/a,24,1,0,19,6
"org.apache.lucene.analysis.en.KStemmer.ncyEndings()",9,1,n/a,15,1,0,13,5
"org.apache.lucene.analysis.en.KStemmer.nessEndings()",5,1,n/a,13,1,0,7,3
"org.apache.lucene.analysis.en.KStemmer.pastTense()",25,1,n/a,69,2,0,41,13
"org.apache.lucene.analysis.en.KStemmer.penultChar()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.en.KStemmer.plural()",21,1,n/a,50,3,0,29,14
"org.apache.lucene.analysis.en.KStemmer.setSuff(String,int)",3,1,n/a,8,1,2,6,2
"org.apache.lucene.analysis.en.KStemmer.setSuffix(String)",2,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.en.KStemmer.stem(String)",4,0,n/a,5,0,1,4,2
"org.apache.lucene.analysis.en.KStemmer.stem(char[],int)",40,1,n/a,109,2,2,77,25
"org.apache.lucene.analysis.en.KStemmer.stemLength()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.analysis.en.KStemmer.vowelInStem()",2,2,n/a,6,1,0,6,3
"org.apache.lucene.analysis.en.KStemmer.wordInDict()",3,3,n/a,15,1,0,6,4
"org.apache.lucene.analysis.en.TestEnglishAnalyzer.testBasics()",7,0,n/a,13,0,0,7,1
"org.apache.lucene.analysis.en.TestEnglishAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.en.TestEnglishAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.en.TestEnglishAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.en.TestEnglishMinimalStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.en.TestEnglishMinimalStemFilter.testExamples()",9,0,n/a,12,0,0,9,1
"org.apache.lucene.analysis.en.TestEnglishMinimalStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.en.TestKStemmer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.en.TestKStemmer.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.en.TestKStemmer.testVocabulary()",2,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.es.SpanishAnalyzer.SpanishAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.es.SpanishAnalyzer.SpanishAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.es.SpanishAnalyzer.SpanishAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.es.SpanishAnalyzer.createComponents(String,Reader)",11,5,n/a,28,1,2,10,3
"org.apache.lucene.analysis.es.SpanishAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.es.SpanishLightStemFilter.SpanishLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.es.SpanishLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.es.SpanishLightStemmer.stem(char[],int)",0,0,n/a,42,2,2,50,18
"org.apache.lucene.analysis.es.TestSpanishAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.es.TestSpanishAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.es.TestSpanishAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.es.TestSpanishAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.es.TestSpanishLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.es.TestSpanishLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.es.TestSpanishLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.eu.BasqueAnalyzer.BasqueAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.eu.BasqueAnalyzer.BasqueAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.eu.BasqueAnalyzer.BasqueAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.eu.BasqueAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.eu.BasqueAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version,File)",3,5,n/a,11,0,2,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version,Hashtable<?, ?>)",2,5,n/a,8,0,2,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version,Set<?>)",1,5,n/a,11,0,2,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.PersianAnalyzer(Version,String...)",2,0,n/a,8,0,2,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.createComponents(String,Reader)",8,5,n/a,29,1,2,8,2
"org.apache.lucene.analysis.fa.PersianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.fa.PersianAnalyzer.initReader(Reader)",3,2,n/a,9,0,1,1,2
"org.apache.lucene.analysis.fa.PersianCharFilter.PersianCharFilter(CharStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.fa.PersianCharFilter.read(char[],int,int)",1,1,n/a,13,2,3,8,4
"org.apache.lucene.analysis.fa.PersianNormalizationFilter.PersianNormalizationFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.fa.PersianNormalizationFilter.incrementToken()",5,216,n/a,10,1,0,5,2
"org.apache.lucene.analysis.fa.PersianNormalizer.normalize(char[],int)",1,0,n/a,31,2,2,22,7
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testBehaviorNonPersian()",2,0,n/a,8,0,0,2,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testBehaviorNouns()",3,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testBehaviorVerbs()",31,0,n/a,70,0,0,31,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testBehaviorVerbsDefective()",31,0,n/a,73,0,0,31,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testCustomStopwords()",4,0,n/a,9,0,0,2,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testResourcesAvailable()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.fa.TestPersianAnalyzer.testReusableTokenStream()",3,0,n/a,8,0,0,3,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.check(String,String)",4,6,n/a,7,0,2,3,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testFarsiYeh()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testHehGoal()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testHehHamzaAbove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testHehYeh()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testKeheh()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter.testYehBarree()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.fi.FinnishAnalyzer.FinnishAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.fi.FinnishAnalyzer.FinnishAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.fi.FinnishAnalyzer.FinnishAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.fi.FinnishAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.fi.FinnishAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.fi.FinnishLightStemFilter.FinnishLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.fi.FinnishLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.fi.FinnishLightStemmer.isVowel(char)",0,2,n/a,11,1,1,10,3
"org.apache.lucene.analysis.fi.FinnishLightStemmer.norm1(char[],int)",3,1,n/a,21,1,2,17,8
"org.apache.lucene.analysis.fi.FinnishLightStemmer.norm2(char[],int)",1,1,n/a,23,3,2,15,13
"org.apache.lucene.analysis.fi.FinnishLightStemmer.stem(char[],int)",5,0,n/a,16,1,2,19,5
"org.apache.lucene.analysis.fi.FinnishLightStemmer.step1(char[],int)",6,3,n/a,15,1,2,11,7
"org.apache.lucene.analysis.fi.FinnishLightStemmer.step2(char[],int)",5,1,n/a,13,1,2,8,7
"org.apache.lucene.analysis.fi.FinnishLightStemmer.step3(char[],int)",25,1,n/a,61,2,2,39,35
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.fi.TestFinnishLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.fi.TestFinnishLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.fi.TestFinnishLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(TokenStream)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(TokenStream,Set<?>)",1,0,n/a,8,0,2,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(TokenStream,String[])",3,0,n/a,10,0,2,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(Version,TokenStream)",1,2,n/a,6,0,2,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.ElisionFilter(Version,TokenStream,Set<?>)",3,9,n/a,11,0,3,2,1
"org.apache.lucene.analysis.fr.ElisionFilter.incrementToken()",9,216,n/a,29,4,0,18,7
"org.apache.lucene.analysis.fr.ElisionFilter.setArticles(Set<?>)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.fr.ElisionFilter.setArticles(Version,Set<?>)",2,2,n/a,11,0,2,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version)",2,0,n/a,8,0,1,1,2
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version,File)",3,4,n/a,10,0,2,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version,Set<?>)",1,4,n/a,11,0,2,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version,Set<?>,Set<?>)",3,3,n/a,16,0,3,2,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.FrenchAnalyzer(Version,String...)",2,0,n/a,8,0,2,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.createComponents(String,Reader)",21,5,n/a,40,2,2,19,5
"org.apache.lucene.analysis.fr.FrenchAnalyzer.getDefaultStopSet()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.setStemExclusionTable(File)",3,0,n/a,11,0,1,2,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.setStemExclusionTable(Map<?, ?>)",3,0,n/a,9,0,1,2,1
"org.apache.lucene.analysis.fr.FrenchAnalyzer.setStemExclusionTable(String...)",2,0,n/a,9,0,1,2,1
"org.apache.lucene.analysis.fr.FrenchLightStemFilter.FrenchLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.fr.FrenchLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.fr.FrenchLightStemmer.norm(char[],int)",2,25,n/a,34,2,2,47,18
"org.apache.lucene.analysis.fr.FrenchLightStemmer.stem(char[],int)",55,0,n/a,133,2,2,109,69
"org.apache.lucene.analysis.fr.FrenchMinimalStemFilter.FrenchMinimalStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.fr.FrenchMinimalStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.fr.FrenchMinimalStemmer.stem(char[],int)",0,0,n/a,15,1,2,17,10
"org.apache.lucene.analysis.fr.FrenchStemFilter.FrenchStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.fr.FrenchStemFilter.FrenchStemFilter(TokenStream,Set<?>)",1,0,n/a,11,0,2,2,1
"org.apache.lucene.analysis.fr.FrenchStemFilter.incrementToken()",8,216,n/a,19,2,0,8,7
"org.apache.lucene.analysis.fr.FrenchStemFilter.setExclusionTable(Map<?, ?>)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.fr.FrenchStemFilter.setStemmer(FrenchStemmer)",0,0,n/a,8,1,1,2,2
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteButSuffixFrom(String,String[],String,boolean)",13,6,n/a,29,3,4,14,6
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteButSuffixFromElseReplace(String,String[],String,boolean,String,String)",20,7,n/a,38,3,6,19,8
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteFrom(String,String[])",6,6,n/a,20,3,2,9,4
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteFromIfPrecededIn(String,String[],String,String)",7,3,n/a,28,4,4,12,6
"org.apache.lucene.analysis.fr.FrenchStemmer.deleteFromIfTestVowelBeforeIn(String,String[],boolean,String)",12,3,n/a,33,5,4,15,7
"org.apache.lucene.analysis.fr.FrenchStemmer.isStemmable(String)",5,1,n/a,33,3,1,15,6
"org.apache.lucene.analysis.fr.FrenchStemmer.isVowel(char)",0,15,n/a,32,1,1,22,3
"org.apache.lucene.analysis.fr.FrenchStemmer.replaceFrom(String,String[],String)",6,8,n/a,24,3,3,12,4
"org.apache.lucene.analysis.fr.FrenchStemmer.retrieveR(StringBuilder)",6,2,n/a,35,3,1,20,8
"org.apache.lucene.analysis.fr.FrenchStemmer.retrieveRV(StringBuilder)",10,1,n/a,34,4,1,15,7
"org.apache.lucene.analysis.fr.FrenchStemmer.setStrings()",7,14,n/a,18,1,0,8,2
"org.apache.lucene.analysis.fr.FrenchStemmer.stem(String)",15,0,n/a,38,2,1,21,8
"org.apache.lucene.analysis.fr.FrenchStemmer.step1()",24,1,n/a,41,0,0,34,4
"org.apache.lucene.analysis.fr.FrenchStemmer.step2a()",1,1,n/a,16,0,0,2,1
"org.apache.lucene.analysis.fr.FrenchStemmer.step2b()",3,1,n/a,16,0,0,5,1
"org.apache.lucene.analysis.fr.FrenchStemmer.step3()",9,1,n/a,20,2,0,8,4
"org.apache.lucene.analysis.fr.FrenchStemmer.step4()",14,1,n/a,25,3,0,13,10
"org.apache.lucene.analysis.fr.FrenchStemmer.step5()",9,1,n/a,14,2,0,4,7
"org.apache.lucene.analysis.fr.FrenchStemmer.step6()",5,1,n/a,37,5,0,19,12
"org.apache.lucene.analysis.fr.FrenchStemmer.treatVowels(StringBuilder)",29,1,n/a,49,3,1,25,21
"org.apache.lucene.analysis.fr.TestElision.filter(TokenFilter)",5,1,n/a,8,1,1,5,2
"org.apache.lucene.analysis.fr.TestElision.testElision()",12,0,n/a,10,0,0,8,1
"org.apache.lucene.analysis.fr.TestElision.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testAccentInsensitive()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testAnalyzer()",13,0,n/a,69,0,0,13,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testAnalyzer30()",13,0,n/a,73,0,0,13,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testBuggyStopwordsCasing()",2,0,n/a,10,0,0,2,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testElision()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testExclusionTableReuse()",4,0,n/a,10,0,0,4,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testExclusionTableViaCtor()",6,0,n/a,11,0,0,6,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testReusableTokenStream()",3,0,n/a,19,0,0,3,1
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer.testStopwordsCasing()",2,0,n/a,7,0,0,2,1
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter.testExamples()",70,0,n/a,77,0,0,70,1
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter.testExamples()",8,0,n/a,11,0,0,8,1
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ga.IrishAnalyzer.IrishAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ga.IrishAnalyzer.IrishAnalyzer(Version,CharArraySet)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.ga.IrishAnalyzer.IrishAnalyzer(Version,CharArraySet,CharArraySet)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.ga.IrishAnalyzer.createComponents(String,Reader)",12,5,n/a,28,0,2,12,2
"org.apache.lucene.analysis.ga.IrishAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ga.IrishLowerCaseFilter.IrishLowerCaseFilter(TokenStream)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ga.IrishLowerCaseFilter.incrementToken()",8,216,n/a,24,3,0,19,8
"org.apache.lucene.analysis.ga.IrishLowerCaseFilter.isUpperVowel(int)",0,1,n/a,18,1,1,14,3
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testContractions()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testHyphens()",2,0,n/a,7,0,0,2,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ga.TestIrishAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ga.TestIrishLowerCaseFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.ga.TestIrishLowerCaseFilter.testIrishLowerCaseFilter()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.gl.GalicianAnalyzer.GalicianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.gl.GalicianAnalyzer.GalicianAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.gl.GalicianAnalyzer.GalicianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.gl.GalicianAnalyzer.createComponents(String,Reader)",8,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.gl.GalicianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.gl.GalicianMinimalStemFilter.GalicianMinimalStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.gl.GalicianMinimalStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.gl.GalicianMinimalStemmer.stem(char[],int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.gl.GalicianStemFilter.GalicianStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.gl.GalicianStemFilter.incrementToken()",6,216,n/a,14,2,0,7,3
"org.apache.lucene.analysis.gl.GalicianStemmer.stem(char[],int)",7,0,n/a,33,1,2,34,9
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter.testExceptions()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter.testPlural()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.gl.TestGalicianStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.gl.TestGalicianStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.hi.HindiAnalyzer.HindiAnalyzer(Version)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.hi.HindiAnalyzer.HindiAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.hi.HindiAnalyzer.HindiAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,12,0,3,2,1
"org.apache.lucene.analysis.hi.HindiAnalyzer.createComponents(String,Reader)",11,5,n/a,30,1,2,12,3
"org.apache.lucene.analysis.hi.HindiAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.hi.HindiNormalizationFilter.HindiNormalizationFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.hi.HindiNormalizationFilter.incrementToken()",6,216,n/a,10,1,0,5,3
"org.apache.lucene.analysis.hi.HindiNormalizer.normalize(char[],int)",4,0,n/a,137,3,2,119,39
"org.apache.lucene.analysis.hi.HindiStemFilter.HindiStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.hi.HindiStemFilter.incrementToken()",6,216,n/a,10,1,0,5,3
"org.apache.lucene.analysis.hi.HindiStemmer.stem(char[],int)",67,0,n/a,85,0,2,11,73
"org.apache.lucene.analysis.hi.TestHindiAnalyzer.testBasics()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.hi.TestHindiAnalyzer.testExclusionSet()",5,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.hi.TestHindiAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.hi.TestHindiAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.hi.TestHindiNormalizer.check(String,String)",4,16,n/a,5,0,2,3,1
"org.apache.lucene.analysis.hi.TestHindiNormalizer.testBasics()",8,0,n/a,13,0,0,8,1
"org.apache.lucene.analysis.hi.TestHindiNormalizer.testDecompositions()",8,0,n/a,15,0,0,8,1
"org.apache.lucene.analysis.hi.TestHindiNormalizer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.check(String,String)",4,21,n/a,5,0,2,3,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testExceptions()",2,0,n/a,9,0,0,2,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testFeminineNouns()",8,0,n/a,13,0,0,8,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testMasculineNouns()",7,0,n/a,12,0,0,7,1
"org.apache.lucene.analysis.hi.TestHindiStemmer.testVerbs()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.hu.HungarianAnalyzer.HungarianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.hu.HungarianAnalyzer.HungarianAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.hu.HungarianAnalyzer.HungarianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.hu.HungarianAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.hu.HungarianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.hu.HungarianLightStemFilter.HungarianLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.hu.HungarianLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.hu.HungarianLightStemmer.isVowel(char)",0,10,n/a,11,1,1,10,3
"org.apache.lucene.analysis.hu.HungarianLightStemmer.normalize(char[],int)",0,1,n/a,10,1,2,8,3
"org.apache.lucene.analysis.hu.HungarianLightStemmer.removeCase(char[],int)",33,1,n/a,48,2,2,22,41
"org.apache.lucene.analysis.hu.HungarianLightStemmer.removePlural(char[],int)",0,1,n/a,11,1,2,10,6
"org.apache.lucene.analysis.hu.HungarianLightStemmer.removePossessive(char[],int)",30,1,n/a,51,1,2,34,38
"org.apache.lucene.analysis.hu.HungarianLightStemmer.stem(char[],int)",4,0,n/a,22,1,2,31,7
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.hu.TestHungarianLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.hu.TestHungarianLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.checkCondition(CharSequence)",2,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getAppend()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getAppendFlags()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getCondition()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getFlag()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.getStrip()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.isCrossProduct()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setAppend(String)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setAppendFlags(char[])",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setCondition(String,String)",1,0,n/a,10,0,2,2,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setCrossProduct(boolean)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setFlag(char)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellAffix.setStrip(String)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.DoubleASCIIFlagParsingStrategy.parseFlags(String)",9,3,n/a,16,1,1,11,3
"org.apache.lucene.analysis.hunspell.HunspellDictionary.FlagParsingStrategy.parseFlag(String)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.FlagParsingStrategy.parseFlags(String)",n/a,3,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.hunspell.HunspellDictionary.HunspellDictionary(InputStream,InputStream,Version)",2,0,n/a,13,0,3,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.HunspellDictionary(InputStream,InputStream,Version,boolean)",2,0,n/a,14,0,4,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.HunspellDictionary(InputStream,List<InputStream>,Version,boolean)",5,0,n/a,22,1,4,8,2
"org.apache.lucene.analysis.hunspell.HunspellDictionary.NumFlagParsingStrategy.parseFlags(String)",4,3,n/a,12,1,1,7,2
"org.apache.lucene.analysis.hunspell.HunspellDictionary.SimpleFlagParsingStrategy.parseFlags(String)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.getDictionaryEncoding(InputStream)",15,1,n/a,39,3,1,16,10
"org.apache.lucene.analysis.hunspell.HunspellDictionary.getFlagParsingStrategy(String)",8,1,n/a,17,1,1,8,4
"org.apache.lucene.analysis.hunspell.HunspellDictionary.getJavaEncoding(String)",2,1,n/a,11,0,1,2,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.getVersion()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.isIgnoreCase()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.lookupPrefix(char[],int,int)",1,0,n/a,11,0,3,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.lookupSuffix(char[],int,int)",1,0,n/a,11,0,3,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.lookupWord(char[],int,int)",1,0,n/a,11,0,3,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.parseAffix(CharArrayMap<List<HunspellAffix>>,String,BufferedReader,String)",27,2,n/a,44,2,4,27,5
"org.apache.lucene.analysis.hunspell.HunspellDictionary.readAffixFile(InputStream,CharsetDecoder)",12,1,n/a,25,2,2,12,5
"org.apache.lucene.analysis.hunspell.HunspellDictionary.readDictionaryFile(InputStream,CharsetDecoder)",19,1,n/a,42,3,2,23,6
"org.apache.lucene.analysis.hunspell.HunspellDictionaryTest.testHunspellDictionary_loadDicAff()",16,0,n/a,11,0,0,8,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilter.HunspellStemFilter(TokenStream,HunspellDictionary)",1,1,n/a,10,0,2,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilter.HunspellStemFilter(TokenStream,HunspellDictionary,boolean)",2,1,n/a,13,0,3,3,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilter.incrementToken()",26,216,n/a,31,1,0,20,8
"org.apache.lucene.analysis.hunspell.HunspellStemFilter.reset()",1,118,n/a,8,0,0,2,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.beforeClass()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.createDict(boolean)",3,1,n/a,5,0,1,3,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.testKeywordAttribute()",12,0,n/a,14,0,0,8,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest.testRandomStrings()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.HunspellStemmer(HunspellDictionary)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.Stem(char[],int)",0,3,n/a,9,0,2,2,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.addPrefix(HunspellAffix)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.addSuffix(HunspellAffix)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getPrefixes()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getStem()",0,4,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getStemLength()",0,4,n/a,6,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getStemString()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem.getSuffixes()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.applyAffix(char[],int,HunspellAffix,int)",17,2,n/a,35,3,4,17,9
"org.apache.lucene.analysis.hunspell.HunspellStemmer.hasCrossCheckedFlag(char,char[])",1,2,n/a,10,0,2,1,2
"org.apache.lucene.analysis.hunspell.HunspellStemmer.hasText(String)",1,2,n/a,9,0,1,1,2
"org.apache.lucene.analysis.hunspell.HunspellStemmer.main(String[])",20,0,n/a,36,2,1,23,5
"org.apache.lucene.analysis.hunspell.HunspellStemmer.printStemResults(String,List<Stem>)",31,1,n/a,27,3,2,14,6
"org.apache.lucene.analysis.hunspell.HunspellStemmer.stem(String)",3,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmer.stem(char[],int)",6,2,n/a,14,1,2,5,2
"org.apache.lucene.analysis.hunspell.HunspellStemmer.stem(char[],int,char[],int)",31,3,n/a,50,4,4,31,11
"org.apache.lucene.analysis.hunspell.HunspellStemmer.uniqueStems(char[],int)",12,0,n/a,22,2,2,11,4
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.beforeClass()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.createStemmer(boolean)",6,3,n/a,8,0,1,6,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_caseSensitive()",10,0,n/a,9,0,0,6,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_ignoreCase()",43,0,n/a,26,0,0,23,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_recursiveSuffix()",6,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_simplePrefix()",6,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest.testStem_simpleSuffix()",15,0,n/a,10,0,0,7,1
"org.apache.lucene.analysis.hunspell.HunspellWord.HunspellWord()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellWord.HunspellWord(char[])",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.hunspell.HunspellWord.getFlags()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.hunspell.HunspellWord.hasFlag(char)",1,0,n/a,9,0,1,1,2
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.ArmenianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.ArmenianAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.ArmenianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.GenerateHTMLStripCharFilterSupplementaryMacros.main(String[])",3,0,n/a,5,0,1,3,1
"org.apache.lucene.analysis.icu.GenerateHTMLStripCharFilterSupplementaryMacros.outputHeader()",9,1,n/a,7,0,0,5,1
"org.apache.lucene.analysis.icu.GenerateHTMLStripCharFilterSupplementaryMacros.outputMacro(String,String)",29,2,n/a,38,2,2,28,8
"org.apache.lucene.analysis.icu.GenerateJFlexSupplementaryMacros.main(String[])",14,0,n/a,16,0,1,14,1
"org.apache.lucene.analysis.icu.GenerateJFlexSupplementaryMacros.outputHeader()",9,1,n/a,7,0,0,5,1
"org.apache.lucene.analysis.icu.GenerateJFlexSupplementaryMacros.outputMacro(String,String)",20,13,n/a,29,2,2,21,6
"org.apache.lucene.analysis.icu.ICUFoldingFilter.ICUFoldingFilter(TokenStream)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.icu.ICUNormalizer2Filter.ICUNormalizer2Filter(TokenStream)",2,1,n/a,7,0,1,1,1
"org.apache.lucene.analysis.icu.ICUNormalizer2Filter.ICUNormalizer2Filter(TokenStream,Normalizer2)",1,1,n/a,9,0,2,2,1
"org.apache.lucene.analysis.icu.ICUNormalizer2Filter.incrementToken()",6,216,n/a,13,2,0,7,3
"org.apache.lucene.analysis.icu.ICUTransformFilter.ICUTransformFilter(TokenStream,Transliterator)",5,0,n/a,19,1,2,6,5
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.char32At(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.charAt(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.copy(int,int,int)",2,0,n/a,5,0,3,3,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.getChars(int,int,char[],int)",1,1,n/a,3,0,4,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.hasMetaData()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.length()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.replace(int,int,String)",4,0,n/a,7,0,3,4,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.replace(int,int,char[],int,int)",3,1,n/a,8,0,5,3,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.setText(CharTermAttribute)",2,1,n/a,5,0,1,3,1
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute.shiftForReplace(int,int,int)",2,2,n/a,13,0,3,7,4
"org.apache.lucene.analysis.icu.ICUTransformFilter.incrementToken()",4,216,n/a,18,1,0,10,2
"org.apache.lucene.analysis.icu.RBBIRuleCompiler.compile(File,File)",20,1,n/a,3,2,2,19,4
"org.apache.lucene.analysis.icu.RBBIRuleCompiler.getRules(File)",11,1,n/a,14,1,1,11,3
"org.apache.lucene.analysis.icu.RBBIRuleCompiler.main(String[])",6,0,n/a,8,1,1,5,2
"org.apache.lucene.analysis.icu.TestICUFoldingFilter.testDefaults()",13,0,n/a,28,0,0,13,1
"org.apache.lucene.analysis.icu.TestICUFoldingFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.icu.TestICUFoldingFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter.testAlternate()",6,0,n/a,8,2,0,4,1
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter.testDefaults()",7,0,n/a,15,0,0,7,1
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.checkToken(Transliterator,String,String)",4,9,n/a,4,0,3,2,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testBasicFunctionality()",12,0,n/a,14,0,0,6,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testCustomFunctionality()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testCustomFunctionality2()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testEmptyTerm()",6,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testOptimizer()",10,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testOptimizer2()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testOptimizerSurrogate()",10,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.icu.TestICUTransformFilter.testRandomStrings()",6,0,n/a,5,2,0,5,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.BIWrapper(BreakIterator)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.calcStatus(int,int)",4,1,n/a,18,2,2,14,6
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.current()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.getRuleStatus()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.next()",3,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper.setText(CharacterIterator)",1,1,n/a,5,0,1,2,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.RBBIWrapper(RuleBasedBreakIterator)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.current()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.getRuleStatus()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.next()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper.setText(CharacterIterator)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.current()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.getRuleStatus()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.next()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.setText(CharacterIterator)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.setText(char[],int,int)",2,0,n/a,7,0,3,5,1
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.wrap(BreakIterator)",2,0,n/a,14,0,1,3,3
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.clone()",2,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.current()",0,5,n/a,3,0,0,1,2
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.first()",1,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getBeginIndex()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getEndIndex()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getIndex()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getLength()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getStart()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.getText()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.last()",1,0,n/a,4,0,0,2,2
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.next()",1,0,n/a,8,1,0,4,2
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.previous()",1,0,n/a,8,1,0,4,2
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.setIndex(int)",4,0,n/a,6,0,1,4,3
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator.setText(char[],int,int)",0,1,n/a,14,0,3,5,1
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.CompositeBreakIterator(ICUTokenizerConfig)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.current()",2,0,n/a,10,0,0,2,2
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.getBreakIterator(int)",2,3,n/a,5,0,1,3,2
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.getRuleStatus()",1,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.getScriptCode()",1,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.next()",10,0,n/a,17,1,0,6,4
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator.setText(char[],int,int)",10,0,n/a,19,1,3,7,2
"org.apache.lucene.analysis.icu.segmentation.DefaultICUTokenizerConfig.getBreakIterator(int)",6,0,n/a,11,1,1,13,7
"org.apache.lucene.analysis.icu.segmentation.DefaultICUTokenizerConfig.getType(int,int)",0,0,n/a,15,1,2,11,8
"org.apache.lucene.analysis.icu.segmentation.DefaultICUTokenizerConfig.readBreakIterator(String)",4,5,n/a,12,1,1,6,2
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.ICUTokenizer(Reader)",2,0,n/a,12,0,1,1,1
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.ICUTokenizer(Reader,ICUTokenizerConfig)",2,1,n/a,12,0,2,3,1
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.end()",3,39,n/a,5,0,0,2,2
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.findSafeEnd()",1,1,n/a,11,0,0,6,3
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.incrementToken()",4,216,n/a,12,1,0,8,4
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.incrementTokenBuffer()",14,1,n/a,22,1,0,14,5
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.read(Reader,char[],int,int)",1,1,n/a,14,2,4,9,3
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.refill()",5,2,n/a,25,1,0,12,3
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.reset()",2,93,n/a,6,0,0,3,1
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizerConfig.getBreakIterator(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizerConfig.getType(int,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.LaoBreakIterator(RuleBasedBreakIterator)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.ccReorder(char[],int,int)",1,1,n/a,20,3,3,14,5
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.clone()",6,0,n/a,18,0,0,10,4
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.current()",1,2,n/a,5,0,0,2,2
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.first()",6,0,n/a,8,0,0,5,2
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.following(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.getText()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.last()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.next()",12,1,n/a,21,2,0,15,6
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.next(int)",3,0,n/a,11,1,1,7,3
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.previous()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.setText(CharacterIterator)",10,0,n/a,10,0,1,7,2
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.setText(String)",5,0,n/a,6,0,1,3,1
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator.verifyPushBack(int,int)",13,1,n/a,10,0,2,8,4
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.getScript(int)",1,1,n/a,7,0,1,3,3
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.getScriptCode()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.getScriptLimit()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.getScriptStart()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.isSameScript(int,int)",0,1,n/a,5,0,2,1,3
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.next()",5,0,n/a,36,3,0,14,7
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator.setText(char[],int,int)",0,0,n/a,16,0,3,7,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testBasicUsage()",22,0,n/a,13,0,0,11,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testClone()",14,0,n/a,10,0,0,8,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testCurrent()",10,0,n/a,10,0,0,6,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testFirst()",13,0,n/a,11,0,0,7,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testLast()",15,0,n/a,12,0,0,7,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testNext()",12,0,n/a,10,0,0,6,1
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator.testSetIndex()",7,0,n/a,10,1,0,6,2
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testAlphanumericSA()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testAmharic()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testApostrophesSA()",6,0,n/a,9,0,0,6,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testArabic()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testAramaic()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testArmenian()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testBengali()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testChinese()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testDelimitersSA()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testEmpty()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testFarsi()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testGreek()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testHugeDoc()",8,0,n/a,10,0,0,8,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testHugeTerm2()",8,0,n/a,18,1,0,12,2
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testJapanese()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testKorean()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testKoreanSA()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testLUCENE1545()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testLao()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testNumericSA()",4,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testOffsets()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testRandomHugeStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testReusableTokenStream()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testTextWithNumbersSA()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testThai()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testTibetan()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testTypes()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer.testVariousTextSA()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.assertBreaksTo(BreakIterator,String,String[])",13,7,n/a,17,2,3,15,4
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.isWord(char[],int,int)",3,1,n/a,9,1,3,8,3
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.setUp()",6,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.testBasicUsage()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.testNumerics()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator.testTextAndNumerics()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttribute.getCode()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttribute.getName()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttribute.getShortName()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttribute.setCode(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.equals(Object)",0,0,n/a,10,1,1,5,3
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.getCode()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.getName()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.getShortName()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.hashCode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.reflectWith(AttributeReflector)",2,8,n/a,4,0,1,1,1
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl.setCode(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.id.IndonesianAnalyzer.IndonesianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.id.IndonesianAnalyzer.IndonesianAnalyzer(Version,Set<?>)",1,1,n/a,11,0,2,1,1
"org.apache.lucene.analysis.id.IndonesianAnalyzer.IndonesianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,17,0,3,2,1
"org.apache.lucene.analysis.id.IndonesianAnalyzer.createComponents(String,Reader)",8,5,n/a,23,1,2,7,2
"org.apache.lucene.analysis.id.IndonesianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.id.IndonesianStemFilter.IndonesianStemFilter(TokenStream)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.id.IndonesianStemFilter.IndonesianStemFilter(TokenStream,boolean)",1,3,n/a,10,0,2,2,1
"org.apache.lucene.analysis.id.IndonesianStemFilter.incrementToken()",6,216,n/a,13,2,0,6,3
"org.apache.lucene.analysis.id.IndonesianStemmer.isVowel(char)",0,5,n/a,12,1,1,9,3
"org.apache.lucene.analysis.id.IndonesianStemmer.removeFirstOrderPrefix(char[],int)",31,1,n/a,76,1,2,60,21
"org.apache.lucene.analysis.id.IndonesianStemmer.removeParticle(char[],int)",3,1,n/a,9,1,2,4,4
"org.apache.lucene.analysis.id.IndonesianStemmer.removePossessivePronoun(char[],int)",3,1,n/a,11,1,2,7,4
"org.apache.lucene.analysis.id.IndonesianStemmer.removeSecondOrderPrefix(char[],int)",13,2,n/a,32,1,2,23,13
"org.apache.lucene.analysis.id.IndonesianStemmer.removeSuffix(char[],int)",4,2,n/a,25,1,2,10,14
"org.apache.lucene.analysis.id.IndonesianStemmer.stem(char[],int,boolean)",4,0,n/a,18,0,3,14,6
"org.apache.lucene.analysis.id.IndonesianStemmer.stemDerivational(char[],int)",5,1,n/a,14,1,2,15,8
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testExamples()",35,0,n/a,38,0,0,35,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testIRExamples()",24,0,n/a,27,0,0,24,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testInflectionalOnly()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.id.TestIndonesianStemmer.testShouldntStem()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.in.IndicNormalizationFilter.IndicNormalizationFilter(TokenStream)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.in.IndicNormalizationFilter.incrementToken()",5,216,n/a,9,1,0,4,2
"org.apache.lucene.analysis.in.IndicNormalizer.ScriptData.ScriptData(int,int)",0,9,n/a,4,0,2,2,1
"org.apache.lucene.analysis.in.IndicNormalizer.compose(int,UnicodeBlock,ScriptData,char[],int,int)",4,1,n/a,32,2,6,25,13
"org.apache.lucene.analysis.in.IndicNormalizer.flag(UnicodeBlock)",1,110,n/a,3,0,1,1,1
"org.apache.lucene.analysis.in.IndicNormalizer.normalize(char[],int)",4,0,n/a,20,2,2,10,4
"org.apache.lucene.analysis.in.IndicTokenizer.IndicTokenizer(Version,AttributeFactory,Reader)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.in.IndicTokenizer.IndicTokenizer(Version,AttributeSource,Reader)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.in.IndicTokenizer.IndicTokenizer(Version,Reader)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.analysis.in.IndicTokenizer.isTokenChar(int)",4,12,n/a,7,0,1,1,4
"org.apache.lucene.analysis.in.TestIndicNormalizer.check(String,String)",4,7,n/a,5,0,2,3,1
"org.apache.lucene.analysis.in.TestIndicNormalizer.testBasics()",7,0,n/a,13,0,0,7,1
"org.apache.lucene.analysis.in.TestIndicNormalizer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.it.ItalianAnalyzer.ItalianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.it.ItalianAnalyzer.ItalianAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.it.ItalianAnalyzer.ItalianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.it.ItalianAnalyzer.createComponents(String,Reader)",13,5,n/a,31,1,2,12,4
"org.apache.lucene.analysis.it.ItalianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.it.ItalianLightStemFilter.ItalianLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.it.ItalianLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.it.ItalianLightStemmer.stem(char[],int)",0,0,n/a,50,1,2,54,18
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testContractions()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testContractionsBackwards()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.it.TestItalianAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.it.TestItalianLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.it.TestItalianLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.it.TestItalianLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.GraphvizFormatter(ConnectionCosts)",5,0,n/a,7,0,1,5,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.finish()",3,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.formatHeader()",6,1,n/a,12,0,0,6,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.formatNodes(JapaneseTokenizer,WrappedPositionArray,int,Position,char[])",35,1,n/a,55,3,5,48,7
"org.apache.lucene.analysis.ja.GraphvizFormatter.formatTrailer()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.getNodeID(int,int)",0,6,n/a,3,0,2,1,1
"org.apache.lucene.analysis.ja.GraphvizFormatter.onBacktrace(JapaneseTokenizer,WrappedPositionArray,int,Position,int,char[],boolean)",8,0,n/a,11,1,7,7,2
"org.apache.lucene.analysis.ja.GraphvizFormatter.setBestPathMap(WrappedPositionArray,int,Position,int)",7,1,n/a,18,1,4,14,2
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.JapaneseAnalyzer(Version)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.JapaneseAnalyzer(Version,UserDictionary,Mode,CharArraySet,Set<String>)",1,1,n/a,6,0,5,4,1
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.createComponents(String,Reader)",8,5,n/a,11,0,2,8,1
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.getDefaultStopSet()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.getDefaultStopTags()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.JapaneseBaseFormFilter.JapaneseBaseFormFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.JapaneseBaseFormFilter.incrementToken()",5,216,n/a,14,3,0,7,4
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.JapaneseKatakanaStemFilter(TokenStream)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.JapaneseKatakanaStemFilter(TokenStream,int)",1,2,n/a,4,0,2,2,1
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.incrementToken()",6,216,n/a,11,2,0,5,3
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.isKatakana(char[],int)",1,1,n/a,9,2,2,6,3
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter.stem(char[],int)",1,1,n/a,12,1,2,7,4
"org.apache.lucene.analysis.ja.JapanesePartOfSpeechStopFilter.JapanesePartOfSpeechStopFilter(boolean,TokenStream,Set<String>)",1,1,n/a,4,0,3,2,1
"org.apache.lucene.analysis.ja.JapanesePartOfSpeechStopFilter.accept()",2,3,n/a,5,0,0,2,2
"org.apache.lucene.analysis.ja.JapaneseReadingFormFilter.JapaneseReadingFormFilter(TokenStream)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.JapaneseReadingFormFilter.JapaneseReadingFormFilter(TokenStream,boolean)",1,2,n/a,4,0,2,2,1
"org.apache.lucene.analysis.ja.JapaneseReadingFormFilter.incrementToken()",6,216,n/a,16,3,0,8,4
"org.apache.lucene.analysis.ja.JapaneseTokenizer.JapaneseTokenizer(Reader,UserDictionary,boolean,Mode)",14,1,n/a,48,1,4,35,5
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.add(int,int,int,int,int,Type)",1,3,n/a,20,1,6,9,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.addForward(int,int,int,Type)",1,1,n/a,10,1,4,7,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.grow()",6,1,n/a,13,0,0,8,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.growForward()",4,1,n/a,11,0,0,6,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position.reset()",0,3,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.WrappedPositionArray()",1,1,n/a,5,1,0,4,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.freeBefore(int)",1,1,n/a,18,2,1,14,4
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.get(int)",6,17,n/a,30,3,1,20,5
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.getIndex(int)",0,1,n/a,7,1,1,4,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.getNextPos()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.inBounds(int)",0,1,n/a,4,0,1,1,2
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray.reset()",1,1,n/a,13,2,0,9,3
"org.apache.lucene.analysis.ja.JapaneseTokenizer.add(Dictionary,Position,int,int,Type,boolean)",13,4,n/a,38,3,6,27,12
"org.apache.lucene.analysis.ja.JapaneseTokenizer.backtrace(Position,int)",49,3,n/a,220,5,2,106,38
"org.apache.lucene.analysis.ja.JapaneseTokenizer.computePenalty(int,int)",2,4,n/a,19,3,2,14,6
"org.apache.lucene.analysis.ja.JapaneseTokenizer.computeSecondBestThreshold(int,int)",1,1,n/a,12,0,2,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.end()",2,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.getDict(Type)",1,7,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.incrementToken()",28,216,n/a,39,2,0,25,5
"org.apache.lucene.analysis.ja.JapaneseTokenizer.isPunctuation(char)",1,2,n/a,23,1,1,20,3
"org.apache.lucene.analysis.ja.JapaneseTokenizer.parse()",52,1,n/a,229,5,0,142,48
"org.apache.lucene.analysis.ja.JapaneseTokenizer.pruneAndRescore(int,int,int)",29,1,n/a,94,4,3,55,18
"org.apache.lucene.analysis.ja.JapaneseTokenizer.reset()",2,92,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.resetState()",4,2,n/a,11,0,0,8,1
"org.apache.lucene.analysis.ja.JapaneseTokenizer.setGraphvizFormatter(GraphvizFormatter)",0,0,n/a,5,0,1,1,1
"org.apache.lucene.analysis.ja.TestExtendedMode.testRandomHugeStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.TestExtendedMode.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.TestExtendedMode.testSurrogates()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ja.TestExtendedMode.testSurrogates2()",9,0,n/a,13,2,0,10,3
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testAnotherCuriousString()",5,0,n/a,9,0,0,3,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testBasics()",2,0,n/a,13,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testCuriousString()",5,0,n/a,9,0,0,3,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testDecomposition()",10,0,n/a,63,0,0,7,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testRandom()",5,0,n/a,9,0,0,2,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testRandomHugeStrings()",4,0,n/a,7,0,0,2,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testUserDict3()",8,0,n/a,15,0,0,2,1
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer.testYetAnotherCuriousString()",5,0,n/a,9,0,0,3,1
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter.testBasics()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter.testEnglish()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter.testRandomStrings()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter.testRandomData()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter.testStemVariants()",1,0,n/a,21,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter.testUnsupportedHalfWidthVariants()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter.testKatakanaReadings()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter.testRandomData()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter.testRomajiReadings()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertBaseForms(String,String...)",11,1,n/a,11,1,2,8,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertInflectionForms(String,String...)",11,1,n/a,11,1,2,8,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertInflectionTypes(String,String...)",11,1,n/a,11,1,2,8,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertPartsOfSpeech(String,String...)",11,1,n/a,11,1,2,8,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertPronunciations(String,String...)",11,2,n/a,11,1,2,8,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.assertReadings(String,String...)",11,2,n/a,11,1,2,8,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.doTestBocchan(int)",23,2,n/a,41,2,1,26,9
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.readDict()",6,9,n/a,16,2,0,9,3
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testBasicForms()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testBocchan()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testBocchanBig()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition1()",1,0,n/a,15,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition2()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition3()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition4()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testDecomposition5()",6,0,n/a,11,1,0,5,2
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testEnd()",8,0,n/a,16,0,0,2,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testInflectionForms()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testInflectionTypes()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testLargeDocReliability()",5,0,n/a,9,2,0,7,3
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testLatticeToDot()",11,0,n/a,6,2,0,9,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testNormalMode()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testOnlyPunctuation()",6,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testOnlyPunctuationExtended()",6,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testPartOfSpeech()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testPronunciations()",1,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testPronunciations2()",1,0,n/a,13,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testRandomHugeStrings()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testRandomStrings()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testReadings()",1,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testReadings2()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testSegmentation()",1,0,n/a,17,0,0,3,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testSurrogates()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testSurrogates2()",10,0,n/a,16,2,0,12,4
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testTsukitosha()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testTwoSentences()",1,0,n/a,18,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testUserDict()",4,0,n/a,10,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testUserDict2()",4,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testUserDict3()",4,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer.testYabottai()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.TestSearchMode.testSearchSegmentation()",16,0,n/a,39,4,0,27,7
"org.apache.lucene.analysis.ja.Token.Token(int,char[],int,int,Type,int,Dictionary)",0,0,n/a,10,0,7,8,1
"org.apache.lucene.analysis.ja.Token.getBaseForm()",1,3,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getInflectionForm()",1,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getInflectionType()",1,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getLength()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getOffset()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getPartOfSpeech()",1,3,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getPosition()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getPositionLength()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getPronunciation()",1,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getReading()",1,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getSurfaceForm()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.getSurfaceFormString()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.Token.isKnown()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ja.Token.isUnknown()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ja.Token.isUser()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ja.Token.setPositionLength(int)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.ja.Token.toString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.BinaryDictionary()",31,0,n/a,75,3,0,69,9
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.baseFormOffset(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getBaseForm(int,char[],int,int)",6,0,n/a,17,2,4,13,3
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getClassResource(Class<?>,String)",5,1,n/a,7,0,2,4,2
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getInflectionForm(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getInflectionType(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getLeftId(int)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getPartOfSpeech(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getPronunciation(int,char[],int,int)",5,0,n/a,10,1,4,5,2
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getReading(int,char[],int,int)",5,1,n/a,20,3,4,13,5
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getResource(String)",2,3,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getRightId(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.getWordCost(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.hasBaseFormData(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.hasPronunciationData(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.hasReadingData(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.lookupWordIds(int,IntsRef)",0,0,n/a,6,0,2,3,1
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.pronunciationOffset(int)",4,1,n/a,15,2,1,9,3
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.readString(int,int,boolean)",3,2,n/a,13,2,3,11,4
"org.apache.lucene.analysis.ja.dict.BinaryDictionary.readingOffset(int)",3,3,n/a,9,1,1,5,2
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.CharacterDefinition()",8,1,n/a,20,2,0,16,3
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.getCharacterClass(char)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.getInstance()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.isGroup(char)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.isInvoke(char)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.isKanji(char)",0,1,n/a,4,0,1,2,2
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.lookupCharacterClass(String)",2,5,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.ConnectionCosts.ConnectionCosts()",9,1,n/a,28,3,0,25,4
"org.apache.lucene.analysis.ja.dict.ConnectionCosts.get(int,int)",0,7,n/a,3,0,2,1,1
"org.apache.lucene.analysis.ja.dict.ConnectionCosts.getInstance()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.dict.Dictionary.getBaseForm(int,char[],int,int)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.lucene.analysis.ja.dict.Dictionary.getInflectionForm(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.dict.Dictionary.getInflectionType(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.dict.Dictionary.getLeftId(int)",n/a,5,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.dict.Dictionary.getPartOfSpeech(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.dict.Dictionary.getPronunciation(int,char[],int,int)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.lucene.analysis.ja.dict.Dictionary.getReading(int,char[],int,int)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.lucene.analysis.ja.dict.Dictionary.getRightId(int)",n/a,5,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.dict.Dictionary.getWordCost(int)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.dict.TestTokenInfoDictionary.testEnumerateAll()",46,0,n/a,67,3,0,57,10
"org.apache.lucene.analysis.ja.dict.TokenInfoDictionary.TokenInfoDictionary()",8,1,n/a,17,1,0,11,2
"org.apache.lucene.analysis.ja.dict.TokenInfoDictionary.getFST()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.dict.TokenInfoDictionary.getInstance()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.TokenInfoFST(FST<Long>,boolean)",2,0,n/a,6,0,2,4,2
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.cacheRootArcs()",7,1,n/a,15,2,0,11,3
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.findTargetArc(int,Arc<Long>,Arc<Long>,boolean,BytesReader)",2,2,n/a,14,2,5,8,5
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.getBytesReader(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.getFirstArc(Arc<Long>)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.TokenInfoFST.getInternalFST()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.UnknownDictionary()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getCharacterDefinition()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getInflectionForm(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getInflectionType(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getInstance()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.getReading(int,char[],int,int)",0,0,n/a,4,0,4,1,1
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.lookup(char[],int,int)",3,0,n/a,16,2,3,11,4
"org.apache.lucene.analysis.ja.dict.UnknownDictionaryTest.testPut()",13,0,n/a,18,1,0,13,2
"org.apache.lucene.analysis.ja.dict.UnknownDictionaryTest.testPutCharacterCategory()",10,0,n/a,19,1,0,12,3
"org.apache.lucene.analysis.ja.dict.UserDictionary.UserDictionary(Reader)",38,2,n/a,4,2,1,45,7
"org.apache.lucene.analysis.ja.dict.UserDictionary.getAllFeaturesArray(int)",1,1,n/a,7,1,1,4,2
"org.apache.lucene.analysis.ja.dict.UserDictionary.getBaseForm(int,char[],int,int)",0,0,n/a,4,0,4,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getFST()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getFeature(int,int...)",13,2,n/a,19,2,2,12,6
"org.apache.lucene.analysis.ja.dict.UserDictionary.getInflectionForm(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getInflectionType(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getLeftId(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getPartOfSpeech(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getPronunciation(int,char[],int,int)",0,0,n/a,4,0,4,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getReading(int,char[],int,int)",1,0,n/a,4,0,4,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getRightId(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.getWordCost(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.lookup(char[],int,int)",10,0,n/a,33,3,3,23,6
"org.apache.lucene.analysis.ja.dict.UserDictionary.lookupSegmentation(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.dict.UserDictionary.toIndexArray(Map<Integer, int[]>)",6,1,n/a,20,2,1,12,3
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest.testLookup()",15,0,n/a,20,0,0,13,1
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest.testPartOfSpeech()",6,0,n/a,8,0,0,5,1
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest.testRead()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest.testReadings()",13,0,n/a,12,0,0,9,1
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute.getBaseForm()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute.setToken(Token)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.getBaseForm()",1,1,n/a,3,0,0,1,2
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.reflectWith(AttributeReflector)",2,8,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl.setToken(Token)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute.getInflectionForm()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute.getInflectionType()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute.setToken(Token)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.getInflectionForm()",1,1,n/a,3,0,0,1,2
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.getInflectionType()",1,1,n/a,3,0,0,1,2
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.reflectWith(AttributeReflector)",8,8,n/a,11,0,1,8,3
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl.setToken(Token)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute.getPartOfSpeech()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute.setToken(Token)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.getPartOfSpeech()",1,1,n/a,3,0,0,1,2
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.reflectWith(AttributeReflector)",4,8,n/a,7,0,1,4,2
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl.setToken(Token)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute.getPronunciation()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute.getReading()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute.setToken(Token)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.getPronunciation()",1,1,n/a,3,0,0,1,2
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.getReading()",1,1,n/a,3,0,0,1,2
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.reflectWith(AttributeReflector)",8,8,n/a,11,0,1,8,3
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl.setToken(Token)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.BinaryDictionaryWriter(Class<? extends BinaryDictionary>,int)",1,0,n/a,4,0,2,2,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.addMapping(int,int)",2,0,n/a,17,2,2,14,3
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.getBaseFileName(String)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.isKatakana(String)",2,2,n/a,9,2,1,7,4
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.put(String[])",69,0,n/a,104,3,1,80,21
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.sharedPrefix(String,String)",6,1,n/a,7,0,2,7,4
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.toKatakana(String)",4,1,n/a,12,2,1,9,4
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.write(String)",4,0,n/a,12,0,1,4,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.writeDictionary(String)",13,1,n/a,16,1,1,11,1
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.writeKatakana(String)",3,2,n/a,5,1,1,4,2
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.writePosDict(String)",17,1,n/a,25,3,1,18,3
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter.writeTargetMap(String)",12,1,n/a,28,3,1,22,3
"org.apache.lucene.analysis.ja.util.CSVUtil.CSVUtil()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.analysis.ja.util.CSVUtil.parse(String)",13,5,n/a,32,2,1,22,6
"org.apache.lucene.analysis.ja.util.CSVUtil.quoteEscape(String)",3,2,n/a,14,1,1,6,3
"org.apache.lucene.analysis.ja.util.CSVUtil.unQuoteUnEscape(String)",6,1,n/a,15,2,1,8,4
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter.CharacterDefinitionWriter()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter.putCharacterCategory(int,String)",2,0,n/a,17,1,2,4,2
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter.putInvokeDefinition(String,int,int,int)",1,0,n/a,6,0,4,3,1
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter.write(String)",12,0,n/a,21,2,1,14,4
"org.apache.lucene.analysis.ja.util.ConnectionCostsBuilder.ConnectionCostsBuilder()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.ja.util.ConnectionCostsBuilder.build(String)",18,0,n/a,25,1,1,20,3
"org.apache.lucene.analysis.ja.util.ConnectionCostsWriter.ConnectionCostsWriter(int,int)",0,0,n/a,8,0,2,3,1
"org.apache.lucene.analysis.ja.util.ConnectionCostsWriter.add(int,int,int)",0,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.ja.util.ConnectionCostsWriter.write(String)",13,0,n/a,25,3,1,20,3
"org.apache.lucene.analysis.ja.util.DictionaryBuilder.DictionaryBuilder()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.ja.util.DictionaryBuilder.build(DictionaryFormat,String,String,String,boolean)",14,1,n/a,25,0,5,18,1
"org.apache.lucene.analysis.ja.util.DictionaryBuilder.main(String[])",13,0,n/a,24,1,1,20,3
"org.apache.lucene.analysis.ja.util.TestToStringUtil.testHepburn()",10,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.ja.util.TestToStringUtil.testPOS()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.ja.util.ToStringUtil.getInflectedFormTranslation(String)",1,2,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ja.util.ToStringUtil.getInflectionTypeTranslation(String)",1,2,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ja.util.ToStringUtil.getPOSTranslation(String)",1,2,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ja.util.ToStringUtil.getRomanization(Appendable,CharSequence)",215,2,n/a,786,3,2,710,245
"org.apache.lucene.analysis.ja.util.ToStringUtil.getRomanization(String)",4,2,n/a,12,1,1,5,2
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder.TokenInfoDictionaryBuilder(DictionaryFormat,String,boolean)",1,0,n/a,6,0,3,4,2
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder.build(String)",8,0,n/a,4,2,1,7,2
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder.buildDictionary(List<File>)",46,1,n/a,3,4,1,59,11
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder.formatEntry(String[])",1,2,n/a,28,2,1,20,3
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.TokenInfoDictionaryWriter(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.setFST(FST<Long>)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.write(String)",3,0,n/a,5,0,1,2,1
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter.writeFST(String)",4,1,n/a,5,0,1,3,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.UnknownDictionaryBuilder(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.build(String)",2,0,n/a,5,0,1,3,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.readCharacterDefinition(String,UnknownDictionaryWriter)",25,1,n/a,36,4,2,28,6
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.readDictionaryFile(String)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder.readDictionaryFile(String,String)",19,1,n/a,5,2,2,19,3
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.UnknownDictionaryWriter(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.put(String[])",4,4,n/a,11,0,1,5,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.putCharacterCategory(int,String)",1,10,n/a,9,0,2,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.putInvokeDefinition(String,int,int,int)",1,0,n/a,3,0,4,1,1
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter.write(String)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.analysis.lv.LatvianAnalyzer.LatvianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.lv.LatvianAnalyzer.LatvianAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.lv.LatvianAnalyzer.LatvianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.lv.LatvianAnalyzer.createComponents(String,Reader)",8,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.lv.LatvianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.lv.LatvianStemFilter.LatvianStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.lv.LatvianStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.lv.LatvianStemmer.Affix.Affix(String,int,boolean)",1,38,n/a,5,0,3,3,1
"org.apache.lucene.analysis.lv.LatvianStemmer.numVowels(char[],int)",0,1,n/a,16,2,2,16,3
"org.apache.lucene.analysis.lv.LatvianStemmer.stem(char[],int)",3,0,n/a,14,2,2,9,6
"org.apache.lucene.analysis.lv.LatvianStemmer.unpalatalize(char[],int)",12,1,n/a,68,2,2,46,17
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testAdjectives()",44,0,n/a,46,0,0,44,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testLength()",2,0,n/a,8,0,0,2,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns1()",12,0,n/a,15,0,0,12,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns2()",36,0,n/a,47,0,0,36,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns3()",12,0,n/a,15,0,0,12,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns4()",24,0,n/a,27,0,0,24,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns5()",12,0,n/a,20,0,0,12,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testNouns6()",14,0,n/a,18,0,0,14,1
"org.apache.lucene.analysis.lv.TestLatvianStemmer.testPalatalization()",16,0,n/a,22,0,0,16,1
"org.apache.lucene.analysis.miscellaneous.EmptyTokenStream.incrementToken()",0,216,n/a,4,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringReader.FastStringReader(String)",1,0,n/a,4,0,1,2,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringReader.getString()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.FastStringTokenizer(Reader,String,boolean,boolean,Set<?>)",1,2,n/a,7,0,5,5,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.end()",4,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.incrementToken()",14,216,n/a,44,3,0,24,10
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.isStopWord(String)",1,1,n/a,3,0,1,1,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.isTokenChar(char,boolean)",2,2,n/a,3,0,2,1,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.reset()",1,92,n/a,5,0,0,2,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternAnalyzer(Version,Pattern,boolean,Set<?>)",4,2,n/a,30,0,4,12,6
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.PatternTokenizer(Reader,String,Pattern,boolean)",2,1,n/a,7,0,4,5,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.end()",3,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.incrementToken()",12,216,n/a,25,2,0,21,7
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.reset()",1,92,n/a,5,0,0,2,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer.reset(Reader)",3,28,n/a,6,0,1,3,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.createComponents(String,Reader)",3,5,n/a,20,1,2,4,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.createComponents(String,Reader,String)",8,1,n/a,26,1,3,9,5
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.eq(Object,Object)",1,1,n/a,4,0,2,1,3
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.eqPattern(Pattern,Pattern)",5,3,n/a,4,0,2,1,3
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.equals(Object)",2,0,n/a,21,1,1,10,9
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.hashCode()",4,0,n/a,16,0,0,10,5
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.toString(Reader)",8,3,n/a,33,3,1,19,4
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.check(PatternAnalyzer,String,String[])",7,7,n/a,21,0,3,5,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.isJREBug7104012(Throwable)",6,2,n/a,17,2,1,9,6
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testCustomPattern()",6,0,n/a,15,0,0,4,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testHugeDocument()",11,0,n/a,21,0,0,10,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testNonWordPattern()",4,0,n/a,16,0,0,4,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testRandomStrings()",13,0,n/a,6,2,0,11,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest.testWhitespacePattern()",4,0,n/a,16,0,0,4,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.PrefixAndSuffixAwareTokenFilter(TokenStream,TokenStream,TokenStream)",5,1,n/a,4,2,3,5,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.close()",1,33,n/a,4,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.end()",1,39,n/a,4,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.incrementToken()",1,216,n/a,4,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.reset()",1,92,n/a,4,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.updateInputToken(Token,Token)",6,1,n/a,5,0,2,3,1
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter.updateSuffixToken(Token,Token)",6,1,n/a,5,0,2,3,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.PrefixAwareTokenFilter(TokenStream,TokenStream)",13,0,n/a,18,0,2,16,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.close()",2,33,n/a,5,0,0,2,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.end()",2,39,n/a,5,0,0,2,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.getNextPrefixInputToken(Token)",15,1,n/a,10,0,1,9,2
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.getNextSuffixInputToken(Token)",15,1,n/a,10,0,1,9,2
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.getPrefix()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.getSuffix()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.incrementToken()",9,216,n/a,25,3,0,16,5
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.reset()",3,92,n/a,11,1,0,6,3
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.setCurrentToken(Token)",15,2,n/a,10,0,1,9,2
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.setPrefix(TokenStream)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.setSuffix(TokenStream)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter.updateSuffixToken(Token,Token)",6,1,n/a,12,0,2,3,1
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.SingleTokenTokenStream(Token)",3,2,n/a,7,0,1,5,1
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.getToken()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.incrementToken()",2,216,n/a,11,1,0,6,2
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.reset()",0,92,n/a,4,0,0,1,1
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream.setToken(Token)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.miscellaneous.StemmerOverrideFilter.StemmerOverrideFilter(Version,TokenStream,Map<?, String>)",2,2,n/a,14,0,3,2,2
"org.apache.lucene.analysis.miscellaneous.StemmerOverrideFilter.incrementToken()",8,216,n/a,15,3,0,8,4
"org.apache.lucene.analysis.miscellaneous.TestEmptyTokenStream.test()",6,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAndSuffixAwareTokenFilter.createToken(String,int,int)",1,2,n/a,4,0,3,1,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAndSuffixAwareTokenFilter.test()",8,0,n/a,10,0,0,2,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAwareTokenFilter.createToken(String,int,int)",1,4,n/a,4,0,3,1,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAwareTokenFilter.test()",15,0,n/a,18,0,0,6,1
"org.apache.lucene.analysis.miscellaneous.TestSingleTokenTokenFilter.test()",18,0,n/a,16,0,0,14,1
"org.apache.lucene.analysis.miscellaneous.TestStemmerOverrideFilter.testOverride()",7,0,n/a,11,0,0,5,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.EdgeNGramTokenFilter(TokenStream,Side,int,int)",4,1,n/a,23,1,4,10,4
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.EdgeNGramTokenFilter(TokenStream,String,int,int)",2,1,n/a,11,0,4,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.Side.getLabel()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.Side.getSide(String)",4,1,n/a,10,1,1,5,3
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.incrementToken()",10,216,n/a,37,4,0,22,9
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.reset()",1,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.setUp()",3,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testBackRangeOfNgrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testBackUnigram()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testEmptyTerm()",12,0,n/a,6,2,0,8,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testFrontRangeOfNgrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testFrontUnigram()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testInvalidInput()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testInvalidInput2()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testInvalidInput3()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testInvalidOffsets()",6,0,n/a,7,2,0,6,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testOversizedNgrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testRandomStrings()",10,0,n/a,6,2,0,8,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testReset()",7,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest.testSmallTokenInStream()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(AttributeFactory,Reader,Side,int,int)",2,1,n/a,13,0,5,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(AttributeFactory,Reader,String,int,int)",2,0,n/a,12,0,5,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(AttributeSource,Reader,Side,int,int)",2,1,n/a,13,0,5,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(AttributeSource,Reader,String,int,int)",2,0,n/a,12,0,5,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(Reader,Side,int,int)",2,1,n/a,12,0,4,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.EdgeNGramTokenizer(Reader,String,int,int)",2,1,n/a,11,0,4,1,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.Side.getLabel()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.Side.getSide(String)",4,3,n/a,10,1,1,5,3
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.end()",2,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.incrementToken()",11,216,n/a,52,4,0,32,11
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.init(Side,int,int)",3,3,n/a,14,1,3,9,4
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.reset()",1,92,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testBackRangeOfNgrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testBackUnigram()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testFrontRangeOfNgrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testFrontUnigram()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testInvalidInput()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testInvalidInput2()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testInvalidInput3()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testOversizedNgrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testRandomStrings()",10,0,n/a,5,2,0,10,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest.testReset()",5,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.ngram.NGramTokenFilter.NGramTokenFilter(TokenStream)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenFilter.NGramTokenFilter(TokenStream,int,int)",3,2,n/a,17,1,3,7,3
"org.apache.lucene.analysis.ngram.NGramTokenFilter.incrementToken()",10,216,n/a,37,4,0,23,7
"org.apache.lucene.analysis.ngram.NGramTokenFilter.reset()",1,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.setUp()",3,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testBigrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testEmptyTerm()",6,0,n/a,6,2,0,4,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testInvalidInput()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testInvalidInput2()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testInvalidOffsets()",6,0,n/a,7,2,0,6,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testNgrams()",2,0,n/a,8,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testOversizedNgrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testRandomStrings()",5,0,n/a,6,2,0,4,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testReset()",7,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testSmallTokenInStream()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest.testUnigrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.NGramTokenizer(AttributeFactory,Reader,int,int)",2,0,n/a,11,0,4,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.NGramTokenizer(AttributeSource,Reader,int,int)",2,0,n/a,11,0,4,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.NGramTokenizer(Reader)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.NGramTokenizer(Reader,int,int)",2,2,n/a,10,0,3,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.end()",2,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizer.incrementToken()",11,216,n/a,49,4,0,34,11
"org.apache.lucene.analysis.ngram.NGramTokenizer.init(int,int)",2,3,n/a,10,1,2,6,3
"org.apache.lucene.analysis.ngram.NGramTokenizer.reset()",1,92,n/a,6,0,0,3,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testBigrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testInvalidInput()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testInvalidInput2()",2,0,n/a,9,1,0,5,2
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testNgrams()",2,0,n/a,9,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testOversizedNgrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testRandomStrings()",5,0,n/a,5,2,0,5,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testReset()",5,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.ngram.NGramTokenizerTest.testUnigrams()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,File)",3,6,n/a,18,1,2,4,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,HashSet<?>)",1,5,n/a,10,0,2,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,Set<?>)",3,6,n/a,8,0,2,1,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,Set<?>,Set<?>)",3,4,n/a,8,0,3,1,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,Set<?>,Set<?>,CharArrayMap<String>)",6,1,n/a,6,0,4,4,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.DutchAnalyzer(Version,String...)",2,0,n/a,11,0,2,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.createComponents(String,Reader)",19,5,n/a,33,1,2,18,5
"org.apache.lucene.analysis.nl.DutchAnalyzer.getDefaultStopSet()",0,3,n/a,7,0,0,1,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.setStemDictionary(File)",5,0,n/a,18,1,1,4,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.setStemExclusionTable(File)",4,0,n/a,15,1,1,4,2
"org.apache.lucene.analysis.nl.DutchAnalyzer.setStemExclusionTable(HashSet<?>)",1,0,n/a,9,0,1,2,1
"org.apache.lucene.analysis.nl.DutchAnalyzer.setStemExclusionTable(String...)",2,0,n/a,11,0,1,2,1
"org.apache.lucene.analysis.nl.DutchStemFilter.DutchStemFilter(TokenStream)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.nl.DutchStemFilter.DutchStemFilter(TokenStream,Map<?, ?>)",2,1,n/a,7,0,2,2,1
"org.apache.lucene.analysis.nl.DutchStemFilter.DutchStemFilter(TokenStream,Set<?>)",1,1,n/a,9,0,2,2,1
"org.apache.lucene.analysis.nl.DutchStemFilter.DutchStemFilter(TokenStream,Set<?>,Map<?, ?>)",2,0,n/a,9,0,3,2,1
"org.apache.lucene.analysis.nl.DutchStemFilter.incrementToken()",8,216,n/a,19,2,0,8,7
"org.apache.lucene.analysis.nl.DutchStemFilter.setExclusionTable(HashSet<?>)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.nl.DutchStemFilter.setStemDictionary(HashMap<?, ?>)",1,0,n/a,8,0,1,2,2
"org.apache.lucene.analysis.nl.DutchStemFilter.setStemmer(DutchStemmer)",0,0,n/a,8,1,1,2,2
"org.apache.lucene.analysis.nl.DutchStemmer.enEnding(StringBuilder)",8,2,n/a,17,2,1,12,5
"org.apache.lucene.analysis.nl.DutchStemmer.getRIndex(StringBuilder,int)",5,2,n/a,12,2,2,8,5
"org.apache.lucene.analysis.nl.DutchStemmer.isStemmable(String)",3,1,n/a,11,1,1,6,3
"org.apache.lucene.analysis.nl.DutchStemmer.isValidEnEnding(StringBuilder,int)",4,1,n/a,11,0,2,8,6
"org.apache.lucene.analysis.nl.DutchStemmer.isValidSEnding(StringBuilder,int)",2,2,n/a,6,0,2,4,3
"org.apache.lucene.analysis.nl.DutchStemmer.isVowel(char)",0,12,n/a,15,2,1,10,2
"org.apache.lucene.analysis.nl.DutchStemmer.reStoreYandI(StringBuilder)",6,1,n/a,5,0,1,3,1
"org.apache.lucene.analysis.nl.DutchStemmer.setStemDictionary(Map)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.nl.DutchStemmer.stem(String)",20,0,n/a,33,0,1,21,5
"org.apache.lucene.analysis.nl.DutchStemmer.step1(StringBuilder)",16,1,n/a,25,1,1,15,10
"org.apache.lucene.analysis.nl.DutchStemmer.step2(StringBuilder)",8,2,n/a,20,1,1,9,5
"org.apache.lucene.analysis.nl.DutchStemmer.step3a(StringBuilder)",7,1,n/a,15,1,1,7,5
"org.apache.lucene.analysis.nl.DutchStemmer.step3b(StringBuilder)",25,1,n/a,61,3,1,27,18
"org.apache.lucene.analysis.nl.DutchStemmer.step4(StringBuilder)",14,1,n/a,23,1,1,9,8
"org.apache.lucene.analysis.nl.DutchStemmer.storeYandI(StringBuilder)",16,1,n/a,25,3,1,17,11
"org.apache.lucene.analysis.nl.DutchStemmer.substitute(StringBuilder)",7,1,n/a,39,3,1,24,7
"org.apache.lucene.analysis.nl.DutchStemmer.unDouble(StringBuilder)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.nl.DutchStemmer.unDouble(StringBuilder,int)",8,3,n/a,6,1,2,3,7
"org.apache.lucene.analysis.nl.TestDutchStemmer.check(String,String)",2,77,n/a,3,0,2,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testBuggyStemOverrides()",2,0,n/a,10,0,0,2,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testBuggyStopwordsCasing()",2,0,n/a,10,0,0,2,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testExclusionTableReuse()",4,0,n/a,10,0,0,4,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testExclusionTableViaCtor()",6,0,n/a,8,0,0,6,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testOldBuggyStemmer()",4,0,n/a,10,0,0,4,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testReusableTokenStream()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testSnowballCorrectness()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testStemDictionaryReuse()",5,0,n/a,11,0,0,5,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testStemOverrides()",2,0,n/a,8,0,0,2,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testStopwordsCasing()",2,0,n/a,7,0,0,2,1
"org.apache.lucene.analysis.nl.TestDutchStemmer.testWithSnowballExamples()",77,0,n/a,79,0,0,77,1
"org.apache.lucene.analysis.no.NorwegianAnalyzer.NorwegianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.no.NorwegianAnalyzer.NorwegianAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.no.NorwegianAnalyzer.NorwegianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.no.NorwegianAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.no.NorwegianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.no.NorwegianLightStemFilter.NorwegianLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.no.NorwegianLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.no.NorwegianLightStemmer.stem(char[],int)",18,0,n/a,45,1,2,21,29
"org.apache.lucene.analysis.no.NorwegianMinimalStemFilter.NorwegianMinimalStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.no.NorwegianMinimalStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.no.NorwegianMinimalStemmer.stem(char[],int)",4,0,n/a,22,1,2,12,11
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.no.TestNorwegianLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.no.TestNorwegianLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.no.TestNorwegianLightStemFilter.testVocabulary()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.no.TestNorwegianMinimalStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.no.TestNorwegianMinimalStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.no.TestNorwegianMinimalStemFilter.testVocabulary()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,char,char)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,char,char,int)",1,1,n/a,3,0,4,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,int,char)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.PathHierarchyTokenizer(Reader,int,char,char,int)",3,5,n/a,8,0,5,6,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.end()",1,39,n/a,5,0,0,1,1
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.incrementToken()",27,216,n/a,82,4,0,53,14
"org.apache.lucene.analysis.path.PathHierarchyTokenizer.reset(Reader)",2,28,n/a,8,0,1,5,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,char,char)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,char,char,int)",1,1,n/a,3,0,4,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,char,int)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,int,char)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,int,char,char)",1,0,n/a,3,0,4,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.ReversePathHierarchyTokenizer(Reader,int,char,char,int)",4,7,n/a,10,0,5,8,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.end()",1,39,n/a,5,0,0,1,1
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.incrementToken()",23,216,n/a,46,3,0,32,8
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer.reset(Reader)",3,28,n/a,9,0,1,6,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testBasic()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testBasicSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testEndOfDelimiter()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testEndOfDelimiterSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testNormalizeWinDelimToLinuxDelim()",7,0,n/a,13,0,0,6,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testOnlyDelimiter()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testOnlyDelimiterSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testOnlyDelimiters()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testOnlyDelimitersSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testRandomHugeStrings()",4,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testRandomStrings()",4,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testReplace()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testStartOfChar()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testStartOfCharEndOfDelimiter()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testStartOfCharEndOfDelimiterSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testStartOfCharSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer.testWindowsPath()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testBasicReverse()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testEndOfDelimiterReverse()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testEndOfDelimiterReverseSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testOnlyDelimiterReverse()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testOnlyDelimiterReverseSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testOnlyDelimitersReverse()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testOnlyDelimitersReverseSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testRandomHugeStrings()",4,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testRandomStrings()",4,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testReverseSkip2()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testStartOfCharEndOfDelimiterReverse()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testStartOfCharEndOfDelimiterReverseSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testStartOfCharReverse()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer.testStartOfCharReverseSkip()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.payloads.AbstractEncoder.encode(char[])",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilter.DelimitedPayloadTokenFilter(TokenStream,char,PayloadEncoder)",1,1,n/a,5,0,3,3,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilter.incrementToken()",7,216,n/a,17,3,0,13,4
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.assertTermEquals(String,TokenStream,CharTermAttribute,PayloadAttribute,byte[])",13,30,n/a,14,2,5,11,3
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.assertTermEquals(String,TokenStream,byte[])",15,10,n/a,16,2,3,13,3
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.testFloatEncoding()",25,0,n/a,17,0,0,15,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.testIntEncoding()",24,0,n/a,17,0,0,15,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.testNext()",23,0,n/a,17,0,0,13,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest.testPayloads()",25,0,n/a,19,0,0,15,1
"org.apache.lucene.analysis.payloads.FloatEncoder.encode(char[],int,int)",5,0,n/a,7,0,3,5,1
"org.apache.lucene.analysis.payloads.IdentityEncoder.IdentityEncoder()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.analysis.payloads.IdentityEncoder.IdentityEncoder(Charset)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.analysis.payloads.IdentityEncoder.encode(char[],int,int)",11,0,n/a,11,1,3,6,2
"org.apache.lucene.analysis.payloads.IntegerEncoder.encode(char[],int,int)",4,0,n/a,7,0,3,5,1
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilter.NumericPayloadTokenFilter(TokenStream,float,String)",3,1,n/a,6,0,3,3,1
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilter.incrementToken()",4,216,n/a,10,1,0,5,3
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilterTest.WordTokenFilter.WordTokenFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilterTest.WordTokenFilter.incrementToken()",4,216,n/a,10,1,0,5,3
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilterTest.test()",36,0,n/a,24,2,0,19,3
"org.apache.lucene.analysis.payloads.PayloadEncoder.encode(char[])",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.payloads.PayloadEncoder.encode(char[],int,int)",n/a,0,0,n/a,n/a,3,n/a,n/a
"org.apache.lucene.analysis.payloads.PayloadHelper.decodeFloat(byte[])",1,2,n/a,9,0,1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.decodeFloat(byte[],int)",2,2,n/a,12,0,2,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.decodeInt(byte[],int)",0,1,n/a,4,0,2,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.encodeFloat(float)",1,4,n/a,3,0,1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.encodeFloat(float,byte[],int)",2,1,n/a,3,0,3,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.encodeInt(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.payloads.PayloadHelper.encodeInt(int,byte[],int)",0,2,n/a,7,0,3,5,1
"org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilter.TokenOffsetPayloadTokenFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilter.incrementToken()",7,216,n/a,13,1,0,8,2
"org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilterTest.test()",19,0,n/a,19,1,0,16,2
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter.TypeAsPayloadTokenFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter.incrementToken()",6,216,n/a,12,2,0,6,4
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilterTest.WordTokenFilter.WordTokenFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilterTest.WordTokenFilter.incrementToken()",5,216,n/a,9,1,0,4,2
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilterTest.test()",26,0,n/a,17,1,0,14,2
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter.BeiderMorseFilter(TokenStream,PhoneticEngine)",1,0,n/a,7,0,2,1,1
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter.BeiderMorseFilter(TokenStream,PhoneticEngine,LanguageSet)",1,3,n/a,11,0,3,3,1
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter.incrementToken()",21,216,n/a,24,2,0,15,5
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter.reset()",2,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter.DoubleMetaphoneFilter(TokenStream,int,boolean)",2,0,n/a,5,0,3,3,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter.incrementToken()",27,216,n/a,48,3,0,32,17
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter.reset()",2,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testAlternateInjectFalse()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testEmptyTerm()",6,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testNonConvertableStringsWithInject()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testNonConvertableStringsWithoutInject()",8,0,n/a,9,0,0,6,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testRandom()",11,0,n/a,5,2,0,9,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testSize4FalseInject()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testSize4TrueInject()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest.testSize8FalseInject()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.phonetic.PhoneticFilter.PhoneticFilter(TokenStream,Encoder,boolean)",1,0,n/a,5,0,3,3,1
"org.apache.lucene.analysis.phonetic.PhoneticFilter.incrementToken()",16,216,n/a,33,1,0,25,9
"org.apache.lucene.analysis.phonetic.PhoneticFilter.reset()",1,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testBasicUsage()",2,0,n/a,14,0,0,2,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testEmptyTerm()",6,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testLanguageSet()",11,0,n/a,7,2,0,8,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testNumbers()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter.testRandom()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter.assertAlgorithm(Encoder,boolean,String,String[])",4,10,n/a,7,0,4,3,1
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter.testAlgorithms()",20,0,n/a,23,0,0,10,1
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter.testEmptyTerm()",11,0,n/a,5,3,0,6,2
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter.testRandomStrings()",15,0,n/a,5,3,0,10,2
"org.apache.lucene.analysis.pl.PolishAnalyzer.PolishAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.pl.PolishAnalyzer.PolishAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.pl.PolishAnalyzer.PolishAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,15,0,3,3,1
"org.apache.lucene.analysis.pl.PolishAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.pl.PolishAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.pl.TestPolishAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.pl.TestPolishAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.pl.TestPolishAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.pl.TestPolishAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.position.PositionFilter.PositionFilter(TokenStream)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.position.PositionFilter.PositionFilter(TokenStream,int)",1,2,n/a,12,0,2,2,1
"org.apache.lucene.analysis.position.PositionFilter.incrementToken()",2,216,n/a,13,2,0,6,3
"org.apache.lucene.analysis.position.PositionFilter.reset()",1,118,n/a,5,0,0,2,1
"org.apache.lucene.analysis.position.PositionFilterTest.TestTokenStream.TestTokenStream(String[])",1,4,n/a,4,0,1,2,1
"org.apache.lucene.analysis.position.PositionFilterTest.TestTokenStream.incrementToken()",3,216,n/a,10,1,0,5,2
"org.apache.lucene.analysis.position.PositionFilterTest.TestTokenStream.reset()",0,92,n/a,4,0,0,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.test6GramFilterNoPositions()",4,0,n/a,10,0,0,2,1
"org.apache.lucene.analysis.position.PositionFilterTest.testFilter()",3,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.testNonZeroPositionIncrement()",3,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.position.PositionFilterTest.testReset()",5,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.PortugueseAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.PortugueseAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.PortugueseAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.createComponents(String,Reader)",11,5,n/a,28,1,2,10,3
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.pt.PortugueseLightStemFilter.PortugueseLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.pt.PortugueseLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.pt.PortugueseLightStemmer.normFeminine(char[],int)",13,1,n/a,36,2,2,20,16
"org.apache.lucene.analysis.pt.PortugueseLightStemmer.removeSuffix(char[],int)",10,1,n/a,44,1,2,34,22
"org.apache.lucene.analysis.pt.PortugueseLightStemmer.stem(char[],int)",2,0,n/a,40,1,2,52,13
"org.apache.lucene.analysis.pt.PortugueseMinimalStemFilter.PortugueseMinimalStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.pt.PortugueseMinimalStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.pt.PortugueseMinimalStemmer.stem(char[],int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.pt.PortugueseStemFilter.PortugueseStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.pt.PortugueseStemFilter.incrementToken()",6,216,n/a,14,2,0,7,3
"org.apache.lucene.analysis.pt.PortugueseStemmer.stem(char[],int)",7,0,n/a,54,2,2,60,12
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Rule.Rule(String,int,String)",2,4,n/a,11,0,3,3,1
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Rule.matches(char[],int)",1,3,n/a,6,0,2,1,2
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Rule.replace(char[],int)",1,1,n/a,9,1,2,3,2
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSetExceptions.RuleWithSetExceptions(String,int,String,String[])",5,1,n/a,10,1,4,7,3
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSetExceptions.matches(char[],int)",2,3,n/a,4,0,2,1,2
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSuffixExceptions.RuleWithSuffixExceptions(String,int,String,String[])",4,1,n/a,11,1,4,11,4
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSuffixExceptions.matches(char[],int)",2,3,n/a,9,0,2,8,4
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Step.Step(String,Rule[],int,String[])",2,1,n/a,24,1,4,14,6
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Step.apply(char[],int)",3,8,n/a,21,2,2,18,8
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parse(Class<? extends RSLPStemmerBase>,String)",9,2,n/a,21,2,2,11,3
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parseList(String)",4,3,n/a,8,0,1,8,3
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parseRules(LineNumberReader,int)",40,1,n/a,35,5,2,18,7
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parseStep(LineNumberReader,String)",14,1,n/a,13,1,2,10,2
"org.apache.lucene.analysis.pt.RSLPStemmerBase.parseString(String)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.pt.RSLPStemmerBase.readLine(LineNumberReader)",4,2,n/a,9,1,1,6,4
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testExamples()",1,0,n/a,17,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testMoreExamples()",14,0,n/a,19,0,0,14,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter.testExamples()",1,0,n/a,17,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter.testExamples()",1,0,n/a,17,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer)",0,0,n/a,11,0,2,2,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader)",1,1,n/a,16,0,3,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,Collection<String>,float)",2,2,n/a,21,0,5,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,Collection<String>,int)",12,3,n/a,40,3,5,16,6
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,float)",2,2,n/a,19,0,4,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.QueryAutoStopWordAnalyzer(Version,Analyzer,IndexReader,int)",2,1,n/a,18,0,4,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader)",1,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader,String,float)",2,1,n/a,17,0,3,1,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader,String,int)",15,2,n/a,41,2,3,17,6
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader,float)",5,1,n/a,22,1,2,7,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.addStopWords(IndexReader,int)",5,0,n/a,22,1,2,7,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.getStopWords()",7,0,n/a,15,2,0,6,3
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.getStopWords(String)",3,0,n/a,11,0,1,2,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.reusableTokenStream(String,Reader)",12,46,n/a,47,3,2,21,6
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.tokenStream(String,Reader)",4,78,n/a,14,1,2,8,3
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.NonreusableAnalyzer.tokenStream(String,Reader)",2,78,n/a,7,0,2,3,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.search(Analyzer,String)",5,12,n/a,9,0,2,6,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.setUp()",13,0,n/a,18,1,0,16,2
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.tearDown()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testDefaultStopwordsAllFields()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testNoFieldNamePollution()",6,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testNoStopwords()",5,0,n/a,8,0,0,5,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testStopwordsAllFieldsMaxPercentDocs()",8,0,n/a,10,0,0,8,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testStopwordsPerFieldMaxDocFreq()",9,0,n/a,8,0,0,6,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testStopwordsPerFieldMaxPercentDocs()",8,0,n/a,8,0,0,6,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testTokenStream()",5,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.testWrappingNonReusableAnalyzer()",6,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.ReverseStringFilter(TokenStream)",1,0,n/a,15,0,1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.ReverseStringFilter(TokenStream,char)",1,1,n/a,17,0,2,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.ReverseStringFilter(Version,TokenStream)",1,2,n/a,13,0,2,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.ReverseStringFilter(Version,TokenStream,char)",1,3,n/a,17,0,3,3,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.incrementToken()",7,216,n/a,16,2,0,10,3
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(String)",1,0,n/a,12,0,1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(Version,String)",3,2,n/a,12,0,2,3,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(Version,char[])",1,1,n/a,8,0,2,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(Version,char[],int)",1,1,n/a,12,0,3,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(Version,char[],int,int)",4,5,n/a,72,3,4,43,15
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(char[])",1,0,n/a,10,0,1,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(char[],int)",1,0,n/a,13,0,2,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverse(char[],int,int)",1,2,n/a,14,0,3,1,1
"org.apache.lucene.analysis.reverse.ReverseStringFilter.reverseUnicode3(char[],int,int)",0,2,n/a,13,1,3,9,3
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testBackCompat()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testFilter()",4,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testFilterWithMark()",4,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testRandomStrings()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testReverseChar()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testReverseString()",6,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testReverseSupplementary()",10,0,n/a,12,0,0,5,1
"org.apache.lucene.analysis.reverse.TestReverseStringFilter.testReverseSupplementaryChar()",20,0,n/a,22,0,0,15,1
"org.apache.lucene.analysis.ro.RomanianAnalyzer.RomanianAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.ro.RomanianAnalyzer.RomanianAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.ro.RomanianAnalyzer.RomanianAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.ro.RomanianAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.ro.RomanianAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version)",2,0,n/a,5,0,1,1,2
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version,Map<?, ?>)",2,4,n/a,10,0,2,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version,Set<?>)",1,4,n/a,11,0,2,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version,Set<?>,Set<?>)",3,0,n/a,13,0,3,2,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.RussianAnalyzer(Version,String...)",2,0,n/a,8,0,2,1,1
"org.apache.lucene.analysis.ru.RussianAnalyzer.createComponents(String,Reader)",17,5,n/a,32,1,2,15,4
"org.apache.lucene.analysis.ru.RussianAnalyzer.getDefaultStopSet()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(AttributeFactory,Reader)",1,0,n/a,11,0,2,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(AttributeSource,Reader)",1,0,n/a,10,0,2,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(Reader)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(Version,AttributeFactory,Reader)",1,1,n/a,14,0,3,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(Version,AttributeSource,Reader)",1,1,n/a,13,0,3,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.RussianLetterTokenizer(Version,Reader)",1,2,n/a,10,0,2,1,1
"org.apache.lucene.analysis.ru.RussianLetterTokenizer.isTokenChar(int)",1,12,n/a,8,0,1,1,3
"org.apache.lucene.analysis.ru.RussianLightStemFilter.RussianLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.ru.RussianLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.ru.RussianLightStemmer.normalize(char[],int)",0,1,n/a,9,1,2,9,5
"org.apache.lucene.analysis.ru.RussianLightStemmer.removeCase(char[],int)",47,1,n/a,68,1,2,19,53
"org.apache.lucene.analysis.ru.RussianLightStemmer.stem(char[],int)",2,0,n/a,4,0,2,2,1
"org.apache.lucene.analysis.ru.RussianLowerCaseFilter.RussianLowerCaseFilter(TokenStream)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ru.RussianLowerCaseFilter.incrementToken()",4,216,n/a,15,2,0,9,3
"org.apache.lucene.analysis.ru.RussianStemFilter.RussianStemFilter(TokenStream)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.analysis.ru.RussianStemFilter.incrementToken()",7,216,n/a,18,2,0,8,5
"org.apache.lucene.analysis.ru.RussianStemFilter.setStemmer(RussianStemmer)",0,0,n/a,10,1,1,2,2
"org.apache.lucene.analysis.ru.RussianStemmer.RussianStemmer()",1,2,n/a,7,0,0,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.adjectival(StringBuilder)",3,1,n/a,16,0,1,5,3
"org.apache.lucene.analysis.ru.RussianStemmer.derivational(StringBuilder)",4,1,n/a,25,2,1,7,3
"org.apache.lucene.analysis.ru.RussianStemmer.findAndRemoveEnding(StringBuilder,char[][])",3,7,n/a,16,1,2,5,2
"org.apache.lucene.analysis.ru.RussianStemmer.findAndRemoveEnding(StringBuilder,char[][],char[][])",5,3,n/a,27,2,3,8,3
"org.apache.lucene.analysis.ru.RussianStemmer.findEnding(StringBuilder,char[][])",2,4,n/a,4,0,2,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.findEnding(StringBuilder,int,char[][])",1,2,n/a,34,3,3,19,6
"org.apache.lucene.analysis.ru.RussianStemmer.isVowel(char)",0,4,n/a,15,1,1,6,3
"org.apache.lucene.analysis.ru.RussianStemmer.markPositions(String)",16,1,n/a,41,1,1,21,13
"org.apache.lucene.analysis.ru.RussianStemmer.noun(StringBuilder)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.perfectiveGerund(StringBuilder)",2,1,n/a,13,0,1,1,2
"org.apache.lucene.analysis.ru.RussianStemmer.reflexive(StringBuilder)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.removeI(StringBuilder)",5,1,n/a,18,1,1,4,3
"org.apache.lucene.analysis.ru.RussianStemmer.removeSoft(StringBuilder)",5,1,n/a,18,1,1,4,3
"org.apache.lucene.analysis.ru.RussianStemmer.stem(String)",15,2,n/a,32,1,1,15,5
"org.apache.lucene.analysis.ru.RussianStemmer.stemWord(String)",2,0,n/a,8,0,1,2,1
"org.apache.lucene.analysis.ru.RussianStemmer.superlative(StringBuilder)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.ru.RussianStemmer.undoubleN(StringBuilder)",3,1,n/a,20,1,1,5,2
"org.apache.lucene.analysis.ru.RussianStemmer.verb(StringBuilder)",2,1,n/a,13,0,1,1,2
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testDigitsInRussianCharset()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testReusableTokenStream()",3,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testReusableTokenStream30()",3,0,n/a,9,0,0,3,1
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testUnicode30()",18,0,n/a,37,1,0,14,4
"org.apache.lucene.analysis.ru.TestRussianAnalyzer.testWithStemExclusionSet()",5,0,n/a,7,0,0,4,1
"org.apache.lucene.analysis.ru.TestRussianLetterTokenizer.testRussianLetterTokenizer()",3,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.ru.TestRussianLetterTokenizer.testRussianLetterTokenizerBWCompat()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.ru.TestRussianLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.ru.TestRussianLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ru.TestRussianLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.ru.TestRussianStem.testStem()",11,0,n/a,6,2,0,8,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Analyzer)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Analyzer,int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Analyzer,int,int)",1,1,n/a,3,0,3,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Analyzer,int,int,String,boolean,boolean)",3,2,n/a,39,1,6,12,5
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.ShingleAnalyzerWrapper(Version,int,int)",2,0,n/a,6,0,3,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.getMaxShingleSize()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.getMinShingleSize()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.getTokenSeparator()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.isOutputUnigrams()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.isOutputUnigramsIfNoShingles()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.reusableTokenStream(String,Reader)",12,46,n/a,23,2,2,16,3
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setMaxShingleSize(int)",1,0,n/a,14,1,1,3,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setMinShingleSize(int)",2,0,n/a,21,1,1,5,3
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setOutputUnigrams(boolean)",0,0,n/a,13,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setOutputUnigramsIfNoShingles(boolean)",0,0,n/a,16,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.setTokenSeparator(String)",0,0,n/a,10,0,1,1,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.tokenStream(String,Reader)",8,78,n/a,16,1,2,11,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.NonreusableAnalyzer.tokenStream(String,Reader)",2,78,n/a,7,0,2,3,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.compareRanks(ScoreDoc[],int[])",2,6,n/a,6,1,2,5,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.queryParsingTest(Analyzer,String)",4,4,n/a,6,0,2,4,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.setUpSearcher(Analyzer)",17,3,n/a,26,0,1,14,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testAltTokenSeparator()",6,0,n/a,27,0,0,4,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testNoTokenSeparator()",6,0,n/a,27,0,0,4,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testNonDefaultMinAndSameMaxShingleSize()",6,0,n/a,24,0,0,4,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testNonDefaultMinShingleSize()",6,0,n/a,24,0,0,4,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testNullTokenSeparator()",6,0,n/a,27,0,0,4,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testOutputUnigramsIfNoShinglesSingleToken()",3,0,n/a,12,0,0,2,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testReusableTokenStream()",4,0,n/a,13,0,0,3,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperBooleanQuery()",15,0,n/a,22,1,0,12,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperPhraseQuery()",16,0,n/a,22,1,0,15,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperPhraseQueryParsing()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperPhraseQueryParsingFails()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperQueryParsing()",4,0,n/a,11,0,0,3,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testShingleAnalyzerWrapperRequiredQueryParsing()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.testWrappedAnalyzerDoesNotReuse()",5,0,n/a,18,0,0,4,1
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.CircularSequence()",1,2,n/a,4,0,0,2,2
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.advance()",1,3,n/a,18,1,0,6,3
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.atMinValue()",0,1,n/a,12,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.getPreviousValue()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.getValue()",0,6,n/a,7,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence.reset()",0,4,n/a,11,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.InputWindowToken.InputWindowToken(AttributeSource)",2,3,n/a,5,0,1,3,1
"org.apache.lucene.analysis.shingle.ShingleFilter.ShingleFilter(TokenStream)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.ShingleFilter(TokenStream,String)",2,0,n/a,11,0,2,2,1
"org.apache.lucene.analysis.shingle.ShingleFilter.ShingleFilter(TokenStream,int)",1,1,n/a,10,0,2,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.ShingleFilter(TokenStream,int,int)",3,4,n/a,13,0,3,3,1
"org.apache.lucene.analysis.shingle.ShingleFilter.getNextToken(InputWindowToken)",23,2,n/a,64,3,1,33,10
"org.apache.lucene.analysis.shingle.ShingleFilter.incrementToken()",30,216,n/a,50,4,0,35,15
"org.apache.lucene.analysis.shingle.ShingleFilter.reset()",3,118,n/a,14,1,0,9,3
"org.apache.lucene.analysis.shingle.ShingleFilter.setMaxShingleSize(int)",1,1,n/a,11,1,1,3,2
"org.apache.lucene.analysis.shingle.ShingleFilter.setMinShingleSize(int)",3,1,n/a,20,1,1,6,3
"org.apache.lucene.analysis.shingle.ShingleFilter.setOutputUnigrams(boolean)",1,1,n/a,11,0,1,2,1
"org.apache.lucene.analysis.shingle.ShingleFilter.setOutputUnigramsIfNoShingles(boolean)",0,1,n/a,13,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.setTokenSeparator(String)",0,1,n/a,7,0,1,1,2
"org.apache.lucene.analysis.shingle.ShingleFilter.setTokenType(String)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleFilter.shiftInputWindow()",9,1,n/a,36,3,0,17,10
"org.apache.lucene.analysis.shingle.ShingleFilterTest.TestTokenStream.TestTokenStream(Token[])",5,4,n/a,8,0,1,6,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.TestTokenStream.incrementToken()",10,216,n/a,14,1,0,9,2
"org.apache.lucene.analysis.shingle.ShingleFilterTest.createToken(String,int,int)",1,305,n/a,3,0,3,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.createToken(String,int,int,int)",5,5,n/a,8,0,4,4,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.setUp()",5,0,n/a,10,0,0,2,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTest(String,int,int,Token[],Token[],int[],String[],boolean)",5,9,n/a,10,0,8,4,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTest(int,Token[],Token[],int[],String[],boolean)",4,12,n/a,8,0,6,3,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTest(int,int,Token[],Token[],int[],String[],boolean)",4,10,n/a,9,0,7,3,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTest(int,int,Token[],Token[],int[],String[],boolean,boolean)",5,4,n/a,11,0,8,4,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.shingleFilterTestCommon(ShingleFilter,Token[],int[],String[])",6,4,n/a,15,1,4,10,2
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilter()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterAltSeparator()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterNoSeparator()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithEmptyTokenStream()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithEmptyTokenStreamWithoutUnigrams()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithHoles()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithHolesWithoutUnigrams()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithSingleToken()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithSingleTokenWithoutUnigrams()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithoutUnigrams()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithoutUnigramsAltSeparator()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testBiGramFilterWithoutUnigramsNoSeparator()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilter()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterMinFourGram()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterMinTriGram()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterWithoutUnigrams()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterWithoutUnigramsMinFourGram()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testFourGramFilterWithoutUnigramsMinTriGram()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesSingleTokenCase()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesWithMultipleInputTokens()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesWithSimpleBigram()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testOutputUnigramsIfNoShinglesWithSimpleUnigramlessBigram()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testPositionIncrementEqualToN()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testPositionIncrementEqualToNWithoutUnigrams()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testPositionIncrementGreaterThanN()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testPositionIncrementGreaterThanNWithoutUnigrams()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testRandomHugeStrings()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testRandomStrings()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testReset()",7,0,n/a,17,0,0,5,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilter()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterAltSeparator()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterMinTriGram()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterNoSeparator()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterNullSeparator()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterWithoutUnigrams()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterWithoutUnigramsAltSeparator()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterWithoutUnigramsMinTriGram()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest.testTriGramFilterWithoutUnigramsNoSeparator()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Column()",2,3,n/a,9,2,0,5,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Column(Token)",4,9,n/a,5,0,1,3,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.Row()",1,5,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.getColumn()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.getIndex()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.getTokens()",0,10,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.setTokens(List<Token>)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row.toString()",1,0,n/a,7,0,0,1,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.getIndex()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.getMatrix()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.getRows()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.isFirst()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.isLast()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.setFirst(boolean)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.setLast(boolean)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.toString()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.getColumns()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.permutationIterator()",14,2,n/a,11,4,0,21,8
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.toString()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec.getTokenPositioner(Token)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec.getWeight(Token)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec.setTokenPositioner(Token,TokenPositioner)",0,0,n/a,3,0,2,0,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec.setWeight(Token,float)",0,1,n/a,3,0,2,0,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(Matrix,int,int,Character,boolean,TokenSettingsCodec)",13,0,n/a,35,0,6,19,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(TokenStream,int,int)",1,0,n/a,14,0,3,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(TokenStream,int,int,Character)",1,1,n/a,14,0,4,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(TokenStream,int,int,Character,boolean)",1,1,n/a,14,0,5,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.ShingleMatrixFilter(TokenStream,int,int,Character,boolean,TokenSettingsCodec)",12,1,n/a,30,0,6,18,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec.getTokenPositioner(Token)",2,1,n/a,17,1,1,8,4
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec.getWeight(Token)",6,1,n/a,14,1,1,3,3
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec.setTokenPositioner(Token,TokenPositioner)",2,0,n/a,10,0,2,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec.setWeight(Token,float)",4,1,n/a,13,1,2,3,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenPositioner.TokenPositioner(int)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenPositioner.getIndex()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenSettingsCodec.getTokenPositioner(Token)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenSettingsCodec.getWeight(Token)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenSettingsCodec.setTokenPositioner(Token,TokenPositioner)",n/a,0,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenSettingsCodec.setWeight(Token,float)",n/a,1,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec.getTokenPositioner(Token)",1,1,n/a,8,1,1,3,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec.getWeight(Token)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec.setTokenPositioner(Token,TokenPositioner)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec.setWeight(Token,float)",0,1,n/a,3,0,2,0,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.calculateShingleWeight(Token,List<Token>,int,List<Row>,List<Token>)",4,2,n/a,35,2,5,16,4
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getMatrix()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getMaximumShingleSize()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getMinimumShingleSize()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getNextInputToken(Token)",15,3,n/a,10,0,1,9,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getNextToken(Token)",15,1,n/a,10,0,1,9,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.getSpacerCharacter()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.incrementToken()",19,220,n/a,26,2,0,16,6
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.isIgnoringSinglePrefixOrSuffixShingle()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.nextTokensPermutation()",6,2,n/a,21,2,0,11,3
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.produceNextToken(Token)",41,1,n/a,101,6,1,56,27
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.readColumn()",17,2,n/a,41,2,0,22,8
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.reset()",2,92,n/a,6,0,0,3,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setIgnoringSinglePrefixOrSuffixShingle(boolean)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setMatrix(Matrix)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setMaximumShingleSize(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setMinimumShingleSize(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.setSpacerCharacter(Character)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.updateToken(Token,List<Token>,int,List<Row>,List<Token>)",13,1,n/a,19,0,5,6,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.TokenListStream.TokenListStream(Collection<Token>)",0,4,n/a,3,0,1,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.TokenListStream.incrementToken()",18,216,n/a,18,1,0,13,3
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.TokenListStream.reset()",0,92,n/a,4,0,0,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.assertNext(TokenStream,String)",5,6,n/a,5,0,2,3,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.assertNext(TokenStream,String,int,float,int,int)",19,132,n/a,12,0,6,10,2
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.assertNext(TokenStream,String,int,int)",10,6,n/a,8,0,4,6,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.createToken(String,int,int)",3,6,n/a,6,0,3,3,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.testBehavingAsShingleFilter()",24,0,n/a,25,0,0,16,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.testIterator()",9,0,n/a,10,1,0,9,2
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.testMatrix()",79,0,n/a,74,0,0,58,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.testTokenStream()",182,0,n/a,194,0,0,152,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.tokenFactory(String,int)",1,13,n/a,3,0,2,1,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.tokenFactory(String,int,float,int,int)",5,3,n/a,7,0,5,5,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.tokenFactory(String,int,float,int,int,TokenPositioner)",6,12,n/a,8,0,6,6,1
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.tokenFactory(String,int,int,int)",4,5,n/a,6,0,4,4,1
"org.apache.lucene.analysis.sinks.DateRecognizerSinkFilter.DateRecognizerSinkFilter()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.sinks.DateRecognizerSinkFilter.DateRecognizerSinkFilter(DateFormat)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.sinks.DateRecognizerSinkFilter.accept(AttributeSource)",3,1,n/a,14,2,1,7,4
"org.apache.lucene.analysis.sinks.DateRecognizerSinkTokenizerTest.test()",12,0,n/a,18,1,0,14,3
"org.apache.lucene.analysis.sinks.TokenRangeSinkFilter.TokenRangeSinkFilter(int,int)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.analysis.sinks.TokenRangeSinkFilter.accept(AttributeSource)",0,1,n/a,11,2,1,5,3
"org.apache.lucene.analysis.sinks.TokenRangeSinkFilter.reset()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.sinks.TokenRangeSinkTokenizerTest.test()",11,0,n/a,18,1,0,14,3
"org.apache.lucene.analysis.sinks.TokenTypeSinkFilter.TokenTypeSinkFilter(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.sinks.TokenTypeSinkFilter.accept(AttributeSource)",3,1,n/a,8,1,1,3,2
"org.apache.lucene.analysis.sinks.TokenTypeSinkTokenizerTest.WordTokenFilter.WordTokenFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.sinks.TokenTypeSinkTokenizerTest.WordTokenFilter.incrementToken()",4,216,n/a,8,1,0,5,3
"org.apache.lucene.analysis.sinks.TokenTypeSinkTokenizerTest.test()",24,0,n/a,25,2,0,19,4
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.SnowballAnalyzer(Version,String)",0,2,n/a,5,0,2,2,1
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.SnowballAnalyzer(Version,String,Set<?>)",3,1,n/a,6,0,3,2,1
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.SnowballAnalyzer(Version,String,String[])",2,0,n/a,9,0,3,2,1
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.reusableTokenStream(String,Reader)",12,46,n/a,26,1,2,14,5
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.tokenStream(String,Reader)",13,78,n/a,22,0,2,11,8
"org.apache.lucene.analysis.snowball.SnowballFilter.SnowballFilter(TokenStream,SnowballProgram)",1,16,n/a,4,0,2,2,1
"org.apache.lucene.analysis.snowball.SnowballFilter.SnowballFilter(TokenStream,String)",5,0,n/a,19,1,2,5,2
"org.apache.lucene.analysis.snowball.SnowballFilter.incrementToken()",10,216,n/a,21,2,0,13,4
"org.apache.lucene.analysis.snowball.TestSnowball.TestTokenStream.TestTokenStream()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.snowball.TestSnowball.TestTokenStream.incrementToken()",9,216,n/a,11,0,0,8,1
"org.apache.lucene.analysis.snowball.TestSnowball.testEmptyTerm()",5,0,n/a,5,3,0,6,2
"org.apache.lucene.analysis.snowball.TestSnowball.testEnglish()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.snowball.TestSnowball.testEnglishLowerCase()",6,0,n/a,12,0,0,6,1
"org.apache.lucene.analysis.snowball.TestSnowball.testFilterTokens()",24,0,n/a,17,0,0,15,1
"org.apache.lucene.analysis.snowball.TestSnowball.testReusableTokenStream()",3,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.snowball.TestSnowball.testStopwords()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.analysis.snowball.TestSnowball.testTurkish()",3,0,n/a,8,0,0,3,1
"org.apache.lucene.analysis.snowball.TestSnowball.testTurkishBWComp()",3,0,n/a,13,0,0,3,1
"org.apache.lucene.analysis.snowball.TestSnowballVocab.assertCorrectOutput(String,String)",7,17,n/a,6,2,2,6,2
"org.apache.lucene.analysis.snowball.TestSnowballVocab.testStemmers()",17,0,n/a,28,0,0,17,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.ClassicAnalyzer(Version)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.ClassicAnalyzer(Version,File)",3,2,n/a,12,0,2,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.ClassicAnalyzer(Version,Reader)",2,2,n/a,8,0,2,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.ClassicAnalyzer(Version,Set<?>)",2,2,n/a,8,0,2,2,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.createComponents(String,Reader)",9,5,n/a,5,2,2,9,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.getMaxTokenLength()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.ClassicAnalyzer.setMaxTokenLength(int)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicFilter.ClassicFilter(TokenStream)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicFilter.incrementToken()",6,216,n/a,29,2,0,17,10
"org.apache.lucene.analysis.standard.ClassicTokenizer.ClassicTokenizer(Version,AttributeFactory,Reader)",2,0,n/a,7,0,3,2,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.ClassicTokenizer(Version,AttributeSource,Reader)",2,0,n/a,7,0,3,2,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.ClassicTokenizer(Version,Reader)",2,2,n/a,12,0,2,2,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.end()",4,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.getMaxTokenLength()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.incrementToken()",15,216,n/a,39,4,0,19,6
"org.apache.lucene.analysis.standard.ClassicTokenizer.init(Version)",2,3,n/a,8,1,1,4,2
"org.apache.lucene.analysis.standard.ClassicTokenizer.isReplaceInvalidAcronym()",0,0,n/a,11,0,0,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.setMaxTokenLength(int)",0,4,n/a,5,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizer.setReplaceInvalidAcronym(boolean)",0,1,n/a,11,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.ClassicTokenizerImpl(InputStream)",2,2,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.ClassicTokenizerImpl(Reader)",0,2,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.getNextToken()",2,3,n/a,121,5,0,94,34
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.getText(CharTermAttribute)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yybegin(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yychar()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yycharat(int)",0,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yyclose()",1,0,n/a,9,0,0,4,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yylength()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yypushback(int)",2,0,n/a,13,0,1,3,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yyreset(Reader)",0,3,n/a,24,0,1,10,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yystate()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.yytext()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzRefill()",4,1,n/a,46,2,0,21,6
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzScanError(int)",1,2,n/a,24,1,1,5,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackAction()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackAction(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackAttribute()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackAttribute(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackCMap(String)",2,1,n/a,17,1,1,9,3
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackRowMap()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackRowMap(String,int,int[])",3,1,n/a,10,1,3,7,2
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackTrans()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl.zzUnpackTrans(String,int,int[])",3,1,n/a,12,1,3,10,3
"org.apache.lucene.analysis.standard.StandardAnalyzer.StandardAnalyzer(Version)",1,51,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.StandardAnalyzer(Version,File)",3,2,n/a,12,0,2,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.StandardAnalyzer(Version,Reader)",2,2,n/a,8,0,2,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.StandardAnalyzer(Version,Set<?>)",2,2,n/a,8,0,2,2,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.createComponents(String,Reader)",9,5,n/a,5,2,2,9,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.getMaxTokenLength()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.StandardAnalyzer.setMaxTokenLength(int)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.StandardFilter.StandardFilter(TokenStream)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.analysis.standard.StandardFilter.StandardFilter(Version,TokenStream)",1,38,n/a,4,0,2,2,1
"org.apache.lucene.analysis.standard.StandardFilter.incrementToken()",3,216,n/a,7,0,0,3,2
"org.apache.lucene.analysis.standard.StandardFilter.incrementTokenClassic()",6,1,n/a,24,2,0,17,10
"org.apache.lucene.analysis.standard.StandardTokenizer.StandardTokenizer(Version,AttributeFactory,Reader)",2,0,n/a,7,0,3,2,1
"org.apache.lucene.analysis.standard.StandardTokenizer.StandardTokenizer(Version,AttributeSource,Reader)",2,0,n/a,7,0,3,2,1
"org.apache.lucene.analysis.standard.StandardTokenizer.StandardTokenizer(Version,Reader)",2,49,n/a,12,0,2,2,1
"org.apache.lucene.analysis.standard.StandardTokenizer.end()",4,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.standard.StandardTokenizer.getMaxTokenLength()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.incrementToken()",15,216,n/a,39,4,0,19,6
"org.apache.lucene.analysis.standard.StandardTokenizer.init(Version)",6,3,n/a,14,1,1,8,4
"org.apache.lucene.analysis.standard.StandardTokenizer.isReplaceInvalidAcronym()",0,0,n/a,11,0,0,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.standard.StandardTokenizer.setMaxTokenLength(int)",0,4,n/a,5,0,1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizer.setReplaceInvalidAcronym(boolean)",0,1,n/a,11,0,1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.StandardTokenizerImpl(InputStream)",2,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.StandardTokenizerImpl(Reader)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.getNextToken()",2,3,n/a,115,5,0,86,30
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.getText(CharTermAttribute)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yybegin(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yychar()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yycharat(int)",0,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyclose()",1,0,n/a,9,0,0,4,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yylength()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yypushback(int)",2,0,n/a,13,0,1,3,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyreset(Reader)",0,3,n/a,24,0,1,10,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yystate()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.yytext()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzRefill()",4,1,n/a,46,2,0,21,6
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzScanError(int)",1,2,n/a,24,1,1,5,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackAction()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackAction(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackAttribute()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackAttribute(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackCMap(String)",2,1,n/a,17,1,1,9,3
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackRowMap()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackRowMap(String,int,int[])",3,1,n/a,10,1,3,7,2
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackTrans()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.StandardTokenizerImpl.zzUnpackTrans(String,int,int[])",3,1,n/a,12,1,3,10,3
"org.apache.lucene.analysis.standard.StandardTokenizerInterface.getNextToken()",n/a,3,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.standard.StandardTokenizerInterface.getText(CharTermAttribute)",n/a,3,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.standard.StandardTokenizerInterface.yychar()",n/a,6,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.standard.StandardTokenizerInterface.yylength()",n/a,6,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.standard.StandardTokenizerInterface.yyreset(Reader)",n/a,3,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.UAX29URLEmailAnalyzer(Version)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.UAX29URLEmailAnalyzer(Version,Reader)",2,1,n/a,8,0,2,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.UAX29URLEmailAnalyzer(Version,Set<?>)",1,1,n/a,7,0,2,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.createComponents(String,Reader)",8,5,n/a,5,2,2,8,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.getMaxTokenLength()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer.setMaxTokenLength(int)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(AttributeFactory,Reader)",1,0,n/a,5,0,2,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(AttributeSource,Reader)",1,0,n/a,5,0,2,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(InputStream)",2,0,n/a,5,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(Reader)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(Version,AttributeFactory,Reader)",2,2,n/a,7,0,3,2,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(Version,AttributeSource,Reader)",2,2,n/a,7,0,3,2,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.UAX29URLEmailTokenizer(Version,Reader)",2,5,n/a,10,0,2,2,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.end()",4,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.getMaxTokenLength()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.getScannerFor(Version,Reader)",5,3,n/a,9,1,2,5,3
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.incrementToken()",11,216,n/a,22,2,0,14,4
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer.setMaxTokenLength(int)",0,4,n/a,5,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.UAX29URLEmailTokenizerImpl(InputStream)",2,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.UAX29URLEmailTokenizerImpl(Reader)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.getNextToken()",2,3,n/a,129,5,0,99,36
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.getText(CharTermAttribute)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yybegin(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yychar()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yycharat(int)",0,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yyclose()",1,0,n/a,9,0,0,4,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yylength()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yypushback(int)",2,0,n/a,13,0,1,3,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yyreset(Reader)",0,3,n/a,24,0,1,10,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yystate()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.yytext()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzRefill()",4,1,n/a,46,2,0,21,6
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzScanError(int)",1,2,n/a,24,1,1,5,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackAction()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackAction(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackAttribute()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackAttribute(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackCMap(String)",2,1,n/a,17,1,1,9,3
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackRowMap()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackRowMap(String,int,int[])",3,1,n/a,10,1,3,7,2
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackTrans()",2,1,n/a,7,0,0,5,1
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl.zzUnpackTrans(String,int,int[])",3,2,n/a,12,1,3,10,3
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.StandardTokenizerImpl31(InputStream)",2,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.StandardTokenizerImpl31(Reader)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.getNextToken()",2,3,n/a,115,5,0,86,30
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.getText(CharTermAttribute)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yybegin(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yychar()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yycharat(int)",0,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yyclose()",1,0,n/a,9,0,0,4,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yylength()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yypushback(int)",2,0,n/a,13,0,1,3,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yyreset(Reader)",0,3,n/a,24,0,1,10,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yystate()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.yytext()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzRefill()",4,1,n/a,46,2,0,21,6
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzScanError(int)",1,2,n/a,24,1,1,5,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackAction()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackAction(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackAttribute()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackAttribute(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackCMap(String)",2,1,n/a,17,1,1,9,3
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackRowMap()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackRowMap(String,int,int[])",3,1,n/a,10,1,3,7,2
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackTrans()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31.zzUnpackTrans(String,int,int[])",3,1,n/a,12,1,3,10,3
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.UAX29URLEmailTokenizerImpl31(InputStream)",2,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.UAX29URLEmailTokenizerImpl31(Reader)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.getNextToken()",2,3,n/a,123,5,0,94,34
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.getText(CharTermAttribute)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yybegin(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yychar()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yycharat(int)",0,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yyclose()",1,0,n/a,9,0,0,4,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yylength()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yypushback(int)",2,0,n/a,13,0,1,3,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yyreset(Reader)",0,3,n/a,24,0,1,10,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yystate()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.yytext()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzRefill()",4,1,n/a,46,2,0,21,6
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzScanError(int)",1,2,n/a,24,1,1,5,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackAction()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackAction(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackAttribute()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackAttribute(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackCMap(String)",2,1,n/a,17,1,1,9,3
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackRowMap()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackRowMap(String,int,int[])",3,1,n/a,10,1,3,7,2
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackTrans()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31.zzUnpackTrans(String,int,int[])",3,1,n/a,12,1,3,10,3
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.UAX29URLEmailTokenizerImpl34(InputStream)",2,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.UAX29URLEmailTokenizerImpl34(Reader)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.getNextToken()",2,3,n/a,123,5,0,94,34
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.getText(CharTermAttribute)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yybegin(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yychar()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yycharat(int)",0,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yyclose()",1,0,n/a,9,0,0,4,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yylength()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yypushback(int)",2,0,n/a,13,0,1,3,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yyreset(Reader)",0,3,n/a,24,0,1,10,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yystate()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.yytext()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzRefill()",4,1,n/a,46,2,0,21,6
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzScanError(int)",1,2,n/a,24,1,1,5,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackAction()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackAction(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackAttribute()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackAttribute(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackCMap(String)",2,1,n/a,17,1,1,9,3
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackRowMap()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackRowMap(String,int,int[])",3,1,n/a,10,1,3,7,2
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackTrans()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34.zzUnpackTrans(String,int,int[])",3,1,n/a,12,1,3,10,3
"org.apache.lucene.analysis.stempel.StempelFilter.StempelFilter(TokenStream,StempelStemmer)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.stempel.StempelFilter.StempelFilter(TokenStream,StempelStemmer,int)",1,1,n/a,13,0,3,3,1
"org.apache.lucene.analysis.stempel.StempelFilter.incrementToken()",6,216,n/a,14,2,0,7,5
"org.apache.lucene.analysis.stempel.StempelStemmer.StempelStemmer(InputStream)",2,0,n/a,8,0,1,1,1
"org.apache.lucene.analysis.stempel.StempelStemmer.StempelStemmer(Trie)",0,2,n/a,8,0,1,1,1
"org.apache.lucene.analysis.stempel.StempelStemmer.load(InputStream)",8,2,n/a,17,2,1,8,2
"org.apache.lucene.analysis.stempel.StempelStemmer.stem(CharSequence)",5,0,n/a,18,0,1,9,3
"org.apache.lucene.analysis.sv.SwedishAnalyzer.SwedishAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.sv.SwedishAnalyzer.SwedishAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.sv.SwedishAnalyzer.SwedishAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.sv.SwedishAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.sv.SwedishAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.sv.SwedishLightStemFilter.SwedishLightStemFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.sv.SwedishLightStemFilter.incrementToken()",6,216,n/a,12,2,0,6,3
"org.apache.lucene.analysis.sv.SwedishLightStemmer.stem(char[],int)",19,0,n/a,39,1,2,18,28
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.sv.TestSwedishLightStemFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.sv.TestSwedishLightStemFilter.testRandomStrings()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.sv.TestSwedishLightStemFilter.testVocabulary()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.synonym.SolrSynonymParser.SolrSynonymParser(boolean,boolean,Analyzer)",1,1,n/a,5,0,3,3,1
"org.apache.lucene.analysis.synonym.SolrSynonymParser.add(Reader)",6,3,n/a,12,1,1,7,2
"org.apache.lucene.analysis.synonym.SolrSynonymParser.addInternal(BufferedReader)",21,1,n/a,48,3,1,39,12
"org.apache.lucene.analysis.synonym.SolrSynonymParser.split(String,String)",18,4,n/a,26,3,2,20,7
"org.apache.lucene.analysis.synonym.SolrSynonymParser.unescape(String)",9,3,n/a,15,3,1,11,5
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingInput.reset()",0,5,n/a,6,0,0,4,1
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.PendingOutputs()",0,1,n/a,4,0,0,2,1
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.add(char[],int,int,int)",6,1,n/a,21,1,4,13,4
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.getLastEndOffset()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.pullNext()",1,2,n/a,10,1,0,7,2
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs.reset()",0,2,n/a,4,0,0,2,1
"org.apache.lucene.analysis.synonym.SynonymFilter.SynonymFilter(TokenStream,SynonymMap,boolean)",6,1,n/a,29,1,3,16,3
"org.apache.lucene.analysis.synonym.SynonymFilter.addOutput(BytesRef,int,int)",8,1,n/a,51,4,3,33,8
"org.apache.lucene.analysis.synonym.SynonymFilter.capture()",5,2,n/a,11,0,0,7,1
"org.apache.lucene.analysis.synonym.SynonymFilter.getCaptureCount()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.synonym.SynonymFilter.incrementToken()",23,216,n/a,92,4,0,49,15
"org.apache.lucene.analysis.synonym.SynonymFilter.parse()",22,1,n/a,115,5,0,59,16
"org.apache.lucene.analysis.synonym.SynonymFilter.reset()",3,118,n/a,19,1,0,9,3
"org.apache.lucene.analysis.synonym.SynonymFilter.rollIncr(int)",0,9,n/a,9,1,1,4,2
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.Builder(boolean)",0,0,n/a,5,0,1,1,1
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.add(CharsRef,CharsRef,boolean)",3,0,n/a,14,0,3,1,1
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.add(CharsRef,int,CharsRef,int,boolean)",15,1,n/a,42,1,5,22,7
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.analyze(Analyzer,String,CharsRef)",16,0,n/a,33,2,3,23,6
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.build()",33,0,n/a,63,4,0,47,8
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.countWords(CharsRef)",0,2,n/a,11,2,1,7,3
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.hasHoles(CharsRef)",0,2,n/a,16,2,1,11,6
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.join(String[],CharsRef)",4,0,n/a,25,3,2,16,5
"org.apache.lucene.analysis.synonym.SynonymMap.SynonymMap(FST<BytesRef>,BytesRefHash,int)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testEscapedStuff()",12,0,n/a,5,2,0,10,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidAnalyzesToNothingInput()",4,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidAnalyzesToNothingOutput()",4,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidDoubleMap()",4,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidPositionsInput()",4,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testInvalidPositionsOutput()",4,0,n/a,7,0,0,3,1
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser.testSimple()",13,0,n/a,5,2,0,11,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.add(String,String,boolean)",5,42,n/a,5,0,3,1,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.assertEquals(CharTermAttribute,String)",7,10,n/a,7,1,2,6,2
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.getRandomString(char,int,int)",2,3,n/a,9,1,3,8,2
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.pruneDups(List<OneSyn>)",7,1,n/a,16,3,1,10,4
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.randomNonEmptyString()",4,6,n/a,8,2,0,4,4
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.slowSynMatcher(String,List<OneSyn>,int)",28,1,n/a,101,5,3,81,28
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testBasic()",41,0,n/a,48,0,0,34,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testBasic2()",21,0,n/a,27,1,0,19,2
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testEmptyTerm()",16,0,n/a,5,3,0,16,3
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testIncludeOrig()",22,0,n/a,5,2,0,22,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testMatching()",20,0,n/a,5,2,0,20,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testMultiwordOffsets()",8,0,n/a,5,2,0,8,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testOutputHangsOffEnd()",18,0,n/a,23,0,0,15,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRandom()",43,0,n/a,58,2,0,45,8
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRandom2()",15,0,n/a,5,3,0,16,3
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRandomHuge()",15,0,n/a,5,3,0,16,3
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRecursion()",8,0,n/a,5,2,0,8,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRecursion2()",9,0,n/a,5,2,0,9,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRecursion3()",8,0,n/a,5,2,0,8,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRecursion4()",9,0,n/a,5,2,0,9,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRepeatsOff()",10,0,n/a,5,2,0,10,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testRepeatsOn()",10,0,n/a,5,2,0,10,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.testVanishingTerms()",11,0,n/a,5,2,0,9,1
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.verify(String,String)",38,16,n/a,51,4,2,37,10
"org.apache.lucene.analysis.synonym.TestWordnetSynonymParser.testSynonyms()",12,0,n/a,5,2,0,9,1
"org.apache.lucene.analysis.synonym.WordnetSynonymParser.WordnetSynonymParser(boolean,boolean,Analyzer)",1,1,n/a,5,0,3,3,1
"org.apache.lucene.analysis.synonym.WordnetSynonymParser.add(Reader)",12,4,n/a,32,3,1,23,5
"org.apache.lucene.analysis.synonym.WordnetSynonymParser.addInternal(CharsRef[],int)",2,2,n/a,16,3,2,14,6
"org.apache.lucene.analysis.synonym.WordnetSynonymParser.parseSynonym(String,CharsRef)",6,1,n/a,9,1,2,6,2
"org.apache.lucene.analysis.th.TestThaiAnalyzer.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testAnalyzer30()",5,0,n/a,19,0,0,5,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testAttributeReuse()",8,0,n/a,11,0,0,6,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testBackwardsStopWords()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testBuggyTokenType30()",2,0,n/a,12,0,0,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testOffsets()",2,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testPositionIncrements()",3,0,n/a,18,0,0,3,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testRandomHugeStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testReusableTokenStream()",4,0,n/a,12,0,0,4,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testReusableTokenStream30()",4,0,n/a,14,0,0,4,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testStopWords()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.th.TestThaiAnalyzer.testTokenType()",2,0,n/a,9,0,0,1,1
"org.apache.lucene.analysis.th.ThaiAnalyzer.ThaiAnalyzer(Version)",2,0,n/a,8,0,1,1,2
"org.apache.lucene.analysis.th.ThaiAnalyzer.ThaiAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.th.ThaiAnalyzer.createComponents(String,Reader)",7,5,n/a,21,0,2,6,2
"org.apache.lucene.analysis.th.ThaiAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.th.ThaiWordFilter.ThaiWordFilter(TokenStream)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.analysis.th.ThaiWordFilter.ThaiWordFilter(Version,TokenStream)",5,2,n/a,8,0,2,4,3
"org.apache.lucene.analysis.th.ThaiWordFilter.incrementToken()",35,216,n/a,52,3,0,34,11
"org.apache.lucene.analysis.th.ThaiWordFilter.reset()",1,118,n/a,8,0,0,5,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.append(CharSequence)",n/a,52,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.append(CharSequence,int,int)",n/a,7,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.append(CharTermAttribute)",n/a,8,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.append(String)",n/a,52,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.append(StringBuilder)",n/a,52,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.append(char)",n/a,4,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.buffer()",n/a,104,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.copyBuffer(char[],int,int)",n/a,40,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.resizeBuffer(int)",n/a,26,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setEmpty()",n/a,60,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute.setLength(int)",n/a,64,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(CharSequence)",3,60,n/a,5,0,1,3,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(CharSequence,int,int)",15,13,n/a,35,2,3,28,15
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(CharTermAttribute)",5,8,n/a,8,0,1,6,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(String)",4,60,n/a,8,0,1,6,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(StringBuilder)",4,60,n/a,8,0,1,6,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)",1,4,n/a,4,0,1,2,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.appendNull()",1,4,n/a,8,0,0,6,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.buffer()",0,119,n/a,3,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.charAt(int)",1,0,n/a,5,0,1,3,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clear()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()",2,6,n/a,8,0,0,4,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyBuffer(char[],int,int)",2,61,n/a,5,0,3,3,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyTo(AttributeImpl)",2,4,n/a,10,1,1,5,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.equals(Object)",0,1,n/a,18,3,1,13,6
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.growTermBuffer(int)",1,3,n/a,7,1,1,2,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.hashCode()",1,1,n/a,6,0,0,3,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.length()",0,16,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.reflectWith(AttributeReflector)",2,10,n/a,4,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.resizeBuffer(int)",2,34,n/a,10,1,1,5,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.resizeTermBuffer(int)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setEmpty()",0,70,n/a,4,0,0,2,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setLength(int)",1,66,n/a,6,0,1,4,2
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setTermBuffer(String)",3,1,n/a,7,0,1,4,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setTermBuffer(String,int,int)",4,1,n/a,8,0,3,5,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setTermBuffer(char[],int,int)",1,2,n/a,4,0,3,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setTermLength(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.subSequence(int,int)",2,0,n/a,5,0,2,3,3
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.term()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.termBuffer()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.termLength()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.toString()",1,10,n/a,14,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttribute.getFlags()",n/a,10,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.FlagsAttribute.setFlags(int)",n/a,9,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.equals(Object)",0,0,n/a,10,1,1,5,3
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.getFlags()",0,11,n/a,12,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.hashCode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.setFlags(int)",0,9,n/a,6,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.KeywordAttribute.isKeyword()",n/a,42,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.KeywordAttribute.setKeyword(boolean)",n/a,4,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.equals(Object)",2,0,n/a,9,0,1,6,3
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.hashCode()",0,0,n/a,4,0,0,1,2
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.isKeyword()",0,44,n/a,10,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.setKeyword(boolean)",0,4,n/a,10,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttribute.endOffset()",n/a,57,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.OffsetAttribute.setOffset(int,int)",n/a,103,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.OffsetAttribute.startOffset()",n/a,66,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.clear()",0,2,n/a,5,0,0,2,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.endOffset()",0,57,n/a,6,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.equals(Object)",0,0,n/a,11,1,1,6,4
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.hashCode()",0,0,n/a,6,0,0,3,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.setOffset(int,int)",0,103,n/a,6,0,2,2,1
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.startOffset()",0,67,n/a,8,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttribute.getPayload()",n/a,22,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.PayloadAttribute.setPayload(Payload)",n/a,13,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.PayloadAttributeImpl()",0,0,n/a,4,0,0,0,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.PayloadAttributeImpl(Payload)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()",2,5,n/a,8,1,0,4,2
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.copyTo(AttributeImpl)",2,3,n/a,5,0,1,2,2
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.equals(Object)",1,0,n/a,14,2,1,8,6
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.getPayload()",0,22,n/a,6,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.setPayload(Payload)",0,13,n/a,6,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.getPositionIncrement()",n/a,48,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute.setPositionIncrement(int)",n/a,68,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.equals(Object)",0,0,n/a,11,1,1,6,3
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.getPositionIncrement()",0,48,n/a,6,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.hashCode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.setPositionIncrement(int)",1,69,n/a,11,1,1,3,2
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.getPositionLength()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute.setPositionLength(int)",n/a,4,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.equals(Object)",0,0,n/a,11,1,1,6,3
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.getPositionLength()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.hashCode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.setPositionLength(int)",1,5,n/a,10,1,1,3,2
"org.apache.lucene.analysis.tokenattributes.TermAttribute.resizeTermBuffer(int)",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TermAttribute.setTermBuffer(String)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TermAttribute.setTermBuffer(String,int,int)",n/a,1,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TermAttribute.setTermBuffer(char[],int,int)",n/a,2,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TermAttribute.setTermLength(int)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TermAttribute.term()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TermAttribute.termBuffer()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TermAttribute.termLength()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TypeAttribute.setType(String)",n/a,36,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TypeAttribute.type()",n/a,35,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.TypeAttributeImpl()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.TypeAttributeImpl(String)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.clear()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.equals(Object)",1,0,n/a,11,1,1,6,4
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.setType(String)",0,36,n/a,5,0,1,1,1
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.type()",0,36,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer.testBasics()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer.testExclude()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer.testRandomStrings()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer.testResourcesAvailable()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter.testDecomposed()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter.testDecomposed2()",4,0,n/a,12,0,0,3,1
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter.testEmptyTerm()",5,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter.testTurkishLowerCaseFilter()",4,0,n/a,10,0,0,3,1
"org.apache.lucene.analysis.tr.TurkishAnalyzer.TurkishAnalyzer(Version)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.tr.TurkishAnalyzer.TurkishAnalyzer(Version,Set<?>)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.analysis.tr.TurkishAnalyzer.TurkishAnalyzer(Version,Set<?>,Set<?>)",3,1,n/a,14,0,3,2,1
"org.apache.lucene.analysis.tr.TurkishAnalyzer.createComponents(String,Reader)",9,5,n/a,24,0,2,8,2
"org.apache.lucene.analysis.tr.TurkishAnalyzer.getDefaultStopSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter.TurkishLowerCaseFilter(TokenStream)",1,3,n/a,9,0,1,1,1
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter.delete(char[],int,int)",1,1,n/a,9,0,3,3,2
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter.incrementToken()",10,216,n/a,38,5,0,24,9
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter.isBeforeDot(char[],int,int)",3,1,n/a,15,1,3,9,4
"org.apache.lucene.analysis.util.CharArrayIterator.clone()",2,0,n/a,9,1,0,3,2
"org.apache.lucene.analysis.util.CharArrayIterator.current()",1,5,n/a,3,0,0,1,2
"org.apache.lucene.analysis.util.CharArrayIterator.first()",1,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.util.CharArrayIterator.getBeginIndex()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getEndIndex()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getIndex()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getLength()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getStart()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.getText()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.CharArrayIterator.jreBugWorkaround(char)",n/a,1,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.analysis.util.CharArrayIterator.last()",1,0,n/a,4,0,0,2,2
"org.apache.lucene.analysis.util.CharArrayIterator.newSentenceInstance()",2,0,n/a,5,3,0,5,4
"org.apache.lucene.analysis.util.CharArrayIterator.newWordInstance()",2,1,n/a,5,3,0,5,4
"org.apache.lucene.analysis.util.CharArrayIterator.next()",1,0,n/a,8,1,0,4,2
"org.apache.lucene.analysis.util.CharArrayIterator.previous()",1,0,n/a,8,1,0,4,2
"org.apache.lucene.analysis.util.CharArrayIterator.setIndex(int)",4,0,n/a,6,0,1,4,3
"org.apache.lucene.analysis.util.CharArrayIterator.setText(char[],int,int)",0,1,n/a,14,0,3,5,1
"org.apache.lucene.analysis.util.OpenStringBuilder.OpenStringBuilder()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.OpenStringBuilder(char[],int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.OpenStringBuilder(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.append(CharSequence)",2,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.append(CharSequence,int,int)",3,1,n/a,7,1,3,6,2
"org.apache.lucene.analysis.util.OpenStringBuilder.append(char)",1,10,n/a,4,0,1,2,1
"org.apache.lucene.analysis.util.OpenStringBuilder.capacity()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.charAt(int)",0,53,n/a,3,0,1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.flush()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.analysis.util.OpenStringBuilder.getArray()",0,5,n/a,1,0,0,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.length()",0,24,n/a,1,0,0,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.reserve(int)",1,4,n/a,3,0,1,2,2
"org.apache.lucene.analysis.util.OpenStringBuilder.reset()",0,4,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.resize(int)",3,2,n/a,5,0,1,3,1
"org.apache.lucene.analysis.util.OpenStringBuilder.set(char[],int)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.analysis.util.OpenStringBuilder.setCharAt(int,char)",0,17,n/a,3,0,2,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.setLength(int)",0,76,n/a,1,0,1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.size()",0,5,n/a,1,0,0,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.subSequence(int,int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.toCharArray()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.analysis.util.OpenStringBuilder.toString()",2,1,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.unsafeWrite(char)",0,46,n/a,3,0,1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.unsafeWrite(char[],int,int)",1,1,n/a,4,0,3,2,1
"org.apache.lucene.analysis.util.OpenStringBuilder.unsafeWrite(int)",1,0,n/a,1,0,1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(OpenStringBuilder)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(String)",5,0,n/a,5,0,1,3,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(char)",2,2,n/a,6,1,1,3,2
"org.apache.lucene.analysis.util.OpenStringBuilder.write(char[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(char[],int,int)",2,18,n/a,4,0,3,2,1
"org.apache.lucene.analysis.util.OpenStringBuilder.write(int)",1,0,n/a,1,0,1,1,1
"org.apache.lucene.analysis.util.StemmerUtil.delete(char[],int,int)",1,13,n/a,13,0,3,3,2
"org.apache.lucene.analysis.util.StemmerUtil.deleteN(char[],int,int,int)",1,22,n/a,15,0,4,5,2
"org.apache.lucene.analysis.util.StemmerUtil.endsWith(char[],int,String)",2,387,n/a,17,0,3,9,4
"org.apache.lucene.analysis.util.StemmerUtil.endsWith(char[],int,char[])",0,4,n/a,17,0,3,9,4
"org.apache.lucene.analysis.util.StemmerUtil.startsWith(char[],int,String)",2,20,n/a,17,0,3,9,4
"org.apache.lucene.analysis.util.TestCharArrayIterator.consume(BreakIterator,CharacterIterator)",2,2,n/a,5,0,2,2,2
"org.apache.lucene.analysis.util.TestCharArrayIterator.doTests(CharArrayIterator)",86,2,n/a,64,1,1,44,2
"org.apache.lucene.analysis.util.TestCharArrayIterator.testConsumeSentenceInstance()",6,0,n/a,9,1,0,8,2
"org.apache.lucene.analysis.util.TestCharArrayIterator.testConsumeWordInstance()",6,0,n/a,9,1,0,8,2
"org.apache.lucene.analysis.util.TestCharArrayIterator.testSentenceInstance()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.util.TestCharArrayIterator.testWordInstance()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.WikipediaTokenizer(AttributeFactory,Reader,int,Set<String>)",3,0,n/a,13,0,4,3,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.WikipediaTokenizer(AttributeSource,Reader,int,Set<String>)",3,0,n/a,13,0,4,3,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.WikipediaTokenizer(Reader)",2,1,n/a,9,0,1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.WikipediaTokenizer(Reader,int,Set<String>)",3,1,n/a,13,0,3,3,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.collapseAndSaveTokens(int,String)",28,1,n/a,37,2,2,27,6
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.collapseTokens(int)",19,1,n/a,33,2,1,22,6
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.end()",4,39,n/a,6,0,0,2,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.incrementToken()",13,216,n/a,37,1,0,22,11
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.init(int,Set<String>)",0,3,n/a,4,0,2,2,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.reset()",2,92,n/a,12,0,0,4,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.setupSavedToken(int,String)",3,2,n/a,5,0,2,3,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer.setupToken()",6,2,n/a,5,0,0,3,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.WikipediaTokenizerImpl(InputStream)",2,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.WikipediaTokenizerImpl(Reader)",0,0,n/a,9,0,1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.getNextToken()",36,0,n/a,265,5,0,351,108
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.getNumWikiTokensSeen()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.getPositionIncrement()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.getText(CharTermAttribute)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.reset()",0,0,n/a,7,0,0,5,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.setText(StringBuilder)",1,0,n/a,5,0,1,3,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yybegin(int)",0,34,n/a,8,0,1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yychar()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yycharat(int)",0,0,n/a,14,0,1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yyclose()",1,0,n/a,9,0,0,4,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yylength()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yypushback(int)",2,0,n/a,13,0,1,3,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yyreset(Reader)",0,0,n/a,24,0,1,10,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yystate()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.yytext()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzRefill()",4,1,n/a,46,2,0,21,6
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzScanError(int)",1,2,n/a,24,1,1,5,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackAction()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackAction(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackAttribute()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackAttribute(String,int,int[])",3,1,n/a,11,1,3,9,3
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackCMap(String)",2,1,n/a,17,1,1,9,3
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackRowMap()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackRowMap(String,int,int[])",3,1,n/a,10,1,3,7,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackTrans()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl.zzUnpackTrans(String,int,int[])",3,1,n/a,12,1,3,10,3
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.checkLinkPhrases(WikipediaTokenizer)",1,2,n/a,6,0,1,1,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testBoth()",17,0,n/a,28,1,0,17,2
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testHandwritten()",3,0,n/a,50,0,0,3,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testLinkPhrases()",3,0,n/a,4,0,0,2,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testLinks()",3,0,n/a,11,0,0,3,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testLucene1133()",9,0,n/a,17,0,0,8,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testRandomHugeStrings()",4,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testRandomStrings()",4,0,n/a,5,2,0,4,1
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest.testSimple()",4,0,n/a,11,0,0,3,1
"org.apache.lucene.benchmark.BenchmarkTestCase.afterClassBenchmarkTestCase()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.algLinesToText(String[])",8,1,n/a,12,1,1,11,3
"org.apache.lucene.benchmark.BenchmarkTestCase.beforeClassBenchmarkTestCase()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.BenchmarkTestCase.copyToWorkDir(String)",9,2,n/a,12,1,1,8,2
"org.apache.lucene.benchmark.BenchmarkTestCase.execBenchmark(String[])",5,38,n/a,8,0,1,5,1
"org.apache.lucene.benchmark.BenchmarkTestCase.getWorkDir()",0,25,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.getWorkDirPath()",3,1,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.getWorkDirResourcePath(String)",4,2,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.BenchmarkTestCase.logTstLogic(String)",2,1,n/a,6,0,1,4,2
"org.apache.lucene.benchmark.byTask.Benchmark.Benchmark(Reader)",6,2,n/a,15,1,1,7,3
"org.apache.lucene.benchmark.byTask.Benchmark.exec(String[])",26,1,n/a,37,1,1,22,7
"org.apache.lucene.benchmark.byTask.Benchmark.execute()",3,2,n/a,11,1,0,5,2
"org.apache.lucene.benchmark.byTask.Benchmark.getAlgorithm()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.Benchmark.getRunData()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.Benchmark.main(String[])",1,0,n/a,7,0,1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.PerfRunData(Config)",26,7,n/a,26,1,1,13,2
"org.apache.lucene.benchmark.byTask.PerfRunData.close()",5,1,n/a,13,2,0,6,3
"org.apache.lucene.benchmark.byTask.PerfRunData.createDirectory(boolean,String,String)",10,2,n/a,13,2,3,8,4
"org.apache.lucene.benchmark.byTask.PerfRunData.getAnalyzer()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getConfig()",0,18,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getDirectory()",0,4,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getDocMaker()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getFacetSource()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getIndexReader()",1,1,n/a,11,1,0,3,2
"org.apache.lucene.benchmark.byTask.PerfRunData.getIndexSearcher()",1,0,n/a,11,1,0,3,2
"org.apache.lucene.benchmark.byTask.PerfRunData.getIndexWriter()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getLocale()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getPerfObject(String)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getPoints()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getQueryMaker(ReadTask)",6,1,n/a,19,2,1,9,3
"org.apache.lucene.benchmark.byTask.PerfRunData.getStartTimeMillis()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getTaxonomyDir()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.getTaxonomyReader()",1,0,n/a,11,1,0,3,2
"org.apache.lucene.benchmark.byTask.PerfRunData.getTaxonomyWriter()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.reinit(boolean)",8,1,n/a,20,0,1,12,1
"org.apache.lucene.benchmark.byTask.PerfRunData.resetInputs()",4,1,n/a,7,1,0,4,2
"org.apache.lucene.benchmark.byTask.PerfRunData.setAnalyzer(Analyzer)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setDirectory(Directory)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setIndexReader(IndexReader)",3,2,n/a,24,1,1,9,4
"org.apache.lucene.benchmark.byTask.PerfRunData.setIndexWriter(IndexWriter)",0,2,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setLocale(Locale)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setPerfObject(String,Object)",1,1,n/a,8,0,2,1,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setStartTimeMillis()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.benchmark.byTask.PerfRunData.setTaxonomyReader(TaxonomyReader)",2,1,n/a,19,1,1,7,4
"org.apache.lucene.benchmark.byTask.PerfRunData.setTaxonomyWriter(TaxonomyWriter)",0,2,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.MyMergePolicy.MyMergePolicy()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.MyMergeScheduler.MyMergeScheduler()",1,0,n/a,4,0,0,2,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.assertEqualCollation(Analyzer,Analyzer,String)",21,4,n/a,16,0,3,13,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.assertEqualShingle(Analyzer,String,String[])",1,4,n/a,4,0,3,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.disableCountingLines(boolean)",1,1,n/a,23,0,1,2,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.doTestDisableCounting(boolean)",17,2,n/a,23,2,1,16,6
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.getCollatorConfig(String,String)",1,4,n/a,21,0,2,2,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.getLocaleConfig(String)",1,5,n/a,19,0,1,2,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.getReuters20LinesFile()",1,18,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.getShingleConfig(String)",1,4,n/a,12,0,1,2,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testBGSearchTaskThreads()",2,0,n/a,23,0,0,4,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testCloseIndexFalse()",8,0,n/a,34,0,0,6,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testCollator()",32,0,n/a,24,0,0,12,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testDeleteByPercent()",8,0,n/a,31,0,0,6,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testDisableCounting()",2,0,n/a,7,0,0,2,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testDocMakerThreadSafety()",9,0,n/a,32,1,0,12,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testExhaustContentSource()",19,0,n/a,39,0,0,10,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testExhaustedLooped()",8,0,n/a,33,0,0,6,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testForceMerge()",14,0,n/a,40,0,0,9,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testHighlighting()",22,0,n/a,34,0,0,12,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testHighlightingNoTvNoStore()",6,0,n/a,28,1,0,8,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testHighlightingTV()",22,0,n/a,35,0,0,12,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testIndexAndSearchTasks()",19,0,n/a,33,0,0,10,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testIndexWriterSettings()",26,0,n/a,43,0,0,14,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testIndexingWithFacets()",10,0,n/a,34,0,0,8,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testLineDocFile()",28,0,n/a,56,2,0,21,4
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testLocale()",29,0,n/a,21,0,0,10,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testMergePolicy()",17,0,n/a,36,0,0,8,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testMergeScheduler()",17,0,n/a,36,0,0,8,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testParallelDocMaker()",8,0,n/a,28,0,0,6,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testParallelExhausted()",8,0,n/a,32,0,0,6,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testReadTokens()",27,0,n/a,49,2,0,21,9
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testShingleAnalyzer()",25,0,n/a,38,0,0,10,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.testTimedSearchTask()",3,0,n/a,21,0,0,6,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.MockContentSource.close()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.MockContentSource.getNextDocData(DocData)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.MockQueryMaker.prepareQueries()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.testParseExamples()",37,0,n/a,1,3,0,27,9
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.testParseParallelTaskSequenceRepetition()",12,0,n/a,19,2,0,13,4
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.testParseTaskSequenceRepetition()",12,0,n/a,19,2,0,13,4
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.makeQuery()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.makeQuery(int)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.nextQnum()",0,1,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.prepareQueries()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.printQueries()",8,0,n/a,11,2,0,9,3
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.resetInputs()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker.setConfig(Config)",1,0,n/a,4,0,1,2,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.addBytes(long)",0,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.addItem()",0,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.close()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.collectFiles(File,ArrayList<File>)",7,1,n/a,20,2,2,12,5
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getBytesCount()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getConfig()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getItemsCount()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getTotalBytesCount()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.getTotalItemsCount()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.printStatistics(String)",34,0,n/a,31,1,1,24,6
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.resetInputs()",0,0,n/a,12,0,0,2,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.setConfig(Config)",4,0,n/a,11,0,1,5,1
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource.shouldLog()",0,0,n/a,7,0,0,1,3
"org.apache.lucene.benchmark.byTask.feeds.ContentSource.getNextDocData(DocData)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.DemoHTMLParser.parse(DocData,String,Date,String,Reader,DateFormat)",22,0,n/a,36,2,6,24,7
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.DateFormatInfo.DateFormatInfo()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.Comparator.compare(File,File)",5,0,n/a,18,2,2,11,5
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.Iterator(File)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.find()",5,2,n/a,10,1,0,6,3
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.getCount()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.hasNext()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.next()",3,1,n/a,8,0,0,5,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.push(File)",10,2,n/a,3,2,1,5,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.push(File[])",2,0,n/a,7,1,1,5,2
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.close()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.getDateFormatInfo()",6,1,n/a,14,1,0,8,2
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.getNextDocData(DocData)",25,0,n/a,38,3,1,28,4
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.parseDate(String)",5,1,n/a,6,0,1,4,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.resetInputs()",2,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.setConfig(Config)",10,0,n/a,14,1,1,9,3
"org.apache.lucene.benchmark.byTask.feeds.DocData.clear()",0,0,n/a,8,0,0,6,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getBody()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getDate()",0,0,n/a,9,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getID()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getName()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getProps()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.getTitle()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setBody(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setDate(Date)",2,1,n/a,7,1,1,3,2
"org.apache.lucene.benchmark.byTask.feeds.DocData.setDate(String)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setID(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setName(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setProps(Properties)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocData.setTitle(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DateUtil.DateUtil()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DocState.DocState(boolean,Store,Store,Index,Index,TermVector)",17,1,n/a,20,1,6,15,2
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DocState.getField(String,Store,Index,TermVector)",4,7,n/a,16,1,4,7,3
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DocState.getNumericField(String)",4,2,n/a,11,1,1,7,3
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.LeftOver.LeftOver()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.close()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.createDocument(DocData,int,int)",65,2,n/a,102,4,3,76,21
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.getBytesCount()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.getDocState()",3,3,n/a,8,1,0,5,2
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.getTotalBytesCount()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.makeDocument()",4,6,n/a,13,0,0,4,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.makeDocument(int)",22,3,n/a,32,2,1,20,12
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.resetInputs()",5,2,n/a,9,0,0,5,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.resetLeftovers()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.setConfig(Config)",22,3,n/a,58,2,1,41,17
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.OneDocSource.close()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.OneDocSource.getNextDocData(DocData)",7,0,n/a,15,1,1,10,2
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.createTestNormsDocument(boolean,boolean,boolean,boolean)",14,5,n/a,20,1,4,12,3
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.doTestIndexProperties(boolean,boolean,int)",29,3,n/a,26,1,3,20,2
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.testDocMakerLeak()",17,0,n/a,18,0,0,14,1
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.testIndexProperties()",3,0,n/a,9,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.testNorms()",35,0,n/a,24,0,0,16,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.Parser()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.characters(char[],int,int)",1,0,n/a,4,0,3,1,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.endElement(String,String,String)",18,0,n/a,51,5,3,34,14
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.next()",7,1,n/a,35,3,0,20,9
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.run()",16,0,n/a,45,5,0,24,8
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.startElement(String,String,String,Attributes)",2,0,n/a,22,1,4,15,4
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser.time(String)",16,1,n/a,12,0,1,10,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.close()",1,0,n/a,9,2,0,4,2
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.getElementType(String)",2,2,n/a,9,0,1,2,2
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.getNextDocData(DocData)",6,0,n/a,10,0,1,7,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.resetInputs()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.setConfig(Config)",6,0,n/a,10,1,1,6,2
"org.apache.lucene.benchmark.byTask.feeds.EnwikiQueryMaker.createQueries(List<Object>,Analyzer)",9,1,n/a,30,3,2,17,6
"org.apache.lucene.benchmark.byTask.feeds.EnwikiQueryMaker.getPrebuiltQueries(String)",17,1,n/a,13,0,1,3,1
"org.apache.lucene.benchmark.byTask.feeds.EnwikiQueryMaker.prepareQueries()",11,0,n/a,10,0,0,6,2
"org.apache.lucene.benchmark.byTask.feeds.FacetSource.getNextFacets(CategoryContainer)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.FacetSource.resetInputs()",4,1,n/a,7,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.FileBasedQueryMaker.prepareQueries()",26,0,n/a,47,6,0,29,9
"org.apache.lucene.benchmark.byTask.feeds.HTMLParser.parse(DocData,String,Date,String,Reader,DateFormat)",n/a,0,0,n/a,n/a,6,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.HeaderLineParser.HeaderLineParser(String[])",5,1,n/a,18,2,1,15,6
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.HeaderLineParser.parseLine(DocData,String)",7,1,n/a,19,2,2,12,4
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.HeaderLineParser.setDocDataField(DocData,int,String)",8,2,n/a,24,2,3,20,7
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.LineParser.LineParser(String[])",0,2,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.LineParser.parseLine(DocData,String)",n/a,1,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.SimpleLineParser.SimpleLineParser(String[])",1,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.SimpleLineParser.parseLine(DocData,String)",12,1,n/a,22,1,2,15,4
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.close()",1,0,n/a,7,1,0,3,2
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.createDocDataLineReader(String)",15,1,n/a,27,2,1,16,5
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.getNextDocData(DocData)",9,2,n/a,29,3,1,18,5
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.openFile()",6,2,n/a,14,2,0,8,4
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.resetInputs()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.setConfig(Config)",5,0,n/a,12,1,1,7,3
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.createBZ2LineFile(File,boolean)",6,2,n/a,7,0,2,5,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.createRegularLineFile(File,boolean)",5,3,n/a,6,0,2,4,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.createRegularLineFileWithMoreFields(File,String...)",7,1,n/a,10,1,2,7,2
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.doIndexAndSearchTest(File,Class<? extends LineParser>,String)",3,8,n/a,5,0,3,3,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.doIndexAndSearchTestWithRepeats(File,Class<? extends LineParser>,int,String)",35,3,n/a,46,2,4,34,4
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testBZip2()",4,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testBZip2NoHeaderLine()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testInvalidFormat()",10,0,n/a,23,2,0,12,3
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testRegularFile()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testRegularFileNoHeaderLine()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testRegularFileSpecialHeader()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testWithDocsName()",4,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.testWithProperties()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest.writeDocsToFile(BufferedWriter,boolean,Properties)",25,3,n/a,29,3,3,20,6
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishContentSource.close()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishContentSource.getNextDocData(DocData)",9,0,n/a,19,2,1,12,2
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishContentSource.resetInputs()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.getNextCounter()",0,1,n/a,6,1,0,3,2
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.makeQuery()",3,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.makeQuery(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.printQueries()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.resetInputs()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker.setConfig(Config)",4,0,n/a,4,0,1,2,1
"org.apache.lucene.benchmark.byTask.feeds.QueryMaker.makeQuery()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.QueryMaker.makeQuery(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.QueryMaker.printQueries()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.QueryMaker.resetInputs()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.QueryMaker.setConfig(Config)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource.close()",0,0,n/a,4,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource.getNextFacets(CategoryContainer)",13,0,n/a,20,2,1,17,4
"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource.setConfig(Config)",5,0,n/a,8,0,1,5,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.DateFormatInfo.DateFormatInfo()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.close()",0,0,n/a,4,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.getDateFormatInfo()",6,1,n/a,12,1,0,8,2
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.getNextDocData(DocData)",26,0,n/a,41,3,1,30,4
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.parseDate(String)",5,1,n/a,6,0,1,4,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.resetInputs()",1,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.setConfig(Config)",12,0,n/a,15,1,1,10,3
"org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker.createQueries(List<Object>,Analyzer)",9,1,n/a,30,3,2,17,6
"org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker.getPrebuiltQueries(String)",16,1,n/a,9,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker.prepareQueries()",9,0,n/a,10,0,0,5,1
"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker.prepareQueries()",29,0,n/a,30,0,0,19,1
"org.apache.lucene.benchmark.byTask.feeds.SimpleSloppyPhraseQueryMaker.prepareQueries()",19,0,n/a,49,5,0,41,10
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource.close()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource.getNextDocData(DocData)",6,1,n/a,9,0,1,6,1
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource.newdocid()",1,1,n/a,7,1,0,3,3
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource.resetInputs()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource.getNextDocData(DocData)",12,0,n/a,18,1,1,13,2
"org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource.nextInt(int,int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource.setConfig(Config)",4,0,n/a,6,0,1,3,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.DateFormatInfo.DateFormatInfo()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.close()",3,2,n/a,15,2,0,8,4
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getDateFormatInfo()",6,1,n/a,14,2,0,12,3
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getDocBuffer()",3,1,n/a,8,1,0,5,2
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getHtmlParser()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getNextDocData(DocData)",18,0,n/a,41,2,1,22,4
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.getTrecDocReader(StringBuilder)",4,0,n/a,10,1,1,6,2
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.openNextFile()",14,2,n/a,30,3,0,20,7
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.parseDate(String)",6,0,n/a,19,2,1,14,4
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.read(StringBuilder,String,boolean,boolean)",8,3,n/a,32,3,4,15,7
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.resetInputs()",2,0,n/a,9,1,0,5,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.setConfig(Config)",21,0,n/a,39,1,1,20,6
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.StringableTrecSource.StringableTrecSource(String,boolean)",0,5,n/a,4,0,2,2,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.StringableTrecSource.openNextFile()",3,0,n/a,10,2,0,5,3
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.StringableTrecSource.setConfig(Config)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.assertDocData(DocData,String,String,String,Date)",12,13,n/a,10,0,5,6,2
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.assertNoMoreDataException(StringableTrecSource)",2,4,n/a,9,1,1,5,2
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testBadDate()",6,0,n/a,35,0,0,6,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testForever()",9,0,n/a,39,0,0,7,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testMissingDate()",9,0,n/a,63,0,0,8,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testOneDocument()",7,0,n/a,34,0,0,6,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testTrecFeedDirAllTypes()",40,0,n/a,56,3,0,45,9
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.testTwoDocuments()",10,0,n/a,63,0,0,8,1
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.extract(StringBuilder,String,String,int,String[])",7,0,n/a,27,5,5,12,11
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",n/a,0,0,n/a,n/a,5,n/a,n/a
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.pathType(File)",4,0,n/a,14,2,1,7,4
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.stripTags(String,int)",2,1,n/a,10,1,2,3,2
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.stripTags(StringBuilder,int)",2,1,n/a,7,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecFBISParser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",12,0,n/a,26,2,5,17,3
"org.apache.lucene.benchmark.byTask.feeds.TrecFR94Parser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",13,0,n/a,23,2,5,15,3
"org.apache.lucene.benchmark.byTask.feeds.TrecFTParser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",10,0,n/a,19,1,5,12,2
"org.apache.lucene.benchmark.byTask.feeds.TrecGov2Parser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",9,0,n/a,20,2,5,12,3
"org.apache.lucene.benchmark.byTask.feeds.TrecLATimesParser.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",19,0,n/a,30,2,5,20,5
"org.apache.lucene.benchmark.byTask.feeds.TrecParserByPath.parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType)",2,0,n/a,5,0,5,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Entities.add(String,int)",3,252,n/a,5,0,2,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Entities.decode(String)",12,0,n/a,20,2,1,14,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Entities.encode(String)",10,0,n/a,17,2,1,14,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ArgValue()",19,2,n/a,46,6,0,42,17
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.CommentTag()",11,1,n/a,40,3,0,31,13
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.Decl()",10,1,n/a,39,2,0,34,11
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLDocument()",18,0,n/a,62,2,0,60,15
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLParser(HTMLParserTokenManager)",2,0,n/a,9,0,1,12,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLParser(InputStream)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLParser(InputStream,String)",5,1,n/a,10,1,2,15,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.HTMLParser(Reader)",4,0,n/a,10,0,1,13,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.MyPipedInputStream.MyPipedInputStream()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.MyPipedInputStream.MyPipedInputStream(PipedOutputStream)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.MyPipedInputStream.full()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ReInit(HTMLParserTokenManager)",2,0,n/a,9,0,1,12,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ReInit(InputStream)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ReInit(InputStream,String)",5,1,n/a,10,1,2,15,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ReInit(Reader)",4,0,n/a,10,0,1,13,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.ScriptTag()",4,1,n/a,16,2,0,11,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.Tag()",24,1,n/a,65,5,0,44,26
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.addMetaTag()",1,2,n/a,6,0,0,4,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.addSpace()",4,2,n/a,12,1,0,8,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.addText(String)",6,4,n/a,18,3,1,12,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.addToSummary(String)",4,2,n/a,10,3,1,5,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.disable_tracing()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.enable_tracing()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.generateParseException()",8,1,n/a,33,4,0,30,9
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getMetaTags()",3,0,n/a,13,2,0,8,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getNextToken()",1,0,n/a,8,0,0,6,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getReader()",6,3,n/a,11,1,0,8,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getSummary()",10,0,n/a,19,2,0,14,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getTitle()",5,1,n/a,12,2,0,8,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.getToken(int)",1,0,n/a,9,1,1,8,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_2_1(int)",2,1,n/a,6,1,1,6,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_2_2(int)",2,1,n/a,6,1,1,6,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_3_1()",2,2,n/a,5,0,0,5,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_3_2()",2,2,n/a,5,0,0,5,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_add_error_token(int,int)",4,2,n/a,24,5,2,24,10
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_consume_token(int)",2,37,n/a,23,4,1,21,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_la1_init_0()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_ntk()",1,14,n/a,6,0,0,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_rescan_token()",2,1,n/a,19,5,0,19,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_save(int,int)",1,2,n/a,8,2,2,9,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.jj_scan_token(int)",2,4,n/a,20,2,1,19,10
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.HTMLParserTokenManager(SimpleCharStream)",1,1,n/a,6,0,1,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.HTMLParserTokenManager(SimpleCharStream,int)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.ReInit(SimpleCharStream)",1,1,n/a,8,0,1,4,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.ReInit(SimpleCharStream,int)",2,0,n/a,6,0,2,2,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.ReInitRounds()",0,9,n/a,7,0,0,5,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.SwitchTo(int)",1,2,n/a,8,0,1,3,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.getNextToken()",20,0,n/a,105,3,0,80,24
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjAddStates(int,int)",0,3,n/a,6,1,2,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjCanMove_0(int,int,int,long,long)",0,10,n/a,12,1,5,7,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjCheckNAdd(int)",0,45,n/a,8,1,1,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjCheckNAddStates(int,int)",1,9,n/a,6,1,2,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjCheckNAddTwoStates(int,int)",2,8,n/a,5,0,2,2,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjFillToken()",6,2,n/a,21,0,0,18,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_0(int,int)",34,3,n/a,282,5,2,256,109
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_1(int,int)",12,1,n/a,144,5,2,118,52
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_2(int,int)",9,3,n/a,118,5,2,90,37
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_3(int,int)",9,2,n/a,102,5,2,76,29
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_4(int,int)",7,1,n/a,93,5,2,67,25
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_5(int,int)",7,1,n/a,93,5,2,67,25
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_6(int,int)",7,2,n/a,93,5,2,67,25
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveNfa_7(int,int)",3,2,n/a,78,4,2,56,20
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_0()",2,1,n/a,10,1,0,5,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_1()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_2()",4,1,n/a,14,1,0,9,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_3()",3,1,n/a,12,1,0,7,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_4()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_5()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_6()",2,1,n/a,10,1,0,5,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa0_7()",2,1,n/a,10,1,0,5,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa1_0(long)",5,1,n/a,23,2,1,15,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa1_6(long)",4,1,n/a,16,1,1,10,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa2_0(long,long)",6,2,n/a,20,1,2,14,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa2_6(long,long)",5,1,n/a,20,1,2,14,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa3_0(long,long)",6,2,n/a,22,1,2,16,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa4_0(long,long)",5,1,n/a,18,1,2,12,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa5_0(long,long)",5,1,n/a,18,1,2,12,5
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjMoveStringLiteralDfa6_0(long,long)",5,1,n/a,20,1,2,14,6
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfaWithStates_0(int,int,int)",2,1,n/a,8,1,3,6,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfaWithStates_2(int,int,int)",2,1,n/a,8,1,3,6,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_0(int,long)",2,11,n/a,4,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_2(int,long)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_3(int,long)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_6(int,long)",2,3,n/a,4,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStartNfa_7(int,long)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopAtPos(int,int)",0,7,n/a,6,0,2,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_0(int,long)",0,7,n/a,57,3,2,40,16
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_2(int,long)",0,1,n/a,8,1,2,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_3(int,long)",0,1,n/a,8,1,2,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_6(int,long)",0,3,n/a,26,3,2,15,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.jjStopStringLiteralDfa_7(int,long)",0,1,n/a,8,1,2,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager.setDebugStream(PrintStream)",0,0,n/a,2,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.ParseException()",1,0,n/a,13,0,0,2,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.ParseException(String)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.ParseException(Token,int[][],String[])",1,0,n/a,23,0,3,5,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.add_escapes(String)",19,1,n/a,49,3,1,39,14
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException.getMessage()",9,0,n/a,52,2,0,38,10
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParserThread.ParserThread(HTMLParser)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParserThread.run()",9,0,n/a,21,3,0,11,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.BeginToken()",1,0,n/a,8,0,0,4,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.Done()",0,0,n/a,7,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ExpandBuff(boolean)",11,2,n/a,40,2,1,26,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.FillBuff()",6,1,n/a,43,3,0,25,10
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.GetImage()",3,0,n/a,9,0,0,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.GetSuffix(int)",3,0,n/a,14,1,1,6,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,String)",1,0,n/a,5,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,String,int,int)",1,0,n/a,6,0,4,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,String,int,int,int)",3,2,n/a,6,0,5,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,int,int)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(InputStream,int,int,int)",2,4,n/a,6,0,4,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(Reader)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(Reader,int,int)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.ReInit(Reader,int,int,int)",0,4,n/a,18,1,4,11,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,String)",1,0,n/a,5,0,2,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,String,int,int)",1,0,n/a,6,0,4,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,String,int,int,int)",3,2,n/a,6,0,5,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,int,int)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(InputStream,int,int,int)",2,4,n/a,6,0,4,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(Reader)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(Reader,int,int)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.SimpleCharStream(Reader,int,int,int)",0,4,n/a,12,0,4,7,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.UpdateLineColumn(char)",0,1,n/a,36,2,1,24,8
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.adjustBeginLineColumn(int,int)",0,0,n/a,41,2,2,22,7
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.backup(int)",0,1,n/a,6,0,1,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getBeginColumn()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getBeginLine()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getColumn()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getEndColumn()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getEndLine()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getLine()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.getTabSize(int)",0,0,n/a,1,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.readChar()",2,1,n/a,16,1,0,10,4
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream.setTabSize(int)",0,0,n/a,1,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.assertReadsTo(String,HTMLParser)",6,7,n/a,9,1,2,6,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testComments()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testDoctype()",3,0,n/a,8,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testEntities()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testMeta()",13,0,n/a,15,0,0,8,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testScript()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testStyle()",3,0,n/a,7,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testSummary()",5,0,n/a,13,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testSummaryTitle()",4,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testTitle()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testTurkish()",3,0,n/a,8,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser.testUnicode()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.Token()",0,0,n/a,4,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.Token(int)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.Token(int,String)",0,2,n/a,8,0,2,2,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.getValue()",0,0,n/a,11,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.newToken(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.newToken(int,String)",1,1,n/a,19,1,2,3,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token.toString()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.LexicalError(boolean,int,int,int,String,char)",3,1,n/a,19,0,6,1,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.TokenMgrError()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.TokenMgrError(String,int)",1,1,n/a,5,0,2,2,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.TokenMgrError(boolean,int,int,int,String,char,int)",2,0,n/a,4,0,7,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.addEscapes(String)",19,2,n/a,48,3,1,39,14
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError.getMessage()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.benchmark.byTask.programmatic.Sample.initProps()",15,1,n/a,19,0,0,16,1
"org.apache.lucene.benchmark.byTask.programmatic.Sample.main(String[])",20,0,n/a,35,0,1,19,1
"org.apache.lucene.benchmark.byTask.stats.Points.Points(Config)",0,1,n/a,5,0,1,0,1
"org.apache.lucene.benchmark.byTask.stats.Points.clearData()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.getCurrentStats()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.markTaskEnd(TaskStats,int)",2,1,n/a,9,0,2,2,1
"org.apache.lucene.benchmark.byTask.stats.Points.markTaskStart(PerfTask,int)",3,1,n/a,12,0,2,4,1
"org.apache.lucene.benchmark.byTask.stats.Points.nextTaskRunNum()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.Points.taskStats()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.Report(String,int,int,int)",0,3,n/a,6,0,4,4,1
"org.apache.lucene.benchmark.byTask.stats.Report.getOutOf()",0,6,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.getReported()",0,5,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.getSize()",0,6,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.Report.getText()",0,6,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.TaskStats(PerfTask,int,int)",5,0,n/a,12,0,3,6,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.add(TaskStats)",7,4,n/a,25,2,1,16,7
"org.apache.lucene.benchmark.byTask.stats.TaskStats.clone()",2,4,n/a,11,1,0,4,2
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getCount()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getCountsByTime()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getCountsByTimeStepMSec()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getElapsed()",0,11,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getMaxTotMem()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getMaxUsedMem()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getNumParallelTasks()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getNumRuns()",0,5,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getRound()",0,5,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getTask()",0,11,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.getTaskRunNum()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.markEnd(int,int)",5,0,n/a,16,1,2,9,3
"org.apache.lucene.benchmark.byTask.stats.TaskStats.setCountsByTime(int[],long)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.benchmark.byTask.stats.TaskStats.toString()",7,0,n/a,12,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.AddDocTask(PerfRunData)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.doLogic()",3,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.getLogMessage(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.setParams(String)",2,0,n/a,9,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.setup()",5,0,n/a,10,1,0,5,2
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.supportsParams()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask.tearDown()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask.AddFacetedDocTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask.doLogic()",2,0,n/a,7,1,0,3,2
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask.getLogMessage(int)",2,0,n/a,7,1,1,3,2
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask.setup()",11,0,n/a,11,1,0,6,2
"org.apache.lucene.benchmark.byTask.tasks.BenchmarkHighlighter.doHighlight(IndexReader,int,String,Document,Analyzer,String)",n/a,0,0,n/a,n/a,6,n/a,n/a
"org.apache.lucene.benchmark.byTask.tasks.ClearStatsTask.ClearStatsTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ClearStatsTask.doLogic()",3,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.ClearStatsTask.shouldNotRecordStats()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask.CloseIndexTask(PerfRunData)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask.doLogic()",7,0,n/a,15,2,0,8,5
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask.setParams(String)",3,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseReaderTask.CloseReaderTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseReaderTask.doLogic()",8,0,n/a,10,1,0,6,2
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyIndexTask.CloseTaxonomyIndexTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyIndexTask.doLogic()",5,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyReaderTask.CloseTaxonomyReaderTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyReaderTask.doLogic()",8,0,n/a,10,1,0,6,2
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask.CommitIndexTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask.doLogic()",8,0,n/a,16,2,0,9,3
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask.setParams(String)",3,0,n/a,6,0,1,3,1
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.CommitTaxonomyIndexTask.CommitTaxonomyIndexTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CommitTaxonomyIndexTask.doLogic()",4,0,n/a,10,1,0,5,2
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask.ConsumeContentSourceTask(PerfRunData)",10,0,n/a,15,1,1,10,3
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask.close()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask.doLogic()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask.getLogMessage(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingHighlighterTestTask.CountingHighlighterTestTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingHighlighterTestTask.getBenchmarkHighlighter(Query)",6,0,n/a,7,2,1,6,3
"org.apache.lucene.benchmark.byTask.tasks.CountingHighlighterTestTask.retrieveDoc(IndexReader,int)",1,0,n/a,8,1,2,4,2
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask.CountingSearchTestTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask.doLogic()",2,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask.getElapsedMillis()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask.incrNumSearches()",1,1,n/a,8,1,0,5,2
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.CreateIndexTask(PerfRunData)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.configureWriter(Config,PerfRunData,OpenMode,IndexCommit)",16,1,n/a,16,2,4,11,4
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.createWriterConfig(Config,PerfRunData,OpenMode,IndexCommit)",48,1,n/a,61,3,4,43,13
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.doLogic()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask.getIndexDeletionPolicy(Config)",7,1,n/a,12,2,1,6,3
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.createPerfRunData(String)",8,6,n/a,11,1,1,8,2
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testInfoStream_File()",10,0,n/a,7,0,0,5,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testInfoStream_SystemOutErr()",22,0,n/a,26,1,0,20,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testNoDeletionPolicy()",8,0,n/a,6,0,0,4,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testNoMergePolicy()",8,0,n/a,6,0,0,4,1
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest.testNoMergeScheduler()",8,0,n/a,6,0,0,4,1
"org.apache.lucene.benchmark.byTask.tasks.CreateTaxonomyIndexTask.CreateTaxonomyIndexTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.CreateTaxonomyIndexTask.doLogic()",4,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.DeleteByPercentTask(PerfRunData)",4,0,n/a,4,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.doLogic()",14,0,n/a,26,3,0,18,6
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.setParams(String)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.setup()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.DeleteDocTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.doLogic()",4,0,n/a,8,0,0,5,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.getLogMessage(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.setParams(String)",2,0,n/a,10,0,1,3,1
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.setup()",4,0,n/a,12,1,0,4,3
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask.supportsParams()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask.FlushReaderTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask.doLogic()",7,0,n/a,13,1,0,8,2
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask.setParams(String)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask.ForceMergeTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask.doLogic()",4,0,n/a,10,1,0,5,2
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask.setParams(String)",3,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.NearRealtimeReaderTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.close()",3,0,n/a,8,1,0,6,2
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.doLogic()",17,0,n/a,44,3,0,27,7
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.setParams(String)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.NewAnalyzerTask(PerfRunData)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.createAnalyzer(String)",5,7,n/a,11,1,1,5,2
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.doLogic()",10,0,n/a,24,2,0,13,7
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.setParams(String)",6,0,n/a,15,1,1,5,2
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask.supportsParams()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.Implementation.Implementation(String,String)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.NewCollationAnalyzerTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.createAnalyzer(Locale,Implementation)",7,1,n/a,11,0,2,6,1
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.doLogic()",10,0,n/a,15,1,0,9,3
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.setParams(String)",12,0,n/a,23,2,1,14,5
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.NewLocaleTask(PerfRunData)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.createLocale(String,String,String)",3,1,n/a,8,0,3,6,4
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.doLogic()",6,0,n/a,9,0,0,4,3
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.setParams(String)",8,0,n/a,12,0,1,9,4
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewRoundTask.NewRoundTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewRoundTask.doLogic()",3,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.NewRoundTask.shouldNotRecordStats()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.NewShingleAnalyzerTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.doLogic()",3,0,n/a,12,1,0,5,2
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.setAnalyzer()",11,1,n/a,31,2,0,13,6
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.setParams(String)",13,0,n/a,20,2,1,14,5
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask.OpenIndexTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask.doLogic()",6,0,n/a,14,1,0,9,2
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask.setParams(String)",1,0,n/a,8,1,1,3,2
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.OpenReaderTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.doLogic()",11,0,n/a,25,1,0,13,3
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.findIndexCommit(Directory,String)",5,1,n/a,14,2,2,9,5
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.setParams(String)",4,0,n/a,13,2,1,7,4
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyIndexTask.OpenTaxonomyIndexTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyIndexTask.doLogic()",4,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyReaderTask.OpenTaxonomyReaderTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyReaderTask.doLogic()",5,0,n/a,9,0,0,5,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.PerfTask()",5,1,n/a,7,1,0,3,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.PerfTask(PerfRunData)",5,1,n/a,18,1,1,11,3
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.clone()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.close()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.doLogic()",n/a,8,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getBackgroundDeltaPriority()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getDepth()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getLogMessage(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getMaxDepthLogStart()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getName()",5,14,n/a,9,1,0,3,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getPadding()",2,1,n/a,6,0,0,6,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getParams()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getRunData()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.getRunInBackground()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.isDisableCounting()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.runAndMaybeStats(boolean)",15,0,n/a,24,1,1,16,8
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setDepth(int)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setDisableCounting(boolean)",0,1,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setName(String)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setParams(String)",3,1,n/a,12,1,1,3,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setRunInBackground(int)",0,1,n/a,4,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.setup()",0,3,n/a,10,0,0,0,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.shouldNeverLogAtStart()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.shouldNotRecordStats()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.stopNow()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.supportsParams()",0,1,n/a,9,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.tearDown()",7,3,n/a,15,1,0,3,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask.toString()",10,2,n/a,17,2,0,11,4
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.MyPerfTask.MyPerfTask(PerfRunData)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.MyPerfTask.doLogic()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.MyPerfTask.getLogStep()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.createPerfRunData(boolean,int,boolean,int)",8,1,n/a,13,1,4,8,3
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.doLogStepTest(boolean,int,boolean,int,int)",4,5,n/a,6,0,5,3,1
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.testLogStep()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask.PrintReaderTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask.doLogic()",9,0,n/a,14,0,0,8,2
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask.setParams(String)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.ReadTask(PerfRunData)",3,0,n/a,8,1,1,4,2
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.createCollector()",2,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.doLogic()",54,0,n/a,102,8,0,74,24
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.getBenchmarkHighlighter(Query)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.getFieldsToHighlight(Document)",5,1,n/a,13,1,1,5,2
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.getQueryMaker()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.getSort()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.numHits()",0,2,n/a,9,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.numToHighlight()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.retrieveDoc(IndexReader,int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.setup()",4,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.traversalSize()",0,1,n/a,11,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withCollector()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withMaxScore()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withRetrieve()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withScore()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withSearch()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withTraverse()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.tasks.ReadTask.withWarm()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReadTokensTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.ReusableStringReader()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.close()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.init(String)",1,1,n/a,5,0,1,3,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.read(char[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader.read(char[],int,int)",3,1,n/a,17,1,3,12,3
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.doLogic()",13,0,n/a,36,3,0,25,8
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.getLogMessage(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.setup()",4,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.tearDown()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.ReopenReaderTask.ReopenReaderTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReopenReaderTask.doLogic()",7,0,n/a,11,1,0,7,2
"org.apache.lucene.benchmark.byTask.tasks.RepAllTask.RepAllTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepAllTask.doLogic()",11,0,n/a,9,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.RepAllTask.reportAll(List<TaskStats>)",14,1,n/a,28,3,1,18,7
"org.apache.lucene.benchmark.byTask.tasks.RepSelectByPrefTask.RepSelectByPrefTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSelectByPrefTask.doLogic()",12,0,n/a,10,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.RepSelectByPrefTask.reportSelectByPrefix(List<TaskStats>)",17,1,n/a,24,3,1,18,8
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameRoundTask.RepSumByNameRoundTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameRoundTask.doLogic()",12,0,n/a,10,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameRoundTask.reportSumByNameRound(List<TaskStats>)",12,1,n/a,29,4,1,15,5
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameTask.RepSumByNameTask(PerfRunData)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameTask.doLogic()",12,0,n/a,10,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameTask.reportSumByName(List<TaskStats>)",11,1,n/a,28,4,1,14,5
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefRoundTask.RepSumByPrefRoundTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefRoundTask.doLogic()",12,0,n/a,10,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefRoundTask.reportSumByPrefixRound(List<TaskStats>)",15,1,n/a,25,4,1,15,6
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.RepSumByPrefTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.doLogic()",12,0,n/a,10,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.reportSumByPrefix(List<TaskStats>)",14,1,n/a,24,4,1,14,6
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.setPrefix(String)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask.toString()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.ReportTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.genPartialReport(int,LinkedHashMap<String, TaskStats>,int)",20,0,n/a,39,4,3,33,11
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.longestOp(Iterable<TaskStats>)",5,1,n/a,17,3,1,7,4
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.shouldNeverLogAtStart()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.shouldNotRecordStats()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.tableTitle(String)",10,1,n/a,15,1,1,9,2
"org.apache.lucene.benchmark.byTask.tasks.ReportTask.taskReportLine(String,TaskStats)",38,1,n/a,22,0,2,14,3
"org.apache.lucene.benchmark.byTask.tasks.ResetInputsTask.ResetInputsTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetInputsTask.doLogic()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.ResetInputsTask.shouldNotRecordStats()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemEraseTask.ResetSystemEraseTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemEraseTask.doLogic()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemSoftTask.ResetSystemSoftTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemSoftTask.doLogic()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.RollbackIndexTask.RollbackIndexTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.RollbackIndexTask.doLogic()",7,0,n/a,15,2,0,8,5
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.SearchTask(PerfRunData)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.getQueryMaker()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.withSearch()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.withTraverse()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTask.withWarm()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.SearchTravRetHighlightTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.getBenchmarkHighlighter(Query)",7,0,n/a,7,2,1,6,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.getFieldsToHighlight(Document)",4,0,n/a,11,1,1,5,3
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.numToHighlight()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.setParams(String)",29,0,n/a,25,3,1,21,8
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.setup()",7,0,n/a,10,1,0,5,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.SearchTravRetLoadFieldSelectorTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.retrieveDoc(IndexReader,int)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.setParams(String)",7,0,n/a,10,1,1,7,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.supportsParams()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetTask.SearchTravRetTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.SearchTravRetVectorHighlightTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.getBenchmarkHighlighter(Query)",4,0,n/a,7,2,1,6,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.getFieldsToHighlight(Document)",4,0,n/a,11,1,1,5,3
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.numToHighlight()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.setParams(String)",28,0,n/a,24,3,1,20,8
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.setup()",11,0,n/a,15,1,0,8,4
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.SearchTravTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.getQueryMaker()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.setParams(String)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.supportsParams()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.traversalSize()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.withSearch()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.withTraverse()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask.withWarm()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.SearchWithCollectorTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.createCollector()",11,0,n/a,14,1,0,9,4
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.getQueryMaker()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.setup()",4,0,n/a,8,0,0,4,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withCollector()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withSearch()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withTraverse()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask.withWarm()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.SearchWithSortTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.getQueryMaker()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.getSort()",1,0,n/a,7,1,0,3,2
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.getType(String)",9,1,n/a,23,1,1,19,9
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.setParams(String)",15,0,n/a,52,3,1,34,8
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withMaxScore()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withScore()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withSearch()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withTraverse()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask.withWarm()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTaskTest.testSetParams_docField()",9,0,n/a,5,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask.SetPropTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask.doLogic()",5,0,n/a,8,1,0,4,3
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask.setParams(String)",6,0,n/a,11,0,1,4,1
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask.supportsParams()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.ParallelTask.ParallelTask(PerfTask)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.ParallelTask.run()",3,0,n/a,15,2,0,7,4
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask.RunBackgroundTask(PerfTask,boolean)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask.getCount()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask.run()",2,0,n/a,8,1,0,3,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask.stopNow()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.TaskSequence(PerfRunData,String,TaskSequence,boolean)",6,6,n/a,11,0,4,9,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.addTask(PerfTask)",3,13,n/a,4,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.clone()",6,0,n/a,12,1,0,7,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.close()",5,4,n/a,8,1,0,6,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doLogic()",2,3,n/a,9,0,0,2,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doParallelTasks()",11,1,n/a,39,4,0,33,10
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doSerialTasks()",24,1,n/a,61,6,0,47,20
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doSerialTasksWithRate()",9,1,n/a,45,5,0,35,14
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getName()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getParent()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getRate()",0,1,n/a,8,0,0,1,2
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getRepetitions()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.getTasks()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.initTasksArray()",2,4,n/a,14,2,0,11,6
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.isCollapsable()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.isParallel()",0,4,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setNoChildReport()",1,3,n/a,11,2,0,4,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setRate(int,boolean)",1,3,n/a,8,0,2,3,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setRepetitions(int)",3,3,n/a,14,2,1,6,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setRunTime(double)",0,1,n/a,4,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.setSequenceName()",3,3,n/a,14,1,0,9,7
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.startThreads(ParallelTask[])",2,1,n/a,10,1,1,7,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.startlThreadsWithRate(ParallelTask[])",4,1,n/a,13,2,1,10,4
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.stopNow()",2,0,n/a,10,2,0,4,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.toString()",21,2,n/a,34,2,0,23,12
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.updateExhausted(PerfTask)",0,3,n/a,16,2,1,10,4
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.UpdateDocTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.doLogic()",6,0,n/a,10,1,0,6,2
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.getLogMessage(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.setParams(String)",2,0,n/a,9,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.setup()",5,0,n/a,10,1,0,5,2
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.supportsParams()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask.tearDown()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.WaitForMergesTask.WaitForMergesTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WaitForMergesTask.doLogic()",3,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.WaitTask.WaitTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WaitTask.doLogic()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.WaitTask.setParams(String)",12,0,n/a,23,2,1,15,5
"org.apache.lucene.benchmark.byTask.tasks.WaitTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.WarmTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.getQueryMaker()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.withRetrieve()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.withSearch()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.withTraverse()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.WarmTask.withWarm()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.WriteLineDocTask(PerfRunData)",21,0,n/a,36,3,1,26,7
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.close()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.doLogic()",22,0,n/a,28,1,0,22,8
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.getLogMessage(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.setParams(String)",2,0,n/a,9,0,1,2,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.supportsParams()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.writeHeader()",9,1,n/a,16,1,0,9,3
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.EmptyDocMaker.makeDocument()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.JustDateDocMaker.makeDocument()",3,6,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.LegalJustDateDocMaker.makeDocument()",3,6,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NewLinesDocMaker.makeDocument()",7,6,n/a,8,0,0,5,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NoBodyDocMaker.makeDocument()",5,6,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NoTitleDocMaker.makeDocument()",5,6,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.ThreadingDocMaker.makeDocument()",9,6,n/a,9,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.WriteLineDocMaker.makeDocument()",7,6,n/a,8,0,0,5,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.assertHeaderLine(String)",2,5,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.createPerfRunData(File,boolean,String)",12,10,n/a,17,1,3,11,3
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.doReadTest(File,Type,String,String,String)",19,6,n/a,34,2,5,27,7
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testBZip2()",8,0,n/a,10,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testCharsReplace()",8,0,n/a,11,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testEmptyBody()",8,0,n/a,11,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testEmptyDoc()",15,0,n/a,16,1,0,12,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testEmptyTitle()",8,0,n/a,8,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testGZip()",8,0,n/a,10,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testJustDate()",15,0,n/a,17,1,0,12,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testLegalJustDate()",15,0,n/a,16,1,0,12,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testMultiThreaded()",35,0,n/a,8,4,0,34,6
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testRegularFile()",8,0,n/a,9,0,0,6,1
"org.apache.lucene.benchmark.byTask.tasks.alt.AltPackageTaskTest.altAlg(boolean)",3,2,n/a,12,1,1,4,2
"org.apache.lucene.benchmark.byTask.tasks.alt.AltPackageTaskTest.testWithAlt()",6,0,n/a,6,0,0,3,1
"org.apache.lucene.benchmark.byTask.tasks.alt.AltPackageTaskTest.testWithoutAlt()",3,0,n/a,9,1,0,3,2
"org.apache.lucene.benchmark.byTask.tasks.alt.AltTestTask.AltTestTask(PerfRunData)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.tasks.alt.AltTestTask.doLogic()",0,8,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.utils.Algorithm.Algorithm(PerfRunData)",94,2,n/a,203,6,1,147,46
"org.apache.lucene.benchmark.byTask.utils.Algorithm.execute()",2,1,n/a,11,1,0,3,1
"org.apache.lucene.benchmark.byTask.utils.Algorithm.extractTasks()",2,2,n/a,9,0,0,3,1
"org.apache.lucene.benchmark.byTask.utils.Algorithm.extractTasks(ArrayList<PerfTask>,TaskSequence)",4,2,n/a,15,2,2,10,5
"org.apache.lucene.benchmark.byTask.utils.Algorithm.initTasksPackages(Config)",8,1,n/a,13,1,1,9,3
"org.apache.lucene.benchmark.byTask.utils.Algorithm.taskClass(Config,String)",3,1,n/a,12,2,2,4,3
"org.apache.lucene.benchmark.byTask.utils.Algorithm.toString()",6,3,n/a,8,0,0,5,1
"org.apache.lucene.benchmark.byTask.utils.Config.Config(Properties)",4,12,n/a,10,1,1,3,2
"org.apache.lucene.benchmark.byTask.utils.Config.Config(Reader)",30,12,n/a,42,2,1,29,7
"org.apache.lucene.benchmark.byTask.utils.Config.get(String,String)",11,34,n/a,33,1,2,17,6
"org.apache.lucene.benchmark.byTask.utils.Config.get(String,boolean)",11,21,n/a,30,1,2,13,3
"org.apache.lucene.benchmark.byTask.utils.Config.get(String,double)",10,0,n/a,30,1,2,13,3
"org.apache.lucene.benchmark.byTask.utils.Config.get(String,int)",10,14,n/a,30,1,2,13,3
"org.apache.lucene.benchmark.byTask.utils.Config.getAlgorithmText()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.utils.Config.getColsNamesForValsByRound()",7,0,n/a,14,1,0,7,3
"org.apache.lucene.benchmark.byTask.utils.Config.getColsValuesForValsByRound(int)",15,0,n/a,38,3,1,25,7
"org.apache.lucene.benchmark.byTask.utils.Config.getRoundNumber()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.byTask.utils.Config.newRound()",36,0,n/a,41,3,0,29,6
"org.apache.lucene.benchmark.byTask.utils.Config.printProps()",7,2,n/a,10,1,0,6,2
"org.apache.lucene.benchmark.byTask.utils.Config.propToBooleanArray(String)",13,1,n/a,17,1,1,13,4
"org.apache.lucene.benchmark.byTask.utils.Config.propToDoubleArray(String)",12,1,n/a,17,1,1,13,4
"org.apache.lucene.benchmark.byTask.utils.Config.propToIntArray(String)",12,1,n/a,17,1,1,13,4
"org.apache.lucene.benchmark.byTask.utils.Config.propToStringArray(String)",8,1,n/a,12,1,1,8,3
"org.apache.lucene.benchmark.byTask.utils.Config.set(String,String)",3,8,n/a,14,1,2,3,2
"org.apache.lucene.benchmark.byTask.utils.FileUtils.fullyDelete(File)",6,2,n/a,25,4,1,13,8
"org.apache.lucene.benchmark.byTask.utils.Format.format(String,String)",4,1,n/a,10,0,2,2,1
"org.apache.lucene.benchmark.byTask.utils.Format.format(int,String)",3,2,n/a,10,0,2,2,1
"org.apache.lucene.benchmark.byTask.utils.Format.format(int,double,String)",4,0,n/a,4,0,3,2,1
"org.apache.lucene.benchmark.byTask.utils.Format.format(int,float,String)",4,8,n/a,11,0,3,2,1
"org.apache.lucene.benchmark.byTask.utils.Format.formatPaddLeft(String,String)",3,1,n/a,10,0,2,2,1
"org.apache.lucene.benchmark.byTask.utils.Format.formatPaddRight(int,double,String)",3,0,n/a,4,0,3,2,1
"org.apache.lucene.benchmark.byTask.utils.Format.formatPaddRight(int,float,String)",3,0,n/a,11,0,3,2,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.Type.Type(String)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.Type.inputStream(InputStream)",5,1,n/a,8,1,1,5,3
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.Type.outputStream(OutputStream)",5,1,n/a,9,1,1,5,3
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.fileType(File)",5,2,n/a,10,1,1,6,3
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.inputStream(File)",4,6,n/a,12,0,1,2,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.outputStream(File)",4,2,n/a,10,0,1,2,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.assertReadText(File)",7,22,n/a,8,0,1,6,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.autoOutFile(String)",3,12,n/a,6,0,1,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.rawBzip2File(String)",5,4,n/a,6,0,1,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.rawGzipFile(String)",5,4,n/a,6,0,1,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.rawTextFile(String)",6,2,n/a,8,0,1,6,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.setUp()",6,0,n/a,8,0,0,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.tearDown()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetInputStreamBzip2()",8,0,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetInputStreamGzip()",8,0,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetInputStreamPlainText()",4,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetOutputStreamBzip2()",8,0,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetOutputStreamGzip()",8,0,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.testGetOutputStreamPlain()",8,0,n/a,7,0,0,4,1
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest.writeText(OutputStream)",5,3,n/a,6,0,1,4,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.StringBuilderReader(StringBuilder)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.close()",0,0,n/a,6,1,0,2,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.ensureOpen()",1,6,n/a,6,1,0,2,2
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.mark(int)",2,0,n/a,21,1,1,5,2
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.markSupported()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.read()",2,0,n/a,7,1,0,3,2
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.read(char[],int,int)",4,0,n/a,20,2,3,12,7
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.ready()",1,0,n/a,7,1,0,3,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.reset()",2,0,n/a,8,1,0,4,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.set(StringBuilder)",1,2,n/a,7,1,1,4,1
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader.skip(long)",3,0,n/a,14,2,1,8,2
"org.apache.lucene.benchmark.byTask.utils.TestConfig.testAbsolutePathNamesWindows()",8,0,n/a,9,0,0,6,1
"org.apache.lucene.benchmark.quality.Judge.isRelevant(String,QualityQuery)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.benchmark.quality.Judge.maxRecall(QualityQuery)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.benchmark.quality.Judge.validateData(QualityQuery[],PrintWriter)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.benchmark.quality.QualityBenchmark.QualityBenchmark(QualityQuery[],QualityQueryParser,IndexSearcher,String)",0,1,n/a,16,0,4,4,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.analyzeQueryResults(QualityQuery,Query,TopDocs,Judge,PrintWriter,long)",13,1,n/a,19,1,6,16,3
"org.apache.lucene.benchmark.quality.QualityBenchmark.execute(Judge,SubmissionReport,PrintWriter)",8,1,n/a,34,2,3,17,5
"org.apache.lucene.benchmark.quality.QualityBenchmark.getMaxQueries()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.getMaxResults()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.setMaxQueries(int)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.quality.QualityBenchmark.setMaxResults(int)",0,1,n/a,6,0,1,1,1
"org.apache.lucene.benchmark.quality.QualityQuery.QualityQuery(String,Map<String, String>)",0,2,n/a,9,0,2,2,1
"org.apache.lucene.benchmark.quality.QualityQuery.compareTo(QualityQuery)",3,0,n/a,13,1,1,5,2
"org.apache.lucene.benchmark.quality.QualityQuery.getNames()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityQuery.getQueryID()",0,4,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityQuery.getValue(String)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.benchmark.quality.QualityQueryParser.parse(QualityQuery)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.benchmark.quality.QualityStats.QualityStats(double,long)",1,1,n/a,10,0,2,4,1
"org.apache.lucene.benchmark.quality.QualityStats.RecallPoint.RecallPoint(int,double)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.benchmark.quality.QualityStats.RecallPoint.getRank()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.RecallPoint.getRecall()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.addResult(int,boolean,long)",5,0,n/a,27,2,3,15,8
"org.apache.lucene.benchmark.quality.QualityStats.average(QualityStats[])",4,1,n/a,45,3,1,36,6
"org.apache.lucene.benchmark.quality.QualityStats.format(String,int)",3,9,n/a,5,0,2,3,2
"org.apache.lucene.benchmark.quality.QualityStats.fracFormat(String)",6,9,n/a,7,0,1,5,1
"org.apache.lucene.benchmark.quality.QualityStats.getAvp()",0,2,n/a,6,0,0,1,2
"org.apache.lucene.benchmark.quality.QualityStats.getDocNamesExtractTime()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getMRR()",0,2,n/a,14,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getMaxGoodPoints()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getNumGoodPoints()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getNumPoints()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getPrecisionAt(int)",1,2,n/a,14,1,1,5,4
"org.apache.lucene.benchmark.quality.QualityStats.getRecall()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getRecallPoints()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.getSearchTime()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.QualityStats.log(String,int,PrintWriter,String)",49,1,n/a,42,1,4,28,8
"org.apache.lucene.benchmark.quality.TestQualityRun.createReutersIndex()",2,1,n/a,23,0,0,2,1
"org.apache.lucene.benchmark.quality.TestQualityRun.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.benchmark.quality.TestQualityRun.testTrecQuality()",73,0,n/a,75,4,0,66,14
"org.apache.lucene.benchmark.quality.TestQualityRun.testTrecTopicsReader()",25,0,n/a,26,0,0,16,1
"org.apache.lucene.benchmark.quality.trec.QueryDriver.main(String[])",42,0,n/a,45,1,1,39,7
"org.apache.lucene.benchmark.quality.trec.Trec1MQReader.Trec1MQReader(String)",1,0,n/a,8,0,1,2,1
"org.apache.lucene.benchmark.quality.trec.Trec1MQReader.readQueries(BufferedReader)",16,0,n/a,35,3,1,18,3
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement.QRelJudgement(String)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement.addRelevandDoc(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement.isRelevant(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement.maxRecall()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.benchmark.quality.trec.TrecJudge.TrecJudge(BufferedReader)",19,1,n/a,47,5,1,23,8
"org.apache.lucene.benchmark.quality.trec.TrecJudge.isRelevant(String,QualityQuery)",3,0,n/a,5,0,2,2,2
"org.apache.lucene.benchmark.quality.trec.TrecJudge.maxRecall(QualityQuery)",3,0,n/a,8,1,1,4,2
"org.apache.lucene.benchmark.quality.trec.TrecJudge.validateData(QualityQuery[],PrintWriter)",17,0,n/a,33,3,2,25,9
"org.apache.lucene.benchmark.quality.trec.TrecTopicsReader.TrecTopicsReader()",1,2,n/a,6,0,0,1,1
"org.apache.lucene.benchmark.quality.trec.TrecTopicsReader.read(BufferedReader,String,StringBuilder,boolean,boolean)",5,4,n/a,24,3,5,15,7
"org.apache.lucene.benchmark.quality.trec.TrecTopicsReader.readQueries(BufferedReader)",36,2,n/a,55,3,1,38,8
"org.apache.lucene.benchmark.quality.utils.DocNameExtractor.DocNameExtractor(String)",2,1,n/a,5,2,1,3,2
"org.apache.lucene.benchmark.quality.utils.DocNameExtractor.docName(IndexSearcher,int)",2,1,n/a,10,0,2,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.QualityQueriesFinder(Directory)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.TermDf.TermDf(String,int)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.TermsDfQueue.TermsDfQueue(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.TermsDfQueue.lessThan(TermDf,TermDf)",0,6,n/a,4,0,2,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestQueries(String,int)",1,1,n/a,11,1,2,9,2
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.bestTerms(String,int)",19,1,n/a,28,3,2,20,5
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.formatQueryAsTrecTopic(int,String,String,String)",0,1,n/a,11,0,4,1,4
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.main(String[])",8,0,n/a,15,1,1,9,3
"org.apache.lucene.benchmark.quality.utils.SimpleQQParser.SimpleQQParser(String,String)",1,1,n/a,8,0,2,1,1
"org.apache.lucene.benchmark.quality.utils.SimpleQQParser.SimpleQQParser(String[],String)",0,1,n/a,9,0,2,2,1
"org.apache.lucene.benchmark.quality.utils.SimpleQQParser.parse(QualityQuery)",9,0,n/a,14,1,1,10,3
"org.apache.lucene.benchmark.quality.utils.SubmissionReport.SubmissionReport(PrintWriter,String)",3,2,n/a,12,0,2,5,1
"org.apache.lucene.benchmark.quality.utils.SubmissionReport.flush()",1,1,n/a,5,1,0,2,2
"org.apache.lucene.benchmark.quality.utils.SubmissionReport.format(String,int)",3,2,n/a,5,0,2,3,2
"org.apache.lucene.benchmark.quality.utils.SubmissionReport.report(QualityQuery,TopDocs,String,IndexSearcher)",7,2,n/a,27,1,4,10,3
"org.apache.lucene.benchmark.utils.ExtractReuters.ExtractReuters(File,File)",3,1,n/a,8,1,2,5,2
"org.apache.lucene.benchmark.utils.ExtractReuters.extract()",6,1,n/a,3,2,0,6,4
"org.apache.lucene.benchmark.utils.ExtractReuters.extractFile(File)",27,1,n/a,49,6,1,30,8
"org.apache.lucene.benchmark.utils.ExtractReuters.main(String[])",12,0,n/a,20,1,1,13,3
"org.apache.lucene.benchmark.utils.ExtractReuters.usage(String)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.benchmark.utils.ExtractWikipedia.ExtractWikipedia(DocMaker,File)",3,1,n/a,9,1,2,8,2
"org.apache.lucene.benchmark.utils.ExtractWikipedia.create(String,String,String,String)",15,1,n/a,19,1,4,15,2
"org.apache.lucene.benchmark.utils.ExtractWikipedia.directory(int,File)",5,2,n/a,15,1,2,10,4
"org.apache.lucene.benchmark.utils.ExtractWikipedia.extract()",10,1,n/a,15,2,0,8,3
"org.apache.lucene.benchmark.utils.ExtractWikipedia.main(String[])",26,0,n/a,33,2,1,29,9
"org.apache.lucene.benchmark.utils.ExtractWikipedia.printUsage()",2,1,n/a,5,0,0,2,1
"org.apache.lucene.collation.CollationKeyAnalyzer.CollationKeyAnalyzer(Collator)",0,4,n/a,3,0,1,1,1
"org.apache.lucene.collation.CollationKeyAnalyzer.reusableTokenStream(String,Reader)",6,46,n/a,14,1,2,8,2
"org.apache.lucene.collation.CollationKeyAnalyzer.tokenStream(String,Reader)",2,78,n/a,6,0,2,3,1
"org.apache.lucene.collation.CollationKeyFilter.CollationKeyFilter(TokenStream,Collator)",2,3,n/a,10,0,2,2,1
"org.apache.lucene.collation.CollationKeyFilter.incrementToken()",9,216,n/a,15,1,0,8,2
"org.apache.lucene.collation.ICUCollationKeyAnalyzer.ICUCollationKeyAnalyzer(Collator)",0,6,n/a,3,0,1,1,1
"org.apache.lucene.collation.ICUCollationKeyAnalyzer.reusableTokenStream(String,Reader)",6,46,n/a,14,1,2,8,2
"org.apache.lucene.collation.ICUCollationKeyAnalyzer.tokenStream(String,Reader)",2,78,n/a,6,0,2,3,1
"org.apache.lucene.collation.ICUCollationKeyFilter.ICUCollationKeyFilter(TokenStream,Collator)",3,3,n/a,14,1,2,4,2
"org.apache.lucene.collation.ICUCollationKeyFilter.incrementToken()",10,216,n/a,19,2,0,11,3
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testCollationKeySort()",11,1,n/a,21,0,0,5,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testFarsiRangeFilterCollating()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testFarsiRangeQueryCollating()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testFarsiTermRangeQuery()",1,1,n/a,5,0,0,1,1
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer.testThreadSafe()",4,0,n/a,9,1,0,8,2
"org.apache.lucene.collation.TestICUCollationKeyFilter.TestAnalyzer.TestAnalyzer(Collator)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.TestAnalyzer.tokenStream(String,Reader)",2,78,n/a,6,0,2,3,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.testCollationKeySort()",11,1,n/a,20,0,0,5,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.testFarsiRangeFilterCollating()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.testFarsiRangeQueryCollating()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.collation.TestICUCollationKeyFilter.testFarsiTermRangeQuery()",1,1,n/a,5,0,0,1,1
"org.apache.lucene.demo.IndexFiles.IndexFiles()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.demo.IndexFiles.indexDocs(IndexWriter,File)",28,2,n/a,78,4,2,27,7
"org.apache.lucene.demo.IndexFiles.main(String[])",29,0,n/a,66,2,1,37,10
"org.apache.lucene.demo.SearchFiles.SearchFiles()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.demo.SearchFiles.doPagingSearch(BufferedReader,IndexSearcher,Query,int,boolean,boolean)",31,1,n/a,89,5,6,59,22
"org.apache.lucene.demo.SearchFiles.main(String[])",43,0,n/a,82,3,1,69,25
"org.apache.lucene.demo.TestDemo.testIndexSearch()",11,0,n/a,11,0,0,9,1
"org.apache.lucene.demo.TestDemo.testOneSearch(File,String,int)",10,6,n/a,14,1,3,10,1
"org.apache.lucene.document.AbstractField.AbstractField()",0,4,n/a,3,0,0,0,1
"org.apache.lucene.document.AbstractField.AbstractField(String,Store,Index,TermVector)",7,3,n/a,11,0,4,9,2
"org.apache.lucene.document.AbstractField.getBinaryLength()",0,5,n/a,13,1,0,5,3
"org.apache.lucene.document.AbstractField.getBinaryOffset()",0,5,n/a,8,0,0,1,1
"org.apache.lucene.document.AbstractField.getBinaryValue()",1,11,n/a,10,0,0,1,1
"org.apache.lucene.document.AbstractField.getBinaryValue(byte[])",0,1,n/a,6,0,1,3,3
"org.apache.lucene.document.AbstractField.getBoost()",0,6,n/a,14,0,0,1,1
"org.apache.lucene.document.AbstractField.getIndexOptions()",0,5,n/a,2,0,0,1,1
"org.apache.lucene.document.AbstractField.getOmitNorms()",0,17,n/a,2,0,0,1,1
"org.apache.lucene.document.AbstractField.getOmitTermFreqAndPositions()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.document.AbstractField.isBinary()",0,10,n/a,4,0,0,1,1
"org.apache.lucene.document.AbstractField.isIndexed()",0,10,n/a,3,0,0,1,1
"org.apache.lucene.document.AbstractField.isLazy()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.document.AbstractField.isStoreOffsetWithTermVector()",0,3,n/a,7,0,0,1,1
"org.apache.lucene.document.AbstractField.isStorePositionWithTermVector()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.document.AbstractField.isStored()",0,10,n/a,4,0,0,1,1
"org.apache.lucene.document.AbstractField.isTermVectorStored()",0,8,n/a,9,0,0,1,1
"org.apache.lucene.document.AbstractField.isTokenized()",0,10,n/a,4,0,0,1,1
"org.apache.lucene.document.AbstractField.name()",0,56,n/a,4,0,0,1,1
"org.apache.lucene.document.AbstractField.setBoost(float)",0,14,n/a,25,0,1,1,1
"org.apache.lucene.document.AbstractField.setIndexOptions(IndexOptions)",0,15,n/a,12,0,1,1,1
"org.apache.lucene.document.AbstractField.setOmitNorms(boolean)",0,12,n/a,6,0,1,1,1
"org.apache.lucene.document.AbstractField.setOmitTermFreqAndPositions(boolean)",0,0,n/a,9,1,1,3,2
"org.apache.lucene.document.AbstractField.setStoreTermVector(TermVector)",3,5,n/a,5,0,1,3,1
"org.apache.lucene.document.AbstractField.toString()",30,0,n/a,56,1,0,41,19
"org.apache.lucene.document.CompressionTools.CompressionTools()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.document.CompressionTools.compress(byte[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.document.CompressionTools.compress(byte[],int,int)",1,0,n/a,4,0,3,1,1
"org.apache.lucene.document.CompressionTools.compress(byte[],int,int,int)",10,3,n/a,25,2,4,12,2
"org.apache.lucene.document.CompressionTools.compressString(String)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.document.CompressionTools.compressString(String,int)",4,1,n/a,8,0,2,3,1
"org.apache.lucene.document.CompressionTools.decompress(byte[])",8,2,n/a,19,2,1,10,2
"org.apache.lucene.document.CompressionTools.decompressString(byte[])",4,0,n/a,8,0,1,4,1
"org.apache.lucene.document.DateField.DateField()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.document.DateField.MAX_DATE_STRING()",2,0,n/a,7,0,0,7,2
"org.apache.lucene.document.DateField.MIN_DATE_STRING()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.document.DateField.dateToString(Date)",2,13,n/a,8,0,1,1,1
"org.apache.lucene.document.DateField.stringToDate(String)",2,0,n/a,4,0,1,1,1
"org.apache.lucene.document.DateField.stringToTime(String)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.document.DateField.timeToString(long)",9,2,n/a,21,1,1,11,5
"org.apache.lucene.document.DateTools.DateTools()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.document.DateTools.Resolution.Resolution(int)",3,7,n/a,7,0,1,3,1
"org.apache.lucene.document.DateTools.Resolution.toString()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.document.DateTools.dateToString(Date,Resolution)",2,10,n/a,12,0,2,1,1
"org.apache.lucene.document.DateTools.round(Date,Resolution)",3,1,n/a,12,0,2,1,1
"org.apache.lucene.document.DateTools.round(long,Resolution)",10,2,n/a,36,1,2,20,9
"org.apache.lucene.document.DateTools.stringToDate(String)",4,2,n/a,17,1,1,3,2
"org.apache.lucene.document.DateTools.stringToTime(String)",2,0,n/a,13,0,1,1,1
"org.apache.lucene.document.DateTools.timeToString(long,Resolution)",4,1,n/a,13,0,2,2,1
"org.apache.lucene.document.Document.Document()",0,184,n/a,2,0,0,0,1
"org.apache.lucene.document.Document.add(Fieldable)",1,395,n/a,13,0,1,1,1
"org.apache.lucene.document.Document.get(String)",4,123,n/a,14,1,1,4,4
"org.apache.lucene.document.Document.getBinaryValue(String)",4,0,n/a,16,1,1,4,4
"org.apache.lucene.document.Document.getBinaryValues(String)",9,0,n/a,19,1,1,7,5
"org.apache.lucene.document.Document.getBoost()",0,4,n/a,15,0,0,1,1
"org.apache.lucene.document.Document.getField(String)",1,7,n/a,13,0,1,1,1
"org.apache.lucene.document.Document.getFieldable(String)",2,37,n/a,11,1,1,4,3
"org.apache.lucene.document.Document.getFieldables(String)",7,2,n/a,19,2,1,7,4
"org.apache.lucene.document.Document.getFields()",0,26,n/a,9,0,0,1,1
"org.apache.lucene.document.Document.getFields(String)",7,1,n/a,25,2,1,7,4
"org.apache.lucene.document.Document.getValues(String)",9,6,n/a,19,1,1,7,5
"org.apache.lucene.document.Document.removeField(String)",6,1,n/a,20,2,1,6,3
"org.apache.lucene.document.Document.removeFields(String)",6,0,n/a,18,2,1,5,3
"org.apache.lucene.document.Document.setBoost(float)",0,9,n/a,14,0,1,1,1
"org.apache.lucene.document.Document.toString()",10,1,n/a,14,1,0,11,3
"org.apache.lucene.document.Field.Field(String,Reader)",1,0,n/a,13,0,2,1,1
"org.apache.lucene.document.Field.Field(String,Reader,TermVector)",4,1,n/a,24,0,3,11,3
"org.apache.lucene.document.Field.Field(String,String,Store,Index)",1,165,n/a,15,0,4,1,1
"org.apache.lucene.document.Field.Field(String,String,Store,Index,TermVector)",1,28,n/a,20,0,5,1,1
"org.apache.lucene.document.Field.Field(String,TokenStream)",1,3,n/a,14,0,2,1,1
"org.apache.lucene.document.Field.Field(String,TokenStream,TermVector)",4,9,n/a,26,0,3,12,3
"org.apache.lucene.document.Field.Field(String,boolean,String,Store,Index,TermVector)",10,3,n/a,44,1,6,20,9
"org.apache.lucene.document.Field.Field(String,byte[])",1,4,n/a,9,0,2,1,1
"org.apache.lucene.document.Field.Field(String,byte[],Store)",2,0,n/a,16,1,3,3,2
"org.apache.lucene.document.Field.Field(String,byte[],int,int)",4,5,n/a,25,0,4,15,3
"org.apache.lucene.document.Field.Field(String,byte[],int,int,Store)",2,0,n/a,18,1,5,3,2
"org.apache.lucene.document.Field.Index.isAnalyzed()",n/a,2,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Field.Index.isIndexed()",n/a,3,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Field.Index.omitNorms()",n/a,2,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Field.Index.toIndex(boolean,boolean)",1,2,n/a,4,0,2,1,1
"org.apache.lucene.document.Field.Index.toIndex(boolean,boolean,boolean)",0,1,n/a,19,2,3,9,5
"org.apache.lucene.document.Field.Store.isStored()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Field.TermVector.isStored()",n/a,1,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Field.TermVector.toTermVector(boolean,boolean,boolean)",0,2,n/a,17,2,3,9,5
"org.apache.lucene.document.Field.TermVector.withOffsets()",n/a,1,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Field.TermVector.withPositions()",n/a,1,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Field.readerValue()",0,2,n/a,4,0,0,1,2
"org.apache.lucene.document.Field.setTokenStream(TokenStream)",0,0,n/a,7,0,1,3,1
"org.apache.lucene.document.Field.setValue(Reader)",2,16,n/a,10,1,1,5,3
"org.apache.lucene.document.Field.setValue(String)",1,16,n/a,17,1,1,3,2
"org.apache.lucene.document.Field.setValue(byte[])",1,0,n/a,9,1,1,5,2
"org.apache.lucene.document.Field.setValue(byte[],int,int)",1,0,n/a,9,1,3,5,2
"org.apache.lucene.document.Field.stringValue()",0,69,n/a,4,0,0,1,2
"org.apache.lucene.document.Field.tokenStreamValue()",0,4,n/a,3,0,0,1,1
"org.apache.lucene.document.FieldSelector.accept(String)",n/a,3,8,n/a,n/a,1,n/a,n/a
"org.apache.lucene.document.Fieldable.getBinaryLength()",n/a,4,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.getBinaryOffset()",n/a,4,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.getBinaryValue()",n/a,11,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.getBinaryValue(byte[])",n/a,0,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.document.Fieldable.getBoost()",n/a,6,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.getIndexOptions()",n/a,4,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.getOmitNorms()",n/a,17,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.isBinary()",n/a,10,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.isIndexed()",n/a,9,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.isLazy()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.isStoreOffsetWithTermVector()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.isStorePositionWithTermVector()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.isStored()",n/a,10,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.isTermVectorStored()",n/a,8,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.isTokenized()",n/a,7,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.name()",n/a,55,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.readerValue()",n/a,2,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.setBoost(float)",n/a,5,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.document.Fieldable.setIndexOptions(IndexOptions)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.document.Fieldable.setOmitNorms(boolean)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.document.Fieldable.stringValue()",n/a,67,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.Fieldable.tokenStreamValue()",n/a,4,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.document.LoadFirstFieldSelector.accept(String)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.document.MapFieldSelector.MapFieldSelector(List<String>)",3,0,n/a,8,0,1,3,2
"org.apache.lucene.document.MapFieldSelector.MapFieldSelector(Map<String, FieldSelectorResult>)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.document.MapFieldSelector.MapFieldSelector(String...)",2,4,n/a,6,0,1,1,1
"org.apache.lucene.document.MapFieldSelector.accept(String)",1,3,n/a,8,0,1,2,2
"org.apache.lucene.document.NumberTools.longToString(long)",9,2,n/a,23,1,1,13,4
"org.apache.lucene.document.NumberTools.stringToLong(String)",8,0,n/a,32,1,1,13,6
"org.apache.lucene.document.NumericField.NumericField(String)",1,10,n/a,11,0,1,1,1
"org.apache.lucene.document.NumericField.NumericField(String,Store,boolean)",1,10,n/a,13,0,3,1,1
"org.apache.lucene.document.NumericField.NumericField(String,int)",1,0,n/a,12,0,2,1,1
"org.apache.lucene.document.NumericField.NumericField(String,int,Store,boolean)",3,7,n/a,18,0,4,5,3
"org.apache.lucene.document.NumericField.getBinaryValue(byte[])",0,1,n/a,5,0,1,1,1
"org.apache.lucene.document.NumericField.getDataType()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.document.NumericField.getNumericValue()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.document.NumericField.getPrecisionStep()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.document.NumericField.readerValue()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.document.NumericField.setDoubleValue(double)",2,2,n/a,12,0,1,5,2
"org.apache.lucene.document.NumericField.setFloatValue(float)",2,2,n/a,12,0,1,5,2
"org.apache.lucene.document.NumericField.setIntValue(int)",2,13,n/a,12,0,1,5,2
"org.apache.lucene.document.NumericField.setLongValue(long)",2,5,n/a,12,0,1,5,2
"org.apache.lucene.document.NumericField.stringValue()",1,67,n/a,7,0,0,1,2
"org.apache.lucene.document.NumericField.tokenStreamValue()",10,4,n/a,28,3,0,23,9
"org.apache.lucene.document.SetBasedFieldSelector.SetBasedFieldSelector(Set<String>,Set<String>)",0,3,n/a,10,0,2,2,1
"org.apache.lucene.document.SetBasedFieldSelector.accept(String)",2,3,n/a,18,1,1,6,3
"org.apache.lucene.facet.FacetException.FacetException()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.FacetException.FacetException(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.FacetException.FacetException(String,Throwable)",2,0,n/a,4,0,2,2,1
"org.apache.lucene.facet.FacetException.FacetException(Throwable)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.FacetTestBase.NotSameResultError.NotSameResultError()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.FacetTestBase.SearchTaxoDirPair.SearchTaxoDirPair()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.FacetTestBase.afterClassFacetTestBase()",2,0,n/a,6,1,0,2,2
"org.apache.lucene.facet.FacetTestBase.assertCountsAndCardinality(Map<CategoryPath, Integer>,FacetResultNode,int)",10,2,n/a,12,1,3,7,3
"org.apache.lucene.facet.FacetTestBase.assertCountsAndCardinality(Map<CategoryPath, Integer>,List<FacetResult>)",7,1,n/a,11,2,2,6,3
"org.apache.lucene.facet.FacetTestBase.assertSameResults(List<FacetResult>,List<FacetResult>)",7,1,n/a,12,1,2,7,2
"org.apache.lucene.facet.FacetTestBase.beforeClassFacetTestBase()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.facet.FacetTestBase.closeAll()",1,4,n/a,8,0,0,4,1
"org.apache.lucene.facet.FacetTestBase.facetCountsTruth()",23,1,n/a,29,4,0,20,7
"org.apache.lucene.facet.FacetTestBase.getAnalyzer()",1,1,n/a,7,0,0,1,1
"org.apache.lucene.facet.FacetTestBase.getCategories(int)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.facet.FacetTestBase.getContent(int)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.facet.FacetTestBase.getFacetIndexingParams(int)",1,3,n/a,4,2,1,2,1
"org.apache.lucene.facet.FacetTestBase.getFacetedSearchParams()",1,5,n/a,7,0,0,1,1
"org.apache.lucene.facet.FacetTestBase.getFacetedSearchParams(int)",2,2,n/a,8,0,1,2,1
"org.apache.lucene.facet.FacetTestBase.getIndexWriterConfig(Analyzer)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.facet.FacetTestBase.indexDoc(FacetIndexingParams,RandomIndexWriter,TaxonomyWriter,String,List<CategoryPath>)",7,2,n/a,11,0,5,6,1
"org.apache.lucene.facet.FacetTestBase.initIndex()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.facet.FacetTestBase.initIndex(int)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.facet.FacetTestBase.initIndex(int,boolean)",25,1,n/a,30,2,2,21,4
"org.apache.lucene.facet.FacetTestBase.numDocsToIndex()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.FacetTestBase.populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams)",9,2,n/a,17,1,3,9,2
"org.apache.lucene.facet.FacetTestBase.resStringValueOnly(List<FacetResult>)",7,2,n/a,8,1,1,4,2
"org.apache.lucene.facet.FacetTestBase.resultNodesAsArray(FacetResultNode)",4,2,n/a,8,1,1,4,2
"org.apache.lucene.facet.FacetTestUtils.IndexTaxonomyReaderPair.close()",3,5,n/a,5,0,0,3,1
"org.apache.lucene.facet.FacetTestUtils.IndexTaxonomyWriterPair.close()",2,4,n/a,4,0,0,2,1
"org.apache.lucene.facet.FacetTestUtils.IndexTaxonomyWriterPair.commit()",2,1,n/a,4,0,0,2,1
"org.apache.lucene.facet.FacetTestUtils.add(FacetIndexingParams,RandomIndexWriter,TaxonomyWriter,String...)",10,9,n/a,12,0,4,7,1
"org.apache.lucene.facet.FacetTestUtils.createIndexTaxonomyDirs(int)",2,5,n/a,8,1,1,7,2
"org.apache.lucene.facet.FacetTestUtils.createIndexTaxonomyReaderPair(Directory[][])",4,4,n/a,12,1,1,10,2
"org.apache.lucene.facet.FacetTestUtils.createIndexTaxonomyWriterPair(Directory[][])",7,4,n/a,15,1,1,11,2
"org.apache.lucene.facet.FacetTestUtils.search(IndexSearcher,TaxonomyReader,DefaultFacetIndexingParams,int,String...)",14,0,n/a,23,1,5,15,2
"org.apache.lucene.facet.enhancements.CategoryEnhancement.equals(Object)",n/a,0,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.enhancements.CategoryEnhancement.extractCategoryTokenData(byte[],int,int)",n/a,2,4,n/a,n/a,3,n/a,n/a
"org.apache.lucene.facet.enhancements.CategoryEnhancement.generatesCategoryList()",n/a,1,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.enhancements.CategoryEnhancement.getCategoryListTermText()",n/a,2,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.enhancements.CategoryEnhancement.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",n/a,1,4,n/a,n/a,3,n/a,n/a
"org.apache.lucene.facet.enhancements.CategoryEnhancement.getCategoryTokenBytes(CategoryAttribute)",n/a,2,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.enhancements.CategoryEnhancement.getRetainableProperty()",n/a,2,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.equals(Object)",0,0,n/a,7,1,1,3,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.extractCategoryTokenData(byte[],int,int)",0,2,n/a,3,0,3,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.generatesCategoryList()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.getCategoryListTermText()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",0,1,n/a,5,0,3,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.getCategoryTokenBytes(CategoryAttribute)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.getRetainableProperty()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.equals(Object)",0,0,n/a,7,1,1,3,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.extractCategoryTokenData(byte[],int,int)",2,2,n/a,9,1,3,5,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.generatesCategoryList()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.getCategoryListTermText()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",0,1,n/a,5,0,3,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.getCategoryTokenBytes(CategoryAttribute)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.getRetainableProperty()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.equals(Object)",0,0,n/a,7,1,1,3,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.extractCategoryTokenData(byte[],int,int)",2,2,n/a,9,1,3,5,2
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.generatesCategoryList()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.getCategoryListTermText()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",0,1,n/a,5,0,3,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.getCategoryTokenBytes(CategoryAttribute)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.getRetainableProperty()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.EnhancementsCategoryTokenizer.EnhancementsCategoryTokenizer(TokenStream,EnhancementsIndexingParams)",7,0,n/a,22,1,2,6,2
"org.apache.lucene.facet.enhancements.EnhancementsCategoryTokenizer.setPayload()",8,1,n/a,43,3,0,26,8
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder.EnhancementsDocumentBuilder(TaxonomyWriter,EnhancementsIndexingParams)",1,5,n/a,10,0,2,1,1
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder.getCategoryListTokenizer(TokenStream)",4,2,n/a,14,2,1,5,3
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder.getCategoryTokenizer(TokenStream)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder.getParentsStream(CategoryAttributesStream)",4,2,n/a,14,2,1,7,3
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIterator.EnhancementsPayloadIterator(List<CategoryEnhancement>,IndexReader,Term)",3,5,n/a,21,0,3,4,1
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIterator.getCategoryData(CategoryEnhancement)",2,7,n/a,18,2,1,6,3
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIterator.setdoc(int)",4,10,n/a,18,1,1,14,4
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.buildAssociationIndex()",6,0,n/a,14,1,0,7,2
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.closeDirectories()",2,0,n/a,7,0,0,4,1
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.testEmptyIterator()",12,0,n/a,11,0,0,7,1
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.testFullIterator()",16,0,n/a,15,0,0,11,1
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest.testPartialIterator()",15,0,n/a,14,0,0,9,1
"org.apache.lucene.facet.enhancements.TwoEnhancementsTest.testTwoEmptyAndNonEmptyByteArrays()",38,0,n/a,37,0,0,22,1
"org.apache.lucene.facet.enhancements.TwoEnhancementsTest.testTwoNonEmptyByteArrays()",39,0,n/a,39,0,0,23,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.equals(Object)",0,0,n/a,7,1,1,3,2
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.extractCategoryTokenData(byte[],int,int)",3,2,n/a,7,1,3,4,2
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.generatesCategoryList()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getAssociationProperty(CategoryAttribute)",3,1,n/a,17,2,1,9,4
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getCategoryListTermText()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getCategoryListTokenizer(TokenStream,EnhancementsIndexingParams,TaxonomyWriter)",1,1,n/a,5,0,3,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getCategoryTokenBytes(CategoryAttribute)",4,2,n/a,11,1,1,8,2
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.getRetainableProperty()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement.isAssociationProperty(Class<? extends CategoryProperty>)",5,1,n/a,35,1,1,9,4
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.AssociationFloatProperty(float)",2,9,n/a,9,0,1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.equals(Object)",0,0,n/a,11,1,1,6,3
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.getFloatAssociation()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.merge(CategoryProperty)",3,1,n/a,6,0,1,2,1
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty.toString()",4,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty.AssociationIntProperty(int)",1,15,n/a,7,0,1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty.equals(Object)",0,0,n/a,11,1,1,6,3
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty.merge(CategoryProperty)",0,0,n/a,4,0,1,2,1
"org.apache.lucene.facet.enhancements.association.AssociationListTokenizer.AssociationListTokenizer(TokenStream,EnhancementsIndexingParams,CategoryEnhancement)",2,0,n/a,5,0,3,2,1
"org.apache.lucene.facet.enhancements.association.AssociationListTokenizer.handleStartOfInput()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationListTokenizer.incrementToken()",16,0,n/a,35,4,0,19,8
"org.apache.lucene.facet.enhancements.association.AssociationProperty.AssociationProperty(int)",0,0,n/a,9,0,1,1,1
"org.apache.lucene.facet.enhancements.association.AssociationProperty.getAssociation()",0,4,n/a,8,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationProperty.hasBeenSet()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationProperty.toString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationPropertyTest.testAssociationCountProperty()",9,0,n/a,9,0,0,6,1
"org.apache.lucene.facet.enhancements.association.AssociationPropertyTest.testAssociationFloatProperty()",9,0,n/a,9,0,0,6,1
"org.apache.lucene.facet.enhancements.association.AssociationPropertyTest.testEquals()",14,0,n/a,12,0,0,9,1
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.AssociationsPayloadIterator(IndexReader,String)",5,2,n/a,23,0,2,3,1
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.equals(Object)",3,0,n/a,21,2,1,13,7
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.fetchAssociations(int)",5,1,n/a,44,2,1,13,6
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.getAssociatedOrdinals()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.getAssociation(int)",2,2,n/a,18,1,1,3,2
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.hashCode()",1,0,n/a,10,0,0,4,2
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator.setNextDoc(int)",4,3,n/a,25,1,1,8,2
"org.apache.lucene.facet.enhancements.association.CustomAssociationPropertyTest.testCustomProperty()",43,0,n/a,4,2,0,40,3
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.DefaultEnhancementsIndexingParams(CategoryEnhancement...)",3,3,n/a,9,0,1,3,1
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.DefaultEnhancementsIndexingParams(CategoryListParams,CategoryEnhancement...)",3,0,n/a,12,0,2,3,1
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.addCategoryEnhancements(CategoryEnhancement...)",2,2,n/a,8,1,1,4,3
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.getCategoryEnhancements()",1,0,n/a,6,1,0,3,3
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.getRetainableProperties()",5,0,n/a,15,2,0,9,5
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams.validateparams(CategoryEnhancement...)",1,2,n/a,5,1,1,2,3
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParamsTest.testCategoryEnhancements()",19,0,n/a,25,0,0,12,1
"org.apache.lucene.facet.enhancements.params.EnhancementsIndexingParams.addCategoryEnhancements(CategoryEnhancement...)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.enhancements.params.EnhancementsIndexingParams.getCategoryEnhancements()",n/a,11,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.enhancements.params.EnhancementsIndexingParams.getRetainableProperties()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.example.ExampleResult.getFacetResults()",0,16,n/a,6,0,0,1,1
"org.apache.lucene.facet.example.ExampleResult.setFacetResults(List<FacetResult>)",0,7,n/a,6,0,1,1,1
"org.apache.lucene.facet.example.ExampleUtils.log(Object)",2,28,n/a,5,1,1,2,2
"org.apache.lucene.facet.example.TestAdaptiveExample.testAdaptive()",12,0,n/a,8,0,0,5,1
"org.apache.lucene.facet.example.TestAssociationExample.assertExampleResult(ExampleResult,double[])",17,2,n/a,11,1,2,8,2
"org.apache.lucene.facet.example.TestAssociationExample.testAssociationExamples()",6,0,n/a,5,0,0,2,1
"org.apache.lucene.facet.example.TestMultiCLExample.assertCorrectMultiResults(ExampleResult)",58,2,n/a,42,0,1,26,1
"org.apache.lucene.facet.example.TestMultiCLExample.testMulti()",3,0,n/a,5,0,0,2,1
"org.apache.lucene.facet.example.TestSimpleExample.testDrillDown()",27,0,n/a,20,0,0,12,1
"org.apache.lucene.facet.example.TestSimpleExample.testSimple()",12,0,n/a,8,0,0,5,1
"org.apache.lucene.facet.example.adaptive.AdaptiveMain.main(String[])",3,0,n/a,8,0,1,2,1
"org.apache.lucene.facet.example.adaptive.AdaptiveMain.runSample()",8,2,n/a,13,0,0,9,1
"org.apache.lucene.facet.example.adaptive.AdaptiveSearcher.searchWithFacets(Directory,Directory)",21,0,n/a,42,1,2,18,2
"org.apache.lucene.facet.example.association.AssociationIndexer.index(Directory,Directory)",24,1,n/a,73,2,2,33,4
"org.apache.lucene.facet.example.association.AssociationMain.main(String[])",5,0,n/a,9,0,1,3,1
"org.apache.lucene.facet.example.association.AssociationMain.runSumFloatAssociationSample()",8,2,n/a,13,0,0,9,1
"org.apache.lucene.facet.example.association.AssociationMain.runSumIntAssociationSample()",8,2,n/a,13,0,0,9,1
"org.apache.lucene.facet.example.association.AssociationSearcher.searchSumFloatAssociation(Directory,Directory)",7,0,n/a,15,0,2,7,1
"org.apache.lucene.facet.example.association.AssociationSearcher.searchSumIntAssociation(Directory,Directory)",7,0,n/a,15,0,2,7,1
"org.apache.lucene.facet.example.merge.TaxonomyMergeUtils.merge(Directory,Directory,Directory,Directory)",7,1,n/a,19,0,4,5,1
"org.apache.lucene.facet.example.merge.TaxonomyMergeUtils.merge(Directory,Directory,IndexWriter,DirectoryTaxonomyWriter)",2,2,n/a,14,0,4,1,1
"org.apache.lucene.facet.example.merge.TaxonomyMergeUtils.merge(Directory,Directory,OrdinalMap,IndexWriter,DirectoryTaxonomyWriter)",10,4,n/a,22,1,5,9,1
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer.index(Directory,Directory)",10,2,n/a,31,2,2,25,5
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer.index(Directory,Directory,FacetIndexingParams,String[],String[],CategoryPath[][])",5,0,n/a,14,0,6,3,1
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer.index(IndexWriter,DirectoryTaxonomyWriter,FacetIndexingParams,String[],String[],CategoryPath[][])",16,1,n/a,48,1,6,19,2
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer.main(String[])",3,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.example.multiCL.MultiCLMain.main(String[])",3,0,n/a,11,0,1,2,1
"org.apache.lucene.facet.example.multiCL.MultiCLMain.runSample()",8,2,n/a,14,0,0,9,1
"org.apache.lucene.facet.example.multiCL.MultiCLSearcher.searchWithFacets(Directory,Directory,FacetIndexingParams)",5,0,n/a,24,0,3,6,1
"org.apache.lucene.facet.example.multiCL.MultiCLSearcher.searchWithFacets(IndexReader,TaxonomyReader,FacetIndexingParams)",20,2,n/a,41,1,3,15,2
"org.apache.lucene.facet.example.simple.SimpleIndexer.index(Directory,Directory)",19,1,n/a,44,1,2,21,2
"org.apache.lucene.facet.example.simple.SimpleMain.main(String[])",6,0,n/a,9,0,1,3,1
"org.apache.lucene.facet.example.simple.SimpleMain.runDrillDown()",12,2,n/a,19,0,0,13,1
"org.apache.lucene.facet.example.simple.SimpleMain.runSimple()",12,2,n/a,19,0,0,13,1
"org.apache.lucene.facet.example.simple.SimpleSearcher.searchWithDrillDown(IndexReader,TaxonomyReader)",14,0,n/a,29,0,2,9,1
"org.apache.lucene.facet.example.simple.SimpleSearcher.searchWithFacets(IndexReader,TaxonomyReader)",3,0,n/a,12,0,2,2,1
"org.apache.lucene.facet.example.simple.SimpleSearcher.searchWithRequest(IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...)",3,0,n/a,16,0,4,2,1
"org.apache.lucene.facet.example.simple.SimpleSearcher.searchWithRequestAndQuery(Query,IndexReader,TaxonomyReader,FacetIndexingParams,FacetRequest...)",11,1,n/a,39,1,5,15,4
"org.apache.lucene.facet.example.simple.SimpleUtils.categoryPathArrayToList(CategoryPath...)",2,1,n/a,11,1,1,4,2
"org.apache.lucene.facet.index.CategoryContainer.CategoryContainer()",1,5,n/a,6,0,0,1,1
"org.apache.lucene.facet.index.CategoryContainer.addCategory(CategoryAttribute)",5,1,n/a,20,2,1,6,3
"org.apache.lucene.facet.index.CategoryContainer.addCategory(CategoryPath)",1,4,n/a,10,0,1,1,1
"org.apache.lucene.facet.index.CategoryContainer.addCategory(CategoryPath,CategoryProperty)",2,4,n/a,21,0,2,3,1
"org.apache.lucene.facet.index.CategoryContainer.addCategory(CategoryPath,CategoryProperty...)",2,0,n/a,17,1,2,4,2
"org.apache.lucene.facet.index.CategoryContainer.clear()",1,2,n/a,6,0,0,1,1
"org.apache.lucene.facet.index.CategoryContainer.deserializeCategoryAttribute(ObjectInputStream)",5,1,n/a,17,2,1,9,3
"org.apache.lucene.facet.index.CategoryContainer.equals(Object)",1,0,n/a,8,1,1,4,2
"org.apache.lucene.facet.index.CategoryContainer.getCategoryAttribute(CategoryPath)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.facet.index.CategoryContainer.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.index.CategoryContainer.iterator()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.CategoryContainer.mapCategoryAttribute(CategoryPath)",3,4,n/a,13,1,1,5,2
"org.apache.lucene.facet.index.CategoryContainer.merge(CategoryContainer)",2,0,n/a,6,1,1,2,2
"org.apache.lucene.facet.index.CategoryContainer.readObject(ObjectInputStream)",4,0,n/a,12,1,1,7,2
"org.apache.lucene.facet.index.CategoryContainer.serializeCategoryAttribute(ObjectOutputStream,CategoryAttribute)",8,1,n/a,20,2,2,7,3
"org.apache.lucene.facet.index.CategoryContainer.size()",1,2,n/a,8,0,0,1,1
"org.apache.lucene.facet.index.CategoryContainer.toString()",7,0,n/a,10,1,0,6,2
"org.apache.lucene.facet.index.CategoryContainer.writeObject(ObjectOutputStream)",4,0,n/a,12,1,1,4,2
"org.apache.lucene.facet.index.CategoryContainerTest.basicTest()",5,0,n/a,8,0,0,3,1
"org.apache.lucene.facet.index.CategoryContainerTest.testAddCategoryAttributeWithProperty()",11,0,n/a,25,2,0,14,3
"org.apache.lucene.facet.index.CategoryContainerTest.testAddCategoryAttributeWithoutProperties()",3,0,n/a,13,0,0,2,1
"org.apache.lucene.facet.index.CategoryContainerTest.testAddNewCategoryWithProperty()",9,0,n/a,17,2,0,12,3
"org.apache.lucene.facet.index.CategoryContainerTest.testCategoryAttributeMerge()",12,0,n/a,27,2,0,15,3
"org.apache.lucene.facet.index.CategoryContainerTest.testCategoryAttributesStream()",3,0,n/a,16,1,0,6,2
"org.apache.lucene.facet.index.CategoryContainerTest.testExistingNewCategoryWithProperty()",9,0,n/a,17,2,0,12,3
"org.apache.lucene.facet.index.CategoryContainerTest.testIterator()",4,0,n/a,10,1,0,7,2
"org.apache.lucene.facet.index.CategoryContainerTest.testMultipleCategoriesWithProperties()",19,0,n/a,31,2,0,20,4
"org.apache.lucene.facet.index.CategoryContainerTest.testSerialization()",20,0,n/a,21,0,0,12,1
"org.apache.lucene.facet.index.CategoryContainerTestBase.setCategoryContainer()",5,0,n/a,11,1,0,9,2
"org.apache.lucene.facet.index.CategoryDocumentBuilder.CategoryDocumentBuilder(TaxonomyWriter)",2,5,n/a,16,0,1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.CategoryDocumentBuilder(TaxonomyWriter,FacetIndexingParams)",1,9,n/a,18,0,2,3,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.build(Document)",2,19,n/a,8,1,1,4,2
"org.apache.lucene.facet.index.CategoryDocumentBuilder.fillCategoriesMap(Iterable<CategoryAttribute>)",10,1,n/a,28,2,1,8,3
"org.apache.lucene.facet.index.CategoryDocumentBuilder.getCategoryListTokenizer(TokenStream)",1,2,n/a,14,0,1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.getCategoryTokenizer(TokenStream)",1,1,n/a,16,0,1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.getCountingListTokenizer(TokenStream)",1,1,n/a,13,0,1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.getParentsStream(CategoryAttributesStream)",1,2,n/a,15,0,1,1,1
"org.apache.lucene.facet.index.CategoryDocumentBuilder.setCategories(Iterable<CategoryAttribute>)",11,8,n/a,42,1,1,11,3
"org.apache.lucene.facet.index.CategoryDocumentBuilder.setCategoryPaths(Iterable<CategoryPath>)",3,13,n/a,21,1,1,4,2
"org.apache.lucene.facet.index.CategoryListPayloadStream.CategoryListPayloadStream(IntEncoder)",1,3,n/a,5,0,1,2,1
"org.apache.lucene.facet.index.CategoryListPayloadStream.appendIntToStream(int)",1,14,n/a,4,0,1,1,1
"org.apache.lucene.facet.index.CategoryListPayloadStream.convertStreamToByteArray()",2,3,n/a,10,1,0,4,2
"org.apache.lucene.facet.index.CategoryListPayloadStream.reset()",3,1,n/a,6,0,0,3,1
"org.apache.lucene.facet.index.CategoryListPayloadStreamTest.testStream()",48,0,n/a,40,0,0,30,1
"org.apache.lucene.facet.index.DummyProperty.equals(Object)",0,0,n/a,7,1,1,3,2
"org.apache.lucene.facet.index.DummyProperty.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.index.DummyProperty.merge(CategoryProperty)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.facet.index.DummyProperty.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsDirPayloadProcessor.FacetsDirPayloadProcessor(FacetIndexingParams,int[])",3,1,n/a,11,1,2,3,2
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsDirPayloadProcessor.getProcessor(Term)",2,1,n/a,8,1,1,4,2
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessor.FacetsPayloadProcessor(CategoryListParams,int[])",2,1,n/a,9,0,2,3,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessor.payloadLength()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessor.processPayload(byte[],int,int)",8,2,n/a,14,1,3,10,2
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessorProvider(Directory,int[],FacetIndexingParams)",1,1,n/a,12,0,3,2,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.getReaderProcessor(IndexReader)",1,3,n/a,4,0,1,1,2
"org.apache.lucene.facet.index.FacetsPayloadProcessorProviderTest.buildIndexWithFacets(Directory,Directory,boolean)",15,2,n/a,20,2,3,19,4
"org.apache.lucene.facet.index.FacetsPayloadProcessorProviderTest.testTaxonomyMergeUtils()",12,0,n/a,15,0,0,12,1
"org.apache.lucene.facet.index.FacetsPayloadProcessorProviderTest.verifyResults(Directory,Directory)",22,1,n/a,22,2,2,17,3
"org.apache.lucene.facet.index.attributes.CategoryAttribute.addProperty(CategoryProperty)",n/a,10,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.clear()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.clearProperties()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.clone()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.getCategoryPath()",n/a,12,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.getProperty(Class<? extends CategoryProperty>)",n/a,4,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.getProperty(Collection<Class<? extends CategoryProperty>>)",n/a,4,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.getPropertyClasses()",n/a,8,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.remove(Class<? extends CategoryProperty>)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.set(CategoryAttribute)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttribute.setCategoryPath(CategoryPath)",n/a,4,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.CategoryAttributeImpl()",0,4,n/a,6,0,0,0,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.CategoryAttributeImpl(CategoryPath)",1,6,n/a,9,0,1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.addProperty(CategoryProperty)",6,2,n/a,12,1,1,6,3
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.clear()",1,2,n/a,5,0,0,2,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.clearProperties()",1,1,n/a,5,1,0,2,2
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.clone()",4,6,n/a,13,1,0,6,4
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.copyTo(AttributeImpl)",0,5,n/a,5,0,1,2,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.equals(Object)",4,0,n/a,20,1,1,12,8
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.getCategoryPath()",0,0,n/a,9,0,0,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.getProperty(Class<? extends CategoryProperty>)",1,0,n/a,7,1,1,3,2
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.getProperty(Collection<Class<? extends CategoryProperty>>)",1,0,n/a,13,2,1,7,4
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.getPropertyClasses()",2,0,n/a,6,1,0,3,3
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.hashCode()",3,0,n/a,11,1,0,6,4
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.remove(Class<? extends CategoryProperty>)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.set(CategoryAttribute)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl.setCategoryPath(CategoryPath)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImplTest.testCategoryPath()",13,0,n/a,12,0,0,9,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImplTest.testCloneCopyToAndSet()",15,0,n/a,17,0,0,14,1
"org.apache.lucene.facet.index.attributes.CategoryAttributeImplTest.testProperties()",46,0,n/a,44,1,0,29,3
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterable(Iterable<CategoryPath>)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator.CategoryAttributesIterator(Iterable<CategoryPath>)",2,1,n/a,4,0,1,2,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator.next()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.iterator()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterableTest.testIterator()",7,0,n/a,16,1,0,13,3
"org.apache.lucene.facet.index.attributes.CategoryProperty.merge(CategoryProperty)",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.attributes.OrdinalProperty.clear()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.equals(Object)",0,0,n/a,11,1,1,6,3
"org.apache.lucene.facet.index.attributes.OrdinalProperty.getOrdinal()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.hasBeenSet()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.hashCode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.merge(CategoryProperty)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.facet.index.attributes.OrdinalProperty.setOrdinal(int)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.facet.index.categorypolicy.DefaultOrdinalPolicy.init(TaxonomyWriter)",0,0,n/a,4,0,1,0,1
"org.apache.lucene.facet.index.categorypolicy.DefaultOrdinalPolicy.shouldAdd(int)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.facet.index.categorypolicy.DefaultPathPolicy.shouldAdd(CategoryPath)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelOrdinalPolicy.NonTopLevelOrdinalPolicy()",0,2,n/a,8,0,0,1,1
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelOrdinalPolicy.init(TaxonomyWriter)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelOrdinalPolicy.shouldAdd(int)",1,2,n/a,17,3,1,6,4
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelPathPolicy.shouldAdd(CategoryPath)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.facet.index.categorypolicy.OrdinalPolicy.init(TaxonomyWriter)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.categorypolicy.OrdinalPolicy.shouldAdd(int)",n/a,12,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.categorypolicy.OrdinalPolicyTest.testDefaultOrdinalPolicy()",6,0,n/a,12,1,0,7,2
"org.apache.lucene.facet.index.categorypolicy.OrdinalPolicyTest.testNonTopLevelOrdinalPolicy()",25,0,n/a,43,2,0,36,6
"org.apache.lucene.facet.index.categorypolicy.PathPolicy.shouldAdd(CategoryPath)",n/a,10,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.categorypolicy.PathPolicyTest.testDefaultPathPolicy()",12,0,n/a,19,2,0,14,3
"org.apache.lucene.facet.index.categorypolicy.PathPolicyTest.testNonTopLevelPathPolicy()",23,0,n/a,40,2,0,36,6
"org.apache.lucene.facet.index.params.CategoryListParams.CategoryListParams()",1,6,n/a,7,0,0,1,1
"org.apache.lucene.facet.index.params.CategoryListParams.CategoryListParams(Term)",1,23,n/a,10,0,1,2,1
"org.apache.lucene.facet.index.params.CategoryListParams.createCategoryListIterator(IndexReader,int)",5,3,n/a,10,0,2,3,1
"org.apache.lucene.facet.index.params.CategoryListParams.createEncoder()",4,5,n/a,23,0,0,1,1
"org.apache.lucene.facet.index.params.CategoryListParams.equals(Object)",1,3,n/a,22,1,1,8,4
"org.apache.lucene.facet.index.params.CategoryListParams.getTerm()",0,10,n/a,6,0,0,1,1
"org.apache.lucene.facet.index.params.CategoryListParams.hashCode()",0,9,n/a,13,0,0,1,1
"org.apache.lucene.facet.index.params.CategoryListParamsTest.testDefaultSettings()",11,0,n/a,7,0,0,4,1
"org.apache.lucene.facet.index.params.CategoryListParamsTest.testIdentity()",5,0,n/a,14,0,0,3,1
"org.apache.lucene.facet.index.params.CategoryListParamsTest.testIdentityConsistency()",23,0,n/a,32,0,0,12,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.DefaultFacetIndexingParams()",2,22,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.DefaultFacetIndexingParams(CategoryListParams)",3,3,n/a,6,0,1,4,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.drillDownTermText(CategoryPath,char[])",2,0,n/a,3,0,2,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.equals(Object)",6,0,n/a,43,2,1,27,14
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.fixedOrdinalPolicy()",1,2,n/a,7,0,0,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.fixedPartitionSize()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.fixedPathPolicy()",1,2,n/a,7,0,0,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getAllCategoryListParams()",2,3,n/a,12,0,0,3,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getCategoryListParams(CategoryPath)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getFacetDelimChar()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getOrdinalPolicy()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getPartitionSize()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.getPathPolicy()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams.hashCode()",5,0,n/a,19,1,0,9,5
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParamsTest.testCategoryListParamsWithDefaultIndexingParams()",8,0,n/a,8,0,0,3,1
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParamsTest.testCategoryPolicies()",28,0,n/a,34,2,0,23,4
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParamsTest.testDefaultSettings()",31,0,n/a,36,0,0,17,1
"org.apache.lucene.facet.index.params.FacetIndexingParams.drillDownTermText(CategoryPath,char[])",n/a,3,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.index.params.FacetIndexingParams.getAllCategoryListParams()",n/a,6,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.params.FacetIndexingParams.getCategoryListParams(CategoryPath)",n/a,11,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.index.params.FacetIndexingParams.getFacetDelimChar()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.params.FacetIndexingParams.getOrdinalPolicy()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.params.FacetIndexingParams.getPartitionSize()",n/a,6,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.params.FacetIndexingParams.getPathPolicy()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.params.FacetParamsMissingPropertyException.FacetParamsMissingPropertyException(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.PerDimensionIndexingParams()",2,10,n/a,7,0,0,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.PerDimensionIndexingParams(CategoryListParams)",1,2,n/a,10,0,1,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.addCategoryListParams(CategoryPath,CategoryListParams)",2,18,n/a,10,0,2,1,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.getAllCategoryListParams()",4,0,n/a,12,1,0,4,2
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams.getCategoryListParams(CategoryPath)",3,3,n/a,14,2,1,5,3
"org.apache.lucene.facet.index.params.PerDimensionIndexingParamsTest.testCategoryListParamsAddition()",14,0,n/a,12,0,0,5,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParamsTest.testTopLevelSettings()",27,0,n/a,32,0,0,16,1
"org.apache.lucene.facet.index.streaming.CategoryAttributesStream.CategoryAttributesStream(Iterable<CategoryAttribute>)",1,11,n/a,12,0,1,3,1
"org.apache.lucene.facet.index.streaming.CategoryAttributesStream.incrementToken()",4,220,n/a,14,2,0,8,4
"org.apache.lucene.facet.index.streaming.CategoryAttributesStream.reset()",0,95,n/a,4,0,0,1,1
"org.apache.lucene.facet.index.streaming.CategoryAttributesStreamTest.testStream()",21,0,n/a,44,2,0,26,7
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.CategoryListTokenizer(TokenStream,FacetIndexingParams)",1,2,n/a,7,0,2,1,1
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.handleEndOfInput()",0,0,n/a,7,0,0,0,1
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.handleStartOfInput()",0,1,n/a,7,0,0,0,1
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.incrementToken()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer.reset()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.facet.index.streaming.CategoryParentsStream.CategoryParentsStream(CategoryAttributesStream,TaxonomyWriter,FacetIndexingParams)",6,8,n/a,22,0,3,7,1
"org.apache.lucene.facet.index.streaming.CategoryParentsStream.addRetainableProperty(Class<? extends CategoryProperty>)",2,4,n/a,13,1,1,3,2
"org.apache.lucene.facet.index.streaming.CategoryParentsStream.clearCategoryProperties()",7,1,n/a,24,3,0,8,6
"org.apache.lucene.facet.index.streaming.CategoryParentsStream.incrementToken()",22,219,n/a,52,4,0,30,11
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.MyCategoryListTokenizer.MyCategoryListTokenizer(TokenStream,FacetIndexingParams)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.MyCategoryListTokenizer.incrementToken()",4,1,n/a,15,3,0,7,5
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.testNoRetainableAttributes()",15,0,n/a,28,2,0,12,3
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.testRetainableAttributes()",19,0,n/a,39,3,0,18,4
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.testStreamDefaultParams()",9,0,n/a,24,1,0,10,2
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.testStreamNonTopLevelParams()",11,0,n/a,4,2,0,13,2
"org.apache.lucene.facet.index.streaming.CategoryTokenizer.CategoryTokenizer(TokenStream,FacetIndexingParams)",1,4,n/a,8,0,2,1,1
"org.apache.lucene.facet.index.streaming.CategoryTokenizer.incrementToken()",8,3,n/a,14,2,0,9,4
"org.apache.lucene.facet.index.streaming.CategoryTokenizer.setPayload()",0,1,n/a,5,0,0,0,1
"org.apache.lucene.facet.index.streaming.CategoryTokenizerBase.CategoryTokenizerBase(TokenStream,FacetIndexingParams)",4,0,n/a,17,0,2,5,1
"org.apache.lucene.facet.index.streaming.CategoryTokenizerBase.incrementToken()",n/a,216,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.index.streaming.CategoryTokenizerTest.testLongCategoryPath()",22,0,n/a,29,1,0,13,2
"org.apache.lucene.facet.index.streaming.CategoryTokenizerTest.testTokensDefaultParams()",19,0,n/a,34,2,0,19,4
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.CountingListTokenizer(TokenStream,FacetIndexingParams)",2,1,n/a,5,0,2,2,1
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.getPayloadStream(CategoryPath,int)",6,1,n/a,12,1,2,8,2
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.handleStartOfInput()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.incrementToken()",23,0,n/a,38,3,0,25,7
"org.apache.lucene.facet.index.streaming.CountingListTokenizer.legalCategory()",0,1,n/a,11,0,0,1,1
"org.apache.lucene.facet.search.AdaptiveAccumulatorTest.getSamplingAccumulator(Sampler,TaxonomyReader,IndexReader,FacetSearchParams)",2,0,n/a,9,0,4,3,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.AdaptiveFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader)",1,1,n/a,8,0,3,1,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.AdaptiveFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator)",1,0,n/a,10,0,5,1,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.accumulate(ScoredDocIDs)",3,1,n/a,8,1,1,4,2
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.appropriateFacetCountingAccumulator(ScoredDocIDs)",5,1,n/a,18,1,1,7,4
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.getSampler()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator.setSampler(Sampler)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.facet.search.BaseTestTopK.getCategories(int)",8,2,n/a,13,1,1,5,2
"org.apache.lucene.facet.search.BaseTestTopK.getContent(int)",2,1,n/a,8,1,1,4,2
"org.apache.lucene.facet.search.BaseTestTopK.getIndexWriterConfig(Analyzer)",3,2,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.BaseTestTopK.nextInt(int)",2,2,n/a,9,1,1,5,2
"org.apache.lucene.facet.search.BaseTestTopK.numDocsToIndex()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.BaseTestTopK.populateIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams)",1,2,n/a,6,0,3,2,1
"org.apache.lucene.facet.search.BaseTestTopK.searchParamsWithRequests(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.BaseTestTopK.searchParamsWithRequests(int,int)",13,3,n/a,8,0,2,6,1
"org.apache.lucene.facet.search.CategoryListIterator.init()",n/a,6,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.CategoryListIterator.nextCategory()",n/a,7,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.CategoryListIterator.skipTo(int)",n/a,10,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.CategoryListIteratorTest.DataTokenStream.DataTokenStream(String,IntEncoder)",2,2,n/a,4,0,2,2,1
"org.apache.lucene.facet.search.CategoryListIteratorTest.DataTokenStream.incrementToken()",7,216,n/a,16,1,0,11,3
"org.apache.lucene.facet.search.CategoryListIteratorTest.DataTokenStream.setIdx(int)",0,2,n/a,4,0,1,2,1
"org.apache.lucene.facet.search.CategoryListIteratorTest.testPayloadIntDecodingIterator()",31,0,n/a,35,2,0,31,5
"org.apache.lucene.facet.search.CategoryListIteratorTest.testPayloadIteratorWithInvalidDoc()",38,0,n/a,4,3,0,39,7
"org.apache.lucene.facet.search.DrillDown.query(FacetIndexingParams,CategoryPath...)",7,3,n/a,18,1,2,8,5
"org.apache.lucene.facet.search.DrillDown.query(FacetIndexingParams,Query,CategoryPath...)",4,1,n/a,10,0,3,4,1
"org.apache.lucene.facet.search.DrillDown.query(FacetSearchParams,CategoryPath...)",2,4,n/a,8,0,2,1,1
"org.apache.lucene.facet.search.DrillDown.query(FacetSearchParams,Query,CategoryPath...)",2,6,n/a,7,0,3,1,1
"org.apache.lucene.facet.search.DrillDown.query(Query,CategoryPath...)",2,3,n/a,7,0,2,1,1
"org.apache.lucene.facet.search.DrillDown.term(FacetIndexingParams,CategoryPath)",6,11,n/a,9,0,2,4,1
"org.apache.lucene.facet.search.DrillDown.term(FacetSearchParams,CategoryPath)",2,7,n/a,6,0,2,1,1
"org.apache.lucene.facet.search.DrillDownTest.DrillDownTest()",10,0,n/a,8,0,0,6,1
"org.apache.lucene.facet.search.DrillDownTest.closeIndexes()",4,0,n/a,13,1,0,8,3
"org.apache.lucene.facet.search.DrillDownTest.createIndexes()",24,0,n/a,31,2,0,24,6
"org.apache.lucene.facet.search.DrillDownTest.testQuery()",21,0,n/a,24,0,0,15,1
"org.apache.lucene.facet.search.DrillDownTest.testQueryImplicitDefaultParams()",14,0,n/a,18,0,0,10,1
"org.apache.lucene.facet.search.DrillDownTest.testTermDefault()",9,0,n/a,8,0,0,5,1
"org.apache.lucene.facet.search.DrillDownTest.testTermNonDefault()",8,0,n/a,7,0,0,4,1
"org.apache.lucene.facet.search.FacetArrays.FacetArrays(IntArrayAllocator,FloatArrayAllocator)",0,1,n/a,10,0,2,2,1
"org.apache.lucene.facet.search.FacetArrays.free()",2,2,n/a,19,1,0,7,3
"org.apache.lucene.facet.search.FacetArrays.getArraysLength()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.FacetArrays.getFloatArray()",1,6,n/a,8,1,0,4,2
"org.apache.lucene.facet.search.FacetArrays.getIntArray()",1,7,n/a,10,1,0,4,2
"org.apache.lucene.facet.search.FacetResultsHandler.FacetResultsHandler(TaxonomyReader,FacetRequest)",0,0,n/a,10,0,2,2,1
"org.apache.lucene.facet.search.FacetResultsHandler.fetchPartitionResult(FacetArrays,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.search.FacetResultsHandler.getFacetRequest()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.FacetResultsHandler.getTaxonomyReader()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.FacetResultsHandler.isSelfPartition(int,FacetArrays,int)",1,0,n/a,14,0,3,2,1
"org.apache.lucene.facet.search.FacetResultsHandler.labelResult(FacetResult)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.FacetResultsHandler.mergeResults(IntermediateFacetResult...)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.FacetResultsHandler.rearrangeFacetResult(FacetResult)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.FacetResultsHandler.renderFacetResult(IntermediateFacetResult)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.FacetsAccumulator.FacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader)",0,0,n/a,7,0,3,3,1
"org.apache.lucene.facet.search.FacetsAccumulator.accumulate(ScoredDocIDs)",n/a,4,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.FacetsAccumulator.getComplementThreshold()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.facet.search.FacetsAccumulator.isAllowLabeling()",0,1,n/a,13,0,0,1,1
"org.apache.lucene.facet.search.FacetsAccumulator.mayComplement()",2,0,n/a,9,2,0,4,3
"org.apache.lucene.facet.search.FacetsAccumulator.setAllowLabeling(boolean)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.FacetsAccumulator.setComplementThreshold(double)",0,8,n/a,29,0,1,1,1
"org.apache.lucene.facet.search.FacetsCollector.FacetsCollector(FacetSearchParams,IndexReader,TaxonomyReader)",3,10,n/a,18,0,3,3,1
"org.apache.lucene.facet.search.FacetsCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.FacetsCollector.collect(int)",1,50,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.FacetsCollector.getFacetResults()",2,9,n/a,15,2,0,5,2
"org.apache.lucene.facet.search.FacetsCollector.initFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader)",1,1,n/a,17,0,3,1,1
"org.apache.lucene.facet.search.FacetsCollector.initScoredDocCollector(FacetSearchParams,IndexReader,TaxonomyReader)",5,1,n/a,18,2,3,4,3
"org.apache.lucene.facet.search.FacetsCollector.setNextReader(IndexReader,int)",1,19,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.FacetsCollector.setScorer(Scorer)",1,27,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.FloatArrayAllocator.FloatArrayAllocator(int,int)",1,2,n/a,20,0,2,2,1
"org.apache.lucene.facet.search.FloatArrayAllocator.clear(float[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.FloatArrayAllocator.create()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.Heap.add(T)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.Heap.clear()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.Heap.insertWithOverflow(T)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.Heap.pop()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.Heap.size()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.Heap.top()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.IntArrayAllocator.IntArrayAllocator(int,int)",1,2,n/a,20,0,2,2,1
"org.apache.lucene.facet.search.IntArrayAllocator.clear(int[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.IntArrayAllocator.create()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.PayloadIntDecodingIterator(IndexReader,Term,IntDecoder)",1,4,n/a,4,0,3,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.PayloadIntDecodingIterator(IndexReader,Term,IntDecoder,byte[])",4,1,n/a,9,0,4,6,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.equals(Object)",2,1,n/a,12,1,1,6,4
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.hashCode()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.init()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.nextCategory()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.PayloadIntDecodingIterator.skipTo(int)",5,1,n/a,9,1,1,5,2
"org.apache.lucene.facet.search.PayloadIterator.PayloadIterator(IndexReader,Term)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.PayloadIterator.PayloadIterator(IndexReader,Term,byte[])",1,1,n/a,5,0,3,2,1
"org.apache.lucene.facet.search.PayloadIterator.getBuffer()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.PayloadIterator.getPayloadLength()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.PayloadIterator.init()",1,5,n/a,9,0,0,2,1
"org.apache.lucene.facet.search.PayloadIterator.setdoc(int)",7,2,n/a,40,2,1,18,8
"org.apache.lucene.facet.search.SamplingWrapper.SamplingWrapper(FacetsAccumulator,Sampler)",1,0,n/a,5,0,2,3,1
"org.apache.lucene.facet.search.SamplingWrapper.accumulate(ScoredDocIDs)",16,0,n/a,31,2,1,18,3
"org.apache.lucene.facet.search.SamplingWrapper.getComplementThreshold()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.facet.search.SamplingWrapper.isAllowLabeling()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.SamplingWrapper.setAllowLabeling(boolean)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.SamplingWrapper.setComplementThreshold(double)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.SamplingWrapperTest.getSamplingAccumulator(Sampler,TaxonomyReader,IndexReader,FacetSearchParams)",2,0,n/a,8,0,4,2,1
"org.apache.lucene.facet.search.ScoredDocIDs.getDocIDs()",n/a,3,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIDs.iterator()",n/a,10,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIDs.size()",n/a,10,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIDsIterator.getDocID()",n/a,17,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIDsIterator.getScore()",n/a,6,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIDsIterator.next()",n/a,15,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.NonScoringDocIdCollector(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.acceptsDocsOutOfOrder()",0,15,n/a,2,0,0,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.collect(int)",1,50,n/a,5,0,1,2,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.getDefaultScore()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.scoredDocIdsIterator()",3,1,n/a,11,3,0,8,2
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.setDefaultScore(float)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector.setScorer(Scorer)",0,27,n/a,2,0,1,0,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoredDocIdCollector(int)",1,2,n/a,4,0,1,2,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.ScoringDocIdCollector(int)",1,1,n/a,5,0,1,2,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.acceptsDocsOutOfOrder()",0,15,n/a,2,0,0,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.collect(int)",4,50,n/a,12,1,1,8,2
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.getDefaultScore()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.scoredDocIdsIterator()",3,1,n/a,15,4,0,11,3
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.setDefaultScore(float)",0,2,n/a,2,0,1,0,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector.setScorer(Scorer)",0,27,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.create(int,boolean)",2,8,n/a,15,0,2,1,2
"org.apache.lucene.facet.search.ScoredDocIdCollector.getDefaultScore()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIdCollector.getScoredDocIDs()",2,10,n/a,3,2,0,4,1
"org.apache.lucene.facet.search.ScoredDocIdCollector.scoredDocIdsIterator()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIdCollector.setDefaultScore(float)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.ScoredDocIdCollector.setNextReader(IndexReader,int)",0,19,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.StandardFacetsAccumulator.StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader)",1,4,n/a,4,0,3,1,1
"org.apache.lucene.facet.search.StandardFacetsAccumulator.StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator)",8,3,n/a,20,0,5,8,5
"org.apache.lucene.facet.search.StandardFacetsAccumulator.accumulate(ScoredDocIDs)",32,1,n/a,90,5,1,45,14
"org.apache.lucene.facet.search.StandardFacetsAccumulator.actualDocsToAccumulate(ScoredDocIDs)",0,1,n/a,15,0,1,1,1
"org.apache.lucene.facet.search.StandardFacetsAccumulator.fillArraysForPartition(ScoredDocIDs,FacetArrays,int)",16,1,n/a,37,3,3,18,7
"org.apache.lucene.facet.search.StandardFacetsAccumulator.getCategoryListMap(FacetArrays,int)",7,1,n/a,31,2,2,8,4
"org.apache.lucene.facet.search.StandardFacetsAccumulator.getTotalCountsFactor()",0,1,n/a,9,0,0,1,1
"org.apache.lucene.facet.search.StandardFacetsAccumulator.initArraysByTotalCounts(FacetArrays,int,int)",3,1,n/a,18,2,3,10,3
"org.apache.lucene.facet.search.StandardFacetsAccumulator.shouldComplement(ScoredDocIDs)",4,1,n/a,6,0,1,1,2
"org.apache.lucene.facet.search.TemporaryObjectAllocator.TemporaryObjectAllocator(int)",0,0,n/a,21,0,1,1,1
"org.apache.lucene.facet.search.TemporaryObjectAllocator.allocate()",3,0,n/a,17,1,0,5,2
"org.apache.lucene.facet.search.TemporaryObjectAllocator.clear(T)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.TemporaryObjectAllocator.create()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.TemporaryObjectAllocator.free(T)",2,1,n/a,14,1,1,2,3
"org.apache.lucene.facet.search.TestCategoryListCache.TestCategoryListCache()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.TestCategoryListCache.doTest(boolean,boolean)",20,3,n/a,29,2,2,21,4
"org.apache.lucene.facet.search.TestCategoryListCache.messCachedData(CategoryListCache,CategoryListParams)",8,1,n/a,3,5,2,11,3
"org.apache.lucene.facet.search.TestCategoryListCache.setUp()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.facet.search.TestCategoryListCache.tearDown()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.facet.search.TestCategoryListCache.testCorrectClCache()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.TestCategoryListCache.testNoClCache()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.TestCategoryListCache.testWrongClCache()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.TestFacetArrays.testSimple()",11,0,n/a,18,0,0,11,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.doTestComplements()",21,3,n/a,18,1,0,13,2
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.findFacets(ScoredDocIDs,boolean)",6,2,n/a,19,2,2,9,4
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.getFacetedSearchParams()",4,6,n/a,6,0,0,3,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.setUp()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.tearDown()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.testComplements()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.testComplementsWithMultiReader()",2,0,n/a,13,1,0,5,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement.testComplementsWithParallerReader()",3,0,n/a,15,1,0,7,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.assertCorrectResults(FacetsCollector)",53,5,n/a,41,0,1,37,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.assertPostingListExists(String,String,IndexReader)",4,10,n/a,6,0,3,4,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.checkResult(FacetResultNode,String,double)",7,20,n/a,7,0,3,2,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.getDirs()",1,5,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.performSearch(FacetIndexingParams,TaxonomyReader,IndexReader,IndexSearcher)",19,5,n/a,24,0,4,12,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.seedIndex(RandomIndexWriter,TaxonomyWriter,FacetIndexingParams)",9,5,n/a,14,0,3,9,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testCustom()",25,0,n/a,32,0,0,20,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testDefault()",23,0,n/a,32,0,0,19,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testDifferentFieldsAndText()",30,0,n/a,34,0,0,22,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testSomeSameSomeDifferent()",33,0,n/a,36,0,0,22,1
"org.apache.lucene.facet.search.TestMultipleCategoryLists.testTwoCustomsSameField()",30,0,n/a,35,0,0,22,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.findFacets(ScoredDocIDs,FacetSearchParams)",3,2,n/a,15,2,2,7,3
"org.apache.lucene.facet.search.TestScoredDocIdCollector.getFacetedSearchParams()",4,6,n/a,6,0,0,3,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.setUp()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.sumScoreSearchParams()",4,1,n/a,7,0,0,3,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.tearDown()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.facet.search.TestScoredDocIdCollector.testConstantScore()",39,0,n/a,44,1,0,27,4
"org.apache.lucene.facet.search.TestScoredDocIdCollector.testOutOfOrderCollectionScoringDisabled()",15,0,n/a,19,1,0,14,3
"org.apache.lucene.facet.search.TestScoredDocIdCollector.testOutOfOrderCollectionScoringEnabled()",3,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.TestTopKInEachNodeResultHandler.prvt_add(DefaultFacetIndexingParams,RandomIndexWriter,TaxonomyWriter,String...)",10,16,n/a,11,0,4,7,1
"org.apache.lucene.facet.search.TestTopKInEachNodeResultHandler.testSimple()",260,0,n/a,4,3,0,183,15
"org.apache.lucene.facet.search.TestTopKResultsHandler.getCategories(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.TestTopKResultsHandler.getContent(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.facet.search.TestTopKResultsHandler.numDocsToIndex()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.TestTopKResultsHandler.testGetMaxIntFacets()",38,0,n/a,6,3,0,33,3
"org.apache.lucene.facet.search.TestTopKResultsHandler.testSimple()",80,0,n/a,6,3,0,55,3
"org.apache.lucene.facet.search.TestTopKResultsHandler.testSimpleSearchForNonexistentFacet()",15,0,n/a,20,2,0,14,3
"org.apache.lucene.facet.search.TestTopKResultsHandlerRandom.countFacets(int,int,boolean)",7,4,n/a,9,2,3,10,2
"org.apache.lucene.facet.search.TestTopKResultsHandlerRandom.numDocsToIndex()",0,0,n/a,4,0,0,1,2
"org.apache.lucene.facet.search.TestTopKResultsHandlerRandom.testTopCountsOrder()",40,0,n/a,72,5,0,43,10
"org.apache.lucene.facet.search.TestTotalFacetCounts.doTestWriteRead(int)",33,5,n/a,4,2,1,38,2
"org.apache.lucene.facet.search.TestTotalFacetCounts.initCache(int)",4,1,n/a,4,0,1,2,1
"org.apache.lucene.facet.search.TestTotalFacetCounts.testWriteRead()",5,0,n/a,8,0,0,5,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.TFCThread.TFCThread(IndexReader,DirectoryTaxonomyReader,FacetIndexingParams)",0,2,n/a,5,0,3,3,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.TFCThread.run()",2,0,n/a,8,1,0,3,2
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.addFacets(FacetIndexingParams,IndexWriter,TaxonomyWriter,String...)",8,6,n/a,8,0,4,4,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.assertReadFromDisc(TotalFacetCounts,int,String)",2,2,n/a,6,0,3,4,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.assertRecomputed(TotalFacetCounts,int,String)",2,13,n/a,6,0,3,4,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.doTestGeneralSynchronization(int,int,int)",38,2,n/a,8,3,3,57,7
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.initCache()",2,6,n/a,5,0,0,2,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.setUp()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testGeneralSynchronization()",6,0,n/a,9,1,0,5,3
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testGeneralSynchronizationBig()",1,0,n/a,18,3,0,7,4
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testGenerationalConsistency()",50,0,n/a,82,0,0,50,1
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testGrowingTaxonomy()",22,0,n/a,4,2,0,24,2
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testMemoryCacheSynchronization()",27,0,n/a,44,1,0,27,2
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.testMultipleIndices()",35,0,n/a,68,1,0,33,2
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResult.TopKFacetResult(FacetRequest,MutableFacetResultNode,int)",1,2,n/a,9,0,3,1,1
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResult.getHeap()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResult.setHeap(Heap<FacetResultNode>)",0,2,n/a,7,0,1,1,1
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResultsHandler(TaxonomyReader,FacetRequest)",1,2,n/a,9,0,2,1,1
"org.apache.lucene.facet.search.TopKFacetResultsHandler.fetchPartitionResult(FacetArrays,int)",10,1,n/a,22,2,2,13,3
"org.apache.lucene.facet.search.TopKFacetResultsHandler.heapDescendants(int,Heap<FacetResultNode>,MutableFacetResultNode,FacetArrays,int)",13,1,n/a,83,4,5,39,11
"org.apache.lucene.facet.search.TopKFacetResultsHandler.labelResult(FacetResult)",5,0,n/a,17,4,1,9,5
"org.apache.lucene.facet.search.TopKFacetResultsHandler.mergeResults(IntermediateFacetResult...)",15,0,n/a,31,3,1,21,5
"org.apache.lucene.facet.search.TopKFacetResultsHandler.rearrangeFacetResult(FacetResult)",11,0,n/a,17,1,1,14,3
"org.apache.lucene.facet.search.TopKFacetResultsHandler.renderFacetResult(IntermediateFacetResult)",5,0,n/a,12,2,1,9,3
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AACO.AACO(int[],double[],double)",0,2,n/a,5,0,3,3,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ACComparator.ACComparator()",0,4,n/a,1,0,0,0,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ACComparator.leftGoesNow(int,double,int,double)",n/a,3,4,n/a,n/a,4,n/a,n/a
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AggregatedCategory.AggregatedCategory(int,double)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AggregatedCategoryHeap.AggregatedCategoryHeap(int,ACComparator)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AggregatedCategoryHeap.lessThan(AggregatedCategory,AggregatedCategory)",1,6,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscOrdACComparator.AscOrdACComparator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscOrdACComparator.leftGoesNow(int,double,int,double)",0,3,n/a,4,0,4,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscValueACComparator.AscValueACComparator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscValueACComparator.leftGoesNow(int,double,int,double)",0,3,n/a,4,0,4,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescOrdACComparator.DescOrdACComparator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescOrdACComparator.leftGoesNow(int,double,int,double)",0,3,n/a,4,0,4,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescValueACComparator.DescValueACComparator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescValueACComparator.leftGoesNow(int,double,int,double)",0,3,n/a,4,0,4,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.IntermediateFacetResultWithHash.IntermediateFacetResultWithHash(FacetRequest,IntToObjectMap<AACO>)",0,2,n/a,8,0,2,5,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.IntermediateFacetResultWithHash.getFacetRequest()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ResultNodeHeap.ResultNodeHeap(int,ACComparator)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ResultNodeHeap.lessThan(FacetResultNode,FacetResultNode)",5,6,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.TopKInEachNodeHandler(TaxonomyReader,FacetRequest)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.countOnly(int,int[],int[],FacetArrays,int,int,int,int,int)",2,2,n/a,51,2,9,13,6
"org.apache.lucene.facet.search.TopKInEachNodeHandler.fetchPartitionResult(FacetArrays,int)",28,0,n/a,260,5,2,96,19
"org.apache.lucene.facet.search.TopKInEachNodeHandler.generateNode(int,double,IntToObjectMap<AACO>)",7,2,n/a,14,1,3,12,3
"org.apache.lucene.facet.search.TopKInEachNodeHandler.getSuitableACComparator()",7,3,n/a,23,2,0,12,6
"org.apache.lucene.facet.search.TopKInEachNodeHandler.labelResult(FacetResult)",3,0,n/a,13,1,1,4,2
"org.apache.lucene.facet.search.TopKInEachNodeHandler.mergeResults(IntermediateFacetResult...)",12,0,n/a,101,5,1,60,16
"org.apache.lucene.facet.search.TopKInEachNodeHandler.rearrangeChilrenOfNode(FacetResultNode,PriorityQueue<FacetResultNode>)",11,2,n/a,16,1,2,10,4
"org.apache.lucene.facet.search.TopKInEachNodeHandler.rearrangeFacetResult(FacetResult)",5,0,n/a,13,0,1,4,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.recursivelyLabel(FacetResultNode,int)",4,2,n/a,18,2,2,10,5
"org.apache.lucene.facet.search.TopKInEachNodeHandler.renderFacetResult(IntermediateFacetResult)",4,0,n/a,14,1,1,9,4
"org.apache.lucene.facet.search.TotalFacetCounts.TotalFacetCounts(TaxonomyReader,FacetIndexingParams,int[][],CreationType)",1,2,n/a,12,0,4,5,1
"org.apache.lucene.facet.search.TotalFacetCounts.clIteraor(CategoryListCache,CategoryListParams,IndexReader,int)",3,1,n/a,10,2,4,5,3
"org.apache.lucene.facet.search.TotalFacetCounts.compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache)",14,0,n/a,11,3,4,13,2
"org.apache.lucene.facet.search.TotalFacetCounts.fillTotalCountsForPartition(int[],int)",2,0,n/a,15,1,2,7,2
"org.apache.lucene.facet.search.TotalFacetCounts.getTotalCount(int)",2,0,n/a,9,0,1,3,1
"org.apache.lucene.facet.search.TotalFacetCounts.loadFromFile(File,TaxonomyReader,FacetIndexingParams)",8,0,n/a,21,4,3,16,4
"org.apache.lucene.facet.search.TotalFacetCounts.storeToFile(File,TotalFacetCounts)",8,0,n/a,18,4,2,10,4
"org.apache.lucene.facet.search.TotalFacetCountsCache.TFCKey.TFCKey(IndexReader,TaxonomyReader,FacetIndexingParams)",4,2,n/a,9,0,3,6,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.TFCKey.equals(Object)",9,0,n/a,15,2,1,9,7
"org.apache.lucene.facet.search.TotalFacetCountsCache.TFCKey.hashCode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.TotalFacetCountsCache()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.clear()",2,0,n/a,7,0,0,2,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.computeAndCache(TFCKey,CategoryListCache)",5,1,n/a,15,1,2,7,2
"org.apache.lucene.facet.search.TotalFacetCountsCache.getCacheSize()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.getSingleton()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.getTotalCounts(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache)",4,2,n/a,22,1,4,6,2
"org.apache.lucene.facet.search.TotalFacetCountsCache.load(File,IndexReader,TaxonomyReader,FacetIndexingParams)",9,2,n/a,23,1,4,7,4
"org.apache.lucene.facet.search.TotalFacetCountsCache.markRecentlyUsed(TFCKey)",2,4,n/a,27,0,1,2,1
"org.apache.lucene.facet.search.TotalFacetCountsCache.setCacheSize(int)",1,0,n/a,16,1,1,6,3
"org.apache.lucene.facet.search.TotalFacetCountsCache.store(File,IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache)",10,1,n/a,26,1,5,5,7
"org.apache.lucene.facet.search.TotalFacetCountsCache.trimCache()",5,4,n/a,13,2,0,5,3
"org.apache.lucene.facet.search.aggregator.Aggregator.aggregate(int)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.aggregator.Aggregator.setNextDoc(int,float)",n/a,2,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.search.aggregator.ComplementCountingAggregator.ComplementCountingAggregator(int[])",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.aggregator.ComplementCountingAggregator.aggregate(int)",0,0,n/a,5,0,1,2,1
"org.apache.lucene.facet.search.aggregator.CountingAggregator.CountingAggregator(int[])",0,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.aggregator.CountingAggregator.aggregate(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.aggregator.CountingAggregator.equals(Object)",2,0,n/a,8,1,1,4,3
"org.apache.lucene.facet.search.aggregator.CountingAggregator.hashCode()",1,0,n/a,5,0,0,2,2
"org.apache.lucene.facet.search.aggregator.CountingAggregator.setNextDoc(int,float)",0,0,n/a,4,0,2,0,1
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.ScoringAggregator(float[])",1,1,n/a,4,0,1,2,2
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.aggregate(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.equals(Object)",2,0,n/a,8,1,1,4,3
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.hashCode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.aggregator.ScoringAggregator.setNextDoc(int,float)",0,0,n/a,3,0,2,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.AssociationFloatSumAggregator(IndexReader,float[])",2,1,n/a,3,0,2,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.AssociationFloatSumAggregator(String,IndexReader,float[])",1,1,n/a,5,0,3,3,1
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.aggregate(int)",2,2,n/a,6,1,1,3,2
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.equals(Object)",3,0,n/a,8,1,1,4,4
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator.setNextDoc(int,float)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.AssociationIntSumAggregator(IndexReader,int[])",2,1,n/a,3,0,2,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.AssociationIntSumAggregator(String,IndexReader,int[])",1,1,n/a,5,0,3,3,1
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.aggregate(int)",1,2,n/a,6,1,1,3,2
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.equals(Object)",3,0,n/a,8,1,1,4,4
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator.setNextDoc(int,float)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.afterClassAssociationsFacetRequestTest()",3,0,n/a,9,0,0,6,1
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.beforeClassAssociationsFacetRequestTest()",25,0,n/a,28,2,0,20,3
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.testDifferentAggregatorsSameCategoryList()",18,0,n/a,25,1,0,15,2
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.testFloatSumAssociation()",24,0,n/a,19,0,0,15,1
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest.testIntSumAssociation()",24,0,n/a,19,0,0,15,1
"org.apache.lucene.facet.search.cache.CategoryListCache.get(CategoryListParams)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.facet.search.cache.CategoryListCache.loadAndRegister(CategoryListParams,IndexReader,TaxonomyReader,FacetIndexingParams)",2,2,n/a,8,0,4,2,1
"org.apache.lucene.facet.search.cache.CategoryListCache.register(CategoryListParams,CategoryListData)",1,2,n/a,6,0,2,1,1
"org.apache.lucene.facet.search.cache.CategoryListData.CategoryListData()",0,1,n/a,5,0,0,0,1
"org.apache.lucene.facet.search.cache.CategoryListData.CategoryListData(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListParams)",13,0,n/a,33,5,4,26,8
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator.RAMCategoryListIterator(int,int[][][])",0,1,n/a,4,0,2,2,1
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator.init()",0,6,n/a,3,0,0,1,2
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator.nextCategory()",0,7,n/a,6,1,0,3,2
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator.skipTo(int)",0,10,n/a,8,1,1,5,4
"org.apache.lucene.facet.search.cache.CategoryListData.iterator(int)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.facet.search.params.CountFacetRequest.CountFacetRequest(CategoryPath,int)",1,35,n/a,12,0,2,1,1
"org.apache.lucene.facet.search.params.CountFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",3,0,n/a,11,1,4,4,2
"org.apache.lucene.facet.search.params.CountFacetRequest.getValueOf(FacetArrays,int)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.params.CountFacetRequest.requireDocumentScore()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.CountFacetRequest.supportsComplements()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.FacetRequest(CategoryPath,int)",3,3,n/a,30,1,2,11,3
"org.apache.lucene.facet.search.params.FacetRequest.clone()",1,2,n/a,5,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",n/a,2,3,n/a,n/a,4,n/a,n/a
"org.apache.lucene.facet.search.params.FacetRequest.createCategoryListIterator(IndexReader,TaxonomyReader,FacetSearchParams,int)",6,1,n/a,18,2,4,7,3
"org.apache.lucene.facet.search.params.FacetRequest.createFacetResultsHandler(TaxonomyReader)",5,5,n/a,22,2,1,5,3
"org.apache.lucene.facet.search.params.FacetRequest.equals(Object)",1,0,n/a,13,1,1,4,7
"org.apache.lucene.facet.search.params.FacetRequest.getCategoryPath()",0,14,n/a,10,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getDepth()",0,8,n/a,10,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getNumLabel()",0,4,n/a,28,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getNumResults()",0,9,n/a,20,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getResultMode()",0,7,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getSortBy()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getSortOrder()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.getValueOf(FacetArrays,int)",n/a,1,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.search.params.FacetRequest.hashCode()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.requireDocumentScore()",n/a,2,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.params.FacetRequest.setDepth(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setNumLabel(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setResultMode(ResultMode)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setSortBy(SortBy)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.setSortOrder(SortOrder)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.params.FacetRequest.supportsComplements()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequest.toString()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testClone()",6,0,n/a,7,0,0,4,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testGetFacetResultHandlerDifferentTaxonomy()",19,0,n/a,18,0,0,14,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testHashAndEquals()",12,0,n/a,9,0,0,6,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testIllegalCategoryPath()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testIllegalNumResults()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.FacetRequestTest.testImmutability()",14,0,n/a,15,0,0,9,1
"org.apache.lucene.facet.search.params.FacetSearchParams.FacetSearchParams()",2,7,n/a,11,0,0,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.FacetSearchParams(FacetIndexingParams)",1,10,n/a,13,0,1,2,1
"org.apache.lucene.facet.search.params.FacetSearchParams.addFacetRequest(FacetRequest)",2,48,n/a,13,1,1,3,2
"org.apache.lucene.facet.search.params.FacetSearchParams.getClCache()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.getFacetIndexingParams()",0,9,n/a,7,0,0,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.getFacetRequests()",0,4,n/a,7,0,0,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.setClCache(CategoryListCache)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.facet.search.params.FacetSearchParams.toString()",12,0,n/a,12,1,0,8,2
"org.apache.lucene.facet.search.params.FacetSearchParamsTest.testAddFacetRequest()",7,0,n/a,6,0,0,3,1
"org.apache.lucene.facet.search.params.FacetSearchParamsTest.testDefaultSettings()",19,0,n/a,13,0,0,10,1
"org.apache.lucene.facet.search.params.FacetSearchParamsTest.testPartitionSizeWithCategories()",14,0,n/a,14,0,0,11,1
"org.apache.lucene.facet.search.params.FacetSearchParamsTest.testSearchParamsWithNullRequest()",3,0,n/a,9,1,0,4,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimCountFacetRequest.PerDimCountFacetRequest(CategoryPath,int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimCountFacetRequest.createCategoryListIterator(IndexReader,TaxonomyReader,FacetSearchParams,int)",3,0,n/a,7,0,4,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimCountFacetRequest.createFacetResultsHandler(TaxonomyReader)",6,0,n/a,10,3,1,6,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.PerDimensionCLI(TaxonomyReader,CategoryListIterator,CategoryPath)",4,1,n/a,11,1,3,6,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.init()",1,6,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.isInDimension(int)",0,1,n/a,10,2,1,5,3
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.nextCategory()",2,7,n/a,7,1,0,3,3
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI.skipTo(int)",1,10,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.doTestCLParamMultiIteratorsByRequest(boolean)",17,2,n/a,37,1,1,22,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.populateIndex(FacetIndexingParams,Directory,Directory)",14,1,n/a,15,1,3,8,2
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.testCLParamMultiIteratorsByRequest()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.testCLParamMultiIteratorsByRequestCacheCLI()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String,int,int)",1,2,n/a,7,0,8,1,1
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.validateFacetedSearch(FacetIndexingParams,TaxonomyReader,IndexReader,CategoryListCache,ScoredDocIDs,String[],int[],int[])",17,2,n/a,25,1,8,15,3
"org.apache.lucene.facet.search.params.ScoreFacetRequest.ScoreFacetRequest(CategoryPath,int)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.params.ScoreFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",2,0,n/a,7,0,4,2,1
"org.apache.lucene.facet.search.params.ScoreFacetRequest.getValueOf(FacetArrays,int)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.params.ScoreFacetRequest.requireDocumentScore()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.ScoreFacetRequest.supportsComplements()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.AssociationFloatSumFacetRequest(CategoryPath,int)",1,5,n/a,7,0,2,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",2,2,n/a,7,0,4,2,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.getValueOf(FacetArrays,int)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.requireDocumentScore()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest.supportsComplements()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.AssociationIntSumFacetRequest(CategoryPath,int)",1,5,n/a,7,0,2,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",2,2,n/a,7,0,4,2,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.getValueOf(FacetArrays,int)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.requireDocumentScore()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest.supportsComplements()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.results.FacetResult.FacetResult(FacetRequest,FacetResultNode,int)",0,3,n/a,5,0,3,3,1
"org.apache.lucene.facet.search.results.FacetResult.getFacetRequest()",0,15,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.results.FacetResult.getFacetResultNode()",0,44,n/a,8,0,0,1,1
"org.apache.lucene.facet.search.results.FacetResult.getNumValidDescendants()",0,18,n/a,12,0,0,1,1
"org.apache.lucene.facet.search.results.FacetResult.toString()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.results.FacetResult.toString(String)",14,1,n/a,25,1,1,10,3
"org.apache.lucene.facet.search.results.FacetResultNode.getLabel()",n/a,14,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.results.FacetResultNode.getLabel(TaxonomyReader)",n/a,6,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.results.FacetResultNode.getNumSubResults()",n/a,20,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.results.FacetResultNode.getOrdinal()",n/a,14,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.results.FacetResultNode.getResidue()",n/a,22,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.results.FacetResultNode.getSubResults()",n/a,27,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.results.FacetResultNode.getValue()",n/a,63,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.results.FacetResultNode.setValue(double)",n/a,3,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.results.FacetResultNode.toString(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.search.results.IntermediateFacetResult.getFacetRequest()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.search.results.MutableFacetResultNode.MutableFacetResultNode(FacetResultNode,boolean)",7,1,n/a,10,0,2,1,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.MutableFacetResultNode(int,double)",1,4,n/a,11,0,2,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.MutableFacetResultNode(int,double,double,CategoryPath,List<FacetResultNode>)",0,2,n/a,23,0,5,5,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.appendSubResult(FacetResultNode)",2,0,n/a,10,1,1,3,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getLabel()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getLabel(TaxonomyReader)",1,0,n/a,14,1,1,3,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getNumSubResults()",1,0,n/a,8,0,0,1,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getOrdinal()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getResidue()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getSubResults()",0,1,n/a,3,0,0,1,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.getValue()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.increaseResidue(double)",0,3,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.increaseValue(double)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.insertSubResult(FacetResultNode)",2,1,n/a,10,1,1,3,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.numSubResults()",1,1,n/a,9,1,0,3,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.reset(int,double)",1,1,n/a,20,1,2,6,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.resultsToList(Iterable<? extends FacetResultNode>)",2,1,n/a,11,1,1,6,3
"org.apache.lucene.facet.search.results.MutableFacetResultNode.setLabel(CategoryPath)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.setResidue(double)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.setSubResults(List<FacetResultNode>)",0,3,n/a,7,0,1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.setValue(double)",0,0,n/a,10,0,1,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.toImpl(FacetResultNode)",1,2,n/a,15,1,1,3,2
"org.apache.lucene.facet.search.results.MutableFacetResultNode.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.results.MutableFacetResultNode.toString(String)",26,1,n/a,26,2,1,10,3
"org.apache.lucene.facet.search.results.MutableFacetResultNode.trimSubResults(int)",11,2,n/a,29,1,1,14,6
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.assertSampling(List<FacetResult>,Query,Sampler,FacetSearchParams,boolean)",4,2,n/a,6,0,5,4,1
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.createSampler(int,ScoredDocIDs,boolean)",13,1,n/a,14,0,3,10,2
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.getSamplingAccumulator(Sampler,TaxonomyReader,IndexReader,FacetSearchParams)",n/a,1,0,n/a,n/a,4,n/a,n/a
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.samplingCollector(boolean,Sampler,FacetSearchParams)",3,1,n/a,8,2,3,5,2
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK.testCountUsingSamping()",17,0,n/a,39,5,0,22,5
"org.apache.lucene.facet.search.sampling.RandomSampler.RandomSampler()",2,1,n/a,4,0,0,2,1
"org.apache.lucene.facet.search.sampling.RandomSampler.RandomSampler(SamplingParams,Random)",1,0,n/a,4,0,2,2,1
"org.apache.lucene.facet.search.sampling.RandomSampler.createSample(ScoredDocIDs,int,int)",8,0,n/a,26,2,3,19,5
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.IntPriorityQueue(int)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.MI.MI()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.getHeap()",1,1,n/a,9,0,0,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.insertWithReuse(int)",2,1,n/a,10,1,1,4,2
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.lessThan(Object,Object)",0,6,n/a,9,0,2,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.RepeatableSampler(SamplingParams)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.createSample(ScoredDocIDs,int,int)",12,0,n/a,20,2,3,10,4
"org.apache.lucene.facet.search.sampling.RepeatableSampler.findGoodStepSize(int,int)",2,1,n/a,28,1,2,6,3
"org.apache.lucene.facet.search.sampling.RepeatableSampler.findNextPrimeAfter(int)",1,2,n/a,28,3,1,20,9
"org.apache.lucene.facet.search.sampling.RepeatableSampler.repeatableSample(ScoredDocIDs,int,int)",1,1,n/a,16,0,3,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.repeatableSample(ScoredDocIDs,int,int,Algorithm,Sorted)",10,1,n/a,45,2,5,20,9
"org.apache.lucene.facet.search.sampling.RepeatableSampler.sample1(ScoredDocIDs,int,int[],long[])",9,1,n/a,52,3,4,25,8
"org.apache.lucene.facet.search.sampling.RepeatableSampler.sample2(ScoredDocIDs,int,int[],long[])",9,1,n/a,48,1,4,16,6
"org.apache.lucene.facet.search.sampling.SampleFixer.fixResult(ScoredDocIDs,FacetResult)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest.OverSampledFacetRequest(FacetRequest,int)",2,1,n/a,4,0,2,2,1
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest.createAggregator(boolean,FacetArrays,IndexReader,TaxonomyReader)",1,2,n/a,7,0,4,1,1
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest.getValueOf(FacetArrays,int)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest.requireDocumentScore()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.facet.search.sampling.Sampler.SampleResult.SampleResult(ScoredDocIDs,double)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.facet.search.sampling.Sampler.Sampler()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.sampling.Sampler.Sampler(SamplingParams)",2,1,n/a,11,1,1,3,2
"org.apache.lucene.facet.search.sampling.Sampler.createSample(ScoredDocIDs,int,int)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.lucene.facet.search.sampling.Sampler.getSampleFixer(IndexReader,TaxonomyReader,FacetSearchParams)",1,1,n/a,10,0,3,1,1
"org.apache.lucene.facet.search.sampling.Sampler.getSampleSet(ScoredDocIDs)",9,1,n/a,23,1,1,7,2
"org.apache.lucene.facet.search.sampling.Sampler.getSamplingParams()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.facet.search.sampling.Sampler.overSampledSearchParams(FacetSearchParams)",9,3,n/a,16,2,1,8,3
"org.apache.lucene.facet.search.sampling.Sampler.shouldSample(ScoredDocIDs)",2,2,n/a,6,0,1,1,1
"org.apache.lucene.facet.search.sampling.Sampler.trimResult(FacetResult)",10,1,n/a,28,1,1,11,3
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.SamplingAccumulator(Sampler,FacetSearchParams,IndexReader,TaxonomyReader)",1,1,n/a,10,0,4,2,1
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.SamplingAccumulator(Sampler,FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator)",1,0,n/a,13,0,6,2,1
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.accumulate(ScoredDocIDs)",15,0,n/a,32,2,1,17,3
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.actualDocsToAccumulate(ScoredDocIDs)",1,0,n/a,6,0,1,3,1
"org.apache.lucene.facet.search.sampling.SamplingAccumulator.getTotalCountsFactor()",1,1,n/a,7,1,0,3,2
"org.apache.lucene.facet.search.sampling.SamplingAccumulatorTest.getSamplingAccumulator(Sampler,TaxonomyReader,IndexReader,FacetSearchParams)",1,0,n/a,7,0,4,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getMaxSampleSize()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getMinSampleSize()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getOversampleFactor()",0,2,n/a,11,0,0,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getSampleRatio()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.getSamplingThreshold()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setMaxSampleSize(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setMinSampleSize(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setOversampleFactor(double)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setSampingThreshold(int)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.setSampleRatio(double)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams.validate()",0,0,n/a,16,0,0,1,4
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.TakmiSampleFixer(IndexReader,TaxonomyReader,FacetSearchParams)",0,0,n/a,6,0,3,3,1
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.advance(ScoredDocIDsIterator,int)",2,2,n/a,18,2,2,4,3
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.countIntersection(TermDocs,ScoredDocIDsIterator)",12,1,n/a,44,3,2,24,10
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.fixResult(ScoredDocIDs,FacetResult)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.fixResultNode(FacetResultNode,ScoredDocIDs)",3,2,n/a,16,1,2,3,2
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer.recount(FacetResultNode,ScoredDocIDs)",6,1,n/a,25,0,2,4,1
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath()",1,31,n/a,8,0,0,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(CategoryPath)",2,5,n/a,27,1,1,9,2
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(CategoryPath,int)",2,16,n/a,30,1,2,11,4
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(CharSequence...)",10,33,n/a,42,4,1,28,8
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(String,char)",5,14,n/a,31,1,2,14,3
"org.apache.lucene.facet.taxonomy.CategoryPath.CategoryPath(int,int)",0,30,n/a,13,0,2,3,1
"org.apache.lucene.facet.taxonomy.CategoryPath.add(CharSequence)",4,109,n/a,31,1,1,16,5
"org.apache.lucene.facet.taxonomy.CategoryPath.add(CharSequence,char)",5,12,n/a,45,3,2,24,8
"org.apache.lucene.facet.taxonomy.CategoryPath.appendTo(Appendable,char)",3,6,n/a,27,2,2,14,5
"org.apache.lucene.facet.taxonomy.CategoryPath.appendTo(Appendable,char,int)",3,3,n/a,25,2,3,16,7
"org.apache.lucene.facet.taxonomy.CategoryPath.appendTo(Appendable,char,int,int)",3,2,n/a,32,2,4,18,9
"org.apache.lucene.facet.taxonomy.CategoryPath.capacityChars()",0,22,n/a,10,0,0,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.capacityComponents()",0,17,n/a,9,0,0,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.charsNeededForFullPath()",0,8,n/a,14,1,0,3,2
"org.apache.lucene.facet.taxonomy.CategoryPath.clear()",0,58,n/a,9,0,0,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.clone()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.compareTo(CategoryPath)",6,6,n/a,32,4,1,18,9
"org.apache.lucene.facet.taxonomy.CategoryPath.copyToCharArray(char[],int,int,char)",1,7,n/a,46,2,4,17,6
"org.apache.lucene.facet.taxonomy.CategoryPath.deserializeFromStreamReader(InputStreamReader)",3,2,n/a,28,1,1,12,7
"org.apache.lucene.facet.taxonomy.CategoryPath.equals(Object)",0,10,n/a,35,3,1,19,8
"org.apache.lucene.facet.taxonomy.CategoryPath.equalsToSerialized(CharSequence,int)",3,11,n/a,26,2,2,17,7
"org.apache.lucene.facet.taxonomy.CategoryPath.equalsToSerialized(int,CharSequence,int)",3,16,n/a,29,2,3,19,9
"org.apache.lucene.facet.taxonomy.CategoryPath.getComponent(int)",2,32,n/a,13,1,1,5,4
"org.apache.lucene.facet.taxonomy.CategoryPath.hashCode()",0,28,n/a,32,1,0,13,4
"org.apache.lucene.facet.taxonomy.CategoryPath.hashCode(int)",0,18,n/a,21,1,1,15,6
"org.apache.lucene.facet.taxonomy.CategoryPath.hashCodeOfSerialized(CharSequence,int)",4,5,n/a,24,1,2,14,4
"org.apache.lucene.facet.taxonomy.CategoryPath.isDescendantOf(CategoryPath)",0,9,n/a,21,3,1,13,6
"org.apache.lucene.facet.taxonomy.CategoryPath.lastComponent()",2,2,n/a,14,1,0,5,3
"org.apache.lucene.facet.taxonomy.CategoryPath.length()",0,58,n/a,7,0,0,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.longHashCode()",0,19,n/a,30,1,0,13,4
"org.apache.lucene.facet.taxonomy.CategoryPath.longHashCode(int)",0,18,n/a,21,1,1,15,6
"org.apache.lucene.facet.taxonomy.CategoryPath.readObject(ObjectInputStream)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.facet.taxonomy.CategoryPath.serializeAppendTo(Appendable)",3,14,n/a,23,1,1,12,4
"org.apache.lucene.facet.taxonomy.CategoryPath.serializeAppendTo(int,Appendable)",3,3,n/a,23,1,2,14,6
"org.apache.lucene.facet.taxonomy.CategoryPath.serializeToStreamWriter(OutputStreamWriter)",3,2,n/a,23,1,1,8,3
"org.apache.lucene.facet.taxonomy.CategoryPath.setFromSerialized(CharSequence,int)",5,4,n/a,27,1,2,17,6
"org.apache.lucene.facet.taxonomy.CategoryPath.toString()",1,11,n/a,12,0,0,1,1
"org.apache.lucene.facet.taxonomy.CategoryPath.toString(char)",3,34,n/a,25,1,1,6,3
"org.apache.lucene.facet.taxonomy.CategoryPath.toString(char,int)",3,9,n/a,24,1,2,8,5
"org.apache.lucene.facet.taxonomy.CategoryPath.toString(char,int,int)",3,14,n/a,32,1,3,11,7
"org.apache.lucene.facet.taxonomy.CategoryPath.trim(int)",1,7,n/a,14,1,1,4,3
"org.apache.lucene.facet.taxonomy.CategoryPath.writeObject(ObjectOutputStream)",3,0,n/a,6,0,1,3,1
"org.apache.lucene.facet.taxonomy.InconsistentTaxonomyException.InconsistentTaxonomyException()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.InconsistentTaxonomyException.InconsistentTaxonomyException(String)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.TaxonomyReader.ChildrenArrays.getOlderSiblingArray()",n/a,11,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.ChildrenArrays.getYoungestChildArray()",n/a,16,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.decRef()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getChildrenArrays()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getCommitUserData()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getOrdinal(CategoryPath)",n/a,5,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getParent(int)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getParentArray()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getPath(int)",n/a,18,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getPath(int,CategoryPath)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getRefCount()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.getSize()",n/a,20,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.incRef()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.refresh()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyWriter.addCategory(CategoryPath)",n/a,9,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyWriter.getParent(int)",n/a,4,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyWriter.getSize()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS.CS(String)",3,23,n/a,4,0,1,2,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS.charAt(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS.length()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS.subSequence(int,int)",0,0,n/a,3,0,2,1,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testAddEmpty()",14,0,n/a,17,0,0,10,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testAppendTo()",14,0,n/a,16,0,0,10,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testArrayConstructor()",16,0,n/a,12,0,0,9,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testBasic()",6,0,n/a,9,1,0,7,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCharSequenceCtor()",56,0,n/a,30,0,0,20,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCharSerialization()",110,0,n/a,91,1,0,71,7
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCharsLimit()",4,0,n/a,17,1,0,8,3
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCharsNeededForFullPath()",7,0,n/a,15,2,0,12,3
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testClear()",11,0,n/a,11,0,0,8,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCompareTo()",19,0,n/a,16,0,0,13,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testComponentsLimit()",7,0,n/a,15,1,0,8,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testConstructorCapacity()",21,0,n/a,15,0,0,12,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCopyConstructor()",15,0,n/a,20,1,0,13,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testCopyToCharArray()",22,0,n/a,22,0,0,19,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testDefaultConstructor()",9,0,n/a,12,0,0,5,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testDelimiterAdd()",35,0,n/a,31,0,0,23,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testDelimiterConstructor()",34,0,n/a,25,0,0,19,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testEquals()",38,0,n/a,42,0,0,30,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testGetComponent()",16,0,n/a,16,2,0,14,3
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testHashCode()",41,0,n/a,44,0,0,29,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testHashCodePrefix()",65,0,n/a,45,0,0,39,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testIsDescendantOf()",33,0,n/a,19,0,0,10,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testLastComponent()",7,0,n/a,11,1,0,8,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testLongHashCode()",41,0,n/a,44,0,0,29,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testLongHashCodePrefix()",65,0,n/a,52,0,0,39,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testPrefixCopyConstructor()",43,0,n/a,34,1,0,30,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testStreamWriterSerialization()",19,0,n/a,27,1,0,14,3
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testToString()",28,0,n/a,32,1,0,23,2
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testToStringPrefix()",18,0,n/a,14,0,0,11,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testToStringSubpath()",32,0,n/a,21,0,0,18,1
"org.apache.lucene.facet.taxonomy.TestCategoryPath.testTrim()",32,0,n/a,27,0,0,24,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.assertConsistentYoungestChild(CategoryPath,int,int,int,int)",32,1,n/a,8,4,5,35,5
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.checkPaths(TaxonomyWriter)",7,4,n/a,18,3,1,13,4
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.checkWriterParent(TaxonomyReader,TaxonomyWriter)",20,2,n/a,41,2,2,20,7
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.fillTaxonomy(TaxonomyWriter)",4,17,n/a,17,2,1,7,3
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.fillTaxonomyCheckPaths(TaxonomyWriter)",7,1,n/a,28,3,1,14,5
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.showcat(CategoryPath)",2,6,n/a,9,1,1,5,3
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.showcat(String[])",5,5,n/a,17,1,1,13,6
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.stackTraceStr(Throwable)",5,1,n/a,12,1,1,7,2
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testChildrenArrays()",27,0,n/a,60,4,0,40,9
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testChildrenArraysGrowth()",49,0,n/a,37,0,0,29,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testChildrenArraysInvariants()",31,0,n/a,77,3,0,53,14
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testReaderBasic()",37,0,n/a,46,2,0,31,6
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testReaderParent()",27,0,n/a,57,2,0,27,7
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testReaderParentArray()",13,0,n/a,19,1,0,13,2
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testRootOnly()",18,0,n/a,20,0,0,11,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testRootOnly2()",17,0,n/a,19,0,0,11,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testSeparateReaderAndWriter()",45,0,n/a,77,1,0,40,6
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testSeparateReaderAndWriter2()",32,0,n/a,28,0,0,22,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testTaxonomyReaderRefreshRaces()",20,0,n/a,29,1,0,23,3
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriter()",7,0,n/a,17,0,0,6,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterCheckPaths()",7,0,n/a,16,0,0,6,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterCheckPaths2()",13,0,n/a,23,0,0,13,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterLock()",23,0,n/a,37,1,0,18,2
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterParent1()",10,0,n/a,26,0,0,10,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterParent2()",9,0,n/a,12,0,0,9,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterSimpler()",49,0,n/a,43,0,0,22,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterTwice()",8,0,n/a,19,0,0,7,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterTwice2()",10,0,n/a,22,0,0,9,1
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined.testWriterTwice3()",13,0,n/a,33,0,0,11,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ChildrenArraysImpl.ChildrenArraysImpl(int[],int[])",0,1,n/a,4,0,2,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ChildrenArraysImpl.getOlderSiblingArray()",0,11,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ChildrenArraysImpl.getYoungestChildArray()",0,16,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.DirectoryTaxonomyReader(Directory)",5,61,n/a,19,0,1,5,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.close()",1,15,n/a,10,3,0,5,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.decRef()",5,4,n/a,22,3,0,11,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.doClose()",3,1,n/a,9,0,0,6,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ensureOpen()",2,16,n/a,8,1,0,2,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getChildrenArrays()",11,0,n/a,53,2,0,29,7
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getCommitUserData()",3,0,n/a,4,0,0,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getInternalIndexReader()",1,0,n/a,11,0,0,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getLabel(int)",11,2,n/a,45,2,1,16,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getOrdinal(CategoryPath)",15,2,n/a,37,2,1,18,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getParent(int)",2,0,n/a,8,0,1,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getParentArray()",2,3,n/a,29,0,0,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getPath(int)",3,21,n/a,16,1,1,5,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getPath(int,CategoryPath)",4,0,n/a,10,1,2,7,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getRefCount()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.getSize()",6,23,n/a,9,1,0,5,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.incRef()",2,4,n/a,11,0,0,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.openIndexReader(Directory)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.refresh()",26,10,n/a,76,2,0,25,7
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.setCacheSize(int)",3,0,n/a,18,1,1,5,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.setDelimiter(char)",1,0,n/a,14,0,1,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.toString(int)",14,0,n/a,24,3,1,18,6
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DirectoryTaxonomyWriter(Directory)",1,63,n/a,5,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DirectoryTaxonomyWriter(Directory,OpenMode)",2,12,n/a,8,0,2,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DirectoryTaxonomyWriter(Directory,OpenMode,TaxonomyWriterCache)",18,1,n/a,76,2,3,24,6
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.DiskOrdinalMap(File)",3,1,n/a,5,0,1,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.addDone()",1,2,n/a,6,1,0,3,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.addMapping(int,int)",2,3,n/a,4,0,2,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.getMap()",10,2,n/a,23,1,0,15,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap.setSize(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap.addDone()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap.addMapping(int,int)",0,3,n/a,3,0,2,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap.getMap()",0,4,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap.setSize(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.OrdinalMap.addDone()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.OrdinalMap.addMapping(int,int)",n/a,3,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.OrdinalMap.getMap()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.OrdinalMap.setSize(int)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.SinglePositionTokenStream.SinglePositionTokenStream(String)",4,1,n/a,6,0,1,4,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.SinglePositionTokenStream.incrementToken()",0,216,n/a,8,1,0,4,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.SinglePositionTokenStream.set(int)",1,1,n/a,16,0,1,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addCategory(CategoryPath)",4,21,n/a,21,1,1,5,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addCategoryDocument(CategoryPath,int,int)",10,1,n/a,31,0,3,10,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addTaxonomies(Directory[],OrdinalMap[])",41,3,n/a,136,5,2,73,19
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addToCache(CategoryPath,int)",2,1,n/a,17,1,2,3,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.addToCache(CategoryPath,int,int)",2,2,n/a,7,1,3,3,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.close()",3,22,n/a,11,1,0,3,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.closeResources()",2,1,n/a,17,1,0,6,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.combinedCommitData(Map<String, String>)",3,5,n/a,13,1,1,6,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.commit()",4,34,n/a,11,0,0,3,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.commit(Map<String, String>)",4,2,n/a,10,0,1,3,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.createIndexWriterConfig(OpenMode)",5,3,n/a,21,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.defaultTaxonomyWriterCache()",1,4,n/a,11,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.doClose()",2,2,n/a,5,0,0,3,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.ensureOpen()",1,12,n/a,9,1,0,2,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.findCategory(CategoryPath)",11,1,n/a,47,1,1,15,6
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.findCategory(CategoryPath,int)",11,1,n/a,29,1,2,15,6
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.getCacheMemoryUsage()",2,0,n/a,11,1,0,4,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.getParent(int)",5,4,n/a,10,1,1,4,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.getParentArray()",3,2,n/a,10,2,0,6,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.getSize()",2,1,n/a,15,0,0,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.internalAddCategory(CategoryPath,int)",3,3,n/a,29,2,2,10,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.nextTE(TermEnum)",4,6,n/a,13,2,1,6,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.openIndexWriter(Directory,IndexWriterConfig)",1,3,n/a,24,0,2,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.openReader()",1,6,n/a,8,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.perhapsFillCache()",20,2,n/a,53,2,0,28,8
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.prepareCommit()",3,6,n/a,8,0,0,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.prepareCommit(Map<String, String>)",3,2,n/a,8,0,1,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.readCommitData(Directory)",3,1,n/a,6,0,1,3,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.refreshReader()",2,5,n/a,9,2,0,5,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.rollback()",3,4,n/a,11,0,0,3,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.setCacheMissesUntilFill(int)",1,0,n/a,25,0,1,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.setDelimiter(char)",1,0,n/a,16,0,1,2,1
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.unlock(Directory)",1,2,n/a,15,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.ParentArray.add(int,int)",1,0,n/a,19,1,2,5,2
"org.apache.lucene.facet.taxonomy.directory.ParentArray.getArray()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.ParentArray.refresh(IndexReader)",14,0,n/a,85,5,1,30,11
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies.dotest(int,int,int,boolean)",73,9,n/a,114,3,4,103,21
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies.test1()",78,0,n/a,58,0,0,51,1
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies.testbig()",8,0,n/a,12,0,0,8,1
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies.testmedium()",6,0,n/a,10,1,0,5,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.doTestReadRecreatedTaxono(Random,boolean)",23,2,n/a,42,4,2,36,6
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testAlreadyClosed()",10,0,n/a,16,1,0,10,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testCloseAfterIncRef()",11,0,n/a,14,0,0,10,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testCloseTwice()",9,0,n/a,11,0,0,8,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testFreshReadRecreatedTaxonomy()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testReaderRefreshResult()",16,0,n/a,24,1,0,15,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testRefreshAndRefCount()",20,0,n/a,18,0,0,15,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader.testRefreshReadRecreatedTaxonomy()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.NoOpCache()",0,7,n/a,1,0,0,0,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.close()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.get(CategoryPath)",0,4,n/a,1,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.get(CategoryPath,int)",1,2,n/a,1,0,2,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.hasRoom(int)",0,1,n/a,1,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.put(CategoryPath,int)",0,4,n/a,1,0,2,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache.put(CategoryPath,int,int)",0,1,n/a,1,0,3,1,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testCommit()",14,0,n/a,15,0,0,10,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testCommitUserData()",37,0,n/a,33,2,0,24,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testEnsureOpen()",7,0,n/a,14,1,0,7,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testRecreateAndRefresh()",24,0,n/a,30,1,0,18,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testRollback()",9,0,n/a,15,1,0,8,2
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testUndefinedCreateTime()",11,0,n/a,15,0,0,8,1
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.touchTaxo(DirectoryTaxonomyWriter,CategoryPath)",4,4,n/a,6,2,2,3,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexReader.InstrumentedIndexReader(IndexReader)",2,3,n/a,6,0,1,3,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexReader.doClose()",4,1,n/a,13,1,0,4,2
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexReader.doOpenIfChanged()",2,3,n/a,9,1,0,4,2
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexWriter.InstrumentedIndexWriter(Directory,IndexWriterConfig)",2,1,n/a,6,0,2,3,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexWriter.close()",4,112,n/a,9,1,0,4,2
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyReader.InstrumentedTaxonomyReader(Directory)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyReader.openIndexReader(Directory)",2,1,n/a,4,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter.InstrumentedTaxonomyWriter(Directory)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter.createIndexWriterConfig(OpenMode)",5,3,n/a,5,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter.openIndexWriter(Directory,IndexWriterConfig)",1,3,n/a,4,0,2,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter.openReader()",2,6,n/a,4,0,0,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.LeakChecker()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.nopen()",2,6,n/a,12,1,0,8,3
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.openReader(Directory)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.openWriter(Directory)",1,5,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.testLeaks()",44,0,n/a,39,1,0,38,3
"org.apache.lucene.facet.taxonomy.writercache.TaxonomyWriterCache.close()",n/a,1,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.TaxonomyWriterCache.get(CategoryPath)",n/a,3,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.TaxonomyWriterCache.get(CategoryPath,int)",n/a,2,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.TaxonomyWriterCache.hasRoom(int)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.TaxonomyWriterCache.put(CategoryPath,int)",n/a,4,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.TaxonomyWriterCache.put(CategoryPath,int,int)",n/a,1,3,n/a,n/a,3,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.Block.Block(int)",0,1,n/a,4,0,1,2,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.CharBlockArray()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.CharBlockArray(int)",2,1,n/a,5,0,1,3,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.addBlock()",2,4,n/a,4,0,0,2,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(CharSequence)",2,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(CharSequence,int,int)",2,0,n/a,7,1,3,6,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(String)",4,2,n/a,20,2,1,15,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(char)",1,0,n/a,8,1,1,5,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.append(char[],int,int)",2,0,n/a,20,2,3,15,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.blockIndex(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.charAt(int)",3,1,n/a,4,0,1,2,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.flush(OutputStream)",4,1,n/a,12,2,1,7,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.indexInBlock(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.length()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.open(InputStream)",3,1,n/a,12,2,1,7,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.subSequence(int,int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.toString()",6,0,n/a,8,1,0,6,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.Cl2oTaxonomyWriterCache(int,float,int)",1,1,n/a,3,0,3,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.close()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.get(CategoryPath)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.get(CategoryPath,int)",3,2,n/a,6,1,2,3,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.getMemoryUsage()",1,1,n/a,8,0,0,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.hasRoom(int)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.put(CategoryPath,int)",1,4,n/a,6,0,2,2,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache.put(CategoryPath,int,int)",1,1,n/a,6,0,3,2,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.CollisionMap(CharBlockArray)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.CollisionMap(int,CharBlockArray)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.CollisionMap(int,float,CharBlockArray)",1,2,n/a,7,0,3,5,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.Entry.Entry(int,int,int,Entry)",0,1,n/a,6,0,4,4,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator.EntryIterator(Entry[],int)",0,1,n/a,13,2,2,8,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator.hasNext()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator.next()",1,0,n/a,13,1,0,11,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.addEntry(int,int,int,int)",2,3,n/a,7,1,4,4,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.addLabel(CategoryPath,int,int)",5,0,n/a,17,2,3,11,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.addLabel(CategoryPath,int,int,int)",5,0,n/a,17,2,4,11,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.addLabelOffset(int,int,int)",2,0,n/a,9,0,3,2,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.capacity()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.entryIterator()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.get(CategoryPath,int)",2,0,n/a,11,1,2,7,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.get(CategoryPath,int,int)",2,0,n/a,11,1,3,7,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.getMemoryUsage()",0,0,n/a,18,4,0,10,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.grow()",1,1,n/a,22,3,0,19,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.indexFor(int,int)",0,6,n/a,6,0,2,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.size()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.CompactLabelToOrdinal()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.CompactLabelToOrdinal(int,float,int)",4,2,n/a,11,0,3,7,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.HashArray.HashArray(int)",0,2,n/a,5,0,1,3,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabel(CategoryPath,int)",7,1,n/a,17,2,2,11,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabel(CategoryPath,int,int)",7,0,n/a,17,2,3,11,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabel(HashArray,CategoryPath,int,int)",3,1,n/a,17,2,4,9,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabel(HashArray,CategoryPath,int,int,int)",3,1,n/a,17,2,5,9,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabelOffset(int,int,int)",4,3,n/a,12,2,3,8,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.addLabelOffsetToHashArray(HashArray,int,int,int)",1,1,n/a,11,1,4,7,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.determineCapacity(int,int)",0,2,n/a,7,1,2,4,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.flush(File)",7,1,n/a,14,1,1,8,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getMemoryUsage()",2,0,n/a,27,2,0,12,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getOrdinal(CategoryPath)",3,2,n/a,14,2,1,10,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getOrdinal(CategoryPath,int)",3,0,n/a,14,2,2,10,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getOrdinal(HashArray,CategoryPath,int)",2,1,n/a,14,1,3,9,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.getOrdinal(HashArray,CategoryPath,int,int)",2,1,n/a,14,1,4,9,4
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.grow()",12,3,n/a,43,4,0,39,10
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.indexFor(int,int)",0,6,n/a,6,0,2,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.init()",4,2,n/a,11,1,0,9,3
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.open(File,float,int)",17,1,n/a,81,4,3,38,7
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.sizeOfMap()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.stringHashCode(CategoryPath)",1,2,n/a,6,0,1,4,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.stringHashCode(CategoryPath,int)",1,2,n/a,6,0,2,4,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.stringHashCode(CharBlockArray,int)",1,2,n/a,6,0,2,4,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal.addLabel(CategoryPath,int)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal.addLabel(CategoryPath,int,int)",n/a,0,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal.getMaxOrdinal()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal.getNextOrdinal()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal.getOrdinal(CategoryPath)",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal.getOrdinal(CategoryPath,int)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCharBlockArray.assertEqualsInternal(String,StringBuilder,CharBlockArray)",7,2,n/a,6,1,3,5,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCharBlockArray.testArray()",32,0,n/a,40,2,0,42,5
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.LabelToOrdinalMap()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.addLabel(CategoryPath,int)",2,1,n/a,4,0,2,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.addLabel(CategoryPath,int,int)",2,0,n/a,4,0,3,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.getOrdinal(CategoryPath)",2,2,n/a,5,0,1,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap.getOrdinal(CategoryPath,int)",3,0,n/a,5,0,2,2,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.testL2O()",25,0,n/a,47,3,0,41,9
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.LruTaxonomyWriterCache(int)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.LruTaxonomyWriterCache(int,LRUType)",2,1,n/a,13,1,2,3,2
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.close()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.get(CategoryPath)",2,3,n/a,7,1,1,4,2
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.get(CategoryPath,int)",5,2,n/a,15,1,2,6,4
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.hasRoom(int)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.put(CategoryPath,int)",3,4,n/a,14,1,2,4,2
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.put(CategoryPath,int,int)",3,1,n/a,14,1,3,4,2
"org.apache.lucene.facet.taxonomy.writercache.lru.NameHashIntCacheLRU.NameHashIntCacheLRU(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameHashIntCacheLRU.key(CategoryPath)",2,0,n/a,4,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameHashIntCacheLRU.key(CategoryPath,int)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.NameIntCacheLRU(int)",1,0,n/a,4,0,1,2,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.clear()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.createCache(int)",2,1,n/a,7,1,1,3,2
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.get(CategoryPath)",2,0,n/a,9,1,1,5,2
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.getMaxSize()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.getSize()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.isCacheFull()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.key(CategoryPath)",1,2,n/a,12,0,1,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.key(CategoryPath,int)",1,1,n/a,7,0,2,1,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.makeRoomLRU()",7,0,n/a,25,1,0,12,5
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.put(CategoryPath,Integer)",3,0,n/a,8,0,2,2,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.put(CategoryPath,int,Integer)",3,0,n/a,4,0,3,2,1
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU.stats()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.util.MultiCategoryListIterator.MultiCategoryListIterator(CategoryListIterator...)",2,0,n/a,6,0,1,3,1
"org.apache.lucene.facet.util.MultiCategoryListIterator.init()",3,6,n/a,9,2,0,4,3
"org.apache.lucene.facet.util.MultiCategoryListIterator.nextCategory()",4,7,n/a,14,2,0,6,3
"org.apache.lucene.facet.util.MultiCategoryListIterator.skipTo(int)",4,10,n/a,12,2,1,5,3
"org.apache.lucene.facet.util.PartitionsUtils.partitionName(CategoryListParams,int)",2,6,n/a,10,1,2,4,2
"org.apache.lucene.facet.util.PartitionsUtils.partitionNameByOrdinal(FacetIndexingParams,CategoryListParams,int)",2,3,n/a,9,0,3,2,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionNumber(FacetIndexingParams,int)",1,6,n/a,9,0,2,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionNumber(FacetSearchParams,int)",2,0,n/a,6,0,2,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionOffset(FacetIndexingParams,int,TaxonomyReader)",1,2,n/a,9,0,3,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionOffset(FacetSearchParams,int,TaxonomyReader)",2,0,n/a,8,0,3,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionSize(FacetIndexingParams,TaxonomyReader)",3,5,n/a,7,0,2,1,1
"org.apache.lucene.facet.util.PartitionsUtils.partitionSize(FacetSearchParams,TaxonomyReader)",2,4,n/a,6,0,2,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.AllValueHeap(boolean)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.add(FacetResultNode)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.clear()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.insertWithOverflow(FacetResultNode)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.pop()",8,4,n/a,11,4,0,10,4
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.size()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap.top()",2,0,n/a,6,1,0,3,2
"org.apache.lucene.facet.util.ResultSortUtils.MaxOrdinalHeap.MaxOrdinalHeap(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MaxOrdinalHeap.lessThan(FacetResultNode,FacetResultNode)",2,6,n/a,4,0,2,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MaxValueHeap.MaxValueHeap(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MaxValueHeap.lessThan(FacetResultNode,FacetResultNode)",5,6,n/a,10,1,2,6,2
"org.apache.lucene.facet.util.ResultSortUtils.MinOrdinalHeap.MinOrdinalHeap(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MinOrdinalHeap.lessThan(FacetResultNode,FacetResultNode)",2,6,n/a,4,0,2,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MinValueHeap.MinValueHeap(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.ResultSortUtils.MinValueHeap.lessThan(FacetResultNode,FacetResultNode)",5,6,n/a,10,1,2,6,2
"org.apache.lucene.facet.util.ResultSortUtils.createSuitableHeap(FacetRequest)",10,1,n/a,28,2,1,16,7
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs.AllDocsScoredDocIDs(IndexReader)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs.getDocIDs()",2,4,n/a,4,5,0,8,4
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs.iterator()",6,10,n/a,3,4,0,9,3
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs.size()",0,10,n/a,3,0,0,1,1
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs.AllLiveDocsScoredDocIDs(IndexReader)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs.getDocIDs()",4,4,n/a,7,5,0,10,5
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs.iterator()",6,10,n/a,3,4,0,9,3
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs.size()",1,10,n/a,3,0,0,1,1
"org.apache.lucene.facet.util.ScoredDocIdsUtils.clearDeleted(IndexReader,OpenBitSet)",5,1,n/a,17,2,2,7,4
"org.apache.lucene.facet.util.ScoredDocIdsUtils.createAllDocsScoredDocIDs(IndexReader)",3,2,n/a,11,1,1,3,2
"org.apache.lucene.facet.util.ScoredDocIdsUtils.createScoredDocIDsSubset(ScoredDocIDs,int[])",9,2,n/a,1,7,2,26,8
"org.apache.lucene.facet.util.ScoredDocIdsUtils.createScoredDocIds(DocIdSet,int)",10,1,n/a,13,5,2,16,4
"org.apache.lucene.facet.util.ScoredDocIdsUtils.getComplementSet(ScoredDocIDs,IndexReader)",8,1,n/a,26,1,2,9,2
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory.DocumentFactory(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory.getDoc(int)",8,1,n/a,13,1,1,7,3
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory.haveAlpha(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory.markedDeleted(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.createReaderWithNDocs(Random,int,Directory)",2,2,n/a,6,0,3,1,1
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.createReaderWithNDocs(Random,int,DocumentFactory,Directory)",11,2,n/a,15,1,4,10,2
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.testAllDocs()",28,0,n/a,28,2,0,21,2
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.testComplementIterator()",15,0,n/a,20,1,0,15,2
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.testWithDeletions()",41,0,n/a,5,2,0,32,7
"org.apache.lucene.index.AbstractAllTermDocs.AbstractAllTermDocs(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.index.AbstractAllTermDocs.close()",0,52,n/a,2,0,0,0,1
"org.apache.lucene.index.AbstractAllTermDocs.doc()",0,116,n/a,3,0,0,1,1
"org.apache.lucene.index.AbstractAllTermDocs.freq()",0,54,n/a,3,0,0,1,1
"org.apache.lucene.index.AbstractAllTermDocs.isDeleted(int)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.AbstractAllTermDocs.next()",1,96,n/a,3,0,0,1,1
"org.apache.lucene.index.AbstractAllTermDocs.read(int[],int[])",1,10,n/a,13,2,2,9,4
"org.apache.lucene.index.AbstractAllTermDocs.seek(Term)",1,22,n/a,7,1,1,3,2
"org.apache.lucene.index.AbstractAllTermDocs.seek(TermEnum)",1,19,n/a,3,0,1,1,1
"org.apache.lucene.index.AbstractAllTermDocs.skipTo(int)",1,41,n/a,10,2,1,6,3
"org.apache.lucene.index.AllTermDocs.AllTermDocs(SegmentReader)",2,1,n/a,6,1,1,3,1
"org.apache.lucene.index.AllTermDocs.isDeleted(int)",1,2,n/a,4,0,1,1,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.BalancedSegmentMergePolicy()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.MergePolicyParams()",0,0,n/a,9,0,0,7,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getMaxMergeDocs()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getMaxSmallSegments()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getMergeFactor()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getNumLargeSegments()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.getPartialExpunge()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.isUseCompoundFile()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setMaxMergeDocs(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setMaxSmallSegments(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setMergeFactor(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setNumLargeSegments(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setPartialExpunge(boolean)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams.setUseCompoundFile(boolean)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.createVarianceTable(SegmentInfos,int,int)",2,1,n/a,25,3,3,23,5
"org.apache.lucene.index.BalancedSegmentMergePolicy.findBalancedMerges(SegmentInfos,int,int,boolean)",12,3,n/a,58,4,4,50,13
"org.apache.lucene.index.BalancedSegmentMergePolicy.findForcedDeletesMerges(SegmentInfos)",13,3,n/a,22,2,1,16,6
"org.apache.lucene.index.BalancedSegmentMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",12,3,n/a,32,4,3,17,9
"org.apache.lucene.index.BalancedSegmentMergePolicy.findMerges(SegmentInfos)",27,5,n/a,60,3,1,47,13
"org.apache.lucene.index.BalancedSegmentMergePolicy.findOneSegmentToExpunge(SegmentInfos,int)",5,1,n/a,16,2,2,13,4
"org.apache.lucene.index.BalancedSegmentMergePolicy.getMaxSmallSegments()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.getNumLargeSegments()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.getPartialExpunge()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.setMaxSmallSegments(int)",2,1,n/a,7,1,1,4,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.setMergeFactor(int)",3,10,n/a,8,1,1,4,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.setMergePolicyParams(MergePolicyParams)",7,0,n/a,11,1,1,8,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.setNumLargeSegments(int)",2,1,n/a,7,1,1,4,2
"org.apache.lucene.index.BalancedSegmentMergePolicy.setPartialExpunge(boolean)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.index.BalancedSegmentMergePolicy.size(SegmentInfo)",2,13,n/a,6,0,1,3,3
"org.apache.lucene.index.BufferedDeletes.addDocID(int)",3,1,n/a,4,0,1,2,1
"org.apache.lucene.index.BufferedDeletes.addQuery(Query,int)",2,2,n/a,7,1,2,3,2
"org.apache.lucene.index.BufferedDeletes.addTerm(Term,int)",6,4,n/a,18,1,2,7,4
"org.apache.lucene.index.BufferedDeletes.any()",3,3,n/a,3,0,0,1,3
"org.apache.lucene.index.BufferedDeletes.clear()",5,2,n/a,7,0,0,5,1
"org.apache.lucene.index.BufferedDeletes.clearDocIDs()",3,0,n/a,4,0,0,2,1
"org.apache.lucene.index.BufferedDeletes.toString()",9,0,n/a,23,2,0,12,6
"org.apache.lucene.index.BufferedDeletesStream.ApplyDeletesResult.ApplyDeletesResult(boolean,long,List<SegmentInfo>)",0,3,n/a,5,0,3,3,1
"org.apache.lucene.index.BufferedDeletesStream.BufferedDeletesStream(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.BufferedDeletesStream.QueryAndLimit.QueryAndLimit(Query,int)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.index.BufferedDeletesStream.any()",1,5,n/a,3,0,0,1,1
"org.apache.lucene.index.BufferedDeletesStream.applyDeletes(ReaderPool,List<SegmentInfo>)",51,2,n/a,111,5,2,74,25
"org.apache.lucene.index.BufferedDeletesStream.applyQueryDeletes(Iterable<QueryAndLimit>,SegmentReader)",5,3,n/a,27,4,2,15,6
"org.apache.lucene.index.BufferedDeletesStream.applyTermDeletes(Iterable<Term>,SegmentReader)",7,2,n/a,24,2,2,11,3
"org.apache.lucene.index.BufferedDeletesStream.bytesUsed()",1,7,n/a,3,0,0,1,1
"org.apache.lucene.index.BufferedDeletesStream.checkDeleteStats()",3,7,n/a,12,1,0,8,2
"org.apache.lucene.index.BufferedDeletesStream.checkDeleteTerm(Term)",4,2,n/a,9,1,1,4,4
"org.apache.lucene.index.BufferedDeletesStream.clear()",3,1,n/a,6,0,0,4,1
"org.apache.lucene.index.BufferedDeletesStream.getNextGen()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.BufferedDeletesStream.message(String)",4,8,n/a,5,1,1,2,2
"org.apache.lucene.index.BufferedDeletesStream.numTerms()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.BufferedDeletesStream.prune(SegmentInfos)",12,2,n/a,26,2,1,17,5
"org.apache.lucene.index.BufferedDeletesStream.prune(int)",9,2,n/a,15,2,1,12,4
"org.apache.lucene.index.BufferedDeletesStream.push(FrozenBufferedDeletes)",8,1,n/a,14,1,1,9,2
"org.apache.lucene.index.BufferedDeletesStream.setInfoStream(PrintStream)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.index.ByteBlockPool.Allocator.getByteBlock()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.ByteBlockPool.Allocator.recycleByteBlocks(List<byte[]>)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.ByteBlockPool.Allocator.recycleByteBlocks(byte[][],int,int)",n/a,1,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.index.ByteBlockPool.ByteBlockPool(Allocator)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.ByteBlockPool.allocSlice(byte[],int)",1,3,n/a,24,0,2,17,2
"org.apache.lucene.index.ByteBlockPool.newSlice(int)",1,2,n/a,8,0,1,6,2
"org.apache.lucene.index.ByteBlockPool.nextBuffer()",3,4,n/a,12,1,0,8,2
"org.apache.lucene.index.ByteBlockPool.reset()",3,1,n/a,18,1,0,12,4
"org.apache.lucene.index.ByteSliceReader.close()",1,20,n/a,2,0,0,1,1
"org.apache.lucene.index.ByteSliceReader.eof()",0,2,n/a,4,0,0,2,1
"org.apache.lucene.index.ByteSliceReader.getFilePointer()",1,16,n/a,2,0,0,1,1
"org.apache.lucene.index.ByteSliceReader.init(ByteBlockPool,int,int)",0,1,n/a,18,1,3,14,2
"org.apache.lucene.index.ByteSliceReader.length()",1,21,n/a,2,0,0,1,1
"org.apache.lucene.index.ByteSliceReader.nextSlice()",0,3,n/a,19,1,0,11,2
"org.apache.lucene.index.ByteSliceReader.readByte()",2,58,n/a,8,0,0,5,2
"org.apache.lucene.index.ByteSliceReader.readBytes(byte[],int,int)",3,29,n/a,18,2,3,10,3
"org.apache.lucene.index.ByteSliceReader.seek(long)",1,33,n/a,2,0,1,1,1
"org.apache.lucene.index.ByteSliceReader.writeTo(IndexOutput)",3,2,n/a,16,2,1,11,3
"org.apache.lucene.index.ByteSliceWriter.ByteSliceWriter(ByteBlockPool)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.ByteSliceWriter.getAddress()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.ByteSliceWriter.init(int)",0,0,n/a,10,0,1,5,1
"org.apache.lucene.index.ByteSliceWriter.writeByte(byte)",1,2,n/a,12,1,1,8,2
"org.apache.lucene.index.ByteSliceWriter.writeBytes(byte[],int,int)",1,0,n/a,13,2,3,8,3
"org.apache.lucene.index.ByteSliceWriter.writeVInt(int)",2,0,n/a,7,1,1,4,2
"org.apache.lucene.index.CharBlockPool.CharBlockPool(DocumentsWriter)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.CharBlockPool.nextBuffer()",3,1,n/a,12,1,0,8,2
"org.apache.lucene.index.CharBlockPool.reset()",1,1,n/a,6,0,0,4,1
"org.apache.lucene.index.CheckIndex.CheckIndex(Directory)",0,1,n/a,5,0,1,2,1
"org.apache.lucene.index.CheckIndex.MySegmentTermDocs.MySegmentTermDocs(SegmentReader)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.CheckIndex.MySegmentTermDocs.seek(Term)",1,24,n/a,5,0,1,2,1
"org.apache.lucene.index.CheckIndex.MySegmentTermDocs.skippingDoc()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.CheckIndex.assertsOn()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.index.CheckIndex.checkIndex()",1,2,n/a,12,0,0,1,1
"org.apache.lucene.index.CheckIndex.checkIndex(List<String>)",126,4,n/a,296,5,1,225,65
"org.apache.lucene.index.CheckIndex.fixIndex(Status)",3,2,n/a,19,0,1,4,2
"org.apache.lucene.index.CheckIndex.main(String[])",46,0,n/a,137,3,1,72,19
"org.apache.lucene.index.CheckIndex.msg(String)",1,35,n/a,4,0,1,2,2
"org.apache.lucene.index.CheckIndex.setInfoStream(PrintStream)",0,1,n/a,5,0,1,1,1
"org.apache.lucene.index.CheckIndex.testAsserts()",0,1,n/a,4,0,0,2,1
"org.apache.lucene.index.CheckIndex.testFieldNorms(FieldInfos,SegmentReader)",10,1,n/a,27,3,2,15,6
"org.apache.lucene.index.CheckIndex.testStoredFields(SegmentInfo,SegmentReader,NumberFormat)",14,1,n/a,32,3,3,19,7
"org.apache.lucene.index.CheckIndex.testTermIndex(SegmentInfo,FieldInfos,SegmentReader)",51,1,n/a,150,6,3,101,33
"org.apache.lucene.index.CheckIndex.testTermVectors(SegmentInfo,SegmentReader,NumberFormat)",10,1,n/a,29,4,3,18,7
"org.apache.lucene.index.CoalescedDeletes.TermMergeQueue.TermMergeQueue(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.CoalescedDeletes.TermMergeQueue.lessThan(SubIterator,SubIterator)",1,6,n/a,9,1,2,4,2
"org.apache.lucene.index.CoalescedDeletes.mergedIterator(List<Iterator<Term>>)",21,1,n/a,13,4,1,37,12
"org.apache.lucene.index.CoalescedDeletes.queriesIterable()",10,2,n/a,3,4,0,6,1
"org.apache.lucene.index.CoalescedDeletes.termsIterable()",6,2,n/a,7,3,0,5,2
"org.apache.lucene.index.CoalescedDeletes.toString()",2,0,n/a,5,0,0,1,1
"org.apache.lucene.index.CoalescedDeletes.update(FrozenBufferedDeletes)",3,2,n/a,7,1,1,6,2
"org.apache.lucene.index.CompoundFileExtractor.main(String[])",30,0,n/a,75,4,1,57,15
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.CSIndexInput(IndexInput,long,long)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.CSIndexInput(IndexInput,long,long,int)",2,2,n/a,6,0,4,4,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.clone()",2,21,n/a,8,0,0,5,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.close()",1,20,n/a,5,0,0,1,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.copyBytes(IndexOutput,long)",5,3,n/a,15,2,2,7,3
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.length()",0,21,n/a,4,0,0,1,1
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.readInternal(byte[],int,int)",4,6,n/a,14,0,3,5,2
"org.apache.lucene.index.CompoundFileReader.CSIndexInput.seekInternal(long)",0,2,n/a,6,0,1,0,1
"org.apache.lucene.index.CompoundFileReader.CompoundFileReader(Directory,String)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.index.CompoundFileReader.CompoundFileReader(Directory,String,int)",11,7,n/a,56,3,3,36,10
"org.apache.lucene.index.CompoundFileReader.close()",2,181,n/a,9,1,0,5,2
"org.apache.lucene.index.CompoundFileReader.createOutput(String)",1,24,n/a,6,0,1,1,1
"org.apache.lucene.index.CompoundFileReader.deleteFile(String)",1,16,n/a,6,0,1,1,1
"org.apache.lucene.index.CompoundFileReader.fileExists(String)",2,19,n/a,5,0,1,1,1
"org.apache.lucene.index.CompoundFileReader.fileLength(String)",3,8,n/a,9,0,1,4,2
"org.apache.lucene.index.CompoundFileReader.fileModified(String)",1,5,n/a,5,0,1,1,1
"org.apache.lucene.index.CompoundFileReader.getDirectory()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.CompoundFileReader.getName()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.CompoundFileReader.listAll()",5,14,n/a,11,1,0,7,2
"org.apache.lucene.index.CompoundFileReader.makeLock(String)",1,6,n/a,6,0,1,1,1
"org.apache.lucene.index.CompoundFileReader.openInput(String)",1,12,n/a,5,0,1,1,1
"org.apache.lucene.index.CompoundFileReader.openInput(String,int)",6,18,n/a,11,1,2,7,3
"org.apache.lucene.index.CompoundFileReader.renameFile(String,String)",1,0,n/a,5,0,2,1,1
"org.apache.lucene.index.CompoundFileReader.touchFile(String)",1,3,n/a,8,0,1,1,1
"org.apache.lucene.index.CompoundFileWriter.CompoundFileWriter(Directory,String)",1,1,n/a,7,0,2,1,1
"org.apache.lucene.index.CompoundFileWriter.CompoundFileWriter(Directory,String,CheckAbort)",4,2,n/a,11,0,3,9,3
"org.apache.lucene.index.CompoundFileWriter.addFile(String)",1,3,n/a,11,0,1,1,1
"org.apache.lucene.index.CompoundFileWriter.addFile(String,Directory)",6,1,n/a,19,0,2,10,4
"org.apache.lucene.index.CompoundFileWriter.close()",21,2,n/a,64,2,0,30,7
"org.apache.lucene.index.CompoundFileWriter.copyFile(FileEntry,IndexOutput)",8,1,n/a,23,2,2,12,3
"org.apache.lucene.index.CompoundFileWriter.getDirectory()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.CompoundFileWriter.getName()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.ConcurrentMergeScheduler()",1,3,n/a,6,1,0,2,2
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.MergeThread(IndexWriter,OneMerge)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.getCurrentMerge()",0,5,n/a,9,1,0,5,3
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.getRunningMerge()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.run()",15,0,n/a,43,3,0,24,9
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.setRunningMerge(OneMerge)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread.setThreadPriority(int)",1,2,n/a,11,1,1,2,3
"org.apache.lucene.index.ConcurrentMergeScheduler.addMyself()",8,1,n/a,16,2,0,11,4
"org.apache.lucene.index.ConcurrentMergeScheduler.anyUnhandledExceptions()",4,0,n/a,16,1,0,11,3
"org.apache.lucene.index.ConcurrentMergeScheduler.clearSuppressExceptions()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.clearUnhandledExceptions()",0,0,n/a,5,1,0,2,1
"org.apache.lucene.index.ConcurrentMergeScheduler.close()",1,3,n/a,5,0,0,2,1
"org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(OneMerge)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.getMaxMergeCount()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.getMaxThreadCount()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.getMergeThread(IndexWriter,OneMerge)",4,1,n/a,8,0,2,5,1
"org.apache.lucene.index.ConcurrentMergeScheduler.getMergeThreadPriority()",1,0,n/a,8,0,0,2,1
"org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(Throwable)",3,1,n/a,16,1,1,4,2
"org.apache.lucene.index.ConcurrentMergeScheduler.initMergeThreadPriority()",2,2,n/a,9,1,0,4,3
"org.apache.lucene.index.ConcurrentMergeScheduler.merge(IndexWriter)",30,3,n/a,75,4,1,39,12
"org.apache.lucene.index.ConcurrentMergeScheduler.mergeThreadCount()",2,2,n/a,13,2,0,5,4
"org.apache.lucene.index.ConcurrentMergeScheduler.message(String)",1,14,n/a,7,0,1,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergeCount(int)",2,4,n/a,15,1,1,5,3
"org.apache.lucene.index.ConcurrentMergeScheduler.setMaxThreadCount(int)",2,4,n/a,12,1,1,5,3
"org.apache.lucene.index.ConcurrentMergeScheduler.setMergeThreadPriority(int)",2,0,n/a,12,0,1,4,3
"org.apache.lucene.index.ConcurrentMergeScheduler.setSuppressExceptions()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.setTestMode()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.index.ConcurrentMergeScheduler.sync()",3,1,n/a,23,4,0,12,6
"org.apache.lucene.index.ConcurrentMergeScheduler.updateMergeThreads()",24,4,n/a,56,4,0,33,12
"org.apache.lucene.index.ConcurrentMergeScheduler.verbose()",1,11,n/a,13,0,0,1,2
"org.apache.lucene.index.CorruptIndexException.CorruptIndexException(String)",1,22,n/a,3,0,1,1,1
"org.apache.lucene.index.DefaultSkipListReader.DefaultSkipListReader(IndexInput,int,int)",1,1,n/a,6,0,3,4,1
"org.apache.lucene.index.DefaultSkipListReader.getFreqPointer()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.index.DefaultSkipListReader.getPayloadLength()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.index.DefaultSkipListReader.getProxPointer()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.index.DefaultSkipListReader.init(long,long,long,int,boolean)",4,1,n/a,9,0,5,7,1
"org.apache.lucene.index.DefaultSkipListReader.readSkipData(int,IndexInput)",5,2,n/a,21,2,2,10,3
"org.apache.lucene.index.DefaultSkipListReader.seekChild(int)",1,2,n/a,7,0,1,4,1
"org.apache.lucene.index.DefaultSkipListReader.setLastSkipData(int)",1,2,n/a,7,0,1,4,1
"org.apache.lucene.index.DefaultSkipListWriter.DefaultSkipListWriter(int,int,int,IndexOutput,IndexOutput)",1,1,n/a,9,0,5,7,1
"org.apache.lucene.index.DefaultSkipListWriter.resetSkip()",7,2,n/a,9,0,0,6,2
"org.apache.lucene.index.DefaultSkipListWriter.setFreqOutput(IndexOutput)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.DefaultSkipListWriter.setProxOutput(IndexOutput)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.DefaultSkipListWriter.setSkipData(int,boolean,int)",2,1,n/a,11,0,3,6,2
"org.apache.lucene.index.DefaultSkipListWriter.writeSkipData(int,IndexOutput)",6,1,n/a,46,2,2,13,3
"org.apache.lucene.index.DirectoryReader.DirectoryReader(Directory,SegmentInfos,IndexDeletionPolicy,boolean,int)",6,2,n/a,28,2,5,19,4
"org.apache.lucene.index.DirectoryReader.DirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],Map<String, byte[]>,boolean,boolean,int)",38,2,n/a,111,7,8,66,23
"org.apache.lucene.index.DirectoryReader.DirectoryReader(IndexWriter,SegmentInfos,int,boolean)",16,1,n/a,39,3,4,29,6
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.MultiTermDocs(IndexReader,IndexReader[],int[])",0,3,n/a,6,0,3,4,1
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.close()",1,52,n/a,6,1,0,5,3
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.doc()",1,116,n/a,3,0,0,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.freq()",1,54,n/a,3,0,0,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.next()",2,96,n/a,21,4,0,13,7
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.read(int[],int[])",2,10,n/a,30,5,2,21,8
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.seek(Term)",0,23,n/a,9,0,1,7,1
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.seek(TermEnum)",2,19,n/a,8,1,1,5,3
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.skipTo(int)",2,40,n/a,20,4,1,13,7
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.termDocs(IndexReader)",2,1,n/a,4,0,1,1,2
"org.apache.lucene.index.DirectoryReader.MultiTermDocs.termDocs(int)",5,3,n/a,13,1,1,9,3
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.MultiTermEnum(IndexReader,IndexReader[],int[],Term)",10,4,n/a,23,2,4,18,7
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.close()",1,38,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.docFreq()",0,27,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.next()",8,54,n/a,28,1,0,24,7
"org.apache.lucene.index.DirectoryReader.MultiTermEnum.term()",0,110,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.MultiTermPositions(IndexReader,IndexReader[],int[])",1,2,n/a,3,0,3,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.getPayload(byte[],int)",1,12,n/a,3,0,2,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.getPayloadLength()",1,14,n/a,3,0,0,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.isPayloadAvailable()",1,9,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.nextPosition()",1,26,n/a,3,0,0,1,1
"org.apache.lucene.index.DirectoryReader.MultiTermPositions.termDocs(IndexReader)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.ReaderCommit(SegmentInfos,Directory)",7,3,n/a,9,0,2,7,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.delete()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getDirectory()",0,18,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getFileNames()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getGeneration()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getSegmentCount()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getSegmentsFileName()",0,11,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getUserData()",0,12,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.getVersion()",0,20,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.isDeleted()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.ReaderCommit.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.acquireWriteLock()",9,3,n/a,41,3,0,16,7
"org.apache.lucene.index.DirectoryReader.clone()",2,4,n/a,8,1,0,3,2
"org.apache.lucene.index.DirectoryReader.clone(boolean)",2,5,n/a,22,1,1,12,4
"org.apache.lucene.index.DirectoryReader.directory()",0,13,n/a,8,0,0,1,1
"org.apache.lucene.index.DirectoryReader.doClose()",2,1,n/a,20,2,0,13,6
"org.apache.lucene.index.DirectoryReader.doCommit(Map<String, String>)",20,1,n/a,63,3,1,28,6
"org.apache.lucene.index.DirectoryReader.doDelete(int)",2,1,n/a,8,0,1,4,1
"org.apache.lucene.index.DirectoryReader.doOpenFromWriter(boolean,IndexCommit)",7,1,n/a,19,1,2,12,5
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged()",1,5,n/a,5,0,0,1,1
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(IndexCommit)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(IndexWriter,boolean)",2,2,n/a,8,1,2,3,3
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(SegmentInfos,boolean,boolean)",2,2,n/a,9,1,3,5,2
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(boolean)",1,1,n/a,5,0,1,1,1
"org.apache.lucene.index.DirectoryReader.doOpenIfChanged(boolean,IndexCommit)",3,3,n/a,11,1,2,5,3
"org.apache.lucene.index.DirectoryReader.doOpenNoWriter(boolean,IndexCommit)",15,1,n/a,6,3,2,22,10
"org.apache.lucene.index.DirectoryReader.doSetNorm(int,String,byte)",3,2,n/a,10,1,3,4,1
"org.apache.lucene.index.DirectoryReader.doUndeleteAll()",1,1,n/a,8,0,0,6,2
"org.apache.lucene.index.DirectoryReader.docFreq(Term)",2,28,n/a,8,0,1,7,2
"org.apache.lucene.index.DirectoryReader.document(int,FieldSelector)",3,20,n/a,7,0,2,3,1
"org.apache.lucene.index.DirectoryReader.getCommitUserData()",2,2,n/a,5,0,0,2,1
"org.apache.lucene.index.DirectoryReader.getFieldInfos()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.getIndexCommit()",2,12,n/a,10,0,0,2,1
"org.apache.lucene.index.DirectoryReader.getSequentialSubReaders()",0,24,n/a,4,0,0,1,1
"org.apache.lucene.index.DirectoryReader.getTermFreqVector(int,String)",3,32,n/a,7,0,2,3,1
"org.apache.lucene.index.DirectoryReader.getTermFreqVector(int,String,TermVectorMapper)",3,7,n/a,6,0,3,3,1
"org.apache.lucene.index.DirectoryReader.getTermFreqVector(int,TermVectorMapper)",3,3,n/a,6,0,2,3,1
"org.apache.lucene.index.DirectoryReader.getTermFreqVectors(int)",3,8,n/a,6,0,1,3,1
"org.apache.lucene.index.DirectoryReader.getTermInfosIndexDivisor()",1,2,n/a,5,0,0,2,1
"org.apache.lucene.index.DirectoryReader.getVersion()",2,10,n/a,6,0,0,2,1
"org.apache.lucene.index.DirectoryReader.hasDeletions()",1,29,n/a,5,0,0,2,1
"org.apache.lucene.index.DirectoryReader.hasNorms(String)",2,11,n/a,8,1,1,7,3
"org.apache.lucene.index.DirectoryReader.initialize(SegmentReader[])",3,3,n/a,16,2,1,13,4
"org.apache.lucene.index.DirectoryReader.isCurrent()",5,17,n/a,10,1,0,4,3
"org.apache.lucene.index.DirectoryReader.isDeleted(int)",2,33,n/a,6,0,1,2,1
"org.apache.lucene.index.DirectoryReader.isOptimized()",3,3,n/a,7,0,0,2,2
"org.apache.lucene.index.DirectoryReader.listCommits(Directory)",15,1,n/a,36,3,1,19,7
"org.apache.lucene.index.DirectoryReader.maxDoc()",0,140,n/a,5,0,0,1,1
"org.apache.lucene.index.DirectoryReader.norms(String)",6,29,n/a,14,0,1,13,4
"org.apache.lucene.index.DirectoryReader.norms(String,byte[],int)",9,12,n/a,15,2,3,10,5
"org.apache.lucene.index.DirectoryReader.numDocs()",1,83,n/a,13,1,0,8,3
"org.apache.lucene.index.DirectoryReader.open(Directory,IndexDeletionPolicy,IndexCommit,boolean,int)",6,10,n/a,9,2,5,6,2
"org.apache.lucene.index.DirectoryReader.readerIndex(int)",1,8,n/a,3,0,1,1,1
"org.apache.lucene.index.DirectoryReader.readerIndex(int,int[],int)",0,2,n/a,19,3,3,13,6
"org.apache.lucene.index.DirectoryReader.rollbackCommit()",1,1,n/a,6,1,0,5,2
"org.apache.lucene.index.DirectoryReader.startCommit()",1,1,n/a,6,1,0,5,2
"org.apache.lucene.index.DirectoryReader.termDocs()",3,28,n/a,10,1,0,4,2
"org.apache.lucene.index.DirectoryReader.termDocs(Term)",3,40,n/a,10,1,1,4,2
"org.apache.lucene.index.DirectoryReader.termPositions()",3,10,n/a,10,1,0,4,2
"org.apache.lucene.index.DirectoryReader.terms()",3,13,n/a,10,1,0,4,2
"org.apache.lucene.index.DirectoryReader.terms(Term)",3,59,n/a,10,1,1,4,2
"org.apache.lucene.index.DirectoryReader.toString()",13,0,n/a,23,1,0,17,5
"org.apache.lucene.index.DocConsumer.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocConsumer.addThread(DocumentsWriterThreadState)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.DocConsumer.flush(Collection<DocConsumerPerThread>,SegmentWriteState)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.DocConsumer.freeRAM()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocConsumerPerThread.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocConsumerPerThread.processDocument()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocFieldConsumer.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocFieldConsumer.addThread(DocFieldProcessorPerThread)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.DocFieldConsumer.flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>,SegmentWriteState)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.DocFieldConsumer.freeRAM()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocFieldConsumer.setFieldInfos(FieldInfos)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.index.DocFieldConsumerPerField.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocFieldConsumerPerField.processFields(Fieldable[],int)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.DocFieldConsumerPerThread.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocFieldConsumerPerThread.addField(FieldInfo)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.DocFieldConsumerPerThread.finishDocument()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocFieldConsumerPerThread.startDocument()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocFieldProcessor.DocFieldProcessor(DocumentsWriter,DocFieldConsumer)",3,1,n/a,7,0,2,5,1
"org.apache.lucene.index.DocFieldProcessor.abort()",2,1,n/a,8,1,0,3,1
"org.apache.lucene.index.DocFieldProcessor.addThread(DocumentsWriterThreadState)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.DocFieldProcessor.flush(Collection<DocConsumerPerThread>,SegmentWriteState)",8,1,n/a,17,1,2,9,2
"org.apache.lucene.index.DocFieldProcessor.freeRAM()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.DocFieldProcessorPerField.DocFieldProcessorPerField(DocFieldProcessorPerThread,FieldInfo)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.index.DocFieldProcessorPerField.abort()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.DocFieldProcessorPerThread.DocFieldProcessorPerThread(DocumentsWriterThreadState,DocFieldProcessor)",2,1,n/a,7,0,2,5,1
"org.apache.lucene.index.DocFieldProcessorPerThread.PerDoc.abort()",3,4,n/a,12,2,0,5,1
"org.apache.lucene.index.DocFieldProcessorPerThread.PerDoc.finish()",3,3,n/a,12,2,0,5,1
"org.apache.lucene.index.DocFieldProcessorPerThread.PerDoc.sizeInBytes()",2,4,n/a,4,0,0,1,1
"org.apache.lucene.index.DocFieldProcessorPerThread.abort()",4,1,n/a,38,4,0,23,12
"org.apache.lucene.index.DocFieldProcessorPerThread.fields()",3,1,n/a,12,2,0,10,3
"org.apache.lucene.index.DocFieldProcessorPerThread.freePerDoc(PerDoc)",0,2,n/a,4,0,1,2,1
"org.apache.lucene.index.DocFieldProcessorPerThread.getPerDoc()",2,1,n/a,14,2,0,7,3
"org.apache.lucene.index.DocFieldProcessorPerThread.processDocument()",31,2,n/a,91,3,0,63,15
"org.apache.lucene.index.DocFieldProcessorPerThread.rehash()",1,1,n/a,19,2,0,16,3
"org.apache.lucene.index.DocFieldProcessorPerThread.trimFields(SegmentWriteState)",1,1,n/a,27,3,1,16,6
"org.apache.lucene.index.DocInverter.DocInverter(InvertedDocConsumer,InvertedDocEndConsumer)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.index.DocInverter.abort()",2,1,n/a,8,1,0,3,1
"org.apache.lucene.index.DocInverter.addThread(DocFieldProcessorPerThread)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.DocInverter.flush(Map<DocFieldConsumerPerThread, Collection<DocFieldConsumerPerField>>,SegmentWriteState)",13,1,n/a,19,2,2,14,3
"org.apache.lucene.index.DocInverter.freeRAM()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.DocInverter.setFieldInfos(FieldInfos)",3,2,n/a,6,0,1,3,1
"org.apache.lucene.index.DocInverterPerField.DocInverterPerField(DocInverterPerThread,FieldInfo)",2,1,n/a,8,0,2,6,1
"org.apache.lucene.index.DocInverterPerField.abort()",2,1,n/a,8,1,0,3,1
"org.apache.lucene.index.DocInverterPerField.processFields(Fieldable[],int)",40,1,n/a,126,6,2,82,22
"org.apache.lucene.index.DocInverterPerThread.DocInverterPerThread(DocFieldProcessorPerThread,DocInverter)",2,1,n/a,6,0,2,4,1
"org.apache.lucene.index.DocInverterPerThread.SingleTokenAttributeSource.SingleTokenAttributeSource()",2,1,n/a,4,0,0,2,1
"org.apache.lucene.index.DocInverterPerThread.SingleTokenAttributeSource.reinit(String,int,int)",3,1,n/a,4,0,3,2,1
"org.apache.lucene.index.DocInverterPerThread.abort()",2,1,n/a,8,1,0,3,1
"org.apache.lucene.index.DocInverterPerThread.addField(FieldInfo)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.DocInverterPerThread.finishDocument()",2,1,n/a,7,0,0,2,1
"org.apache.lucene.index.DocInverterPerThread.startDocument()",2,1,n/a,5,0,0,2,1
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator.ByteBlockAllocator(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator.getByteBlock()",3,2,n/a,14,2,0,8,2
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator.recycleByteBlocks(List<byte[]>)",4,1,n/a,10,2,1,7,2
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator.recycleByteBlocks(byte[][],int,int)",1,1,n/a,9,2,3,6,2
"org.apache.lucene.index.DocumentsWriter.DocState.clear()",0,2,n/a,6,0,0,2,1
"org.apache.lucene.index.DocumentsWriter.DocState.testPoint(String)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.index.DocumentsWriter.DocWriter.abort()",n/a,4,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocumentsWriter.DocWriter.finish()",n/a,3,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocumentsWriter.DocWriter.setNext(DocWriter)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.DocumentsWriter.DocWriter.sizeInBytes()",n/a,4,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.DocumentsWriter.DocumentsWriter(IndexWriterConfig,Directory,IndexWriter,FieldInfos,BufferedDeletesStream)",4,1,n/a,11,0,5,9,1
"org.apache.lucene.index.DocumentsWriter.IndexingChain.getChain(DocumentsWriter)",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.DocumentsWriter.PerDocBuffer.newBuffer(int)",1,2,n/a,8,0,1,2,1
"org.apache.lucene.index.DocumentsWriter.PerDocBuffer.recycle()",5,2,n/a,13,1,0,6,2
"org.apache.lucene.index.DocumentsWriter.SkipDocWriter.abort()",0,4,n/a,3,0,0,0,1
"org.apache.lucene.index.DocumentsWriter.SkipDocWriter.finish()",0,3,n/a,3,0,0,0,1
"org.apache.lucene.index.DocumentsWriter.SkipDocWriter.sizeInBytes()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.WaitQueue.WaitQueue()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.WaitQueue.abort()",1,1,n/a,14,2,0,12,3
"org.apache.lucene.index.DocumentsWriter.WaitQueue.add(DocWriter)",8,6,n/a,47,3,1,29,6
"org.apache.lucene.index.DocumentsWriter.WaitQueue.doPause()",1,2,n/a,10,1,0,6,2
"org.apache.lucene.index.DocumentsWriter.WaitQueue.doResume()",1,1,n/a,10,1,0,6,2
"org.apache.lucene.index.DocumentsWriter.WaitQueue.reset()",0,1,n/a,6,0,0,3,1
"org.apache.lucene.index.DocumentsWriter.WaitQueue.writeDocument(DocWriter)",2,2,n/a,18,2,1,12,4
"org.apache.lucene.index.DocumentsWriter.abort()",10,8,n/a,48,4,0,24,8
"org.apache.lucene.index.DocumentsWriter.addDocument(Document,Analyzer)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.index.DocumentsWriter.allThreadsIdle()",0,2,n/a,8,2,0,6,3
"org.apache.lucene.index.DocumentsWriter.anyChanges()",1,1,n/a,3,0,0,1,2
"org.apache.lucene.index.DocumentsWriter.anyDeletions()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.balanceRAM()",47,3,n/a,98,6,0,50,27
"org.apache.lucene.index.DocumentsWriter.bytesUsed()",2,12,n/a,3,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.bytesUsed(long)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.DocumentsWriter.close()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.index.DocumentsWriter.deleteDocID(int)",1,2,n/a,14,0,1,1,1
"org.apache.lucene.index.DocumentsWriter.deleteQueries(Query...)",2,1,n/a,9,2,1,5,2
"org.apache.lucene.index.DocumentsWriter.deleteQuery(Query)",2,1,n/a,7,1,1,4,1
"org.apache.lucene.index.DocumentsWriter.deleteTerm(Term,boolean)",2,1,n/a,10,1,2,4,1
"org.apache.lucene.index.DocumentsWriter.deleteTerms(Term...)",2,1,n/a,9,2,1,5,2
"org.apache.lucene.index.DocumentsWriter.doAfterFlush()",4,2,n/a,14,1,0,11,2
"org.apache.lucene.index.DocumentsWriter.finishDocument(DocumentsWriterThreadState,DocWriter)",7,1,n/a,39,4,2,19,7
"org.apache.lucene.index.DocumentsWriter.flush(IndexWriter,IndexFileDeleter,MergePolicy,SegmentInfos)",61,1,n/a,133,5,4,80,23
"org.apache.lucene.index.DocumentsWriter.getCharBlock()",3,1,n/a,15,1,0,7,2
"org.apache.lucene.index.DocumentsWriter.getFieldInfos()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.getIntBlock()",3,1,n/a,12,1,0,7,2
"org.apache.lucene.index.DocumentsWriter.getNumDocs()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.getPendingDeletes()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.getSegment()",0,7,n/a,4,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.getThreadState(Term,int)",9,2,n/a,55,3,2,31,11
"org.apache.lucene.index.DocumentsWriter.message(String)",1,26,n/a,5,1,1,2,2
"org.apache.lucene.index.DocumentsWriter.newPerDocBuffer()",1,2,n/a,6,0,0,1,1
"org.apache.lucene.index.DocumentsWriter.pushDeletes(SegmentInfo,SegmentInfos)",12,2,n/a,29,3,2,16,9
"org.apache.lucene.index.DocumentsWriter.recycleCharBlocks(char[][],int)",1,1,n/a,7,1,2,5,2
"org.apache.lucene.index.DocumentsWriter.recycleIntBlocks(int[][],int,int)",1,1,n/a,7,1,3,5,2
"org.apache.lucene.index.DocumentsWriter.setAborting()",1,3,n/a,6,1,0,3,2
"org.apache.lucene.index.DocumentsWriter.setInfoStream(PrintStream)",0,2,n/a,8,1,1,5,2
"org.apache.lucene.index.DocumentsWriter.setMaxFieldLength(int)",0,2,n/a,6,1,1,5,2
"org.apache.lucene.index.DocumentsWriter.setSimilarity(Similarity)",0,1,n/a,6,1,1,5,2
"org.apache.lucene.index.DocumentsWriter.toMB(long)",1,6,n/a,3,0,1,1,1
"org.apache.lucene.index.DocumentsWriter.updateDocument(Document,Analyzer,Term)",13,3,n/a,61,6,3,34,7
"org.apache.lucene.index.DocumentsWriter.updateDocuments(Collection<Document>,Analyzer,Term)",27,1,n/a,130,8,3,69,17
"org.apache.lucene.index.DocumentsWriter.waitForWaitQueue()",3,2,n/a,9,2,0,4,3
"org.apache.lucene.index.DocumentsWriter.waitIdle()",3,2,n/a,9,2,0,4,3
"org.apache.lucene.index.DocumentsWriter.waitReady(DocumentsWriterThreadState)",3,1,n/a,12,2,1,6,6
"org.apache.lucene.index.DocumentsWriterThreadState.DocumentsWriterThreadState(DocumentsWriter)",2,1,n/a,9,0,1,7,1
"org.apache.lucene.index.DocumentsWriterThreadState.doAfterFlush()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.FieldInfo.FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions)",0,2,n/a,18,1,7,13,3
"org.apache.lucene.index.FieldInfo.clone()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.index.FieldInfo.update(boolean,boolean,boolean,boolean,IndexOptions)",1,2,n/a,23,2,5,13,9
"org.apache.lucene.index.FieldInfos.FieldInfos()",0,8,n/a,1,0,0,0,1
"org.apache.lucene.index.FieldInfos.FieldInfos(Directory,String)",8,2,n/a,37,4,2,14,4
"org.apache.lucene.index.FieldInfos.add(Document)",7,0,n/a,8,1,1,3,2
"org.apache.lucene.index.FieldInfos.add(FieldInfo)",1,4,n/a,5,0,1,1,1
"org.apache.lucene.index.FieldInfos.add(FieldInfos)",1,2,n/a,5,1,1,2,2
"org.apache.lucene.index.FieldInfos.add(String,boolean)",1,0,n/a,10,0,2,1,1
"org.apache.lucene.index.FieldInfos.add(String,boolean,boolean)",1,2,n/a,10,0,3,1,1
"org.apache.lucene.index.FieldInfos.add(String,boolean,boolean,boolean)",1,2,n/a,15,0,4,1,1
"org.apache.lucene.index.FieldInfos.add(String,boolean,boolean,boolean,boolean,IndexOptions)",3,5,n/a,23,1,6,6,3
"org.apache.lucene.index.FieldInfos.addInternal(String,boolean,boolean,boolean,boolean,IndexOptions)",5,2,n/a,9,0,6,5,1
"org.apache.lucene.index.FieldInfos.clone()",6,2,n/a,14,1,0,9,2
"org.apache.lucene.index.FieldInfos.fieldInfo(String)",1,8,n/a,3,0,1,1,1
"org.apache.lucene.index.FieldInfos.fieldInfo(int)",1,10,n/a,9,0,1,1,2
"org.apache.lucene.index.FieldInfos.fieldName(int)",1,8,n/a,11,0,1,2,2
"org.apache.lucene.index.FieldInfos.fieldNumber(String)",1,3,n/a,10,0,1,2,2
"org.apache.lucene.index.FieldInfos.hasProx()",2,5,n/a,11,2,0,8,4
"org.apache.lucene.index.FieldInfos.hasVectors()",2,3,n/a,13,2,0,8,3
"org.apache.lucene.index.FieldInfos.iterator()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.index.FieldInfos.read(IndexInput,String)",13,2,n/a,48,3,2,32,12
"org.apache.lucene.index.FieldInfos.size()",1,13,n/a,6,0,0,1,1
"org.apache.lucene.index.FieldInfos.write(Directory,String)",3,2,n/a,8,1,2,4,1
"org.apache.lucene.index.FieldInfos.write(IndexOutput)",7,1,n/a,20,2,1,22,9
"org.apache.lucene.index.FieldInvertState.FieldInvertState()",0,4,n/a,2,0,0,0,1
"org.apache.lucene.index.FieldInvertState.FieldInvertState(int,int,int,int,float)",0,1,n/a,7,0,5,5,1
"org.apache.lucene.index.FieldInvertState.getAttributeSource()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.FieldInvertState.getBoost()",0,6,n/a,9,0,0,1,1
"org.apache.lucene.index.FieldInvertState.getLength()",0,13,n/a,7,0,0,1,1
"org.apache.lucene.index.FieldInvertState.getMaxTermFrequency()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.index.FieldInvertState.getNumOverlap()",0,6,n/a,7,0,0,1,1
"org.apache.lucene.index.FieldInvertState.getOffset()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.index.FieldInvertState.getPosition()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.index.FieldInvertState.getUniqueTermCount()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.index.FieldInvertState.reset(float)",0,1,n/a,14,0,1,8,1
"org.apache.lucene.index.FieldInvertState.setBoost(float)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.index.FieldInvertState.setLength(int)",0,16,n/a,3,0,1,1,1
"org.apache.lucene.index.FieldInvertState.setNumOverlap(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.FieldNormModifier.FieldNormModifier(Directory,Similarity)",0,8,n/a,11,0,2,2,1
"org.apache.lucene.index.FieldNormModifier.main(String[])",20,0,n/a,31,2,1,19,5
"org.apache.lucene.index.FieldNormModifier.reSetNorms(String)",29,8,n/a,60,6,1,38,12
"org.apache.lucene.index.FieldReaderException.FieldReaderException()",0,0,n/a,7,0,0,0,1
"org.apache.lucene.index.FieldReaderException.FieldReaderException(String)",1,0,n/a,11,0,1,1,1
"org.apache.lucene.index.FieldReaderException.FieldReaderException(String,Throwable)",1,0,n/a,17,0,2,1,1
"org.apache.lucene.index.FieldReaderException.FieldReaderException(Throwable)",1,0,n/a,18,0,1,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.FieldSortedTermVectorMapper(Comparator<TermVectorEntry>)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.FieldSortedTermVectorMapper(boolean,boolean,Comparator<TermVectorEntry>)",1,1,n/a,4,0,3,2,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.getComparator()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.getFieldToTerms()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",2,7,n/a,5,0,4,2,1
"org.apache.lucene.index.FieldSortedTermVectorMapper.setExpectations(String,int,boolean,boolean)",2,6,n/a,6,0,4,3,1
"org.apache.lucene.index.FieldsReader.FieldsReader(Directory,String,FieldInfos)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.index.FieldsReader.FieldsReader(Directory,String,FieldInfos,int)",1,0,n/a,3,0,4,1,1
"org.apache.lucene.index.FieldsReader.FieldsReader(Directory,String,FieldInfos,int,int,int)",11,3,n/a,51,2,6,31,7
"org.apache.lucene.index.FieldsReader.FieldsReader(FieldInfos,int,int,int,int,int,IndexInput,IndexInput)",2,1,n/a,14,0,8,10,1
"org.apache.lucene.index.FieldsReader.LazyField.LazyField(String,Store,Index,TermVector,int,long,boolean,boolean,boolean)",1,1,n/a,11,0,9,9,2
"org.apache.lucene.index.FieldsReader.LazyField.LazyField(String,Store,int,long,boolean,boolean,boolean)",1,2,n/a,11,0,7,9,2
"org.apache.lucene.index.FieldsReader.LazyField.getBinaryValue(byte[])",6,1,n/a,39,4,1,23,8
"org.apache.lucene.index.FieldsReader.LazyField.getFieldStream()",3,2,n/a,8,1,0,5,2
"org.apache.lucene.index.FieldsReader.LazyField.readerValue()",1,2,n/a,7,0,0,2,1
"org.apache.lucene.index.FieldsReader.LazyField.stringValue()",11,67,n/a,41,5,0,24,7
"org.apache.lucene.index.FieldsReader.LazyField.tokenStreamValue()",1,4,n/a,7,0,0,2,1
"org.apache.lucene.index.FieldsReader.addField(Document,FieldInfo,boolean,boolean,boolean,int)",18,2,n/a,41,2,6,22,5
"org.apache.lucene.index.FieldsReader.addFieldLazy(Document,FieldInfo,boolean,boolean,boolean,boolean,int)",19,2,n/a,36,3,7,25,5
"org.apache.lucene.index.FieldsReader.addFieldSize(Document,FieldInfo,boolean,boolean,int)",5,2,n/a,29,1,5,23,7
"org.apache.lucene.index.FieldsReader.canReadRawDocs()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.index.FieldsReader.clone()",2,1,n/a,10,0,0,2,1
"org.apache.lucene.index.FieldsReader.close()",2,1,n/a,16,2,0,5,3
"org.apache.lucene.index.FieldsReader.detectCodeVersion(Directory,String)",4,1,n/a,19,2,2,7,2
"org.apache.lucene.index.FieldsReader.doc(int,FieldSelector)",18,1,n/a,43,2,2,41,11
"org.apache.lucene.index.FieldsReader.ensureOpen()",1,5,n/a,8,1,0,2,2
"org.apache.lucene.index.FieldsReader.loadNumericField(FieldInfo,int)",16,2,n/a,15,1,2,12,6
"org.apache.lucene.index.FieldsReader.rawDocs(int[],int,int)",5,2,n/a,23,1,3,15,3
"org.apache.lucene.index.FieldsReader.seekIndex(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.index.FieldsReader.size()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.index.FieldsReader.skipField(boolean,boolean,int)",4,1,n/a,23,1,3,16,5
"org.apache.lucene.index.FieldsReader.skipFieldBytes(boolean,boolean,int)",3,2,n/a,8,1,3,3,4
"org.apache.lucene.index.FieldsReader.uncompress(byte[])",4,4,n/a,11,1,1,5,2
"org.apache.lucene.index.FieldsWriter.FieldsWriter(Directory,String,FieldInfos)",7,2,n/a,17,2,3,12,2
"org.apache.lucene.index.FieldsWriter.FieldsWriter(IndexOutput,IndexOutput,FieldInfos)",0,1,n/a,7,0,3,5,1
"org.apache.lucene.index.FieldsWriter.abort()",5,2,n/a,16,2,0,7,5
"org.apache.lucene.index.FieldsWriter.addDocument(Document)",9,2,n/a,14,1,1,10,5
"org.apache.lucene.index.FieldsWriter.addRawDocuments(IndexInput,int[],int)",4,2,n/a,15,1,3,9,2
"org.apache.lucene.index.FieldsWriter.close()",1,3,n/a,9,2,0,4,2
"org.apache.lucene.index.FieldsWriter.finish(int)",5,2,n/a,11,1,1,3,2
"org.apache.lucene.index.FieldsWriter.flushDocument(int,RAMOutputStream)",4,1,n/a,9,0,2,3,1
"org.apache.lucene.index.FieldsWriter.setFieldsStream(IndexOutput)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.FieldsWriter.skipDocument()",3,1,n/a,4,0,0,2,1
"org.apache.lucene.index.FieldsWriter.writeField(FieldInfo,Fieldable)",25,2,n/a,50,2,2,51,16
"org.apache.lucene.index.FilterIndexReader.FilterIndexReader(IndexReader)",1,7,n/a,11,0,1,2,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.FilterTermDocs(TermDocs)",0,1,n/a,1,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.close()",1,52,n/a,1,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.doc()",1,118,n/a,1,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.freq()",1,54,n/a,1,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.next()",1,99,n/a,1,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.read(int[],int[])",1,10,n/a,3,0,2,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.seek(Term)",1,23,n/a,1,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.seek(TermEnum)",1,20,n/a,1,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs.skipTo(int)",1,40,n/a,1,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.FilterTermEnum(TermEnum)",0,1,n/a,1,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.close()",1,38,n/a,2,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.docFreq()",1,27,n/a,2,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.next()",1,54,n/a,2,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum.term()",1,112,n/a,2,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.FilterTermPositions(TermPositions)",1,3,n/a,1,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.getPayload(byte[],int)",1,12,n/a,3,0,2,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.getPayloadLength()",1,14,n/a,3,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.isPayloadAvailable()",1,10,n/a,4,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions.nextPosition()",1,26,n/a,3,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.directory()",2,13,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.doClose()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.doCommit(Map<String, String>)",1,1,n/a,5,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.doDelete(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.doSetNorm(int,String,byte)",1,2,n/a,5,0,3,1,1
"org.apache.lucene.index.FilterIndexReader.doUndeleteAll()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.docFreq(Term)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.index.FilterIndexReader.document(int,FieldSelector)",2,21,n/a,5,0,2,2,1
"org.apache.lucene.index.FilterIndexReader.getCommitUserData()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.getCoreCacheKey()",1,8,n/a,7,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.getDeletesCacheKey()",1,3,n/a,7,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.getFieldInfos()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.getIndexCommit()",2,12,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.getSequentialSubReaders()",1,25,n/a,4,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int,String)",2,33,n/a,6,0,2,2,1
"org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int,String,TermVectorMapper)",2,7,n/a,5,0,3,2,1
"org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int,TermVectorMapper)",2,3,n/a,5,0,2,2,1
"org.apache.lucene.index.FilterIndexReader.getTermFreqVectors(int)",2,10,n/a,6,0,1,2,1
"org.apache.lucene.index.FilterIndexReader.getTermInfosIndexDivisor()",2,2,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.getUniqueTermCount()",2,2,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.getVersion()",2,10,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.hasDeletions()",2,28,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.hasNorms(String)",2,8,n/a,5,0,1,2,1
"org.apache.lucene.index.FilterIndexReader.isCurrent()",2,15,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.isDeleted(int)",1,33,n/a,5,0,1,1,1
"org.apache.lucene.index.FilterIndexReader.isOptimized()",2,3,n/a,6,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.maxDoc()",1,137,n/a,5,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.norms(String)",2,30,n/a,5,0,1,2,1
"org.apache.lucene.index.FilterIndexReader.norms(String,byte[],int)",2,12,n/a,5,0,3,2,1
"org.apache.lucene.index.FilterIndexReader.numDocs()",1,83,n/a,5,0,0,1,1
"org.apache.lucene.index.FilterIndexReader.termDocs()",2,28,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.termDocs(Term)",2,40,n/a,5,0,1,2,1
"org.apache.lucene.index.FilterIndexReader.termPositions()",2,11,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.terms()",2,13,n/a,5,0,0,2,1
"org.apache.lucene.index.FilterIndexReader.terms(Term)",2,60,n/a,5,0,1,2,1
"org.apache.lucene.index.FilterIndexReader.toString()",4,0,n/a,8,0,0,4,1
"org.apache.lucene.index.FormatPostingsDocsConsumer.addDoc(int,int)",n/a,2,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.FormatPostingsDocsConsumer.finish()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.FormatPostingsDocsWriter.FormatPostingsDocsWriter(SegmentWriteState,FormatPostingsTermsWriter)",5,1,n/a,18,2,2,12,2
"org.apache.lucene.index.FormatPostingsDocsWriter.addDoc(int,int)",7,2,n/a,24,1,2,15,7
"org.apache.lucene.index.FormatPostingsDocsWriter.close()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.FormatPostingsDocsWriter.finish()",4,2,n/a,18,1,0,7,2
"org.apache.lucene.index.FormatPostingsDocsWriter.setField(FieldInfo)",1,1,n/a,6,0,1,4,1
"org.apache.lucene.index.FormatPostingsFieldsConsumer.addField(FieldInfo)",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.FormatPostingsFieldsConsumer.finish()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.FormatPostingsFieldsWriter.FormatPostingsFieldsWriter(SegmentWriteState,FieldInfos)",4,2,n/a,22,2,2,12,2
"org.apache.lucene.index.FormatPostingsFieldsWriter.addField(FieldInfo)",1,2,n/a,6,0,1,2,1
"org.apache.lucene.index.FormatPostingsFieldsWriter.finish()",1,2,n/a,5,0,0,1,1
"org.apache.lucene.index.FormatPostingsPositionsConsumer.addPosition(int,byte[],int,int)",n/a,2,1,n/a,n/a,4,n/a,n/a
"org.apache.lucene.index.FormatPostingsPositionsConsumer.finish()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.FormatPostingsPositionsWriter.FormatPostingsPositionsWriter(SegmentWriteState,FormatPostingsDocsWriter)",4,1,n/a,12,1,2,6,2
"org.apache.lucene.index.FormatPostingsPositionsWriter.addPosition(int,byte[],int,int)",5,2,n/a,19,2,4,13,4
"org.apache.lucene.index.FormatPostingsPositionsWriter.close()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.index.FormatPostingsPositionsWriter.finish()",0,2,n/a,6,0,0,2,1
"org.apache.lucene.index.FormatPostingsPositionsWriter.setField(FieldInfo)",0,1,n/a,4,0,1,2,2
"org.apache.lucene.index.FormatPostingsTermsConsumer.addTerm(String)",4,1,n/a,8,0,1,6,3
"org.apache.lucene.index.FormatPostingsTermsConsumer.addTerm(char[],int)",n/a,2,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.FormatPostingsTermsConsumer.finish()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.FormatPostingsTermsWriter.FormatPostingsTermsWriter(SegmentWriteState,FormatPostingsFieldsWriter)",1,1,n/a,5,0,2,3,1
"org.apache.lucene.index.FormatPostingsTermsWriter.addTerm(char[],int)",3,2,n/a,14,0,2,7,2
"org.apache.lucene.index.FormatPostingsTermsWriter.close()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.index.FormatPostingsTermsWriter.finish()",0,2,n/a,4,0,0,0,1
"org.apache.lucene.index.FormatPostingsTermsWriter.setField(FieldInfo)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.index.FreqProxFieldMergeState.FreqProxFieldMergeState(FreqProxTermsWriterPerField)",1,1,n/a,7,0,1,5,1
"org.apache.lucene.index.FreqProxFieldMergeState.nextDoc()",3,2,n/a,26,2,0,17,6
"org.apache.lucene.index.FreqProxFieldMergeState.nextTerm()",3,2,n/a,17,0,0,14,3
"org.apache.lucene.index.FreqProxFieldMergeState.termText()",1,1,n/a,7,1,0,4,2
"org.apache.lucene.index.FreqProxTermsWriter.abort()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.FreqProxTermsWriter.addThread(TermsHashPerThread)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.FreqProxTermsWriter.appendPostings(String,SegmentWriteState,FreqProxTermsWriterPerField[],FormatPostingsFieldsConsumer)",22,1,n/a,146,8,4,92,26
"org.apache.lucene.index.FreqProxTermsWriter.compareText(char[],int,char[],int)",0,1,n/a,15,2,4,11,6
"org.apache.lucene.index.FreqProxTermsWriter.flush(Map<TermsHashConsumerPerThread, Collection<TermsHashConsumerPerField>>,SegmentWriteState)",19,1,n/a,66,4,2,39,11
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray.FreqProxPostingsArray(int)",1,2,n/a,7,0,1,5,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray.bytesPerPosting()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray.copyTo(ParallelPostingsArray,int)",5,3,n/a,10,0,2,7,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray.newInstance(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxTermsWriterPerField(TermsHashPerField,FreqProxTermsWriterPerThread,FieldInfo)",0,1,n/a,8,0,3,6,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.abort()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.addTerm(int)",9,2,n/a,42,3,1,26,8
"org.apache.lucene.index.FreqProxTermsWriterPerField.compareTo(FreqProxTermsWriterPerField)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.createPostingsArray(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.finish()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.getStreamCount()",0,1,n/a,7,0,0,3,2
"org.apache.lucene.index.FreqProxTermsWriterPerField.newTerm(int)",3,2,n/a,19,2,1,11,3
"org.apache.lucene.index.FreqProxTermsWriterPerField.reset()",0,1,n/a,6,0,0,2,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.skippingLongTerm()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.FreqProxTermsWriterPerField.start(Fieldable)",2,1,n/a,8,1,1,3,2
"org.apache.lucene.index.FreqProxTermsWriterPerField.start(Fieldable[],int)",1,1,n/a,7,0,2,6,3
"org.apache.lucene.index.FreqProxTermsWriterPerField.writeProx(int,int)",5,3,n/a,17,1,2,12,4
"org.apache.lucene.index.FreqProxTermsWriterPerThread.FreqProxTermsWriterPerThread(TermsHashPerThread)",0,1,n/a,4,0,1,2,1
"org.apache.lucene.index.FreqProxTermsWriterPerThread.abort()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.FreqProxTermsWriterPerThread.addField(TermsHashPerField,FieldInfo)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerThread.finishDocument()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.index.FreqProxTermsWriterPerThread.startDocument()",0,2,n/a,3,0,0,0,1
"org.apache.lucene.index.FrozenBufferedDeletes.FrozenBufferedDeletes(BufferedDeletes,long)",14,1,n/a,21,1,2,17,3
"org.apache.lucene.index.FrozenBufferedDeletes.any()",0,1,n/a,3,0,0,1,2
"org.apache.lucene.index.FrozenBufferedDeletes.queriesIterable()",4,1,n/a,4,4,0,7,1
"org.apache.lucene.index.FrozenBufferedDeletes.termsIterable()",2,1,n/a,4,2,0,2,1
"org.apache.lucene.index.FrozenBufferedDeletes.toString()",0,0,n/a,14,1,0,8,4
"org.apache.lucene.index.IndexCommit.compareTo(IndexCommit)",5,0,n/a,14,1,1,9,4
"org.apache.lucene.index.IndexCommit.delete()",n/a,6,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexCommit.equals(Object)",5,1,n/a,10,1,1,4,3
"org.apache.lucene.index.IndexCommit.getDirectory()",n/a,18,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexCommit.getFileNames()",n/a,6,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexCommit.getGeneration()",n/a,15,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexCommit.getSegmentCount()",n/a,6,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexCommit.getSegmentsFileName()",n/a,11,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexCommit.getTimestamp()",3,2,n/a,12,0,0,1,1
"org.apache.lucene.index.IndexCommit.getUserData()",n/a,12,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexCommit.getVersion()",n/a,20,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexCommit.hashCode()",3,1,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexCommit.isDeleted()",n/a,2,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexDeletionPolicy.onCommit(List<? extends IndexCommit>)",n/a,6,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexDeletionPolicy.onInit(List<? extends IndexCommit>)",n/a,4,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.CommitPoint(Collection<CommitPoint>,Directory,SegmentInfos)",7,3,n/a,10,0,3,8,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.delete()",1,6,n/a,11,1,0,3,2
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getDirectory()",0,18,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getFileNames()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getGeneration()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getSegmentCount()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getSegmentsFileName()",0,12,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getUserData()",0,12,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.getVersion()",0,20,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.isDeleted()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.CommitPoint.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,IndexWriter)",40,2,n/a,127,5,5,60,26
"org.apache.lucene.index.IndexFileDeleter.RefCount.DecRef()",2,1,n/a,4,0,0,2,1
"org.apache.lucene.index.IndexFileDeleter.RefCount.IncRef()",2,1,n/a,8,1,0,4,2
"org.apache.lucene.index.IndexFileDeleter.RefCount.RefCount(String)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.IndexFileDeleter.checkpoint(SegmentInfos,boolean)",14,8,n/a,47,2,2,13,4
"org.apache.lucene.index.IndexFileDeleter.close()",6,2,n/a,12,2,0,9,3
"org.apache.lucene.index.IndexFileDeleter.decRef(Collection<String>)",2,8,n/a,6,1,1,3,2
"org.apache.lucene.index.IndexFileDeleter.decRef(SegmentInfos)",3,1,n/a,6,1,1,3,2
"org.apache.lucene.index.IndexFileDeleter.decRef(String)",6,8,n/a,13,1,1,7,4
"org.apache.lucene.index.IndexFileDeleter.deleteCommits()",11,3,n/a,39,4,0,24,9
"org.apache.lucene.index.IndexFileDeleter.deleteFile(String)",8,8,n/a,26,3,1,11,6
"org.apache.lucene.index.IndexFileDeleter.deleteFiles(List<String>)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.index.IndexFileDeleter.deleteNewFiles(Collection<String>)",4,7,n/a,13,3,1,6,4
"org.apache.lucene.index.IndexFileDeleter.deletePendingFiles()",6,4,n/a,14,3,0,11,4
"org.apache.lucene.index.IndexFileDeleter.exists(String)",3,1,n/a,8,1,1,4,2
"org.apache.lucene.index.IndexFileDeleter.getLastSegmentInfos()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexFileDeleter.getRefCount(String)",5,4,n/a,11,1,1,7,2
"org.apache.lucene.index.IndexFileDeleter.incRef(Collection<String>)",2,3,n/a,6,1,1,3,2
"org.apache.lucene.index.IndexFileDeleter.incRef(SegmentInfos,boolean)",3,3,n/a,8,1,2,3,2
"org.apache.lucene.index.IndexFileDeleter.incRef(String)",4,3,n/a,8,1,1,5,3
"org.apache.lucene.index.IndexFileDeleter.locked()",1,17,n/a,4,0,0,1,2
"org.apache.lucene.index.IndexFileDeleter.message(String)",4,16,n/a,3,0,1,1,1
"org.apache.lucene.index.IndexFileDeleter.refresh()",2,3,n/a,8,0,0,3,1
"org.apache.lucene.index.IndexFileDeleter.refresh(String)",10,3,n/a,35,3,1,18,10
"org.apache.lucene.index.IndexFileDeleter.revisitPolicy()",5,1,n/a,19,1,0,6,3
"org.apache.lucene.index.IndexFileDeleter.setInfoStream(PrintStream)",1,1,n/a,6,1,1,3,2
"org.apache.lucene.index.IndexFileNameFilter.IndexFileNameFilter()",4,1,n/a,11,1,0,6,3
"org.apache.lucene.index.IndexFileNameFilter.accept(File,String)",9,7,n/a,22,2,2,14,9
"org.apache.lucene.index.IndexFileNameFilter.getFilter()",0,7,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexFileNameFilter.isCFSFile(String)",5,0,n/a,20,2,1,8,5
"org.apache.lucene.index.IndexFileNames.fileNameFromGeneration(String,String,long)",12,16,n/a,29,2,3,8,4
"org.apache.lucene.index.IndexFileNames.isDocStoreFile(String)",2,3,n/a,13,1,1,6,4
"org.apache.lucene.index.IndexFileNames.isSeparateNormsFile(String)",3,1,n/a,10,0,1,5,2
"org.apache.lucene.index.IndexFileNames.matchesExtension(String,String)",1,3,n/a,9,0,2,1,1
"org.apache.lucene.index.IndexFileNames.segmentFileName(String,String)",8,66,n/a,16,1,2,3,2
"org.apache.lucene.index.IndexFileNames.stripSegmentName(String)",3,7,n/a,21,1,1,6,3
"org.apache.lucene.index.IndexFormatTooNewException.IndexFormatTooNewException(DataInput,int,int,int)",2,6,n/a,4,0,4,1,1
"org.apache.lucene.index.IndexFormatTooNewException.IndexFormatTooNewException(String,int,int,int)",1,0,n/a,6,0,4,2,1
"org.apache.lucene.index.IndexFormatTooOldException.IndexFormatTooOldException(DataInput,String)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.index.IndexFormatTooOldException.IndexFormatTooOldException(DataInput,int,int,int)",2,2,n/a,4,0,4,1,1
"org.apache.lucene.index.IndexFormatTooOldException.IndexFormatTooOldException(String,String)",1,0,n/a,6,0,2,2,1
"org.apache.lucene.index.IndexFormatTooOldException.IndexFormatTooOldException(String,int,int,int)",1,0,n/a,7,0,4,2,1
"org.apache.lucene.index.IndexNotFoundException.IndexNotFoundException(String)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.index.IndexReader.IndexReader()",1,8,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexReader.ReaderClosedListener.onClose(IndexReader)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexReader.acquireWriteLock()",0,3,n/a,8,0,0,0,1
"org.apache.lucene.index.IndexReader.addReaderClosedListener(ReaderClosedListener)",2,2,n/a,8,0,1,2,1
"org.apache.lucene.index.IndexReader.clone()",1,4,n/a,21,0,0,1,1
"org.apache.lucene.index.IndexReader.clone(boolean)",1,1,n/a,12,0,1,1,1
"org.apache.lucene.index.IndexReader.close()",1,209,n/a,12,1,0,3,2
"org.apache.lucene.index.IndexReader.commit()",1,5,n/a,14,0,0,1,1
"org.apache.lucene.index.IndexReader.commit(Map<String, String>)",1,7,n/a,16,0,1,2,1
"org.apache.lucene.index.IndexReader.decRef()",7,35,n/a,31,3,0,13,4
"org.apache.lucene.index.IndexReader.deleteDocument(int)",3,25,n/a,24,0,1,4,1
"org.apache.lucene.index.IndexReader.deleteDocuments(Term)",6,4,n/a,35,2,1,11,3
"org.apache.lucene.index.IndexReader.directory()",2,13,n/a,11,0,0,2,1
"org.apache.lucene.index.IndexReader.doClose()",n/a,1,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.doCommit(Map<String, String>)",n/a,1,7,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexReader.doDelete(int)",n/a,1,10,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexReader.doOpenIfChanged()",1,3,n/a,9,0,0,1,1
"org.apache.lucene.index.IndexReader.doOpenIfChanged(IndexCommit)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.index.IndexReader.doOpenIfChanged(IndexWriter,boolean)",1,2,n/a,9,0,2,1,1
"org.apache.lucene.index.IndexReader.doOpenIfChanged(boolean)",1,1,n/a,12,0,1,1,1
"org.apache.lucene.index.IndexReader.doSetNorm(int,String,byte)",n/a,2,9,n/a,n/a,3,n/a,n/a
"org.apache.lucene.index.IndexReader.doUndeleteAll()",n/a,1,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.docFreq(Term)",n/a,28,8,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexReader.document(int)",5,45,n/a,20,1,1,4,3
"org.apache.lucene.index.IndexReader.document(int,FieldSelector)",n/a,20,10,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.IndexReader.ensureOpen()",2,121,n/a,8,1,0,2,2
"org.apache.lucene.index.IndexReader.flush()",2,1,n/a,10,0,0,2,1
"org.apache.lucene.index.IndexReader.flush(Map<String, String>)",2,1,n/a,13,0,1,2,1
"org.apache.lucene.index.IndexReader.getCommitUserData()",1,2,n/a,13,0,0,1,1
"org.apache.lucene.index.IndexReader.getCommitUserData(Directory)",3,0,n/a,22,0,1,3,1
"org.apache.lucene.index.IndexReader.getCoreCacheKey()",0,8,n/a,6,0,0,1,1
"org.apache.lucene.index.IndexReader.getCurrentVersion(Directory)",1,0,n/a,15,0,1,1,1
"org.apache.lucene.index.IndexReader.getDeletesCacheKey()",0,3,n/a,5,0,0,1,1
"org.apache.lucene.index.IndexReader.getFieldInfos()",n/a,4,10,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.getIndexCommit()",1,12,n/a,11,0,0,1,1
"org.apache.lucene.index.IndexReader.getRefCount()",1,7,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexReader.getSequentialSubReaders()",1,24,n/a,19,0,0,2,1
"org.apache.lucene.index.IndexReader.getTermFreqVector(int,String)",n/a,32,8,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.IndexReader.getTermFreqVector(int,String,TermVectorMapper)",n/a,7,8,n/a,n/a,3,n/a,n/a
"org.apache.lucene.index.IndexReader.getTermFreqVector(int,TermVectorMapper)",n/a,3,8,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.IndexReader.getTermFreqVectors(int)",n/a,8,10,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexReader.getTermInfosIndexDivisor()",1,2,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexReader.getUniqueTermCount()",1,1,n/a,15,0,0,1,1
"org.apache.lucene.index.IndexReader.getVersion()",1,10,n/a,16,0,0,1,1
"org.apache.lucene.index.IndexReader.hasDeletions()",n/a,28,10,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.hasNorms(String)",2,8,n/a,7,0,1,2,1
"org.apache.lucene.index.IndexReader.incRef()",2,15,n/a,19,0,0,2,1
"org.apache.lucene.index.IndexReader.indexExists(Directory)",2,11,n/a,14,1,1,4,2
"org.apache.lucene.index.IndexReader.isCurrent()",1,15,n/a,30,0,0,1,1
"org.apache.lucene.index.IndexReader.isDeleted(int)",n/a,33,12,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexReader.isOptimized()",1,3,n/a,6,0,0,1,1
"org.apache.lucene.index.IndexReader.lastModified(Directory)",5,2,n/a,4,2,1,2,1
"org.apache.lucene.index.IndexReader.listCommits(Directory)",1,6,n/a,18,0,1,1,1
"org.apache.lucene.index.IndexReader.maxDoc()",n/a,137,8,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.norms(String)",n/a,29,9,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexReader.norms(String,byte[],int)",n/a,12,9,n/a,n/a,3,n/a,n/a
"org.apache.lucene.index.IndexReader.notifyReaderClosedListeners()",1,1,n/a,7,2,0,3,2
"org.apache.lucene.index.IndexReader.numDeletedDocs()",2,14,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexReader.numDocs()",n/a,83,10,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.open(Directory)",1,52,n/a,9,0,1,1,1
"org.apache.lucene.index.IndexReader.open(Directory,IndexDeletionPolicy,boolean)",1,1,n/a,20,0,3,1,1
"org.apache.lucene.index.IndexReader.open(Directory,IndexDeletionPolicy,boolean,int)",1,1,n/a,30,0,4,1,1
"org.apache.lucene.index.IndexReader.open(Directory,boolean)",1,91,n/a,16,0,2,1,1
"org.apache.lucene.index.IndexReader.open(Directory,int)",1,1,n/a,19,0,2,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit)",2,2,n/a,9,0,1,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit,IndexDeletionPolicy,boolean)",2,1,n/a,22,0,3,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit,IndexDeletionPolicy,boolean,int)",2,0,n/a,35,0,4,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit,boolean)",2,1,n/a,16,0,2,1,1
"org.apache.lucene.index.IndexReader.open(IndexCommit,int)",2,1,n/a,19,0,2,1,1
"org.apache.lucene.index.IndexReader.open(IndexWriter,boolean)",1,9,n/a,22,0,2,1,1
"org.apache.lucene.index.IndexReader.openIfChanged(IndexReader)",2,23,n/a,43,2,1,8,3
"org.apache.lucene.index.IndexReader.openIfChanged(IndexReader,IndexCommit)",2,3,n/a,23,2,2,8,3
"org.apache.lucene.index.IndexReader.openIfChanged(IndexReader,IndexWriter,boolean)",2,5,n/a,75,2,3,8,3
"org.apache.lucene.index.IndexReader.openIfChanged(IndexReader,boolean)",2,2,n/a,25,2,2,8,3
"org.apache.lucene.index.IndexReader.removeReaderClosedListener(ReaderClosedListener)",2,0,n/a,7,0,1,2,1
"org.apache.lucene.index.IndexReader.reopen()",1,6,n/a,55,1,0,4,2
"org.apache.lucene.index.IndexReader.reopen(IndexCommit)",1,2,n/a,17,1,1,4,2
"org.apache.lucene.index.IndexReader.reopen(IndexWriter,boolean)",1,1,n/a,78,1,2,4,2
"org.apache.lucene.index.IndexReader.reopen(boolean)",1,2,n/a,16,1,1,4,2
"org.apache.lucene.index.IndexReader.setNorm(int,String,byte)",3,8,n/a,30,0,3,4,1
"org.apache.lucene.index.IndexReader.setNorm(int,String,float)",4,0,n/a,22,0,3,2,1
"org.apache.lucene.index.IndexReader.termDocs()",n/a,28,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.termDocs(Term)",3,40,n/a,19,0,1,4,1
"org.apache.lucene.index.IndexReader.termPositions()",n/a,10,12,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.termPositions(Term)",3,13,n/a,23,0,1,4,1
"org.apache.lucene.index.IndexReader.terms()",n/a,13,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.IndexReader.terms(Term)",n/a,59,9,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexReader.toString()",12,0,n/a,19,2,0,14,5
"org.apache.lucene.index.IndexReader.tryIncRef()",2,4,n/a,32,2,0,5,3
"org.apache.lucene.index.IndexReader.undeleteAll()",3,8,n/a,28,0,0,4,1
"org.apache.lucene.index.IndexSorter.DocScore.compareTo(DocScore)",0,0,n/a,7,1,1,3,3
"org.apache.lucene.index.IndexSorter.DocScore.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexSorter.IndexSorter()",0,2,n/a,2,0,0,0,1
"org.apache.lucene.index.IndexSorter.PostingMap.compareTo(PostingMap)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.SortedTermPositions(TermPositions,int[])",2,1,n/a,9,1,2,5,2
"org.apache.lucene.index.IndexSorter.SortedTermPositions.close()",1,52,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.doc()",0,116,n/a,1,0,0,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.freq()",0,54,n/a,1,0,0,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.getPayload(byte[],int)",0,12,n/a,3,0,2,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.getPayloadLength()",0,14,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.isPayloadAvailable()",0,9,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.next()",2,96,n/a,10,1,0,7,2
"org.apache.lucene.index.IndexSorter.SortedTermPositions.nextPosition()",1,26,n/a,5,0,0,3,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.read(int[],int[])",1,10,n/a,3,0,2,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.seek(Term)",1,22,n/a,3,0,1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions.seek(TermEnum)",15,19,n/a,34,2,1,30,5
"org.apache.lucene.index.IndexSorter.SortedTermPositions.skipTo(int)",1,40,n/a,3,0,1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.SortingReader(IndexReader,int[])",2,1,n/a,13,2,2,9,3
"org.apache.lucene.index.IndexSorter.SortingReader.doDelete(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.doSetNorm(int,String,byte)",1,2,n/a,4,0,3,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.document(int,FieldSelector)",1,21,n/a,5,0,2,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.getFieldInfos()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.getSequentialSubReaders()",0,25,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.getTermFreqVectors(int)",1,10,n/a,5,0,1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.isDeleted(int)",0,33,n/a,4,0,1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.norms(String)",1,30,n/a,4,0,1,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.norms(String,byte[],int)",1,12,n/a,12,2,3,7,3
"org.apache.lucene.index.IndexSorter.SortingReader.termDocs()",1,28,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexSorter.SortingReader.termPositions()",2,11,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexSorter.main(String[])",11,0,n/a,21,1,1,16,4
"org.apache.lucene.index.IndexSorter.oldToNew(IndexReader,String)",8,1,n/a,29,3,2,25,5
"org.apache.lucene.index.IndexSorter.sort(Directory,Directory,String)",12,2,n/a,13,0,3,10,1
"org.apache.lucene.index.IndexSplitter.IndexSplitter(File)",3,3,n/a,6,0,1,4,1
"org.apache.lucene.index.IndexSplitter.copyFile(File,File)",6,1,n/a,10,1,2,7,2
"org.apache.lucene.index.IndexSplitter.getIdx(String)",3,1,n/a,7,1,1,6,3
"org.apache.lucene.index.IndexSplitter.getInfo(String)",4,1,n/a,7,1,1,6,3
"org.apache.lucene.index.IndexSplitter.listSegments()",6,1,n/a,8,1,0,7,2
"org.apache.lucene.index.IndexSplitter.main(String[])",20,2,n/a,35,2,1,25,7
"org.apache.lucene.index.IndexSplitter.remove(String[])",4,1,n/a,8,1,1,5,2
"org.apache.lucene.index.IndexSplitter.split(File,String[])",11,3,n/a,20,2,2,14,3
"org.apache.lucene.index.IndexUpgrader.IndexUpgrader(Directory,IndexWriterConfig,PrintStream,boolean)",0,2,n/a,9,0,4,4,1
"org.apache.lucene.index.IndexUpgrader.IndexUpgrader(Directory,Version)",2,0,n/a,5,0,2,1,1
"org.apache.lucene.index.IndexUpgrader.IndexUpgrader(Directory,Version,PrintStream,boolean)",2,2,n/a,6,0,4,1,1
"org.apache.lucene.index.IndexUpgrader.main(String[])",13,0,n/a,38,3,1,28,9
"org.apache.lucene.index.IndexUpgrader.printUsage()",14,2,n/a,14,0,0,10,1
"org.apache.lucene.index.IndexUpgrader.upgrade()",18,2,n/a,23,2,0,16,4
"org.apache.lucene.index.IndexWriter.FlushControl.clearDeletes()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.clearFlushPending()",2,4,n/a,9,1,0,6,2
"org.apache.lucene.index.IndexWriter.FlushControl.flushByRAMUsage(String)",7,3,n/a,18,3,1,10,4
"org.apache.lucene.index.IndexWriter.FlushControl.getFlushDeletes()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.getFlushPending()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.setFlushPending(String,boolean)",3,4,n/a,20,4,2,11,8
"org.apache.lucene.index.IndexWriter.FlushControl.setFlushPendingNoWait(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.waitUpdate(int,int)",1,5,n/a,3,0,2,1,1
"org.apache.lucene.index.IndexWriter.FlushControl.waitUpdate(int,int,boolean)",7,2,n/a,29,2,3,16,8
"org.apache.lucene.index.IndexWriter.IndexReaderWarmer.warm(IndexReader)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength)",5,0,n/a,25,0,4,2,1
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit)",7,0,n/a,40,0,5,2,1
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,MaxFieldLength)",4,2,n/a,25,0,3,2,1
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength)",6,0,n/a,32,0,5,2,2
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,Analyzer,boolean,MaxFieldLength)",5,4,n/a,30,0,4,2,2
"org.apache.lucene.index.IndexWriter.IndexWriter(Directory,IndexWriterConfig)",40,110,n/a,131,3,2,60,14
"org.apache.lucene.index.IndexWriter.MaxFieldLength.MaxFieldLength(String,int)",0,3,n/a,10,0,2,2,1
"org.apache.lucene.index.IndexWriter.MaxFieldLength.MaxFieldLength(int)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.index.IndexWriter.MaxFieldLength.getLimit()",0,7,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexWriter.MaxFieldLength.toString()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.index.IndexWriter.ReaderPool.clear(List<SegmentInfo>)",3,2,n/a,15,3,1,7,5
"org.apache.lucene.index.IndexWriter.ReaderPool.close()",9,1,n/a,24,2,0,9,3
"org.apache.lucene.index.IndexWriter.ReaderPool.commit(SegmentInfos)",5,1,n/a,20,2,1,7,4
"org.apache.lucene.index.IndexWriter.ReaderPool.drop(List<SegmentInfo>)",1,1,n/a,5,1,1,2,2
"org.apache.lucene.index.IndexWriter.ReaderPool.drop(SegmentInfo)",3,3,n/a,8,1,1,5,2
"org.apache.lucene.index.IndexWriter.ReaderPool.dropAll()",3,1,n/a,10,1,0,4,2
"org.apache.lucene.index.IndexWriter.ReaderPool.get(SegmentInfo,boolean)",2,2,n/a,11,0,2,1,1
"org.apache.lucene.index.IndexWriter.ReaderPool.get(SegmentInfo,boolean,int,int)",7,4,n/a,46,2,4,14,8
"org.apache.lucene.index.IndexWriter.ReaderPool.getIfExists(SegmentInfo)",2,2,n/a,8,1,1,4,2
"org.apache.lucene.index.IndexWriter.ReaderPool.getReadOnlyClone(SegmentInfo,boolean,int)",3,1,n/a,13,1,3,4,1
"org.apache.lucene.index.IndexWriter.ReaderPool.infoIsLive(SegmentInfo)",2,4,n/a,7,0,1,4,1
"org.apache.lucene.index.IndexWriter.ReaderPool.mapToLive(SegmentInfo)",2,0,n/a,7,1,1,4,2
"org.apache.lucene.index.IndexWriter.ReaderPool.release(SegmentReader)",1,9,n/a,12,0,1,1,1
"org.apache.lucene.index.IndexWriter.ReaderPool.release(SegmentReader,boolean)",10,2,n/a,34,1,2,11,7
"org.apache.lucene.index.IndexWriter._mergeInit(OneMerge)",27,1,n/a,73,3,1,44,17
"org.apache.lucene.index.IndexWriter.addDocument(Document)",1,111,n/a,47,0,1,1,1
"org.apache.lucene.index.IndexWriter.addDocument(Document,Analyzer)",5,6,n/a,35,2,2,12,5
"org.apache.lucene.index.IndexWriter.addDocuments(Collection<Document>)",1,9,n/a,38,0,1,1,1
"org.apache.lucene.index.IndexWriter.addDocuments(Collection<Document>,Analyzer)",1,2,n/a,15,0,2,1,1
"org.apache.lucene.index.IndexWriter.addIndexes(Directory...)",21,8,n/a,82,4,1,28,7
"org.apache.lucene.index.IndexWriter.addIndexes(IndexReader...)",30,15,n/a,81,3,1,32,7
"org.apache.lucene.index.IndexWriter.addIndexesNoOptimize(Directory...)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.index.IndexWriter.addMergeException(OneMerge)",3,1,n/a,5,0,1,3,3
"org.apache.lucene.index.IndexWriter.checkpoint()",2,10,n/a,10,0,0,3,1
"org.apache.lucene.index.IndexWriter.close()",1,112,n/a,45,0,0,1,1
"org.apache.lucene.index.IndexWriter.close(boolean)",3,5,n/a,35,1,1,4,3
"org.apache.lucene.index.IndexWriter.closeInternal(boolean)",18,2,n/a,56,3,1,37,12
"org.apache.lucene.index.IndexWriter.closeMergeReaders(OneMerge,boolean)",16,2,n/a,41,4,2,30,16
"org.apache.lucene.index.IndexWriter.commit()",1,63,n/a,33,0,0,1,1
"org.apache.lucene.index.IndexWriter.commit(Map<String, String>)",2,15,n/a,13,0,1,2,1
"org.apache.lucene.index.IndexWriter.commitInternal(Map<String, String>)",6,2,n/a,19,3,1,12,6
"org.apache.lucene.index.IndexWriter.commitMerge(OneMerge,SegmentReader)",24,1,n/a,57,2,2,31,15
"org.apache.lucene.index.IndexWriter.commitMergedDeletes(OneMerge,SegmentReader)",25,1,n/a,78,6,2,42,13
"org.apache.lucene.index.IndexWriter.copySegmentAsIs(SegmentInfo,String,Map<String, String>,Set<String>)",15,1,n/a,42,3,4,21,6
"org.apache.lucene.index.IndexWriter.deleteAll()",10,2,n/a,41,2,0,13,3
"org.apache.lucene.index.IndexWriter.deleteDocuments(Query)",4,4,n/a,21,2,1,5,3
"org.apache.lucene.index.IndexWriter.deleteDocuments(Query...)",4,1,n/a,23,2,1,5,3
"org.apache.lucene.index.IndexWriter.deleteDocuments(Term)",4,10,n/a,21,2,1,5,3
"org.apache.lucene.index.IndexWriter.deleteDocuments(Term...)",4,1,n/a,23,2,1,5,3
"org.apache.lucene.index.IndexWriter.deletePendingFiles()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.deleteUnusedFiles()",3,2,n/a,30,0,0,3,1
"org.apache.lucene.index.IndexWriter.doAfterFlush()",0,2,n/a,6,0,0,0,1
"org.apache.lucene.index.IndexWriter.doBeforeFlush()",0,1,n/a,5,0,0,0,1
"org.apache.lucene.index.IndexWriter.doFlush(boolean)",39,2,n/a,90,6,1,50,22
"org.apache.lucene.index.IndexWriter.doWait()",2,5,n/a,13,1,0,3,2
"org.apache.lucene.index.IndexWriter.ensureOpen()",1,49,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexWriter.ensureOpen(boolean)",1,11,n/a,11,1,1,2,4
"org.apache.lucene.index.IndexWriter.ensureValidMerge(OneMerge)",3,1,n/a,7,2,1,3,3
"org.apache.lucene.index.IndexWriter.expungeDeletes()",1,0,n/a,11,0,0,1,1
"org.apache.lucene.index.IndexWriter.expungeDeletes(boolean)",1,1,n/a,11,0,1,1,1
"org.apache.lucene.index.IndexWriter.filesExist(SegmentInfos)",3,1,n/a,14,1,1,5,2
"org.apache.lucene.index.IndexWriter.finishCommit()",13,2,n/a,29,3,0,20,6
"org.apache.lucene.index.IndexWriter.finishMerges(boolean)",16,4,n/a,40,2,1,22,9
"org.apache.lucene.index.IndexWriter.flush(boolean,boolean)",3,14,n/a,20,1,2,3,3
"org.apache.lucene.index.IndexWriter.flush(boolean,boolean,boolean)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.index.IndexWriter.forceMerge(int)",1,20,n/a,67,0,1,1,1
"org.apache.lucene.index.IndexWriter.forceMerge(int,boolean)",23,4,n/a,74,6,2,41,14
"org.apache.lucene.index.IndexWriter.forceMergeDeletes()",1,3,n/a,26,0,0,1,1
"org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean)",19,3,n/a,64,5,1,35,13
"org.apache.lucene.index.IndexWriter.getAnalyzer()",1,2,n/a,5,0,0,2,1
"org.apache.lucene.index.IndexWriter.getBufferedDeleteTermsSize()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.getConfig()",1,10,n/a,15,0,0,2,1
"org.apache.lucene.index.IndexWriter.getCurrentFieldInfos()",11,1,n/a,24,4,0,14,5
"org.apache.lucene.index.IndexWriter.getDefaultInfoStream()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexWriter.getDefaultWriteLockTimeout()",1,0,n/a,10,0,0,1,1
"org.apache.lucene.index.IndexWriter.getDirectory()",1,6,n/a,6,0,0,2,1
"org.apache.lucene.index.IndexWriter.getDocCount(int)",2,0,n/a,8,1,1,3,3
"org.apache.lucene.index.IndexWriter.getFieldInfos(SegmentInfo)",7,2,n/a,15,2,1,8,4
"org.apache.lucene.index.IndexWriter.getFlushCount()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.getFlushDeletesCount()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.getInfoStream()",1,2,n/a,8,0,0,2,1
"org.apache.lucene.index.IndexWriter.getKeepFullyDeletedSegments()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexWriter.getLogMergePolicy()",1,6,n/a,10,0,0,3,2
"org.apache.lucene.index.IndexWriter.getMaxBufferedDeleteTerms()",2,0,n/a,11,0,0,2,1
"org.apache.lucene.index.IndexWriter.getMaxBufferedDocs()",2,0,n/a,11,0,0,2,1
"org.apache.lucene.index.IndexWriter.getMaxFieldLength()",1,0,n/a,11,0,0,2,1
"org.apache.lucene.index.IndexWriter.getMaxMergeDocs()",2,0,n/a,16,0,0,1,1
"org.apache.lucene.index.IndexWriter.getMergeFactor()",2,0,n/a,17,0,0,1,1
"org.apache.lucene.index.IndexWriter.getMergePolicy()",1,0,n/a,11,0,0,2,1
"org.apache.lucene.index.IndexWriter.getMergeScheduler()",1,0,n/a,11,0,0,2,1
"org.apache.lucene.index.IndexWriter.getMergedSegmentWarmer()",1,0,n/a,9,0,0,1,1
"org.apache.lucene.index.IndexWriter.getMergingSegments()",0,4,n/a,11,0,0,1,1
"org.apache.lucene.index.IndexWriter.getNextMerge()",3,4,n/a,16,1,0,5,2
"org.apache.lucene.index.IndexWriter.getNumBufferedDeleteTerms()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.getNumBufferedDocuments()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.getPayloadProcessorProvider()",1,0,n/a,8,0,0,2,1
"org.apache.lucene.index.IndexWriter.getRAMBufferSizeMB()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexWriter.getReader()",2,10,n/a,66,0,0,1,1
"org.apache.lucene.index.IndexWriter.getReader(boolean)",2,3,n/a,3,0,1,1,1
"org.apache.lucene.index.IndexWriter.getReader(int)",1,0,n/a,28,0,1,1,1
"org.apache.lucene.index.IndexWriter.getReader(int,boolean)",10,3,n/a,27,2,2,15,4
"org.apache.lucene.index.IndexWriter.getReaderTermsIndexDivisor()",2,0,n/a,9,0,0,2,1
"org.apache.lucene.index.IndexWriter.getSegmentCount()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.getSimilarity()",1,0,n/a,10,0,0,2,1
"org.apache.lucene.index.IndexWriter.getTermIndexInterval()",2,0,n/a,11,0,0,2,1
"org.apache.lucene.index.IndexWriter.getUseCompoundFile()",2,0,n/a,19,0,0,1,1
"org.apache.lucene.index.IndexWriter.getWriteLockTimeout()",1,0,n/a,10,0,0,2,1
"org.apache.lucene.index.IndexWriter.handleMergeException(Throwable,OneMerge)",5,3,n/a,28,1,2,14,7
"org.apache.lucene.index.IndexWriter.handleOOM(OutOfMemoryError,String)",1,16,n/a,7,1,2,4,2
"org.apache.lucene.index.IndexWriter.hasDeletions()",4,0,n/a,15,2,0,9,5
"org.apache.lucene.index.IndexWriter.isClosed()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.IndexWriter.isLocked(Directory)",2,1,n/a,9,0,1,1,1
"org.apache.lucene.index.IndexWriter.keepFullyDeletedSegments()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.index.IndexWriter.maxDoc()",3,2,n/a,14,0,0,7,2
"org.apache.lucene.index.IndexWriter.maxNumSegmentsMergesPending()",0,1,n/a,13,1,0,7,5
"org.apache.lucene.index.IndexWriter.maybeMerge()",1,3,n/a,17,0,0,1,1
"org.apache.lucene.index.IndexWriter.maybeMerge(int)",3,2,n/a,5,0,1,3,1
"org.apache.lucene.index.IndexWriter.merge(OneMerge)",17,3,n/a,48,4,1,24,15
"org.apache.lucene.index.IndexWriter.mergeFinish(OneMerge)",4,4,n/a,20,2,1,8,3
"org.apache.lucene.index.IndexWriter.mergeInit(OneMerge)",3,3,n/a,16,3,1,8,3
"org.apache.lucene.index.IndexWriter.mergeMiddle(OneMerge)",60,1,n/a,159,5,1,87,22
"org.apache.lucene.index.IndexWriter.mergeSuccess(OneMerge)",0,1,n/a,3,0,1,0,1
"org.apache.lucene.index.IndexWriter.message(String)",4,93,n/a,9,0,1,2,2
"org.apache.lucene.index.IndexWriter.messageState()",3,2,n/a,6,0,0,1,1
"org.apache.lucene.index.IndexWriter.newSegmentName()",2,4,n/a,14,1,0,4,1
"org.apache.lucene.index.IndexWriter.newestSegment()",3,0,n/a,4,0,0,1,2
"org.apache.lucene.index.IndexWriter.noDupDirs(Directory...)",5,1,n/a,10,1,1,7,4
"org.apache.lucene.index.IndexWriter.nrtIsCurrent(SegmentInfos)",3,2,n/a,5,0,1,2,3
"org.apache.lucene.index.IndexWriter.numDeletedDocs(SegmentInfo)",5,9,n/a,20,2,1,8,3
"org.apache.lucene.index.IndexWriter.numDocs()",3,2,n/a,18,1,0,8,3
"org.apache.lucene.index.IndexWriter.numRamDocs()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.index.IndexWriter.optimize()",1,10,n/a,11,0,0,1,1
"org.apache.lucene.index.IndexWriter.optimize(boolean)",1,0,n/a,11,0,1,1,1
"org.apache.lucene.index.IndexWriter.optimize(int)",1,2,n/a,11,0,1,1,1
"org.apache.lucene.index.IndexWriter.prepareCommit()",2,9,n/a,11,0,0,2,1
"org.apache.lucene.index.IndexWriter.prepareCommit(Map<String, String>)",16,9,n/a,87,3,1,35,9
"org.apache.lucene.index.IndexWriter.pushMaxBufferedDocs()",5,2,n/a,19,3,0,9,5
"org.apache.lucene.index.IndexWriter.ramSizeInBytes()",3,0,n/a,7,0,0,2,1
"org.apache.lucene.index.IndexWriter.registerMerge(OneMerge)",14,2,n/a,47,2,1,27,10
"org.apache.lucene.index.IndexWriter.resetMergeExceptions()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.index.IndexWriter.rollback()",3,14,n/a,17,0,0,3,2
"org.apache.lucene.index.IndexWriter.rollbackInternal()",21,2,n/a,60,3,0,36,8
"org.apache.lucene.index.IndexWriter.segString()",1,10,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.segString(Iterable<SegmentInfo>)",6,0,n/a,11,2,1,6,3
"org.apache.lucene.index.IndexWriter.segString(SegmentInfo)",9,3,n/a,20,3,1,11,4
"org.apache.lucene.index.IndexWriter.setDefaultInfoStream(PrintStream)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.index.IndexWriter.setDefaultWriteLockTimeout(long)",1,3,n/a,9,0,1,1,1
"org.apache.lucene.index.IndexWriter.setDiagnostics(SegmentInfo,String)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.index.IndexWriter.setDiagnostics(SegmentInfo,String,Map<String, String>)",10,2,n/a,14,1,3,11,2
"org.apache.lucene.index.IndexWriter.setInfoStream(PrintStream)",5,12,n/a,13,0,1,7,2
"org.apache.lucene.index.IndexWriter.setMaxBufferedDeleteTerms(int)",3,4,n/a,21,0,1,4,2
"org.apache.lucene.index.IndexWriter.setMaxBufferedDocs(int)",4,2,n/a,31,1,1,5,2
"org.apache.lucene.index.IndexWriter.setMaxFieldLength(int)",3,12,n/a,30,0,1,5,2
"org.apache.lucene.index.IndexWriter.setMaxMergeDocs(int)",2,1,n/a,25,0,1,1,1
"org.apache.lucene.index.IndexWriter.setMergeFactor(int)",2,1,n/a,20,0,1,1,1
"org.apache.lucene.index.IndexWriter.setMergePolicy(MergePolicy)",7,1,n/a,21,0,1,11,4
"org.apache.lucene.index.IndexWriter.setMergeScheduler(MergeScheduler)",6,1,n/a,20,1,1,10,4
"org.apache.lucene.index.IndexWriter.setMergedSegmentWarmer(IndexReaderWarmer)",1,1,n/a,11,0,1,1,1
"org.apache.lucene.index.IndexWriter.setPayloadProcessorProvider(PayloadProcessorProvider)",1,1,n/a,22,0,1,2,1
"org.apache.lucene.index.IndexWriter.setRAMBufferSizeMB(double)",2,5,n/a,48,1,1,3,2
"org.apache.lucene.index.IndexWriter.setReaderTermsIndexDivisor(int)",3,0,n/a,12,1,1,4,2
"org.apache.lucene.index.IndexWriter.setSimilarity(Similarity)",3,3,n/a,14,0,1,4,1
"org.apache.lucene.index.IndexWriter.setTermIndexInterval(int)",2,5,n/a,27,0,1,2,1
"org.apache.lucene.index.IndexWriter.setUseCompoundFile(boolean)",2,1,n/a,18,0,1,1,1
"org.apache.lucene.index.IndexWriter.setWriteLockTimeout(long)",2,1,n/a,13,0,1,3,1
"org.apache.lucene.index.IndexWriter.shouldClose()",1,2,n/a,19,3,0,7,4
"org.apache.lucene.index.IndexWriter.startCommit(SegmentInfos,Map<String, String>)",23,1,n/a,76,5,2,43,11
"org.apache.lucene.index.IndexWriter.testPoint(String)",0,16,n/a,14,0,1,1,1
"org.apache.lucene.index.IndexWriter.unlock(Directory)",2,3,n/a,10,0,1,1,1
"org.apache.lucene.index.IndexWriter.updateDocument(Term,Document)",3,5,n/a,21,0,2,2,1
"org.apache.lucene.index.IndexWriter.updateDocument(Term,Document,Analyzer)",5,2,n/a,38,2,3,12,5
"org.apache.lucene.index.IndexWriter.updateDocuments(Term,Collection<Document>)",1,7,n/a,17,0,2,1,1
"org.apache.lucene.index.IndexWriter.updateDocuments(Term,Collection<Document>,Analyzer)",5,3,n/a,35,3,3,12,5
"org.apache.lucene.index.IndexWriter.updatePendingMerges(int)",8,2,n/a,30,3,1,22,9
"org.apache.lucene.index.IndexWriter.verbose()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriter.waitForMerges()",7,2,n/a,20,1,0,8,5
"org.apache.lucene.index.IndexWriterConfig.IndexWriterConfig(Version,Analyzer)",6,63,n/a,36,1,2,20,2
"org.apache.lucene.index.IndexWriterConfig.clone()",2,2,n/a,11,1,0,3,2
"org.apache.lucene.index.IndexWriterConfig.getAnalyzer()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getDefaultWriteLockTimeout()",0,2,n/a,9,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getIndexCommit()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getIndexDeletionPolicy()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getIndexingChain()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDeleteTerms()",0,3,n/a,9,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs()",0,6,n/a,9,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getMaxThreadStates()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getMergePolicy()",0,11,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getMergeScheduler()",0,3,n/a,7,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getMergedSegmentWarmer()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getOpenMode()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getRAMBufferSizeMB()",0,10,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getReaderPooling()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getReaderTermsIndexDivisor()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getSimilarity()",0,3,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getTermIndexInterval()",0,5,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.getWriteLockTimeout()",0,2,n/a,8,0,0,1,1
"org.apache.lucene.index.IndexWriterConfig.setDefaultWriteLockTimeout(long)",0,5,n/a,7,0,1,1,1
"org.apache.lucene.index.IndexWriterConfig.setIndexCommit(IndexCommit)",0,3,n/a,9,0,1,2,1
"org.apache.lucene.index.IndexWriterConfig.setIndexDeletionPolicy(IndexDeletionPolicy)",1,7,n/a,21,0,1,2,2
"org.apache.lucene.index.IndexWriterConfig.setIndexingChain(IndexingChain)",0,1,n/a,7,0,1,2,2
"org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDeleteTerms(int)",1,4,n/a,22,0,1,4,3
"org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)",2,8,n/a,35,0,1,6,5
"org.apache.lucene.index.IndexWriterConfig.setMaxThreadStates(int)",0,0,n/a,11,0,1,2,2
"org.apache.lucene.index.IndexWriterConfig.setMergePolicy(MergePolicy)",1,12,n/a,12,0,1,2,2
"org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(MergeScheduler)",1,6,n/a,12,0,1,2,2
"org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(IndexReaderWarmer)",0,5,n/a,7,0,1,2,1
"org.apache.lucene.index.IndexWriterConfig.setOpenMode(OpenMode)",0,32,n/a,7,0,1,2,1
"org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)",3,8,n/a,53,1,1,8,6
"org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean)",0,1,n/a,14,0,1,2,1
"org.apache.lucene.index.IndexWriterConfig.setReaderTermsIndexDivisor(int)",1,6,n/a,17,1,1,4,3
"org.apache.lucene.index.IndexWriterConfig.setSimilarity(Similarity)",1,3,n/a,13,0,1,2,2
"org.apache.lucene.index.IndexWriterConfig.setTermIndexInterval(int)",0,7,n/a,28,0,1,2,1
"org.apache.lucene.index.IndexWriterConfig.setWriteLockTimeout(long)",0,4,n/a,10,0,1,2,1
"org.apache.lucene.index.IndexWriterConfig.toString()",64,1,n/a,23,0,0,20,3
"org.apache.lucene.index.IntBlockPool.IntBlockPool(DocumentsWriter)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.IntBlockPool.nextBuffer()",2,2,n/a,11,1,0,8,2
"org.apache.lucene.index.IntBlockPool.reset()",1,1,n/a,12,1,0,7,3
"org.apache.lucene.index.InvertedDocConsumer.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumer.addThread(DocInverterPerThread)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumer.flush(Map<InvertedDocConsumerPerThread, Collection<InvertedDocConsumerPerField>>,SegmentWriteState)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumer.freeRAM()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumer.setFieldInfos(FieldInfos)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.InvertedDocConsumerPerField.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumerPerField.add()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumerPerField.finish()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumerPerField.start(Fieldable)",n/a,2,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumerPerField.start(Fieldable[],int)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumerPerThread.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumerPerThread.addField(DocInverterPerField,FieldInfo)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumerPerThread.finishDocument()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocConsumerPerThread.startDocument()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumer.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumer.addThread(DocInverterPerThread)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumer.flush(Map<InvertedDocEndConsumerPerThread, Collection<InvertedDocEndConsumerPerField>>,SegmentWriteState)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumer.setFieldInfos(FieldInfos)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumerPerField.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumerPerField.finish()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumerPerThread.abort()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumerPerThread.addField(DocInverterPerField,FieldInfo)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumerPerThread.finishDocument()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.InvertedDocEndConsumerPerThread.startDocument()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onCommit(List<? extends IndexCommit>)",3,7,n/a,11,1,1,5,2
"org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onInit(List<? extends IndexCommit>)",1,4,n/a,7,0,1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.LogByteSizeMergePolicy()",0,8,n/a,5,0,0,3,1
"org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMB()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMBForForcedMerge()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMBForOptimize()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.getMinMergeMB()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMB(double)",0,3,n/a,14,0,1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMBForForcedMerge(double)",0,3,n/a,8,0,1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMBForOptimize(double)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.setMinMergeMB(double)",0,1,n/a,12,0,1,1,1
"org.apache.lucene.index.LogByteSizeMergePolicy.size(SegmentInfo)",1,9,n/a,4,0,1,1,1
"org.apache.lucene.index.LogDocMergePolicy.LogDocMergePolicy()",0,2,n/a,7,0,0,3,1
"org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int)",0,2,n/a,12,0,1,1,1
"org.apache.lucene.index.LogDocMergePolicy.size(SegmentInfo)",1,9,n/a,4,0,1,1,1
"org.apache.lucene.index.LogMergePolicy.LogMergePolicy()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.index.LogMergePolicy.SegmentInfoAndLevel.SegmentInfoAndLevel(SegmentInfo,float,int)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.index.LogMergePolicy.SegmentInfoAndLevel.compareTo(SegmentInfoAndLevel)",0,0,n/a,9,0,1,5,3
"org.apache.lucene.index.LogMergePolicy.close()",0,4,n/a,2,0,0,0,1
"org.apache.lucene.index.LogMergePolicy.findForcedDeletesMerges(SegmentInfos)",25,3,n/a,49,3,1,33,12
"org.apache.lucene.index.LogMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",17,3,n/a,59,2,3,30,15
"org.apache.lucene.index.LogMergePolicy.findForcedMergesMaxNumSegments(SegmentInfos,int,int)",19,1,n/a,50,4,3,26,13
"org.apache.lucene.index.LogMergePolicy.findForcedMergesSizeLimit(SegmentInfos,int,int)",21,1,n/a,41,3,3,18,13
"org.apache.lucene.index.LogMergePolicy.findMerges(SegmentInfos)",44,5,n/a,116,4,1,80,27
"org.apache.lucene.index.LogMergePolicy.getCalibrateSizeByDeletes()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.index.LogMergePolicy.getMaxMergeDocs()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.index.LogMergePolicy.getMergeFactor()",0,9,n/a,6,0,0,1,1
"org.apache.lucene.index.LogMergePolicy.getNoCFSRatio()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.LogMergePolicy.getUseCompoundFile()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.index.LogMergePolicy.isMerged(SegmentInfo)",5,6,n/a,13,0,1,4,5
"org.apache.lucene.index.LogMergePolicy.isMerged(SegmentInfos,int,Map<SegmentInfo, Boolean>)",4,2,n/a,17,2,3,14,7
"org.apache.lucene.index.LogMergePolicy.message(String)",3,14,n/a,4,0,1,2,2
"org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean)",0,0,n/a,5,0,1,1,1
"org.apache.lucene.index.LogMergePolicy.setMaxMergeDocs(int)",0,6,n/a,18,0,1,1,1
"org.apache.lucene.index.LogMergePolicy.setMergeFactor(int)",1,9,n/a,14,0,1,3,2
"org.apache.lucene.index.LogMergePolicy.setNoCFSRatio(double)",1,5,n/a,11,1,1,3,3
"org.apache.lucene.index.LogMergePolicy.setUseCompoundFile(boolean)",0,5,n/a,5,0,1,1,1
"org.apache.lucene.index.LogMergePolicy.size(SegmentInfo)",n/a,9,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.LogMergePolicy.sizeBytes(SegmentInfo)",3,2,n/a,11,1,1,7,4
"org.apache.lucene.index.LogMergePolicy.sizeDocs(SegmentInfo)",2,4,n/a,9,1,1,5,2
"org.apache.lucene.index.LogMergePolicy.toString()",28,0,n/a,14,0,0,11,1
"org.apache.lucene.index.LogMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",2,4,n/a,16,1,2,10,4
"org.apache.lucene.index.LogMergePolicy.verbose()",2,15,n/a,4,0,0,2,2
"org.apache.lucene.index.MergeDocIDRemapper.MergeDocIDRemapper(SegmentInfos,int[][],int[],OneMerge,int)",9,0,n/a,36,1,5,28,5
"org.apache.lucene.index.MergeDocIDRemapper.remap(int)",0,0,n/a,34,4,1,21,10
"org.apache.lucene.index.MergePolicy.MergeAbortedException.MergeAbortedException()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.index.MergePolicy.MergeAbortedException.MergeAbortedException(String)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.index.MergePolicy.MergeException.MergeException(String,Directory)",1,2,n/a,4,0,2,2,1
"org.apache.lucene.index.MergePolicy.MergeException.MergeException(Throwable,Directory)",1,2,n/a,4,0,2,2,1
"org.apache.lucene.index.MergePolicy.MergeException.getDirectory()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.index.MergePolicy.MergePolicy()",1,3,n/a,8,0,0,1,1
"org.apache.lucene.index.MergePolicy.MergeSpecification.add(OneMerge)",1,22,n/a,3,0,1,1,1
"org.apache.lucene.index.MergePolicy.MergeSpecification.segString(Directory)",10,0,n/a,8,0,1,8,2
"org.apache.lucene.index.MergePolicy.OneMerge.OneMerge(List<SegmentInfo>)",3,22,n/a,11,1,1,7,3
"org.apache.lucene.index.MergePolicy.OneMerge.abort()",1,3,n/a,7,0,0,2,1
"org.apache.lucene.index.MergePolicy.OneMerge.checkAborted(Directory)",6,3,n/a,17,2,1,8,5
"org.apache.lucene.index.MergePolicy.OneMerge.getException()",0,3,n/a,5,0,0,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.getPause()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.isAborted()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.segString(Directory)",11,17,n/a,16,1,1,15,6
"org.apache.lucene.index.MergePolicy.OneMerge.setException(Throwable)",0,2,n/a,5,0,1,1,1
"org.apache.lucene.index.MergePolicy.OneMerge.setPause(boolean)",1,1,n/a,7,1,1,3,2
"org.apache.lucene.index.MergePolicy.OneMerge.totalBytesSize()",1,0,n/a,11,1,0,4,2
"org.apache.lucene.index.MergePolicy.OneMerge.totalNumDocs()",0,0,n/a,11,1,0,4,2
"org.apache.lucene.index.MergePolicy.close()",n/a,4,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.MergePolicy.findForcedDeletesMerges(SegmentInfos)",n/a,2,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.MergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",n/a,3,5,n/a,n/a,3,n/a,n/a
"org.apache.lucene.index.MergePolicy.findMerges(SegmentInfos)",n/a,4,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.MergePolicy.setIndexWriter(IndexWriter)",1,5,n/a,10,0,1,1,1
"org.apache.lucene.index.MergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",n/a,4,4,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.MergeScheduler.close()",n/a,3,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.MergeScheduler.merge(IndexWriter)",n/a,3,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.MultiLevelSkipListReader.MultiLevelSkipListReader(IndexInput,int,int)",0,1,n/a,16,1,3,14,2
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.SkipBuffer(IndexInput,int)",3,1,n/a,6,0,2,4,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.close()",0,20,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.getFilePointer()",0,16,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.length()",0,21,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.readByte()",0,58,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.readBytes(byte[],int,int)",1,28,n/a,5,0,3,2,1
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer.seek(long)",0,33,n/a,4,0,1,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.close()",1,1,n/a,7,2,0,5,3
"org.apache.lucene.index.MultiLevelSkipListReader.getDoc()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.index.MultiLevelSkipListReader.init(long,int)",3,1,n/a,12,1,2,10,2
"org.apache.lucene.index.MultiLevelSkipListReader.loadNextSkip(int)",3,1,n/a,19,1,1,11,4
"org.apache.lucene.index.MultiLevelSkipListReader.loadSkipLevels()",12,1,n/a,30,3,0,18,7
"org.apache.lucene.index.MultiLevelSkipListReader.readSkipData(int,IndexInput)",n/a,2,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.MultiLevelSkipListReader.seekChild(int)",2,2,n/a,9,1,1,5,2
"org.apache.lucene.index.MultiLevelSkipListReader.setLastSkipData(int)",0,2,n/a,5,0,1,2,1
"org.apache.lucene.index.MultiLevelSkipListReader.skipTo(int)",4,5,n/a,30,3,1,14,9
"org.apache.lucene.index.MultiLevelSkipListWriter.MultiLevelSkipListWriter(int,int,int)",3,1,n/a,9,1,3,4,3
"org.apache.lucene.index.MultiLevelSkipListWriter.bufferSkip(int)",3,1,n/a,25,2,1,14,5
"org.apache.lucene.index.MultiLevelSkipListWriter.init()",1,1,n/a,6,1,0,5,2
"org.apache.lucene.index.MultiLevelSkipListWriter.resetSkip()",2,1,n/a,10,2,0,6,3
"org.apache.lucene.index.MultiLevelSkipListWriter.writeSkip(IndexOutput)",5,1,n/a,19,2,1,12,5
"org.apache.lucene.index.MultiLevelSkipListWriter.writeSkipData(int,IndexOutput)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.FakeDeleteAtomicIndexReader(IndexReader)",11,1,n/a,12,2,1,11,4
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.doDelete(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.doUndeleteAll()",3,1,n/a,11,1,0,3,2
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.getSequentialSubReaders()",0,25,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.hasDeletions()",2,28,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.isDeleted(int)",1,33,n/a,4,0,1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.numDocs()",2,84,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader.termPositions()",5,11,n/a,10,4,0,6,3
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteIndexReader.FakeDeleteIndexReader(IndexReader)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteIndexReader.initSubReaders(IndexReader)",7,1,n/a,4,2,1,4,1
"org.apache.lucene.index.MultiPassIndexSplitter.main(String[])",38,0,n/a,66,4,1,52,16
"org.apache.lucene.index.MultiPassIndexSplitter.split(IndexReader,Directory[],boolean)",1,0,n/a,16,0,3,1,1
"org.apache.lucene.index.MultiPassIndexSplitter.split(Version,IndexReader,Directory[],boolean)",17,5,n/a,58,4,4,34,12
"org.apache.lucene.index.MultiReader.MultiReader(IndexReader...)",1,3,n/a,10,0,1,1,1
"org.apache.lucene.index.MultiReader.MultiReader(IndexReader[],boolean)",3,1,n/a,19,2,2,8,3
"org.apache.lucene.index.MultiReader.MultiReader(IndexReader[],boolean[])",2,2,n/a,15,2,2,13,3
"org.apache.lucene.index.MultiReader.clone()",2,5,n/a,8,1,0,3,2
"org.apache.lucene.index.MultiReader.clone(boolean)",1,1,n/a,10,0,1,1,1
"org.apache.lucene.index.MultiReader.doClose()",2,1,n/a,17,3,0,12,6
"org.apache.lucene.index.MultiReader.doCommit(Map<String, String>)",1,1,n/a,6,0,1,4,2
"org.apache.lucene.index.MultiReader.doDelete(int)",2,1,n/a,8,0,1,4,1
"org.apache.lucene.index.MultiReader.doOpenIfChanged()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiReader.doOpenIfChanged(boolean)",1,1,n/a,10,0,1,1,1
"org.apache.lucene.index.MultiReader.doReopen(boolean)",6,2,n/a,54,5,1,34,12
"org.apache.lucene.index.MultiReader.doSetNorm(int,String,byte)",3,2,n/a,10,1,3,4,1
"org.apache.lucene.index.MultiReader.doUndeleteAll()",1,1,n/a,8,0,0,6,2
"org.apache.lucene.index.MultiReader.docFreq(Term)",2,28,n/a,8,0,1,7,2
"org.apache.lucene.index.MultiReader.document(int,FieldSelector)",3,20,n/a,7,0,2,3,1
"org.apache.lucene.index.MultiReader.getFieldInfos()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiReader.getSequentialSubReaders()",0,25,n/a,4,0,0,1,1
"org.apache.lucene.index.MultiReader.getTermFreqVector(int,String)",3,32,n/a,7,0,2,3,1
"org.apache.lucene.index.MultiReader.getTermFreqVector(int,String,TermVectorMapper)",3,7,n/a,6,0,3,3,1
"org.apache.lucene.index.MultiReader.getTermFreqVector(int,TermVectorMapper)",3,3,n/a,6,0,2,3,1
"org.apache.lucene.index.MultiReader.getTermFreqVectors(int)",3,8,n/a,6,0,1,3,1
"org.apache.lucene.index.MultiReader.getVersion()",1,10,n/a,7,0,0,1,1
"org.apache.lucene.index.MultiReader.hasDeletions()",1,28,n/a,5,0,0,2,1
"org.apache.lucene.index.MultiReader.hasNorms(String)",2,10,n/a,8,1,1,7,3
"org.apache.lucene.index.MultiReader.isCurrent()",2,15,n/a,14,2,0,7,3
"org.apache.lucene.index.MultiReader.isDeleted(int)",2,33,n/a,6,0,1,2,1
"org.apache.lucene.index.MultiReader.isOptimized()",1,3,n/a,7,0,0,2,1
"org.apache.lucene.index.MultiReader.maxDoc()",0,139,n/a,5,0,0,1,1
"org.apache.lucene.index.MultiReader.norms(String)",6,29,n/a,14,0,1,13,4
"org.apache.lucene.index.MultiReader.norms(String,byte[],int)",10,12,n/a,17,2,3,14,6
"org.apache.lucene.index.MultiReader.numDocs()",1,83,n/a,13,1,0,8,3
"org.apache.lucene.index.MultiReader.readerIndex(int)",1,8,n/a,3,0,1,1,1
"org.apache.lucene.index.MultiReader.termDocs()",3,28,n/a,10,1,0,4,2
"org.apache.lucene.index.MultiReader.termDocs(Term)",3,40,n/a,10,1,1,4,2
"org.apache.lucene.index.MultiReader.termPositions()",3,10,n/a,10,1,0,4,2
"org.apache.lucene.index.MultiReader.terms()",3,13,n/a,10,1,0,4,2
"org.apache.lucene.index.MultiReader.terms(Term)",3,59,n/a,10,1,1,4,2
"org.apache.lucene.index.MultipleTermPositions.IntQueue.add(int)",1,1,n/a,5,0,1,3,2
"org.apache.lucene.index.MultipleTermPositions.IntQueue.clear()",0,1,n/a,4,0,0,2,1
"org.apache.lucene.index.MultipleTermPositions.IntQueue.growArray()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.index.MultipleTermPositions.IntQueue.next()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.IntQueue.size()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.IntQueue.sort()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.MultipleTermPositions(IndexReader,Term[])",5,1,n/a,12,0,2,7,2
"org.apache.lucene.index.MultipleTermPositions.TermPositionsQueue.TermPositionsQueue(List<TermPositions>)",4,1,n/a,7,1,1,4,3
"org.apache.lucene.index.MultipleTermPositions.TermPositionsQueue.lessThan(TermPositions,TermPositions)",2,6,n/a,4,0,2,1,1
"org.apache.lucene.index.MultipleTermPositions.TermPositionsQueue.peek()",1,5,n/a,3,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.close()",3,52,n/a,4,0,0,2,2
"org.apache.lucene.index.MultipleTermPositions.doc()",0,116,n/a,3,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.freq()",0,54,n/a,3,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.getPayload(byte[],int)",1,12,n/a,7,0,2,1,1
"org.apache.lucene.index.MultipleTermPositions.getPayloadLength()",1,14,n/a,7,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.isPayloadAvailable()",0,9,n/a,8,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.next()",17,97,n/a,23,2,0,18,6
"org.apache.lucene.index.MultipleTermPositions.nextPosition()",1,26,n/a,5,0,0,1,1
"org.apache.lucene.index.MultipleTermPositions.read(int[],int[])",1,10,n/a,7,0,2,1,1
"org.apache.lucene.index.MultipleTermPositions.seek(Term)",1,22,n/a,7,0,1,1,1
"org.apache.lucene.index.MultipleTermPositions.seek(TermEnum)",1,19,n/a,7,0,1,1,1
"org.apache.lucene.index.MultipleTermPositions.skipTo(int)",8,40,n/a,10,1,1,6,4
"org.apache.lucene.index.NoDeletionPolicy.NoDeletionPolicy()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.index.NoDeletionPolicy.onCommit(List<? extends IndexCommit>)",0,6,n/a,1,0,1,0,1
"org.apache.lucene.index.NoDeletionPolicy.onInit(List<? extends IndexCommit>)",0,4,n/a,1,0,1,0,1
"org.apache.lucene.index.NoMergePolicy.NoMergePolicy(boolean)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.index.NoMergePolicy.close()",0,4,n/a,2,0,0,0,1
"org.apache.lucene.index.NoMergePolicy.findForcedDeletesMerges(SegmentInfos)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.index.NoMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",0,3,n/a,4,0,3,1,1
"org.apache.lucene.index.NoMergePolicy.findMerges(SegmentInfos)",0,4,n/a,3,0,1,1,1
"org.apache.lucene.index.NoMergePolicy.setIndexWriter(IndexWriter)",0,5,n/a,2,0,1,0,1
"org.apache.lucene.index.NoMergePolicy.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.NoMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",0,4,n/a,2,0,2,1,1
"org.apache.lucene.index.NoMergeScheduler.NoMergeScheduler()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.index.NoMergeScheduler.close()",0,3,n/a,2,0,0,0,1
"org.apache.lucene.index.NoMergeScheduler.merge(IndexWriter)",0,3,n/a,2,0,1,0,1
"org.apache.lucene.index.NormsWriter.abort()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.NormsWriter.addThread(DocInverterPerThread)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.NormsWriter.files(Collection<String>)",0,0,n/a,2,0,1,0,1
"org.apache.lucene.index.NormsWriter.flush(Map<InvertedDocEndConsumerPerThread, Collection<InvertedDocEndConsumerPerField>>,SegmentWriteState)",28,1,n/a,94,6,2,73,19
"org.apache.lucene.index.NormsWriter.setFieldInfos(FieldInfos)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.index.NormsWriterPerField.NormsWriterPerField(DocInverterPerField,NormsWriterPerThread,FieldInfo)",0,1,n/a,6,0,3,4,1
"org.apache.lucene.index.NormsWriterPerField.abort()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.NormsWriterPerField.compareTo(NormsWriterPerField)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.index.NormsWriterPerField.finish()",4,1,n/a,17,2,0,11,5
"org.apache.lucene.index.NormsWriterPerField.reset()",2,1,n/a,6,0,0,3,1
"org.apache.lucene.index.NormsWriterPerThread.NormsWriterPerThread(DocInverterPerThread,NormsWriter)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.index.NormsWriterPerThread.abort()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.NormsWriterPerThread.addField(DocInverterPerField,FieldInfo)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.index.NormsWriterPerThread.finishDocument()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.NormsWriterPerThread.freeRAM()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.NormsWriterPerThread.startDocument()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.DocumentFilteredAtomicIndexReader(IndexReader,Filter,boolean)",15,1,n/a,25,3,3,18,7
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.getSequentialSubReaders()",0,25,n/a,4,0,0,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.hasDeletions()",1,28,n/a,4,0,0,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.isDeleted(int)",1,33,n/a,4,0,1,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.numDocs()",0,83,n/a,4,0,0,1,1
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader.termPositions()",5,11,n/a,10,4,0,6,3
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Directory,Directory,Directory,Filter)",1,1,n/a,10,0,4,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Directory,Directory,Directory,Filter,IndexWriterConfig,IndexWriterConfig)",0,2,n/a,9,0,6,6,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Directory,Directory,Directory,Term)",4,0,n/a,12,0,4,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Directory,Directory,Directory,Term,IndexWriterConfig,IndexWriterConfig)",4,0,n/a,5,0,6,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Version,Directory,Directory,Directory,Filter)",3,3,n/a,7,0,5,1,1
"org.apache.lucene.index.PKIndexSplitter.PKIndexSplitter(Version,Directory,Directory,Directory,Term)",4,1,n/a,9,0,5,1,1
"org.apache.lucene.index.PKIndexSplitter.createIndex(IndexWriterConfig,Directory,IndexReader,Filter,boolean)",9,2,n/a,20,2,5,15,3
"org.apache.lucene.index.PKIndexSplitter.newDefaultConfig(Version)",2,2,n/a,3,0,1,1,1
"org.apache.lucene.index.PKIndexSplitter.split()",5,1,n/a,16,2,0,9,2
"org.apache.lucene.index.ParallelArrayTermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",0,7,n/a,14,1,4,7,3
"org.apache.lucene.index.ParallelArrayTermVectorMapper.materializeVector()",2,6,n/a,15,2,0,6,5
"org.apache.lucene.index.ParallelArrayTermVectorMapper.setExpectations(String,int,boolean,boolean)",0,6,n/a,12,0,4,9,3
"org.apache.lucene.index.ParallelPostingsArray.ParallelPostingsArray(int)",0,3,n/a,6,0,1,4,1
"org.apache.lucene.index.ParallelPostingsArray.bytesPerPosting()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.index.ParallelPostingsArray.copyTo(ParallelPostingsArray,int)",3,3,n/a,5,0,2,3,1
"org.apache.lucene.index.ParallelPostingsArray.grow()",4,1,n/a,6,0,0,4,1
"org.apache.lucene.index.ParallelPostingsArray.newInstance(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.ParallelReader.ParallelReader()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.ParallelReader.ParallelReader(boolean)",2,2,n/a,9,0,1,3,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.ParallelTermDocs()",0,2,n/a,1,0,0,0,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.ParallelTermDocs(Term)",4,1,n/a,6,0,1,3,3
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.close()",1,52,n/a,4,0,0,2,2
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.doc()",1,116,n/a,1,0,0,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.freq()",1,54,n/a,1,0,0,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.next()",1,96,n/a,5,0,0,3,2
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.read(int[],int[])",1,10,n/a,5,0,2,3,2
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.seek(Term)",3,24,n/a,4,0,1,2,2
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.seek(TermEnum)",2,19,n/a,3,0,1,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermDocs.skipTo(int)",1,40,n/a,5,0,1,3,2
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.ParallelTermEnum()",3,1,n/a,10,1,0,5,3
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.ParallelTermEnum(Term)",3,1,n/a,6,0,1,4,2
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.close()",1,38,n/a,5,0,0,2,2
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.docFreq()",1,27,n/a,6,0,0,3,2
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.next()",16,53,n/a,24,1,0,16,8
"org.apache.lucene.index.ParallelReader.ParallelTermEnum.term()",1,110,n/a,6,0,0,3,2
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.ParallelTermPositions()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.getPayload(byte[],int)",1,12,n/a,3,0,2,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.getPayloadLength()",1,14,n/a,3,0,0,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.isPayloadAvailable()",1,9,n/a,4,0,0,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.nextPosition()",1,26,n/a,4,0,0,1,1
"org.apache.lucene.index.ParallelReader.ParallelTermPositions.seek(Term)",3,24,n/a,5,0,1,2,2
"org.apache.lucene.index.ParallelReader.add(IndexReader)",2,1,n/a,7,0,1,2,1
"org.apache.lucene.index.ParallelReader.add(IndexReader,boolean)",20,2,n/a,40,2,2,20,8
"org.apache.lucene.index.ParallelReader.clone()",2,5,n/a,8,1,0,3,2
"org.apache.lucene.index.ParallelReader.clone(boolean)",1,1,n/a,10,0,1,1,1
"org.apache.lucene.index.ParallelReader.doClose()",7,1,n/a,10,2,0,6,3
"org.apache.lucene.index.ParallelReader.doCommit(Map<String, String>)",1,1,n/a,6,0,1,2,2
"org.apache.lucene.index.ParallelReader.doDelete(int)",1,1,n/a,8,1,1,3,2
"org.apache.lucene.index.ParallelReader.doOpenIfChanged()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.index.ParallelReader.doOpenIfChanged(boolean)",1,1,n/a,10,0,1,1,1
"org.apache.lucene.index.ParallelReader.doReopen(boolean)",19,2,n/a,60,5,1,41,12
"org.apache.lucene.index.ParallelReader.doSetNorm(int,String,byte)",2,2,n/a,8,0,3,3,2
"org.apache.lucene.index.ParallelReader.doUndeleteAll()",1,1,n/a,8,1,0,3,2
"org.apache.lucene.index.ParallelReader.docFreq(Term)",4,28,n/a,6,0,1,3,2
"org.apache.lucene.index.ParallelReader.document(int,FieldSelector)",6,20,n/a,24,4,2,14,7
"org.apache.lucene.index.ParallelReader.getFieldInfos()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.index.ParallelReader.getSubReaders()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.index.ParallelReader.getTermFreqVector(int,String)",3,32,n/a,7,0,2,3,2
"org.apache.lucene.index.ParallelReader.getTermFreqVector(int,String,TermVectorMapper)",3,7,n/a,8,1,3,4,2
"org.apache.lucene.index.ParallelReader.getTermFreqVector(int,TermVectorMapper)",5,3,n/a,9,1,2,5,2
"org.apache.lucene.index.ParallelReader.getTermFreqVectors(int)",9,8,n/a,14,1,1,9,3
"org.apache.lucene.index.ParallelReader.getVersion()",1,10,n/a,7,0,0,1,1
"org.apache.lucene.index.ParallelReader.hasDeletions()",1,28,n/a,5,0,0,2,1
"org.apache.lucene.index.ParallelReader.hasNorms(String)",3,8,n/a,6,0,1,3,2
"org.apache.lucene.index.ParallelReader.isCurrent()",2,15,n/a,14,2,0,5,3
"org.apache.lucene.index.ParallelReader.isDeleted(int)",3,33,n/a,8,0,1,3,2
"org.apache.lucene.index.ParallelReader.isOptimized()",2,3,n/a,12,2,0,5,3
"org.apache.lucene.index.ParallelReader.maxDoc()",0,137,n/a,5,0,0,1,1
"org.apache.lucene.index.ParallelReader.norms(String)",3,29,n/a,6,0,1,3,2
"org.apache.lucene.index.ParallelReader.norms(String,byte[],int)",3,12,n/a,8,0,3,4,2
"org.apache.lucene.index.ParallelReader.numDocs()",0,83,n/a,5,0,0,1,1
"org.apache.lucene.index.ParallelReader.termDocs()",2,28,n/a,5,0,0,2,1
"org.apache.lucene.index.ParallelReader.termDocs(Term)",2,40,n/a,5,0,1,2,1
"org.apache.lucene.index.ParallelReader.termPositions()",2,10,n/a,5,0,0,2,1
"org.apache.lucene.index.ParallelReader.terms()",2,13,n/a,5,0,0,2,1
"org.apache.lucene.index.ParallelReader.terms(Term)",2,59,n/a,5,0,1,2,1
"org.apache.lucene.index.ParallelReader.toString()",11,0,n/a,14,1,0,8,3
"org.apache.lucene.index.Payload.Payload()",0,3,n/a,4,0,0,0,1
"org.apache.lucene.index.Payload.Payload(byte[])",1,9,n/a,10,0,1,1,1
"org.apache.lucene.index.Payload.Payload(byte[],int,int)",1,3,n/a,17,1,3,5,3
"org.apache.lucene.index.Payload.byteAt(int)",1,4,n/a,9,1,1,3,3
"org.apache.lucene.index.Payload.clone()",4,7,n/a,24,2,0,8,4
"org.apache.lucene.index.Payload.copyTo(byte[],int)",2,0,n/a,12,1,2,3,2
"org.apache.lucene.index.Payload.equals(Object)",0,2,n/a,16,2,1,13,6
"org.apache.lucene.index.Payload.getData()",0,8,n/a,7,0,0,1,1
"org.apache.lucene.index.Payload.getOffset()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.index.Payload.hashCode()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.index.Payload.length()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.index.Payload.setData(byte[])",1,2,n/a,8,0,1,1,1
"org.apache.lucene.index.Payload.setData(byte[],int,int)",0,1,n/a,10,0,3,3,1
"org.apache.lucene.index.Payload.toByteArray()",1,2,n/a,8,0,0,3,1
"org.apache.lucene.index.PayloadProcessorProvider.PayloadProcessor.payloadLength()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.PayloadProcessorProvider.PayloadProcessor.processPayload(byte[],int,int)",n/a,2,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.index.PayloadProcessorProvider.ReaderPayloadProcessor.getProcessor(Term)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.PayloadProcessorProvider.getDirProcessor(Directory)",1,2,n/a,11,0,1,1,1
"org.apache.lucene.index.PayloadProcessorProvider.getReaderProcessor(IndexReader)",2,3,n/a,9,0,1,1,1
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.PersistentSnapshotDeletionPolicy(IndexDeletionPolicy,Directory,OpenMode,Version)",12,0,n/a,46,2,4,11,5
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.close()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.onInit(List<? extends IndexCommit>)",2,5,n/a,10,0,1,2,1
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.persistSnapshotInfos(String,String)",14,3,n/a,17,1,2,9,3
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.readSnapshotsInfo(Directory)",14,1,n/a,31,3,1,16,5
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.release(String)",2,6,n/a,11,0,1,2,1
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy.snapshot(String)",6,4,n/a,15,1,1,5,2
"org.apache.lucene.index.PositionBasedTermVectorMapper.PositionBasedTermVectorMapper()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.PositionBasedTermVectorMapper(boolean)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.TVPositionInfo(int,boolean)",2,1,n/a,7,1,2,4,2
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.addTerm(String,TermVectorOffsetInfo)",2,1,n/a,7,1,2,3,2
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.getOffsets()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.getPosition()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo.getTerms()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.getFieldToTerms()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.isIgnoringPositions()",0,6,n/a,8,0,0,1,1
"org.apache.lucene.index.PositionBasedTermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",5,7,n/a,19,2,4,9,4
"org.apache.lucene.index.PositionBasedTermVectorMapper.setExpectations(String,int,boolean,boolean)",4,6,n/a,23,1,4,8,3
"org.apache.lucene.index.PrefixCodedTerms.Builder.add(Term)",13,1,n/a,22,2,1,15,4
"org.apache.lucene.index.PrefixCodedTerms.Builder.finish()",3,1,n/a,9,1,0,4,2
"org.apache.lucene.index.PrefixCodedTerms.Builder.sharedPrefix(BytesRef,BytesRef)",1,1,n/a,13,2,2,9,3
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTerms(RAMFile)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator.PrefixCodedTermsIterator()",2,1,n/a,7,1,0,3,2
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator.hasNext()",2,1,n/a,3,0,0,1,1
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator.next()",10,0,n/a,19,2,0,13,3
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.index.PrefixCodedTerms.getSizeInBytes()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.PrefixCodedTerms.iterator()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.PruningReader.PruningReader(IndexReader,StorePruningPolicy,TermPruningPolicy)",1,7,n/a,15,0,3,4,1
"org.apache.lucene.index.PruningReader.PruningTermEnum.PruningTermEnum(TermEnum)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.PruningReader.PruningTermEnum.next()",7,54,n/a,21,2,0,10,6
"org.apache.lucene.index.PruningReader.PruningTermPositions.PruningTermPositions(TermPositions)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.freq()",0,54,n/a,4,0,0,1,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.informPolicy(Term)",4,2,n/a,4,0,1,2,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.isPayloadAvailable()",2,10,n/a,10,1,0,5,3
"org.apache.lucene.index.PruningReader.PruningTermPositions.next()",6,99,n/a,34,3,0,26,8
"org.apache.lucene.index.PruningReader.PruningTermPositions.nextPosition()",0,26,n/a,4,0,0,1,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.seek(Term)",2,23,n/a,5,0,1,2,1
"org.apache.lucene.index.PruningReader.PruningTermPositions.seek(TermEnum)",3,20,n/a,5,0,1,2,1
"org.apache.lucene.index.PruningReader.document(int,FieldSelector)",3,21,n/a,16,1,2,6,3
"org.apache.lucene.index.PruningReader.getFieldInfos()",2,5,n/a,11,1,0,4,2
"org.apache.lucene.index.PruningReader.getSequentialSubReaders()",2,25,n/a,12,1,0,9,3
"org.apache.lucene.index.PruningReader.getTermFreqVectors(int)",22,10,n/a,88,5,1,65,25
"org.apache.lucene.index.PruningReader.termPositions()",2,11,n/a,7,0,0,1,1
"org.apache.lucene.index.PruningReader.terms()",2,14,n/a,7,0,0,1,1
"org.apache.lucene.index.ReadOnlyDirectoryReader.ReadOnlyDirectoryReader(Directory,SegmentInfos,IndexDeletionPolicy,int)",1,1,n/a,3,0,4,1,1
"org.apache.lucene.index.ReadOnlyDirectoryReader.ReadOnlyDirectoryReader(Directory,SegmentInfos,SegmentReader[],int[],Map<String, byte[]>,boolean,int)",1,1,n/a,4,0,7,1,1
"org.apache.lucene.index.ReadOnlyDirectoryReader.ReadOnlyDirectoryReader(IndexWriter,SegmentInfos,int,boolean)",1,1,n/a,3,0,4,1,1
"org.apache.lucene.index.ReadOnlyDirectoryReader.acquireWriteLock()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.index.ReadOnlySegmentReader.acquireWriteLock()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.index.ReadOnlySegmentReader.isDeleted(int)",1,42,n/a,5,0,1,1,2
"org.apache.lucene.index.ReadOnlySegmentReader.noWrite()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.index.ReusableStringReader.close()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.index.ReusableStringReader.init(String)",1,1,n/a,5,0,1,3,1
"org.apache.lucene.index.ReusableStringReader.read(char[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.index.ReusableStringReader.read(char[],int,int)",3,1,n/a,19,1,3,13,3
"org.apache.lucene.index.SegmentCoreReaders.SegmentCoreReaders(SegmentReader,Directory,SegmentInfo,int,int)",12,1,n/a,41,2,5,25,5
"org.apache.lucene.index.SegmentCoreReaders.addCoreClosedListener(CoreClosedListener)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentCoreReaders.decRef()",3,2,n/a,9,1,0,4,2
"org.apache.lucene.index.SegmentCoreReaders.getCFSReader()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentCoreReaders.getFieldsReaderOrig()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentCoreReaders.getTermVectorsReaderOrig()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentCoreReaders.getTermsReader()",0,9,n/a,8,1,0,4,2
"org.apache.lucene.index.SegmentCoreReaders.incRef()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentCoreReaders.loadTermsIndex(SegmentInfo,int)",4,1,n/a,23,3,2,8,4
"org.apache.lucene.index.SegmentCoreReaders.notifyCoreClosedListeners()",1,1,n/a,7,2,0,3,2
"org.apache.lucene.index.SegmentCoreReaders.openDocStores(SegmentInfo)",20,2,n/a,46,3,1,27,10
"org.apache.lucene.index.SegmentCoreReaders.removeCoreClosedListener(CoreClosedListener)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentCoreReaders.termsIndexIsLoaded()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentCoreReaders.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentInfo.SegmentInfo(Directory,int,IndexInput)",23,1,n/a,104,4,3,71,15
"org.apache.lucene.index.SegmentInfo.SegmentInfo(String,int,Directory,boolean,boolean,boolean,boolean)",0,4,n/a,15,0,7,12,2
"org.apache.lucene.index.SegmentInfo.addIfExists(Set<String>,String)",2,1,n/a,4,0,2,2,2
"org.apache.lucene.index.SegmentInfo.advanceDelGen()",1,2,n/a,9,1,0,4,2
"org.apache.lucene.index.SegmentInfo.advanceNormGen(int)",1,1,n/a,14,1,1,4,2
"org.apache.lucene.index.SegmentInfo.clearDelGen()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.index.SegmentInfo.clearFiles()",0,10,n/a,7,0,0,3,1
"org.apache.lucene.index.SegmentInfo.clone()",3,4,n/a,18,1,0,13,2
"org.apache.lucene.index.SegmentInfo.equals(Object)",1,2,n/a,12,1,1,6,4
"org.apache.lucene.index.SegmentInfo.files()",52,18,n/a,90,5,0,63,33
"org.apache.lucene.index.SegmentInfo.getBufferedDeletesGen()",0,6,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfo.getDelCount()",4,19,n/a,11,2,0,7,3
"org.apache.lucene.index.SegmentInfo.getDelFileName()",1,8,n/a,10,1,0,3,2
"org.apache.lucene.index.SegmentInfo.getDiagnostics()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfo.getDocStoreIsCompoundFile()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfo.getDocStoreOffset()",0,9,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfo.getDocStoreSegment()",0,8,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfo.getHasProx()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfo.getHasVectors()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfo.getNormFileName(int)",4,4,n/a,23,1,1,9,4
"org.apache.lucene.index.SegmentInfo.getUseCompoundFile()",2,17,n/a,13,1,0,5,3
"org.apache.lucene.index.SegmentInfo.getVersion()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentInfo.hasDeletions()",2,7,n/a,24,1,0,5,3
"org.apache.lucene.index.SegmentInfo.hasSeparateNorms()",9,3,n/a,49,4,0,29,13
"org.apache.lucene.index.SegmentInfo.hasSeparateNorms(int)",1,3,n/a,17,1,1,6,7
"org.apache.lucene.index.SegmentInfo.hashCode()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentInfo.reset(SegmentInfo)",2,1,n/a,25,1,1,18,2
"org.apache.lucene.index.SegmentInfo.setBufferedDeletesGen(long)",0,6,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentInfo.setDelCount(int)",0,3,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentInfo.setDiagnostics(Map<String, String>)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentInfo.setDocStore(int,String,boolean)",1,1,n/a,6,0,3,4,1
"org.apache.lucene.index.SegmentInfo.setDocStoreIsCompoundFile(boolean)",1,0,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentInfo.setDocStoreOffset(int)",1,0,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentInfo.setDocStoreSegment(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentInfo.setHasProx(boolean)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentInfo.setHasVectors(boolean)",1,2,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentInfo.setNumFields(int)",0,1,n/a,18,3,1,7,4
"org.apache.lucene.index.SegmentInfo.setUseCompoundFile(boolean)",1,3,n/a,14,1,1,4,2
"org.apache.lucene.index.SegmentInfo.setVersion(String)",0,1,n/a,13,0,1,1,1
"org.apache.lucene.index.SegmentInfo.sizeInBytes(boolean)",6,12,n/a,35,3,1,18,9
"org.apache.lucene.index.SegmentInfo.toString()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentInfo.toString(Directory,int)",22,4,n/a,61,2,2,32,12
"org.apache.lucene.index.SegmentInfo.write(IndexOutput)",16,1,n/a,31,2,1,22,8
"org.apache.lucene.index.SegmentInfos.FindSegmentsFile.FindSegmentsFile(Directory)",0,4,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentInfos.FindSegmentsFile.doBody(String)",n/a,3,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.SegmentInfos.FindSegmentsFile.run()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfos.FindSegmentsFile.run(IndexCommit)",30,3,n/a,175,6,1,86,39
"org.apache.lucene.index.SegmentInfos.add(SegmentInfo)",6,7,n/a,8,1,1,5,2
"org.apache.lucene.index.SegmentInfos.addAll(Iterable<SegmentInfo>)",1,3,n/a,5,1,1,2,2
"org.apache.lucene.index.SegmentInfos.applyMergeChanges(OneMerge,boolean)",14,1,n/a,36,3,2,22,8
"org.apache.lucene.index.SegmentInfos.asList()",1,13,n/a,7,1,0,3,2
"org.apache.lucene.index.SegmentInfos.asSet()",1,0,n/a,8,1,0,3,2
"org.apache.lucene.index.SegmentInfos.changed()",0,12,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentInfos.clear()",2,6,n/a,4,0,0,2,1
"org.apache.lucene.index.SegmentInfos.clone()",9,4,n/a,23,2,0,11,3
"org.apache.lucene.index.SegmentInfos.commit(Directory)",2,2,n/a,11,0,1,2,1
"org.apache.lucene.index.SegmentInfos.contains(SegmentInfo)",1,6,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentInfos.createBackupSegmentInfos(boolean)",5,3,n/a,11,2,1,6,3
"org.apache.lucene.index.SegmentInfos.files(Directory,boolean)",8,9,n/a,26,2,2,13,5
"org.apache.lucene.index.SegmentInfos.finishCommit(Directory)",16,3,n/a,63,3,1,31,8
"org.apache.lucene.index.SegmentInfos.generationFromSegmentsFileName(String)",6,4,n/a,14,1,1,5,3
"org.apache.lucene.index.SegmentInfos.getDefaultGenLookahedCount()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.index.SegmentInfos.getFormat()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfos.getGeneration()",0,10,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfos.getInfoStream()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(Directory)",2,1,n/a,13,1,1,3,2
"org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(String[])",3,3,n/a,22,3,1,12,6
"org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(Directory)",2,0,n/a,11,0,1,1,1
"org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(String[])",2,0,n/a,11,0,1,1,1
"org.apache.lucene.index.SegmentInfos.getLastGeneration()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfos.getNextSegmentFileName()",1,1,n/a,14,1,0,5,2
"org.apache.lucene.index.SegmentInfos.getSegmentsFileName()",1,12,n/a,8,0,0,1,1
"org.apache.lucene.index.SegmentInfos.getUserData()",0,9,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfos.getVersion()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.index.SegmentInfos.indexOf(SegmentInfo)",2,3,n/a,7,1,1,3,2
"org.apache.lucene.index.SegmentInfos.info(int)",1,48,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentInfos.iterator()",2,1,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentInfos.message(String)",3,11,n/a,9,0,1,1,1
"org.apache.lucene.index.SegmentInfos.prepareCommit(Directory)",2,2,n/a,15,0,1,3,2
"org.apache.lucene.index.SegmentInfos.pruneDeletedSegments()",8,1,n/a,11,2,0,7,3
"org.apache.lucene.index.SegmentInfos.range(int,int)",3,0,n/a,14,0,2,3,1
"org.apache.lucene.index.SegmentInfos.read(Directory)",3,11,n/a,5,2,1,4,1
"org.apache.lucene.index.SegmentInfos.read(Directory,String)",41,7,n/a,88,5,2,50,18
"org.apache.lucene.index.SegmentInfos.readCurrentVersion(Directory)",2,4,n/a,19,0,1,3,1
"org.apache.lucene.index.SegmentInfos.remove(SegmentInfo)",2,2,n/a,6,1,1,3,2
"org.apache.lucene.index.SegmentInfos.remove(int)",4,3,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentInfos.replace(SegmentInfos)",2,1,n/a,8,0,1,2,1
"org.apache.lucene.index.SegmentInfos.rollbackCommit(Directory)",3,3,n/a,22,2,1,7,4
"org.apache.lucene.index.SegmentInfos.rollbackSegmentInfos(List<SegmentInfo>)",2,3,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentInfos.setDefaultGenLookaheadCount(int)",0,1,n/a,12,0,1,1,1
"org.apache.lucene.index.SegmentInfos.setFormat(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentInfos.setInfoStream(PrintStream)",0,1,n/a,6,0,1,1,1
"org.apache.lucene.index.SegmentInfos.setUserData(Map<String, String>)",1,3,n/a,7,1,1,3,2
"org.apache.lucene.index.SegmentInfos.size()",1,37,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentInfos.toString(Directory)",10,0,n/a,13,2,1,11,3
"org.apache.lucene.index.SegmentInfos.totalDocCount()",0,1,n/a,9,1,0,4,2
"org.apache.lucene.index.SegmentInfos.updateGeneration(SegmentInfos)",0,3,n/a,5,0,1,2,1
"org.apache.lucene.index.SegmentInfos.write(Directory)",13,1,n/a,38,3,1,22,5
"org.apache.lucene.index.SegmentMergeInfo.SegmentMergeInfo(int,TermEnum,IndexReader)",1,2,n/a,7,0,3,4,1
"org.apache.lucene.index.SegmentMergeInfo.close()",2,5,n/a,9,2,0,4,2
"org.apache.lucene.index.SegmentMergeInfo.getDocMap()",3,2,n/a,20,4,0,14,5
"org.apache.lucene.index.SegmentMergeInfo.getPositions()",1,1,n/a,6,1,0,3,2
"org.apache.lucene.index.SegmentMergeInfo.next()",2,4,n/a,9,1,0,5,2
"org.apache.lucene.index.SegmentMergeQueue.SegmentMergeQueue(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentMergeQueue.close()",3,2,n/a,4,0,0,2,2
"org.apache.lucene.index.SegmentMergeQueue.lessThan(SegmentMergeInfo,SegmentMergeInfo)",1,6,n/a,8,0,2,4,2
"org.apache.lucene.index.SegmentMerger.CheckAbort.CheckAbort(OneMerge,Directory)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.index.SegmentMerger.CheckAbort.work(double)",1,11,n/a,15,1,1,4,2
"org.apache.lucene.index.SegmentMerger.SegmentMerger(Directory,int,String,OneMerge,PayloadProcessorProvider,FieldInfos)",2,2,n/a,4,3,6,8,2
"org.apache.lucene.index.SegmentMerger.add(IndexReader)",1,5,n/a,7,0,1,1,1
"org.apache.lucene.index.SegmentMerger.appendPostings(FormatPostingsTermsConsumer,SegmentMergeInfo[],int)",17,1,n/a,55,6,3,39,11
"org.apache.lucene.index.SegmentMerger.copyFieldsNoDeletions(FieldsWriter,IndexReader,FieldsReader)",8,1,n/a,25,2,3,15,4
"org.apache.lucene.index.SegmentMerger.copyFieldsWithDeletions(FieldsWriter,IndexReader,FieldsReader)",10,1,n/a,46,4,3,31,9
"org.apache.lucene.index.SegmentMerger.copyVectorsNoDeletions(TermVectorsWriter,TermVectorsReader,IndexReader)",8,1,n/a,25,2,3,15,4
"org.apache.lucene.index.SegmentMerger.copyVectorsWithDeletions(TermVectorsWriter,TermVectorsReader,IndexReader)",10,1,n/a,43,4,3,27,9
"org.apache.lucene.index.SegmentMerger.createCompoundFile(String,SegmentInfo)",6,2,n/a,22,1,2,8,2
"org.apache.lucene.index.SegmentMerger.fieldInfos()",0,4,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentMerger.getAnyNonBulkMerges()",2,1,n/a,4,0,0,2,1
"org.apache.lucene.index.SegmentMerger.getMatchedSubReaderCount()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentMerger.merge()",5,3,n/a,20,0,0,6,2
"org.apache.lucene.index.SegmentMerger.mergeFields()",13,1,n/a,40,4,0,22,7
"org.apache.lucene.index.SegmentMerger.mergeNorms()",16,1,n/a,49,7,0,33,12
"org.apache.lucene.index.SegmentMerger.mergeTermInfos(FormatPostingsFieldsConsumer)",27,1,n/a,55,3,1,45,13
"org.apache.lucene.index.SegmentMerger.mergeTerms()",6,1,n/a,15,3,0,8,2
"org.apache.lucene.index.SegmentMerger.mergeVectors()",8,1,n/a,30,4,0,15,6
"org.apache.lucene.index.SegmentMerger.setMatchingSegmentReaders()",7,1,n/a,38,4,0,22,6
"org.apache.lucene.index.SegmentNorms.SegmentNorms(IndexInput,int,long,SegmentReader)",0,1,n/a,6,0,4,4,1
"org.apache.lucene.index.SegmentNorms.bytes()",8,3,n/a,34,3,0,18,5
"org.apache.lucene.index.SegmentNorms.bytes(byte[],int,int)",5,2,n/a,22,3,3,9,5
"org.apache.lucene.index.SegmentNorms.bytesRef()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentNorms.clone()",4,1,n/a,30,2,0,16,6
"org.apache.lucene.index.SegmentNorms.closeInput()",3,2,n/a,16,3,0,7,4
"org.apache.lucene.index.SegmentNorms.copyOnWrite()",5,1,n/a,20,1,0,12,4
"org.apache.lucene.index.SegmentNorms.decRef()",3,3,n/a,19,2,0,12,6
"org.apache.lucene.index.SegmentNorms.incRef()",0,1,n/a,4,0,0,2,3
"org.apache.lucene.index.SegmentNorms.reWrite(SegmentInfo)",10,1,n/a,29,3,1,15,5
"org.apache.lucene.index.SegmentReader.CoreClosedListener.onClose(SegmentReader)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.SegmentReader.FieldsReaderLocal.initialValue()",2,1,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentReader.addCoreClosedListener(CoreClosedListener)",2,2,n/a,5,0,1,2,1
"org.apache.lucene.index.SegmentReader.checkDeletedCounts()",8,1,n/a,11,0,0,5,1
"org.apache.lucene.index.SegmentReader.clone()",2,4,n/a,8,1,0,3,2
"org.apache.lucene.index.SegmentReader.clone(boolean)",1,4,n/a,5,0,1,1,1
"org.apache.lucene.index.SegmentReader.cloneDeletedDocs(BitVector)",2,1,n/a,11,0,1,2,1
"org.apache.lucene.index.SegmentReader.cloneNormBytes(byte[])",1,1,n/a,12,0,1,3,1
"org.apache.lucene.index.SegmentReader.commitChanges(Map<String, String>)",17,1,n/a,40,4,1,23,7
"org.apache.lucene.index.SegmentReader.directory()",0,20,n/a,8,0,0,1,1
"org.apache.lucene.index.SegmentReader.doClose()",6,2,n/a,16,1,0,9,4
"org.apache.lucene.index.SegmentReader.doCommit(Map<String, String>)",3,3,n/a,16,3,1,8,3
"org.apache.lucene.index.SegmentReader.doDelete(int)",8,3,n/a,21,1,1,11,4
"org.apache.lucene.index.SegmentReader.doOpenIfChanged()",1,3,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentReader.doOpenIfChanged(boolean)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.index.SegmentReader.doSetNorm(int,String,byte)",3,2,n/a,12,1,3,5,2
"org.apache.lucene.index.SegmentReader.doUndeleteAll()",3,1,n/a,17,1,0,11,2
"org.apache.lucene.index.SegmentReader.docFreq(Term)",3,29,n/a,9,0,1,5,2
"org.apache.lucene.index.SegmentReader.document(int,FieldSelector)",6,21,n/a,8,1,2,4,3
"org.apache.lucene.index.SegmentReader.fieldInfos()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentReader.files()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentReader.get(boolean,Directory,SegmentInfo,int,boolean,int)",7,2,n/a,36,2,6,15,4
"org.apache.lucene.index.SegmentReader.get(boolean,SegmentInfo,int)",1,3,n/a,7,0,3,1,1
"org.apache.lucene.index.SegmentReader.getCoreCacheKey()",0,9,n/a,7,0,0,1,1
"org.apache.lucene.index.SegmentReader.getDeletesCacheKey()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentReader.getFieldInfos()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentReader.getFieldsReader()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentReader.getOnlySegmentReader(Directory)",2,0,n/a,11,0,1,1,1
"org.apache.lucene.index.SegmentReader.getOnlySegmentReader(IndexReader)",3,1,n/a,11,1,1,8,4
"org.apache.lucene.index.SegmentReader.getPostingsSkipInterval()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentReader.getSegmentInfo()",0,7,n/a,6,0,0,1,1
"org.apache.lucene.index.SegmentReader.getSegmentName()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.index.SegmentReader.getTermFreqVector(int,String)",4,33,n/a,18,0,2,8,4
"org.apache.lucene.index.SegmentReader.getTermFreqVector(int,String,TermVectorMapper)",4,8,n/a,12,1,3,8,4
"org.apache.lucene.index.SegmentReader.getTermFreqVector(int,TermVectorMapper)",3,4,n/a,8,0,2,5,2
"org.apache.lucene.index.SegmentReader.getTermFreqVectors(int)",3,10,n/a,15,0,1,5,2
"org.apache.lucene.index.SegmentReader.getTermInfosIndexDivisor()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentReader.getTermVectorsReader()",4,5,n/a,21,3,0,10,4
"org.apache.lucene.index.SegmentReader.getTermVectorsReaderOrig()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentReader.getUniqueTermCount()",2,2,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentReader.hasDeletions()",0,33,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentReader.hasDeletions(SegmentInfo)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.SegmentReader.hasNorms(String)",2,10,n/a,5,0,1,2,1
"org.apache.lucene.index.SegmentReader.hasSeparateNorms(SegmentInfo)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentReader.isDeleted(int)",1,42,n/a,4,0,1,1,2
"org.apache.lucene.index.SegmentReader.loadDeletedDocs()",10,2,n/a,12,2,0,7,3
"org.apache.lucene.index.SegmentReader.loadTermsIndex(int)",1,1,n/a,8,0,1,1,1
"org.apache.lucene.index.SegmentReader.maxDoc()",0,159,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentReader.norms(String)",3,29,n/a,10,1,1,5,2
"org.apache.lucene.index.SegmentReader.norms(String,byte[],int)",7,16,n/a,12,1,3,6,2
"org.apache.lucene.index.SegmentReader.normsClosed()",1,0,n/a,12,2,0,6,4
"org.apache.lucene.index.SegmentReader.normsClosed(String)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.index.SegmentReader.numDocs()",2,92,n/a,8,0,0,4,2
"org.apache.lucene.index.SegmentReader.openDocStores()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentReader.openNorms(Directory,int)",21,2,n/a,55,4,2,33,13
"org.apache.lucene.index.SegmentReader.rawTermDocs(Term)",3,1,n/a,14,1,1,5,2
"org.apache.lucene.index.SegmentReader.removeCoreClosedListener(CoreClosedListener)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.index.SegmentReader.reopenSegment(SegmentInfo,boolean,boolean)",28,4,n/a,79,3,3,54,25
"org.apache.lucene.index.SegmentReader.rollbackCommit()",2,2,n/a,10,1,0,7,2
"org.apache.lucene.index.SegmentReader.setSegmentInfo(SegmentInfo)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentReader.startCommit()",2,2,n/a,10,1,0,7,2
"org.apache.lucene.index.SegmentReader.termDocs()",2,30,n/a,5,0,0,2,1
"org.apache.lucene.index.SegmentReader.termDocs(Term)",2,41,n/a,8,1,1,3,2
"org.apache.lucene.index.SegmentReader.termPositions()",2,12,n/a,5,0,0,2,1
"org.apache.lucene.index.SegmentReader.terms()",3,15,n/a,5,0,0,2,1
"org.apache.lucene.index.SegmentReader.terms(Term)",3,60,n/a,5,0,1,2,1
"org.apache.lucene.index.SegmentReader.termsIndexLoaded()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentReader.toString()",5,1,n/a,10,1,0,5,2
"org.apache.lucene.index.SegmentReader.usesCompoundFile(SegmentInfo)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentTermDocs.SegmentTermDocs(SegmentReader)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.index.SegmentTermDocs.SegmentTermDocs(SegmentReader,boolean)",5,2,n/a,13,2,2,8,2
"org.apache.lucene.index.SegmentTermDocs.close()",2,53,n/a,5,0,0,3,2
"org.apache.lucene.index.SegmentTermDocs.doc()",0,116,n/a,1,0,0,1,1
"org.apache.lucene.index.SegmentTermDocs.freq()",0,54,n/a,1,0,0,1,1
"org.apache.lucene.index.SegmentTermDocs.next()",4,99,n/a,22,2,0,16,7
"org.apache.lucene.index.SegmentTermDocs.read(int[],int[])",4,10,n/a,26,3,2,16,7
"org.apache.lucene.index.SegmentTermDocs.readNoTf(int[],int[],int)",2,1,n/a,16,2,3,9,5
"org.apache.lucene.index.SegmentTermDocs.seek(Term)",3,23,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentTermDocs.seek(TermEnum)",6,19,n/a,14,1,1,9,3
"org.apache.lucene.index.SegmentTermDocs.seek(TermInfo,Term)",2,3,n/a,17,1,2,13,4
"org.apache.lucene.index.SegmentTermDocs.skipProx(long,int)",0,1,n/a,2,0,2,0,1
"org.apache.lucene.index.SegmentTermDocs.skipTo(int)",11,40,n/a,24,2,1,16,8
"org.apache.lucene.index.SegmentTermDocs.skippingDoc()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.SegmentTermEnum.SegmentTermEnum(IndexInput,FieldInfos,boolean)",11,2,n/a,46,3,3,29,7
"org.apache.lucene.index.SegmentTermEnum.clone()",6,2,n/a,13,1,0,9,2
"org.apache.lucene.index.SegmentTermEnum.close()",1,40,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentTermEnum.docFreq()",0,27,n/a,6,0,0,1,1
"org.apache.lucene.index.SegmentTermEnum.freqPointer()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentTermEnum.next()",10,58,n/a,30,3,0,18,7
"org.apache.lucene.index.SegmentTermEnum.prev()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.index.SegmentTermEnum.proxPointer()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentTermEnum.scanTo(Term)",4,2,n/a,20,1,1,9,4
"org.apache.lucene.index.SegmentTermEnum.seek(long,long,Term,TermInfo)",4,1,n/a,9,0,4,6,1
"org.apache.lucene.index.SegmentTermEnum.term()",1,120,n/a,6,0,0,1,1
"org.apache.lucene.index.SegmentTermEnum.termInfo()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentTermEnum.termInfo(TermInfo)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.index.SegmentTermPositionVector.SegmentTermPositionVector(String,String[],int[],int[][],TermVectorOffsetInfo[][])",1,1,n/a,5,0,5,3,1
"org.apache.lucene.index.SegmentTermPositionVector.getOffsets(int)",0,10,n/a,17,1,1,6,4
"org.apache.lucene.index.SegmentTermPositionVector.getTermPositions(int)",0,10,n/a,15,1,1,6,4
"org.apache.lucene.index.SegmentTermPositions.SegmentTermPositions(SegmentReader)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.index.SegmentTermPositions.close()",2,53,n/a,5,0,0,3,2
"org.apache.lucene.index.SegmentTermPositions.getPayload(byte[],int)",2,12,n/a,20,1,2,12,4
"org.apache.lucene.index.SegmentTermPositions.getPayloadLength()",0,14,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentTermPositions.isPayloadAvailable()",0,9,n/a,3,0,0,1,2
"org.apache.lucene.index.SegmentTermPositions.lazySkip()",4,1,n/a,27,1,0,9,4
"org.apache.lucene.index.SegmentTermPositions.next()",1,99,n/a,12,1,0,6,2
"org.apache.lucene.index.SegmentTermPositions.nextPosition()",2,26,n/a,9,0,0,5,2
"org.apache.lucene.index.SegmentTermPositions.read(int[],int[])",1,10,n/a,4,0,2,1,1
"org.apache.lucene.index.SegmentTermPositions.readDeltaPosition()",2,2,n/a,15,2,0,7,3
"org.apache.lucene.index.SegmentTermPositions.seek(TermInfo,Term)",1,3,n/a,10,0,2,7,2
"org.apache.lucene.index.SegmentTermPositions.skipPayload()",2,2,n/a,6,1,0,3,3
"org.apache.lucene.index.SegmentTermPositions.skipPositions(int)",2,1,n/a,7,1,1,6,2
"org.apache.lucene.index.SegmentTermPositions.skipProx(long,int)",0,1,n/a,10,0,2,5,1
"org.apache.lucene.index.SegmentTermPositions.skippingDoc()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.index.SegmentTermVector.SegmentTermVector(String,String[],int[])",0,2,n/a,5,0,3,3,1
"org.apache.lucene.index.SegmentTermVector.getField()",0,9,n/a,7,0,0,1,1
"org.apache.lucene.index.SegmentTermVector.getTermFrequencies()",0,12,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentTermVector.getTerms()",0,17,n/a,3,0,0,1,1
"org.apache.lucene.index.SegmentTermVector.indexOf(String)",1,3,n/a,6,0,1,4,3
"org.apache.lucene.index.SegmentTermVector.indexesOf(String[],int,int)",1,0,n/a,12,1,3,6,2
"org.apache.lucene.index.SegmentTermVector.size()",0,5,n/a,3,0,0,1,2
"org.apache.lucene.index.SegmentTermVector.toString()",10,0,n/a,14,2,0,12,4
"org.apache.lucene.index.SegmentWriteState.SegmentWriteState(PrintStream,Directory,String,FieldInfos,int,int,BufferedDeletes)",0,2,n/a,10,0,7,7,1
"org.apache.lucene.index.SerialMergeScheduler.close()",0,3,n/a,2,0,0,0,1
"org.apache.lucene.index.SerialMergeScheduler.merge(IndexWriter)",2,3,n/a,13,1,1,5,3
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.SnapshotCommitPoint(IndexCommit)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.delete()",3,6,n/a,10,2,0,3,2
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getDirectory()",1,18,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getFileNames()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getGeneration()",1,15,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getSegmentCount()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getSegmentsFileName()",1,12,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getUserData()",1,12,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.getVersion()",1,20,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.isDeleted()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.shouldDelete(String)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotDeletionPolicy(IndexDeletionPolicy)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotDeletionPolicy(IndexDeletionPolicy,Map<String, String>)",5,3,n/a,25,2,2,4,3
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotInfo.SnapshotInfo(String,String,IndexCommit)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotInfo.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.checkSnapshotted(String)",2,2,n/a,10,1,1,2,2
"org.apache.lucene.index.SnapshotDeletionPolicy.getSnapshot(String)",2,0,n/a,19,1,1,4,2
"org.apache.lucene.index.SnapshotDeletionPolicy.getSnapshots()",5,2,n/a,13,1,0,4,2
"org.apache.lucene.index.SnapshotDeletionPolicy.isSnapshotted(String)",1,1,n/a,8,0,1,1,1
"org.apache.lucene.index.SnapshotDeletionPolicy.onCommit(List<? extends IndexCommit>)",4,6,n/a,5,0,1,2,1
"org.apache.lucene.index.SnapshotDeletionPolicy.onInit(List<? extends IndexCommit>)",14,5,n/a,43,3,1,17,9
"org.apache.lucene.index.SnapshotDeletionPolicy.registerSnapshotInfo(String,String,IndexCommit)",6,3,n/a,10,1,3,6,2
"org.apache.lucene.index.SnapshotDeletionPolicy.release(String)",6,4,n/a,21,2,1,8,4
"org.apache.lucene.index.SnapshotDeletionPolicy.snapshot(String)",4,3,n/a,33,1,1,5,2
"org.apache.lucene.index.SnapshotDeletionPolicy.wrapCommits(List<? extends IndexCommit>)",4,2,n/a,7,1,1,4,2
"org.apache.lucene.index.SortedTermVectorMapper.SortedTermVectorMapper(Comparator<TermVectorEntry>)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.index.SortedTermVectorMapper.SortedTermVectorMapper(boolean,boolean,Comparator<TermVectorEntry>)",2,1,n/a,4,0,3,2,1
"org.apache.lucene.index.SortedTermVectorMapper.getTermVectorEntrySet()",0,0,n/a,11,0,0,1,1
"org.apache.lucene.index.SortedTermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",16,7,n/a,54,3,4,24,18
"org.apache.lucene.index.SortedTermVectorMapper.setExpectations(String,int,boolean,boolean)",0,6,n/a,5,0,4,2,1
"org.apache.lucene.index.StaleReaderException.StaleReaderException(String)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.index.StoredFieldsWriter.PerDoc.abort()",2,5,n/a,5,0,0,2,1
"org.apache.lucene.index.StoredFieldsWriter.PerDoc.finish()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.index.StoredFieldsWriter.PerDoc.reset()",2,3,n/a,5,0,0,3,1
"org.apache.lucene.index.StoredFieldsWriter.PerDoc.sizeInBytes()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.index.StoredFieldsWriter.StoredFieldsWriter(DocumentsWriter,FieldInfos)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.index.StoredFieldsWriter.abort()",1,1,n/a,7,1,0,4,2
"org.apache.lucene.index.StoredFieldsWriter.addThread(DocState)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.index.StoredFieldsWriter.fill(int)",1,2,n/a,9,1,1,3,2
"org.apache.lucene.index.StoredFieldsWriter.finishDocument(PerDoc)",7,1,n/a,11,0,1,8,1
"org.apache.lucene.index.StoredFieldsWriter.flush(SegmentWriteState)",4,1,n/a,15,2,1,9,3
"org.apache.lucene.index.StoredFieldsWriter.free(PerDoc)",2,2,n/a,7,0,1,5,1
"org.apache.lucene.index.StoredFieldsWriter.getPerDoc()",2,1,n/a,15,2,0,7,3
"org.apache.lucene.index.StoredFieldsWriter.initFieldsWriter()",2,2,n/a,6,1,0,3,2
"org.apache.lucene.index.StoredFieldsWriterPerThread.StoredFieldsWriterPerThread(DocState,StoredFieldsWriter)",1,1,n/a,5,0,2,3,1
"org.apache.lucene.index.StoredFieldsWriterPerThread.abort()",1,1,n/a,6,1,0,3,2
"org.apache.lucene.index.StoredFieldsWriterPerThread.addField(Fieldable,FieldInfo)",6,1,n/a,13,1,2,10,2
"org.apache.lucene.index.StoredFieldsWriterPerThread.finishDocument()",0,1,n/a,9,1,0,3,1
"org.apache.lucene.index.StoredFieldsWriterPerThread.startDocument()",1,1,n/a,9,1,0,3,2
"org.apache.lucene.index.Term.Term(String)",1,35,n/a,9,0,1,1,1
"org.apache.lucene.index.Term.Term(String,String)",1,410,n/a,7,0,2,2,1
"org.apache.lucene.index.Term.Term(String,String,boolean)",1,3,n/a,4,0,3,2,2
"org.apache.lucene.index.Term.compareTo(Term)",2,20,n/a,10,0,1,3,2
"org.apache.lucene.index.Term.createTerm(String)",1,27,n/a,10,0,1,1,1
"org.apache.lucene.index.Term.equals(Object)",3,19,n/a,21,1,1,18,10
"org.apache.lucene.index.Term.field()",0,152,n/a,3,0,0,1,1
"org.apache.lucene.index.Term.hashCode()",2,14,n/a,8,0,0,5,3
"org.apache.lucene.index.Term.readObject(ObjectInputStream)",2,0,n/a,6,0,1,2,1
"org.apache.lucene.index.Term.set(String,String)",0,1,n/a,5,0,2,2,1
"org.apache.lucene.index.Term.text()",0,129,n/a,4,0,0,1,1
"org.apache.lucene.index.Term.toString()",0,8,n/a,2,0,0,1,1
"org.apache.lucene.index.TermBuffer.clone()",4,2,n/a,12,1,0,8,2
"org.apache.lucene.index.TermBuffer.compareChars(char[],int,char[],int)",0,1,n/a,12,2,4,9,4
"org.apache.lucene.index.TermBuffer.compareTo(TermBuffer)",2,1,n/a,6,0,1,3,2
"org.apache.lucene.index.TermBuffer.read(IndexInput,FieldInfos)",13,2,n/a,26,2,2,17,3
"org.apache.lucene.index.TermBuffer.reset()",1,3,n/a,6,0,0,4,1
"org.apache.lucene.index.TermBuffer.set(Term)",6,2,n/a,13,1,1,10,2
"org.apache.lucene.index.TermBuffer.set(TermBuffer)",1,2,n/a,6,0,1,4,1
"org.apache.lucene.index.TermBuffer.setPreUTF8Strings()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.index.TermBuffer.toTerm()",2,2,n/a,7,0,0,5,3
"org.apache.lucene.index.TermDocs.close()",n/a,52,10,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermDocs.doc()",n/a,116,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermDocs.freq()",n/a,54,10,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermDocs.next()",n/a,96,14,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermDocs.read(int[],int[])",n/a,10,10,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.TermDocs.seek(Term)",n/a,22,12,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermDocs.seek(TermEnum)",n/a,19,10,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermDocs.skipTo(int)",n/a,40,10,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermEnum.close()",n/a,38,13,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermEnum.docFreq()",n/a,27,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermEnum.next()",n/a,53,11,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermEnum.term()",n/a,110,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermFreqVector.getField()",n/a,9,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermFreqVector.getTermFrequencies()",n/a,12,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermFreqVector.getTerms()",n/a,17,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermFreqVector.indexOf(String)",n/a,2,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermFreqVector.indexesOf(String[],int,int)",n/a,0,4,n/a,n/a,3,n/a,n/a
"org.apache.lucene.index.TermFreqVector.size()",n/a,5,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermInfo.TermInfo()",0,4,n/a,1,0,0,0,1
"org.apache.lucene.index.TermInfo.TermInfo(TermInfo)",0,3,n/a,6,0,1,4,1
"org.apache.lucene.index.TermInfo.TermInfo(int,long,long)",0,0,n/a,5,0,3,3,1
"org.apache.lucene.index.TermInfo.set(TermInfo)",0,3,n/a,6,0,1,4,1
"org.apache.lucene.index.TermInfo.set(int,long,long,int)",0,1,n/a,7,0,4,4,1
"org.apache.lucene.index.TermInfosReader.CloneableTerm.CloneableTerm(Term)",3,2,n/a,3,0,1,1,1
"org.apache.lucene.index.TermInfosReader.CloneableTerm.clone()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.index.TermInfosReader.CloneableTerm.equals(Object)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.index.TermInfosReader.CloneableTerm.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TermInfosReader.TermInfoAndOrd.TermInfoAndOrd(TermInfo,long)",1,2,n/a,5,0,2,3,1
"org.apache.lucene.index.TermInfosReader.TermInfosReader(Directory,String,FieldInfos,int,int)",12,2,n/a,43,3,5,23,5
"org.apache.lucene.index.TermInfosReader.close()",2,1,n/a,5,0,0,3,2
"org.apache.lucene.index.TermInfosReader.ensureIndexIsRead()",1,2,n/a,5,1,0,2,2
"org.apache.lucene.index.TermInfosReader.get(Term)",2,3,n/a,5,0,1,2,1
"org.apache.lucene.index.TermInfosReader.get(Term,boolean,BytesRef)",29,2,n/a,66,5,3,38,18
"org.apache.lucene.index.TermInfosReader.getMaxSkipLevels()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.TermInfosReader.getPosition(Term)",10,0,n/a,14,1,1,11,5
"org.apache.lucene.index.TermInfosReader.getSkipInterval()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.index.TermInfosReader.getThreadResources()",4,3,n/a,9,1,0,6,2
"org.apache.lucene.index.TermInfosReader.sameTermInfo(TermInfo,TermInfo,SegmentTermEnum)",0,2,n/a,18,1,3,9,6
"org.apache.lucene.index.TermInfosReader.size()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.TermInfosReader.terms()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.index.TermInfosReader.terms(Term)",4,1,n/a,6,0,1,3,1
"org.apache.lucene.index.TermInfosReaderIndex.TermInfosReaderIndex(SegmentTermEnum,int,long,int)",26,1,n/a,57,3,4,41,7
"org.apache.lucene.index.TermInfosReaderIndex.compareField(Term,int,PagedBytesDataInput)",4,1,n/a,16,0,3,2,1
"org.apache.lucene.index.TermInfosReaderIndex.compareTo(Term,BytesRef,int)",3,1,n/a,14,0,3,1,1
"org.apache.lucene.index.TermInfosReaderIndex.compareTo(Term,BytesRef,int,PagedBytesDataInput,BytesRef)",5,2,n/a,25,1,5,7,2
"org.apache.lucene.index.TermInfosReaderIndex.estimatePageBits(long)",3,1,n/a,3,0,1,1,1
"org.apache.lucene.index.TermInfosReaderIndex.getIndexOffset(Term,BytesRef)",3,2,n/a,24,1,2,13,4
"org.apache.lucene.index.TermInfosReaderIndex.getTerm(int)",6,0,n/a,16,0,1,5,1
"org.apache.lucene.index.TermInfosReaderIndex.length()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.index.TermInfosReaderIndex.seekEnum(SegmentTermEnum,int)",13,2,n/a,21,1,2,14,2
"org.apache.lucene.index.TermInfosWriter.TermInfosWriter(Directory,String,FieldInfos,int)",3,1,n/a,15,2,4,8,2
"org.apache.lucene.index.TermInfosWriter.TermInfosWriter(Directory,String,FieldInfos,int,boolean)",1,1,n/a,4,0,5,1,1
"org.apache.lucene.index.TermInfosWriter.add(Term,TermInfo)",4,0,n/a,4,0,2,2,1
"org.apache.lucene.index.TermInfosWriter.add(int,byte[],int,TermInfo)",15,3,n/a,29,1,4,17,8
"org.apache.lucene.index.TermInfosWriter.close()",4,1,n/a,15,3,0,7,2
"org.apache.lucene.index.TermInfosWriter.compareToLastTerm(int,byte[],int)",5,1,n/a,31,1,3,20,9
"org.apache.lucene.index.TermInfosWriter.initUTF16Results()",2,1,n/a,6,0,0,3,1
"org.apache.lucene.index.TermInfosWriter.initialize(Directory,String,FieldInfos,int,boolean)",8,2,n/a,21,2,5,15,3
"org.apache.lucene.index.TermInfosWriter.writeTerm(int,byte[],int)",6,1,n/a,22,1,3,15,5
"org.apache.lucene.index.TermPositionVector.getOffsets(int)",n/a,10,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermPositionVector.getTermPositions(int)",n/a,10,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermPositions.getPayload(byte[],int)",n/a,12,8,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.TermPositions.getPayloadLength()",n/a,14,8,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermPositions.isPayloadAvailable()",n/a,9,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermPositions.nextPosition()",n/a,26,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermVectorAccessor.TermVectorAccessor()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.isIgnoringOffsets()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.isIgnoringPositions()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.map(String,int,TermVectorOffsetInfo[],int[])",1,7,n/a,4,0,4,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.setDocumentNumber(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator.setExpectations(String,int,boolean,boolean)",1,6,n/a,5,0,4,2,1
"org.apache.lucene.index.TermVectorAccessor.accept(IndexReader,int,String,TermVectorMapper)",4,4,n/a,20,1,4,7,2
"org.apache.lucene.index.TermVectorAccessor.build(IndexReader,String,TermVectorMapper,int)",38,1,n/a,50,5,4,32,9
"org.apache.lucene.index.TermVectorEntry.TermVectorEntry()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.index.TermVectorEntry.TermVectorEntry(String,String,int,TermVectorOffsetInfo[],int[])",0,2,n/a,7,0,5,5,1
"org.apache.lucene.index.TermVectorEntry.equals(Object)",3,0,n/a,8,0,1,8,6
"org.apache.lucene.index.TermVectorEntry.getField()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.index.TermVectorEntry.getFrequency()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.index.TermVectorEntry.getOffsets()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.TermVectorEntry.getPositions()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.TermVectorEntry.getTerm()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.index.TermVectorEntry.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.index.TermVectorEntry.setFrequency(int)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.index.TermVectorEntry.setOffsets(TermVectorOffsetInfo[])",0,2,n/a,3,0,1,1,1
"org.apache.lucene.index.TermVectorEntry.setPositions(int[])",0,2,n/a,3,0,1,1,1
"org.apache.lucene.index.TermVectorEntry.toString()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.index.TermVectorEntryFreqSortedComparator.compare(TermVectorEntry,TermVectorEntry)",8,0,n/a,13,2,2,7,3
"org.apache.lucene.index.TermVectorMapper.TermVectorMapper()",0,2,n/a,2,0,0,0,1
"org.apache.lucene.index.TermVectorMapper.TermVectorMapper(boolean,boolean)",0,4,n/a,9,0,2,2,1
"org.apache.lucene.index.TermVectorMapper.isIgnoringOffsets()",0,2,n/a,9,0,0,1,1
"org.apache.lucene.index.TermVectorMapper.isIgnoringPositions()",0,6,n/a,10,0,0,1,1
"org.apache.lucene.index.TermVectorMapper.map(String,int,TermVectorOffsetInfo[],int[])",n/a,7,6,n/a,n/a,4,n/a,n/a
"org.apache.lucene.index.TermVectorMapper.setDocumentNumber(int)",0,6,n/a,12,0,1,0,1
"org.apache.lucene.index.TermVectorMapper.setExpectations(String,int,boolean,boolean)",n/a,6,6,n/a,n/a,4,n/a,n/a
"org.apache.lucene.index.TermVectorOffsetInfo.TermVectorOffsetInfo()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.index.TermVectorOffsetInfo.TermVectorOffsetInfo(int,int)",0,4,n/a,4,0,2,2,1
"org.apache.lucene.index.TermVectorOffsetInfo.equals(Object)",0,0,n/a,14,0,1,10,5
"org.apache.lucene.index.TermVectorOffsetInfo.getEndOffset()",0,7,n/a,7,0,0,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.getStartOffset()",0,7,n/a,8,0,0,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.hashCode()",0,0,n/a,7,0,0,4,1
"org.apache.lucene.index.TermVectorOffsetInfo.setEndOffset(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.TermVectorOffsetInfo.setStartOffset(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.index.TermVectorsReader.TermVectorsReader(Directory,String,FieldInfos)",1,0,n/a,4,0,3,1,1
"org.apache.lucene.index.TermVectorsReader.TermVectorsReader(Directory,String,FieldInfos,int)",1,1,n/a,4,0,4,1,1
"org.apache.lucene.index.TermVectorsReader.TermVectorsReader(Directory,String,FieldInfos,int,int,int)",13,2,n/a,45,2,6,28,5
"org.apache.lucene.index.TermVectorsReader.canReadRawDocs()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.TermVectorsReader.checkValidFormat(String,IndexInput)",2,3,n/a,8,1,2,4,2
"org.apache.lucene.index.TermVectorsReader.clone()",4,1,n/a,12,1,0,6,4
"org.apache.lucene.index.TermVectorsReader.close()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.TermVectorsReader.get(int)",7,1,n/a,26,2,1,11,3
"org.apache.lucene.index.TermVectorsReader.get(int,String)",3,1,n/a,13,0,2,3,1
"org.apache.lucene.index.TermVectorsReader.get(int,String,TermVectorMapper)",12,2,n/a,46,2,3,27,8
"org.apache.lucene.index.TermVectorsReader.get(int,TermVectorMapper)",8,1,n/a,19,2,2,10,3
"org.apache.lucene.index.TermVectorsReader.getTvdStream()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.TermVectorsReader.getTvfStream()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.TermVectorsReader.rawDocs(int[],int[],int,int)",12,2,n/a,42,2,4,28,5
"org.apache.lucene.index.TermVectorsReader.readFields(int)",3,2,n/a,14,1,1,10,3
"org.apache.lucene.index.TermVectorsReader.readTermVector(String,long,TermVectorMapper)",24,3,n/a,107,4,3,74,16
"org.apache.lucene.index.TermVectorsReader.readTermVectors(String[],long[],TermVectorMapper)",1,1,n/a,6,1,3,4,2
"org.apache.lucene.index.TermVectorsReader.readTermVectors(int,String[],long[])",4,1,n/a,11,1,3,9,2
"org.apache.lucene.index.TermVectorsReader.readTvfPointers(int)",3,2,n/a,17,1,1,12,3
"org.apache.lucene.index.TermVectorsReader.seekTvx(int)",2,4,n/a,6,0,1,3,2
"org.apache.lucene.index.TermVectorsReader.size()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.abort()",2,5,n/a,5,0,0,2,1
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.addField(int)",3,1,n/a,11,1,1,7,3
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.finish()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.reset()",2,3,n/a,5,0,0,3,1
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc.sizeInBytes()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.TermVectorsTermsWriter(DocumentsWriter)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.abort()",11,1,n/a,24,1,0,12,5
"org.apache.lucene.index.TermVectorsTermsWriter.addThread(TermsHashPerThread)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.TermVectorsTermsWriter.fill(int)",5,2,n/a,13,2,1,7,3
"org.apache.lucene.index.TermVectorsTermsWriter.finishDocument(PerDoc)",14,1,n/a,28,2,1,26,4
"org.apache.lucene.index.TermVectorsTermsWriter.flush(Map<TermsHashConsumerPerThread, Collection<TermsHashConsumerPerField>>,SegmentWriteState)",13,1,n/a,34,3,2,19,5
"org.apache.lucene.index.TermVectorsTermsWriter.free(PerDoc)",0,2,n/a,4,0,1,2,1
"org.apache.lucene.index.TermVectorsTermsWriter.getPerDoc()",2,1,n/a,15,2,0,7,3
"org.apache.lucene.index.TermVectorsTermsWriter.initTermVectorsWriter()",13,1,n/a,24,3,0,14,3
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray.TermVectorsPostingsArray(int)",1,2,n/a,6,0,1,4,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray.bytesPerPosting()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray.copyTo(ParallelPostingsArray,int)",4,3,n/a,9,0,2,6,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray.newInstance(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsTermsWriterPerField(TermsHashPerField,TermVectorsTermsWriterPerThread,FieldInfo)",0,1,n/a,8,0,3,6,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.abort()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.addTerm(int)",6,2,n/a,17,1,1,12,3
"org.apache.lucene.index.TermVectorsTermsWriterPerField.createPostingsArray(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.finish()",17,1,n/a,81,3,0,57,13
"org.apache.lucene.index.TermVectorsTermsWriterPerField.getStreamCount()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.newTerm(int)",6,2,n/a,17,1,1,12,3
"org.apache.lucene.index.TermVectorsTermsWriterPerField.shrinkHash()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.skippingLongTerm()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.index.TermVectorsTermsWriterPerField.start(Fieldable)",1,1,n/a,8,1,1,3,2
"org.apache.lucene.index.TermVectorsTermsWriterPerField.start(Fieldable[],int)",9,1,n/a,34,2,2,23,7
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.TermVectorsTermsWriterPerThread(TermsHashPerThread,TermVectorsTermsWriter)",0,1,n/a,5,0,2,3,1
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.abort()",1,1,n/a,7,1,0,3,2
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.addField(TermsHashPerField,FieldInfo)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.clearLastVectorFieldName()",0,1,n/a,5,0,0,2,1
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.finishDocument()",0,2,n/a,8,1,0,3,1
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.startDocument()",2,2,n/a,8,1,0,4,2
"org.apache.lucene.index.TermVectorsTermsWriterPerThread.vectorFieldsInOrder(FieldInfo)",1,1,n/a,10,1,1,5,2
"org.apache.lucene.index.TermVectorsWriter.TermVectorsWriter(Directory,String,FieldInfos)",10,1,n/a,21,2,3,14,2
"org.apache.lucene.index.TermVectorsWriter.addAllDocVectors(TermFreqVector[])",36,2,n/a,98,5,1,79,17
"org.apache.lucene.index.TermVectorsWriter.addRawDocuments(TermVectorsReader,int[],int[],int)",10,2,n/a,21,1,4,15,2
"org.apache.lucene.index.TermVectorsWriter.close()",1,1,n/a,6,0,0,1,1
"org.apache.lucene.index.TermVectorsWriter.finish(int)",5,1,n/a,11,1,1,3,2
"org.apache.lucene.index.TermsHash.TermsHash(DocumentsWriter,boolean,TermsHashConsumer,TermsHash)",0,2,n/a,6,0,4,4,1
"org.apache.lucene.index.TermsHash.abort()",2,2,n/a,10,2,0,4,2
"org.apache.lucene.index.TermsHash.addThread(DocInverterPerThread)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.TermsHash.addThread(DocInverterPerThread,TermsHashPerThread)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.index.TermsHash.flush(Map<InvertedDocConsumerPerThread, Collection<InvertedDocConsumerPerField>>,SegmentWriteState)",16,2,n/a,32,2,2,25,8
"org.apache.lucene.index.TermsHash.freeRAM()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.TermsHash.setFieldInfos(FieldInfos)",1,1,n/a,5,0,1,2,1
"org.apache.lucene.index.TermsHashConsumer.abort()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermsHashConsumer.addThread(TermsHashPerThread)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermsHashConsumer.flush(Map<TermsHashConsumerPerThread, Collection<TermsHashConsumerPerField>>,SegmentWriteState)",n/a,1,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.TermsHashConsumer.setFieldInfos(FieldInfos)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.TermsHashConsumerPerField.addTerm(int)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerField.createPostingsArray(int)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerField.finish()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerField.getStreamCount()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerField.newTerm(int)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerField.skippingLongTerm()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerField.start(Fieldable)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerField.start(Fieldable[],int)",n/a,1,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerThread.abort()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerThread.addField(TermsHashPerField,FieldInfo)",n/a,1,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerThread.finishDocument()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermsHashConsumerPerThread.startDocument()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TermsHashPerField.TermsHashPerField(DocInverterPerField,TermsHashPerThread,TermsHashPerThread,FieldInfo)",6,1,n/a,20,0,4,17,2
"org.apache.lucene.index.TermsHashPerField.abort()",2,2,n/a,6,0,0,3,2
"org.apache.lucene.index.TermsHashPerField.add()",17,2,n/a,111,4,0,72,24
"org.apache.lucene.index.TermsHashPerField.add(int)",7,1,n/a,55,2,1,39,11
"org.apache.lucene.index.TermsHashPerField.bytesUsed(long)",1,6,n/a,6,1,1,2,2
"org.apache.lucene.index.TermsHashPerField.compactPostings()",0,2,n/a,14,3,0,11,4
"org.apache.lucene.index.TermsHashPerField.finish()",2,2,n/a,10,2,0,4,2
"org.apache.lucene.index.TermsHashPerField.growParallelPostingsArray()",3,2,n/a,5,0,0,3,1
"org.apache.lucene.index.TermsHashPerField.initPostingsArray()",3,2,n/a,4,0,0,2,1
"org.apache.lucene.index.TermsHashPerField.initReader(ByteSliceReader,int,int)",1,4,n/a,9,0,3,5,1
"org.apache.lucene.index.TermsHashPerField.postingEquals(int,char[],int)",0,2,n/a,13,0,3,10,3
"org.apache.lucene.index.TermsHashPerField.rehashPostings(int)",1,2,n/a,39,4,1,32,8
"org.apache.lucene.index.TermsHashPerField.reset()",3,6,n/a,12,1,0,9,4
"org.apache.lucene.index.TermsHashPerField.shrinkHash(int)",4,2,n/a,18,1,1,13,4
"org.apache.lucene.index.TermsHashPerField.sortPostings()",5,2,n/a,20,4,0,38,8
"org.apache.lucene.index.TermsHashPerField.start(Fieldable)",3,3,n/a,8,1,1,4,2
"org.apache.lucene.index.TermsHashPerField.start(Fieldable[],int)",3,2,n/a,10,1,2,6,4
"org.apache.lucene.index.TermsHashPerField.writeByte(int,byte)",1,3,n/a,14,1,2,10,2
"org.apache.lucene.index.TermsHashPerField.writeBytes(int,byte[],int,int)",1,1,n/a,6,0,4,5,2
"org.apache.lucene.index.TermsHashPerField.writeVInt(int,int)",2,13,n/a,8,1,2,5,2
"org.apache.lucene.index.TermsHashPerThread.TermsHashPerThread(DocInverterPerThread,TermsHash,TermsHash,TermsHashPerThread)",5,2,n/a,19,1,4,13,3
"org.apache.lucene.index.TermsHashPerThread.abort()",3,2,n/a,11,2,0,5,2
"org.apache.lucene.index.TermsHashPerThread.addField(DocInverterPerField,FieldInfo)",1,2,n/a,4,0,2,1,1
"org.apache.lucene.index.TermsHashPerThread.finishDocument()",3,1,n/a,15,1,0,9,3
"org.apache.lucene.index.TermsHashPerThread.reset(boolean)",3,5,n/a,7,0,1,4,2
"org.apache.lucene.index.TermsHashPerThread.startDocument()",2,1,n/a,6,0,0,3,2
"org.apache.lucene.index.TestFieldNormModifier.setUp()",20,0,n/a,19,2,0,17,3
"org.apache.lucene.index.TestFieldNormModifier.tearDown()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.index.TestFieldNormModifier.testFieldWithNoNorm()",14,0,n/a,20,1,0,13,2
"org.apache.lucene.index.TestFieldNormModifier.testGoodCases()",22,0,n/a,4,2,0,36,3
"org.apache.lucene.index.TestFieldNormModifier.testMissingField()",2,0,n/a,8,1,0,3,2
"org.apache.lucene.index.TestFieldNormModifier.testNormKiller()",20,0,n/a,4,2,0,27,2
"org.apache.lucene.index.TestIndexSorter.setUp()",21,0,n/a,56,4,0,50,10
"org.apache.lucene.index.TestIndexSorter.testSorting()",16,0,n/a,20,1,0,17,2
"org.apache.lucene.index.TestIndexSplitter.test()",58,0,n/a,61,1,0,56,4
"org.apache.lucene.index.TestIndexSplitter.testDeleteThenFullMerge()",51,0,n/a,54,0,0,41,1
"org.apache.lucene.index.TestMultiPassIndexSplitter.setUp()",17,0,n/a,18,1,0,16,3
"org.apache.lucene.index.TestMultiPassIndexSplitter.tearDown()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.index.TestMultiPassIndexSplitter.testSplitRR()",43,0,n/a,44,0,0,35,2
"org.apache.lucene.index.TestMultiPassIndexSplitter.testSplitSeq()",33,0,n/a,38,0,0,28,2
"org.apache.lucene.index.TestPKIndexSplitter.checkContents(IndexReader,String)",5,2,n/a,7,2,2,5,3
"org.apache.lucene.index.TestPKIndexSplitter.checkSplitting(Directory,Term,int,int)",20,2,n/a,18,0,4,14,1
"org.apache.lucene.index.TestPKIndexSplitter.createDocument(int,String,int,NumberFormat)",17,2,n/a,17,1,4,15,2
"org.apache.lucene.index.TestPKIndexSplitter.testSplit()",29,0,n/a,29,1,0,26,5
"org.apache.lucene.index.TestPruningReader.assertTD(IndexReader,Term,int[])",7,14,n/a,15,2,3,10,2
"org.apache.lucene.index.TestPruningReader.assertTDCount(IndexReader,Term,int)",6,6,n/a,11,1,3,8,2
"org.apache.lucene.index.TestPruningReader.initFullScores()",29,1,n/a,47,0,0,19,1
"org.apache.lucene.index.TestPruningReader.initPrunedScores()",24,1,n/a,42,0,0,19,1
"org.apache.lucene.index.TestPruningReader.printDocScores(Map<Term, ScoreDoc[]>,IndexReader,Term)",7,1,n/a,12,1,3,8,2
"org.apache.lucene.index.TestPruningReader.setUp()",58,0,n/a,41,0,0,38,1
"org.apache.lucene.index.TestPruningReader.testCarmelTopKPruning()",14,0,n/a,19,0,0,13,1
"org.apache.lucene.index.TestPruningReader.testRIDFPruning()",16,0,n/a,13,0,0,10,1
"org.apache.lucene.index.TestPruningReader.testRemoveFields()",30,0,n/a,30,1,0,23,2
"org.apache.lucene.index.TestPruningReader.testTfPruning()",32,0,n/a,25,0,0,21,1
"org.apache.lucene.index.TestPruningReader.testThresholds()",13,0,n/a,11,0,0,9,1
"org.apache.lucene.index.TestPruningReader.validateDocScores(Map<Term, ScoreDoc[]>,IndexReader,Term,boolean,boolean)",12,5,n/a,18,2,5,14,4
"org.apache.lucene.index.TestPruningReader.validateDocScores(Map<Term, ScoreDoc[]>,IndexReader,boolean,boolean)",10,2,n/a,7,0,4,5,1
"org.apache.lucene.index.TestTermVectorAccessor.test()",79,0,n/a,60,1,0,59,2
"org.apache.lucene.index.TieredMergePolicy.MergeScore.getExplanation()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TieredMergePolicy.MergeScore.getScore()",n/a,4,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.index.TieredMergePolicy.SegmentByteSizeDescending.compare(SegmentInfo,SegmentInfo)",4,0,n/a,15,2,2,9,4
"org.apache.lucene.index.TieredMergePolicy.close()",0,4,n/a,3,0,0,0,1
"org.apache.lucene.index.TieredMergePolicy.findForcedDeletesMerges(SegmentInfos)",26,2,n/a,40,2,1,25,10
"org.apache.lucene.index.TieredMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",39,3,n/a,61,3,3,41,20
"org.apache.lucene.index.TieredMergePolicy.findMerges(SegmentInfos)",65,4,n/a,133,5,1,93,31
"org.apache.lucene.index.TieredMergePolicy.floorSize(long)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.getForceMergeDeletesPctAllowed()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnceExplicit()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.getNoCFSRatio()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.getReclaimDeletesWeight()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.getUseCompoundFile()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.index.TieredMergePolicy.isMerged(SegmentInfo)",5,1,n/a,10,0,1,4,5
"org.apache.lucene.index.TieredMergePolicy.message(String)",3,14,n/a,5,1,1,2,2
"org.apache.lucene.index.TieredMergePolicy.score(List<SegmentInfo>,boolean,long)",11,1,n/a,4,2,3,20,3
"org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double)",1,1,n/a,12,1,1,4,2
"org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double)",1,1,n/a,10,1,1,4,3
"org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int)",1,4,n/a,11,1,1,4,2
"org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int)",1,2,n/a,9,1,1,4,2
"org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double)",0,1,n/a,9,0,1,2,1
"org.apache.lucene.index.TieredMergePolicy.setNoCFSRatio(double)",1,1,n/a,12,1,1,4,3
"org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double)",1,1,n/a,11,1,1,4,2
"org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double)",1,3,n/a,15,1,1,4,2
"org.apache.lucene.index.TieredMergePolicy.setUseCompoundFile(boolean)",0,3,n/a,7,0,1,2,1
"org.apache.lucene.index.TieredMergePolicy.size(SegmentInfo)",3,10,n/a,8,0,1,5,2
"org.apache.lucene.index.TieredMergePolicy.toString()",27,0,n/a,13,0,0,10,1
"org.apache.lucene.index.TieredMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",2,4,n/a,15,1,2,10,4
"org.apache.lucene.index.TieredMergePolicy.verbose()",2,12,n/a,4,0,0,2,2
"org.apache.lucene.index.UpgradeIndexMergePolicy.UpgradeIndexMergePolicy(MergePolicy)",0,1,n/a,5,0,1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.close()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedDeletesMerges(SegmentInfos)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedMerges(SegmentInfos,int,Map<SegmentInfo, Boolean>)",21,3,n/a,40,3,3,24,13
"org.apache.lucene.index.UpgradeIndexMergePolicy.findMerges(SegmentInfos)",1,4,n/a,4,0,1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.message(String)",3,2,n/a,4,0,1,2,2
"org.apache.lucene.index.UpgradeIndexMergePolicy.setIndexWriter(IndexWriter)",2,5,n/a,5,0,1,2,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.shouldUpgradeSegment(SegmentInfo)",2,1,n/a,8,0,1,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.toString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.useCompoundFile(SegmentInfos,SegmentInfo)",1,4,n/a,4,0,2,1,1
"org.apache.lucene.index.UpgradeIndexMergePolicy.verbose()",2,3,n/a,4,0,0,2,2
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.ArrayIntList(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.add(int)",1,1,n/a,4,0,1,3,2
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.add(int,int,int)",1,1,n/a,7,0,3,6,2
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.ensureCapacity(int)",2,2,n/a,6,0,1,4,1
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.get(int)",1,6,n/a,4,0,1,3,2
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.size()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.throwIndex(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.toArray(int)",2,0,n/a,9,1,1,8,3
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList.toString(int)",10,1,n/a,14,1,1,14,4
"org.apache.lucene.index.memory.MemoryIndex.Info.Info(HashMap<String, ArrayIntList>,int,int,float)",0,1,n/a,6,0,4,4,1
"org.apache.lucene.index.memory.MemoryIndex.Info.getBoost()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.index.memory.MemoryIndex.Info.getPositions(String)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.Info.getPositions(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.Info.sortTerms()",1,7,n/a,11,0,0,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndex()",1,2,n/a,6,0,0,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndex(boolean)",1,1,n/a,15,0,1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.MemoryIndexReader()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doClose()",1,1,n/a,4,0,0,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doCommit(Map<String, String>)",1,1,n/a,5,0,1,2,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doDelete(int)",1,1,n/a,5,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doSetNorm(int,String,byte)",1,2,n/a,5,0,3,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.doUndeleteAll()",1,1,n/a,5,0,0,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.docFreq(Term)",5,28,n/a,8,0,1,7,4
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.document(int,FieldSelector)",2,20,n/a,6,0,2,3,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getFieldInfos()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getInfo(String)",1,5,n/a,3,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getInfo(int)",1,7,n/a,3,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getSimilarity()",2,1,n/a,4,0,0,3,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getTermFreqVector(int,String)",16,32,n/a,14,3,2,40,9
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getTermFreqVector(int,String,TermVectorMapper)",15,8,n/a,25,2,3,19,5
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getTermFreqVector(int,TermVectorMapper)",3,3,n/a,10,1,2,4,3
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.getTermFreqVectors(int)",6,8,n/a,11,1,1,9,3
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.hasDeletions()",1,28,n/a,5,0,0,3,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.isDeleted(int)",1,33,n/a,5,0,1,3,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.maxDoc()",1,137,n/a,5,0,0,3,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.norms(String)",7,30,n/a,21,1,1,17,7
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.norms(String,byte[],int)",3,12,n/a,6,0,3,4,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.numDocs()",2,83,n/a,5,0,0,3,3
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.setSearcher(Searcher)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.termDocs()",2,28,n/a,5,0,0,3,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.termPositions()",23,11,n/a,4,3,0,48,16
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.terms()",2,13,n/a,5,0,0,3,2
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader.terms(Term)",31,60,n/a,11,3,1,63,21
"org.apache.lucene.index.memory.MemoryIndex.addField(String,String,Analyzer)",7,0,n/a,31,1,3,11,5
"org.apache.lucene.index.memory.MemoryIndex.addField(String,TokenStream)",1,3,n/a,11,0,2,1,1
"org.apache.lucene.index.memory.MemoryIndex.addField(String,TokenStream,float)",28,1,n/a,71,3,3,44,14
"org.apache.lucene.index.memory.MemoryIndex.createSearcher()",3,3,n/a,12,0,0,4,1
"org.apache.lucene.index.memory.MemoryIndex.getMemorySize()",1,1,n/a,8,0,0,1,1
"org.apache.lucene.index.memory.MemoryIndex.keywordTokenStream(Collection<T>)",15,1,n/a,13,2,1,14,4
"org.apache.lucene.index.memory.MemoryIndex.numPositions(ArrayIntList)",1,6,n/a,3,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndex.search(Query)",6,0,n/a,2,3,1,12,3
"org.apache.lucene.index.memory.MemoryIndex.sort(HashMap<K, V>)",5,2,n/a,12,1,1,10,3
"org.apache.lucene.index.memory.MemoryIndex.sortFields()",1,2,n/a,4,0,0,2,2
"org.apache.lucene.index.memory.MemoryIndex.toString()",27,0,n/a,40,2,0,34,3
"org.apache.lucene.index.memory.MemoryIndexTest.EmptyMTQ.getEnum(IndexReader)",1,5,n/a,4,2,1,4,1
"org.apache.lucene.index.memory.MemoryIndexTest.EmptyMTQ.getField()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.index.memory.MemoryIndexTest.EmptyMTQ.toString(String)",0,47,n/a,4,0,1,1,1
"org.apache.lucene.index.memory.MemoryIndexTest.assertAgainstRAMDirectory()",38,1,n/a,44,1,0,34,4
"org.apache.lucene.index.memory.MemoryIndexTest.assertAllQueries(MemoryIndex,Directory,Analyzer)",12,1,n/a,17,1,3,11,2
"org.apache.lucene.index.memory.MemoryIndexTest.randomAnalyzer()",4,1,n/a,10,1,0,7,4
"org.apache.lucene.index.memory.MemoryIndexTest.randomTerm()",3,2,n/a,13,1,0,3,2
"org.apache.lucene.index.memory.MemoryIndexTest.readQueries(String)",11,2,n/a,16,2,1,9,5
"org.apache.lucene.index.memory.MemoryIndexTest.setUp()",5,0,n/a,6,0,0,3,1
"org.apache.lucene.index.memory.MemoryIndexTest.testNullPointerException()",9,0,n/a,9,0,0,5,1
"org.apache.lucene.index.memory.MemoryIndexTest.testPassesIfWrapped()",10,0,n/a,9,0,0,5,1
"org.apache.lucene.index.memory.MemoryIndexTest.testRandomQueries()",1,0,n/a,7,0,0,4,2
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ByDocComparator.compare(ScoreDoc,ScoreDoc)",0,0,n/a,3,0,2,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.CarmelTopKTermPruningPolicy(IndexReader,Map<String, Integer>)",1,0,n/a,13,0,2,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.CarmelTopKTermPruningPolicy(IndexReader,Map<String, Integer>,int,float,int,Similarity)",4,3,n/a,24,0,6,5,2
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.ThresholdCollector(float)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.collect(int)",3,50,n/a,7,1,1,3,2
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.setNextReader(IndexReader,int)",0,19,n/a,5,0,2,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector.setScorer(Scorer)",0,27,n/a,4,0,1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.initPositionsTerm(TermPositions,Term)",13,0,n/a,40,1,2,25,4
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.pruneAllPositions(TermPositions,Term)",4,0,n/a,23,1,2,12,7
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.pruneSomePositions(int,int[],Term)",0,0,n/a,4,0,3,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.pruneTermEnum(TermEnum)",0,0,n/a,5,0,1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",0,0,n/a,7,0,5,1,1
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.ByDocComparator.compare(ScoreDoc,ScoreDoc)",0,0,n/a,3,0,2,1,1
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.CarmelUniformTermPruningPolicy(IndexReader,Map<String, Integer>,Map<String, Float>,float,Similarity)",5,0,n/a,18,1,5,10,3
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.initPositionsTerm(TermPositions,Term)",15,0,n/a,20,1,2,16,4
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.pruneAllPositions(TermPositions,Term)",4,0,n/a,20,1,2,10,6
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.pruneSomePositions(int,int[],Term)",0,0,n/a,4,0,3,1,1
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.pruneTermEnum(TermEnum)",0,0,n/a,5,0,1,1,1
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",0,0,n/a,7,0,5,1,1
"org.apache.lucene.index.pruning.PruningTool.main(String[])",2,0,n/a,4,0,1,2,1
"org.apache.lucene.index.pruning.PruningTool.run(String[])",77,1,n/a,127,5,1,101,31
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.RIDFTermPruningPolicy(IndexReader,Map<String, Integer>,Map<String, Double>,double)",3,1,n/a,12,1,4,6,2
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.initPositionsTerm(TermPositions,Term)",7,0,n/a,15,1,2,6,2
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.pruneAllPositions(TermPositions,Term)",8,0,n/a,16,1,2,9,4
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.pruneSomePositions(int,int[],Term)",0,0,n/a,4,0,3,1,1
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.pruneTermEnum(TermEnum)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",0,0,n/a,5,0,5,1,1
"org.apache.lucene.index.pruning.StorePruningPolicy.DelFieldSelector.DelFieldSelector(Map<String, Integer>)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.pruning.StorePruningPolicy.DelFieldSelector.accept(String)",5,3,n/a,12,2,1,8,6
"org.apache.lucene.index.pruning.StorePruningPolicy.DelFieldSelector.setParent(FieldSelector)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.index.pruning.StorePruningPolicy.StorePruningPolicy(IndexReader,Map<String, Integer>)",8,1,n/a,22,3,2,10,4
"org.apache.lucene.index.pruning.StorePruningPolicy.getFieldInfos(FieldInfos)",3,2,n/a,15,2,1,5,3
"org.apache.lucene.index.pruning.StorePruningPolicy.pruneDocument(int,FieldSelector)",4,1,n/a,18,1,2,4,2
"org.apache.lucene.index.pruning.TFTermPruningPolicy.TFTermPruningPolicy(IndexReader,Map<String, Integer>,Map<String, Integer>,int)",2,3,n/a,10,1,4,5,2
"org.apache.lucene.index.pruning.TFTermPruningPolicy.initPositionsTerm(TermPositions,Term)",8,0,n/a,11,1,2,6,3
"org.apache.lucene.index.pruning.TFTermPruningPolicy.pruneAllPositions(TermPositions,Term)",1,0,n/a,9,1,2,3,2
"org.apache.lucene.index.pruning.TFTermPruningPolicy.pruneSomePositions(int,int[],Term)",0,0,n/a,4,0,3,1,1
"org.apache.lucene.index.pruning.TFTermPruningPolicy.pruneTermEnum(TermEnum)",17,0,n/a,21,2,1,14,5
"org.apache.lucene.index.pruning.TFTermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",4,0,n/a,23,2,5,15,5
"org.apache.lucene.index.pruning.TermPruningPolicy.TermPruningPolicy(IndexReader,Map<String, Integer>)",1,0,n/a,15,1,2,4,2
"org.apache.lucene.index.pruning.TermPruningPolicy.initPositionsTerm(TermPositions,Term)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.pruning.TermPruningPolicy.pruneAllFieldPostings(String)",2,2,n/a,15,1,1,3,3
"org.apache.lucene.index.pruning.TermPruningPolicy.pruneAllPositions(TermPositions,Term)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.index.pruning.TermPruningPolicy.prunePayload(TermPositions,Term)",4,1,n/a,14,1,2,3,3
"org.apache.lucene.index.pruning.TermPruningPolicy.pruneSomePositions(int,int[],Term)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.lucene.index.pruning.TermPruningPolicy.pruneTermEnum(TermEnum)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.index.pruning.TermPruningPolicy.pruneTermVectorTerms(int,String,String[],int[],TermFreqVector)",n/a,1,0,n/a,n/a,5,n/a,n/a
"org.apache.lucene.index.pruning.TermPruningPolicy.pruneWholeTermVector(int,String)",2,1,n/a,17,1,2,3,3
"org.apache.lucene.messages.Message.getArguments()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.messages.Message.getKey()",n/a,5,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.messages.Message.getLocalizedMessage()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.messages.Message.getLocalizedMessage(Locale)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.messages.MessageImpl.MessageImpl(String)",0,9,n/a,3,0,1,1,1
"org.apache.lucene.messages.MessageImpl.MessageImpl(String,Object...)",1,16,n/a,4,0,2,2,1
"org.apache.lucene.messages.MessageImpl.getArguments()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.messages.MessageImpl.getKey()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.messages.MessageImpl.getLocalizedMessage()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.messages.MessageImpl.getLocalizedMessage(Locale)",3,1,n/a,3,0,1,1,1
"org.apache.lucene.messages.MessageImpl.toString()",6,0,n/a,11,2,0,8,4
"org.apache.lucene.messages.MessagesTestBundle.MessagesTestBundle()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.messages.NLS.NLS()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.messages.NLS.getLocalizedMessage(String)",2,2,n/a,3,0,1,1,1
"org.apache.lucene.messages.NLS.getLocalizedMessage(String,Locale)",2,1,n/a,8,1,2,4,2
"org.apache.lucene.messages.NLS.getLocalizedMessage(String,Locale,Object...)",2,0,n/a,8,1,3,4,2
"org.apache.lucene.messages.NLS.getLocalizedMessage(String,Object...)",2,0,n/a,3,0,2,1,1
"org.apache.lucene.messages.NLS.getResourceBundleObject(String,Locale)",8,1,n/a,20,3,2,10,5
"org.apache.lucene.messages.NLS.initializeMessages(String,Class<? extends NLS>)",3,1,n/a,19,1,2,4,3
"org.apache.lucene.messages.NLS.load(Class<? extends NLS>)",6,1,n/a,14,1,1,9,2
"org.apache.lucene.messages.NLS.loadfieldValue(Field,boolean,Class<? extends NLS>)",6,1,n/a,22,1,3,9,5
"org.apache.lucene.messages.NLS.makeAccessible(Field)",5,1,n/a,4,3,1,5,2
"org.apache.lucene.messages.NLS.validateMessage(String,Class<? extends NLS>)",8,1,n/a,24,2,2,7,5
"org.apache.lucene.messages.NLSException.getMessageObject()",n/a,0,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.messages.TestNLS.testMessageLoading()",6,0,n/a,10,0,0,3,2
"org.apache.lucene.messages.TestNLS.testMessageLoading_ja()",3,0,n/a,6,0,0,2,1
"org.apache.lucene.messages.TestNLS.testMissingMessage()",3,0,n/a,7,0,0,3,1
"org.apache.lucene.messages.TestNLS.testNLSLoading()",10,0,n/a,18,0,0,6,3
"org.apache.lucene.messages.TestNLS.testNLSLoading_ja()",4,0,n/a,9,0,0,4,1
"org.apache.lucene.messages.TestNLS.testNLSLoading_xx_XX()",11,0,n/a,20,0,0,7,3
"org.apache.lucene.misc.GetTermInfo.getTermInfo(Directory,Term)",6,1,n/a,6,0,2,3,1
"org.apache.lucene.misc.GetTermInfo.main(String[])",6,0,n/a,15,1,1,11,2
"org.apache.lucene.misc.GetTermInfo.usage()",2,1,n/a,5,0,0,1,1
"org.apache.lucene.misc.HighFreqTerms.getHighFreqTerms(IndexReader,int,String)",23,1,n/a,39,4,3,18,8
"org.apache.lucene.misc.HighFreqTerms.getTotalTermFreq(IndexReader,Term)",3,1,n/a,8,1,2,5,2
"org.apache.lucene.misc.HighFreqTerms.main(String[])",12,0,n/a,45,3,1,30,10
"org.apache.lucene.misc.HighFreqTerms.sortByTotalTermFreq(IndexReader,TermStats[])",4,1,n/a,22,1,2,10,2
"org.apache.lucene.misc.HighFreqTerms.usage()",1,1,n/a,5,0,0,1,1
"org.apache.lucene.misc.IndexMergeTool.main(String[])",16,0,n/a,20,1,1,16,3
"org.apache.lucene.misc.SweetSpotSimilarity.SweetSpotSimilarity()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.misc.SweetSpotSimilarity.baselineTf(float)",1,3,n/a,19,0,1,3,3
"org.apache.lucene.misc.SweetSpotSimilarity.computeLengthNorm(String,int)",12,1,n/a,44,1,2,10,4
"org.apache.lucene.misc.SweetSpotSimilarity.computeNorm(String,FieldInvertState)",8,27,n/a,19,1,2,8,3
"org.apache.lucene.misc.SweetSpotSimilarity.hyperbolicTf(float)",5,1,n/a,35,0,1,9,3
"org.apache.lucene.misc.SweetSpotSimilarity.setBaselineTfFactors(float,float)",0,1,n/a,9,0,2,2,1
"org.apache.lucene.misc.SweetSpotSimilarity.setHyperbolicTfFactors(float,float,double,float)",0,1,n/a,16,0,4,4,1
"org.apache.lucene.misc.SweetSpotSimilarity.setLengthNormFactors(String,int,int,float,boolean)",8,0,n/a,21,0,5,4,1
"org.apache.lucene.misc.SweetSpotSimilarity.setLengthNormFactors(int,int,float)",0,1,n/a,11,0,3,3,1
"org.apache.lucene.misc.SweetSpotSimilarity.tf(int)",1,23,n/a,9,0,1,1,1
"org.apache.lucene.misc.SweetSpotSimilarityTest.testHyperbolicSweetSpot()",13,0,n/a,4,2,0,11,2
"org.apache.lucene.misc.SweetSpotSimilarityTest.testSweetSpotComputeNorm()",50,0,n/a,100,1,0,75,11
"org.apache.lucene.misc.SweetSpotSimilarityTest.testSweetSpotTf()",25,0,n/a,34,1,0,28,6
"org.apache.lucene.misc.TermInfoWiTFQueue.TermInfoWiTFQueue(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.misc.TermInfoWiTFQueue.lessThan(TermStats,TermStats)",0,6,n/a,5,0,2,1,1
"org.apache.lucene.misc.TermStats.TermStats(Term,int)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.misc.TermStats.TermStats(Term,int,long)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.misc.TestHighFreqTerms.getContent(int)",1,1,n/a,15,2,1,9,3
"org.apache.lucene.misc.TestHighFreqTerms.getExpecteddocFreq(int)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.getExpectedtotalTermFreq(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.misc.TestHighFreqTerms.indexDocs(IndexWriter)",24,1,n/a,53,2,1,46,7
"org.apache.lucene.misc.TestHighFreqTerms.setUpClass()",7,0,n/a,9,0,0,4,1
"org.apache.lucene.misc.TestHighFreqTerms.tearDownClass()",2,0,n/a,7,0,0,4,1
"org.apache.lucene.misc.TestHighFreqTerms.testFirstTermHighestDocFreq()",2,0,n/a,6,0,0,4,1
"org.apache.lucene.misc.TestHighFreqTerms.testFirstTermHighestDocFreqAllFields()",2,0,n/a,9,0,0,4,1
"org.apache.lucene.misc.TestHighFreqTerms.testFirstTermHighestTotalTermFreq()",3,0,n/a,8,0,0,5,1
"org.apache.lucene.misc.TestHighFreqTerms.testFirstTermHighestTotalTermFreqDifferentField()",4,0,n/a,7,0,0,5,1
"org.apache.lucene.misc.TestHighFreqTerms.testGetHighFreqTerms()",9,0,n/a,20,3,0,13,4
"org.apache.lucene.misc.TestHighFreqTerms.testGetTermFreqOrdered()",12,0,n/a,24,3,0,15,4
"org.apache.lucene.misc.TestHighFreqTerms.testGetTotalTermFreq()",3,0,n/a,8,0,0,5,1
"org.apache.lucene.misc.TestHighFreqTerms.testGetTotalTermFreqBadTerm()",3,0,n/a,7,0,0,5,1
"org.apache.lucene.misc.TestHighFreqTerms.testNumTerms()",2,0,n/a,6,0,0,4,1
"org.apache.lucene.misc.TestHighFreqTerms.testOrderedByDocFreqDescending()",2,0,n/a,10,2,0,8,3
"org.apache.lucene.misc.TestHighFreqTerms.testOrderedByTermFreqDescending()",3,0,n/a,12,2,0,9,3
"org.apache.lucene.misc.TestLengthNormModifier.setUp()",18,0,n/a,22,2,0,16,3
"org.apache.lucene.misc.TestLengthNormModifier.tearDown()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.misc.TestLengthNormModifier.testFieldWithNoNorm()",14,0,n/a,20,1,0,13,2
"org.apache.lucene.misc.TestLengthNormModifier.testGoodCases()",27,0,n/a,4,2,0,39,4
"org.apache.lucene.misc.TestLengthNormModifier.testMissingField()",2,0,n/a,8,1,0,3,2
"org.apache.lucene.misc.TotalTermFreqComparatorSortDescending.compare(TermStats,TermStats)",0,0,n/a,9,1,2,5,3
"org.apache.lucene.queryParser.CharStream.BeginToken()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.Done()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.GetImage()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.GetSuffix(int)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.CharStream.backup(int)",n/a,3,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.CharStream.getBeginColumn()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.getBeginLine()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.getColumn()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.getEndColumn()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.getEndLine()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.getLine()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.CharStream.readChar()",n/a,10,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.FastCharStream.BeginToken()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.queryParser.FastCharStream.Done()",2,0,n/a,7,1,0,3,2
"org.apache.lucene.queryParser.FastCharStream.FastCharStream(Reader)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.FastCharStream.GetImage()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.FastCharStream.GetSuffix(int)",1,0,n/a,5,0,1,3,1
"org.apache.lucene.queryParser.FastCharStream.backup(int)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.FastCharStream.getBeginColumn()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.FastCharStream.getBeginLine()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.FastCharStream.getColumn()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.FastCharStream.getEndColumn()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.FastCharStream.getEndLine()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.FastCharStream.getLine()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.FastCharStream.readChar()",1,11,n/a,5,0,0,3,2
"org.apache.lucene.queryParser.FastCharStream.refill()",4,1,n/a,24,2,0,17,5
"org.apache.lucene.queryParser.MultiFieldQueryParser.MultiFieldQueryParser(Version,String[],Analyzer)",1,1,n/a,24,0,3,2,1
"org.apache.lucene.queryParser.MultiFieldQueryParser.MultiFieldQueryParser(Version,String[],Analyzer,Map<String, Float>)",1,0,n/a,31,0,4,2,1
"org.apache.lucene.queryParser.MultiFieldQueryParser.applySlop(Query,int)",2,2,n/a,7,1,2,4,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.getFieldQuery(String,String,boolean)",10,12,n/a,25,5,3,17,7
"org.apache.lucene.queryParser.MultiFieldQueryParser.getFieldQuery(String,String,int)",12,1,n/a,27,5,3,19,7
"org.apache.lucene.queryParser.MultiFieldQueryParser.getFuzzyQuery(String,String,float)",6,6,n/a,13,2,3,8,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.getPrefixQuery(String,String)",6,4,n/a,13,2,2,8,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.getRangeQuery(String,String,String,boolean)",6,7,n/a,12,2,4,8,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.getWildcardQuery(String,String)",6,8,n/a,12,2,2,8,3
"org.apache.lucene.queryParser.MultiFieldQueryParser.parse(Version,String,String[],Occur[],Analyzer)",6,0,n/a,46,2,5,11,6
"org.apache.lucene.queryParser.MultiFieldQueryParser.parse(Version,String[],String[],Analyzer)",6,0,n/a,34,2,4,11,6
"org.apache.lucene.queryParser.MultiFieldQueryParser.parse(Version,String[],String[],Occur[],Analyzer)",6,0,n/a,49,2,5,11,7
"org.apache.lucene.queryParser.ParseException.ParseException()",1,10,n/a,13,0,0,2,1
"org.apache.lucene.queryParser.ParseException.ParseException(String)",1,46,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.ParseException.ParseException(Token,int[][],String[])",1,1,n/a,23,0,3,5,1
"org.apache.lucene.queryParser.ParseException.add_escapes(String)",19,1,n/a,49,3,1,39,14
"org.apache.lucene.queryParser.ParseException.getMessage()",9,4,n/a,52,2,0,38,10
"org.apache.lucene.queryParser.QueryParser.Clause(String)",23,2,n/a,63,2,1,53,16
"org.apache.lucene.queryParser.QueryParser.Conjunction()",7,1,n/a,29,2,0,23,9
"org.apache.lucene.queryParser.QueryParser.Modifiers()",8,2,n/a,32,2,0,28,10
"org.apache.lucene.queryParser.QueryParser.Query(String)",12,2,n/a,44,2,1,39,10
"org.apache.lucene.queryParser.QueryParser.QueryParser(CharStream)",3,1,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.QueryParser.QueryParser(QueryParserTokenManager)",2,0,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.QueryParser.QueryParser(Version,String,Analyzer)",7,46,n/a,20,1,3,9,3
"org.apache.lucene.queryParser.QueryParser.ReInit(CharStream)",3,1,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.QueryParser.ReInit(QueryParserTokenManager)",2,0,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.QueryParser.Term(String)",100,1,n/a,254,4,1,204,83
"org.apache.lucene.queryParser.QueryParser.TopLevelQuery(String)",3,1,n/a,8,1,1,6,2
"org.apache.lucene.queryParser.QueryParser.addClause(List<BooleanClause>,int,int,Query)",17,3,n/a,45,2,4,25,19
"org.apache.lucene.queryParser.QueryParser.disable_tracing()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.QueryParser.discardEscapeChar(String)",7,8,n/a,59,3,1,30,9
"org.apache.lucene.queryParser.QueryParser.enable_tracing()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.QueryParser.escape(String)",6,4,n/a,18,2,1,9,20
"org.apache.lucene.queryParser.QueryParser.generateParseException()",8,1,n/a,36,4,0,32,10
"org.apache.lucene.queryParser.QueryParser.getAllowLeadingWildcard()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getAnalyzer()",0,13,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getAutoGeneratePhraseQueries()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getBooleanQuery(List<BooleanClause>)",1,1,n/a,16,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.getBooleanQuery(List<BooleanClause>,boolean)",3,8,n/a,26,1,2,6,3
"org.apache.lucene.queryParser.QueryParser.getDateResolution(String)",2,1,n/a,21,1,1,8,4
"org.apache.lucene.queryParser.QueryParser.getDefaultOperator()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getEnablePositionIncrements()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getField()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getFieldQuery(String,String)",1,2,n/a,8,0,2,1,1
"org.apache.lucene.queryParser.QueryParser.getFieldQuery(String,String,boolean)",53,12,n/a,161,6,3,103,36
"org.apache.lucene.queryParser.QueryParser.getFieldQuery(String,String,int)",4,1,n/a,18,1,3,6,4
"org.apache.lucene.queryParser.QueryParser.getFuzzyMinSim()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getFuzzyPrefixLength()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getFuzzyQuery(String,String,float)",3,5,n/a,19,1,3,4,2
"org.apache.lucene.queryParser.QueryParser.getLocale()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getLowercaseExpandedTerms()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getMultiTermRewriteMethod()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getNextToken()",1,0,n/a,8,0,0,6,2
"org.apache.lucene.queryParser.QueryParser.getPhraseSlop()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getPrefixQuery(String,String)",5,3,n/a,33,1,2,6,4
"org.apache.lucene.queryParser.QueryParser.getRangeCollator()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.getRangeQuery(String,String,String,boolean)",19,6,n/a,51,2,4,25,9
"org.apache.lucene.queryParser.QueryParser.getToken(int)",1,0,n/a,9,1,1,8,3
"org.apache.lucene.queryParser.QueryParser.getWildcardQuery(String,String)",9,7,n/a,34,1,2,9,7
"org.apache.lucene.queryParser.QueryParser.hexToInt(char)",1,1,n/a,12,1,1,7,7
"org.apache.lucene.queryParser.QueryParser.jj_2_1(int)",2,1,n/a,6,1,1,6,2
"org.apache.lucene.queryParser.QueryParser.jj_3R_2()",2,1,n/a,5,0,0,5,3
"org.apache.lucene.queryParser.QueryParser.jj_3R_3()",2,1,n/a,5,0,0,5,3
"org.apache.lucene.queryParser.QueryParser.jj_3_1()",2,2,n/a,9,1,0,7,3
"org.apache.lucene.queryParser.QueryParser.jj_add_error_token(int,int)",4,2,n/a,24,5,2,24,10
"org.apache.lucene.queryParser.QueryParser.jj_consume_token(int)",2,55,n/a,23,4,1,21,7
"org.apache.lucene.queryParser.QueryParser.jj_la1_init_0()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.jj_la1_init_1()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.jj_ntk()",1,23,n/a,6,0,0,3,2
"org.apache.lucene.queryParser.QueryParser.jj_rescan_token()",1,1,n/a,18,5,0,16,6
"org.apache.lucene.queryParser.QueryParser.jj_save(int,int)",1,1,n/a,8,2,2,9,3
"org.apache.lucene.queryParser.QueryParser.jj_scan_token(int)",2,4,n/a,20,2,1,19,10
"org.apache.lucene.queryParser.QueryParser.main(String[])",7,0,n/a,15,1,1,6,2
"org.apache.lucene.queryParser.QueryParser.newBooleanClause(Query,Occur)",1,3,n/a,9,0,2,1,1
"org.apache.lucene.queryParser.QueryParser.newBooleanQuery(boolean)",1,3,n/a,8,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.newFuzzyQuery(Term,float,int)",1,1,n/a,11,0,3,1,1
"org.apache.lucene.queryParser.QueryParser.newMatchAllDocsQuery()",1,2,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.newMultiPhraseQuery()",1,1,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.newPhraseQuery()",1,1,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.QueryParser.newPrefixQuery(Term)",2,2,n/a,10,0,1,3,1
"org.apache.lucene.queryParser.QueryParser.newRangeQuery(String,String,String,boolean)",2,2,n/a,13,0,4,3,1
"org.apache.lucene.queryParser.QueryParser.newTermQuery(Term)",1,3,n/a,8,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.newWildcardQuery(Term)",2,2,n/a,10,0,1,3,1
"org.apache.lucene.queryParser.QueryParser.parse(String)",13,62,n/a,28,1,1,13,5
"org.apache.lucene.queryParser.QueryParser.setAllowLeadingWildcard(boolean)",0,5,n/a,13,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setAutoGeneratePhraseQueries(boolean)",1,4,n/a,15,0,1,3,3
"org.apache.lucene.queryParser.QueryParser.setDateResolution(Resolution)",0,1,n/a,10,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setDateResolution(String,Resolution)",3,2,n/a,16,1,2,5,3
"org.apache.lucene.queryParser.QueryParser.setDefaultOperator(Operator)",0,9,n/a,11,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setEnablePositionIncrements(boolean)",0,6,n/a,13,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setFuzzyMinSim(float)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setFuzzyPrefixLength(int)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setLocale(Locale)",0,1,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setLowercaseExpandedTerms(boolean)",0,5,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setMultiTermRewriteMethod(RewriteMethod)",0,6,n/a,13,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setPhraseSlop(int)",0,3,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.QueryParser.setRangeCollator(Collator)",0,0,n/a,15,0,1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.QueryParserTokenManager(CharStream)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.QueryParserTokenManager(CharStream,int)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.QueryParserTokenManager.ReInit(CharStream)",1,2,n/a,8,0,1,4,1
"org.apache.lucene.queryParser.QueryParserTokenManager.ReInit(CharStream,int)",2,0,n/a,6,0,2,2,1
"org.apache.lucene.queryParser.QueryParserTokenManager.ReInitRounds()",0,5,n/a,7,0,0,5,2
"org.apache.lucene.queryParser.QueryParserTokenManager.SwitchTo(int)",1,2,n/a,8,0,1,3,3
"org.apache.lucene.queryParser.QueryParserTokenManager.getNextToken()",16,5,n/a,81,3,0,58,18
"org.apache.lucene.queryParser.QueryParserTokenManager.jjAddStates(int,int)",0,6,n/a,6,1,2,2,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCanMove_0(int,int,int,long,long)",0,3,n/a,10,1,5,5,3
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCanMove_1(int,int,int,long,long)",0,10,n/a,12,1,5,7,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCanMove_2(int,int,int,long,long)",0,7,n/a,14,1,5,9,5
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCheckNAdd(int)",0,17,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCheckNAddStates(int,int)",1,25,n/a,6,1,2,2,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjCheckNAddTwoStates(int,int)",2,27,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjFillToken()",6,2,n/a,21,0,0,18,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveNfa_0(int,int)",5,1,n/a,79,4,2,57,22
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveNfa_1(int,int)",17,3,n/a,138,5,2,108,48
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveNfa_2(int,int)",17,3,n/a,138,5,2,108,48
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveNfa_3(int,int)",61,3,n/a,423,5,2,377,179
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa0_0()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa0_1()",3,1,n/a,12,1,0,7,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa0_2()",3,1,n/a,12,1,0,7,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa0_3()",10,1,n/a,26,1,0,21,11
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa1_1(long)",4,1,n/a,18,1,1,12,5
"org.apache.lucene.queryParser.QueryParserTokenManager.jjMoveStringLiteralDfa1_2(long)",4,1,n/a,18,1,1,12,5
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfaWithStates_1(int,int,int)",2,1,n/a,8,1,3,6,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfaWithStates_2(int,int,int)",2,1,n/a,8,1,3,6,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfaWithStates_3(int,int,int)",2,1,n/a,8,1,3,6,2
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfa_1(int,long)",2,1,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfa_2(int,long)",2,1,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStartNfa_3(int,long)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStopAtPos(int,int)",0,10,n/a,6,0,2,3,1
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStopStringLiteralDfa_1(int,long)",0,2,n/a,15,2,2,8,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStopStringLiteralDfa_2(int,long)",0,2,n/a,15,2,2,8,4
"org.apache.lucene.queryParser.QueryParserTokenManager.jjStopStringLiteralDfa_3(int,long)",0,1,n/a,8,1,2,3,2
"org.apache.lucene.queryParser.QueryParserTokenManager.setDebugStream(PrintStream)",0,0,n/a,2,0,1,1,1
"org.apache.lucene.queryParser.TestAttributes.testAttributes()",164,0,n/a,4,2,0,104,1
"org.apache.lucene.queryParser.Token.Token()",0,4,n/a,4,0,0,0,1
"org.apache.lucene.queryParser.Token.Token(int)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.Token.Token(int,String)",0,2,n/a,8,0,2,2,1
"org.apache.lucene.queryParser.Token.getValue()",0,0,n/a,11,0,0,1,1
"org.apache.lucene.queryParser.Token.newToken(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.Token.newToken(int,String)",1,2,n/a,19,1,2,3,2
"org.apache.lucene.queryParser.Token.toString()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.TokenMgrError.LexicalError(boolean,int,int,int,String,char)",3,1,n/a,19,0,6,1,2
"org.apache.lucene.queryParser.TokenMgrError.TokenMgrError()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.TokenMgrError.TokenMgrError(String,int)",1,2,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.TokenMgrError.TokenMgrError(boolean,int,int,int,String,char,int)",2,1,n/a,4,0,7,1,1
"org.apache.lucene.queryParser.TokenMgrError.addEscapes(String)",19,2,n/a,48,3,1,39,14
"org.apache.lucene.queryParser.TokenMgrError.getMessage()",1,1,n/a,12,0,0,1,1
"org.apache.lucene.queryParser.analyzing.ASCIIAnalyzer.ASCIIAnalyzer()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.queryParser.analyzing.ASCIIAnalyzer.tokenStream(String,Reader)",4,78,n/a,8,0,2,5,1
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.AnalyzingQueryParser(Version,String,Analyzer)",1,0,n/a,8,0,3,1,1
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.getFuzzyQuery(String,String,float)",14,5,n/a,44,2,3,17,6
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.getPrefixQuery(String,String)",19,3,n/a,55,2,2,19,8
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.getRangeQuery(String,String,String,boolean)",35,6,n/a,80,3,4,39,15
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser.getWildcardQuery(String,String)",51,7,n/a,115,3,2,57,23
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.parseWithAnalyzingQueryParser(String,Analyzer)",3,4,n/a,5,0,2,3,1
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.setUp()",2,0,n/a,20,0,0,10,1
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.testFuzzyQuery()",3,0,n/a,6,1,0,4,2
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.testPrefixQuery()",3,0,n/a,6,1,0,4,2
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.testRangeQuery()",3,0,n/a,6,1,0,4,2
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser.testWildCardQuery()",3,0,n/a,6,1,0,4,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.ComplexPhraseQuery(String,String,int)",1,1,n/a,7,0,3,4,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.addComplexPhraseClause(List<SpanQuery>,BooleanQuery)",25,2,n/a,40,2,2,27,7
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.equals(Object)",4,28,n/a,24,1,1,20,11
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.hashCode()",2,23,n/a,12,0,0,6,3
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.parsePhraseElements(QueryParser)",1,1,n/a,11,0,1,1,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.rewrite(IndexReader)",29,30,n/a,82,3,1,41,12
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery.toString(String)",0,47,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQueryParser(Version,String,Analyzer)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.checkPhraseClauseIsForSameField(String)",2,4,n/a,9,1,1,2,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.getFieldQuery(String,String,int)",2,1,n/a,8,0,3,3,1
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.getFuzzyQuery(String,String,float)",2,5,n/a,8,1,3,3,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.getRangeQuery(String,String,String,boolean)",2,6,n/a,8,1,4,3,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.getWildcardQuery(String,String)",2,7,n/a,8,1,2,3,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.newRangeQuery(String,String,String,boolean)",4,2,n/a,13,1,4,5,2
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.newTermQuery(Term)",4,3,n/a,15,2,1,5,3
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.parse(String)",10,62,n/a,40,2,1,16,3
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.DocData.DocData(String,String)",1,4,n/a,5,0,2,3,1
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.checkBadQuery(String)",3,2,n/a,10,1,1,6,2
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.checkMatches(String,String)",15,9,n/a,22,1,2,20,4
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.setUp()",12,0,n/a,16,1,0,12,2
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.tearDown()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.testComplexPhrases()",11,0,n/a,19,0,0,11,1
"org.apache.lucene.queryParser.core.QueryNodeError.QueryNodeError(Message)",2,0,n/a,8,0,1,2,1
"org.apache.lucene.queryParser.core.QueryNodeError.QueryNodeError(Message,Throwable)",2,0,n/a,10,0,2,2,1
"org.apache.lucene.queryParser.core.QueryNodeError.QueryNodeError(Throwable)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeError.getMessageObject()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.QueryNodeException(Message)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.queryParser.core.QueryNodeException.QueryNodeException(Message,Throwable)",2,3,n/a,4,0,2,2,1
"org.apache.lucene.queryParser.core.QueryNodeException.QueryNodeException(Throwable)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.getLocalizedMessage()",2,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.getLocalizedMessage(Locale)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.getMessage()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.getMessageObject()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeException.toString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.QueryNodeParseException(Message)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.QueryNodeParseException(Message,Throwable)",1,3,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.QueryNodeParseException(Throwable)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.getBeginColumn()",0,0,n/a,10,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.getBeginLine()",0,0,n/a,10,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.getErrorToken()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.getQuery()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setBeginColumn(int)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setBeginLine(int)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setErrorToken(String)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setNonLocalizedMessage(Message)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.QueryNodeParseException.setQuery(CharSequence)",1,1,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.core.QueryParserHelper.QueryParserHelper(QueryConfigHandler,SyntaxParser,QueryNodeProcessor,QueryBuilder)",1,1,n/a,29,1,4,6,2
"org.apache.lucene.queryParser.core.QueryParserHelper.getQueryBuilder()",0,3,n/a,13,0,0,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.getQueryConfigHandler()",0,38,n/a,13,0,0,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.getQueryNodeProcessor()",0,5,n/a,13,0,0,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.getSyntaxParser()",0,3,n/a,13,0,0,1,1
"org.apache.lucene.queryParser.core.QueryParserHelper.parse(String,String)",6,4,n/a,34,1,2,5,2
"org.apache.lucene.queryParser.core.QueryParserHelper.setQueryBuilder(QueryBuilder)",1,1,n/a,16,1,1,3,2
"org.apache.lucene.queryParser.core.QueryParserHelper.setQueryConfigHandler(QueryConfigHandler)",2,1,n/a,19,1,1,4,2
"org.apache.lucene.queryParser.core.QueryParserHelper.setQueryNodeProcessor(QueryNodeProcessor)",2,3,n/a,18,0,1,2,1
"org.apache.lucene.queryParser.core.QueryParserHelper.setSyntaxParser(SyntaxParser)",1,1,n/a,16,1,1,3,2
"org.apache.lucene.queryParser.core.builders.QueryBuilder.build(QueryNode)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.QueryTreeBuilder()",0,2,n/a,6,0,0,0,1
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.build(QueryNode)",2,2,n/a,16,0,1,2,1
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.getBuilder(QueryNode)",9,1,n/a,23,5,1,14,10
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.getQueryBuilder(Class<?>)",2,2,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.process(QueryNode)",4,2,n/a,14,4,1,8,5
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.processNode(QueryNode,QueryBuilder)",8,1,n/a,13,1,2,5,3
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.setBuilder(CharSequence,QueryBuilder)",2,2,n/a,12,0,2,1,1
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.setBuilder(Class<? extends QueryNode>,QueryBuilder)",2,2,n/a,13,1,2,3,2
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder.setBuilder(String,QueryBuilder)",3,2,n/a,12,1,2,3,2
"org.apache.lucene.queryParser.core.builders.TestQueryTreeBuilder.DummyBuilder.build(QueryNode)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.builders.TestQueryTreeBuilder.testSetFieldBuilder()",7,0,n/a,7,0,0,4,1
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.AbstractQueryConfig()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.addAttribute(Class<A>)",4,482,n/a,13,2,1,6,3
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.get(ConfigurationKey<T>)",2,9,n/a,16,1,1,3,2
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.get(ConfigurationKey<T>,T)",3,6,n/a,22,1,2,5,3
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.has(ConfigurationKey<T>)",2,11,n/a,13,1,1,3,2
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.set(ConfigurationKey<T>,T)",3,22,n/a,17,1,2,5,3
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig.unset(ConfigurationKey<T>)",2,1,n/a,13,1,1,3,2
"org.apache.lucene.queryParser.core.config.ConfigAttribute.setQueryConfigHandler(AbstractQueryConfig)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.config.ConfigurationKey.ConfigurationKey()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.core.config.ConfigurationKey.newInstance()",1,18,n/a,10,0,0,1,1
"org.apache.lucene.queryParser.core.config.FieldConfig.FieldConfig(CharSequence)",2,1,n/a,12,0,1,1,1
"org.apache.lucene.queryParser.core.config.FieldConfig.FieldConfig(String)",1,2,n/a,12,1,1,3,2
"org.apache.lucene.queryParser.core.config.FieldConfig.getField()",0,4,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.core.config.FieldConfig.getFieldName()",0,0,n/a,11,0,0,1,1
"org.apache.lucene.queryParser.core.config.FieldConfig.toString()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.config.FieldConfigListener.buildFieldConfig(FieldConfig)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.config.QueryConfigHandler.addFieldConfigListener(FieldConfigListener)",1,3,n/a,10,0,1,1,1
"org.apache.lucene.queryParser.core.config.QueryConfigHandler.getFieldConfig(CharSequence)",2,7,n/a,20,0,1,1,1
"org.apache.lucene.queryParser.core.config.QueryConfigHandler.getFieldConfig(String)",2,7,n/a,20,1,1,4,2
"org.apache.lucene.queryParser.core.messages.QueryParserMessages.QueryParserMessages()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.nodes.AndQueryNode.AndQueryNode(List<QueryNode>)",3,2,n/a,11,1,1,3,3
"org.apache.lucene.queryParser.core.nodes.AndQueryNode.toQueryString(EscapeQuerySyntax)",13,0,n/a,17,1,1,10,7
"org.apache.lucene.queryParser.core.nodes.AndQueryNode.toString()",11,0,n/a,13,1,0,9,4
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.AnyQueryNode(List<QueryNode>,CharSequence,int)",2,0,n/a,22,4,3,10,6
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.cloneTree()",1,0,n/a,7,0,0,4,1
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.getField()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.getFieldAsString()",1,0,n/a,11,0,0,3,2
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.getMinimumMatchingElements()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.setField(CharSequence)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.toQueryString(EscapeQuerySyntax)",11,0,n/a,19,2,1,10,5
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode.toString()",11,0,n/a,15,1,0,9,4
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode.BooleanQueryNode(List<QueryNode>)",3,4,n/a,9,0,1,3,1
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode.cloneTree()",1,0,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode.toQueryString(EscapeQuerySyntax)",13,0,n/a,16,1,1,10,7
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode.toString()",11,0,n/a,13,1,0,9,4
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.BoostQueryNode(QueryNode,float)",5,3,n/a,20,1,2,6,2
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.cloneTree()",1,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.getChild()",3,4,n/a,12,1,0,4,3
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.getValue()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.getValueString()",3,2,n/a,12,0,0,4,2
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.toQueryString(EscapeQuerySyntax)",4,0,n/a,6,0,1,3,2
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode.toString()",3,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode.DeletedQueryNode()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode.cloneTree()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode.toQueryString(EscapeQuerySyntax)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.FieldQueryNode(CharSequence,CharSequence,int,int)",1,6,n/a,18,0,4,5,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.cloneTree()",1,1,n/a,11,0,0,8,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getBegin()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getEnd()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getField()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getFieldAsString()",1,5,n/a,11,0,0,3,2
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getPositionIncrement()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getTermEscapeQuoted(EscapeQuerySyntax)",2,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getTermEscaped(EscapeQuerySyntax)",2,4,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getText()",0,9,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getTextAsString()",1,8,n/a,9,0,0,3,2
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.getValue()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setBegin(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setEnd(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setField(CharSequence)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setPositionIncrement(int)",0,6,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setText(CharSequence)",0,3,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.setValue(CharSequence)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.toQueryString(EscapeQuerySyntax)",3,0,n/a,7,1,1,3,2
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode.toString()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FieldableNode.getField()",n/a,4,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.FieldableNode.setField(CharSequence)",n/a,4,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.FuzzyQueryNode(CharSequence,CharSequence,float,int,int)",2,1,n/a,18,0,5,3,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.cloneTree()",1,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.getPrefixLength()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.getSimilarity()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.setPrefixLength(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.setSimilarity(float)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.toQueryString(EscapeQuerySyntax)",3,0,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode.toString()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.GroupQueryNode(QueryNode)",5,3,n/a,12,1,1,5,2
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.cloneTree()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.getChild()",2,5,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.setChild(QueryNode)",3,0,n/a,8,0,1,3,1
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.toQueryString(EscapeQuerySyntax)",3,0,n/a,5,0,1,3,2
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode.toString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode.MatchAllDocsQueryNode()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode.cloneTree()",1,0,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode.toQueryString(EscapeQuerySyntax)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.MatchNoDocsQueryNode.MatchNoDocsQueryNode()",0,3,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.nodes.MatchNoDocsQueryNode.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.Modifier.toDigitString()",0,1,n/a,12,1,0,8,4
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.Modifier.toLargeString()",0,1,n/a,12,1,0,8,4
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.Modifier.toString()",0,1,n/a,13,1,0,8,4
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.ModifierQueryNode(QueryNode,Modifier)",5,4,n/a,18,1,2,6,2
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.cloneTree()",1,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.getChild()",2,12,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.getModifier()",0,7,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.setChild(QueryNode)",3,0,n/a,8,0,1,3,1
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.toQueryString(EscapeQuerySyntax)",10,0,n/a,17,1,1,10,5
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.toString()",3,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode.NoTokenFoundQueryNode()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode.cloneTree()",1,0,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode.toQueryString(EscapeQuerySyntax)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.OpaqueQueryNode(CharSequence,CharSequence)",1,0,n/a,11,0,2,3,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.cloneTree()",1,0,n/a,7,0,0,4,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.getSchema()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.getValue()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.toQueryString(EscapeQuerySyntax)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.OrQueryNode.OrQueryNode(List<QueryNode>)",3,1,n/a,11,1,1,3,3
"org.apache.lucene.queryParser.core.nodes.OrQueryNode.toQueryString(EscapeQuerySyntax)",16,0,n/a,17,1,1,11,7
"org.apache.lucene.queryParser.core.nodes.OrQueryNode.toString()",11,0,n/a,13,1,0,9,4
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.ParametricQueryNode(CharSequence,CompareOperator,CharSequence,int,int)",2,4,n/a,18,0,5,3,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.cloneTree()",1,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.getOperand()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.getOperator()",0,8,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.toQueryString(EscapeQuerySyntax)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.toString()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.ParametricRangeQueryNode(ParametricQueryNode,ParametricQueryNode)",17,2,n/a,23,1,2,10,8
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.cloneTree()",1,0,n/a,7,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.getField()",2,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.getLowerBound()",2,6,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.getUpperBound()",2,5,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.isLowerInclusive()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.isUpperInclusive()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.setField(CharSequence)",3,0,n/a,10,3,1,5,4
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.toQueryString(EscapeQuerySyntax)",4,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode.toString()",9,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.PathQueryNode(List<QueryText>)",2,0,n/a,12,1,1,3,2
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.QueryText(CharSequence,int,int)",1,0,n/a,14,0,3,4,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.clone()",1,1,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.getBegin()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.getEnd()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.getValue()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.cloneTree()",4,0,n/a,13,2,0,7,3
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getFirstPathElement()",1,1,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getPathElement(int)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getPathElements()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getPathElements(int)",5,1,n/a,16,2,1,7,3
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.getPathString()",4,1,n/a,7,1,0,4,2
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.setPathElements(List<QueryText>)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.toQueryString(EscapeQuerySyntax)",11,0,n/a,10,1,1,6,2
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.toString()",2,0,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.PhraseSlopQueryNode(QueryNode,int)",5,0,n/a,17,1,2,6,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.cloneTree()",1,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.getChild()",2,5,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.getField()",2,0,n/a,7,1,0,4,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.getValue()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.getValueString()",3,2,n/a,7,0,0,4,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.setField(CharSequence)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.toQueryString(EscapeQuerySyntax)",4,0,n/a,6,0,1,3,2
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode.toString()",3,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityQueryNode(List<QueryNode>,CharSequence,Type,boolean)",1,0,n/a,15,0,4,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityQueryNode(List<QueryNode>,CharSequence,Type,int,boolean)",5,1,n/a,31,2,5,10,3
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityType.ProximityType(Type)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityType.ProximityType(Type,int)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.Type.toQueryString()",n/a,1,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.clearFields(List<QueryNode>,CharSequence)",2,1,n/a,10,2,2,6,5
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.cloneTree()",1,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.getDistance()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.getField()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.getFieldAsString()",1,0,n/a,11,0,0,3,2
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.getProximityType()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.isInOrder()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.setField(CharSequence)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.toQueryString(EscapeQuerySyntax)",12,0,n/a,21,2,1,10,7
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.toString()",13,0,n/a,18,1,0,10,5
"org.apache.lucene.queryParser.core.nodes.QueryNode.add(List<QueryNode>)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.add(QueryNode)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.cloneTree()",n/a,8,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.containsTag(CharSequence)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.containsTag(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.getChildren()",n/a,11,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.getParent()",n/a,4,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.getTag(CharSequence)",n/a,12,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.getTag(String)",n/a,12,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.getTagMap()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.getTags()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.isLeaf()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.set(List<QueryNode>)",n/a,4,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.setTag(CharSequence,Object)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.setTag(String,Object)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.toQueryString(EscapeQuerySyntax)",n/a,7,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.toString()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.unsetTag(CharSequence)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNode.unsetTag(String)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.add(List<QueryNode>)",4,2,n/a,9,1,1,4,4
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.add(QueryNode)",5,2,n/a,8,1,1,4,4
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.allocate()",2,3,n/a,7,1,0,3,2
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.clone()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.cloneTree()",5,2,n/a,15,2,0,9,3
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.containsTag(CharSequence)",3,1,n/a,9,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.containsTag(String)",2,1,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getChildren()",1,11,n/a,10,1,0,3,3
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getParent()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getTag(CharSequence)",3,1,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getTag(String)",3,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getTagMap()",1,1,n/a,9,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.getTags()",5,0,n/a,17,1,0,6,2
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.isDefaultField(CharSequence)",2,1,n/a,20,0,1,7,4
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.isLeaf()",0,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.isRoot()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.set(List<QueryNode>)",8,1,n/a,19,1,1,9,5
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.setLeaf(boolean)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.setParent(QueryNode)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.setTag(CharSequence,Object)",3,1,n/a,7,0,2,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.setTag(String,Object)",2,1,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.toString()",1,0,n/a,11,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.unsetTag(CharSequence)",3,1,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl.unsetTag(String)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode.QuotedFieldQueryNode(CharSequence,CharSequence,int,int)",1,1,n/a,14,0,4,1,1
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode.cloneTree()",1,0,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode.toQueryString(EscapeQuerySyntax)",3,0,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode.toString()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.RangeQueryNode.getLowerBound()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.RangeQueryNode.getUpperBound()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.RangeQueryNode.isLowerInclusive()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.RangeQueryNode.isUpperInclusive()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.SlopQueryNode(QueryNode,int)",5,2,n/a,16,1,2,6,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.cloneTree()",1,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.getChild()",2,9,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.getField()",2,0,n/a,7,1,0,4,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.getValue()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.getValueString()",3,2,n/a,7,0,0,4,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.setField(CharSequence)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.toQueryString(EscapeQuerySyntax)",4,0,n/a,6,0,1,3,2
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode.toString()",3,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.core.nodes.TestQueryNode.testAddChildren()",9,0,n/a,9,0,0,5,1
"org.apache.lucene.queryParser.core.nodes.TestQueryNode.testTags()",10,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.core.nodes.TextableQueryNode.getText()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.TextableQueryNode.setText(CharSequence)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.TokenizedPhraseQueryNode()",2,1,n/a,4,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.cloneTree()",1,0,n/a,7,0,0,2,1
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.getField()",4,0,n/a,8,1,0,4,3
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.setField(CharSequence)",3,0,n/a,10,3,1,5,4
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.toQueryString(EscapeQuerySyntax)",9,0,n/a,12,1,1,8,4
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode.toString()",11,0,n/a,13,1,0,9,4
"org.apache.lucene.queryParser.core.nodes.ValueQueryNode.getValue()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.nodes.ValueQueryNode.setValue(T)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax.escape(CharSequence,Locale,Type)",n/a,9,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.queryParser.core.parser.SyntaxParser.parse(CharSequence,CharSequence)",n/a,4,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor.NoChildOptimizationQueryNodeProcessor()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor.postProcessNode(QueryNode)",3,0,n/a,17,4,1,8,9
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor.preProcessNode(QueryNode)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,0,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessor.getQueryConfigHandler()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessor.process(QueryNode)",n/a,3,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessor.setQueryConfigHandler(QueryConfigHandler)",n/a,6,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.QueryNodeProcessorImpl()",0,16,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.QueryNodeProcessorImpl(QueryConfigHandler)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.allocateChildrenList()",3,1,n/a,16,2,0,11,4
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.getQueryConfigHandler()",0,16,n/a,12,0,0,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.postProcessNode(QueryNode)",n/a,4,21,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.preProcessNode(QueryNode)",n/a,2,21,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.process(QueryNode)",1,6,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.processChildren(QueryNode)",8,3,n/a,28,4,1,13,5
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.processIteration(QueryNode)",3,2,n/a,7,0,1,4,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.setChildrenOrder(List<QueryNode>)",n/a,3,21,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.setQueryConfigHandler(QueryConfigHandler)",0,0,n/a,13,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.QueryNodeProcessorPipeline()",0,1,n/a,6,0,0,0,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.QueryNodeProcessorPipeline(QueryConfigHandler)",0,3,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.add(QueryNodeProcessor)",2,30,n/a,10,1,1,4,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.add(int,QueryNodeProcessor)",2,0,n/a,7,0,2,2,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.addAll(Collection<? extends QueryNodeProcessor>)",2,0,n/a,10,1,1,4,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.addAll(int,Collection<? extends QueryNodeProcessor>)",2,0,n/a,10,1,2,4,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.addProcessor(QueryNodeProcessor)",2,0,n/a,14,0,1,2,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.clear()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.contains(Object)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.containsAll(Collection<?>)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.get(int)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.getQueryConfigHandler()",0,0,n/a,12,0,0,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.indexOf(Object)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.isEmpty()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.iterator()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.lastIndexOf(Object)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.listIterator()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.listIterator(int)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.process(QueryNode)",1,2,n/a,17,1,1,3,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.remove(Object)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.remove(int)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.removeAll(Collection<?>)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.retainAll(Collection<?>)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.set(int,QueryNodeProcessor)",2,0,n/a,10,1,2,4,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.setQueryConfigHandler(QueryConfigHandler)",1,1,n/a,15,1,1,3,2
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.size()",1,1,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.subList(int,int)",1,0,n/a,6,0,2,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.toArray()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline.toArray(T[])",1,0,n/a,6,0,1,1,1
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.RemoveDeletedQueryNodesProcessor()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.postProcessNode(QueryNode)",7,0,n/a,22,4,1,14,7
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.preProcessNode(QueryNode)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.process(QueryNode)",2,0,n/a,9,1,1,4,3
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor.setChildrenOrder(List<QueryNode>)",3,0,n/a,10,2,1,6,3
"org.apache.lucene.queryParser.core.util.QueryNodeOperation.QueryNodeOperation()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.core.util.QueryNodeOperation.logicalAnd(QueryNode,QueryNode)",17,0,n/a,50,2,2,35,12
"org.apache.lucene.queryParser.core.util.StringUtils.toString(Object)",1,11,n/a,7,1,1,3,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.UnescapedCharSequence(CharSequence)",4,2,n/a,13,1,1,7,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.UnescapedCharSequence(UnescapedCharSequence)",3,0,n/a,14,1,1,7,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.UnescapedCharSequence(char[],boolean[],int,int)",2,3,n/a,15,0,4,4,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.charAt(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.length()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.subSequence(int,int)",1,0,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.toLowerCase(CharSequence)",7,1,n/a,8,1,1,5,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.toStringEscaped()",6,0,n/a,17,2,0,10,4
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.toStringEscaped(char[])",6,2,n/a,25,4,1,12,6
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.wasEscaped(CharSequence,int)",0,4,n/a,5,0,2,3,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence.wasEscaped(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.ext.ExtendableQueryParser.ExtendableQueryParser(Version,String,Analyzer)",1,0,n/a,14,0,3,1,1
"org.apache.lucene.queryParser.ext.ExtendableQueryParser.ExtendableQueryParser(Version,String,Analyzer,Extensions)",1,1,n/a,18,0,4,3,1
"org.apache.lucene.queryParser.ext.ExtendableQueryParser.getExtensionFieldDelimiter()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.ext.ExtendableQueryParser.getFieldQuery(String,String,boolean)",5,12,n/a,13,1,3,5,2
"org.apache.lucene.queryParser.ext.ExtensionQuery.ExtensionQuery(QueryParser,String,String)",0,0,n/a,13,0,3,3,1
"org.apache.lucene.queryParser.ext.ExtensionQuery.getField()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.ext.ExtensionQuery.getRawQueryString()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.ext.ExtensionQuery.getTopLevelParser()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.ext.ExtensionStub.parse(ExtensionQuery)",4,0,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.ext.Extensions.Extensions()",1,0,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.ext.Extensions.Extensions(char)",0,1,n/a,9,0,1,1,1
"org.apache.lucene.queryParser.ext.Extensions.Pair.Pair(Cur,Cud)",0,2,n/a,12,0,2,2,1
"org.apache.lucene.queryParser.ext.Extensions.add(String,ParserExtension)",1,0,n/a,11,0,2,1,1
"org.apache.lucene.queryParser.ext.Extensions.buildExtensionField(String)",1,2,n/a,17,0,1,1,1
"org.apache.lucene.queryParser.ext.Extensions.buildExtensionField(String,String)",5,2,n/a,27,0,2,4,1
"org.apache.lucene.queryParser.ext.Extensions.escapeExtensionField(String)",1,1,n/a,12,0,1,1,1
"org.apache.lucene.queryParser.ext.Extensions.getExtension(String)",1,0,n/a,12,0,1,1,1
"org.apache.lucene.queryParser.ext.Extensions.getExtensionFieldDelimiter()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.ext.Extensions.splitExtensionField(String,String)",5,4,n/a,26,0,2,6,3
"org.apache.lucene.queryParser.ext.ParserExtension.parse(ExtensionQuery)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.getParser(Analyzer)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.getParser(Analyzer,Extensions)",4,5,n/a,10,0,2,5,3
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.newExtensions(char)",1,4,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.testExtDefaultField()",15,0,n/a,15,1,0,12,2
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.testExtField()",15,0,n/a,15,1,0,12,2
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.testExtFieldUnqoted()",29,0,n/a,30,1,0,24,2
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser.testUnescapedExtDelimiter()",6,0,n/a,10,1,0,6,2
"org.apache.lucene.queryParser.ext.TestExtensions.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.ext.TestExtensions.testAddGetExtension()",9,0,n/a,8,0,0,6,1
"org.apache.lucene.queryParser.ext.TestExtensions.testBuildExtensionField()",9,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.ext.TestExtensions.testEscapeExtension()",4,0,n/a,10,1,0,4,2
"org.apache.lucene.queryParser.ext.TestExtensions.testGetExtDelimiter()",5,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.ext.TestExtensions.testSplitExtensionField()",9,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.precedence.PrecedenceQueryParser.PrecedenceQueryParser()",3,0,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.precedence.PrecedenceQueryParser.PrecedenceQueryParser(Analyzer)",4,0,n/a,7,0,1,2,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestAnalyzer.tokenStream(String,Reader)",2,78,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestFilter.QPTestFilter(TokenStream)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestFilter.incrementToken()",13,216,n/a,20,1,0,16,5
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestFilter.reset()",1,118,n/a,7,0,0,4,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertDateRangeQueryEquals(PrecedenceQueryParser,String,String,String,Date,Resolution)",10,5,n/a,12,0,6,2,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertQueryEquals(PrecedenceQueryParser,String,String,String)",4,2,n/a,9,1,4,4,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertQueryEquals(String,Analyzer,String)",4,95,n/a,9,1,3,4,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertQueryEqualsDOA(String,Analyzer,String)",4,19,n/a,9,1,3,4,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertWildcardQueryEquals(String,String)",5,3,n/a,10,1,2,5,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.assertWildcardQueryEquals(String,boolean,String)",6,19,n/a,11,1,3,6,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.escapeDateString(String)",1,4,n/a,7,1,1,3,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getDate(Date,Resolution)",2,4,n/a,9,1,2,3,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getDate(String)",3,0,n/a,4,0,1,2,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getDate(String,Resolution)",3,4,n/a,6,0,2,2,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getLocalizedDate(int,int,int,boolean)",9,2,n/a,13,1,4,9,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getParser(Analyzer)",4,6,n/a,8,0,1,6,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getQuery(String,Analyzer)",2,15,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.getQueryDOA(String,Analyzer)",5,1,n/a,8,0,2,6,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.tearDown()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testBooleanQuery()",5,0,n/a,9,1,0,4,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testBoost()",20,0,n/a,17,0,0,15,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testDateRange()",23,0,n/a,35,0,0,20,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testEscaped()",24,0,n/a,26,0,0,24,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testException()",2,0,n/a,7,1,0,3,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testNOT()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testNumber()",7,0,n/a,10,0,0,7,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testPrecedence()",36,0,n/a,41,0,0,35,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testPunct()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testQPA()",12,0,n/a,16,0,0,10,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testRange()",11,0,n/a,13,0,0,10,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testSimple()",48,0,n/a,49,0,0,41,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testSimpleDAO()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testSlop()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testTabNewlineCarriageReturn()",14,0,n/a,17,0,0,14,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.testWildcard()",52,0,n/a,63,1,0,44,2
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.BooleanModifiersQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.applyModifier(QueryNode,Modifier)",4,2,n/a,12,2,2,6,3
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.postProcessNode(QueryNode)",10,4,n/a,20,2,1,13,7
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.process(QueryNode)",4,6,n/a,10,1,1,5,2
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.precedence.processors.PrecedenceQueryNodeProcessorPipeline.PrecedenceQueryNodeProcessorPipeline(QueryConfigHandler)",8,2,n/a,12,2,1,7,3
"org.apache.lucene.queryParser.spans.SpanOrQueryNodeBuilder.build(QueryNode)",4,2,n/a,12,1,1,7,2
"org.apache.lucene.queryParser.spans.SpanTermQueryNodeBuilder.build(QueryNode)",4,2,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.spans.SpansQueryConfigHandler.SpansQueryConfigHandler()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.spans.SpansQueryConfigHandler.getFieldConfig(String)",0,7,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.spans.SpansQueryTreeBuilder.SpansQueryTreeBuilder()",4,0,n/a,4,0,0,2,1
"org.apache.lucene.queryParser.spans.SpansQueryTreeBuilder.build(QueryNode)",1,4,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.spans.SpansValidatorQueryNodeProcessor.postProcessNode(QueryNode)",0,4,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.spans.SpansValidatorQueryNodeProcessor.preProcessNode(QueryNode)",3,2,n/a,9,1,1,3,4
"org.apache.lucene.queryParser.spans.SpansValidatorQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.TestSpanQueryParser()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.getSpanQuery(CharSequence)",1,15,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.getSpanQuery(String,CharSequence)",4,4,n/a,7,0,2,4,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.setUp()",11,0,n/a,13,0,0,8,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.testOrSpans()",10,0,n/a,8,0,0,4,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.testQueryValidator()",14,0,n/a,44,1,0,21,8
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.testTermSpans()",10,0,n/a,6,0,0,4,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParser.testUniqueField()",9,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.spans.TestSpanQueryParserSimpleSample.testBasicDemo()",17,0,n/a,29,0,0,16,3
"org.apache.lucene.queryParser.spans.UniqueFieldAttribute.getUniqueField()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.spans.UniqueFieldAttribute.setUniqueField(CharSequence)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.UniqueFieldAttributeImpl()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.clear()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.copyTo(AttributeImpl)",4,3,n/a,10,1,1,4,2
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.equals(Object)",1,0,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.getUniqueField()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.setUniqueField(CharSequence)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl.toString()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldQueryNodeProcessor.postProcessNode(QueryNode)",0,4,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.spans.UniqueFieldQueryNodeProcessor.preProcessNode(QueryNode)",6,2,n/a,18,2,1,10,4
"org.apache.lucene.queryParser.spans.UniqueFieldQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.MultiFieldQueryParserWrapper(String[],Analyzer)",4,5,n/a,32,0,2,4,1
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.MultiFieldQueryParserWrapper(String[],Analyzer,Map<String, Float>)",4,1,n/a,41,0,3,4,1
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.parse(String,String[],Occur[],Analyzer)",6,6,n/a,53,2,4,11,6
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.parse(String[],String[],Analyzer)",6,7,n/a,38,2,3,11,6
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper.parse(String[],String[],Occur[],Analyzer)",6,4,n/a,54,2,4,11,7
"org.apache.lucene.queryParser.standard.QueryParserUtil.escape(String)",6,0,n/a,19,2,1,9,20
"org.apache.lucene.queryParser.standard.QueryParserUtil.parse(String,String[],Occur[],Analyzer)",7,0,n/a,52,2,4,12,6
"org.apache.lucene.queryParser.standard.QueryParserUtil.parse(String[],String[],Analyzer)",7,0,n/a,37,2,3,12,6
"org.apache.lucene.queryParser.standard.QueryParserUtil.parse(String[],String[],Occur[],Analyzer)",7,0,n/a,53,2,4,12,7
"org.apache.lucene.queryParser.standard.QueryParserWrapper.QueryParserWrapper(String,Analyzer)",4,0,n/a,7,0,2,5,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.escape(String)",6,0,n/a,19,2,1,9,20
"org.apache.lucene.queryParser.standard.QueryParserWrapper.generateParseException()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getAllowLeadingWildcard()",1,0,n/a,6,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getAnalyzer()",1,0,n/a,6,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getBooleanQuery(List<BooleanClause>,boolean)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getDateResolution(String)",2,0,n/a,9,2,1,5,3
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getDefaultOperator()",1,0,n/a,8,1,0,3,3
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getEnablePositionIncrements()",1,0,n/a,7,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getField()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFieldQuery(String,String)",1,1,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFieldQuery(String,String,boolean)",1,2,n/a,7,0,3,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFieldQuery(String,String,int)",1,0,n/a,11,0,3,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFuzzyMinSim()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFuzzyPrefixLength()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getFuzzyQuery(String,String,float)",1,0,n/a,4,0,3,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getLocale()",3,0,n/a,6,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getLowercaseExpandedTerms()",1,0,n/a,6,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getMultiTermRewriteMethod()",1,1,n/a,7,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getPhraseSlop()",1,0,n/a,6,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getPrefixQuery(String,String)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getQueryConfigHandler()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getQueryParserHelper()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getQueryProcessor()",0,0,n/a,10,0,0,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getRangeCollator()",1,0,n/a,6,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getRangeQuery(String,String,String,boolean)",1,0,n/a,7,0,4,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getUseOldRangeQuery()",1,0,n/a,7,1,0,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.getWildcardQuery(String,String)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.parse(String)",5,0,n/a,9,1,1,5,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setAllowLeadingWildcard(boolean)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setDateResolution(Resolution)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setDateResolution(String,Resolution)",2,0,n/a,4,0,2,2,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setDefaultOperator(Operator)",2,1,n/a,5,0,1,1,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setEnablePositionIncrements(boolean)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setFuzzyMinSim(float)",0,0,n/a,3,0,1,0,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setFuzzyPrefixLength(int)",0,0,n/a,3,0,1,0,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setLocale(Locale)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setLowercaseExpandedTerms(boolean)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setMultiTermRewriteMethod(RewriteMethod)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setPhraseSlop(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setQueryBuilder(StandardQueryBuilder)",0,0,n/a,9,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setQueryConfig(StandardQueryConfigHandler)",1,0,n/a,12,1,1,3,2
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setQueryProcessor(QueryNodeProcessor)",1,0,n/a,11,0,1,2,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setRangeCollator(Collator)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.QueryParserWrapper.setUseOldRangeQuery(boolean)",2,0,n/a,7,1,1,3,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.StandardQueryParser()",5,3,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.StandardQueryParser(Analyzer)",2,2,n/a,15,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getAllowLeadingWildcard()",2,1,n/a,12,1,0,4,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getAnalyzer()",2,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getDateResolution()",2,1,n/a,9,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getDateResolutionMap()",2,1,n/a,10,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getDefaultOperator()",2,1,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getEnablePositionIncrements()",2,1,n/a,12,1,0,4,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getFieldsBoost()",2,2,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getFuzzyMinSim()",3,1,n/a,12,1,0,4,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getFuzzyPrefixLength()",3,1,n/a,14,1,0,4,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getLocale()",2,1,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getLowercaseExpandedTerms()",2,1,n/a,12,1,0,4,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getMultiFields(CharSequence[])",2,1,n/a,9,0,1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getMultiTermRewriteMethod()",2,1,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getNumericConfigMap()",2,2,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.getPhraseSlop()",2,1,n/a,12,1,0,4,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.getRangeCollator()",2,1,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.parse(String,String)",1,5,n/a,18,0,2,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setAllowLeadingWildcard(boolean)",3,2,n/a,17,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setAnalyzer(Analyzer)",3,2,n/a,7,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDateResolution(Map<CharSequence, Resolution>)",1,0,n/a,11,0,1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDateResolution(Resolution)",3,1,n/a,14,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDateResolutionMap(Map<CharSequence, Resolution>)",3,3,n/a,14,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDefaultOperator(Operator)",1,1,n/a,20,1,1,5,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.setDefaultPhraseSlop(int)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setEnablePositionIncrements(boolean)",3,2,n/a,17,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setFieldsBoost(Map<String, Float>)",3,2,n/a,12,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setFuzzyMinSim(float)",3,1,n/a,19,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setFuzzyPrefixLength(int)",3,1,n/a,20,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setLocale(Locale)",3,1,n/a,10,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setLowercaseExpandedTerms(boolean)",3,2,n/a,17,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setMultiFields(CharSequence[])",3,1,n/a,16,1,1,4,2
"org.apache.lucene.queryParser.standard.StandardQueryParser.setMultiTermRewriteMethod(RewriteMethod)",3,2,n/a,18,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setNumericConfigMap(Map<String, NumericConfig>)",2,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setPhraseSlop(int)",3,3,n/a,12,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.setRangeCollator(Collator)",3,1,n/a,19,0,1,2,1
"org.apache.lucene.queryParser.standard.StandardQueryParser.toString()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.MultiAnalyzer.MultiAnalyzer()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.MultiAnalyzer.tokenStream(String,Reader)",3,78,n/a,7,0,2,4,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.PosIncrementAnalyzer.PosIncrementAnalyzer()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.PosIncrementAnalyzer.tokenStream(String,Reader)",3,78,n/a,7,0,2,4,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestFilter.TestFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestFilter.incrementToken()",12,216,n/a,29,2,0,21,5
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestFilter.reset()",1,118,n/a,7,0,0,4,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestPosIncrementFilter.TestPosIncrementFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestPosIncrementFilter.incrementToken()",7,216,n/a,15,2,0,8,4
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.testMultiAnalyzer()",72,0,n/a,54,0,0,27,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.testPosIncrementAnalyzer()",15,0,n/a,11,0,0,6,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.MultiAnalyzer.MultiAnalyzer()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.MultiAnalyzer.tokenStream(String,Reader)",3,78,n/a,7,0,2,4,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.PosIncrementAnalyzer.PosIncrementAnalyzer()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.PosIncrementAnalyzer.tokenStream(String,Reader)",3,78,n/a,7,0,2,4,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestFilter.TestFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestFilter.incrementToken()",12,216,n/a,29,2,0,21,5
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestPosIncrementFilter.TestPosIncrementFilter(TokenStream)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestPosIncrementFilter.incrementToken()",7,216,n/a,15,2,0,8,4
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.testMultiAnalyzer()",71,0,n/a,51,0,0,26,1
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.testPosIncrementAnalyzer()",14,0,n/a,10,0,0,5,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.AnalyzerReturningNull.AnalyzerReturningNull()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.AnalyzerReturningNull.EmptyTokenStream.incrementToken()",0,216,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.AnalyzerReturningNull.tokenStream(String,Reader)",3,78,n/a,8,1,2,3,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.assertStopQueryEquals(String,String)",10,7,n/a,14,0,2,10,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testAnalyzerReturningNull()",16,0,n/a,16,0,0,12,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testBoostsSimple()",25,0,n/a,27,0,0,18,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testSimple()",56,0,n/a,48,0,0,39,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod1()",26,0,n/a,30,1,0,24,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod2()",11,0,n/a,17,1,0,10,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod2Old()",15,0,n/a,21,1,0,13,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod3()",7,0,n/a,17,1,0,9,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStaticMethod3Old()",7,0,n/a,17,1,0,9,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStopWordSearching()",19,0,n/a,20,0,0,17,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.testStopwordsParsing()",7,0,n/a,13,0,0,7,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.AnalyzerReturningNull.AnalyzerReturningNull()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.AnalyzerReturningNull.EmptyTokenStream.incrementToken()",0,216,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.AnalyzerReturningNull.tokenStream(String,Reader)",3,78,n/a,8,1,2,3,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.assertStopQueryEquals(String,String)",8,7,n/a,13,0,2,8,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testAnalyzerReturningNull()",14,0,n/a,15,0,0,10,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testBoostsSimple()",22,0,n/a,25,0,0,15,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testSimple()",54,0,n/a,47,0,0,37,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod1()",26,0,n/a,35,1,0,24,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod2()",11,0,n/a,19,1,0,10,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod2Old()",11,0,n/a,21,1,0,10,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod3()",7,0,n/a,17,1,0,9,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStaticMethod3Old()",7,0,n/a,17,1,0,9,2
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStopWordSearching()",16,0,n/a,20,0,0,15,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.testStopwordsParsing()",7,0,n/a,13,0,0,7,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.afterClass()",3,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.assertOpenRangeQuery(NumberType,String,int)",27,0,n/a,13,1,3,7,2
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.assertRangeQuery(NumberType,NumberType,boolean,boolean,int)",44,10,n/a,37,1,5,19,6
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.assertSimpleQuery(NumberType,int)",24,3,n/a,15,1,2,7,2
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.beforeClass()",86,0,n/a,101,2,0,70,11
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.checkDateFormatSanity(DateFormat,long)",4,3,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.getNumberType(NumberType,String)",16,13,n/a,27,2,2,19,10
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.normalizeNumber(Number)",2,4,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.numberToString(Number)",3,4,n/a,4,0,1,1,2
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.randomDateStyle(Random)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.setFieldValues(NumberType,HashMap<String, NumericField>)",28,1,n/a,18,0,2,10,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.testExclusiveNumericRange()",5,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.testInclusiveNumericRange()",5,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.testQuery(String,int)",6,3,n/a,11,0,2,10,4
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.testSimpleNumericQuery()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedAnalyzer.tokenStream(String,Reader)",1,78,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedTokenizer.CannedTokenizer(Reader)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedTokenizer.incrementToken()",13,216,n/a,22,1,0,16,5
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedTokenizer.reset()",1,92,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestAnalyzer.tokenStream(String,Reader)",2,78,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestFilter.QPTestFilter(TokenStream)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestFilter.incrementToken()",14,216,n/a,22,2,0,17,5
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestFilter.reset()",1,118,n/a,7,0,0,4,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParser(Analyzer)",4,2,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParserQueryNodeProcessor.postProcessNode(QueryNode)",0,4,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParserQueryNodeProcessor.preProcessNode(QueryNode)",2,2,n/a,9,1,1,3,3
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParserQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.addDateDoc(String,int,int,int,int,int,int,IndexWriter)",10,2,n/a,10,0,8,6,1
"org.apache.lucene.queryParser.standard.TestQPHelper.assertDateRangeQueryEquals(StandardQueryParser,String,String,String,Date,Resolution)",10,5,n/a,10,0,6,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.assertEscapedQueryEquals(String,Analyzer,String)",3,25,n/a,8,1,3,3,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertHits(int,String,IndexSearcher)",7,6,n/a,9,0,3,6,1
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryEquals(StandardQueryParser,String,String,String)",4,2,n/a,9,1,4,4,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryEquals(String,Analyzer,String)",4,126,n/a,9,1,3,4,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryEqualsAllowLeadingWildcard(String,Analyzer,String)",4,1,n/a,9,1,3,4,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryEqualsDOA(String,Analyzer,String)",4,19,n/a,9,1,3,4,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertQueryNodeException(String)",2,13,n/a,8,1,1,4,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertWildcardQueryEquals(String,String)",5,3,n/a,10,1,2,5,2
"org.apache.lucene.queryParser.standard.TestQPHelper.assertWildcardQueryEquals(String,boolean,String)",1,21,n/a,4,0,3,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.assertWildcardQueryEquals(String,boolean,String,boolean)",7,3,n/a,12,1,4,7,2
"org.apache.lucene.queryParser.standard.TestQPHelper.escapeDateString(String)",1,8,n/a,7,1,1,3,2
"org.apache.lucene.queryParser.standard.TestQPHelper.getDate(Date,Resolution)",2,4,n/a,9,1,2,3,2
"org.apache.lucene.queryParser.standard.TestQPHelper.getDate(String,Resolution)",3,4,n/a,6,0,2,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getLegacyDate(String)",3,3,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getLocalizedDate(int,int,int)",10,4,n/a,11,0,3,9,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getParser(Analyzer)",4,5,n/a,8,0,1,6,2
"org.apache.lucene.queryParser.standard.TestQPHelper.getQuery(String,Analyzer)",2,21,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getQueryAllowLeadingWildcard(String,Analyzer)",3,1,n/a,5,0,2,3,1
"org.apache.lucene.queryParser.standard.TestQPHelper.getQueryDOA(String,Analyzer)",5,1,n/a,8,0,2,6,2
"org.apache.lucene.queryParser.standard.TestQPHelper.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.tearDown()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testBooleanQuery()",6,0,n/a,11,1,0,6,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testBoost()",25,0,n/a,22,0,0,19,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJK()",2,0,n/a,7,0,0,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKBoostedPhrase()",9,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKBoostedTerm()",11,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKPhrase()",8,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKSloppyPhrase()",9,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCJKTerm()",24,0,n/a,15,0,0,12,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testConstantScoreAutoRewrite()",14,0,n/a,12,0,0,10,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testCustomQueryParserFuzzy()",4,0,n/a,8,1,0,3,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testCustomQueryParserWildcard()",4,0,n/a,8,1,0,3,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testDateRange()",23,0,n/a,37,0,0,21,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testEscaped()",45,0,n/a,77,0,0,45,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testException()",7,0,n/a,9,0,0,7,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testFarsiRangeCollating()",32,0,n/a,40,0,0,23,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testLeadingWildcardType()",11,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testLegacyDateRange()",17,0,n/a,14,0,0,8,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testLocalDateFormat()",16,0,n/a,16,0,0,14,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testMatchAllDocs()",16,0,n/a,9,0,0,7,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testMultiPhraseQuery()",20,0,n/a,16,0,0,14,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testNumber()",7,0,n/a,10,0,0,7,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testPositionIncrement()",9,0,n/a,19,1,0,12,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testPrecedence()",6,0,n/a,10,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testPunct()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testQPA()",23,0,n/a,25,0,0,21,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testQueryStringEscaping()",26,0,n/a,29,0,0,26,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testRange()",17,0,n/a,16,0,0,13,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testSimple()",44,0,n/a,45,0,0,37,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testSimpleDAO()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testSlop()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testStarParsing()",0,0,n/a,61,0,0,0,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testStopwords()",24,0,n/a,22,0,0,15,2
"org.apache.lucene.queryParser.standard.TestQPHelper.testTabNewlineCarriageReturn()",14,0,n/a,17,0,0,14,1
"org.apache.lucene.queryParser.standard.TestQPHelper.testWildcard()",57,0,n/a,78,1,0,50,3
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestAnalyzer.tokenStream(String,Reader)",2,78,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestFilter.QPTestFilter(TokenStream)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestFilter.incrementToken()",14,216,n/a,22,2,0,17,5
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParser(String,Analyzer)",11,2,n/a,9,0,2,6,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParserQueryNodeProcessor.postProcessNode(QueryNode)",0,4,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParserQueryNodeProcessor.preProcessNode(QueryNode)",2,2,n/a,9,1,1,3,3
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParserQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.getFuzzyQuery(String,String,float)",1,0,n/a,5,0,3,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.getWildcardQuery(String,String)",1,0,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.addDateDoc(String,int,int,int,int,int,int,IndexWriter)",10,2,n/a,10,0,8,6,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertDateRangeQueryEquals(QueryParserWrapper,String,String,String,Date,Resolution)",10,5,n/a,10,0,6,2,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertEscapedQueryEquals(String,Analyzer,String)",3,25,n/a,8,1,3,3,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertHits(int,String,IndexSearcher)",6,6,n/a,9,0,3,5,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertParseException(String)",2,12,n/a,8,1,1,4,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertQueryEquals(QueryParserWrapper,String,String,String)",4,2,n/a,9,1,4,4,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertQueryEquals(String,Analyzer,String)",4,125,n/a,9,1,3,4,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertQueryEqualsAllowLeadingWildcard(String,Analyzer,String)",4,1,n/a,9,1,3,4,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertQueryEqualsDOA(String,Analyzer,String)",4,19,n/a,9,1,3,4,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertWildcardQueryEquals(String,String)",5,3,n/a,10,1,2,5,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertWildcardQueryEquals(String,boolean,String)",1,21,n/a,4,0,3,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.assertWildcardQueryEquals(String,boolean,String,boolean)",7,3,n/a,12,1,4,7,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.escapeDateString(String)",1,8,n/a,7,1,1,3,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getDate(Date,Resolution)",2,4,n/a,9,1,2,3,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getDate(String,Resolution)",3,4,n/a,6,0,2,2,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getLegacyDate(String)",3,3,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getLocalizedDate(int,int,int)",10,4,n/a,11,0,3,9,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getParser(Analyzer)",3,5,n/a,7,0,1,5,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getQuery(String,Analyzer)",2,20,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getQueryAllowLeadingWildcard(String,Analyzer)",3,1,n/a,5,0,2,3,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.getQueryDOA(String,Analyzer)",4,1,n/a,7,0,2,5,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.setUp()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.tearDown()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testBooleanQuery()",5,0,n/a,11,1,0,5,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testBoost()",23,0,n/a,21,0,0,17,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJK()",2,0,n/a,7,0,0,2,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKBoostedPhrase()",9,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKBoostedTerm()",11,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKPhrase()",8,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKSloppyPhrase()",9,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCJKTerm()",10,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCustomQueryParserFuzzy()",4,0,n/a,8,1,0,3,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testCustomQueryParserWildcard()",4,0,n/a,8,1,0,3,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testDateRange()",21,0,n/a,34,0,0,18,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testEscaped()",44,0,n/a,76,0,0,44,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testException()",6,0,n/a,8,0,0,6,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testFarsiRangeCollating()",30,0,n/a,37,0,0,22,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testLeadingWildcardType()",11,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testLegacyDateRange()",17,0,n/a,14,0,0,8,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testLocalDateFormat()",15,0,n/a,17,0,0,14,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testMatchAllDocs()",15,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testNumber()",7,0,n/a,10,0,0,7,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testPositionIncrement()",8,0,n/a,17,1,0,11,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testPrecedence()",5,0,n/a,10,0,0,4,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testPunct()",4,0,n/a,6,0,0,4,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testQPA()",23,0,n/a,25,0,0,21,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testQueryStringEscaping()",26,0,n/a,29,0,0,26,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testRange()",18,0,n/a,17,0,0,13,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testSimple()",54,0,n/a,53,0,0,43,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testSimpleDAO()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testSlop()",5,0,n/a,7,0,0,5,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testStarParsing()",0,0,n/a,61,0,0,0,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testStopwords()",23,0,n/a,18,0,0,14,2
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testTabNewlineCarriageReturn()",14,0,n/a,17,0,0,14,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.testWildcard()",57,0,n/a,77,1,0,50,3
"org.apache.lucene.queryParser.standard.builders.AnyQueryNodeBuilder.AnyQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.AnyQueryNodeBuilder.build(QueryNode)",8,0,n/a,24,4,1,13,5
"org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder.BooleanQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder.build(QueryNode)",10,0,n/a,22,4,1,12,5
"org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder.getModifierValue(QueryNode)",1,1,n/a,15,2,1,10,5
"org.apache.lucene.queryParser.standard.builders.BoostQueryNodeBuilder.BoostQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.BoostQueryNodeBuilder.build(QueryNode)",4,0,n/a,11,1,1,7,2
"org.apache.lucene.queryParser.standard.builders.DummyQueryNodeBuilder.DummyQueryNodeBuilder()",0,0,n/a,6,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.DummyQueryNodeBuilder.build(QueryNode)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.queryParser.standard.builders.FieldQueryNodeBuilder.FieldQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.FieldQueryNodeBuilder.build(QueryNode)",4,0,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.standard.builders.FuzzyQueryNodeBuilder.FuzzyQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.FuzzyQueryNodeBuilder.build(QueryNode)",6,0,n/a,6,0,1,2,1
"org.apache.lucene.queryParser.standard.builders.GroupQueryNodeBuilder.GroupQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.GroupQueryNodeBuilder.build(QueryNode)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.standard.builders.MatchAllDocsQueryNodeBuilder.MatchAllDocsQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.MatchAllDocsQueryNodeBuilder.build(QueryNode)",7,0,n/a,10,1,1,3,2
"org.apache.lucene.queryParser.standard.builders.MatchNoDocsQueryNodeBuilder.MatchNoDocsQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.MatchNoDocsQueryNodeBuilder.build(QueryNode)",7,0,n/a,10,1,1,3,2
"org.apache.lucene.queryParser.standard.builders.ModifierQueryNodeBuilder.ModifierQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.ModifierQueryNodeBuilder.build(QueryNode)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.standard.builders.MultiPhraseQueryNodeBuilder.MultiPhraseQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.MultiPhraseQueryNodeBuilder.build(QueryNode)",16,0,n/a,26,3,1,17,5
"org.apache.lucene.queryParser.standard.builders.NumericRangeQueryNodeBuilder.NumericRangeQueryNodeBuilder()",0,0,n/a,6,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.NumericRangeQueryNodeBuilder.build(QueryNode)",17,0,n/a,43,1,1,27,8
"org.apache.lucene.queryParser.standard.builders.PhraseQueryNodeBuilder.PhraseQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.PhraseQueryNodeBuilder.build(QueryNode)",6,0,n/a,14,2,1,9,3
"org.apache.lucene.queryParser.standard.builders.PrefixWildcardQueryNodeBuilder.PrefixWildcardQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.PrefixWildcardQueryNodeBuilder.build(QueryNode)",10,0,n/a,10,1,1,7,2
"org.apache.lucene.queryParser.standard.builders.RangeQueryNodeBuilder.RangeQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.RangeQueryNodeBuilder.build(QueryNode)",12,0,n/a,23,1,1,15,4
"org.apache.lucene.queryParser.standard.builders.SlopQueryNodeBuilder.SlopQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.SlopQueryNodeBuilder.build(QueryNode)",6,0,n/a,11,1,1,6,2
"org.apache.lucene.queryParser.standard.builders.StandardBooleanQueryNodeBuilder.StandardBooleanQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.StandardBooleanQueryNodeBuilder.build(QueryNode)",11,0,n/a,22,4,1,12,5
"org.apache.lucene.queryParser.standard.builders.StandardBooleanQueryNodeBuilder.getModifierValue(QueryNode)",3,1,n/a,15,2,1,9,4
"org.apache.lucene.queryParser.standard.builders.StandardQueryBuilder.build(QueryNode)",n/a,2,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder.StandardQueryTreeBuilder()",36,2,n/a,22,0,0,18,1
"org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder.build(QueryNode)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.builders.TermRangeQueryNodeBuilder.TermRangeQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.TermRangeQueryNodeBuilder.build(QueryNode)",11,0,n/a,15,1,1,9,2
"org.apache.lucene.queryParser.standard.builders.WildcardQueryNodeBuilder.WildcardQueryNodeBuilder()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.builders.WildcardQueryNodeBuilder.build(QueryNode)",6,0,n/a,10,1,1,6,2
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttribute.isAllowLeadingWildcard()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttribute.setAllowLeadingWildcard(boolean)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.equals(Object)",2,0,n/a,8,1,1,3,3
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.isAllowLeadingWildcard()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.setAllowLeadingWildcard(boolean)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl.toString()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttribute.getAnalyzer()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.AnalyzerAttribute.setAnalyzer(Analyzer)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.AnalyzerAttributeImpl()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.equals(Object)",3,0,n/a,14,2,1,7,6
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.getAnalyzer()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.hashCode()",2,0,n/a,5,0,0,2,2
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.setAnalyzer(Analyzer)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl.toString()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttribute.getBoost()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.BoostAttribute.setBoost(float)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.BoostAttributeImpl()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.equals(Object)",2,0,n/a,8,1,1,3,3
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.getBoost()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.hashCode()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.setBoost(float)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl.toString()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttribute.getDateResolution()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.DateResolutionAttribute.setDateResolution(Resolution)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.DateResolutionAttributeImpl()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.equals(Object)",5,0,n/a,11,2,1,5,4
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.getDateResolution()",1,6,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.hashCode()",2,0,n/a,5,0,0,2,2
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.setDateResolution(Resolution)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl.toString()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute.getOperator()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute.setOperator(Operator)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.DefaultOperatorAttributeImpl()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.equals(Object)",2,0,n/a,10,2,1,5,3
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.getOperator()",1,4,n/a,10,1,0,6,2
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.hashCode()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.setOperator(Operator)",2,1,n/a,12,1,1,7,3
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl.toString()",2,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttribute.getDefaultPhraseSlop()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttribute.setDefaultPhraseSlop(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.DefaultPhraseSlopAttributeImpl()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.equals(Object)",2,0,n/a,8,1,1,3,3
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.getDefaultPhraseSlop()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.hashCode()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.setDefaultPhraseSlop(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl.toString()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttribute.getFieldBoostMap()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttribute.setFieldBoostMap(Map<String, Float>)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.FieldBoostMapAttributeImpl()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.equals(Object)",3,0,n/a,8,1,1,3,3
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.getFieldBoostMap()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.hashCode()",4,0,n/a,9,0,0,5,2
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.setFieldBoostMap(Map<String, Float>)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",3,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl.toString()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapFCListener.FieldBoostMapFCListener(QueryConfigHandler)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FieldBoostMapFCListener.buildFieldConfig(FieldConfig)",5,0,n/a,11,2,1,5,3
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionFCListener.FieldDateResolutionFCListener(QueryConfigHandler)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionFCListener.buildFieldConfig(FieldConfig)",7,0,n/a,13,1,1,6,3
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttribute.getFieldDateResolutionMap()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttribute.setFieldDateResolutionMap(Map<CharSequence, Resolution>)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.FieldDateResolutionMapAttributeImpl()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.equals(Object)",3,0,n/a,9,1,1,3,3
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.getFieldDateResolutionMap()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.hashCode()",4,0,n/a,9,0,0,5,2
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.setFieldDateResolutionMap(Map<CharSequence, Resolution>)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",3,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl.toString()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttribute.getFuzzyMinSimilarity()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.FuzzyAttribute.getPrefixLength()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.FuzzyAttribute.setFuzzyMinSimilarity(float)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.FuzzyAttribute.setPrefixLength(int)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.FuzzyAttributeImpl()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.equals(Object)",2,0,n/a,8,1,1,3,3
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.getFuzzyConfig()",3,5,n/a,8,1,0,5,2
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.getFuzzyMinSimilarity()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.getPrefixLength()",2,3,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.hashCode()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.setFuzzyMinSimilarity(float)",2,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.setPrefixLength(int)",2,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",3,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl.toString()",3,4,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.FuzzyConfig()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.getMinSimilarity()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.getPrefixLength()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.setMinSimilarity(float)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.FuzzyConfig.setPrefixLength(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttribute.getLocale()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.LocaleAttribute.setLocale(Locale)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.LocaleAttributeImpl()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.equals(Object)",1,0,n/a,12,2,1,5,6
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.getLocale()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.setLocale(Locale)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",3,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl.toString()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttribute.isLowercaseExpandedTerms()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttribute.setLowercaseExpandedTerms(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.LowercaseExpandedTermsAttributeImpl()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.equals(Object)",2,0,n/a,9,1,1,3,3
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.isLowercaseExpandedTerms()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.setLowercaseExpandedTerms(boolean)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl.toString()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttribute.getFields()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.MultiFieldAttribute.setFields(CharSequence[])",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.MultiFieldAttributeImpl()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.equals(Object)",3,0,n/a,8,1,1,4,2
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.getFields()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.hashCode()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.setFields(CharSequence[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl.toString()",2,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttribute.getMultiTermRewriteMethod()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttribute.setMultiTermRewriteMethod(RewriteMethod)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.MultiTermRewriteMethodAttributeImpl()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.equals(Object)",2,0,n/a,8,1,1,3,3
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.getMultiTermRewriteMethod()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.hashCode()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.setMultiTermRewriteMethod(RewriteMethod)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl.toString()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.NumberDateFormat(DateFormat)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.format(Object,StringBuffer,FieldPosition)",1,0,n/a,5,0,3,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.format(double,StringBuffer,FieldPosition)",2,0,n/a,5,0,3,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.format(long,StringBuffer,FieldPosition)",2,0,n/a,5,0,3,1,1
"org.apache.lucene.queryParser.standard.config.NumberDateFormat.parse(String,ParsePosition)",2,0,n/a,5,0,2,2,2
"org.apache.lucene.queryParser.standard.config.NumericConfig.NumericConfig(int,NumberFormat,DataType)",3,2,n/a,21,0,3,3,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.equals(Object)",1,0,n/a,13,2,1,7,7
"org.apache.lucene.queryParser.standard.config.NumericConfig.getNumberFormat()",0,2,n/a,10,0,0,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.getPrecisionStep()",0,2,n/a,10,0,0,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.getType()",0,8,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.setNumberFormat(NumberFormat)",1,2,n/a,14,1,1,3,2
"org.apache.lucene.queryParser.standard.config.NumericConfig.setPrecisionStep(int)",0,2,n/a,11,0,1,1,1
"org.apache.lucene.queryParser.standard.config.NumericConfig.setType(DataType)",1,2,n/a,11,1,1,3,2
"org.apache.lucene.queryParser.standard.config.NumericFieldConfigListener.NumericFieldConfigListener(QueryConfigHandler)",1,0,n/a,11,1,1,3,2
"org.apache.lucene.queryParser.standard.config.NumericFieldConfigListener.buildFieldConfig(FieldConfig)",4,0,n/a,11,2,1,5,3
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttribute.isPositionIncrementsEnabled()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttribute.setPositionIncrementsEnabled(boolean)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.PositionIncrementsAttributeImpl()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.equals(Object)",2,0,n/a,9,1,1,3,3
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.isPositionIncrementsEnabled()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.setPositionIncrementsEnabled(boolean)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",2,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl.toString()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttribute.getRangeCollator()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttribute.setDateResolution(Collator)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.RangeCollatorAttributeImpl()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.clear()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.copyTo(AttributeImpl)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.equals(Object)",3,0,n/a,13,2,1,7,4
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.getRangeCollator()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.hashCode()",2,0,n/a,5,0,0,2,2
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.setDateResolution(Collator)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.setQueryConfigHandler(AbstractQueryConfig)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl.toString()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler.StandardQueryConfigHandler()",18,2,n/a,39,0,0,15,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.AbstractRangeQueryNode()",2,0,n/a,8,0,0,2,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.getField()",4,0,n/a,18,1,0,8,3
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.getLowerBound()",2,4,n/a,9,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.getUpperBound()",2,4,n/a,9,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.isLowerInclusive()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.isUpperInclusive()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.setBounds(T,T,boolean,boolean)",11,0,n/a,32,2,4,11,8
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.setField(CharSequence)",4,0,n/a,15,1,1,6,3
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode.toQueryString(EscapeQuerySyntax)",15,0,n/a,27,1,1,17,5
"org.apache.lucene.queryParser.standard.nodes.BooleanModifierNode.BooleanModifierNode(QueryNode,Modifier)",1,4,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.MultiPhraseQueryNode()",2,1,n/a,4,0,0,2,1
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.cloneTree()",1,2,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.getField()",4,4,n/a,8,1,0,4,3
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.setField(CharSequence)",2,4,n/a,10,3,1,5,4
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.toQueryString(EscapeQuerySyntax)",9,0,n/a,11,1,1,8,4
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode.toString()",11,0,n/a,13,1,0,9,4
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.NumericQueryNode(CharSequence,Number,NumberFormat)",4,4,n/a,16,0,3,4,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.getField()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.getNumberFormat()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.getTermEscaped(EscapeQuerySyntax)",3,2,n/a,12,0,1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.getValue()",0,3,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.setField(CharSequence)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.setNumberFormat(NumberFormat)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.setValue(Number)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.toQueryString(EscapeQuerySyntax)",3,0,n/a,7,1,1,3,2
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode.toString()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.NumericRangeQueryNode(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig)",1,2,n/a,16,0,5,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.getNumericConfig()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.getNumericDataType(Number)",3,2,n/a,16,1,1,9,5
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.setBounds(NumericQueryNode,NumericQueryNode,boolean,boolean,NumericConfig)",16,2,n/a,42,1,5,15,10
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode.toString()",19,0,n/a,12,0,0,6,1
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode.PrefixWildcardQueryNode(CharSequence,CharSequence,int,int)",1,1,n/a,14,0,4,1,1
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode.PrefixWildcardQueryNode(FieldQueryNode)",5,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode.cloneTree()",1,0,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode.toString()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.RangeQueryNode(ParametricQueryNode,ParametricQueryNode,Collator)",3,1,n/a,10,0,3,2,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.getCollator()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.getLowerBound()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.getUpperBound()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.setBounds(FieldQueryNode,FieldQueryNode,boolean,boolean)",9,0,n/a,30,1,4,5,5
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode.toString()",9,0,n/a,8,0,0,5,1
"org.apache.lucene.queryParser.standard.nodes.StandardBooleanQueryNode.StandardBooleanQueryNode(List<QueryNode>,boolean)",1,1,n/a,7,0,2,2,1
"org.apache.lucene.queryParser.standard.nodes.StandardBooleanQueryNode.isDisableCoord()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.nodes.TermRangeQueryNode.TermRangeQueryNode(FieldQueryNode,FieldQueryNode,boolean,boolean)",1,0,n/a,19,0,4,1,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.WildcardQueryNode(CharSequence,CharSequence,int,int)",1,1,n/a,14,0,4,1,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.WildcardQueryNode(FieldQueryNode)",5,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.cloneTree()",1,1,n/a,6,0,0,2,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.toQueryString(EscapeQuerySyntax)",3,0,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.discardEscapeChar(CharSequence)",10,0,n/a,65,3,1,32,9
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escape(CharSequence,Locale,Type)",6,9,n/a,18,1,3,8,5
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escapeChar(CharSequence,Locale)",8,1,n/a,19,2,2,14,6
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escapeQuoted(CharSequence,Locale)",3,1,n/a,10,1,2,8,4
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escapeTerm(CharSequence,Locale)",4,1,n/a,13,1,2,10,4
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.escapeWhiteChar(CharSequence,Locale)",3,1,n/a,20,1,2,8,4
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.hexToInt(char)",2,1,n/a,13,1,1,7,7
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl.replaceIgnoreCase(CharSequence,CharSequence,CharSequence,Locale)",32,3,n/a,63,4,4,39,15
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.AdjustBuffSize()",2,2,n/a,19,2,0,10,5
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.BeginToken()",1,0,n/a,15,1,0,9,3
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.Done()",0,0,n/a,8,0,0,4,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ExpandBuff(boolean)",11,2,n/a,39,2,1,25,3
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.FillBuff()",4,1,n/a,30,2,0,15,5
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.GetImage()",3,0,n/a,9,0,0,3,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.GetSuffix(int)",3,0,n/a,14,1,1,6,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,String)",1,0,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,String,int,int)",1,0,n/a,6,0,4,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,String,int,int,int)",3,2,n/a,6,0,5,1,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,int,int)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(InputStream,int,int,int)",2,4,n/a,6,0,4,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(Reader)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(Reader,int,int)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.JavaCharStream(Reader,int,int,int)",0,4,n/a,13,0,4,8,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,String)",1,0,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,String,int,int)",1,0,n/a,6,0,4,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,String,int,int,int)",3,2,n/a,6,0,5,1,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,int,int)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(InputStream,int,int,int)",2,4,n/a,6,0,4,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(Reader)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(Reader,int,int)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReInit(Reader,int,int,int)",0,4,n/a,19,1,4,12,3
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.ReadByte()",1,6,n/a,6,0,0,3,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.UpdateLineColumn(char)",0,4,n/a,36,2,1,24,8
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.adjustBeginLineColumn(int,int)",0,0,n/a,41,2,2,22,7
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.backup(int)",0,4,n/a,6,0,1,3,2
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getBeginColumn()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getBeginLine()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getColumn()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getEndColumn()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getEndLine()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getLine()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.getTabSize(int)",0,0,n/a,1,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.hexval(char)",1,4,n/a,44,1,1,40,17
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.readChar()",20,1,n/a,76,5,0,40,16
"org.apache.lucene.queryParser.standard.parser.JavaCharStream.setTabSize(int)",0,0,n/a,1,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.ParseException.ParseException()",2,0,n/a,12,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.ParseException.ParseException(Message)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.ParseException.ParseException(Token,int[][],String[])",3,0,n/a,20,0,3,4,1
"org.apache.lucene.queryParser.standard.parser.ParseException.add_escapes(String)",19,1,n/a,49,3,1,39,14
"org.apache.lucene.queryParser.standard.parser.ParseException.initialise(Token,int[][],String[])",9,1,n/a,50,2,3,37,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Clause(CharSequence)",19,1,n/a,57,3,1,43,14
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ConjQuery(CharSequence)",9,2,n/a,29,2,1,23,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Conjunction()",7,0,n/a,29,2,0,23,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.DisjQuery(CharSequence)",9,2,n/a,29,2,1,23,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ModClause(CharSequence)",4,2,n/a,49,1,1,9,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Modifiers()",8,1,n/a,32,2,0,28,10
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Query(CharSequence)",8,2,n/a,46,2,1,30,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ReInit(InputStream)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ReInit(InputStream,String)",5,1,n/a,10,1,2,15,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ReInit(Reader)",4,0,n/a,10,0,1,13,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.ReInit(StandardSyntaxParserTokenManager)",2,0,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser()",2,4,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser(InputStream)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser(InputStream,String)",5,1,n/a,10,1,2,15,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser(Reader)",4,0,n/a,10,0,1,13,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.StandardSyntaxParser(StandardSyntaxParserTokenManager)",2,0,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.Term(CharSequence)",94,1,n/a,227,4,1,177,69
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.TopLevelQuery(CharSequence)",3,1,n/a,8,1,1,6,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.disable_tracing()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.enable_tracing()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.generateParseException()",8,1,n/a,33,4,0,30,9
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.getNextToken()",1,0,n/a,8,0,0,6,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.getToken(int)",1,0,n/a,9,1,1,8,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_2_1(int)",2,1,n/a,6,1,1,6,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_3_1()",2,2,n/a,5,0,0,5,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_add_error_token(int,int)",4,2,n/a,24,5,2,24,10
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_consume_token(int)",2,51,n/a,23,4,1,21,7
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_la1_init_0()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_ntk()",1,24,n/a,6,0,0,3,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_rescan_token()",1,1,n/a,18,5,0,16,6
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_save(int,int)",1,1,n/a,8,2,2,9,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.jj_scan_token(int)",2,2,n/a,20,2,1,19,10
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.parse(CharSequence,CharSequence)",10,4,n/a,23,1,2,11,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.ReInit(JavaCharStream)",1,1,n/a,8,0,1,4,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.ReInit(JavaCharStream,int)",2,0,n/a,6,0,2,2,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.ReInitRounds()",0,5,n/a,7,0,0,5,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.StandardSyntaxParserTokenManager(JavaCharStream)",1,1,n/a,6,0,1,3,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.StandardSyntaxParserTokenManager(JavaCharStream,int)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.SwitchTo(int)",1,2,n/a,8,0,1,3,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.getNextToken()",16,0,n/a,81,3,0,58,18
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjAddStates(int,int)",0,6,n/a,6,1,2,2,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCanMove_0(int,int,int,long,long)",0,3,n/a,10,1,5,5,3
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCanMove_1(int,int,int,long,long)",0,8,n/a,12,1,5,7,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCanMove_2(int,int,int,long,long)",0,2,n/a,14,1,5,9,5
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCheckNAdd(int)",0,19,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCheckNAddStates(int,int)",1,11,n/a,6,1,2,2,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjCheckNAddTwoStates(int,int)",2,15,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjFillToken()",6,2,n/a,21,0,0,18,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveNfa_0(int,int)",5,1,n/a,79,4,2,57,22
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveNfa_1(int,int)",17,3,n/a,138,5,2,108,48
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveNfa_2(int,int)",17,3,n/a,138,5,2,108,48
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveNfa_3(int,int)",30,2,n/a,283,5,2,247,119
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa0_0()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa0_1()",3,1,n/a,12,1,0,7,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa0_2()",3,1,n/a,12,1,0,7,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa0_3()",9,1,n/a,24,1,0,19,10
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa1_1(long)",4,1,n/a,18,1,1,12,5
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjMoveStringLiteralDfa1_2(long)",4,1,n/a,18,1,1,12,5
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfaWithStates_1(int,int,int)",2,1,n/a,8,1,3,6,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfaWithStates_2(int,int,int)",2,1,n/a,8,1,3,6,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfa_1(int,long)",2,1,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfa_2(int,long)",2,1,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStartNfa_3(int,long)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStopAtPos(int,int)",0,10,n/a,6,0,2,3,1
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStopStringLiteralDfa_1(int,long)",0,2,n/a,15,2,2,8,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStopStringLiteralDfa_2(int,long)",0,2,n/a,15,2,2,8,4
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.jjStopStringLiteralDfa_3(int,long)",0,1,n/a,8,1,2,3,2
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager.setDebugStream(PrintStream)",0,0,n/a,2,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.Token()",0,0,n/a,4,0,0,0,1
"org.apache.lucene.queryParser.standard.parser.Token.Token(int)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.Token(int,String)",0,2,n/a,8,0,2,2,1
"org.apache.lucene.queryParser.standard.parser.Token.getValue()",0,0,n/a,11,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.Token.newToken(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.parser.Token.newToken(int,String)",1,1,n/a,19,1,2,3,2
"org.apache.lucene.queryParser.standard.parser.Token.toString()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.LexicalError(boolean,int,int,int,String,char)",3,1,n/a,19,0,6,1,2
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.TokenMgrError()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.TokenMgrError(String,int)",1,1,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.TokenMgrError(boolean,int,int,int,String,char,int)",2,0,n/a,4,0,7,1,1
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.addEscapes(String)",19,2,n/a,48,3,1,39,14
"org.apache.lucene.queryParser.standard.parser.TokenMgrError.getMessage()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.AllowLeadingWildcardProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.postProcessNode(QueryNode)",10,4,n/a,19,3,1,10,5
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.process(QueryNode)",3,6,n/a,10,2,1,5,3
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.AnalyzerQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.postProcessNode(QueryNode)",50,4,n/a,158,7,1,105,35
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.process(QueryNode)",5,6,n/a,16,2,1,10,4
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor.BooleanSingleChildOptimizationQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor.postProcessNode(QueryNode)",4,4,n/a,19,4,1,10,7
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor.postProcessNode(QueryNode)",8,4,n/a,19,4,1,11,7
"org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.DefaultPhraseSlopQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.postProcessNode(QueryNode)",1,4,n/a,8,1,1,3,3
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,7,1,1,3,2
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.process(QueryNode)",3,6,n/a,12,2,1,7,3
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.processChildren(QueryNode)",1,3,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor.postProcessNode(QueryNode)",0,4,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor.preProcessNode(QueryNode)",9,2,n/a,17,3,1,11,6
"org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.GroupQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.applyModifier(QueryNode,QueryNode)",11,2,n/a,35,4,2,18,10
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.getQueryConfigHandler()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.process(QueryNode)",12,4,n/a,28,2,1,21,6
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.processNode(QueryNode)",8,3,n/a,12,2,1,7,6
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.readTree(QueryNode)",11,3,n/a,16,3,1,11,5
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor.setQueryConfigHandler(QueryConfigHandler)",0,6,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.LowercaseExpandedTermsQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.postProcessNode(QueryNode)",3,4,n/a,9,1,1,4,4
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.process(QueryNode)",3,6,n/a,8,1,1,4,3
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor.MatchAllDocsQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor.postProcessNode(QueryNode)",7,4,n/a,11,2,1,5,4
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.MultiFieldQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.postProcessNode(QueryNode)",0,4,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.preProcessNode(QueryNode)",12,2,n/a,34,6,1,22,9
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.processChildren(QueryNode)",1,3,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor.postProcessNode(QueryNode)",4,4,n/a,19,2,1,6,4
"org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor.NumericQueryNodeProcessor()",0,0,n/a,6,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor.postProcessNode(QueryNode)",22,4,n/a,48,5,1,29,11
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor.NumericRangeQueryNodeProcessor()",0,0,n/a,6,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor.postProcessNode(QueryNode)",38,4,n/a,63,5,1,40,11
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor.ParametricRangeQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor.postProcessNode(QueryNode)",34,4,n/a,65,3,1,43,9
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor.PhraseSlopQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor.postProcessNode(QueryNode)",3,4,n/a,11,2,1,5,4
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.RemoveEmptyNonLeafQueryNodeProcessor()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.postProcessNode(QueryNode)",0,4,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.process(QueryNode)",5,6,n/a,11,2,1,6,4
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",8,3,n/a,21,4,1,11,5
"org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline.StandardQueryNodeProcessorPipeline(QueryConfigHandler)",39,4,n/a,22,0,1,20,1
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.WildcardQueryNodeProcessor()",0,2,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.isPrefixWildcard(CharSequence)",12,1,n/a,20,2,1,18,12
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.isWildcard(CharSequence)",5,2,n/a,11,2,1,8,7
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.postProcessNode(QueryNode)",6,4,n/a,26,2,1,12,8
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.preProcessNode(QueryNode)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor.setChildrenOrder(List<QueryNode>)",0,3,n/a,5,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.CharStream.BeginToken()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.Done()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.GetImage()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.GetSuffix(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.backup(int)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.getBeginColumn()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.getBeginLine()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.getColumn()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.getEndColumn()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.getEndLine()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.getLine()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.CharStream.readChar()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.parser.FastCharStream.BeginToken()",1,0,n/a,4,0,0,2,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.Done()",2,0,n/a,7,1,0,3,2
"org.apache.lucene.queryParser.surround.parser.FastCharStream.FastCharStream(Reader)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.GetImage()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.GetSuffix(int)",1,0,n/a,5,0,1,3,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.backup(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getBeginColumn()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getBeginLine()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getColumn()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getEndColumn()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getEndLine()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.getLine()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.FastCharStream.readChar()",1,1,n/a,5,0,0,3,2
"org.apache.lucene.queryParser.surround.parser.FastCharStream.refill()",4,1,n/a,24,2,0,17,5
"org.apache.lucene.queryParser.surround.parser.ParseException.ParseException()",1,0,n/a,13,0,0,2,1
"org.apache.lucene.queryParser.surround.parser.ParseException.ParseException(String)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.queryParser.surround.parser.ParseException.ParseException(Token,int[][],String[])",1,0,n/a,23,0,3,5,1
"org.apache.lucene.queryParser.surround.parser.ParseException.add_escapes(String)",19,1,n/a,49,3,1,39,14
"org.apache.lucene.queryParser.surround.parser.ParseException.getMessage()",9,1,n/a,52,2,0,38,10
"org.apache.lucene.queryParser.surround.parser.QueryParser.AndQuery()",9,2,n/a,27,2,0,21,8
"org.apache.lucene.queryParser.surround.parser.QueryParser.FieldsQuery()",4,4,n/a,8,1,0,7,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.FieldsQueryList()",10,4,n/a,24,2,0,20,6
"org.apache.lucene.queryParser.surround.parser.QueryParser.NQuery()",9,2,n/a,25,2,0,21,6
"org.apache.lucene.queryParser.surround.parser.QueryParser.NotQuery()",9,2,n/a,27,2,0,21,8
"org.apache.lucene.queryParser.surround.parser.QueryParser.OptionalFields()",6,1,n/a,21,2,0,14,5
"org.apache.lucene.queryParser.surround.parser.QueryParser.OptionalWeights(SrndQuery)",9,1,n/a,26,3,1,20,9
"org.apache.lucene.queryParser.surround.parser.QueryParser.OrQuery()",9,1,n/a,27,2,0,21,8
"org.apache.lucene.queryParser.surround.parser.QueryParser.PrefixOperatorQuery()",16,1,n/a,35,2,0,32,11
"org.apache.lucene.queryParser.surround.parser.QueryParser.PrimaryQuery()",10,2,n/a,31,1,0,28,7
"org.apache.lucene.queryParser.surround.parser.QueryParser.QueryParser()",3,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.QueryParser(CharStream)",3,0,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.QueryParser(QueryParserTokenManager)",2,0,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.ReInit(CharStream)",3,0,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.ReInit(QueryParserTokenManager)",2,0,n/a,9,0,1,12,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.SimpleTerm()",26,1,n/a,42,3,0,41,19
"org.apache.lucene.queryParser.surround.parser.QueryParser.TopSrndQuery()",3,1,n/a,7,1,0,6,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.WQuery()",9,2,n/a,25,2,0,21,6
"org.apache.lucene.queryParser.surround.parser.QueryParser.allowedSuffix(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.allowedTruncation(String)",2,1,n/a,11,2,1,8,4
"org.apache.lucene.queryParser.surround.parser.QueryParser.checkDistanceSubQueries(DistanceQuery,String)",2,1,n/a,7,1,2,3,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.disable_tracing()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.enable_tracing()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.generateParseException()",8,1,n/a,33,4,0,30,9
"org.apache.lucene.queryParser.surround.parser.QueryParser.getAndQuery(List<SrndQuery>,boolean,Token)",1,2,n/a,3,0,3,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getDistanceQuery(List<SrndQuery>,boolean,Token,boolean)",3,4,n/a,13,0,4,3,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getFieldsQuery(SrndQuery,ArrayList<String>)",1,1,n/a,7,0,2,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getNextToken()",1,0,n/a,8,0,0,6,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.getNotQuery(List<SrndQuery>,Token)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getOpDistance(String)",4,1,n/a,6,0,1,1,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.getOrQuery(List<SrndQuery>,boolean,Token)",1,2,n/a,3,0,3,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getPrefixQuery(String,boolean)",1,2,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getTermQuery(String,boolean)",1,2,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.getToken(int)",1,0,n/a,9,1,1,8,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.getTruncQuery(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_2_1(int)",2,1,n/a,6,1,1,6,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_3_1()",2,2,n/a,5,0,0,5,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_add_error_token(int,int)",4,2,n/a,24,5,2,24,10
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_consume_token(int)",2,27,n/a,23,4,1,21,7
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_la1_init_0()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_ntk()",1,10,n/a,6,0,0,3,2
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_rescan_token()",1,1,n/a,18,5,0,16,6
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_save(int,int)",1,1,n/a,8,2,2,9,3
"org.apache.lucene.queryParser.surround.parser.QueryParser.jj_scan_token(int)",2,2,n/a,20,2,1,19,10
"org.apache.lucene.queryParser.surround.parser.QueryParser.parse(String)",2,2,n/a,4,0,1,2,1
"org.apache.lucene.queryParser.surround.parser.QueryParser.parse2(String)",6,1,n/a,8,1,1,4,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.QueryParserTokenManager(CharStream)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.QueryParserTokenManager(CharStream,int)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.ReInit(CharStream)",1,1,n/a,8,0,1,4,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.ReInit(CharStream,int)",2,0,n/a,6,0,2,2,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.ReInitRounds()",0,3,n/a,7,0,0,5,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.SwitchTo(int)",1,2,n/a,8,0,1,3,3
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.getNextToken()",14,0,n/a,71,3,0,48,16
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjAddStates(int,int)",0,4,n/a,6,1,2,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjCanMove_0(int,int,int,long,long)",0,7,n/a,12,1,5,7,4
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjCheckNAdd(int)",0,11,n/a,8,1,1,3,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjCheckNAddStates(int,int)",1,13,n/a,6,1,2,2,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjCheckNAddTwoStates(int,int)",2,10,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjFillToken()",6,2,n/a,21,0,0,18,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjMoveNfa_0(int,int)",5,1,n/a,79,4,2,57,22
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjMoveNfa_1(int,int)",41,2,n/a,347,5,2,315,159
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjMoveStringLiteralDfa0_0()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjMoveStringLiteralDfa0_1()",6,1,n/a,18,1,0,13,7
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjStartNfa_1(int,long)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjStopAtPos(int,int)",0,5,n/a,6,0,2,3,1
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.jjStopStringLiteralDfa_1(int,long)",0,1,n/a,8,1,2,3,2
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager.setDebugStream(PrintStream)",0,0,n/a,2,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.Token()",0,0,n/a,4,0,0,0,1
"org.apache.lucene.queryParser.surround.parser.Token.Token(int)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.Token(int,String)",0,2,n/a,8,0,2,2,1
"org.apache.lucene.queryParser.surround.parser.Token.getValue()",0,0,n/a,11,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.Token.newToken(int)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.surround.parser.Token.newToken(int,String)",1,1,n/a,19,1,2,3,2
"org.apache.lucene.queryParser.surround.parser.Token.toString()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.LexicalError(boolean,int,int,int,String,char)",3,1,n/a,19,0,6,1,2
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.TokenMgrError()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.TokenMgrError(String,int)",1,1,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.TokenMgrError(boolean,int,int,int,String,char,int)",2,0,n/a,4,0,7,1,1
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.addEscapes(String)",19,2,n/a,48,3,1,39,14
"org.apache.lucene.queryParser.surround.parser.TokenMgrError.getMessage()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.queryParser.surround.query.AndQuery.AndQuery(List<SrndQuery>,boolean,String)",1,1,n/a,3,0,3,1,1
"org.apache.lucene.queryParser.surround.query.AndQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",2,0,n/a,5,0,2,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.BasicQueryFactory()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.BasicQueryFactory(int)",0,1,n/a,4,0,1,2,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.checkMax()",2,2,n/a,5,0,0,3,2
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.getMaxBasicQueries()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.getNrQueriesMade()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.newSpanTermQuery(Term)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory.newTermQuery(Term)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.BooleanQueryTst(String,int[],SingleFieldTestDb,String,Assert,BasicQueryFactory)",0,0,n/a,14,0,6,6,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.TestCollector()",0,1,n/a,4,0,0,2,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.checkNrHits()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.collect(int)",4,50,n/a,19,2,1,14,5
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.setNextReader(IndexReader,int)",0,19,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector.setScorer(Scorer)",0,27,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.doTest()",10,0,n/a,18,1,0,11,2
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.setVerbose(boolean)",0,0,n/a,1,0,1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.ComposedQuery(List,boolean,String)",1,0,n/a,5,0,3,3,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getBracketClose()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getBracketOpen()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getNrSubQueries()",1,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getOperatorName()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getPrefixSeparator()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getSubQueriesIterator()",1,4,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.getSubQuery(int)",1,0,n/a,1,0,1,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.infixToString(StringBuilder)",17,1,n/a,15,2,1,10,3
"org.apache.lucene.queryParser.surround.query.ComposedQuery.isFieldsSubQueryAcceptable()",4,0,n/a,11,2,0,5,3
"org.apache.lucene.queryParser.surround.query.ComposedQuery.isOperatorInfix()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.ComposedQuery.makeLuceneSubQueriesField(String,BasicQueryFactory)",6,0,n/a,8,1,2,5,2
"org.apache.lucene.queryParser.surround.query.ComposedQuery.prefixToString(StringBuilder)",17,1,n/a,13,2,1,9,3
"org.apache.lucene.queryParser.surround.query.ComposedQuery.recompose(List)",2,1,n/a,4,0,1,3,2
"org.apache.lucene.queryParser.surround.query.ComposedQuery.toString()",6,0,n/a,11,1,0,6,2
"org.apache.lucene.queryParser.surround.query.DistanceQuery.DistanceQuery(List<SrndQuery>,boolean,int,String,boolean)",1,1,n/a,10,0,5,3,1
"org.apache.lucene.queryParser.surround.query.DistanceQuery.addSpanQueries(SpanNearClauseFactory)",6,0,n/a,7,0,1,2,1
"org.apache.lucene.queryParser.surround.query.DistanceQuery.distanceSubQueryNotAllowed()",6,1,n/a,16,3,0,10,4
"org.apache.lucene.queryParser.surround.query.DistanceQuery.getOpDistance()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.DistanceQuery.getSpanNearQuery(IndexReader,String,float,BasicQueryFactory)",16,2,n/a,25,3,4,16,4
"org.apache.lucene.queryParser.surround.query.DistanceQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",5,0,n/a,4,2,2,3,1
"org.apache.lucene.queryParser.surround.query.DistanceQuery.subQueriesOrdered()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.DistanceSubQuery.addSpanQueries(SpanNearClauseFactory)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.surround.query.DistanceSubQuery.distanceSubQueryNotAllowed()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.query.ExceptionQueryTst.ExceptionQueryTst(String,boolean)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.queryParser.surround.query.ExceptionQueryTst.doTest(StringBuilder)",10,1,n/a,23,2,1,14,5
"org.apache.lucene.queryParser.surround.query.ExceptionQueryTst.getFailQueries(String[],boolean)",4,0,n/a,7,1,2,6,2
"org.apache.lucene.queryParser.surround.query.FieldsQuery.FieldsQuery(SrndQuery,List<String>,char)",0,0,n/a,5,0,3,3,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.FieldsQuery(SrndQuery,String,char)",2,0,n/a,6,0,3,4,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.fieldNamesToString(StringBuilder)",7,1,n/a,7,1,1,4,2
"org.apache.lucene.queryParser.surround.query.FieldsQuery.getFieldNames()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.getFieldOperator()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.isFieldsSubQueryAcceptable()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.queryParser.surround.query.FieldsQuery.makeLuceneQueryNoBoost(BasicQueryFactory)",17,1,n/a,18,2,1,11,3
"org.apache.lucene.queryParser.surround.query.FieldsQuery.toString()",7,0,n/a,9,0,0,6,1
"org.apache.lucene.queryParser.surround.query.NotQuery.NotQuery(List<SrndQuery>,String)",1,1,n/a,1,0,2,1,1
"org.apache.lucene.queryParser.surround.query.NotQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",7,0,n/a,12,0,2,5,1
"org.apache.lucene.queryParser.surround.query.OrQuery.OrQuery(List<SrndQuery>,boolean,String)",1,1,n/a,3,0,3,1,1
"org.apache.lucene.queryParser.surround.query.OrQuery.addSpanQueries(SpanNearClauseFactory)",4,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.surround.query.OrQuery.distanceSubQueryNotAllowed()",5,0,n/a,15,3,0,9,4
"org.apache.lucene.queryParser.surround.query.OrQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",2,0,n/a,6,0,2,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.MatchingTermVisitor.visitMatchingTerm(Term)",n/a,0,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.queryParser.surround.query.SimpleTerm.SimpleTerm(boolean)",0,0,n/a,1,0,1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.addSpanQueries(SpanNearClauseFactory)",6,0,n/a,3,2,1,2,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.compareTo(SimpleTerm)",3,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.distanceSubQueryNotAllowed()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.getFieldOperator()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.getQuote()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.isQuoted()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",12,0,n/a,3,4,2,6,3
"org.apache.lucene.queryParser.surround.query.SimpleTerm.suffixToString(StringBuilder)",0,1,n/a,1,0,1,0,1
"org.apache.lucene.queryParser.surround.query.SimpleTerm.toString()",12,0,n/a,14,1,0,9,3
"org.apache.lucene.queryParser.surround.query.SimpleTerm.toStringUnquoted()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.query.SimpleTerm.visitMatchingTerms(IndexReader,String,MatchingTermVisitor)",n/a,2,0,n/a,n/a,3,n/a,n/a
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb.SingleFieldTestDb(Random,String[],String)",11,0,n/a,18,2,3,13,3
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb.getDb()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb.getDocs()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb.getFieldname()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.SpanNearClauseFactory(IndexReader,String,BasicQueryFactory)",1,0,n/a,6,0,3,4,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.addSpanNearQuery(Query)",5,0,n/a,8,0,1,5,3
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.addSpanQueryWeighted(SpanQuery,float)",5,2,n/a,8,0,2,5,2
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.addTermWeighted(Term,float)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.clear()",1,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.getBasicQueryFactory()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.getFieldName()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.getIndexReader()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.getTermEnum(String)",4,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.makeSpanNearClause()",9,0,n/a,14,1,0,10,3
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory.size()",1,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndBooleanQuery.addQueriesToBoolean(BooleanQuery,List<Query>,Occur)",3,1,n/a,8,1,3,4,2
"org.apache.lucene.queryParser.surround.query.SrndBooleanQuery.makeBooleanQuery(List<Query>,Occur)",7,0,n/a,10,1,2,5,2
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.SrndPrefixQuery(String,boolean,char)",1,1,n/a,5,0,3,3,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.getLucenePrefixTerm(String)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.getPrefix()",0,3,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.getSuffixOperator()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.suffixToString(StringBuilder)",2,0,n/a,2,0,1,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.toStringUnquoted()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery.visitMatchingTerms(IndexReader,String,MatchingTermVisitor)",11,0,n/a,23,3,3,8,5
"org.apache.lucene.queryParser.surround.query.SrndQuery.SrndQuery()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.clone()",2,0,n/a,8,1,0,3,2
"org.apache.lucene.queryParser.surround.query.SrndQuery.getWeight()",0,3,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.getWeightOperator()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.getWeightString()",2,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.isFieldsSubQueryAcceptable()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.isWeighted()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.makeLuceneQueryField(String,BasicQueryFactory)",5,0,n/a,7,1,2,4,2
"org.apache.lucene.queryParser.surround.query.SrndQuery.makeLuceneQueryFieldNoBoost(String,BasicQueryFactory)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.queryParser.surround.query.SrndQuery.setWeight(float)",0,1,n/a,4,0,1,2,1
"org.apache.lucene.queryParser.surround.query.SrndQuery.toString()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.queryParser.surround.query.SrndQuery.weightToString(StringBuilder)",5,0,n/a,6,1,1,3,2
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.SrndTermQuery(String,boolean)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.getLuceneTerm(String)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.getTermText()",0,3,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.toStringUnquoted()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndTermQuery.visitMatchingTerms(IndexReader,String,MatchingTermVisitor)",10,0,n/a,19,2,3,6,4
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.SrndTruncQuery(String,char,char)",2,1,n/a,7,0,3,5,1
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.appendRegExpForChar(char,StringBuilder)",3,1,n/a,8,0,2,5,3
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.getTruncated()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.matchingChar(char)",0,1,n/a,3,0,1,1,2
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.toStringUnquoted()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.truncatedToPrefixAndPattern()",10,1,n/a,13,1,0,9,4
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery.visitMatchingTerms(IndexReader,String,MatchingTermVisitor)",16,0,n/a,29,5,3,15,6
"org.apache.lucene.queryParser.surround.query.Test01Exceptions.main(String[])",2,0,n/a,4,0,1,1,1
"org.apache.lucene.queryParser.surround.query.Test01Exceptions.test01Exceptions()",3,0,n/a,6,1,0,3,2
"org.apache.lucene.queryParser.surround.query.Test02Boolean.main(String[])",2,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.normalTest1(String,int[])",4,23,n/a,6,0,2,3,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms03()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms04()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms05()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms06()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms10()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms13()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms14()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms20()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms21()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms22()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test02Terms23()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test03And01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test03And02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test03And03()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test04Or01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test04Or02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test04Or03()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test05Not01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test05Not02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test06AndOr01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test02Boolean.test07AndOrNot02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.distanceTest1(String,int[])",1,30,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.distanceTest2(String,int[])",1,10,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.distanceTest3(String,int[])",1,1,n/a,3,0,2,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.distanceTst(String,int[],SingleFieldTestDb)",4,3,n/a,6,0,3,3,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.main(String[])",2,0,n/a,3,0,1,1,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test00Exceptions()",3,0,n/a,6,1,0,3,2
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N01r()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N03()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N03r()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N04()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0N04r()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W03()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W04()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W05()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test0W06()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc02r()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc03()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc04()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc05()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc06()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc06r()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Ntrunc09()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc02r()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc03()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc04()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc05()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc06()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc07()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc08()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test1Wtrunc09()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nnested01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nnested02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nprefix01a()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nprefix01b()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nprefix02a()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Nprefix02b()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Wnested01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Wnested02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Wprefix01()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test2Wprefix02()",1,0,n/a,3,0,0,2,1
"org.apache.lucene.queryParser.surround.query.Test03Distance.test3Example01()",1,0,n/a,7,0,0,2,1
"org.apache.lucene.queryParser.surround.query.TooManyBasicQueries.TooManyBasicQueries(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.BooleanClause.BooleanClause(Query,Occur)",0,31,n/a,6,0,2,2,1
"org.apache.lucene.search.BooleanClause.equals(Object)",1,0,n/a,9,0,1,4,4
"org.apache.lucene.search.BooleanClause.getOccur()",0,8,n/a,3,0,0,1,1
"org.apache.lucene.search.BooleanClause.getQuery()",0,33,n/a,3,0,0,1,1
"org.apache.lucene.search.BooleanClause.hashCode()",1,0,n/a,5,0,0,1,3
"org.apache.lucene.search.BooleanClause.isProhibited()",0,14,n/a,3,0,0,1,1
"org.apache.lucene.search.BooleanClause.isRequired()",0,9,n/a,3,0,0,1,1
"org.apache.lucene.search.BooleanClause.setOccur(Occur)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.search.BooleanClause.setQuery(Query)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.BooleanClause.toString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanFilter.add(Filter,Occur)",2,62,n/a,3,0,2,1,1
"org.apache.lucene.search.BooleanFilter.add(FilterClause)",1,2,n/a,7,0,1,1,1
"org.apache.lucene.search.BooleanFilter.clauses()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.search.BooleanFilter.equals(Object)",3,0,n/a,11,1,1,6,4
"org.apache.lucene.search.BooleanFilter.getDISI(Filter,IndexReader)",2,3,n/a,5,0,2,2,3
"org.apache.lucene.search.BooleanFilter.getDocIdSet(IndexReader)",21,23,n/a,50,3,1,32,16
"org.apache.lucene.search.BooleanFilter.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanFilter.iterator()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.search.BooleanFilter.toString()",7,0,n/a,13,2,0,7,3
"org.apache.lucene.search.BooleanFilterTest.addDoc(RandomIndexWriter,String,String,String,String)",10,5,n/a,9,0,5,6,1
"org.apache.lucene.search.BooleanFilterTest.getEmptyFilter()",3,1,n/a,4,2,0,2,1
"org.apache.lucene.search.BooleanFilterTest.getNullDISFilter()",1,7,n/a,4,2,0,2,1
"org.apache.lucene.search.BooleanFilterTest.getNullDISIFilter()",2,7,n/a,4,4,0,4,1
"org.apache.lucene.search.BooleanFilterTest.getRangeFilter(String,String,String)",1,17,n/a,5,0,3,2,1
"org.apache.lucene.search.BooleanFilterTest.getTermsFilter(String,String)",3,20,n/a,5,0,2,3,1
"org.apache.lucene.search.BooleanFilterTest.getWrappedTermQuery(String,String)",3,10,n/a,3,0,2,1,1
"org.apache.lucene.search.BooleanFilterTest.setUp()",11,0,n/a,14,0,0,10,1
"org.apache.lucene.search.BooleanFilterTest.tearDown()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.search.BooleanFilterTest.testCombinedNullDocIdSets()",36,0,n/a,26,0,0,24,1
"org.apache.lucene.search.BooleanFilterTest.testEmpty()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.search.BooleanFilterTest.testJustMust()",8,0,n/a,9,0,0,6,1
"org.apache.lucene.search.BooleanFilterTest.testJustMustNot()",8,0,n/a,9,0,0,6,1
"org.apache.lucene.search.BooleanFilterTest.testJustNullDocIdSets()",24,0,n/a,20,0,0,18,1
"org.apache.lucene.search.BooleanFilterTest.testMustAndMustNot()",12,0,n/a,11,0,0,8,1
"org.apache.lucene.search.BooleanFilterTest.testNonMatchingShouldsAndMusts()",18,0,n/a,14,0,0,12,1
"org.apache.lucene.search.BooleanFilterTest.testShould()",8,0,n/a,9,0,0,6,1
"org.apache.lucene.search.BooleanFilterTest.testShoulds()",6,0,n/a,6,0,0,4,1
"org.apache.lucene.search.BooleanFilterTest.testShouldsAndMust()",16,0,n/a,13,0,0,10,1
"org.apache.lucene.search.BooleanFilterTest.testShouldsAndMustNot()",22,0,n/a,17,0,0,14,1
"org.apache.lucene.search.BooleanFilterTest.testShouldsAndMusts()",10,0,n/a,8,0,0,6,1
"org.apache.lucene.search.BooleanFilterTest.testShouldsAndMustsAndMustNot()",20,0,n/a,15,0,0,12,1
"org.apache.lucene.search.BooleanFilterTest.tstFilterCard(String,int,Filter)",4,34,n/a,10,1,3,5,2
"org.apache.lucene.search.BooleanQuery.BooleanQuery()",0,76,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanQuery.BooleanQuery(boolean)",0,23,n/a,12,0,1,1,1
"org.apache.lucene.search.BooleanQuery.BooleanWeight.BooleanWeight(Searcher,boolean)",9,1,n/a,11,1,2,10,3
"org.apache.lucene.search.BooleanQuery.BooleanWeight.explain(IndexReader,int)",45,8,n/a,73,3,2,54,13
"org.apache.lucene.search.BooleanQuery.BooleanWeight.getQuery()",0,3,n/a,2,0,0,1,1
"org.apache.lucene.search.BooleanQuery.BooleanWeight.getValue()",1,9,n/a,2,0,0,1,1
"org.apache.lucene.search.BooleanQuery.BooleanWeight.normalize(float)",2,12,n/a,8,1,1,3,2
"org.apache.lucene.search.BooleanQuery.BooleanWeight.scorer(IndexReader,boolean,boolean)",18,18,n/a,38,3,3,22,12
"org.apache.lucene.search.BooleanQuery.BooleanWeight.scoresDocsOutOfOrder()",1,5,n/a,10,2,0,4,3
"org.apache.lucene.search.BooleanQuery.BooleanWeight.sumOfSquaredWeights()",7,12,n/a,13,1,0,9,3
"org.apache.lucene.search.BooleanQuery.TooManyClauses.TooManyClauses()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.BooleanQuery.add(BooleanClause)",3,28,n/a,9,0,1,3,2
"org.apache.lucene.search.BooleanQuery.add(Query,Occur)",2,137,n/a,8,0,2,1,1
"org.apache.lucene.search.BooleanQuery.clauses()",0,23,n/a,2,0,0,1,1
"org.apache.lucene.search.BooleanQuery.clone()",2,28,n/a,6,0,0,3,1
"org.apache.lucene.search.BooleanQuery.createWeight(Searcher)",1,16,n/a,4,0,1,1,1
"org.apache.lucene.search.BooleanQuery.equals(Object)",5,28,n/a,11,0,1,4,5
"org.apache.lucene.search.BooleanQuery.extractTerms(Set<Term>)",2,24,n/a,7,1,1,2,2
"org.apache.lucene.search.BooleanQuery.getClauses()",2,23,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanQuery.getMaxClauseCount()",0,22,n/a,6,0,0,1,1
"org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch()",0,10,n/a,7,0,0,1,1
"org.apache.lucene.search.BooleanQuery.hashCode()",4,23,n/a,6,0,0,1,2
"org.apache.lucene.search.BooleanQuery.isCoordDisabled()",0,3,n/a,5,0,0,1,1
"org.apache.lucene.search.BooleanQuery.iterator()",2,0,n/a,5,0,0,1,1
"org.apache.lucene.search.BooleanQuery.rewrite(IndexReader)",20,30,n/a,29,3,1,22,10
"org.apache.lucene.search.BooleanQuery.setMaxClauseCount(int)",1,8,n/a,9,0,1,3,2
"org.apache.lucene.search.BooleanQuery.setMinimumNumberShouldMatch(int)",0,6,n/a,20,0,1,1,1
"org.apache.lucene.search.BooleanQuery.toString(String)",30,47,n/a,42,3,1,30,12
"org.apache.lucene.search.BooleanScorer.BooleanScorer(Weight,boolean,Similarity,int,List<Scorer>,List<Scorer>,int)",11,1,n/a,23,3,7,15,11
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.BooleanScorerCollector(int,BucketTable)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.collect(int)",2,50,n/a,18,1,1,13,2
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.setNextReader(IndexReader,int)",0,19,n/a,4,0,2,0,1
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector.setScorer(Scorer)",0,27,n/a,4,0,1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.BucketScorer(Weight)",1,1,n/a,1,0,1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.advance(int)",0,54,n/a,2,0,1,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.docID()",0,45,n/a,2,0,0,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.freq()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.nextDoc()",0,62,n/a,2,0,0,1,1
"org.apache.lucene.search.BooleanScorer.BucketScorer.score()",0,63,n/a,2,0,0,1,1
"org.apache.lucene.search.BooleanScorer.BucketTable.BucketTable()",1,1,n/a,7,1,0,4,2
"org.apache.lucene.search.BooleanScorer.BucketTable.newCollector(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.search.BooleanScorer.BucketTable.size()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.search.BooleanScorer.SubScorer.SubScorer(Scorer,boolean,boolean,Collector,SubScorer)",1,2,n/a,13,1,5,6,2
"org.apache.lucene.search.BooleanScorer.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.BooleanScorer.docID()",1,45,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer.score()",1,63,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer.score(Collector)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.search.BooleanScorer.score(Collector,int,int)",5,5,n/a,53,4,3,35,10
"org.apache.lucene.search.BooleanScorer.toString()",7,0,n/a,11,1,0,9,2
"org.apache.lucene.search.BooleanScorer.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",3,9,n/a,22,2,3,9,3
"org.apache.lucene.search.BooleanScorer2.BooleanScorer2(Weight,boolean,Similarity,int,List<Scorer>,List<Scorer>,List<Scorer>,int)",5,1,n/a,36,1,8,11,2
"org.apache.lucene.search.BooleanScorer2.Coordinator.init(Similarity,boolean)",3,1,n/a,6,1,2,5,3
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.SingleMatchScorer(Scorer)",1,3,n/a,4,0,1,2,1
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.docID()",1,46,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer.score()",2,63,n/a,12,2,0,7,3
"org.apache.lucene.search.BooleanScorer2.addProhibitedScorers(Scorer)",5,4,n/a,13,0,1,1,3
"org.apache.lucene.search.BooleanScorer2.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.BooleanScorer2.countingConjunctionSumScorer(boolean,Similarity,List<Scorer>)",7,3,n/a,15,4,3,9,4
"org.apache.lucene.search.BooleanScorer2.countingDisjunctionSumScorer(List<Scorer>,int)",3,3,n/a,11,4,2,8,3
"org.apache.lucene.search.BooleanScorer2.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer2.dualConjunctionSumScorer(boolean,Similarity,Scorer,Scorer)",2,1,n/a,9,0,4,1,2
"org.apache.lucene.search.BooleanScorer2.freq()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer2.makeCountingSumScorer(boolean,Similarity)",3,1,n/a,9,0,2,1,2
"org.apache.lucene.search.BooleanScorer2.makeCountingSumScorerNoReq(boolean,Similarity)",7,1,n/a,13,1,2,8,4
"org.apache.lucene.search.BooleanScorer2.makeCountingSumScorerSomeReq(boolean,Similarity)",18,1,n/a,29,2,2,8,5
"org.apache.lucene.search.BooleanScorer2.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.BooleanScorer2.score()",1,63,n/a,6,0,0,3,1
"org.apache.lucene.search.BooleanScorer2.score(Collector)",3,5,n/a,10,1,1,3,2
"org.apache.lucene.search.BooleanScorer2.score(Collector,int,int)",3,4,n/a,10,1,3,6,2
"org.apache.lucene.search.BooleanScorer2.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",5,9,n/a,14,1,3,8,4
"org.apache.lucene.search.BoostingQuery.BoostingQuery(Query,Query,float)",2,3,n/a,6,0,3,4,1
"org.apache.lucene.search.BoostingQuery.equals(Object)",6,28,n/a,23,1,1,20,11
"org.apache.lucene.search.BoostingQuery.hashCode()",3,23,n/a,9,0,0,6,3
"org.apache.lucene.search.BoostingQuery.rewrite(IndexReader)",4,30,n/a,11,5,1,12,4
"org.apache.lucene.search.BoostingQuery.toString(String)",2,47,n/a,4,0,1,1,1
"org.apache.lucene.search.BoostingQueryTest.testBoostingQueryEquals()",8,0,n/a,8,0,0,6,1
"org.apache.lucene.search.CachingCollector.CachedScorer.CachedScorer()",1,2,n/a,1,0,0,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.advance(int)",1,54,n/a,2,0,1,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.docID()",0,45,n/a,2,0,0,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.freq()",1,2,n/a,2,0,0,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.nextDoc()",1,62,n/a,2,0,0,1,1
"org.apache.lucene.search.CachingCollector.CachedScorer.score()",0,63,n/a,2,0,0,1,1
"org.apache.lucene.search.CachingCollector.CachingCollector(Collector,double,boolean)",2,2,n/a,12,1,3,8,2
"org.apache.lucene.search.CachingCollector.CachingCollector(Collector,int)",2,2,n/a,7,0,2,5,1
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.NoScoreCachingCollector(Collector,double)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.NoScoreCachingCollector(Collector,int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.collect(int)",6,50,n/a,35,3,1,22,6
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.replay(Collector)",4,6,n/a,20,3,1,14,4
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.setScorer(Scorer)",1,27,n/a,4,0,1,1,1
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector.toString()",1,0,n/a,8,1,0,3,2
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.ScoreCachingCollector(Collector,double)",4,1,n/a,7,0,2,5,1
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.ScoreCachingCollector(Collector,int)",4,1,n/a,7,0,2,5,1
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.collect(int)",11,50,n/a,45,3,1,32,6
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.replay(Collector)",6,6,n/a,24,3,1,18,4
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.setScorer(Scorer)",1,27,n/a,5,0,1,2,1
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector.toString()",1,0,n/a,8,1,0,3,2
"org.apache.lucene.search.CachingCollector.SegStart.SegStart(IndexReader,int,int)",0,2,n/a,5,0,3,3,1
"org.apache.lucene.search.CachingCollector.acceptsDocsOutOfOrder()",1,15,n/a,4,0,0,1,1
"org.apache.lucene.search.CachingCollector.create(Collector,boolean,double)",2,1,n/a,17,0,3,1,2
"org.apache.lucene.search.CachingCollector.create(Collector,boolean,int)",2,1,n/a,17,0,3,1,2
"org.apache.lucene.search.CachingCollector.create(boolean,boolean,double)",2,1,n/a,2,2,3,3,1
"org.apache.lucene.search.CachingCollector.isCached()",0,7,n/a,3,0,0,1,1
"org.apache.lucene.search.CachingCollector.replay(Collector)",n/a,6,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.CachingCollector.replayInit(Collector)",7,2,n/a,17,1,1,7,5
"org.apache.lucene.search.CachingCollector.setNextReader(IndexReader,int)",3,19,n/a,9,1,2,5,2
"org.apache.lucene.search.CachingSpanFilter.CachingSpanFilter(SpanFilter)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.search.CachingSpanFilter.CachingSpanFilter(SpanFilter,DeletesMode)",3,1,n/a,4,2,2,5,2
"org.apache.lucene.search.CachingSpanFilter.bitSpans(IndexReader)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.search.CachingSpanFilter.equals(Object)",1,0,n/a,5,0,1,3,2
"org.apache.lucene.search.CachingSpanFilter.getCachedResult(IndexReader)",6,2,n/a,13,1,1,10,3
"org.apache.lucene.search.CachingSpanFilter.getDocIdSet(IndexReader)",2,23,n/a,5,0,1,2,2
"org.apache.lucene.search.CachingSpanFilter.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.CachingSpanFilter.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.CachingWrapperFilter.CachingWrapperFilter(Filter)",1,8,n/a,13,0,1,1,1
"org.apache.lucene.search.CachingWrapperFilter.CachingWrapperFilter(Filter,DeletesMode)",3,7,n/a,4,4,2,4,1
"org.apache.lucene.search.CachingWrapperFilter.FilterCache.FilterCache(DeletesMode)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.search.CachingWrapperFilter.FilterCache.get(IndexReader,Object,Object)",7,2,n/a,26,3,3,14,7
"org.apache.lucene.search.CachingWrapperFilter.FilterCache.mergeDeletes(IndexReader,T)",n/a,1,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.CachingWrapperFilter.FilterCache.put(Object,Object,T)",4,2,n/a,10,1,3,6,3
"org.apache.lucene.search.CachingWrapperFilter.docIdSetToCache(DocIdSet,IndexReader)",5,1,n/a,26,2,2,10,4
"org.apache.lucene.search.CachingWrapperFilter.equals(Object)",1,0,n/a,5,0,1,3,2
"org.apache.lucene.search.CachingWrapperFilter.getDocIdSet(IndexReader)",7,23,n/a,17,1,1,11,4
"org.apache.lucene.search.CachingWrapperFilter.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.CachingWrapperFilter.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.ChainedFilter.ChainedFilter(Filter[])",0,3,n/a,8,0,1,1,1
"org.apache.lucene.search.ChainedFilter.ChainedFilter(Filter[],int)",0,2,n/a,10,0,2,2,1
"org.apache.lucene.search.ChainedFilter.ChainedFilter(Filter[],int[])",0,1,n/a,10,0,2,2,1
"org.apache.lucene.search.ChainedFilter.doChain(OpenBitSetDISI,int,DocIdSet)",13,4,n/a,50,3,3,39,14
"org.apache.lucene.search.ChainedFilter.finalResult(OpenBitSetDISI,int)",0,2,n/a,10,0,2,1,1
"org.apache.lucene.search.ChainedFilter.getDISI(Filter,IndexReader)",4,2,n/a,14,2,2,7,3
"org.apache.lucene.search.ChainedFilter.getDocIdSet(IndexReader)",3,23,n/a,15,0,1,7,3
"org.apache.lucene.search.ChainedFilter.getDocIdSet(IndexReader,int,int[])",5,2,n/a,16,1,3,5,2
"org.apache.lucene.search.ChainedFilter.getDocIdSet(IndexReader,int[],int[])",6,1,n/a,18,1,3,7,3
"org.apache.lucene.search.ChainedFilter.initialResult(IndexReader,int,int[])",10,2,n/a,25,1,3,10,3
"org.apache.lucene.search.ChainedFilter.toString()",6,0,n/a,13,1,0,9,2
"org.apache.lucene.search.ChainedFilterTest.getChainedFilter(Filter[],int)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.search.ChainedFilterTest.getChainedFilter(Filter[],int[])",2,6,n/a,7,1,2,3,2
"org.apache.lucene.search.ChainedFilterTest.setUp()",34,0,n/a,34,1,0,25,3
"org.apache.lucene.search.ChainedFilterTest.tearDown()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.search.ChainedFilterTest.testAND()",6,0,n/a,7,0,0,4,1
"org.apache.lucene.search.ChainedFilterTest.testANDNOT()",12,0,n/a,16,0,0,8,1
"org.apache.lucene.search.ChainedFilterTest.testOR()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.search.ChainedFilterTest.testSingleFilter()",18,0,n/a,18,0,0,16,1
"org.apache.lucene.search.ChainedFilterTest.testWithCachingFilter()",17,0,n/a,21,0,0,18,1
"org.apache.lucene.search.ChainedFilterTest.testXOR()",6,0,n/a,7,0,0,4,1
"org.apache.lucene.search.Collector.acceptsDocsOutOfOrder()",n/a,15,49,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Collector.collect(int)",n/a,50,56,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Collector.setNextReader(IndexReader,int)",n/a,19,42,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Collector.setScorer(Scorer)",n/a,27,47,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.ComplexExplanation.ComplexExplanation()",1,12,n/a,3,0,0,1,1
"org.apache.lucene.search.ComplexExplanation.ComplexExplanation(boolean,float,String)",2,8,n/a,6,0,3,2,1
"org.apache.lucene.search.ComplexExplanation.getMatch()",0,6,n/a,5,0,0,1,1
"org.apache.lucene.search.ComplexExplanation.getSummary()",5,3,n/a,8,0,0,3,3
"org.apache.lucene.search.ComplexExplanation.isMatch()",3,13,n/a,14,0,0,2,2
"org.apache.lucene.search.ComplexExplanation.setMatch(Boolean)",0,16,n/a,5,0,1,1,1
"org.apache.lucene.search.ConjunctionScorer.ConjunctionScorer(Weight,float,Collection<Scorer>)",3,0,n/a,3,0,3,1,1
"org.apache.lucene.search.ConjunctionScorer.ConjunctionScorer(Weight,float,Scorer...)",7,1,n/a,3,2,3,23,5
"org.apache.lucene.search.ConjunctionScorer.advance(int)",3,54,n/a,9,1,1,5,3
"org.apache.lucene.search.ConjunctionScorer.doNext()",3,3,n/a,10,1,0,7,3
"org.apache.lucene.search.ConjunctionScorer.docID()",0,46,n/a,4,0,0,1,1
"org.apache.lucene.search.ConjunctionScorer.nextDoc()",3,62,n/a,10,1,0,6,3
"org.apache.lucene.search.ConjunctionScorer.score()",1,64,n/a,8,1,0,6,2
"org.apache.lucene.search.ConstantScoreAutoRewrite.CutOffTermCollector.CutOffTermCollector(IndexReader,int,int)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.CutOffTermCollector.collect(Term,float)",3,1,n/a,13,1,2,6,3
"org.apache.lucene.search.ConstantScoreAutoRewrite.addClause(BooleanQuery,Term,float)",2,3,n/a,4,0,3,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.equals(Object)",4,0,n/a,17,1,1,12,6
"org.apache.lucene.search.ConstantScoreAutoRewrite.getDocCountPercent()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.getTermCountCutoff()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.getTopLevelQuery()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.hashCode()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.rewrite(IndexReader,MultiTermQuery)",15,2,n/a,29,3,2,16,4
"org.apache.lucene.search.ConstantScoreAutoRewrite.setDocCountPercent(double)",0,2,n/a,8,0,1,1,1
"org.apache.lucene.search.ConstantScoreAutoRewrite.setTermCountCutoff(int)",0,2,n/a,6,0,1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScoreQuery(Filter)",1,5,n/a,12,0,1,4,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantScoreQuery(Query)",1,6,n/a,8,0,1,4,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.ConstantScorer(Similarity,DocIdSetIterator,Weight)",2,2,n/a,5,0,3,3,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.docID()",1,45,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.score()",0,63,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.score(Collector)",3,5,n/a,9,1,1,3,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.score(Collector,int,int)",3,4,n/a,11,1,3,3,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer.wrapCollector(Collector)",7,2,n/a,4,2,1,5,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.ConstantWeight(Searcher)",2,1,n/a,4,0,1,2,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.explain(IndexReader,int)",16,8,n/a,18,1,2,13,3
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.getQuery()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.getValue()",0,9,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.normalize(float)",1,12,n/a,7,0,1,4,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.scorer(IndexReader,boolean,boolean)",4,19,n/a,18,1,3,12,5
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.scoresDocsOutOfOrder()",1,5,n/a,4,0,0,1,2
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight.sumOfSquaredWeights()",2,12,n/a,7,0,0,4,2
"org.apache.lucene.search.ConstantScoreQuery.createWeight(Searcher)",1,16,n/a,4,0,1,1,1
"org.apache.lucene.search.ConstantScoreQuery.equals(Object)",3,28,n/a,13,1,1,8,7
"org.apache.lucene.search.ConstantScoreQuery.extractTerms(Set<Term>)",1,24,n/a,9,0,1,2,2
"org.apache.lucene.search.ConstantScoreQuery.getFilter()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreQuery.getQuery()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.ConstantScoreQuery.hashCode()",2,23,n/a,5,0,0,1,2
"org.apache.lucene.search.ConstantScoreQuery.rewrite(IndexReader)",4,30,n/a,12,2,1,7,3
"org.apache.lucene.search.ConstantScoreQuery.toString(String)",9,47,n/a,8,0,1,1,2
"org.apache.lucene.search.DefaultSimilarity.computeNorm(String,FieldInvertState)",5,27,n/a,17,0,2,5,2
"org.apache.lucene.search.DefaultSimilarity.coord(int,int)",0,13,n/a,5,0,2,1,1
"org.apache.lucene.search.DefaultSimilarity.getDiscountOverlaps()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.DefaultSimilarity.idf(int,int)",1,9,n/a,5,0,2,1,1
"org.apache.lucene.search.DefaultSimilarity.queryNorm(float)",1,5,n/a,5,0,1,1,1
"org.apache.lucene.search.DefaultSimilarity.setDiscountOverlaps(boolean)",0,2,n/a,12,0,1,1,1
"org.apache.lucene.search.DefaultSimilarity.sloppyFreq(int)",0,6,n/a,5,0,1,1,1
"org.apache.lucene.search.DefaultSimilarity.tf(float)",1,13,n/a,5,0,1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxQuery(Collection<Query>,float)",1,1,n/a,9,0,2,2,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxQuery(float)",0,4,n/a,9,0,1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.DisjunctionMaxWeight(Searcher)",3,1,n/a,7,1,1,3,2
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.explain(IndexReader,int)",13,8,n/a,19,2,2,14,5
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.getQuery()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.getValue()",1,9,n/a,3,0,0,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.normalize(float)",2,12,n/a,8,1,1,3,2
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.scorer(IndexReader,boolean,boolean)",4,18,n/a,16,2,3,10,5
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight.sumOfSquaredWeights()",3,12,n/a,12,1,0,7,2
"org.apache.lucene.search.DisjunctionMaxQuery.add(Collection<Query>)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.add(Query)",1,6,n/a,6,0,1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.clone()",2,28,n/a,8,0,0,3,1
"org.apache.lucene.search.DisjunctionMaxQuery.createWeight(Searcher)",1,16,n/a,5,0,1,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.equals(Object)",3,28,n/a,12,0,1,4,4
"org.apache.lucene.search.DisjunctionMaxQuery.extractTerms(Set<Term>)",1,24,n/a,7,1,1,2,2
"org.apache.lucene.search.DisjunctionMaxQuery.hashCode()",4,23,n/a,9,0,0,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.iterator()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.search.DisjunctionMaxQuery.rewrite(IndexReader)",12,30,n/a,27,2,1,22,8
"org.apache.lucene.search.DisjunctionMaxQuery.toString(String)",19,47,n/a,30,2,1,22,6
"org.apache.lucene.search.DisjunctionMaxScorer.DisjunctionMaxScorer(Weight,float,Similarity,Scorer[],int)",2,1,n/a,28,0,5,5,1
"org.apache.lucene.search.DisjunctionMaxScorer.advance(int)",5,54,n/a,15,3,1,9,5
"org.apache.lucene.search.DisjunctionMaxScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.DisjunctionMaxScorer.heapAdjust(int)",3,4,n/a,36,3,1,25,6
"org.apache.lucene.search.DisjunctionMaxScorer.heapRemoveRoot()",1,2,n/a,12,1,0,7,2
"org.apache.lucene.search.DisjunctionMaxScorer.heapify()",1,1,n/a,6,1,0,4,2
"org.apache.lucene.search.DisjunctionMaxScorer.nextDoc()",5,63,n/a,15,3,0,9,5
"org.apache.lucene.search.DisjunctionMaxScorer.score()",4,63,n/a,12,0,0,6,1
"org.apache.lucene.search.DisjunctionMaxScorer.scoreAll(int,int,int)",5,4,n/a,10,1,3,6,3
"org.apache.lucene.search.DisjunctionSumScorer.DisjunctionSumScorer(Weight,List<Scorer>)",1,1,n/a,6,0,2,1,1
"org.apache.lucene.search.DisjunctionSumScorer.DisjunctionSumScorer(Weight,List<Scorer>,int)",5,2,n/a,24,1,3,9,3
"org.apache.lucene.search.DisjunctionSumScorer.advance(int)",5,54,n/a,28,3,1,10,8
"org.apache.lucene.search.DisjunctionSumScorer.advanceAfterCurrent()",7,2,n/a,42,4,0,16,8
"org.apache.lucene.search.DisjunctionSumScorer.docID()",0,46,n/a,4,0,0,1,1
"org.apache.lucene.search.DisjunctionSumScorer.initScorerDocQueue()",3,1,n/a,11,2,0,4,3
"org.apache.lucene.search.DisjunctionSumScorer.nextDoc()",2,66,n/a,7,1,0,3,3
"org.apache.lucene.search.DisjunctionSumScorer.nrMatchers()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.DisjunctionSumScorer.score()",0,64,n/a,5,0,0,1,1
"org.apache.lucene.search.DisjunctionSumScorer.score(Collector)",3,5,n/a,10,1,1,3,2
"org.apache.lucene.search.DisjunctionSumScorer.score(Collector,int,int)",3,4,n/a,19,2,3,6,3
"org.apache.lucene.search.DocIdSet.isCacheable()",0,4,n/a,10,0,0,1,1
"org.apache.lucene.search.DocIdSet.iterator()",n/a,24,17,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.DocIdSetIterator.advance(int)",n/a,54,45,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.DocIdSetIterator.docID()",n/a,45,45,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.DocIdSetIterator.nextDoc()",n/a,62,45,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.DuplicateFilter.DuplicateFilter(String)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.search.DuplicateFilter.DuplicateFilter(String,int,int)",0,1,n/a,6,0,3,3,1
"org.apache.lucene.search.DuplicateFilter.correctBits(IndexReader)",16,1,n/a,37,5,1,18,8
"org.apache.lucene.search.DuplicateFilter.equals(Object)",3,0,n/a,12,0,1,6,8
"org.apache.lucene.search.DuplicateFilter.fastBits(IndexReader)",19,1,n/a,41,4,1,22,9
"org.apache.lucene.search.DuplicateFilter.getDocIdSet(IndexReader)",2,23,n/a,12,1,1,3,2
"org.apache.lucene.search.DuplicateFilter.getFieldName()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.DuplicateFilter.getKeepMode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.DuplicateFilter.getProcessingMode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.DuplicateFilter.hashCode()",1,0,n/a,9,0,0,5,1
"org.apache.lucene.search.DuplicateFilter.setFieldName(String)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.search.DuplicateFilter.setKeepMode(int)",0,4,n/a,4,0,1,1,1
"org.apache.lucene.search.DuplicateFilter.setProcessingMode(int)",0,3,n/a,4,0,1,1,1
"org.apache.lucene.search.DuplicateFilterTest.addDoc(RandomIndexWriter,String,String,String)",8,8,n/a,8,0,4,5,1
"org.apache.lucene.search.DuplicateFilterTest.setUp()",19,0,n/a,21,0,0,15,1
"org.apache.lucene.search.DuplicateFilterTest.tearDown()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.search.DuplicateFilterTest.testDefaultFilter()",8,0,n/a,13,1,0,10,2
"org.apache.lucene.search.DuplicateFilterTest.testFastFilter()",12,0,n/a,16,1,0,13,2
"org.apache.lucene.search.DuplicateFilterTest.testKeepsFirstFilter()",11,0,n/a,17,1,0,14,2
"org.apache.lucene.search.DuplicateFilterTest.testKeepsLastFilter()",11,0,n/a,19,2,0,14,3
"org.apache.lucene.search.DuplicateFilterTest.testNoFilter()",8,0,n/a,16,1,0,13,3
"org.apache.lucene.search.ExactPhraseScorer.ChunkState.ChunkState(TermPositions,int,boolean)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.search.ExactPhraseScorer.ExactPhraseScorer(Weight,PostingsAndFreq[],Similarity,byte[])",6,2,n/a,25,2,4,17,5
"org.apache.lucene.search.ExactPhraseScorer.advance(int)",8,54,n/a,43,4,1,25,10
"org.apache.lucene.search.ExactPhraseScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.ExactPhraseScorer.freq()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.ExactPhraseScorer.nextDoc()",10,62,n/a,62,6,0,35,14
"org.apache.lucene.search.ExactPhraseScorer.phraseFreq()",6,2,n/a,98,5,0,69,22
"org.apache.lucene.search.ExactPhraseScorer.score()",4,63,n/a,10,1,0,5,3
"org.apache.lucene.search.ExactPhraseScorer.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.Explanation.Explanation()",0,20,n/a,1,0,0,0,1
"org.apache.lucene.search.Explanation.Explanation(float,String)",0,39,n/a,4,0,2,2,1
"org.apache.lucene.search.Explanation.IDFExplanation.explain()",n/a,4,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Explanation.IDFExplanation.getIdf()",n/a,4,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Explanation.addDetail(Explanation)",2,72,n/a,6,0,1,3,2
"org.apache.lucene.search.Explanation.getDescription()",0,3,n/a,2,0,0,1,1
"org.apache.lucene.search.Explanation.getDetails()",1,3,n/a,6,0,0,3,2
"org.apache.lucene.search.Explanation.getSummary()",2,3,n/a,7,0,0,1,1
"org.apache.lucene.search.Explanation.getValue()",0,54,n/a,2,0,0,1,1
"org.apache.lucene.search.Explanation.isMatch()",1,11,n/a,11,0,0,1,1
"org.apache.lucene.search.Explanation.setDescription(String)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.Explanation.setValue(float)",0,37,n/a,2,0,1,1,1
"org.apache.lucene.search.Explanation.toHtml()",12,1,n/a,17,2,0,14,3
"org.apache.lucene.search.Explanation.toString()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.search.Explanation.toString(int)",9,2,n/a,15,2,1,14,4
"org.apache.lucene.search.FieldCache.ByteParser.parseByte(String)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCache.CacheEntry.estimateSize()",4,1,n/a,8,0,0,2,1
"org.apache.lucene.search.FieldCache.CacheEntry.getCacheType()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FieldCache.CacheEntry.getCustom()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FieldCache.CacheEntry.getEstimatedSize()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.search.FieldCache.CacheEntry.getFieldName()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FieldCache.CacheEntry.getReaderKey()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FieldCache.CacheEntry.getValue()",n/a,5,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FieldCache.CacheEntry.setEstimatedSize(String)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCache.CacheEntry.toString()",28,2,n/a,14,1,0,10,2
"org.apache.lucene.search.FieldCache.DoubleParser.parseDouble(String)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCache.FloatParser.parseFloat(String)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCache.IntParser.parseInt(String)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCache.LongParser.parseLong(String)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCache.ShortParser.parseShort(String)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCache.StringIndex.StringIndex(int[],String[])",0,1,n/a,5,0,2,2,1
"org.apache.lucene.search.FieldCache.StringIndex.binarySearchLookup(String)",1,12,n/a,18,1,1,13,5
"org.apache.lucene.search.FieldCache.getBytes(IndexReader,String)",n/a,3,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.getBytes(IndexReader,String,ByteParser)",n/a,5,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.FieldCache.getBytes(IndexReader,String,ByteParser,boolean)",n/a,1,1,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.FieldCache.getCacheEntries()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FieldCache.getDocsWithField(IndexReader,String)",n/a,8,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.getDoubles(IndexReader,String)",n/a,5,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.getDoubles(IndexReader,String,DoubleParser)",n/a,4,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.FieldCache.getDoubles(IndexReader,String,DoubleParser,boolean)",n/a,1,1,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.FieldCache.getFloats(IndexReader,String)",n/a,3,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.getFloats(IndexReader,String,FloatParser)",n/a,5,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.FieldCache.getFloats(IndexReader,String,FloatParser,boolean)",n/a,1,1,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.FieldCache.getInfoStream()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FieldCache.getInts(IndexReader,String)",n/a,6,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.getInts(IndexReader,String,IntParser)",n/a,6,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.FieldCache.getInts(IndexReader,String,IntParser,boolean)",n/a,1,1,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.FieldCache.getLongs(IndexReader,String)",n/a,3,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.getLongs(IndexReader,String,LongParser)",n/a,4,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.FieldCache.getLongs(IndexReader,String,LongParser,boolean)",n/a,1,1,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.FieldCache.getShorts(IndexReader,String)",n/a,3,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.getShorts(IndexReader,String,ShortParser)",n/a,5,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.FieldCache.getShorts(IndexReader,String,ShortParser,boolean)",n/a,1,1,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.FieldCache.getStringIndex(IndexReader,String)",n/a,25,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.getStrings(IndexReader,String)",n/a,4,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldCache.purge(IndexReader)",n/a,3,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCache.purgeAllCaches()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FieldCache.setInfoStream(PrintStream)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCacheDocIdSet.FieldCacheDocIdSet(IndexReader)",0,10,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheDocIdSet.isCacheable()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.search.FieldCacheDocIdSet.iterator()",14,24,n/a,10,5,0,28,11
"org.apache.lucene.search.FieldCacheDocIdSet.matchDoc(int)",n/a,5,10,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCacheImpl.ByteCache.ByteCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.ByteCache.createValue(IndexReader,Entry,boolean)",18,1,n/a,42,5,3,29,10
"org.apache.lucene.search.FieldCacheImpl.Cache.Cache()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.Cache.Cache(FieldCacheImpl)",0,9,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.Cache.createValue(IndexReader,Entry,boolean)",n/a,1,9,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.FieldCacheImpl.Cache.get(IndexReader,Entry,boolean)",13,0,n/a,47,5,3,29,9
"org.apache.lucene.search.FieldCacheImpl.Cache.printNewInsanity(PrintStream,Object)",8,1,n/a,16,3,2,14,4
"org.apache.lucene.search.FieldCacheImpl.Cache.purge(IndexReader)",2,1,n/a,7,1,1,3,1
"org.apache.lucene.search.FieldCacheImpl.Cache.put(IndexReader,Entry,Object)",8,0,n/a,24,3,3,11,4
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.CacheEntryImpl(Object,String,Class<?>,Object,Object)",0,1,n/a,14,0,5,5,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getCacheType()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getCustom()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getFieldName()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getReaderKey()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl.getValue()",0,5,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.DocsWithFieldCache.DocsWithFieldCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.DocsWithFieldCache.createValue(IndexReader,Entry,boolean)",21,1,n/a,34,3,3,24,8
"org.apache.lucene.search.FieldCacheImpl.DoubleCache.DoubleCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.DoubleCache.createValue(IndexReader,Entry,boolean)",19,1,n/a,52,5,3,35,13
"org.apache.lucene.search.FieldCacheImpl.Entry.Entry(String,Object)",1,10,n/a,5,0,2,2,1
"org.apache.lucene.search.FieldCacheImpl.Entry.equals(Object)",1,0,n/a,15,3,1,9,6
"org.apache.lucene.search.FieldCacheImpl.Entry.hashCode()",2,0,n/a,5,0,0,1,2
"org.apache.lucene.search.FieldCacheImpl.FieldCacheImpl()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.FloatCache.FloatCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.FloatCache.createValue(IndexReader,Entry,boolean)",19,1,n/a,52,5,3,35,13
"org.apache.lucene.search.FieldCacheImpl.IntCache.IntCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.IntCache.createValue(IndexReader,Entry,boolean)",19,1,n/a,52,5,3,35,13
"org.apache.lucene.search.FieldCacheImpl.LongCache.LongCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.LongCache.createValue(IndexReader,Entry,boolean)",19,1,n/a,51,5,3,34,13
"org.apache.lucene.search.FieldCacheImpl.ShortCache.ShortCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.ShortCache.createValue(IndexReader,Entry,boolean)",18,1,n/a,42,5,3,29,10
"org.apache.lucene.search.FieldCacheImpl.StringCache.StringCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.StringCache.createValue(IndexReader,Entry,boolean)",15,1,n/a,31,3,3,20,6
"org.apache.lucene.search.FieldCacheImpl.StringIndexCache.StringIndexCache(FieldCacheImpl)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheImpl.StringIndexCache.createValue(IndexReader,Entry,boolean)",17,1,n/a,44,3,3,27,8
"org.apache.lucene.search.FieldCacheImpl.getBytes(IndexReader,String)",1,3,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.getBytes(IndexReader,String,ByteParser)",1,5,n/a,5,0,3,1,1
"org.apache.lucene.search.FieldCacheImpl.getBytes(IndexReader,String,ByteParser,boolean)",3,4,n/a,4,0,4,1,1
"org.apache.lucene.search.FieldCacheImpl.getCacheEntries()",14,2,n/a,21,4,0,14,5
"org.apache.lucene.search.FieldCacheImpl.getDocsWithField(IndexReader,String)",3,8,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.getDoubles(IndexReader,String)",1,5,n/a,5,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.getDoubles(IndexReader,String,DoubleParser)",1,4,n/a,5,0,3,1,1
"org.apache.lucene.search.FieldCacheImpl.getDoubles(IndexReader,String,DoubleParser,boolean)",3,5,n/a,5,0,4,1,1
"org.apache.lucene.search.FieldCacheImpl.getFloats(IndexReader,String)",1,3,n/a,5,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.getFloats(IndexReader,String,FloatParser)",1,5,n/a,5,0,3,1,1
"org.apache.lucene.search.FieldCacheImpl.getFloats(IndexReader,String,FloatParser,boolean)",3,5,n/a,4,0,4,1,1
"org.apache.lucene.search.FieldCacheImpl.getInfoStream()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.getInts(IndexReader,String)",1,6,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.getInts(IndexReader,String,IntParser)",1,7,n/a,5,0,3,1,1
"org.apache.lucene.search.FieldCacheImpl.getInts(IndexReader,String,IntParser,boolean)",3,4,n/a,5,0,4,1,1
"org.apache.lucene.search.FieldCacheImpl.getLongs(IndexReader,String)",1,3,n/a,3,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.getLongs(IndexReader,String,LongParser)",1,4,n/a,5,0,3,1,1
"org.apache.lucene.search.FieldCacheImpl.getLongs(IndexReader,String,LongParser,boolean)",3,5,n/a,5,0,4,1,1
"org.apache.lucene.search.FieldCacheImpl.getShorts(IndexReader,String)",1,3,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.getShorts(IndexReader,String,ShortParser)",1,5,n/a,5,0,3,1,1
"org.apache.lucene.search.FieldCacheImpl.getShorts(IndexReader,String,ShortParser,boolean)",3,4,n/a,5,0,4,1,1
"org.apache.lucene.search.FieldCacheImpl.getStringIndex(IndexReader,String)",3,25,n/a,5,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.getStrings(IndexReader,String)",3,4,n/a,5,0,2,1,1
"org.apache.lucene.search.FieldCacheImpl.init()",19,2,n/a,12,0,0,10,1
"org.apache.lucene.search.FieldCacheImpl.purge(IndexReader)",2,5,n/a,5,1,1,2,2
"org.apache.lucene.search.FieldCacheImpl.purgeAllCaches()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldCacheImpl.setDocsWithField(IndexReader,String,Bits)",7,6,n/a,20,2,3,12,4
"org.apache.lucene.search.FieldCacheImpl.setInfoStream(PrintStream)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.FieldCacheRangeFilter(String,Parser,T,T,boolean,boolean)",0,7,n/a,8,0,6,6,1
"org.apache.lucene.search.FieldCacheRangeFilter.equals(Object)",4,0,n/a,15,1,1,14,12
"org.apache.lucene.search.FieldCacheRangeFilter.getDocIdSet(IndexReader)",n/a,23,7,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldCacheRangeFilter.getField()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.getLowerVal()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.getParser()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.getUpperVal()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.hashCode()",4,0,n/a,10,0,0,7,6
"org.apache.lucene.search.FieldCacheRangeFilter.includesLower()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.includesUpper()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newByteRange(String,Byte,Byte,boolean,boolean)",1,0,n/a,8,0,5,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newByteRange(String,ByteParser,Byte,Byte,boolean,boolean)",5,1,n/a,4,4,6,19,11
"org.apache.lucene.search.FieldCacheRangeFilter.newDoubleRange(String,Double,Double,boolean,boolean)",1,0,n/a,8,0,5,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newDoubleRange(String,DoubleParser,Double,Double,boolean,boolean)",11,1,n/a,4,4,6,21,13
"org.apache.lucene.search.FieldCacheRangeFilter.newFloatRange(String,Float,Float,boolean,boolean)",1,0,n/a,8,0,5,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newFloatRange(String,FloatParser,Float,Float,boolean,boolean)",11,1,n/a,4,4,6,21,13
"org.apache.lucene.search.FieldCacheRangeFilter.newIntRange(String,IntParser,Integer,Integer,boolean,boolean)",5,1,n/a,4,4,6,19,11
"org.apache.lucene.search.FieldCacheRangeFilter.newIntRange(String,Integer,Integer,boolean,boolean)",1,0,n/a,8,0,5,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newLongRange(String,Long,Long,boolean,boolean)",1,0,n/a,8,0,5,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newLongRange(String,LongParser,Long,Long,boolean,boolean)",5,1,n/a,4,4,6,19,11
"org.apache.lucene.search.FieldCacheRangeFilter.newShortRange(String,Short,Short,boolean,boolean)",1,0,n/a,8,0,5,1,1
"org.apache.lucene.search.FieldCacheRangeFilter.newShortRange(String,ShortParser,Short,Short,boolean,boolean)",5,1,n/a,4,4,6,19,11
"org.apache.lucene.search.FieldCacheRangeFilter.newStringRange(String,String,String,boolean,boolean)",6,2,n/a,4,4,5,26,13
"org.apache.lucene.search.FieldCacheRangeFilter.toString()",10,0,n/a,10,0,0,2,5
"org.apache.lucene.search.FieldCacheTermsFilter.FieldCacheTermsFilter(String,String...)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.search.FieldCacheTermsFilter.getDocIdSet(IndexReader)",7,23,n/a,4,2,1,10,3
"org.apache.lucene.search.FieldCacheTermsFilter.getFieldCache()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldComparator.ByteComparator.ByteComparator(int,String,Parser,Byte)",1,1,n/a,5,0,4,3,1
"org.apache.lucene.search.FieldComparator.ByteComparator.compare(int,int)",0,7,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldComparator.ByteComparator.compareBottom(int)",1,20,n/a,10,1,1,4,4
"org.apache.lucene.search.FieldComparator.ByteComparator.copy(int,int)",1,37,n/a,10,1,2,4,4
"org.apache.lucene.search.FieldComparator.ByteComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.ByteComparator.setNextReader(IndexReader,int)",2,15,n/a,7,0,2,2,1
"org.apache.lucene.search.FieldComparator.ByteComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.DocComparator(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.compare(int,int)",0,7,n/a,5,0,2,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.compareBottom(int)",0,20,n/a,5,0,1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.copy(int,int)",0,37,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.setNextReader(IndexReader,int)",0,9,n/a,7,0,2,1,1
"org.apache.lucene.search.FieldComparator.DocComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.DoubleComparator.DoubleComparator(int,String,Parser,Double)",1,1,n/a,5,0,4,3,1
"org.apache.lucene.search.FieldComparator.DoubleComparator.compare(int,int)",0,7,n/a,12,1,2,7,3
"org.apache.lucene.search.FieldComparator.DoubleComparator.compareBottom(int)",1,20,n/a,16,1,1,8,6
"org.apache.lucene.search.FieldComparator.DoubleComparator.copy(int,int)",1,37,n/a,10,1,2,4,4
"org.apache.lucene.search.FieldComparator.DoubleComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.DoubleComparator.setNextReader(IndexReader,int)",2,15,n/a,7,0,2,2,1
"org.apache.lucene.search.FieldComparator.DoubleComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.FloatComparator.FloatComparator(int,String,Parser,Float)",1,1,n/a,5,0,4,3,1
"org.apache.lucene.search.FieldComparator.FloatComparator.compare(int,int)",0,7,n/a,14,1,2,7,3
"org.apache.lucene.search.FieldComparator.FloatComparator.compareBottom(int)",1,20,n/a,18,1,1,8,6
"org.apache.lucene.search.FieldComparator.FloatComparator.copy(int,int)",1,37,n/a,10,1,2,4,4
"org.apache.lucene.search.FieldComparator.FloatComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.FloatComparator.setNextReader(IndexReader,int)",2,15,n/a,7,0,2,2,1
"org.apache.lucene.search.FieldComparator.FloatComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.IntComparator.IntComparator(int,String,Parser,Integer)",1,1,n/a,5,0,4,3,1
"org.apache.lucene.search.FieldComparator.IntComparator.compare(int,int)",0,7,n/a,16,1,2,7,3
"org.apache.lucene.search.FieldComparator.IntComparator.compareBottom(int)",1,20,n/a,20,1,1,8,6
"org.apache.lucene.search.FieldComparator.IntComparator.copy(int,int)",1,37,n/a,10,1,2,4,4
"org.apache.lucene.search.FieldComparator.IntComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.IntComparator.setNextReader(IndexReader,int)",2,15,n/a,7,0,2,2,1
"org.apache.lucene.search.FieldComparator.IntComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.LongComparator.LongComparator(int,String,Parser,Long)",1,1,n/a,5,0,4,3,1
"org.apache.lucene.search.FieldComparator.LongComparator.compare(int,int)",0,7,n/a,14,1,2,7,3
"org.apache.lucene.search.FieldComparator.LongComparator.compareBottom(int)",1,20,n/a,18,1,1,8,6
"org.apache.lucene.search.FieldComparator.LongComparator.copy(int,int)",1,37,n/a,10,1,2,4,4
"org.apache.lucene.search.FieldComparator.LongComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.LongComparator.setNextReader(IndexReader,int)",2,15,n/a,7,0,2,2,1
"org.apache.lucene.search.FieldComparator.LongComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.NumericComparator.NumericComparator(String,T)",0,6,n/a,4,0,2,2,1
"org.apache.lucene.search.FieldComparator.NumericComparator.setNextReader(IndexReader,int)",1,15,n/a,12,2,2,5,3
"org.apache.lucene.search.FieldComparator.RelevanceComparator.RelevanceComparator(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.compare(int,int)",0,7,n/a,6,0,2,3,3
"org.apache.lucene.search.FieldComparator.RelevanceComparator.compareBottom(int)",1,20,n/a,5,0,1,2,3
"org.apache.lucene.search.FieldComparator.RelevanceComparator.compareValues(Float,Float)",1,4,n/a,7,0,2,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.copy(int,int)",1,37,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.setNextReader(IndexReader,int)",0,9,n/a,3,0,2,0,1
"org.apache.lucene.search.FieldComparator.RelevanceComparator.setScorer(Scorer)",1,8,n/a,11,1,1,3,2
"org.apache.lucene.search.FieldComparator.RelevanceComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.ShortComparator.ShortComparator(int,String,Parser,Short)",1,1,n/a,5,0,4,3,1
"org.apache.lucene.search.FieldComparator.ShortComparator.compare(int,int)",0,7,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldComparator.ShortComparator.compareBottom(int)",1,20,n/a,10,1,1,4,4
"org.apache.lucene.search.FieldComparator.ShortComparator.copy(int,int)",1,37,n/a,10,1,2,4,4
"org.apache.lucene.search.FieldComparator.ShortComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.ShortComparator.setNextReader(IndexReader,int)",2,15,n/a,7,0,2,2,1
"org.apache.lucene.search.FieldComparator.ShortComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.StringComparatorLocale(int,String,Locale)",1,1,n/a,5,0,3,3,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.compare(int,int)",1,7,n/a,14,2,2,9,4
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.compareBottom(int)",1,20,n/a,13,2,1,8,4
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.compareValues(String,String)",1,4,n/a,12,2,2,7,4
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.copy(int,int)",0,37,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.setNextReader(IndexReader,int)",1,9,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldComparator.StringComparatorLocale.value(int)",0,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.StringOrdValComparator(int,String,int,boolean)",0,1,n/a,6,0,4,4,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.compare(int,int)",1,7,n/a,17,2,2,11,5
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.compareBottom(int)",0,20,n/a,16,1,1,7,3
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.compareValues(String,String)",1,4,n/a,12,2,2,7,4
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.copy(int,int)",0,37,n/a,8,0,2,5,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.getBottomSlot()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.getField()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.getValues()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.setBottom(int)",1,38,n/a,28,3,1,18,4
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.setNextReader(IndexReader,int)",2,9,n/a,11,1,2,7,2
"org.apache.lucene.search.FieldComparator.StringOrdValComparator.value(int)",0,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.StringValComparator(int,String)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.FieldComparator.StringValComparator.compare(int,int)",1,7,n/a,14,2,2,9,4
"org.apache.lucene.search.FieldComparator.StringValComparator.compareBottom(int)",1,20,n/a,13,2,1,8,4
"org.apache.lucene.search.FieldComparator.StringValComparator.compareValues(String,String)",1,4,n/a,13,2,2,7,4
"org.apache.lucene.search.FieldComparator.StringValComparator.copy(int,int)",0,37,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.setNextReader(IndexReader,int)",1,9,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldComparator.StringValComparator.value(int)",0,6,n/a,4,0,1,1,1
"org.apache.lucene.search.FieldComparator.binarySearch(String[],String)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.search.FieldComparator.binarySearch(String[],String,int,int)",1,3,n/a,19,2,4,13,5
"org.apache.lucene.search.FieldComparator.compare(int,int)",n/a,7,17,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldComparator.compareBottom(int)",n/a,20,17,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldComparator.compareValues(T,T)",1,4,n/a,19,2,2,7,4
"org.apache.lucene.search.FieldComparator.copy(int,int)",n/a,37,17,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldComparator.setBottom(int)",n/a,37,17,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldComparator.setNextReader(IndexReader,int)",n/a,9,18,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.FieldComparator.setScorer(Scorer)",0,8,n/a,9,0,1,0,1
"org.apache.lucene.search.FieldComparator.value(int)",n/a,6,17,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FieldComparatorSource.newComparator(String,int,int,boolean)",n/a,1,7,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.FieldDoc.FieldDoc(int,float)",1,3,n/a,4,0,2,1,1
"org.apache.lucene.search.FieldDoc.FieldDoc(int,float,Object[])",1,3,n/a,5,0,3,2,1
"org.apache.lucene.search.FieldDoc.FieldDoc(int,float,Object[],int)",1,0,n/a,5,0,4,2,1
"org.apache.lucene.search.FieldDoc.toString()",9,2,n/a,14,1,0,9,2
"org.apache.lucene.search.FieldDocSortedHitQueue.FieldDocSortedHitQueue(int)",1,2,n/a,8,0,1,1,1
"org.apache.lucene.search.FieldDocSortedHitQueue.getFields()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.FieldDocSortedHitQueue.hasCollators(SortField[])",2,1,n/a,15,1,1,10,4
"org.apache.lucene.search.FieldDocSortedHitQueue.lessThan(FieldDoc,FieldDoc)",6,6,n/a,42,3,2,23,10
"org.apache.lucene.search.FieldDocSortedHitQueue.setFields(SortField[])",2,1,n/a,17,1,1,7,2
"org.apache.lucene.search.FieldValueFilter.FieldValueFilter(String)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.search.FieldValueFilter.FieldValueFilter(String,boolean)",0,1,n/a,14,0,2,2,1
"org.apache.lucene.search.FieldValueFilter.equals(Object)",3,0,n/a,18,1,1,15,8
"org.apache.lucene.search.FieldValueFilter.field()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.FieldValueFilter.getDocIdSet(IndexReader)",8,23,n/a,4,4,1,14,6
"org.apache.lucene.search.FieldValueFilter.hashCode()",1,0,n/a,8,0,0,5,3
"org.apache.lucene.search.FieldValueFilter.negate()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.FieldValueFilter.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.FieldValueHitQueue.Entry.Entry(int,int,float)",1,2,n/a,4,0,3,2,1
"org.apache.lucene.search.FieldValueHitQueue.Entry.toString()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.search.FieldValueHitQueue.FieldValueHitQueue(SortField[])",0,2,n/a,13,0,1,4,1
"org.apache.lucene.search.FieldValueHitQueue.MultiComparatorsFieldValueHitQueue.MultiComparatorsFieldValueHitQueue(SortField[],int)",3,1,n/a,11,1,2,9,3
"org.apache.lucene.search.FieldValueHitQueue.MultiComparatorsFieldValueHitQueue.lessThan(Entry,Entry)",1,6,n/a,15,2,2,10,3
"org.apache.lucene.search.FieldValueHitQueue.OneComparatorFieldValueHitQueue.OneComparatorFieldValueHitQueue(SortField[],int)",3,1,n/a,10,0,2,7,2
"org.apache.lucene.search.FieldValueHitQueue.OneComparatorFieldValueHitQueue.lessThan(Entry,Entry)",1,6,n/a,17,1,2,6,2
"org.apache.lucene.search.FieldValueHitQueue.create(SortField[],int)",3,2,n/a,23,1,2,5,3
"org.apache.lucene.search.FieldValueHitQueue.fillFields(Entry)",2,1,n/a,20,1,1,7,2
"org.apache.lucene.search.FieldValueHitQueue.getComparators()",0,4,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldValueHitQueue.getFields()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.FieldValueHitQueue.getReverseMul()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.search.FieldValueHitQueue.lessThan(Entry,Entry)",n/a,6,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Filter.getDocIdSet(IndexReader)",n/a,23,33,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FilterClause.FilterClause(Filter,Occur)",0,2,n/a,9,0,2,2,1
"org.apache.lucene.search.FilterClause.equals(Object)",1,0,n/a,10,0,1,6,5
"org.apache.lucene.search.FilterClause.getFilter()",0,3,n/a,7,0,0,1,1
"org.apache.lucene.search.FilterClause.getOccur()",0,3,n/a,7,0,0,1,1
"org.apache.lucene.search.FilterClause.hashCode()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.search.FilterClause.toString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.search.FilterManager.FilterCleaner.FilterCleaner()",4,1,n/a,13,3,0,8,3
"org.apache.lucene.search.FilterManager.FilterCleaner.run()",13,0,n/a,29,4,0,15,6
"org.apache.lucene.search.FilterManager.FilterItem.FilterItem(Filter)",2,1,n/a,4,0,1,2,1
"org.apache.lucene.search.FilterManager.FilterManager()",5,1,n/a,13,0,0,7,1
"org.apache.lucene.search.FilterManager.getFilter(Filter)",9,2,n/a,20,2,1,8,2
"org.apache.lucene.search.FilterManager.getInstance()",1,2,n/a,6,1,0,3,2
"org.apache.lucene.search.FilterManager.setCacheSize(int)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.FilterManager.setCleanThreadSleepTime(long)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.FilteredDocIdSet.FilteredDocIdSet(DocIdSet)",0,4,n/a,7,0,1,1,1
"org.apache.lucene.search.FilteredDocIdSet.isCacheable()",1,4,n/a,5,0,0,1,1
"org.apache.lucene.search.FilteredDocIdSet.iterator()",3,24,n/a,4,2,0,5,2
"org.apache.lucene.search.FilteredDocIdSet.match(int)",n/a,3,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FilteredDocIdSetIterator.FilteredDocIdSetIterator(DocIdSetIterator)",1,2,n/a,11,1,1,4,2
"org.apache.lucene.search.FilteredDocIdSetIterator.advance(int)",4,54,n/a,17,4,1,9,5
"org.apache.lucene.search.FilteredDocIdSetIterator.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.FilteredDocIdSetIterator.match(int)",n/a,3,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FilteredDocIdSetIterator.nextDoc()",2,62,n/a,9,2,0,4,3
"org.apache.lucene.search.FilteredQuery.FilteredQuery(Query,Filter)",0,3,n/a,10,0,2,2,1
"org.apache.lucene.search.FilteredQuery.createWeight(Searcher)",19,16,n/a,9,3,1,21,4
"org.apache.lucene.search.FilteredQuery.equals(Object)",4,28,n/a,9,1,1,4,4
"org.apache.lucene.search.FilteredQuery.extractTerms(Set<Term>)",2,24,n/a,5,0,1,1,1
"org.apache.lucene.search.FilteredQuery.getFilter()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.FilteredQuery.getFilteredScorer(IndexReader,Similarity,Weight,Weight,Filter)",19,2,n/a,4,5,5,35,12
"org.apache.lucene.search.FilteredQuery.getQuery()",0,4,n/a,3,0,0,1,1
"org.apache.lucene.search.FilteredQuery.hashCode()",4,23,n/a,5,0,0,1,1
"org.apache.lucene.search.FilteredQuery.rewrite(IndexReader)",2,30,n/a,12,1,1,6,2
"org.apache.lucene.search.FilteredQuery.toString(String)",10,47,n/a,11,0,1,7,1
"org.apache.lucene.search.FilteredTermEnum.FilteredTermEnum()",0,10,n/a,1,0,0,0,1
"org.apache.lucene.search.FilteredTermEnum.close()",1,42,n/a,7,0,0,4,2
"org.apache.lucene.search.FilteredTermEnum.difference()",n/a,1,10,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FilteredTermEnum.docFreq()",1,28,n/a,10,0,0,4,2
"org.apache.lucene.search.FilteredTermEnum.endEnum()",n/a,1,10,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.FilteredTermEnum.next()",4,56,n/a,19,3,0,14,6
"org.apache.lucene.search.FilteredTermEnum.setEnum(TermEnum)",3,8,n/a,12,0,1,5,3
"org.apache.lucene.search.FilteredTermEnum.term()",0,112,n/a,6,0,0,1,1
"org.apache.lucene.search.FilteredTermEnum.termCompare(Term)",n/a,2,10,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.FuzzyLikeThisQuery.FieldVals.FieldVals(String,float,int,String)",0,0,n/a,7,0,4,4,1
"org.apache.lucene.search.FuzzyLikeThisQuery.FieldVals.equals(Object)",6,0,n/a,26,1,1,22,12
"org.apache.lucene.search.FuzzyLikeThisQuery.FieldVals.hashCode()",3,0,n/a,12,0,0,7,3
"org.apache.lucene.search.FuzzyLikeThisQuery.FuzzyLikeThisQuery(int,Analyzer)",1,6,n/a,11,0,2,3,1
"org.apache.lucene.search.FuzzyLikeThisQuery.FuzzyTermQuery.FuzzyTermQuery(Term,boolean)",1,2,n/a,5,0,2,2,1
"org.apache.lucene.search.FuzzyLikeThisQuery.FuzzyTermQuery.getSimilarity(Searcher)",3,16,n/a,6,3,1,7,2
"org.apache.lucene.search.FuzzyLikeThisQuery.ScoreTerm.ScoreTerm(Term,float,Term)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.search.FuzzyLikeThisQuery.ScoreTermQueue.ScoreTermQueue(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.ScoreTermQueue.lessThan(ScoreTerm,ScoreTerm)",1,6,n/a,10,0,2,3,2
"org.apache.lucene.search.FuzzyLikeThisQuery.addTerms(IndexReader,FieldVals)",32,1,n/a,66,5,2,45,12
"org.apache.lucene.search.FuzzyLikeThisQuery.addTerms(String,String,float,int)",2,6,n/a,11,0,4,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.equals(Object)",4,28,n/a,25,1,1,22,12
"org.apache.lucene.search.FuzzyLikeThisQuery.hashCode()",2,23,n/a,11,0,0,7,4
"org.apache.lucene.search.FuzzyLikeThisQuery.isIgnoreTF()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.rewrite(IndexReader)",32,33,n/a,64,3,1,38,8
"org.apache.lucene.search.FuzzyLikeThisQuery.setIgnoreTF(boolean)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.toString(String)",0,47,n/a,8,0,1,1,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.addDoc(RandomIndexWriter,String,String)",6,6,n/a,7,0,3,4,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.setUp()",16,0,n/a,16,0,0,12,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.tearDown()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.testClosestEditDistanceMatchComesFirst()",20,0,n/a,17,0,0,13,2
"org.apache.lucene.search.FuzzyLikeThisQueryTest.testFuzzyLikeThisQueryEquals()",6,0,n/a,9,0,0,6,1
"org.apache.lucene.search.FuzzyLikeThisQueryTest.testMultiWord()",17,0,n/a,16,0,0,12,2
"org.apache.lucene.search.FuzzyLikeThisQueryTest.testNoMatchFirstWordBug()",14,0,n/a,15,0,0,11,2
"org.apache.lucene.search.FuzzyQuery.FuzzyQuery(Term)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.search.FuzzyQuery.FuzzyQuery(Term,float)",1,3,n/a,6,0,2,1,1
"org.apache.lucene.search.FuzzyQuery.FuzzyQuery(Term,float,int)",1,2,n/a,6,0,3,1,1
"org.apache.lucene.search.FuzzyQuery.FuzzyQuery(Term,float,int,int)",8,3,n/a,37,1,4,14,6
"org.apache.lucene.search.FuzzyQuery.equals(Object)",6,36,n/a,21,1,1,17,9
"org.apache.lucene.search.FuzzyQuery.getEnum(IndexReader)",3,5,n/a,7,1,1,3,2
"org.apache.lucene.search.FuzzyQuery.getMinSimilarity()",0,6,n/a,7,0,0,1,1
"org.apache.lucene.search.FuzzyQuery.getPrefixLength()",0,6,n/a,8,0,0,1,1
"org.apache.lucene.search.FuzzyQuery.getTerm()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.search.FuzzyQuery.hashCode()",3,31,n/a,9,0,0,6,2
"org.apache.lucene.search.FuzzyQuery.toString(String)",15,47,n/a,13,1,1,9,2
"org.apache.lucene.search.FuzzyTermEnum.FuzzyTermEnum(IndexReader,Term)",1,0,n/a,14,0,2,1,1
"org.apache.lucene.search.FuzzyTermEnum.FuzzyTermEnum(IndexReader,Term,float)",1,0,n/a,15,0,3,1,1
"org.apache.lucene.search.FuzzyTermEnum.FuzzyTermEnum(IndexReader,Term,float,int)",16,6,n/a,36,0,4,18,5
"org.apache.lucene.search.FuzzyTermEnum.calculateMaxDistance(int)",2,1,n/a,10,0,1,1,1
"org.apache.lucene.search.FuzzyTermEnum.close()",1,42,n/a,7,0,0,3,1
"org.apache.lucene.search.FuzzyTermEnum.difference()",0,2,n/a,5,0,0,1,1
"org.apache.lucene.search.FuzzyTermEnum.endEnum()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.search.FuzzyTermEnum.similarity(String)",15,1,n/a,99,3,1,32,12
"org.apache.lucene.search.FuzzyTermEnum.termCompare(Term)",7,2,n/a,14,1,1,6,3
"org.apache.lucene.search.HitQueue.HitQueue(int,boolean)",1,4,n/a,43,0,2,2,1
"org.apache.lucene.search.HitQueue.getSentinelObject()",1,3,n/a,8,0,0,1,2
"org.apache.lucene.search.HitQueue.lessThan(ScoreDoc,ScoreDoc)",0,6,n/a,7,0,2,3,2
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.ExecutionHelper(Executor)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.iterator()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.next()",6,0,n/a,13,1,0,7,4
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.IndexSearcher.ExecutionHelper.submit(Callable<T>)",1,3,n/a,4,0,1,2,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(Directory)",2,0,n/a,11,0,1,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(Directory,boolean)",2,23,n/a,16,0,2,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader)",1,41,n/a,4,0,1,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,ExecutorService)",1,1,n/a,14,0,2,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,IndexReader[],int[])",1,0,n/a,7,0,3,1,1
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,IndexReader[],int[],ExecutorService)",1,1,n/a,29,2,4,13,3
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,boolean,ExecutorService)",6,4,n/a,23,2,3,21,4
"org.apache.lucene.search.IndexSearcher.IndexSearcher(IndexReader,int)",0,2,n/a,12,0,2,7,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableNoSort.MultiSearcherCallableNoSort(Lock,IndexSearcher,Weight,Filter,ScoreDoc,int,HitQueue)",0,1,n/a,10,0,7,7,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableNoSort.call()",5,0,n/a,24,3,0,15,4
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.FakeScorer()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.freq()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer.score()",0,63,n/a,4,0,0,1,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.MultiSearcherCallableWithSort(Lock,IndexSearcher,Weight,Filter,int,TopFieldCollector,Sort)",0,1,n/a,10,0,7,7,1
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.call()",10,0,n/a,30,3,0,22,5
"org.apache.lucene.search.IndexSearcher.close()",1,90,n/a,12,1,0,2,2
"org.apache.lucene.search.IndexSearcher.createNormalizedWeight(Query)",1,26,n/a,10,0,1,1,1
"org.apache.lucene.search.IndexSearcher.doc(int)",1,76,n/a,5,0,1,1,1
"org.apache.lucene.search.IndexSearcher.doc(int,FieldSelector)",1,5,n/a,5,0,2,1,1
"org.apache.lucene.search.IndexSearcher.docFreq(Term)",7,10,n/a,3,4,1,13,4
"org.apache.lucene.search.IndexSearcher.explain(Query,int)",2,5,n/a,12,0,2,1,1
"org.apache.lucene.search.IndexSearcher.explain(Weight,int)",2,4,n/a,17,0,2,3,1
"org.apache.lucene.search.IndexSearcher.gatherSubReaders(List<IndexReader>,IndexReader)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.search.IndexSearcher.getIndexReader()",0,58,n/a,4,0,0,1,1
"org.apache.lucene.search.IndexSearcher.getSimilarity()",1,7,n/a,4,0,0,1,1
"org.apache.lucene.search.IndexSearcher.getSubReaders()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.IndexSearcher.maxDoc()",1,34,n/a,8,0,0,1,1
"org.apache.lucene.search.IndexSearcher.rewrite(Query)",2,3,n/a,12,1,1,6,2
"org.apache.lucene.search.IndexSearcher.search(Query,Collector)",2,34,n/a,18,0,2,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,Filter,Collector)",2,11,n/a,21,0,3,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,Filter,int)",2,73,n/a,10,0,3,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,Filter,int,Sort)",2,35,n/a,16,0,4,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,int)",1,63,n/a,10,0,2,1,1
"org.apache.lucene.search.IndexSearcher.search(Query,int,Sort)",2,0,n/a,13,0,3,1,1
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,Collector)",6,12,n/a,36,2,3,7,4
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,ScoreDoc,int)",17,3,n/a,40,3,4,27,7
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,int)",1,6,n/a,11,0,3,1,1
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,int,Sort)",1,12,n/a,15,0,4,1,1
"org.apache.lucene.search.IndexSearcher.search(Weight,Filter,int,Sort,boolean)",17,1,n/a,50,3,5,25,7
"org.apache.lucene.search.IndexSearcher.searchAfter(ScoreDoc,Query,Filter,int)",2,1,n/a,13,0,4,1,1
"org.apache.lucene.search.IndexSearcher.searchAfter(ScoreDoc,Query,int)",1,0,n/a,13,0,3,1,1
"org.apache.lucene.search.IndexSearcher.setDefaultFieldSortScoring(boolean,boolean)",1,5,n/a,21,2,2,5,3
"org.apache.lucene.search.IndexSearcher.setSimilarity(Similarity)",1,9,n/a,8,0,1,1,1
"org.apache.lucene.search.IndexSearcher.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsQuery()",1,29,n/a,3,0,0,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsQuery(String)",0,1,n/a,6,0,1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.MatchAllDocsWeight(Searcher)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.explain(IndexReader,int)",8,8,n/a,11,1,2,5,2
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.getQuery()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.getValue()",0,10,n/a,4,0,0,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.normalize(float)",0,12,n/a,5,0,1,2,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.scorer(IndexReader,boolean,boolean)",2,18,n/a,5,0,3,1,2
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.sumOfSquaredWeights()",1,12,n/a,5,0,0,2,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.MatchAllScorer(IndexReader,Similarity,Weight,byte[])",3,1,n/a,7,0,4,4,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.advance(int)",2,54,n/a,4,0,1,1,2
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.docID()",0,46,n/a,4,0,0,1,1
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.nextDoc()",2,62,n/a,4,0,0,1,2
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer.score()",3,63,n/a,4,0,0,1,2
"org.apache.lucene.search.MatchAllDocsQuery.createWeight(Searcher)",1,16,n/a,4,0,1,1,1
"org.apache.lucene.search.MatchAllDocsQuery.equals(Object)",2,28,n/a,7,0,1,4,2
"org.apache.lucene.search.MatchAllDocsQuery.extractTerms(Set<Term>)",0,24,n/a,3,0,1,0,1
"org.apache.lucene.search.MatchAllDocsQuery.hashCode()",2,23,n/a,4,0,0,1,1
"org.apache.lucene.search.MatchAllDocsQuery.toString(String)",6,47,n/a,7,0,1,4,1
"org.apache.lucene.search.MultiCollector.MultiCollector(Collector...)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.search.MultiCollector.acceptsDocsOutOfOrder()",1,15,n/a,9,2,0,4,3
"org.apache.lucene.search.MultiCollector.collect(int)",1,50,n/a,6,1,1,2,2
"org.apache.lucene.search.MultiCollector.setNextReader(IndexReader,int)",1,19,n/a,6,1,2,2,2
"org.apache.lucene.search.MultiCollector.setScorer(Scorer)",1,27,n/a,6,1,1,2,2
"org.apache.lucene.search.MultiCollector.wrap(Collector...)",3,13,n/a,51,3,1,21,10
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.MultiPhraseWeight(Searcher)",5,1,n/a,13,2,1,7,3
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.explain(IndexReader,int)",53,8,n/a,58,1,2,42,6
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.getQuery()",0,6,n/a,2,0,0,1,1
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.getValue()",0,9,n/a,2,0,0,1,1
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.normalize(float)",0,12,n/a,6,0,1,3,1
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.scorer(IndexReader,boolean,boolean)",15,19,n/a,42,3,3,29,9
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight.sumOfSquaredWeights()",1,12,n/a,5,0,0,2,1
"org.apache.lucene.search.MultiPhraseQuery.add(Term)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.search.MultiPhraseQuery.add(Term[])",5,5,n/a,11,0,1,4,2
"org.apache.lucene.search.MultiPhraseQuery.add(Term[],int)",7,8,n/a,20,2,2,9,4
"org.apache.lucene.search.MultiPhraseQuery.createWeight(Searcher)",1,16,n/a,4,0,1,1,1
"org.apache.lucene.search.MultiPhraseQuery.equals(Object)",4,28,n/a,10,0,1,4,5
"org.apache.lucene.search.MultiPhraseQuery.extractTerms(Set<Term>)",1,24,n/a,9,2,1,3,3
"org.apache.lucene.search.MultiPhraseQuery.getPositions()",4,2,n/a,9,0,0,6,2
"org.apache.lucene.search.MultiPhraseQuery.getSlop()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiPhraseQuery.getTermArrays()",1,3,n/a,7,0,0,1,1
"org.apache.lucene.search.MultiPhraseQuery.hashCode()",4,23,n/a,9,0,0,1,1
"org.apache.lucene.search.MultiPhraseQuery.rewrite(IndexReader)",7,30,n/a,14,2,1,10,3
"org.apache.lucene.search.MultiPhraseQuery.setSlop(int)",0,6,n/a,4,0,1,1,1
"org.apache.lucene.search.MultiPhraseQuery.termArraysEquals(List<Term[]>,List<Term[]>)",8,1,n/a,17,2,2,10,5
"org.apache.lucene.search.MultiPhraseQuery.termArraysHashCode()",1,1,n/a,9,1,0,4,3
"org.apache.lucene.search.MultiPhraseQuery.toString(String)",24,47,n/a,43,3,1,36,10
"org.apache.lucene.search.MultiSearcher.CachedDfSource.CachedDfSource(Map<Term, Integer>,int,Similarity)",1,1,n/a,5,0,3,3,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.close()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.doc(int)",1,12,n/a,4,0,1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.doc(int,FieldSelector)",1,4,n/a,4,0,2,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.docFreq(Term)",4,9,n/a,11,1,1,5,2
"org.apache.lucene.search.MultiSearcher.CachedDfSource.docFreqs(Term[])",1,3,n/a,8,1,1,6,2
"org.apache.lucene.search.MultiSearcher.CachedDfSource.explain(Weight,int)",1,3,n/a,4,0,2,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.maxDoc()",0,8,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.rewrite(Query)",0,3,n/a,8,0,1,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.search(Weight,Filter,Collector)",1,5,n/a,4,0,3,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.search(Weight,Filter,int)",1,3,n/a,4,0,3,1,1
"org.apache.lucene.search.MultiSearcher.CachedDfSource.search(Weight,Filter,int,Sort)",1,5,n/a,4,0,4,1,1
"org.apache.lucene.search.MultiSearcher.MultiSearcher(Searchable...)",1,10,n/a,10,1,1,8,2
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableNoSort.MultiSearcherCallableNoSort(Lock,Searchable,Weight,Filter,int,HitQueue,int,int[])",0,2,n/a,11,0,8,8,1
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableNoSort.call()",4,1,n/a,17,2,0,13,3
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableWithSort.MultiSearcherCallableWithSort(Lock,Searchable,Weight,Filter,int,FieldDocSortedHitQueue,Sort,int,int[])",0,2,n/a,12,0,9,9,1
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableWithSort.call()",10,1,n/a,36,3,0,27,6
"org.apache.lucene.search.MultiSearcher.close()",1,6,n/a,6,0,0,4,2
"org.apache.lucene.search.MultiSearcher.createDocFrequencyMap(Set<Term>)",6,1,n/a,23,2,1,14,4
"org.apache.lucene.search.MultiSearcher.createNormalizedWeight(Query)",8,12,n/a,29,0,1,7,1
"org.apache.lucene.search.MultiSearcher.doc(int)",2,13,n/a,6,0,1,2,1
"org.apache.lucene.search.MultiSearcher.doc(int,FieldSelector)",2,4,n/a,6,0,2,2,1
"org.apache.lucene.search.MultiSearcher.docFreq(Term)",1,8,n/a,7,0,1,6,2
"org.apache.lucene.search.MultiSearcher.explain(Weight,int)",2,3,n/a,5,0,2,2,1
"org.apache.lucene.search.MultiSearcher.getSearchables()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiSearcher.getStarts()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.MultiSearcher.maxDoc()",0,11,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiSearcher.rewrite(Query)",2,4,n/a,8,1,1,6,2
"org.apache.lucene.search.MultiSearcher.search(Weight,Filter,Collector)",6,5,n/a,4,3,3,10,2
"org.apache.lucene.search.MultiSearcher.search(Weight,Filter,int)",9,3,n/a,17,1,3,15,4
"org.apache.lucene.search.MultiSearcher.search(Weight,Filter,int,Sort)",12,5,n/a,17,1,4,16,3
"org.apache.lucene.search.MultiSearcher.subDoc(int)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.search.MultiSearcher.subSearcher(int)",1,4,n/a,5,0,1,1,1
"org.apache.lucene.search.MultiTermQuery.MultiTermQuery()",0,8,n/a,6,0,0,0,1
"org.apache.lucene.search.MultiTermQuery.RewriteMethod.getTermsEnum(IndexReader,MultiTermQuery)",1,1,n/a,7,0,2,1,1
"org.apache.lucene.search.MultiTermQuery.RewriteMethod.rewrite(IndexReader,MultiTermQuery)",n/a,2,7,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.TopTermsBoostOnlyBooleanQueryRewrite(int)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.addClause(BooleanQuery,Term,float)",4,2,n/a,6,0,3,3,1
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.getMaxSize()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite.getTopLevelQuery()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.TopTermsScoringBooleanQueryRewrite(int)",1,2,n/a,10,0,1,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.addClause(BooleanQuery,Term,float)",3,2,n/a,6,0,3,3,1
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.getMaxSize()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite.getTopLevelQuery()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiTermQuery.clearTotalNumberOfTerms()",0,3,n/a,10,0,0,1,1
"org.apache.lucene.search.MultiTermQuery.equals(Object)",7,36,n/a,16,1,1,12,6
"org.apache.lucene.search.MultiTermQuery.getEnum(IndexReader)",n/a,5,8,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.MultiTermQuery.getRewriteMethod()",0,10,n/a,6,0,0,1,1
"org.apache.lucene.search.MultiTermQuery.getTotalNumberOfTerms()",0,2,n/a,20,0,0,1,1
"org.apache.lucene.search.MultiTermQuery.hashCode()",3,31,n/a,9,0,0,6,1
"org.apache.lucene.search.MultiTermQuery.incTotalNumberOfTerms(int)",0,4,n/a,7,0,1,1,1
"org.apache.lucene.search.MultiTermQuery.rewrite(IndexReader)",1,32,n/a,9,0,1,1,1
"org.apache.lucene.search.MultiTermQuery.setRewriteMethod(RewriteMethod)",0,26,n/a,7,0,1,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.MultiTermQueryWrapperFilter(Q)",0,5,n/a,6,0,1,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.clearTotalNumberOfTerms()",1,2,n/a,10,0,0,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.equals(Object)",4,0,n/a,10,1,1,7,4
"org.apache.lucene.search.MultiTermQueryWrapperFilter.getDocIdSet(IndexReader)",13,23,n/a,44,6,1,28,7
"org.apache.lucene.search.MultiTermQueryWrapperFilter.getTotalNumberOfTerms()",1,1,n/a,15,0,0,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.MultiTermQueryWrapperFilter.toString()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.search.NGramPhraseQuery.NGramPhraseQuery(int)",1,0,n/a,8,0,1,2,1
"org.apache.lucene.search.NGramPhraseQuery.equals(Object)",1,29,n/a,9,0,1,6,3
"org.apache.lucene.search.NGramPhraseQuery.hashCode()",7,23,n/a,9,0,0,1,1
"org.apache.lucene.search.NGramPhraseQuery.rewrite(IndexReader)",9,34,n/a,29,2,1,24,9
"org.apache.lucene.search.NRTManager.NRTManager(TrackingIndexWriter,SearcherFactory)",1,1,n/a,12,0,2,1,1
"org.apache.lucene.search.NRTManager.NRTManager(TrackingIndexWriter,SearcherFactory,boolean)",4,1,n/a,15,1,3,5,2
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.TrackingIndexWriter(IndexWriter)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addDocument(Document)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addDocument(Document,Analyzer)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addDocuments(Collection<Document>)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addDocuments(Collection<Document>,Analyzer)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addIndexes(Directory...)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.addIndexes(IndexReader...)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteAll()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteDocuments(Query)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteDocuments(Query...)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteDocuments(Term)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.deleteDocuments(Term...)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.getAndIncrementGeneration()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.getGeneration()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.getIndexWriter()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.updateDocument(Term,Document)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.updateDocument(Term,Document,Analyzer)",2,0,n/a,5,0,3,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.updateDocuments(Term,Collection<Document>)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.search.NRTManager.TrackingIndexWriter.updateDocuments(Term,Collection<Document>,Analyzer)",2,0,n/a,5,0,3,2,1
"org.apache.lucene.search.NRTManager.WaitingListener.waiting(long)",n/a,1,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.NRTManager.addWaitingListener(WaitingListener)",1,3,n/a,6,0,1,1,1
"org.apache.lucene.search.NRTManager.afterClose()",3,1,n/a,11,1,0,5,1
"org.apache.lucene.search.NRTManager.afterRefresh()",3,1,n/a,15,2,0,7,2
"org.apache.lucene.search.NRTManager.decRef(IndexSearcher)",2,1,n/a,4,0,1,1,1
"org.apache.lucene.search.NRTManager.getCurrentSearchingGen()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.NRTManager.isSearcherCurrent()",4,0,n/a,13,1,0,4,1
"org.apache.lucene.search.NRTManager.refreshIfNeeded(IndexSearcher)",5,1,n/a,14,2,1,8,3
"org.apache.lucene.search.NRTManager.removeWaitingListener(WaitingListener)",1,1,n/a,5,0,1,1,1
"org.apache.lucene.search.NRTManager.tryIncRef(IndexSearcher)",2,1,n/a,4,0,1,1,1
"org.apache.lucene.search.NRTManager.waitForGeneration(long)",1,0,n/a,13,0,1,1,1
"org.apache.lucene.search.NRTManager.waitForGeneration(long,long,TimeUnit)",7,1,n/a,43,5,3,14,7
"org.apache.lucene.search.NRTManager.waitOnGenCondition(long,TimeUnit)",3,1,n/a,10,1,2,5,2
"org.apache.lucene.search.NRTManagerReopenThread.NRTManagerReopenThread(NRTManager,double,double)",2,0,n/a,22,1,3,6,2
"org.apache.lucene.search.NRTManagerReopenThread.close()",4,0,n/a,11,1,0,6,2
"org.apache.lucene.search.NRTManagerReopenThread.run()",10,0,n/a,55,6,0,23,9
"org.apache.lucene.search.NRTManagerReopenThread.waiting(long)",2,1,n/a,5,0,1,2,1
"org.apache.lucene.search.NumericRangeFilter.NumericRangeFilter(NumericRangeQuery<T>)",1,8,n/a,3,0,1,1,1
"org.apache.lucene.search.NumericRangeFilter.getField()",1,8,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeFilter.getMax()",1,8,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeFilter.getMin()",1,8,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeFilter.getPrecisionStep()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeFilter.includesMax()",1,8,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeFilter.includesMin()",1,8,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeFilter.newDoubleRange(String,Double,Double,boolean,boolean)",2,0,n/a,16,0,5,1,1
"org.apache.lucene.search.NumericRangeFilter.newDoubleRange(String,int,Double,Double,boolean,boolean)",2,1,n/a,16,0,6,1,1
"org.apache.lucene.search.NumericRangeFilter.newFloatRange(String,Float,Float,boolean,boolean)",2,0,n/a,16,0,5,1,1
"org.apache.lucene.search.NumericRangeFilter.newFloatRange(String,int,Float,Float,boolean,boolean)",2,1,n/a,16,0,6,1,1
"org.apache.lucene.search.NumericRangeFilter.newIntRange(String,Integer,Integer,boolean,boolean)",2,0,n/a,14,0,5,1,1
"org.apache.lucene.search.NumericRangeFilter.newIntRange(String,int,Integer,Integer,boolean,boolean)",2,1,n/a,14,0,6,1,1
"org.apache.lucene.search.NumericRangeFilter.newLongRange(String,Long,Long,boolean,boolean)",2,0,n/a,14,0,5,1,1
"org.apache.lucene.search.NumericRangeFilter.newLongRange(String,int,Long,Long,boolean,boolean)",2,1,n/a,14,0,6,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeQuery(String,int,DataType,T,T,boolean,boolean)",7,8,n/a,40,1,7,22,9
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.NumericRangeTermEnum(IndexReader)",22,1,n/a,5,4,1,53,28
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.close()",2,42,n/a,7,0,0,3,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.difference()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.endEnum()",1,1,n/a,5,0,0,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.next()",13,57,n/a,37,2,0,21,9
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.setEnum(TermEnum)",1,8,n/a,5,0,1,1,1
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum.termCompare(Term)",3,4,n/a,10,0,1,1,2
"org.apache.lucene.search.NumericRangeQuery.equals(Object)",3,36,n/a,19,1,1,8,11
"org.apache.lucene.search.NumericRangeQuery.getEnum(IndexReader)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.search.NumericRangeQuery.getField()",0,10,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeQuery.getMax()",0,10,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeQuery.getMin()",0,10,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeQuery.getPrecisionStep()",0,3,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeQuery.hashCode()",8,31,n/a,10,0,0,7,3
"org.apache.lucene.search.NumericRangeQuery.includesMax()",0,10,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeQuery.includesMin()",0,10,n/a,2,0,0,1,1
"org.apache.lucene.search.NumericRangeQuery.newDoubleRange(String,Double,Double,boolean,boolean)",1,1,n/a,14,0,5,1,1
"org.apache.lucene.search.NumericRangeQuery.newDoubleRange(String,int,Double,Double,boolean,boolean)",1,4,n/a,14,0,6,1,1
"org.apache.lucene.search.NumericRangeQuery.newFloatRange(String,Float,Float,boolean,boolean)",1,1,n/a,14,0,5,1,1
"org.apache.lucene.search.NumericRangeQuery.newFloatRange(String,int,Float,Float,boolean,boolean)",1,4,n/a,14,0,6,1,1
"org.apache.lucene.search.NumericRangeQuery.newIntRange(String,Integer,Integer,boolean,boolean)",1,6,n/a,12,0,5,1,1
"org.apache.lucene.search.NumericRangeQuery.newIntRange(String,int,Integer,Integer,boolean,boolean)",1,4,n/a,12,0,6,1,1
"org.apache.lucene.search.NumericRangeQuery.newLongRange(String,Long,Long,boolean,boolean)",1,1,n/a,12,0,5,1,1
"org.apache.lucene.search.NumericRangeQuery.newLongRange(String,int,Long,Long,boolean,boolean)",1,6,n/a,12,0,6,1,1
"org.apache.lucene.search.NumericRangeQuery.readObject(ObjectInputStream)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.search.NumericRangeQuery.toString(String)",15,47,n/a,12,0,1,4,6
"org.apache.lucene.search.ParallelMultiSearcher.DocumentFrequencyCallable.DocumentFrequencyCallable(Searchable,Term[])",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.ParallelMultiSearcher.DocumentFrequencyCallable.call()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.ExecutionHelper(Executor)",1,4,n/a,3,0,1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.iterator()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.next()",6,0,n/a,13,1,0,7,4
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper.submit(Callable<T>)",1,4,n/a,4,0,1,2,1
"org.apache.lucene.search.ParallelMultiSearcher.ParallelMultiSearcher(ExecutorService,Searchable...)",2,0,n/a,9,0,2,4,1
"org.apache.lucene.search.ParallelMultiSearcher.ParallelMultiSearcher(Searchable...)",4,0,n/a,5,0,1,1,1
"org.apache.lucene.search.ParallelMultiSearcher.close()",2,6,n/a,5,0,0,2,1
"org.apache.lucene.search.ParallelMultiSearcher.createDocFrequencyMap(Set<Term>)",9,1,n/a,21,2,1,17,5
"org.apache.lucene.search.ParallelMultiSearcher.docFreq(Term)",6,8,n/a,3,3,1,11,3
"org.apache.lucene.search.ParallelMultiSearcher.search(Weight,Filter,Collector)",6,5,n/a,4,3,3,10,2
"org.apache.lucene.search.ParallelMultiSearcher.search(Weight,Filter,int)",11,3,n/a,25,1,3,18,4
"org.apache.lucene.search.ParallelMultiSearcher.search(Weight,Filter,int,Sort)",13,5,n/a,26,1,4,20,5
"org.apache.lucene.search.PhrasePositions.PhrasePositions(TermPositions,int,int,Term[])",0,2,n/a,6,0,4,4,1
"org.apache.lucene.search.PhrasePositions.firstPosition()",2,2,n/a,4,0,0,2,1
"org.apache.lucene.search.PhrasePositions.next()",3,0,n/a,10,1,0,7,2
"org.apache.lucene.search.PhrasePositions.nextPosition()",1,3,n/a,13,1,0,4,2
"org.apache.lucene.search.PhrasePositions.skipTo(int)",3,1,n/a,10,1,1,7,2
"org.apache.lucene.search.PhrasePositions.toString()",0,0,n/a,9,1,0,4,2
"org.apache.lucene.search.PhraseQuery.PhraseQuery()",0,21,n/a,2,0,0,0,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.PhraseWeight(Searcher)",3,1,n/a,6,0,1,3,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.explain(IndexReader,int)",58,8,n/a,68,2,2,51,7
"org.apache.lucene.search.PhraseQuery.PhraseWeight.getQuery()",0,5,n/a,2,0,0,1,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.getValue()",0,9,n/a,2,0,0,1,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.normalize(float)",0,12,n/a,6,0,1,3,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.scorer(IndexReader,boolean,boolean)",14,19,n/a,30,2,3,19,7
"org.apache.lucene.search.PhraseQuery.PhraseWeight.sumOfSquaredWeights()",1,12,n/a,5,0,0,2,1
"org.apache.lucene.search.PhraseQuery.PhraseWeight.toString()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq.PostingsAndFreq(TermPositions,int,int,Term...)",2,0,n/a,18,2,4,12,4
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq.compareTo(PostingsAndFreq)",1,0,n/a,19,1,1,15,7
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq.equals(Object)",3,0,n/a,11,0,1,14,7
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq.hashCode()",1,0,n/a,11,1,0,9,2
"org.apache.lucene.search.PhraseQuery.add(Term)",5,31,n/a,10,0,1,4,2
"org.apache.lucene.search.PhraseQuery.add(Term,int)",7,7,n/a,18,0,2,8,4
"org.apache.lucene.search.PhraseQuery.createWeight(Searcher)",7,16,n/a,10,1,1,6,2
"org.apache.lucene.search.PhraseQuery.equals(Object)",4,29,n/a,11,0,1,4,5
"org.apache.lucene.search.PhraseQuery.extractTerms(Set<Term>)",1,24,n/a,7,0,1,1,1
"org.apache.lucene.search.PhraseQuery.getPositions()",4,5,n/a,9,0,0,6,2
"org.apache.lucene.search.PhraseQuery.getSlop()",0,10,n/a,2,0,0,1,1
"org.apache.lucene.search.PhraseQuery.getTerms()",1,18,n/a,4,0,0,1,1
"org.apache.lucene.search.PhraseQuery.hashCode()",4,23,n/a,8,0,0,1,1
"org.apache.lucene.search.PhraseQuery.rewrite(IndexReader)",6,33,n/a,9,1,1,5,2
"org.apache.lucene.search.PhraseQuery.setSlop(int)",0,17,n/a,12,0,1,1,1
"org.apache.lucene.search.PhraseQuery.toString(String)",22,47,n/a,39,2,1,30,9
"org.apache.lucene.search.PhraseQueue.PhraseQueue(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.PhraseQueue.lessThan(PhrasePositions,PhrasePositions)",0,6,n/a,18,1,2,7,4
"org.apache.lucene.search.PhraseScorer.PhraseScorer(Weight,PostingsAndFreq[],Similarity,byte[])",4,1,n/a,23,2,4,15,3
"org.apache.lucene.search.PhraseScorer.advance(int)",3,55,n/a,21,3,1,12,6
"org.apache.lucene.search.PhraseScorer.advanceMin(int)",1,2,n/a,9,1,1,6,2
"org.apache.lucene.search.PhraseScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.PhraseScorer.freq()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.search.PhraseScorer.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.PhraseScorer.phraseFreq()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.PhraseScorer.score()",4,63,n/a,6,0,0,2,2
"org.apache.lucene.search.PhraseScorer.toString()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.PositiveScoresOnlyCollector.PositiveScoresOnlyCollector(Collector)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.PositiveScoresOnlyCollector.acceptsDocsOutOfOrder()",1,15,n/a,4,0,0,1,1
"org.apache.lucene.search.PositiveScoresOnlyCollector.collect(int)",2,50,n/a,6,1,1,2,2
"org.apache.lucene.search.PositiveScoresOnlyCollector.setNextReader(IndexReader,int)",1,19,n/a,4,0,2,1,1
"org.apache.lucene.search.PositiveScoresOnlyCollector.setScorer(Scorer)",2,27,n/a,7,0,1,2,1
"org.apache.lucene.search.PrefixFilter.PrefixFilter(Term)",2,0,n/a,3,0,1,1,1
"org.apache.lucene.search.PrefixFilter.getPrefix()",1,1,n/a,1,0,0,1,1
"org.apache.lucene.search.PrefixFilter.toString()",7,0,n/a,9,0,0,5,1
"org.apache.lucene.search.PrefixQuery.PrefixQuery(Term)",0,5,n/a,4,0,1,1,1
"org.apache.lucene.search.PrefixQuery.equals(Object)",4,36,n/a,16,1,1,13,7
"org.apache.lucene.search.PrefixQuery.getEnum(IndexReader)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.search.PrefixQuery.getPrefix()",0,3,n/a,2,0,0,1,1
"org.apache.lucene.search.PrefixQuery.hashCode()",2,31,n/a,7,0,0,4,2
"org.apache.lucene.search.PrefixQuery.toString(String)",13,47,n/a,13,1,1,8,2
"org.apache.lucene.search.PrefixTermEnum.PrefixTermEnum(IndexReader,Term)",5,2,n/a,4,0,2,2,1
"org.apache.lucene.search.PrefixTermEnum.difference()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.PrefixTermEnum.endEnum()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.PrefixTermEnum.getPrefixTerm()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.PrefixTermEnum.termCompare(Term)",5,2,n/a,8,1,1,4,3
"org.apache.lucene.search.Query.clone()",3,27,n/a,9,1,0,3,2
"org.apache.lucene.search.Query.combine(Query[])",12,3,n/a,43,3,1,27,9
"org.apache.lucene.search.Query.createWeight(Searcher)",1,16,n/a,9,0,1,1,1
"org.apache.lucene.search.Query.equals(Object)",4,28,n/a,13,0,1,10,5
"org.apache.lucene.search.Query.extractTerms(Set<Term>)",1,24,n/a,10,0,1,1,1
"org.apache.lucene.search.Query.getBoost()",0,224,n/a,5,0,0,1,1
"org.apache.lucene.search.Query.getSimilarity(Searcher)",1,16,n/a,10,0,1,1,1
"org.apache.lucene.search.Query.hashCode()",1,23,n/a,7,0,0,4,1
"org.apache.lucene.search.Query.mergeBooleanQueries(BooleanQuery...)",5,0,n/a,20,2,1,9,5
"org.apache.lucene.search.Query.rewrite(IndexReader)",0,30,n/a,7,0,1,1,1
"org.apache.lucene.search.Query.setBoost(float)",0,79,n/a,5,0,1,1,1
"org.apache.lucene.search.Query.toString()",1,124,n/a,5,0,0,1,1
"org.apache.lucene.search.Query.toString(String)",n/a,47,45,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Query.weight(Searcher)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.search.QueryTermVector.QueryTermVector(String,Analyzer)",12,0,n/a,27,4,2,16,6
"org.apache.lucene.search.QueryTermVector.QueryTermVector(String[])",1,0,n/a,7,0,1,1,1
"org.apache.lucene.search.QueryTermVector.getField()",0,9,n/a,1,0,0,1,1
"org.apache.lucene.search.QueryTermVector.getTermFrequencies()",0,12,n/a,3,0,0,1,1
"org.apache.lucene.search.QueryTermVector.getTerms()",0,17,n/a,3,0,0,1,1
"org.apache.lucene.search.QueryTermVector.indexOf(String)",1,3,n/a,4,0,1,2,2
"org.apache.lucene.search.QueryTermVector.indexesOf(String[],int,int)",1,0,n/a,7,1,3,6,2
"org.apache.lucene.search.QueryTermVector.processTerms(String[])",19,2,n/a,30,3,1,22,5
"org.apache.lucene.search.QueryTermVector.size()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.search.QueryTermVector.toString()",8,0,n/a,11,1,0,10,3
"org.apache.lucene.search.QueryWrapperFilter.QueryWrapperFilter(Query)",0,27,n/a,6,0,1,1,1
"org.apache.lucene.search.QueryWrapperFilter.equals(Object)",1,0,n/a,6,0,1,3,2
"org.apache.lucene.search.QueryWrapperFilter.getDocIdSet(IndexReader)",4,24,n/a,2,2,1,4,1
"org.apache.lucene.search.QueryWrapperFilter.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.QueryWrapperFilter.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.ReferenceManager.acquire()",2,10,n/a,15,2,0,5,3
"org.apache.lucene.search.ReferenceManager.afterClose()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.search.ReferenceManager.afterRefresh()",0,1,n/a,4,0,0,0,1
"org.apache.lucene.search.ReferenceManager.close()",2,2,n/a,15,1,0,3,2
"org.apache.lucene.search.ReferenceManager.decRef(G)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.ReferenceManager.ensureOpen()",1,2,n/a,5,1,0,2,2
"org.apache.lucene.search.ReferenceManager.maybeRefresh()",9,8,n/a,48,6,0,19,4
"org.apache.lucene.search.ReferenceManager.refreshIfNeeded(G)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.ReferenceManager.release(G)",1,10,n/a,9,0,1,2,1
"org.apache.lucene.search.ReferenceManager.swapReference(G)",2,2,n/a,6,0,1,4,1
"org.apache.lucene.search.ReferenceManager.tryIncRef(G)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.RemoteCachingWrapperFilter.RemoteCachingWrapperFilter(Filter)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.RemoteCachingWrapperFilter.getDocIdSet(IndexReader)",3,23,n/a,11,0,1,2,1
"org.apache.lucene.search.RemoteCachingWrapperFilterHelper.RemoteCachingWrapperFilterHelper(Filter,boolean)",1,4,n/a,4,0,2,2,1
"org.apache.lucene.search.RemoteCachingWrapperFilterHelper.getDocIdSet(IndexReader)",7,23,n/a,14,1,1,8,3
"org.apache.lucene.search.RemoteCachingWrapperFilterHelper.shouldHaveCache(boolean)",0,4,n/a,3,0,1,1,1
"org.apache.lucene.search.RemoteSearchable.RemoteSearchable(Searchable)",1,2,n/a,5,0,1,2,1
"org.apache.lucene.search.RemoteSearchable.close()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.search.RemoteSearchable.doc(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.search.RemoteSearchable.doc(int,FieldSelector)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.search.RemoteSearchable.docFreq(Term)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.search.RemoteSearchable.docFreqs(Term[])",1,3,n/a,3,0,1,1,1
"org.apache.lucene.search.RemoteSearchable.explain(Weight,int)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.search.RemoteSearchable.main(String[])",9,0,n/a,19,1,1,11,5
"org.apache.lucene.search.RemoteSearchable.maxDoc()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.search.RemoteSearchable.rewrite(Query)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.search.RemoteSearchable.search(Weight,Filter,Collector)",1,3,n/a,4,0,3,1,1
"org.apache.lucene.search.RemoteSearchable.search(Weight,Filter,int)",1,2,n/a,3,0,3,1,1
"org.apache.lucene.search.RemoteSearchable.search(Weight,Filter,int,Sort)",1,3,n/a,4,0,4,1,1
"org.apache.lucene.search.RemoteTestCase.lookupRemote()",1,7,n/a,3,0,0,1,1
"org.apache.lucene.search.RemoteTestCase.startServer(Searchable)",8,4,n/a,3,2,1,9,1
"org.apache.lucene.search.RemoteTestCase.stopServer()",1,0,n/a,9,1,0,2,4
"org.apache.lucene.search.ReqExclScorer.ReqExclScorer(Scorer,DocIdSetIterator)",1,1,n/a,9,0,2,3,1
"org.apache.lucene.search.ReqExclScorer.advance(int)",3,54,n/a,14,1,1,8,4
"org.apache.lucene.search.ReqExclScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.ReqExclScorer.nextDoc()",2,63,n/a,15,1,0,9,4
"org.apache.lucene.search.ReqExclScorer.score()",1,63,n/a,8,0,0,1,1
"org.apache.lucene.search.ReqExclScorer.toNonExcluded()",4,2,n/a,31,3,0,14,6
"org.apache.lucene.search.ReqOptSumScorer.ReqOptSumScorer(Scorer,Scorer)",1,1,n/a,12,0,2,3,1
"org.apache.lucene.search.ReqOptSumScorer.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.ReqOptSumScorer.docID()",1,45,n/a,4,0,0,1,1
"org.apache.lucene.search.ReqOptSumScorer.nextDoc()",1,63,n/a,4,0,0,1,1
"org.apache.lucene.search.ReqOptSumScorer.score()",5,63,n/a,19,1,0,9,5
"org.apache.lucene.search.ScoreCachingWrappingScorer.ScoreCachingWrappingScorer(Scorer)",2,3,n/a,5,0,1,2,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.docID()",1,45,n/a,4,0,0,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.getSimilarity()",1,21,n/a,4,0,0,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.score()",2,64,n/a,9,1,0,5,2
"org.apache.lucene.search.ScoreCachingWrappingScorer.score(Collector)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.search.ScoreCachingWrappingScorer.score(Collector,int,int)",1,4,n/a,4,0,3,1,1
"org.apache.lucene.search.ScoreDoc.ScoreDoc(int,float)",1,36,n/a,4,0,2,1,1
"org.apache.lucene.search.ScoreDoc.ScoreDoc(int,float,int)",0,2,n/a,6,0,3,3,1
"org.apache.lucene.search.ScoreDoc.toString()",0,2,n/a,5,0,0,1,1
"org.apache.lucene.search.Scorer.Scorer(Similarity)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.search.Scorer.Scorer(Similarity,Weight)",0,19,n/a,11,0,2,2,1
"org.apache.lucene.search.Scorer.Scorer(Weight)",1,16,n/a,7,0,1,1,1
"org.apache.lucene.search.Scorer.ScorerVisitor.visitOptional(P,C,S)",0,1,n/a,8,0,3,0,1
"org.apache.lucene.search.Scorer.ScorerVisitor.visitProhibited(P,C,S)",0,1,n/a,8,0,3,0,1
"org.apache.lucene.search.Scorer.ScorerVisitor.visitRequired(P,C,S)",0,1,n/a,8,0,3,0,1
"org.apache.lucene.search.Scorer.freq()",1,2,n/a,9,0,0,1,1
"org.apache.lucene.search.Scorer.getSimilarity()",0,21,n/a,7,0,0,1,1
"org.apache.lucene.search.Scorer.score()",n/a,63,34,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Scorer.score(Collector)",3,5,n/a,10,1,1,4,2
"org.apache.lucene.search.Scorer.score(Collector,int,int)",3,4,n/a,29,1,3,6,2
"org.apache.lucene.search.Scorer.visitScorers(ScorerVisitor<Query, Query, Scorer>)",1,3,n/a,11,0,1,1,1
"org.apache.lucene.search.Scorer.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",5,9,n/a,29,1,3,13,5
"org.apache.lucene.search.ScoringRewrite.rewrite(IndexReader,MultiTermQuery)",6,4,n/a,5,2,2,8,1
"org.apache.lucene.search.Searchable.close()",n/a,4,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Searchable.doc(int)",n/a,2,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Searchable.doc(int,FieldSelector)",n/a,2,5,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Searchable.docFreq(Term)",n/a,3,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Searchable.docFreqs(Term[])",n/a,3,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Searchable.explain(Weight,int)",n/a,2,4,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Searchable.maxDoc()",n/a,2,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Searchable.rewrite(Query)",n/a,2,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Searchable.search(Weight,Filter,Collector)",n/a,3,5,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.Searchable.search(Weight,Filter,int)",n/a,2,5,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.Searchable.search(Weight,Filter,int,Sort)",n/a,3,5,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.Searcher.close()",n/a,5,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Searcher.createNormalizedWeight(Query)",8,12,n/a,18,0,1,8,3
"org.apache.lucene.search.Searcher.createWeight(Query)",1,0,n/a,12,0,1,1,1
"org.apache.lucene.search.Searcher.doc(int)",n/a,12,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Searcher.doc(int,FieldSelector)",n/a,4,4,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Searcher.docFreq(Term)",n/a,8,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Searcher.docFreqs(Term[])",1,3,n/a,8,1,1,6,2
"org.apache.lucene.search.Searcher.explain(Query,int)",2,2,n/a,11,0,2,1,1
"org.apache.lucene.search.Searcher.explain(Weight,int)",n/a,3,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Searcher.getSimilarity()",0,6,n/a,7,0,0,1,1
"org.apache.lucene.search.Searcher.maxDoc()",n/a,8,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Searcher.rewrite(Query)",n/a,3,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Searcher.search(Query,Collector)",2,2,n/a,17,0,2,1,1
"org.apache.lucene.search.Searcher.search(Query,Filter,Collector)",2,0,n/a,20,0,3,1,1
"org.apache.lucene.search.Searcher.search(Query,Filter,int)",2,17,n/a,9,0,3,1,1
"org.apache.lucene.search.Searcher.search(Query,Filter,int,Sort)",2,29,n/a,15,0,4,1,1
"org.apache.lucene.search.Searcher.search(Query,int)",1,12,n/a,9,0,2,1,1
"org.apache.lucene.search.Searcher.search(Query,int,Sort)",2,0,n/a,12,0,3,1,1
"org.apache.lucene.search.Searcher.search(Weight,Filter,Collector)",n/a,5,4,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.Searcher.search(Weight,Filter,int)",n/a,3,4,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.Searcher.search(Weight,Filter,int,Sort)",n/a,5,4,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.Searcher.setSimilarity(Similarity)",0,5,n/a,7,0,1,1,1
"org.apache.lucene.search.SearcherFactory.newSearcher(IndexReader)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.search.SearcherLifetimeManager.PruneByAge.PruneByAge(double)",1,0,n/a,6,1,1,3,2
"org.apache.lucene.search.SearcherLifetimeManager.PruneByAge.doPrune(double,IndexSearcher)",0,1,n/a,3,0,2,1,1
"org.apache.lucene.search.SearcherLifetimeManager.Pruner.doPrune(double,IndexSearcher)",n/a,1,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.SearcherLifetimeManager.SearcherTracker.SearcherTracker(IndexSearcher)",5,1,n/a,8,0,1,4,1
"org.apache.lucene.search.SearcherLifetimeManager.SearcherTracker.close()",2,2,n/a,3,0,0,1,1
"org.apache.lucene.search.SearcherLifetimeManager.SearcherTracker.compareTo(SearcherTracker)",0,0,n/a,13,1,1,5,3
"org.apache.lucene.search.SearcherLifetimeManager.acquire(long)",4,2,n/a,21,1,1,5,3
"org.apache.lucene.search.SearcherLifetimeManager.close()",6,0,n/a,23,1,0,7,3
"org.apache.lucene.search.SearcherLifetimeManager.ensureOpen()",1,2,n/a,5,1,0,2,2
"org.apache.lucene.search.SearcherLifetimeManager.prune(Pruner)",8,1,n/a,38,2,1,15,5
"org.apache.lucene.search.SearcherLifetimeManager.record(IndexSearcher)",8,1,n/a,33,2,1,10,4
"org.apache.lucene.search.SearcherLifetimeManager.release(IndexSearcher)",2,2,n/a,7,0,1,1,1
"org.apache.lucene.search.SearcherManager.SearcherManager(Directory,SearcherFactory)",3,0,n/a,16,1,2,4,2
"org.apache.lucene.search.SearcherManager.SearcherManager(IndexWriter,boolean,SearcherFactory)",3,0,n/a,23,1,3,4,2
"org.apache.lucene.search.SearcherManager.decRef(IndexSearcher)",2,1,n/a,4,0,1,1,1
"org.apache.lucene.search.SearcherManager.getSearcher(SearcherFactory,IndexReader)",5,5,n/a,17,2,2,10,3
"org.apache.lucene.search.SearcherManager.isSearcherCurrent()",4,0,n/a,13,1,0,4,1
"org.apache.lucene.search.SearcherManager.maybeReopen()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.search.SearcherManager.refreshIfNeeded(IndexSearcher)",3,1,n/a,9,1,1,4,2
"org.apache.lucene.search.SearcherManager.tryIncRef(IndexSearcher)",2,1,n/a,4,0,1,1,1
"org.apache.lucene.search.Similarity.computeNorm(String,FieldInvertState)",n/a,25,6,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Similarity.coord(int,int)",n/a,13,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Similarity.decodeNorm(byte)",0,0,n/a,9,0,1,1,1
"org.apache.lucene.search.Similarity.decodeNormValue(byte)",0,15,n/a,11,0,1,1,1
"org.apache.lucene.search.Similarity.encodeNorm(float)",1,1,n/a,12,0,1,1,1
"org.apache.lucene.search.Similarity.encodeNormValue(float)",1,23,n/a,21,0,1,1,1
"org.apache.lucene.search.Similarity.getDefault()",0,15,n/a,11,0,0,1,1
"org.apache.lucene.search.Similarity.getNormDecoder()",0,0,n/a,10,0,0,1,1
"org.apache.lucene.search.Similarity.idf(int,int)",n/a,7,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Similarity.idfExplain(Collection<Term>,Searcher)",11,0,n/a,4,2,2,14,2
"org.apache.lucene.search.Similarity.idfExplain(Term,Searcher)",2,2,n/a,13,0,2,1,1
"org.apache.lucene.search.Similarity.idfExplain(Term,Searcher,int)",4,4,n/a,4,2,3,8,2
"org.apache.lucene.search.Similarity.lengthNorm(String,int)",1,6,n/a,29,0,2,1,1
"org.apache.lucene.search.Similarity.queryNorm(float)",n/a,3,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Similarity.scorePayload(int,String,int,int,byte[],int,int)",0,6,n/a,21,0,7,1,1
"org.apache.lucene.search.Similarity.setDefault(Similarity)",0,7,n/a,9,0,1,1,1
"org.apache.lucene.search.Similarity.sloppyFreq(int)",n/a,6,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Similarity.tf(float)",n/a,11,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Similarity.tf(int)",1,23,n/a,18,0,1,1,1
"org.apache.lucene.search.SimilarityDelegator.SimilarityDelegator(Similarity)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.search.SimilarityDelegator.computeNorm(String,FieldInvertState)",1,25,n/a,4,0,2,1,1
"org.apache.lucene.search.SimilarityDelegator.coord(int,int)",1,13,n/a,4,0,2,1,1
"org.apache.lucene.search.SimilarityDelegator.idf(int,int)",1,7,n/a,4,0,2,1,1
"org.apache.lucene.search.SimilarityDelegator.queryNorm(float)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.search.SimilarityDelegator.scorePayload(int,String,int,int,byte[],int,int)",1,6,n/a,4,0,7,1,1
"org.apache.lucene.search.SimilarityDelegator.sloppyFreq(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.SimilarityDelegator.tf(float)",1,12,n/a,4,0,1,1,1
"org.apache.lucene.search.SingleTermEnum.SingleTermEnum(IndexReader,Term)",3,2,n/a,11,0,2,3,1
"org.apache.lucene.search.SingleTermEnum.difference()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.SingleTermEnum.endEnum()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.SingleTermEnum.termCompare(Term)",1,2,n/a,9,1,1,4,2
"org.apache.lucene.search.SloppyPhraseScorer.SloppyPhraseScorer(Weight,PostingsAndFreq[],Similarity,int,byte[])",2,2,n/a,7,0,5,4,2
"org.apache.lucene.search.SloppyPhraseScorer.advancePP(PhrasePositions)",1,3,n/a,10,1,1,5,3
"org.apache.lucene.search.SloppyPhraseScorer.advanceRepeatGroups()",4,2,n/a,42,5,0,25,10
"org.apache.lucene.search.SloppyPhraseScorer.advanceRpts(PhrasePositions)",10,1,n/a,36,2,1,23,9
"org.apache.lucene.search.SloppyPhraseScorer.collide(PhrasePositions)",2,2,n/a,12,2,1,9,4
"org.apache.lucene.search.SloppyPhraseScorer.fillQueue()",2,2,n/a,10,2,0,7,3
"org.apache.lucene.search.SloppyPhraseScorer.gatherRptGroups(LinkedHashMap<Term, Integer>)",25,1,n/a,57,4,1,44,15
"org.apache.lucene.search.SloppyPhraseScorer.initComplex()",3,1,n/a,10,1,0,5,2
"org.apache.lucene.search.SloppyPhraseScorer.initFirstTime()",7,1,n/a,31,2,0,12,3
"org.apache.lucene.search.SloppyPhraseScorer.initPhrasePositions()",3,1,n/a,26,1,0,7,3
"org.apache.lucene.search.SloppyPhraseScorer.initSimple()",3,1,n/a,13,2,0,8,3
"org.apache.lucene.search.SloppyPhraseScorer.lesser(PhrasePositions,PhrasePositions)",0,2,n/a,8,1,2,3,4
"org.apache.lucene.search.SloppyPhraseScorer.phraseFreq()",12,2,n/a,51,3,0,22,9
"org.apache.lucene.search.SloppyPhraseScorer.placeFirstPositions()",1,2,n/a,6,1,0,4,2
"org.apache.lucene.search.SloppyPhraseScorer.ppTermsBitSets(PhrasePositions[],HashMap<Term, Integer>)",6,1,n/a,15,3,2,9,4
"org.apache.lucene.search.SloppyPhraseScorer.repeatingPPs(HashMap<Term, Integer>)",4,1,n/a,14,3,1,10,4
"org.apache.lucene.search.SloppyPhraseScorer.repeatingTerms()",9,1,n/a,16,3,0,12,5
"org.apache.lucene.search.SloppyPhraseScorer.sortRptGroups(ArrayList<ArrayList<PhrasePositions>>)",5,1,n/a,3,2,1,13,3
"org.apache.lucene.search.SloppyPhraseScorer.termGroups(LinkedHashMap<Term, Integer>,ArrayList<OpenBitSet>)",8,1,n/a,13,2,2,10,3
"org.apache.lucene.search.SloppyPhraseScorer.tpPos(PhrasePositions)",0,4,n/a,4,0,1,1,1
"org.apache.lucene.search.SloppyPhraseScorer.unionTermGroups(ArrayList<OpenBitSet>)",9,1,n/a,17,3,1,12,4
"org.apache.lucene.search.Sort.Sort()",1,4,n/a,8,0,0,1,1
"org.apache.lucene.search.Sort.Sort(SortField)",1,8,n/a,4,0,1,1,1
"org.apache.lucene.search.Sort.Sort(SortField...)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.search.Sort.equals(Object)",1,0,n/a,8,0,1,6,3
"org.apache.lucene.search.Sort.getSort()",0,58,n/a,7,0,0,1,1
"org.apache.lucene.search.Sort.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.search.Sort.setSort(SortField)",0,19,n/a,4,0,1,1,1
"org.apache.lucene.search.Sort.setSort(SortField...)",0,8,n/a,4,0,1,1,1
"org.apache.lucene.search.Sort.toString()",5,0,n/a,10,1,0,8,3
"org.apache.lucene.search.SortField.SortField(String,FieldComparatorSource)",1,1,n/a,8,0,2,2,1
"org.apache.lucene.search.SortField.SortField(String,FieldComparatorSource,boolean)",1,7,n/a,10,0,3,3,1
"org.apache.lucene.search.SortField.SortField(String,Locale)",1,0,n/a,9,0,2,2,1
"org.apache.lucene.search.SortField.SortField(String,Locale,boolean)",1,1,n/a,10,0,3,3,1
"org.apache.lucene.search.SortField.SortField(String,Parser)",1,1,n/a,13,0,2,1,1
"org.apache.lucene.search.SortField.SortField(String,Parser,boolean)",7,5,n/a,23,0,3,15,7
"org.apache.lucene.search.SortField.SortField(String,int)",1,26,n/a,9,0,2,1,1
"org.apache.lucene.search.SortField.SortField(String,int,boolean)",1,22,n/a,11,0,3,2,1
"org.apache.lucene.search.SortField.equals(Object)",3,1,n/a,18,0,1,6,11
"org.apache.lucene.search.SortField.getComparator(int,int)",13,9,n/a,47,1,2,28,14
"org.apache.lucene.search.SortField.getComparatorSource()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.search.SortField.getField()",0,22,n/a,7,0,0,1,1
"org.apache.lucene.search.SortField.getLocale()",0,4,n/a,7,0,0,1,1
"org.apache.lucene.search.SortField.getParser()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.SortField.getReverse()",0,16,n/a,6,0,0,1,1
"org.apache.lucene.search.SortField.getType()",0,28,n/a,6,0,0,1,1
"org.apache.lucene.search.SortField.hashCode()",6,1,n/a,14,0,0,10,5
"org.apache.lucene.search.SortField.initFieldType(String,int)",2,12,n/a,11,1,2,5,4
"org.apache.lucene.search.SortField.readObject(ObjectInputStream)",2,0,n/a,6,0,1,3,2
"org.apache.lucene.search.SortField.setMissingValue(Object)",1,4,n/a,8,1,1,4,7
"org.apache.lucene.search.SortField.toString()",43,1,n/a,46,1,0,45,16
"org.apache.lucene.search.SpanFilter.bitSpans(IndexReader)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.SpanFilterResult.PositionInfo.PositionInfo(int)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.search.SpanFilterResult.PositionInfo.addPosition(int,int)",2,1,n/a,4,0,2,1,1
"org.apache.lucene.search.SpanFilterResult.PositionInfo.getDoc()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.SpanFilterResult.PositionInfo.getPositions()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.SpanFilterResult.SpanFilterResult(DocIdSet,List<PositionInfo>)",0,1,n/a,9,0,2,2,1
"org.apache.lucene.search.SpanFilterResult.StartEnd.StartEnd(int,int)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.SpanFilterResult.StartEnd.getEnd()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.SpanFilterResult.StartEnd.getStart()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.SpanFilterResult.getDocIdSet()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.SpanFilterResult.getPositions()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.search.SpanQueryFilter.SpanQueryFilter()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.search.SpanQueryFilter.SpanQueryFilter(SpanQuery)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.SpanQueryFilter.bitSpans(IndexReader)",13,2,n/a,21,2,1,14,3
"org.apache.lucene.search.SpanQueryFilter.equals(Object)",1,0,n/a,4,0,1,1,2
"org.apache.lucene.search.SpanQueryFilter.getDocIdSet(IndexReader)",2,23,n/a,5,0,1,2,1
"org.apache.lucene.search.SpanQueryFilter.getQuery()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.SpanQueryFilter.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.SpanQueryFilter.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.TermCollectingRewrite.TermCollector.collect(Term,float)",n/a,1,3,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.TermCollectingRewrite.addClause(Q,Term,float)",n/a,2,6,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.TermCollectingRewrite.collectTerms(IndexReader,MultiTermQuery,TermCollector)",6,3,n/a,12,2,3,7,4
"org.apache.lucene.search.TermCollectingRewrite.getTopLevelQuery()",n/a,2,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.TermQuery.TermQuery(Term)",0,178,n/a,4,0,1,1,1
"org.apache.lucene.search.TermQuery.TermWeight.TermWeight(Searcher)",11,1,n/a,8,4,1,14,3
"org.apache.lucene.search.TermQuery.TermWeight.explain(IndexReader,int)",56,8,n/a,62,3,2,44,7
"org.apache.lucene.search.TermQuery.TermWeight.getQuery()",0,5,n/a,2,0,0,1,1
"org.apache.lucene.search.TermQuery.TermWeight.getValue()",0,9,n/a,2,0,0,1,1
"org.apache.lucene.search.TermQuery.TermWeight.normalize(float)",0,12,n/a,6,0,1,3,1
"org.apache.lucene.search.TermQuery.TermWeight.scorer(IndexReader,boolean,boolean)",7,18,n/a,11,1,3,6,5
"org.apache.lucene.search.TermQuery.TermWeight.sumOfSquaredWeights()",1,12,n/a,5,0,0,2,1
"org.apache.lucene.search.TermQuery.TermWeight.toString()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.TermQuery.createWeight(Searcher)",1,16,n/a,4,0,1,1,1
"org.apache.lucene.search.TermQuery.equals(Object)",3,28,n/a,9,0,1,4,3
"org.apache.lucene.search.TermQuery.extractTerms(Set<Term>)",2,24,n/a,4,0,1,1,1
"org.apache.lucene.search.TermQuery.getTerm()",0,28,n/a,2,0,0,1,1
"org.apache.lucene.search.TermQuery.hashCode()",3,23,n/a,5,0,0,1,1
"org.apache.lucene.search.TermQuery.toString(String)",12,48,n/a,12,1,1,7,2
"org.apache.lucene.search.TermRangeFilter.Less(String,String)",1,0,n/a,7,0,2,1,1
"org.apache.lucene.search.TermRangeFilter.More(String,String)",1,0,n/a,7,0,2,1,1
"org.apache.lucene.search.TermRangeFilter.TermRangeFilter(String,String,String,boolean,boolean)",2,10,n/a,14,0,5,1,1
"org.apache.lucene.search.TermRangeFilter.TermRangeFilter(String,String,String,boolean,boolean,Collator)",2,0,n/a,22,0,6,1,1
"org.apache.lucene.search.TermRangeFilter.getCollator()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeFilter.getField()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeFilter.getLowerTerm()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeFilter.getUpperTerm()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeFilter.includesLower()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeFilter.includesUpper()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeQuery.TermRangeQuery(String,String,String,boolean,boolean)",1,9,n/a,25,0,5,1,1
"org.apache.lucene.search.TermRangeQuery.TermRangeQuery(String,String,String,boolean,boolean,Collator)",0,5,n/a,39,0,6,6,1
"org.apache.lucene.search.TermRangeQuery.equals(Object)",7,36,n/a,35,1,1,32,18
"org.apache.lucene.search.TermRangeQuery.getCollator()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeQuery.getEnum(IndexReader)",1,5,n/a,5,0,1,1,1
"org.apache.lucene.search.TermRangeQuery.getField()",0,5,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeQuery.getLowerTerm()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeQuery.getUpperTerm()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeQuery.hashCode()",5,31,n/a,12,0,0,9,7
"org.apache.lucene.search.TermRangeQuery.includesLower()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeQuery.includesUpper()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.TermRangeQuery.toString(String)",17,47,n/a,16,1,1,11,8
"org.apache.lucene.search.TermRangeTermEnum.TermRangeTermEnum(IndexReader,String,String,String,boolean,boolean,Collator)",4,1,n/a,47,1,7,13,4
"org.apache.lucene.search.TermRangeTermEnum.difference()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.TermRangeTermEnum.endEnum()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.TermRangeTermEnum.termCompare(Term)",14,2,n/a,48,5,1,22,20
"org.apache.lucene.search.TermScorer.TermScorer(Weight,TermDocs,Similarity,byte[])",4,1,n/a,21,0,4,8,2
"org.apache.lucene.search.TermScorer.advance(int)",3,54,n/a,30,2,1,14,4
"org.apache.lucene.search.TermScorer.docID()",0,45,n/a,2,0,0,1,1
"org.apache.lucene.search.TermScorer.freq()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.TermScorer.nextDoc()",2,63,n/a,23,2,0,10,3
"org.apache.lucene.search.TermScorer.score()",4,63,n/a,9,0,0,3,3
"org.apache.lucene.search.TermScorer.score(Collector)",2,5,n/a,4,0,1,1,1
"org.apache.lucene.search.TermScorer.score(Collector,int,int)",4,5,n/a,21,3,3,13,4
"org.apache.lucene.search.TermScorer.toString()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.TermsFilter.addTerm(Term)",1,13,n/a,8,0,1,1,1
"org.apache.lucene.search.TermsFilter.equals(Object)",3,0,n/a,11,0,1,6,6
"org.apache.lucene.search.TermsFilter.getDocIdSet(IndexReader)",11,28,n/a,26,3,1,11,3
"org.apache.lucene.search.TermsFilter.hashCode()",4,0,n/a,11,1,0,6,2
"org.apache.lucene.search.TermsFilterTest.testCachability()",22,0,n/a,16,0,0,13,1
"org.apache.lucene.search.TermsFilterTest.testMissingField()",29,0,n/a,30,1,0,27,2
"org.apache.lucene.search.TermsFilterTest.testMissingTerms()",31,0,n/a,28,1,0,27,2
"org.apache.lucene.search.TestBlockJoin.addSkillless(RandomIndexWriter)",4,3,n/a,5,1,1,2,3
"org.apache.lucene.search.TestBlockJoin.compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs)",10,1,n/a,18,1,4,15,2
"org.apache.lucene.search.TestBlockJoin.compareHits(IndexReader,IndexReader,TopDocs,TopGroups<Integer>)",16,1,n/a,36,4,4,25,6
"org.apache.lucene.search.TestBlockJoin.getParentDoc(IndexReader,Filter,int)",9,2,n/a,16,1,3,14,2
"org.apache.lucene.search.TestBlockJoin.getRandomFields(int)",3,2,n/a,17,2,1,14,4
"org.apache.lucene.search.TestBlockJoin.getRandomSort(String,int)",20,3,n/a,15,1,2,8,3
"org.apache.lucene.search.TestBlockJoin.makeJob(String,int)",6,10,n/a,7,0,2,4,1
"org.apache.lucene.search.TestBlockJoin.makeQualification(String,int)",6,1,n/a,7,0,2,4,1
"org.apache.lucene.search.TestBlockJoin.makeResume(String,String)",7,6,n/a,8,0,2,5,1
"org.apache.lucene.search.TestBlockJoin.randomChildTerm(String[])",2,3,n/a,3,0,1,1,1
"org.apache.lucene.search.TestBlockJoin.randomParentTerm(String[])",2,3,n/a,3,0,1,1,1
"org.apache.lucene.search.TestBlockJoin.skill(String)",3,1,n/a,3,0,1,1,1
"org.apache.lucene.search.TestBlockJoin.testAdvanceSingleParentNoChild()",44,0,n/a,38,1,0,31,2
"org.apache.lucene.search.TestBlockJoin.testAdvanceSingleParentSingleChild()",31,0,n/a,28,1,0,23,2
"org.apache.lucene.search.TestBlockJoin.testBoostBug()",17,0,n/a,16,0,0,14,1
"org.apache.lucene.search.TestBlockJoin.testMultiChildTypes()",72,0,n/a,68,1,0,52,2
"org.apache.lucene.search.TestBlockJoin.testRandom()",257,0,n/a,415,7,0,305,73
"org.apache.lucene.search.TestBlockJoin.testSimple()",79,0,n/a,69,0,0,50,1
"org.apache.lucene.search.TestBlockJoin.testSimpleFilter()",101,0,n/a,63,0,0,48,3
"org.apache.lucene.search.TestJoinUtil.RandomDoc.RandomDoc(String,int,String)",1,1,n/a,5,0,3,3,1
"org.apache.lucene.search.TestJoinUtil.createContext(int,RandomIndexWriter,RandomIndexWriter,boolean)",46,1,n/a,68,4,4,56,15
"org.apache.lucene.search.TestJoinUtil.createContext(int,RandomIndexWriter,boolean)",1,1,n/a,3,0,3,1,1
"org.apache.lucene.search.TestJoinUtil.createExpectedResult(String,boolean,IndexSearcher,IndexIterationContext)",10,1,n/a,29,3,4,20,7
"org.apache.lucene.search.TestJoinUtil.testRandom()",52,0,n/a,3,4,0,54,12
"org.apache.lucene.search.TestJoinUtil.testSimple()",81,0,n/a,68,0,0,53,1
"org.apache.lucene.search.TestRemoteCachingWrapperFilter.afterClass()",2,0,n/a,6,0,0,3,1
"org.apache.lucene.search.TestRemoteCachingWrapperFilter.beforeClass()",24,0,n/a,23,0,0,16,1
"org.apache.lucene.search.TestRemoteCachingWrapperFilter.search(Query,Filter,int,String)",13,7,n/a,10,0,4,8,1
"org.apache.lucene.search.TestRemoteCachingWrapperFilter.testTermRemoteFilter()",44,0,n/a,30,0,0,18,1
"org.apache.lucene.search.TestRemoteSearchable.afterClass()",2,0,n/a,6,0,0,3,1
"org.apache.lucene.search.TestRemoteSearchable.beforeClass()",14,0,n/a,15,0,0,10,1
"org.apache.lucene.search.TestRemoteSearchable.search(Query)",32,3,n/a,21,0,1,18,1
"org.apache.lucene.search.TestRemoteSearchable.testBooleanQuery()",5,0,n/a,6,0,0,3,1
"org.apache.lucene.search.TestRemoteSearchable.testConstantScoreQuery()",7,0,n/a,9,0,0,4,1
"org.apache.lucene.search.TestRemoteSearchable.testPhraseQuery()",6,0,n/a,7,0,0,4,1
"org.apache.lucene.search.TestRemoteSearchable.testQueryFilter()",16,0,n/a,15,0,0,6,1
"org.apache.lucene.search.TestRemoteSearchable.testTermQuery()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.MyFieldComparator(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.compare(int,int)",0,7,n/a,4,0,2,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.compareBottom(int)",0,20,n/a,4,0,1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.copy(int,int)",0,37,n/a,4,0,2,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.setNextReader(IndexReader,int)",3,9,n/a,3,2,2,2,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator.value(int)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.search.TestRemoteSort.MyFieldComparatorSource.newComparator(String,int,int,boolean)",1,1,n/a,4,0,4,1,1
"org.apache.lucene.search.TestRemoteSort.afterClass()",2,0,n/a,7,0,0,4,1
"org.apache.lucene.search.TestRemoteSort.assertMatches(Searcher,Query,Sort,String)",10,18,n/a,18,2,4,15,3
"org.apache.lucene.search.TestRemoteSort.assertSameValues(HashMap<?, ?>,HashMap<?, ?>)",15,24,n/a,17,2,2,11,3
"org.apache.lucene.search.TestRemoteSort.beforeClass()",41,0,n/a,31,1,0,35,12
"org.apache.lucene.search.TestRemoteSort.getRandomCharString(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.TestRemoteSort.getRandomCharString(int,int,int)",5,1,n/a,7,1,3,6,2
"org.apache.lucene.search.TestRemoteSort.getRandomNumber(int,int)",2,2,n/a,4,0,2,2,1
"org.apache.lucene.search.TestRemoteSort.getRandomNumberString(int,int,int)",4,0,n/a,7,1,3,6,2
"org.apache.lucene.search.TestRemoteSort.getScores(ScoreDoc[],Searcher)",6,27,n/a,12,1,2,10,2
"org.apache.lucene.search.TestRemoteSort.runMultiSorts(Searcher,boolean)",61,1,n/a,50,0,2,44,5
"org.apache.lucene.search.TestRemoteSort.setUp()",10,0,n/a,10,0,0,6,1
"org.apache.lucene.search.TestRemoteSort.testNormalizedScores()",97,0,n/a,44,0,0,36,1
"org.apache.lucene.search.TestRemoteSort.testRemoteSort()",3,0,n/a,7,0,0,3,1
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException.TimeExceededException(long,long,int)",1,1,n/a,6,0,3,4,1
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException.getLastDocCollected()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException.getTimeAllowed()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException.getTimeElapsed()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimeLimitingCollector(Collector,Counter,long)",0,6,n/a,12,0,3,3,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.TimerThread(Counter)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.TimerThread(long,Counter)",2,1,n/a,6,0,2,4,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.getMilliseconds()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.getResolution()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.run()",3,0,n/a,12,2,0,5,3
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.setResolution(long)",1,1,n/a,17,0,1,1,1
"org.apache.lucene.search.TimeLimitingCollector.TimerThread.stopTimer()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.acceptsDocsOutOfOrder()",1,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.collect(int)",4,50,n/a,21,2,1,6,3
"org.apache.lucene.search.TimeLimitingCollector.getGlobalCounter()",0,6,n/a,14,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.getGlobalTimerThread()",0,0,n/a,15,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.isGreedy()",0,1,n/a,11,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.setBaseline()",2,2,n/a,7,0,0,1,1
"org.apache.lucene.search.TimeLimitingCollector.setBaseline(long)",0,2,n/a,23,0,1,2,1
"org.apache.lucene.search.TimeLimitingCollector.setCollector(Collector)",0,1,n/a,10,0,1,1,1
"org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean)",0,1,n/a,8,0,1,1,1
"org.apache.lucene.search.TimeLimitingCollector.setNextReader(IndexReader,int)",2,19,n/a,8,1,2,4,2
"org.apache.lucene.search.TimeLimitingCollector.setScorer(Scorer)",1,27,n/a,4,0,1,1,1
"org.apache.lucene.search.TopDocs.MergeSortQueue.MergeSortQueue(Sort,TopDocs[])",6,1,n/a,30,4,2,26,8
"org.apache.lucene.search.TopDocs.MergeSortQueue.lessThan(ShardRef,ShardRef)",1,6,n/a,31,2,2,16,5
"org.apache.lucene.search.TopDocs.ScoreMergeSortQueue.ScoreMergeSortQueue(TopDocs[])",1,1,n/a,7,1,1,6,2
"org.apache.lucene.search.TopDocs.ScoreMergeSortQueue.lessThan(ShardRef,ShardRef)",0,6,n/a,23,2,2,13,5
"org.apache.lucene.search.TopDocs.ShardRef.ShardRef(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.TopDocs.ShardRef.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.TopDocs.TopDocs(int,ScoreDoc[])",1,3,n/a,4,0,2,1,1
"org.apache.lucene.search.TopDocs.TopDocs(int,ScoreDoc[],float)",0,12,n/a,5,0,3,3,1
"org.apache.lucene.search.TopDocs.getMaxScore()",0,17,n/a,7,0,0,1,1
"org.apache.lucene.search.TopDocs.merge(Sort,int,TopDocs[])",13,3,n/a,58,2,3,32,9
"org.apache.lucene.search.TopDocs.setMaxScore(float)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.search.TopDocsCollector.TopDocsCollector(PriorityQueue<T>)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.search.TopDocsCollector.getTotalHits()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.TopDocsCollector.newTopDocs(ScoreDoc[],int)",1,2,n/a,9,0,2,1,2
"org.apache.lucene.search.TopDocsCollector.populateResults(ScoreDoc[],int)",1,1,n/a,9,1,2,4,2
"org.apache.lucene.search.TopDocsCollector.topDocs()",2,10,n/a,7,0,0,1,1
"org.apache.lucene.search.TopDocsCollector.topDocs(int)",2,0,n/a,18,0,1,1,1
"org.apache.lucene.search.TopDocsCollector.topDocs(int,int)",7,8,n/a,39,1,2,11,5
"org.apache.lucene.search.TopDocsCollector.topDocsSize()",2,3,n/a,7,0,0,1,2
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.MultiComparatorNonScoringCollector(FieldValueHitQueue<Entry>,int,boolean)",3,4,n/a,6,0,3,3,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.collect(int)",7,50,n/a,43,3,1,32,11
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.setNextReader(IndexReader,int)",1,19,n/a,7,1,2,5,2
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.setScorer(Scorer)",1,29,n/a,7,1,1,4,2
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector.updateBottom(int)",1,2,n/a,5,0,1,2,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector.MultiComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,2,n/a,6,0,3,2,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector.collect(int)",8,50,n/a,47,3,1,35,12
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector.setScorer(Scorer)",1,29,n/a,5,0,1,2,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector.updateBottom(int,float)",1,2,n/a,5,0,2,3,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector.MultiComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,2,n/a,4,0,3,1,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector.collect(int)",9,50,n/a,47,3,1,34,11
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector.setScorer(Scorer)",1,30,n/a,5,0,1,2,1
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector.updateBottom(int,float)",1,2,n/a,5,0,2,3,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.OneComparatorNonScoringCollector(FieldValueHitQueue<Entry>,int,boolean)",3,4,n/a,6,0,3,3,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.collect(int)",7,50,n/a,25,2,1,12,4
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.setNextReader(IndexReader,int)",1,19,n/a,5,0,2,2,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.setScorer(Scorer)",1,28,n/a,4,0,1,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector.updateBottom(int)",1,2,n/a,5,0,1,2,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector.OneComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,2,n/a,6,0,3,2,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector.collect(int)",8,50,n/a,29,2,1,15,5
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector.setScorer(Scorer)",1,28,n/a,5,0,1,2,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector.updateBottom(int,float)",1,2,n/a,5,0,2,3,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector.OneComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,2,n/a,4,0,3,1,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector.collect(int)",9,50,n/a,29,2,1,14,4
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector.setScorer(Scorer)",1,28,n/a,5,0,1,2,1
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector.updateBottom(int,float)",1,2,n/a,5,0,2,3,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorNonScoringCollector.OutOfOrderMultiComparatorNonScoringCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,n/a,4,0,3,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorNonScoringCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorNonScoringCollector.collect(int)",7,50,n/a,45,4,1,34,12
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,n/a,4,0,3,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector.collect(int)",8,50,n/a,49,4,1,37,13
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,n/a,5,0,3,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector.collect(int)",9,50,n/a,49,4,1,36,12
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector.setScorer(Scorer)",1,30,n/a,5,0,1,2,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorNonScoringCollector.OutOfOrderOneComparatorNonScoringCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,n/a,4,0,3,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorNonScoringCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorNonScoringCollector.collect(int)",7,50,n/a,24,2,1,13,6
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringMaxScoreCollector.OutOfOrderOneComparatorScoringMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,n/a,4,0,3,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringMaxScoreCollector.collect(int)",8,50,n/a,28,2,1,16,7
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector(FieldValueHitQueue<Entry>,int,boolean)",1,1,n/a,5,0,3,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector.collect(int)",9,50,n/a,28,2,1,15,6
"org.apache.lucene.search.TopFieldCollector.TopFieldCollector(PriorityQueue<Entry>,int,boolean)",1,2,n/a,10,0,3,3,1
"org.apache.lucene.search.TopFieldCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopFieldCollector.add(int,int,float)",2,12,n/a,4,0,3,2,1
"org.apache.lucene.search.TopFieldCollector.create(Sort,int,boolean,boolean,boolean,boolean)",16,14,n/a,85,3,6,28,14
"org.apache.lucene.search.TopFieldCollector.newTopDocs(ScoreDoc[],int)",2,2,n/a,10,1,2,4,2
"org.apache.lucene.search.TopFieldCollector.populateResults(ScoreDoc[],int)",4,1,n/a,15,2,2,11,4
"org.apache.lucene.search.TopFieldDocs.TopFieldDocs(int,ScoreDoc[],SortField[],float)",1,5,n/a,10,0,4,2,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.InOrderPagingScoreDocCollector(ScoreDoc,int)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.collect(int)",3,50,n/a,22,1,1,12,5
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.newTopDocs(ScoreDoc[],int)",2,2,n/a,4,0,2,1,2
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.setNextReader(IndexReader,int)",1,21,n/a,5,0,2,2,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector.topDocsSize()",2,3,n/a,4,0,0,1,2
"org.apache.lucene.search.TopScoreDocCollector.InOrderTopScoreDocCollector.InOrderTopScoreDocCollector(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderTopScoreDocCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopScoreDocCollector.InOrderTopScoreDocCollector.collect(int)",3,50,n/a,17,1,1,9,2
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.OutOfOrderPagingScoreDocCollector(ScoreDoc,int)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.collect(int)",3,50,n/a,24,1,1,14,7
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.newTopDocs(ScoreDoc[],int)",2,2,n/a,4,0,2,1,2
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.setNextReader(IndexReader,int)",1,21,n/a,5,0,2,2,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector.topDocsSize()",2,3,n/a,4,0,0,1,2
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderTopScoreDocCollector.OutOfOrderTopScoreDocCollector(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderTopScoreDocCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderTopScoreDocCollector.collect(int)",3,50,n/a,19,1,1,11,4
"org.apache.lucene.search.TopScoreDocCollector.TopScoreDocCollector(int)",3,4,n/a,7,0,1,2,1
"org.apache.lucene.search.TopScoreDocCollector.create(int,ScoreDoc,boolean)",5,2,n/a,24,1,3,5,5
"org.apache.lucene.search.TopScoreDocCollector.create(int,boolean)",1,17,n/a,13,0,2,1,1
"org.apache.lucene.search.TopScoreDocCollector.newTopDocs(ScoreDoc[],int)",4,2,n/a,18,2,2,11,4
"org.apache.lucene.search.TopScoreDocCollector.setNextReader(IndexReader,int)",0,21,n/a,4,0,2,1,1
"org.apache.lucene.search.TopScoreDocCollector.setScorer(Scorer)",0,29,n/a,4,0,1,1,1
"org.apache.lucene.search.TopTermsRewrite.ScoreTerm.compareTo(ScoreTerm)",2,0,n/a,6,0,1,3,2
"org.apache.lucene.search.TopTermsRewrite.TopTermsRewrite(int)",0,3,n/a,10,0,1,1,1
"org.apache.lucene.search.TopTermsRewrite.equals(Object)",2,1,n/a,9,0,1,10,5
"org.apache.lucene.search.TopTermsRewrite.getMaxSize()",n/a,1,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.TopTermsRewrite.getSize()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.TopTermsRewrite.hashCode()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.TopTermsRewrite.rewrite(IndexReader,MultiTermQuery)",17,3,n/a,12,2,2,15,5
"org.apache.lucene.search.TotalHitCountCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.TotalHitCountCollector.collect(int)",0,50,n/a,4,0,1,1,1
"org.apache.lucene.search.TotalHitCountCollector.getTotalHits()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.TotalHitCountCollector.setNextReader(IndexReader,int)",0,19,n/a,3,0,2,0,1
"org.apache.lucene.search.TotalHitCountCollector.setScorer(Scorer)",0,27,n/a,3,0,1,0,1
"org.apache.lucene.search.Weight.explain(IndexReader,int)",n/a,8,18,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.Weight.getQuery()",n/a,3,17,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Weight.getValue()",n/a,9,17,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.Weight.normalize(float)",n/a,12,17,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.Weight.scorer(IndexReader,boolean,boolean)",n/a,18,19,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.Weight.scoresDocsOutOfOrder()",0,5,n/a,12,0,0,1,1
"org.apache.lucene.search.Weight.sumOfSquaredWeights()",n/a,12,17,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.WildcardQuery.WildcardQuery(Term)",6,7,n/a,9,0,1,4,4
"org.apache.lucene.search.WildcardQuery.equals(Object)",4,36,n/a,16,1,1,13,7
"org.apache.lucene.search.WildcardQuery.getEnum(IndexReader)",10,5,n/a,11,1,1,5,3
"org.apache.lucene.search.WildcardQuery.getTerm()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.search.WildcardQuery.hashCode()",2,31,n/a,7,0,0,4,2
"org.apache.lucene.search.WildcardQuery.toString(String)",12,47,n/a,12,1,1,7,2
"org.apache.lucene.search.WildcardTermEnum.WildcardTermEnum(IndexReader,Term)",14,2,n/a,25,1,2,15,4
"org.apache.lucene.search.WildcardTermEnum.difference()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.WildcardTermEnum.endEnum()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.WildcardTermEnum.termCompare(Term)",4,2,n/a,11,2,1,6,3
"org.apache.lucene.search.WildcardTermEnum.wildcardEquals(String,int,String,int)",12,2,n/a,85,5,4,34,18
"org.apache.lucene.search.function.ByteFieldSource.ByteFieldSource(String)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.search.function.ByteFieldSource.ByteFieldSource(String,ByteParser)",1,1,n/a,7,0,2,2,1
"org.apache.lucene.search.function.ByteFieldSource.cachedFieldSourceEquals(FieldCacheSource)",3,1,n/a,11,1,1,4,3
"org.apache.lucene.search.function.ByteFieldSource.cachedFieldSourceHashCode()",3,1,n/a,6,0,0,1,2
"org.apache.lucene.search.function.ByteFieldSource.description()",1,6,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ByteFieldSource.getCachedFieldValues(FieldCache,String,IndexReader)",4,1,n/a,5,2,3,6,1
"org.apache.lucene.search.function.CustomScoreProvider.CustomScoreProvider(IndexReader)",0,5,n/a,6,0,1,1,1
"org.apache.lucene.search.function.CustomScoreProvider.customExplain(int,Explanation,Explanation)",5,1,n/a,21,1,3,7,2
"org.apache.lucene.search.function.CustomScoreProvider.customExplain(int,Explanation,Explanation[])",6,1,n/a,29,1,3,16,5
"org.apache.lucene.search.function.CustomScoreProvider.customScore(int,float,float)",0,4,n/a,23,0,3,1,1
"org.apache.lucene.search.function.CustomScoreProvider.customScore(int,float,float[])",2,2,n/a,36,1,3,10,4
"org.apache.lucene.search.function.CustomScoreQuery.CustomScoreQuery(Query)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomScoreQuery(Query,ValueSourceQuery)",1,1,n/a,12,0,2,1,2
"org.apache.lucene.search.function.CustomScoreQuery.CustomScoreQuery(Query,ValueSourceQuery...)",1,2,n/a,14,0,2,4,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.CustomScorer(Similarity,IndexReader,CustomWeight,Scorer,Scorer[])",3,1,n/a,10,0,5,6,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.advance(int)",2,54,n/a,10,2,1,7,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.docID()",1,45,n/a,4,0,0,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.nextDoc()",2,62,n/a,10,2,0,7,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer.score()",4,63,n/a,8,1,0,5,2
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.CustomWeight(Searcher)",3,1,n/a,9,1,1,8,2
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.doExplain(IndexReader,int)",13,1,n/a,18,1,2,14,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.explain(IndexReader,int)",2,8,n/a,5,0,2,2,2
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.getQuery()",0,3,n/a,5,0,0,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.getValue()",1,12,n/a,5,0,0,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.normalize(float)",4,12,n/a,13,2,1,8,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.scorer(IndexReader,boolean,boolean)",3,18,n/a,17,1,3,9,3
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.scoresDocsOutOfOrder()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight.sumOfSquaredWeights()",5,12,n/a,14,2,0,9,3
"org.apache.lucene.search.function.CustomScoreQuery.clone()",3,29,n/a,11,1,0,8,2
"org.apache.lucene.search.function.CustomScoreQuery.createWeight(Searcher)",1,20,n/a,4,0,1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.equals(Object)",7,28,n/a,19,1,1,10,8
"org.apache.lucene.search.function.CustomScoreQuery.extractTerms(Set<Term>)",2,24,n/a,8,1,1,5,2
"org.apache.lucene.search.function.CustomScoreQuery.getCustomScoreProvider(IndexReader)",1,4,n/a,9,0,1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.hashCode()",6,23,n/a,6,0,0,1,2
"org.apache.lucene.search.function.CustomScoreQuery.isStrict()",0,1,n/a,12,0,0,1,1
"org.apache.lucene.search.function.CustomScoreQuery.name()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.search.function.CustomScoreQuery.rewrite(IndexReader)",4,30,n/a,18,2,1,14,6
"org.apache.lucene.search.function.CustomScoreQuery.setStrict(boolean)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.search.function.CustomScoreQuery.toString(String)",13,48,n/a,12,1,1,9,3
"org.apache.lucene.search.function.DocValues.compute()",5,3,n/a,22,2,0,15,7
"org.apache.lucene.search.function.DocValues.doubleVal(int)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.search.function.DocValues.explain(int)",3,1,n/a,6,0,1,1,1
"org.apache.lucene.search.function.DocValues.floatVal(int)",n/a,8,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.function.DocValues.getAverageValue()",1,0,n/a,14,0,0,2,1
"org.apache.lucene.search.function.DocValues.getInnerArray()",1,0,n/a,15,0,0,1,1
"org.apache.lucene.search.function.DocValues.getMaxValue()",1,0,n/a,14,0,0,2,1
"org.apache.lucene.search.function.DocValues.getMinValue()",1,0,n/a,14,0,0,2,1
"org.apache.lucene.search.function.DocValues.intVal(int)",1,1,n/a,8,0,1,1,1
"org.apache.lucene.search.function.DocValues.longVal(int)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.search.function.DocValues.strVal(int)",2,0,n/a,8,0,1,1,1
"org.apache.lucene.search.function.DocValues.toString(int)",n/a,1,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.function.FieldCacheSource.FieldCacheSource(String)",0,4,n/a,6,0,1,1,1
"org.apache.lucene.search.function.FieldCacheSource.cachedFieldSourceEquals(FieldCacheSource)",n/a,1,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.function.FieldCacheSource.cachedFieldSourceHashCode()",n/a,1,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.function.FieldCacheSource.description()",0,5,n/a,5,0,0,1,1
"org.apache.lucene.search.function.FieldCacheSource.equals(Object)",2,1,n/a,11,1,1,4,3
"org.apache.lucene.search.function.FieldCacheSource.getCachedFieldValues(FieldCache,String,IndexReader)",n/a,1,4,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.function.FieldCacheSource.getValues(IndexReader)",1,7,n/a,5,0,1,1,1
"org.apache.lucene.search.function.FieldCacheSource.hashCode()",2,1,n/a,7,0,0,1,1
"org.apache.lucene.search.function.FieldScoreQuery.FieldScoreQuery(String,Type)",2,4,n/a,11,0,2,1,1
"org.apache.lucene.search.function.FieldScoreQuery.Type.Type(String)",0,4,n/a,3,0,1,1,1
"org.apache.lucene.search.function.FieldScoreQuery.Type.toString()",2,0,n/a,5,0,0,1,1
"org.apache.lucene.search.function.FieldScoreQuery.getValueSource(String,Type)",5,1,n/a,16,1,2,9,5
"org.apache.lucene.search.function.FloatFieldSource.FloatFieldSource(String)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.search.function.FloatFieldSource.FloatFieldSource(String,FloatParser)",1,1,n/a,7,0,2,2,1
"org.apache.lucene.search.function.FloatFieldSource.cachedFieldSourceEquals(FieldCacheSource)",3,1,n/a,11,1,1,4,3
"org.apache.lucene.search.function.FloatFieldSource.cachedFieldSourceHashCode()",3,1,n/a,6,0,0,1,2
"org.apache.lucene.search.function.FloatFieldSource.description()",1,6,n/a,5,0,0,1,1
"org.apache.lucene.search.function.FloatFieldSource.getCachedFieldValues(FieldCache,String,IndexReader)",3,1,n/a,5,2,3,5,1
"org.apache.lucene.search.function.IntFieldSource.IntFieldSource(String)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.search.function.IntFieldSource.IntFieldSource(String,IntParser)",1,1,n/a,7,0,2,2,1
"org.apache.lucene.search.function.IntFieldSource.cachedFieldSourceEquals(FieldCacheSource)",3,1,n/a,11,1,1,4,3
"org.apache.lucene.search.function.IntFieldSource.cachedFieldSourceHashCode()",3,1,n/a,6,0,0,1,2
"org.apache.lucene.search.function.IntFieldSource.description()",1,6,n/a,5,0,0,1,1
"org.apache.lucene.search.function.IntFieldSource.getCachedFieldValues(FieldCache,String,IndexReader)",4,1,n/a,5,2,3,6,1
"org.apache.lucene.search.function.OrdFieldSource.OrdFieldSource(String)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.function.OrdFieldSource.description()",0,2,n/a,5,0,0,1,1
"org.apache.lucene.search.function.OrdFieldSource.equals(Object)",2,1,n/a,9,0,1,8,4
"org.apache.lucene.search.function.OrdFieldSource.getValues(IndexReader)",5,3,n/a,5,2,1,6,1
"org.apache.lucene.search.function.OrdFieldSource.hashCode()",1,1,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ReverseOrdFieldSource.ReverseOrdFieldSource(String)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.function.ReverseOrdFieldSource.description()",0,2,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ReverseOrdFieldSource.equals(Object)",2,1,n/a,9,0,1,8,4
"org.apache.lucene.search.function.ReverseOrdFieldSource.getValues(IndexReader)",6,3,n/a,5,2,1,9,1
"org.apache.lucene.search.function.ReverseOrdFieldSource.hashCode()",1,1,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ShortFieldSource.ShortFieldSource(String)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.search.function.ShortFieldSource.ShortFieldSource(String,ShortParser)",1,1,n/a,7,0,2,2,1
"org.apache.lucene.search.function.ShortFieldSource.cachedFieldSourceEquals(FieldCacheSource)",3,1,n/a,11,1,1,4,3
"org.apache.lucene.search.function.ShortFieldSource.cachedFieldSourceHashCode()",3,1,n/a,6,0,0,1,2
"org.apache.lucene.search.function.ShortFieldSource.description()",1,6,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ShortFieldSource.getCachedFieldValues(FieldCache,String,IndexReader)",4,1,n/a,5,2,3,6,1
"org.apache.lucene.search.function.ValueSource.description()",n/a,1,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.function.ValueSource.equals(Object)",n/a,1,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.function.ValueSource.getValues(IndexReader)",n/a,2,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.function.ValueSource.hashCode()",n/a,1,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.function.ValueSource.toString()",1,1,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceQuery(ValueSource)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.ValueSourceScorer(Similarity,IndexReader,ValueSourceWeight)",4,1,n/a,8,0,3,4,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.advance(int)",2,54,n/a,4,0,1,1,2
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.nextDoc()",2,62,n/a,4,0,0,1,2
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer.score()",2,63,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.ValueSourceWeight(Searcher)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.explain(IndexReader,int)",11,8,n/a,12,0,2,7,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.getQuery()",0,3,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.getValue()",0,10,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.normalize(float)",0,12,n/a,6,0,1,2,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.scorer(IndexReader,boolean,boolean)",1,18,n/a,4,0,3,1,1
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight.sumOfSquaredWeights()",1,12,n/a,6,0,0,2,1
"org.apache.lucene.search.function.ValueSourceQuery.createWeight(Searcher)",1,17,n/a,4,0,1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.equals(Object)",6,29,n/a,14,1,1,8,5
"org.apache.lucene.search.function.ValueSourceQuery.extractTerms(Set<Term>)",0,25,n/a,5,0,1,0,1
"org.apache.lucene.search.function.ValueSourceQuery.hashCode()",5,24,n/a,5,0,0,1,1
"org.apache.lucene.search.function.ValueSourceQuery.rewrite(IndexReader)",0,31,n/a,5,0,1,1,1
"org.apache.lucene.search.function.ValueSourceQuery.toString(String)",3,48,n/a,4,0,1,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.AbstractAllGroupHeadsCollector(int)",1,0,n/a,5,0,1,3,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.GroupHead.GroupHead(GROUP_VALUE_TYPE,int)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.GroupHead.compare(int,int)",n/a,1,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.GroupHead.updateDocHead(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.acceptsDocsOutOfOrder()",0,15,n/a,3,0,0,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.collect(int)",3,50,n/a,24,2,1,15,6
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.getCollectedGroupHeads()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.groupHeadsSize()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads()",2,0,n/a,12,1,0,6,2
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.retrieveGroupHeads(int)",3,2,n/a,12,1,1,5,2
"org.apache.lucene.search.grouping.AbstractAllGroupsCollector.acceptsDocsOutOfOrder()",0,15,n/a,3,0,0,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupsCollector.getGroupCount()",2,0,n/a,9,0,0,1,1
"org.apache.lucene.search.grouping.AbstractAllGroupsCollector.getGroups()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.grouping.AbstractAllGroupsCollector.setScorer(Scorer)",0,27,n/a,2,0,1,0,1
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.AbstractFirstPassGroupingCollector(Sort,int)",5,0,n/a,33,1,2,16,4
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.buildSortedSet()",8,2,n/a,11,4,0,15,5
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.collect(int)",32,50,n/a,128,3,1,73,22
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.copyDocGroupValue(GROUP_VALUE_TYPE,GROUP_VALUE_TYPE)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getDocGroupValue(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.getTopGroups(int,boolean)",8,0,n/a,41,3,2,22,8
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.setNextReader(IndexReader,int)",1,19,n/a,7,1,2,5,2
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector.setScorer(Scorer)",1,27,n/a,6,1,1,2,2
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.AbstractSecondPassGroupingCollector(Collection<SearchGroup<GROUP_VALUE_TYPE>>,Sort,Sort,int,boolean,boolean,boolean)",8,0,n/a,27,2,7,13,4
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.SearchGroupDocs.SearchGroupDocs(GROUP_VALUE_TYPE,TopDocsCollector<?>)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.collect(int)",2,50,n/a,9,1,1,5,2
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.getTopGroups(int)",8,0,n/a,17,1,1,7,3
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.retrieveGroup(int)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.setNextReader(IndexReader,int)",2,19,n/a,7,1,2,2,2
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.setScorer(Scorer)",2,27,n/a,6,1,1,2,2
"org.apache.lucene.search.grouping.BlockGroupingCollector.BlockGroupingCollector(Sort,int,boolean,Filter)",5,0,n/a,43,1,4,20,5
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.FakeScorer()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer.score()",0,63,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.GroupQueue.GroupQueue(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.GroupQueue.lessThan(OneGroup,OneGroup)",1,6,n/a,16,2,2,10,3
"org.apache.lucene.search.grouping.BlockGroupingCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector.collect(int)",13,50,n/a,94,4,1,51,19
"org.apache.lucene.search.grouping.BlockGroupingCollector.getTopGroups(Sort,int,int,int,boolean)",20,1,n/a,89,3,5,39,11
"org.apache.lucene.search.grouping.BlockGroupingCollector.processGroup()",8,3,n/a,65,4,0,42,8
"org.apache.lucene.search.grouping.BlockGroupingCollector.setNextReader(IndexReader,int)",4,19,n/a,15,1,2,11,3
"org.apache.lucene.search.grouping.BlockGroupingCollector.setScorer(Scorer)",1,27,n/a,7,1,1,3,2
"org.apache.lucene.search.grouping.GroupDocs.GroupDocs(float,int,ScoreDoc[],GROUP_VALUE_TYPE,Object[])",0,2,n/a,11,0,5,5,1
"org.apache.lucene.search.grouping.SearchGroup.GroupComparator.GroupComparator(Sort)",3,1,n/a,11,1,1,9,3
"org.apache.lucene.search.grouping.SearchGroup.GroupComparator.compare(MergedGroup<T>,MergedGroup<T>)",1,0,n/a,20,2,2,12,4
"org.apache.lucene.search.grouping.SearchGroup.GroupMerger.GroupMerger(Sort)",3,1,n/a,5,0,1,3,1
"org.apache.lucene.search.grouping.SearchGroup.GroupMerger.merge(List<Collection<SearchGroup<T>>>,int,int)",14,1,n/a,42,3,3,25,8
"org.apache.lucene.search.grouping.SearchGroup.GroupMerger.updateNextGroup(int,ShardIter<T>)",13,2,n/a,64,5,2,40,12
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup.MergedGroup(T)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup.equals(Object)",2,0,n/a,16,2,1,7,3
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup.hashCode()",1,0,n/a,8,1,0,3,2
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup.neverEquals(Object)",1,1,n/a,12,2,1,6,3
"org.apache.lucene.search.grouping.SearchGroup.ShardIter.ShardIter(Collection<SearchGroup<T>>,int)",2,1,n/a,5,0,2,3,1
"org.apache.lucene.search.grouping.SearchGroup.ShardIter.next()",3,1,n/a,8,1,0,5,2
"org.apache.lucene.search.grouping.SearchGroup.ShardIter.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.SearchGroup.equals(Object)",3,0,n/a,14,2,1,11,7
"org.apache.lucene.search.grouping.SearchGroup.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.search.grouping.SearchGroup.merge(List<Collection<SearchGroup<T>>>,int,int,Sort)",3,1,n/a,17,1,4,3,2
"org.apache.lucene.search.grouping.SearchGroup.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.SentinelIntSet.SentinelIntSet(int,int)",3,0,n/a,17,1,2,9,3
"org.apache.lucene.search.grouping.SentinelIntSet.clear()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.search.grouping.SentinelIntSet.exists(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.grouping.SentinelIntSet.find(int)",1,2,n/a,14,1,1,14,6
"org.apache.lucene.search.grouping.SentinelIntSet.getSlot(int)",1,2,n/a,12,1,1,9,5
"org.apache.lucene.search.grouping.SentinelIntSet.hash(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.search.grouping.SentinelIntSet.put(int)",3,0,n/a,14,2,1,9,3
"org.apache.lucene.search.grouping.SentinelIntSet.rehash()",2,1,n/a,13,1,0,14,4
"org.apache.lucene.search.grouping.SentinelIntSet.size()",0,0,n/a,1,0,0,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GeneralAllGroupHeadsCollector(String,Sort)",5,1,n/a,9,1,2,8,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead.GroupHead(String,Sort,int)",7,1,n/a,13,1,3,11,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead.compare(int,int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead.updateDocHead(int)",2,0,n/a,7,1,1,4,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.getCollectedGroupHeads()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",3,0,n/a,13,1,1,9,4
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.setNextReader(IndexReader,int)",3,0,n/a,10,2,2,8,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.setScorer(Scorer)",2,0,n/a,8,2,1,4,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.GroupHead.GroupHead(int,String)",1,1,n/a,9,1,2,8,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.GroupHead.compare(int,int)",1,0,n/a,18,3,2,11,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.GroupHead.updateDocHead(int)",0,0,n/a,7,1,1,6,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.OrdAllGroupHeadsCollector(String,Sort,int)",6,1,n/a,12,1,3,11,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.getCollectedGroupHeads()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",4,0,n/a,16,1,1,12,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.setNextReader(IndexReader,int)",7,0,n/a,21,3,2,18,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.setScorer(Scorer)",0,0,n/a,2,0,1,0,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.GroupHead.GroupHead(int,String)",3,1,n/a,14,2,2,11,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.GroupHead.compare(int,int)",3,0,n/a,28,4,2,18,8
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.GroupHead.updateDocHead(int)",2,0,n/a,11,2,1,8,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector(String,Sort,int)",6,1,n/a,12,1,3,11,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.getCollectedGroupHeads()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",4,0,n/a,16,1,1,12,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.setNextReader(IndexReader,int)",9,0,n/a,27,4,2,22,7
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.setScorer(Scorer)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.GroupHead.GroupHead(int,String)",2,1,n/a,8,1,2,7,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.GroupHead.compare(int,int)",1,0,n/a,9,1,2,6,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.GroupHead.updateDocHead(int)",1,0,n/a,7,1,1,6,2
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.ScoreAllGroupHeadsCollector(String,Sort,int)",6,1,n/a,11,1,3,10,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.getCollectedGroupHeads()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.retrieveGroupHeadAndAddIfNotExist(int)",4,0,n/a,16,1,1,12,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.setNextReader(IndexReader,int)",4,0,n/a,15,2,2,10,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.setScorer(Scorer)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.TermAllGroupHeadsCollector(String,int)",1,4,n/a,4,0,2,2,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.create(String,Sort)",1,1,n/a,14,0,2,1,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.create(String,Sort,int)",7,2,n/a,32,2,3,13,6
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.needGeneralImpl(SortField)",1,1,n/a,6,0,1,2,3
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.GroupDoc.GroupDoc(int,String,String,String,String,String)",0,1,n/a,8,0,6,6,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.arrayContains(int[],int[])",0,5,n/a,17,3,2,10,6
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[])",14,1,n/a,23,2,5,17,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.getComparator(Sort,boolean,int[])",16,1,n/a,29,5,3,22,11
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.getRandomSort(boolean)",26,1,n/a,24,3,1,15,9
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.openBitSetContains(int[],FixedBitSet,int)",6,5,n/a,17,2,3,11,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.testBasic()",130,0,n/a,86,0,0,70,1
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.testRandom()",107,0,n/a,178,5,0,140,28
"org.apache.lucene.search.grouping.TermAllGroupsCollector.TermAllGroupsCollector(String)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.search.grouping.TermAllGroupsCollector.TermAllGroupsCollector(String,int)",2,1,n/a,15,0,2,3,1
"org.apache.lucene.search.grouping.TermAllGroupsCollector.collect(int)",3,0,n/a,8,1,1,5,3
"org.apache.lucene.search.grouping.TermAllGroupsCollector.getGroups()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.grouping.TermAllGroupsCollector.setNextReader(IndexReader,int)",4,0,n/a,11,2,2,6,3
"org.apache.lucene.search.grouping.TermAllGroupsCollectorTest.testTotalGroupCount()",85,0,n/a,64,0,0,51,1
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector.TermFirstPassGroupingCollector(String,Sort,int)",1,1,n/a,20,0,3,2,1
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector.copyDocGroupValue(String,String)",0,0,n/a,4,0,2,1,1
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector.getDocGroupValue(int)",0,0,n/a,5,0,1,2,2
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector.setNextReader(IndexReader,int)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.search.grouping.TermSecondPassGroupingCollector.TermSecondPassGroupingCollector(String,Collection<SearchGroup<String>>,Sort,Sort,int,boolean,boolean,boolean)",3,0,n/a,9,0,8,4,1
"org.apache.lucene.search.grouping.TermSecondPassGroupingCollector.retrieveGroup(int)",1,0,n/a,8,1,1,4,2
"org.apache.lucene.search.grouping.TermSecondPassGroupingCollector.setNextReader(IndexReader,int)",6,0,n/a,14,2,2,7,4
"org.apache.lucene.search.grouping.TestGrouping.GroupDoc.GroupDoc(int,String,String,String,String)",0,1,n/a,7,0,5,5,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher.ShardSearcher(IndexReader)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher.search(Weight,Collector)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher.search(Weight,int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardState.ShardState(IndexSearcher)",5,2,n/a,17,1,1,15,4
"org.apache.lucene.search.grouping.TestGrouping.assertEquals(Collection<SearchGroup<String>>,Collection<SearchGroup<String>>,boolean)",14,2,n/a,15,2,3,11,3
"org.apache.lucene.search.grouping.TestGrouping.assertEquals(int[],TopGroups,TopGroups,boolean,boolean,boolean,boolean)",14,4,n/a,47,3,7,34,11
"org.apache.lucene.search.grouping.TestGrouping.fillFields(GroupDoc,Sort)",10,2,n/a,20,2,2,17,5
"org.apache.lucene.search.grouping.TestGrouping.getComparator(Sort)",13,2,n/a,28,5,1,20,9
"org.apache.lucene.search.grouping.TestGrouping.getDocBlockReader(Directory,GroupDoc[])",44,1,n/a,54,3,2,33,9
"org.apache.lucene.search.grouping.TestGrouping.getDocIDSortLocs(Sort)",4,2,n/a,10,2,1,8,3
"org.apache.lucene.search.grouping.TestGrouping.getRandomSort()",23,2,n/a,20,3,0,12,5
"org.apache.lucene.search.grouping.TestGrouping.groupToString(String)",0,2,n/a,7,1,1,3,2
"org.apache.lucene.search.grouping.TestGrouping.rebaseDocIDs(Sort,Sort,int,TopGroups<String>)",6,1,n/a,23,5,4,16,8
"org.apache.lucene.search.grouping.TestGrouping.searchShards(IndexSearcher,ShardState,Query,Sort,Sort,int,int,int,int,boolean,boolean)",24,2,n/a,51,4,11,34,11
"org.apache.lucene.search.grouping.TestGrouping.slowGrouping(GroupDoc[],String,boolean,boolean,boolean,boolean,Sort,Sort,int,int,int,int)",42,1,n/a,91,4,12,53,16
"org.apache.lucene.search.grouping.TestGrouping.testBasic()",97,0,n/a,88,0,0,72,1
"org.apache.lucene.search.grouping.TestGrouping.testRandom()",204,0,n/a,414,9,0,290,87
"org.apache.lucene.search.grouping.TestGrouping.verifyShards(int[],TopGroups<String>)",2,1,n/a,10,2,2,6,3
"org.apache.lucene.search.grouping.TopGroups.TopGroups(SortField[],SortField[],int,int,GroupDocs<GROUP_VALUE_TYPE>[])",0,5,n/a,8,0,5,6,1
"org.apache.lucene.search.grouping.TopGroups.TopGroups(TopGroups<GROUP_VALUE_TYPE>,Integer)",0,3,n/a,8,0,2,6,1
"org.apache.lucene.search.grouping.TopGroups.merge(TopGroups<T>[],Sort,Sort,int,int)",16,1,n/a,108,4,5,49,16
"org.apache.lucene.search.highlight.DefaultEncoder.DefaultEncoder()",0,1,n/a,3,0,0,0,1
"org.apache.lucene.search.highlight.DefaultEncoder.encodeText(String)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.Encoder.encodeText(String)",n/a,6,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.highlight.Formatter.highlightTerm(String,TokenGroup)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.highlight.FragmentQueue.FragmentQueue(int)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.FragmentQueue.lessThan(TextFragment,TextFragment)",4,6,n/a,8,0,2,3,2
"org.apache.lucene.search.highlight.Fragmenter.isNewFragment()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.highlight.Fragmenter.start(String,TokenStream)",n/a,0,1,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.highlight.GradientFormatter.GradientFormatter(float,String,String,String,String)",32,0,n/a,73,2,5,25,9
"org.apache.lucene.search.highlight.GradientFormatter.getBackgroundColorString(float)",12,1,n/a,12,0,1,9,1
"org.apache.lucene.search.highlight.GradientFormatter.getColorVal(int,int,float)",3,6,n/a,11,1,3,6,2
"org.apache.lucene.search.highlight.GradientFormatter.getForegroundColorString(float)",12,1,n/a,12,0,1,9,1
"org.apache.lucene.search.highlight.GradientFormatter.hexToInt(String)",5,12,n/a,32,1,1,13,4
"org.apache.lucene.search.highlight.GradientFormatter.highlightTerm(String,TokenGroup)",16,0,n/a,28,1,2,19,5
"org.apache.lucene.search.highlight.GradientFormatter.intToHex(int)",0,6,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.Highlighter.Highlighter(Formatter,Encoder,Scorer)",0,1,n/a,6,0,3,3,1
"org.apache.lucene.search.highlight.Highlighter.Highlighter(Formatter,Scorer)",2,4,n/a,4,0,2,1,1
"org.apache.lucene.search.highlight.Highlighter.Highlighter(Scorer)",2,0,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.Highlighter.getBestFragment(Analyzer,String,String)",3,0,n/a,19,0,3,2,1
"org.apache.lucene.search.highlight.Highlighter.getBestFragment(TokenStream,String)",1,2,n/a,26,1,2,4,2
"org.apache.lucene.search.highlight.Highlighter.getBestFragments(Analyzer,String,String,int)",3,0,n/a,24,0,4,2,1
"org.apache.lucene.search.highlight.Highlighter.getBestFragments(TokenStream,String,int)",7,4,n/a,32,2,3,9,4
"org.apache.lucene.search.highlight.Highlighter.getBestFragments(TokenStream,String,int,String)",5,1,n/a,33,2,4,9,3
"org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(TokenStream,String,boolean,int)",76,2,n/a,171,4,4,80,23
"org.apache.lucene.search.highlight.Highlighter.getEncoder()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.highlight.Highlighter.getFragmentScorer()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.highlight.Highlighter.getMaxDocCharsToAnalyze()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.Highlighter.getTextFragmenter()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.highlight.Highlighter.mergeContiguousFragments(TextFragment[])",5,1,n/a,76,5,1,42,12
"org.apache.lucene.search.highlight.Highlighter.setEncoder(Encoder)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.Highlighter.setFragmentScorer(Scorer)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.highlight.Highlighter.setMaxDocCharsToAnalyze(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.highlight.Highlighter.setTextFragmenter(Fragmenter)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamConcurrent.TokenStreamConcurrent()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamConcurrent.incrementToken()",8,216,n/a,14,1,0,8,2
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamConcurrent.reset()",5,93,n/a,10,0,0,3,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamSparse.TokenStreamSparse()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamSparse.incrementToken()",8,216,n/a,14,1,0,8,2
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamSparse.reset()",5,93,n/a,10,0,0,3,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testConcurrentPhrase()",35,0,n/a,41,2,0,25,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testConcurrentSpan()",43,0,n/a,5,4,0,31,3
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testSparsePhrase()",35,0,n/a,42,2,0,25,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testSparsePhraseWithNoPositions()",32,0,n/a,40,2,0,25,1
"org.apache.lucene.search.highlight.HighlighterPhraseTest.testSparseSpan()",34,0,n/a,41,2,0,22,1
"org.apache.lucene.search.highlight.HighlighterTest.addDoc(IndexWriter,String)",4,1,n/a,6,0,2,4,1
"org.apache.lucene.search.highlight.HighlighterTest.assertExpectedHighlightCount(int,int)",11,2,n/a,15,1,2,12,3
"org.apache.lucene.search.highlight.HighlighterTest.createToken(String,int,int)",1,10,n/a,4,0,3,1,1
"org.apache.lucene.search.highlight.HighlighterTest.deleteDocument()",7,1,n/a,7,0,0,3,1
"org.apache.lucene.search.highlight.HighlighterTest.doSearching(Query)",6,10,n/a,9,0,1,7,3
"org.apache.lucene.search.highlight.HighlighterTest.doSearching(String)",5,22,n/a,7,0,1,5,1
"org.apache.lucene.search.highlight.HighlighterTest.doc(String,String)",3,4,n/a,5,0,2,3,1
"org.apache.lucene.search.highlight.HighlighterTest.getTS2()",31,12,n/a,12,3,0,27,2
"org.apache.lucene.search.highlight.HighlighterTest.getTS2a()",31,12,n/a,12,3,0,27,2
"org.apache.lucene.search.highlight.HighlighterTest.highlightField(Query,String,String)",10,3,n/a,15,0,3,7,2
"org.apache.lucene.search.highlight.HighlighterTest.highlightTerm(String,TokenGroup)",1,0,n/a,7,1,2,4,2
"org.apache.lucene.search.highlight.HighlighterTest.makeIndex()",13,1,n/a,9,0,0,7,1
"org.apache.lucene.search.highlight.HighlighterTest.searchIndex()",15,1,n/a,21,1,0,18,3
"org.apache.lucene.search.highlight.HighlighterTest.setUp()",30,0,n/a,35,1,0,32,2
"org.apache.lucene.search.highlight.HighlighterTest.tearDown()",5,0,n/a,8,0,0,6,2
"org.apache.lucene.search.highlight.HighlighterTest.testConstantScoreMultiTermQuery()",42,0,n/a,65,1,0,59,8
"org.apache.lucene.search.highlight.HighlighterTest.testEncoding()",21,0,n/a,3,2,0,19,1
"org.apache.lucene.search.highlight.HighlighterTest.testFieldSpecificHighlighting()",21,0,n/a,31,3,0,24,5
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsFilteredPhraseQuery()",12,0,n/a,14,2,0,11,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsFilteredQuery()",12,0,n/a,14,2,0,10,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsMultiTerm()",5,0,n/a,8,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsPhrase()",5,0,n/a,9,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsQueryScorer()",10,0,n/a,12,2,0,8,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsSimpleQuery()",5,0,n/a,8,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestFragmentsWithOr()",5,0,n/a,8,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestSingleFragment()",27,0,n/a,36,3,0,33,5
"org.apache.lucene.search.highlight.HighlighterTest.testGetBestSingleFragmentWithWeights()",31,0,n/a,28,2,0,22,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetFuzzyFragments()",5,0,n/a,8,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetMidWildCardFragments()",5,0,n/a,8,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetRangeFragments()",8,0,n/a,15,2,0,10,1
"org.apache.lucene.search.highlight.HighlighterTest.testGetSimpleHighlight()",11,0,n/a,16,3,0,14,3
"org.apache.lucene.search.highlight.HighlighterTest.testGetTextFragments()",19,0,n/a,23,4,0,20,4
"org.apache.lucene.search.highlight.HighlighterTest.testGetWildCardFragments()",5,0,n/a,8,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testHighlightingWithDefaultField()",11,0,n/a,25,0,0,14,3
"org.apache.lucene.search.highlight.HighlighterTest.testMaxSizeEndHighlight()",19,0,n/a,17,2,0,13,1
"org.apache.lucene.search.highlight.HighlighterTest.testMaxSizeHighlight()",11,0,n/a,14,2,0,11,1
"org.apache.lucene.search.highlight.HighlighterTest.testMaxSizeHighlightTruncates()",35,0,n/a,35,3,0,24,2
"org.apache.lucene.search.highlight.HighlighterTest.testMultiSearcher()",50,0,n/a,56,1,0,48,4
"org.apache.lucene.search.highlight.HighlighterTest.testNearSpanSimpleQuery()",10,0,n/a,5,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testNoFragments()",8,0,n/a,12,3,0,11,2
"org.apache.lucene.search.highlight.HighlighterTest.testNotSpanSimpleQuery()",13,0,n/a,5,2,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testNumericRangeQuery()",12,0,n/a,17,1,0,13,2
"org.apache.lucene.search.highlight.HighlighterTest.testOffByOne()",11,0,n/a,9,2,0,8,1
"org.apache.lucene.search.highlight.HighlighterTest.testOverlapAnalyzer()",15,0,n/a,18,2,0,15,1
"org.apache.lucene.search.highlight.HighlighterTest.testOverlapAnalyzer2()",98,0,n/a,57,2,0,54,1
"org.apache.lucene.search.highlight.HighlighterTest.testPosTermStdTerm()",12,0,n/a,17,1,0,14,3
"org.apache.lucene.search.highlight.HighlighterTest.testQueryScorerHits()",16,0,n/a,20,1,0,19,3
"org.apache.lucene.search.highlight.HighlighterTest.testQueryScorerMultiPhraseQueryHighlighting()",8,0,n/a,8,0,0,6,1
"org.apache.lucene.search.highlight.HighlighterTest.testQueryScorerMultiPhraseQueryHighlightingWithGap()",7,0,n/a,13,0,0,7,1
"org.apache.lucene.search.highlight.HighlighterTest.testRegexQuery()",15,0,n/a,18,1,0,16,3
"org.apache.lucene.search.highlight.HighlighterTest.testRepeatingTermsInMultBooleans()",8,0,n/a,21,0,0,16,1
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleQueryScorerPhraseHighlighting()",36,0,n/a,46,1,0,44,7
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleQueryScorerPhraseHighlighting2()",12,0,n/a,16,1,0,14,3
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleQueryScorerPhraseHighlighting3()",12,0,n/a,16,1,0,14,3
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleQueryTermScorerHighlighter()",11,0,n/a,15,1,0,12,3
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleSpanFragmenter()",22,0,n/a,26,1,0,26,5
"org.apache.lucene.search.highlight.HighlighterTest.testSimpleSpanHighlighter()",11,0,n/a,17,1,0,13,3
"org.apache.lucene.search.highlight.HighlighterTest.testSpanHighlighting()",18,0,n/a,5,2,0,11,1
"org.apache.lucene.search.highlight.HighlighterTest.testSpanRegexQuery()",16,0,n/a,18,1,0,16,3
"org.apache.lucene.search.highlight.HighlighterTest.testUnRewrittenQuery()",19,0,n/a,34,3,0,24,5
"org.apache.lucene.search.highlight.HighlighterTest.testWeightedTermsWithDeletes()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.search.highlight.InvalidTokenOffsetsException.InvalidTokenOffsetsException(String)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.NullFragmenter.isNewFragment()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.NullFragmenter.start(String,TokenStream)",0,0,n/a,2,0,2,0,1
"org.apache.lucene.search.highlight.OffsetLimitTokenFilter.OffsetLimitTokenFilter(TokenStream,int)",1,0,n/a,4,0,2,2,1
"org.apache.lucene.search.highlight.OffsetLimitTokenFilter.incrementToken()",3,216,n/a,9,1,0,5,3
"org.apache.lucene.search.highlight.OffsetLimitTokenFilter.reset()",1,118,n/a,5,0,0,2,1
"org.apache.lucene.search.highlight.OffsetLimitTokenFilterTest.testFilter()",20,0,n/a,6,2,0,16,1
"org.apache.lucene.search.highlight.PositionSpan.PositionSpan(int,int)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query)",1,2,n/a,6,0,1,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query,IndexReader,String)",1,0,n/a,8,0,3,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query,IndexReader,String,String)",2,0,n/a,10,0,4,2,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query,String)",1,0,n/a,7,0,2,1,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(Query,String,String)",2,1,n/a,7,0,3,2,1
"org.apache.lucene.search.highlight.QueryScorer.QueryScorer(WeightedSpanTerm[])",5,0,n/a,17,2,1,9,4
"org.apache.lucene.search.highlight.QueryScorer.getFragmentScore()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.search.highlight.QueryScorer.getMaxTermWeight()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.search.highlight.QueryScorer.getTokenScore()",7,0,n/a,26,1,0,12,5
"org.apache.lucene.search.highlight.QueryScorer.getWeightedSpanTerm(String)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.search.highlight.QueryScorer.init(Query,String,IndexReader,boolean)",0,5,n/a,8,0,4,4,1
"org.apache.lucene.search.highlight.QueryScorer.init(TokenStream)",4,0,n/a,15,2,1,8,3
"org.apache.lucene.search.highlight.QueryScorer.initExtractor(TokenStream)",8,1,n/a,17,1,1,10,3
"org.apache.lucene.search.highlight.QueryScorer.isExpandMultiTermQuery()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.highlight.QueryScorer.newTermExtractor(String)",2,1,n/a,4,0,1,1,2
"org.apache.lucene.search.highlight.QueryScorer.setExpandMultiTermQuery(boolean)",0,0,n/a,9,0,1,1,1
"org.apache.lucene.search.highlight.QueryScorer.setMaxDocCharsToAnalyze(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.highlight.QueryScorer.setWrapIfNotCachingTokenFilter(boolean)",0,0,n/a,12,0,1,1,1
"org.apache.lucene.search.highlight.QueryScorer.startFragment(TextFragment)",1,0,n/a,9,0,1,2,1
"org.apache.lucene.search.highlight.QueryTermExtractor.getIdfWeightedTerms(Query,IndexReader,String)",5,0,n/a,33,3,3,12,4
"org.apache.lucene.search.highlight.QueryTermExtractor.getTerms(Query)",1,0,n/a,10,0,1,1,1
"org.apache.lucene.search.highlight.QueryTermExtractor.getTerms(Query,HashSet<WeightedTerm>,boolean,String)",12,3,n/a,29,4,4,12,7
"org.apache.lucene.search.highlight.QueryTermExtractor.getTerms(Query,boolean)",1,1,n/a,11,0,2,1,1
"org.apache.lucene.search.highlight.QueryTermExtractor.getTerms(Query,boolean,String)",4,2,n/a,18,1,3,5,2
"org.apache.lucene.search.highlight.QueryTermExtractor.getTermsFromBooleanQuery(BooleanQuery,HashSet<WeightedTerm>,boolean,String)",4,1,n/a,20,1,4,6,4
"org.apache.lucene.search.highlight.QueryTermExtractor.getTermsFromFilteredQuery(FilteredQuery,HashSet<WeightedTerm>,boolean,String)",2,1,n/a,4,0,4,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.QueryTermScorer(Query)",2,0,n/a,8,0,1,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.QueryTermScorer(Query,IndexReader,String)",2,0,n/a,13,0,3,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.QueryTermScorer(Query,String)",2,0,n/a,9,0,2,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.QueryTermScorer(WeightedTerm[])",5,0,n/a,14,2,1,8,4
"org.apache.lucene.search.highlight.QueryTermScorer.allFragmentsProcessed()",0,0,n/a,9,0,0,0,1
"org.apache.lucene.search.highlight.QueryTermScorer.getFragmentScore()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.getMaxTermWeight()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.search.highlight.QueryTermScorer.getTokenScore()",6,0,n/a,17,1,0,8,3
"org.apache.lucene.search.highlight.QueryTermScorer.init(TokenStream)",1,0,n/a,7,0,1,2,1
"org.apache.lucene.search.highlight.QueryTermScorer.startFragment(TextFragment)",1,0,n/a,12,0,1,3,1
"org.apache.lucene.search.highlight.Scorer.getFragmentScore()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.highlight.Scorer.getTokenScore()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.highlight.Scorer.init(TokenStream)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.highlight.Scorer.startFragment(TextFragment)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.highlight.SimpleFragmenter.SimpleFragmenter()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.SimpleFragmenter(int)",0,3,n/a,7,0,1,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.getFragmentSize()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.isNewFragment()",1,0,n/a,10,1,0,4,2
"org.apache.lucene.search.highlight.SimpleFragmenter.setFragmentSize(int)",0,0,n/a,6,0,1,1,1
"org.apache.lucene.search.highlight.SimpleFragmenter.start(String,TokenStream)",1,0,n/a,7,0,2,2,1
"org.apache.lucene.search.highlight.SimpleHTMLEncoder.SimpleHTMLEncoder()",0,2,n/a,3,0,0,0,1
"org.apache.lucene.search.highlight.SimpleHTMLEncoder.encodeText(String)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.SimpleHTMLEncoder.htmlEncode(String)",14,1,n/a,40,3,1,25,10
"org.apache.lucene.search.highlight.SimpleHTMLFormatter.SimpleHTMLFormatter()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.search.highlight.SimpleHTMLFormatter.SimpleHTMLFormatter(String,String)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.search.highlight.SimpleHTMLFormatter.highlightTerm(String,TokenGroup)",9,0,n/a,15,1,2,7,2
"org.apache.lucene.search.highlight.SimpleSpanFragmenter.SimpleSpanFragmenter(QueryScorer)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.search.highlight.SimpleSpanFragmenter.SimpleSpanFragmenter(QueryScorer,int)",0,1,n/a,8,0,2,2,1
"org.apache.lucene.search.highlight.SimpleSpanFragmenter.isNewFragment()",9,0,n/a,27,3,0,18,8
"org.apache.lucene.search.highlight.SimpleSpanFragmenter.start(String,TokenStream)",4,0,n/a,11,0,2,6,1
"org.apache.lucene.search.highlight.SpanGradientFormatter.SpanGradientFormatter(float,String,String,String,String)",1,0,n/a,8,0,5,1,1
"org.apache.lucene.search.highlight.SpanGradientFormatter.highlightTerm(String,TokenGroup)",17,0,n/a,30,1,2,19,5
"org.apache.lucene.search.highlight.SynonymAnalyzer.SynonymAnalyzer(Map<String, String>)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.highlight.SynonymAnalyzer.tokenStream(String,Reader)",7,78,n/a,19,1,2,8,2
"org.apache.lucene.search.highlight.SynonymTokenizer.SynonymTokenizer(TokenStream,Map<String, String>)",6,1,n/a,10,0,2,8,1
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter)",1,13,n/a,4,0,5,1,1
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.doStandardHighlights(Analyzer,IndexSearcher,TopDocs,Query,Formatter,boolean)",10,2,n/a,20,2,6,17,5
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.getHighlighter(Query,String,TokenStream,Formatter)",1,22,n/a,3,0,4,1,1
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.getHighlighter(Query,String,TokenStream,Formatter,boolean)",5,2,n/a,14,2,5,9,4
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.getHighlighter(WeightedTerm[],Formatter)",5,2,n/a,9,1,2,5,3
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.run()",n/a,5,27,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner.start()",4,24,n/a,7,0,0,7,3
"org.apache.lucene.search.highlight.SynonymTokenizer.incrementToken()",29,216,n/a,35,2,0,25,6
"org.apache.lucene.search.highlight.SynonymTokenizer.reset()",1,92,n/a,6,0,0,3,1
"org.apache.lucene.search.highlight.TextFragment.TextFragment(CharSequence,int,int)",0,1,n/a,6,0,3,3,1
"org.apache.lucene.search.highlight.TextFragment.TextFragment(StringBuffer,int,int)",0,1,n/a,11,0,3,3,1
"org.apache.lucene.search.highlight.TextFragment.follows(TextFragment)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.search.highlight.TextFragment.getFragNum()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.highlight.TextFragment.getScore()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.highlight.TextFragment.merge(TextFragment)",1,0,n/a,8,0,1,2,1
"org.apache.lucene.search.highlight.TextFragment.setScore(float)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.TextFragment.toString()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.search.highlight.TokenGroup.TokenGroup(TokenStream)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.search.highlight.TokenGroup.addToken(float)",11,0,n/a,29,4,1,21,5
"org.apache.lucene.search.highlight.TokenGroup.clear()",0,0,n/a,4,0,0,2,1
"org.apache.lucene.search.highlight.TokenGroup.getEndOffset()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.highlight.TokenGroup.getNumTokens()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.highlight.TokenGroup.getScore(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.search.highlight.TokenGroup.getStartOffset()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.highlight.TokenGroup.getToken(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.search.highlight.TokenGroup.getTotalScore()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.highlight.TokenGroup.isDistinct()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.TokenSources.getAnyTokenStream(IndexReader,int,String,Analyzer)",3,0,n/a,28,2,4,8,4
"org.apache.lucene.search.highlight.TokenSources.getAnyTokenStream(IndexReader,int,String,Document,Analyzer)",3,2,n/a,34,2,5,8,4
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(Document,String,Analyzer)",3,2,n/a,9,1,3,4,2
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(IndexReader,int,String)",5,0,n/a,15,1,3,7,3
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(IndexReader,int,String,Analyzer)",2,1,n/a,6,0,4,2,1
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(String,String,Analyzer)",3,1,n/a,9,1,3,3,2
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(TermPositionVector)",1,3,n/a,5,0,1,1,1
"org.apache.lucene.search.highlight.TokenSources.getTokenStream(TermPositionVector,boolean)",38,1,n/a,5,3,2,53,16
"org.apache.lucene.search.highlight.TokenSourcesTest.OverlappingTokenStream.incrementToken()",8,216,n/a,14,1,0,8,2
"org.apache.lucene.search.highlight.TokenSourcesTest.OverlappingTokenStream.reset()",7,92,n/a,12,0,0,3,1
"org.apache.lucene.search.highlight.TokenSourcesTest.testOverlapWithOffset()",33,0,n/a,44,2,0,24,1
"org.apache.lucene.search.highlight.TokenSourcesTest.testOverlapWithOffsetExactPhrase()",31,0,n/a,44,2,0,22,1
"org.apache.lucene.search.highlight.TokenSourcesTest.testOverlapWithPositionsAndOffset()",33,0,n/a,44,2,0,24,1
"org.apache.lucene.search.highlight.TokenSourcesTest.testOverlapWithPositionsAndOffsetExactPhrase()",31,0,n/a,45,2,0,22,1
"org.apache.lucene.search.highlight.TokenStreamFromTermPositionVector.TokenStreamFromTermPositionVector(TermPositionVector)",20,0,n/a,40,3,1,26,5
"org.apache.lucene.search.highlight.TokenStreamFromTermPositionVector.incrementToken()",10,216,n/a,13,1,0,8,2
"org.apache.lucene.search.highlight.TokenStreamFromTermPositionVector.reset()",1,92,n/a,4,0,0,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.WeightedSpanTerm(float,String)",2,0,n/a,8,0,2,2,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.WeightedSpanTerm(float,String,boolean)",1,0,n/a,9,0,3,2,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.addPositionSpans(List<PositionSpan>)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.checkPosition(int)",3,0,n/a,21,2,1,6,4
"org.apache.lucene.search.highlight.WeightedSpanTerm.getPositionSpans()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.isPositionSensitive()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.WeightedSpanTerm.setPositionSensitive(boolean)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.FakeReader.FakeReader()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.FakeReader.terms(Term)",2,60,n/a,7,0,1,3,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.PositionCheckingMap.put(K,WeightedSpanTerm)",1,1,n/a,11,1,2,8,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.PositionCheckingMap.putAll(Map<? extends K, ? extends WeightedSpanTerm>)",4,0,n/a,5,0,1,2,2
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.WeightedSpanTermExtractor()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.WeightedSpanTermExtractor(String)",1,1,n/a,5,1,1,2,2
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.closeReaders()",2,2,n/a,10,2,0,4,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.collectSpanQueryFields(SpanQuery,Set<String>)",12,6,n/a,19,2,2,13,8
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extract(Query,Map<String, WeightedSpanTerm>)",44,6,n/a,119,4,2,99,29
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extractUnknownQuery(Query,Map<String, WeightedSpanTerm>)",0,1,n/a,4,0,2,0,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extractWeightedSpanTerms(Map<String, WeightedSpanTerm>,SpanQuery)",36,3,n/a,68,4,2,38,13
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.extractWeightedTerms(Map<String, WeightedSpanTerm>,Query)",9,2,n/a,19,2,2,6,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.fieldNameComparator(String)",0,2,n/a,8,0,1,2,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getExpandMultiTermQuery()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getReaderForField(String)",10,3,n/a,16,1,1,12,5
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getTokenStream()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,TokenStream)",1,0,n/a,16,0,2,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTerms(Query,TokenStream,String)",4,1,n/a,30,1,3,9,2
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.getWeightedSpanTermsWithScores(Query,TokenStream,String,IndexReader)",13,0,n/a,47,3,4,19,4
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.isCachedTokenStream()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.mustRewriteQuery(SpanQuery)",12,7,n/a,30,3,1,22,13
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setExpandMultiTermQuery(boolean)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setMaxDocCharsToAnalyze(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.setWrapIfNotCachingTokenFilter(boolean)",0,0,n/a,12,0,1,1,1
"org.apache.lucene.search.highlight.WeightedTerm.WeightedTerm(float,String)",0,0,n/a,5,0,2,2,1
"org.apache.lucene.search.highlight.WeightedTerm.getTerm()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.highlight.WeightedTerm.getWeight()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.highlight.WeightedTerm.setTerm(String)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.highlight.WeightedTerm.setWeight(float)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.CustomQuery(Term)",1,2,n/a,4,0,1,2,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.equals(Object)",4,28,n/a,16,1,1,13,7
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.hashCode()",2,23,n/a,7,0,0,4,2
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.rewrite(IndexReader)",1,30,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery.toString(String)",2,47,n/a,4,0,1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyQueryScorer.MyQueryScorer(Query,String,String)",1,1,n/a,3,0,3,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyQueryScorer.newTermExtractor(String)",2,1,n/a,5,0,1,1,2
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyWeightedSpanTermExtractor.MyWeightedSpanTermExtractor()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyWeightedSpanTermExtractor.MyWeightedSpanTermExtractor(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyWeightedSpanTermExtractor.extractUnknownQuery(Query,Map<String, WeightedSpanTerm>)",2,1,n/a,7,1,2,2,2
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.highlightField(Query,String,String)",10,3,n/a,20,0,3,7,2
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.testHighlightCustomQuery()",11,0,n/a,30,0,0,13,3
"org.apache.lucene.search.join.JoinUtil.JoinUtil()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.search.join.JoinUtil.createJoinQuery(String,String,Query,IndexSearcher)",4,5,n/a,25,0,4,3,1
"org.apache.lucene.search.join.RawTermFilter.RawTermFilter(Term)",0,6,n/a,3,0,1,1,1
"org.apache.lucene.search.join.RawTermFilter.getDocIdSet(IndexReader)",8,23,n/a,9,5,1,15,4
"org.apache.lucene.search.join.TermsCollector.TermsCollector(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.join.TermsCollector.acceptsDocsOutOfOrder()",0,15,n/a,3,0,0,1,1
"org.apache.lucene.search.join.TermsCollector.collect(int)",1,50,n/a,3,0,1,1,1
"org.apache.lucene.search.join.TermsCollector.getCollectorTerms()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.join.TermsCollector.setNextReader(IndexReader,int)",1,19,n/a,3,0,2,1,1
"org.apache.lucene.search.join.TermsCollector.setScorer(Scorer)",0,27,n/a,2,0,1,0,1
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum.SeekingTermsEnum(TermEnum,Term,String,String[])",3,1,n/a,11,1,4,8,2
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum.difference()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum.endEnum()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum.termCompare(Term)",5,2,n/a,32,3,1,22,9
"org.apache.lucene.search.join.TermsQuery.TermsQuery(String,Set<String>)",3,0,n/a,9,0,2,3,1
"org.apache.lucene.search.join.TermsQuery.getEnum(IndexReader)",5,5,n/a,11,1,1,7,4
"org.apache.lucene.search.join.TermsQuery.toString(String)",0,47,n/a,5,0,1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinQuery(Query,Filter,boolean)",1,6,n/a,7,0,3,5,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinQuery(Query,Query,Filter,boolean)",1,1,n/a,7,0,4,5,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.ToChildBlockJoinScorer(Weight,Scorer,FixedBitSet,boolean)",1,1,n/a,6,0,4,4,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.advance(int)",6,54,n/a,31,2,1,16,8
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.nextDoc()",4,62,n/a,42,4,0,16,7
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.score()",0,63,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",2,9,n/a,7,0,3,2,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.ToChildBlockJoinWeight(Query,Weight,Filter,boolean)",1,1,n/a,7,0,4,5,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.explain(IndexReader,int)",3,8,n/a,6,0,2,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.getQuery()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.getValue()",1,9,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.normalize(float)",2,12,n/a,4,0,1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.scorer(IndexReader,boolean,boolean)",4,18,n/a,20,1,3,9,4
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.scoresDocsOutOfOrder()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight.sumOfSquaredWeights()",3,12,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.clone()",2,27,n/a,6,0,0,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.createWeight(Searcher)",2,16,n/a,4,0,1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.equals(Object)",2,28,n/a,11,1,1,4,4
"org.apache.lucene.search.join.ToChildBlockJoinQuery.extractTerms(Set<Term>)",1,24,n/a,4,0,1,1,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.hashCode()",4,23,n/a,9,0,0,6,1
"org.apache.lucene.search.join.ToChildBlockJoinQuery.rewrite(IndexReader)",4,30,n/a,14,1,1,6,2
"org.apache.lucene.search.join.ToChildBlockJoinQuery.toString(String)",1,47,n/a,4,0,1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.FakeScorer()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.advance(int)",1,54,n/a,4,0,1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.nextDoc()",1,62,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer.score()",0,63,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.OneGroup.OneGroup(int,int,float,int,boolean)",1,1,n/a,14,2,5,13,4
"org.apache.lucene.search.join.ToParentBlockJoinCollector.ToParentBlockJoinCollector(Sort,int,boolean,boolean)",4,3,n/a,16,0,4,8,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.acceptsDocsOutOfOrder()",0,15,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinCollector.collect(int)",12,50,n/a,73,3,1,49,15
"org.apache.lucene.search.join.ToParentBlockJoinCollector.copyGroups(OneGroup)",6,2,n/a,37,3,1,16,8
"org.apache.lucene.search.join.ToParentBlockJoinCollector.enroll(ToParentBlockJoinQuery,BlockJoinScorer)",3,3,n/a,13,1,2,8,2
"org.apache.lucene.search.join.ToParentBlockJoinCollector.getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean)",19,5,n/a,79,3,6,48,14
"org.apache.lucene.search.join.ToParentBlockJoinCollector.setNextReader(IndexReader,int)",1,19,n/a,8,1,2,6,2
"org.apache.lucene.search.join.ToParentBlockJoinCollector.setScorer(Scorer)",8,27,n/a,8,3,1,13,5
"org.apache.lucene.search.join.ToParentBlockJoinCollector.sortQueue()",3,1,n/a,6,1,0,5,2
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.BlockJoinScorer(Weight,Scorer,FixedBitSet,int,ScoreMode)",1,1,n/a,11,1,5,7,2
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.advance(int)",4,54,n/a,30,1,1,11,4
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.getChildCount()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.nextDoc()",6,64,n/a,52,2,0,34,11
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.score()",0,63,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.swapChildDocs(int[])",0,0,n/a,9,1,1,5,2
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.swapChildScores(float[])",1,0,n/a,12,1,1,7,3
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer.visitSubScorers(Query,Occur,ScorerVisitor<Query, Query, Scorer>)",2,9,n/a,7,0,3,2,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.BlockJoinWeight(Query,Weight,Filter,ScoreMode)",1,1,n/a,7,0,4,5,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.explain(IndexReader,int)",3,8,n/a,6,0,2,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.getQuery()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.getValue()",1,9,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.normalize(float)",2,12,n/a,4,0,1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.scorer(IndexReader,boolean,boolean)",5,18,n/a,25,1,3,12,5
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.scoresDocsOutOfOrder()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight.sumOfSquaredWeights()",3,12,n/a,4,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.ToParentBlockJoinQuery(Query,Filter,ScoreMode)",1,9,n/a,15,0,3,5,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.ToParentBlockJoinQuery(Query,Query,Filter,ScoreMode)",1,1,n/a,7,0,4,5,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.clone()",2,27,n/a,6,0,0,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.createWeight(Searcher)",2,16,n/a,4,0,1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.equals(Object)",2,28,n/a,11,1,1,4,4
"org.apache.lucene.search.join.ToParentBlockJoinQuery.extractTerms(Set<Term>)",1,24,n/a,4,0,1,1,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.hashCode()",3,23,n/a,9,0,0,6,1
"org.apache.lucene.search.join.ToParentBlockJoinQuery.rewrite(IndexReader)",4,30,n/a,14,1,1,6,2
"org.apache.lucene.search.join.ToParentBlockJoinQuery.toString(String)",1,47,n/a,4,0,1,1,1
"org.apache.lucene.search.payloads.AveragePayloadFunction.currentScore(int,String,int,int,int,float,float)",0,2,n/a,4,0,7,1,1
"org.apache.lucene.search.payloads.AveragePayloadFunction.docScore(int,String,int,float)",0,3,n/a,4,0,4,1,2
"org.apache.lucene.search.payloads.AveragePayloadFunction.equals(Object)",2,2,n/a,10,0,1,7,4
"org.apache.lucene.search.payloads.AveragePayloadFunction.explain(int,int,float)",3,1,n/a,8,0,3,5,2
"org.apache.lucene.search.payloads.AveragePayloadFunction.hashCode()",2,2,n/a,7,0,0,4,1
"org.apache.lucene.search.payloads.MaxPayloadFunction.currentScore(int,String,int,int,int,float,float)",1,2,n/a,8,1,7,3,2
"org.apache.lucene.search.payloads.MaxPayloadFunction.docScore(int,String,int,float)",0,3,n/a,4,0,4,1,2
"org.apache.lucene.search.payloads.MaxPayloadFunction.equals(Object)",2,2,n/a,10,0,1,7,4
"org.apache.lucene.search.payloads.MaxPayloadFunction.explain(int,int,float)",3,1,n/a,8,0,3,5,2
"org.apache.lucene.search.payloads.MaxPayloadFunction.hashCode()",2,2,n/a,7,0,0,4,1
"org.apache.lucene.search.payloads.MinPayloadFunction.currentScore(int,String,int,int,int,float,float)",1,2,n/a,8,1,7,3,2
"org.apache.lucene.search.payloads.MinPayloadFunction.docScore(int,String,int,float)",0,3,n/a,4,0,4,1,2
"org.apache.lucene.search.payloads.MinPayloadFunction.equals(Object)",2,2,n/a,10,0,1,7,4
"org.apache.lucene.search.payloads.MinPayloadFunction.explain(int,int,float)",3,1,n/a,8,0,3,5,2
"org.apache.lucene.search.payloads.MinPayloadFunction.hashCode()",2,2,n/a,7,0,0,4,1
"org.apache.lucene.search.payloads.PayloadFunction.currentScore(int,String,int,int,int,float,float)",n/a,2,3,n/a,n/a,7,n/a,n/a
"org.apache.lucene.search.payloads.PayloadFunction.docScore(int,String,int,float)",n/a,3,3,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.payloads.PayloadFunction.equals(Object)",n/a,2,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.payloads.PayloadFunction.explain(int,int,float)",3,1,n/a,6,0,3,4,1
"org.apache.lucene.search.payloads.PayloadFunction.hashCode()",n/a,2,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearQuery(SpanQuery[],int,boolean)",2,0,n/a,3,0,3,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearQuery(SpanQuery[],int,boolean,PayloadFunction)",2,2,n/a,6,0,4,3,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.PayloadNearSpanScorer(Spans,Weight,Similarity,byte[])",1,1,n/a,5,0,4,2,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.explain(int)",9,3,n/a,13,0,1,8,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.getPayloads(Spans[])",14,3,n/a,18,3,1,11,6
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.processPayloads(Collection<byte[]>,int,int)",4,2,n/a,18,1,3,3,2
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.score()",2,65,n/a,5,0,0,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer.setFreqCurrentDoc()",8,2,n/a,20,1,0,14,4
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanWeight.PayloadNearSpanWeight(SpanQuery,Searcher)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanWeight.scorer(IndexReader,boolean,boolean)",4,19,n/a,6,0,3,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.clone()",6,28,n/a,12,1,0,9,2
"org.apache.lucene.search.payloads.PayloadNearQuery.createWeight(Searcher)",1,17,n/a,4,0,1,1,1
"org.apache.lucene.search.payloads.PayloadNearQuery.equals(Object)",5,29,n/a,21,1,1,18,10
"org.apache.lucene.search.payloads.PayloadNearQuery.hashCode()",3,24,n/a,8,0,0,5,3
"org.apache.lucene.search.payloads.PayloadNearQuery.toString(String)",18,47,n/a,20,2,1,15,3
"org.apache.lucene.search.payloads.PayloadSpanUtil.PayloadSpanUtil(IndexReader)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.payloads.PayloadSpanUtil.getPayloads(Collection<byte[]>,SpanQuery)",5,4,n/a,12,3,2,6,4
"org.apache.lucene.search.payloads.PayloadSpanUtil.getPayloadsForQuery(Query)",2,0,n/a,12,0,1,3,1
"org.apache.lucene.search.payloads.PayloadSpanUtil.queryToSpanQuery(Query,Collection<byte[]>)",38,4,n/a,83,4,2,71,21
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermQuery(Term,PayloadFunction)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermQuery(Term,PayloadFunction,boolean)",1,1,n/a,6,0,3,3,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.PayloadTermSpanScorer(TermSpans,Weight,Similarity,byte[])",2,1,n/a,5,0,4,2,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.explain(int)",16,4,n/a,26,1,1,16,3
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.getPayloadScore()",2,4,n/a,9,0,0,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.getSpanScore()",1,2,n/a,13,0,0,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.processPayload(Similarity)",11,1,n/a,12,1,1,4,2
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.score()",3,66,n/a,10,0,0,1,2
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer.setFreqCurrentDoc()",8,2,n/a,19,1,0,13,5
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermWeight(PayloadTermQuery,Searcher)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.explain(IndexReader,int)",3,9,n/a,10,1,2,4,2
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.scorer(IndexReader,boolean,boolean)",4,20,n/a,6,0,3,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.createWeight(Searcher)",1,17,n/a,4,0,1,1,1
"org.apache.lucene.search.payloads.PayloadTermQuery.equals(Object)",4,29,n/a,18,1,1,15,8
"org.apache.lucene.search.payloads.PayloadTermQuery.hashCode()",2,24,n/a,8,0,0,5,3
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.JakartaRegexpCapabilities()",0,0,n/a,4,0,0,0,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.JakartaRegexpCapabilities(int)",0,0,n/a,10,0,1,1,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.compile(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.equals(Object)",3,0,n/a,8,0,1,8,6
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.match(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.regex.JakartaRegexpCapabilities.prefix()",5,1,n/a,16,2,0,9,5
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.JavaUtilRegexCapabilities()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.JavaUtilRegexCapabilities(int)",0,0,n/a,15,0,1,1,1
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.compile(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.equals(Object)",3,0,n/a,8,0,1,8,6
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.hashCode()",1,0,n/a,4,0,0,1,2
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.match(String)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities.prefix()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.RegexCapabilities.compile(String)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.regex.RegexCapabilities.match(String)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.regex.RegexCapabilities.prefix()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.regex.RegexQuery.RegexQuery(Term)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.search.regex.RegexQuery.equals(Object)",4,36,n/a,9,0,1,8,5
"org.apache.lucene.search.regex.RegexQuery.getEnum(IndexReader)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.search.regex.RegexQuery.getRegexImplementation()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.regex.RegexQuery.getTerm()",0,1,n/a,1,0,0,1,1
"org.apache.lucene.search.regex.RegexQuery.hashCode()",2,31,n/a,7,0,0,3,1
"org.apache.lucene.search.regex.RegexQuery.setRegexImplementation(RegexCapabilities)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.search.regex.RegexQuery.toString(String)",12,47,n/a,11,1,1,7,2
"org.apache.lucene.search.regex.RegexQueryCapable.getRegexImplementation()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.regex.RegexQueryCapable.setRegexImplementation(RegexCapabilities)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.regex.RegexTermEnum.RegexTermEnum(IndexReader,Term,RegexCapabilities)",9,0,n/a,10,0,3,9,2
"org.apache.lucene.search.regex.RegexTermEnum.close()",1,42,n/a,5,0,0,2,1
"org.apache.lucene.search.regex.RegexTermEnum.difference()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.search.regex.RegexTermEnum.endEnum()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.search.regex.RegexTermEnum.termCompare(Term)",4,2,n/a,11,2,1,6,3
"org.apache.lucene.search.regex.SpanRegexQuery.SpanRegexQuery(Term)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.search.regex.SpanRegexQuery.getRegexImplementation()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.SpanRegexQuery.getTerm()",1,0,n/a,1,0,0,1,1
"org.apache.lucene.search.regex.SpanRegexQuery.setRegexImplementation(RegexCapabilities)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.regex.TestJakartaRegexpCapabilities.testGetPrefix()",11,0,n/a,9,0,0,7,1
"org.apache.lucene.search.regex.TestJakartaRegexpCapabilities.testShakyPrefix()",8,0,n/a,8,0,0,5,1
"org.apache.lucene.search.regex.TestRegexQuery.newTerm(String)",1,5,n/a,1,0,1,1,1
"org.apache.lucene.search.regex.TestRegexQuery.regexQueryNrHits(String,RegexCapabilities)",4,7,n/a,6,0,2,4,2
"org.apache.lucene.search.regex.TestRegexQuery.setUp()",10,0,n/a,12,0,0,9,1
"org.apache.lucene.search.regex.TestRegexQuery.spanRegexQueryNrHits(String,String,int,boolean)",6,2,n/a,6,0,4,4,1
"org.apache.lucene.search.regex.TestRegexQuery.tearDown()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.search.regex.TestRegexQuery.testEquals()",8,0,n/a,6,0,0,4,1
"org.apache.lucene.search.regex.TestRegexQuery.testJakartaCaseInsensative()",3,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testJakartaCaseSensativeFail()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testJavaUtilCaseInsensative()",3,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testJavaUtilCaseSensativeFail()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testMatchAll()",8,0,n/a,6,0,0,3,1
"org.apache.lucene.search.regex.TestRegexQuery.testRegex1()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testRegex2()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testRegex3()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testSpanRegex1()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestRegexQuery.testSpanRegex2()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.createRAMDirectories()",20,2,n/a,23,0,0,12,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.setUp()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.tearDown()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.testSpanRegex()",23,0,n/a,28,0,0,17,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.testSpanRegexBug()",15,0,n/a,21,0,0,12,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.testSpanRegexBugOld()",13,0,n/a,23,0,0,12,1
"org.apache.lucene.search.regex.TestSpanRegexQuery.testSpanRegexOld()",22,0,n/a,30,0,0,17,1
"org.apache.lucene.search.similar.MoreLikeThis.FreqQ.FreqQ(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.FreqQ.lessThan(Object[],Object[])",2,6,n/a,6,0,2,3,1
"org.apache.lucene.search.similar.MoreLikeThis.Int.Int()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.MoreLikeThis(IndexReader)",2,2,n/a,6,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.MoreLikeThis(IndexReader,Similarity)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.similar.MoreLikeThis.addTermFrequencies(Map<String, Int>,TermFreqVector)",6,1,n/a,28,2,2,14,4
"org.apache.lucene.search.similar.MoreLikeThis.addTermFrequencies(Reader,Map<String, Int>,String)",11,2,n/a,38,2,3,17,5
"org.apache.lucene.search.similar.MoreLikeThis.createQuery(PriorityQueue<Object[]>)",8,3,n/a,30,3,1,19,7
"org.apache.lucene.search.similar.MoreLikeThis.createQueue(Map<String, Int>)",16,2,n/a,49,2,1,26,11
"org.apache.lucene.search.similar.MoreLikeThis.describeParams()",12,0,n/a,22,1,0,17,2
"org.apache.lucene.search.similar.MoreLikeThis.getAnalyzer()",0,1,n/a,10,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getBoostFactor()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getFieldNames()",0,1,n/a,11,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMaxDocFreq()",0,1,n/a,11,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMaxNumTokensParsed()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMaxQueryTerms()",0,2,n/a,10,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMaxWordLen()",0,1,n/a,10,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMinDocFreq()",0,1,n/a,11,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMinTermFreq()",0,1,n/a,9,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getMinWordLen()",0,1,n/a,10,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getSimilarity()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.getStopWords()",0,2,n/a,8,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.isBoost()",0,2,n/a,10,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThis.isNoiseWord(String)",2,2,n/a,22,1,1,8,7
"org.apache.lucene.search.similar.MoreLikeThis.like(File)",5,0,n/a,14,1,1,4,2
"org.apache.lucene.search.similar.MoreLikeThis.like(InputStream)",2,0,n/a,9,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.like(Reader)",2,0,n/a,5,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.like(Reader,String)",2,6,n/a,8,0,2,1,1
"org.apache.lucene.search.similar.MoreLikeThis.like(URL)",4,0,n/a,9,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.like(int)",5,2,n/a,16,1,1,4,2
"org.apache.lucene.search.similar.MoreLikeThis.retrieveInterestingTerms(Reader)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.retrieveInterestingTerms(Reader,String)",6,3,n/a,25,1,2,9,3
"org.apache.lucene.search.similar.MoreLikeThis.retrieveInterestingTerms(int)",6,2,n/a,18,1,1,9,3
"org.apache.lucene.search.similar.MoreLikeThis.retrieveTerms(Reader)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.retrieveTerms(Reader,String)",3,7,n/a,26,0,2,3,1
"org.apache.lucene.search.similar.MoreLikeThis.retrieveTerms(int)",8,2,n/a,27,4,1,16,5
"org.apache.lucene.search.similar.MoreLikeThis.setAnalyzer(Analyzer)",0,2,n/a,11,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setBoost(boolean)",0,3,n/a,10,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setBoostFactor(float)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setFieldNames(String[])",0,3,n/a,12,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxDocFreq(int)",0,2,n/a,11,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxDocFreqPct(int)",1,2,n/a,11,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxNumTokensParsed(int)",0,2,n/a,8,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxQueryTerms(int)",0,5,n/a,11,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMaxWordLen(int)",0,3,n/a,9,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMinDocFreq(int)",0,4,n/a,11,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMinTermFreq(int)",0,4,n/a,9,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setMinWordLen(int)",0,3,n/a,9,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setSimilarity(Similarity)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThis.setStopWords(Set<?>)",0,4,n/a,17,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.MoreLikeThisQuery(String,String[],Analyzer)",1,0,n/a,5,0,3,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.MoreLikeThisQuery(String,String[],Analyzer,String)",0,3,n/a,9,0,4,4,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getAnalyzer()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getLikeText()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getMaxQueryTerms()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getMinDocFreq()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getMinTermFrequency()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getMoreLikeFields()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getPercentTermsToMatch()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.getStopWords()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.rewrite(IndexReader)",11,30,n/a,17,1,1,12,2
"org.apache.lucene.search.similar.MoreLikeThisQuery.setAnalyzer(Analyzer)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setLikeText(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setMaxQueryTerms(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setMinDocFreq(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setMinTermFrequency(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setMoreLikeFields(String[])",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setPercentTermsToMatch(float)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.setStopWords(Set<?>)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery.toString(String)",0,47,n/a,9,0,1,1,1
"org.apache.lucene.search.similar.SimilarityQueries.SimilarityQueries()",0,0,n/a,6,0,0,0,1
"org.apache.lucene.search.similar.SimilarityQueries.formSimilarQuery(String,Analyzer,String,Set<?>)",12,0,n/a,66,2,4,15,6
"org.apache.lucene.search.similar.TestMoreLikeThis.addDoc(RandomIndexWriter,String)",4,2,n/a,5,0,2,3,1
"org.apache.lucene.search.similar.TestMoreLikeThis.getOriginalValues()",20,1,n/a,19,1,0,17,2
"org.apache.lucene.search.similar.TestMoreLikeThis.setUp()",8,0,n/a,12,0,0,8,1
"org.apache.lucene.search.similar.TestMoreLikeThis.tearDown()",4,0,n/a,7,0,0,4,1
"org.apache.lucene.search.similar.TestMoreLikeThis.testBoostFactor()",32,0,n/a,29,1,0,22,2
"org.apache.lucene.search.similar.TestMoreLikeThis.testMultiFields()",9,0,n/a,10,0,0,7,1
"org.apache.lucene.search.similar.TestMoreLikeThis.testMultiFieldsDeprecated()",9,0,n/a,11,0,0,7,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.FieldMaskingSpanQuery(SpanQuery,String)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.createWeight(Searcher)",1,17,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.equals(Object)",8,28,n/a,9,0,1,4,4
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.extractTerms(Set<Term>)",1,24,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.getField()",0,20,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.getMaskedQuery()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.getSpans(IndexReader)",1,12,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.hashCode()",6,23,n/a,6,0,0,1,1
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.rewrite(IndexReader)",2,30,n/a,14,1,1,8,3
"org.apache.lucene.search.spans.FieldMaskingSpanQuery.toString(String)",11,47,n/a,11,0,1,8,1
"org.apache.lucene.search.spans.NearSpansOrdered.NearSpansOrdered(SpanNearQuery,IndexReader)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.NearSpansOrdered(SpanNearQuery,IndexReader,boolean)",6,2,n/a,18,1,3,14,3
"org.apache.lucene.search.spans.NearSpansOrdered.advanceAfterOrdered()",3,2,n/a,12,2,0,4,6
"org.apache.lucene.search.spans.NearSpansOrdered.doc()",0,48,n/a,3,0,0,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.docSpansOrdered(Spans,Spans)",8,3,n/a,14,0,2,4,2
"org.apache.lucene.search.spans.NearSpansOrdered.docSpansOrdered(int,int,int,int)",0,1,n/a,6,0,4,1,2
"org.apache.lucene.search.spans.NearSpansOrdered.end()",0,30,n/a,3,0,0,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.getPayload()",0,11,n/a,6,0,0,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.getSubSpans()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.isPayloadAvailable()",1,14,n/a,5,0,0,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.next()",3,25,n/a,18,3,0,12,5
"org.apache.lucene.search.spans.NearSpansOrdered.shrinkToAfterShortestMatch()",26,1,n/a,68,5,0,49,17
"org.apache.lucene.search.spans.NearSpansOrdered.skipTo(int)",5,12,n/a,25,3,1,17,8
"org.apache.lucene.search.spans.NearSpansOrdered.start()",0,33,n/a,3,0,0,1,1
"org.apache.lucene.search.spans.NearSpansOrdered.stretchToOrder()",4,1,n/a,19,3,0,13,6
"org.apache.lucene.search.spans.NearSpansOrdered.toSameDoc()",7,1,n/a,25,2,0,17,5
"org.apache.lucene.search.spans.NearSpansOrdered.toString()",6,0,n/a,5,0,0,1,3
"org.apache.lucene.search.spans.NearSpansUnordered.CellQueue.CellQueue(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.CellQueue.lessThan(SpansCell,SpansCell)",5,6,n/a,8,1,2,3,2
"org.apache.lucene.search.spans.NearSpansUnordered.NearSpansUnordered(SpanNearQuery,IndexReader)",6,1,n/a,14,1,2,11,2
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.SpansCell(Spans,int)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.adjust(boolean)",8,2,n/a,15,2,1,9,7
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.doc()",1,64,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.end()",1,34,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.getPayload()",2,11,n/a,5,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.isPayloadAvailable()",1,15,n/a,5,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.next()",2,28,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.skipTo(int)",2,15,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.start()",1,35,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell.toString()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.addToList(SpansCell)",0,2,n/a,8,1,1,5,2
"org.apache.lucene.search.spans.NearSpansUnordered.atMatch()",6,2,n/a,4,0,0,1,2
"org.apache.lucene.search.spans.NearSpansUnordered.doc()",2,48,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.end()",1,30,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.firstToLast()",0,1,n/a,6,0,0,4,1
"org.apache.lucene.search.spans.NearSpansUnordered.getPayload()",4,11,n/a,15,2,0,7,3
"org.apache.lucene.search.spans.NearSpansUnordered.getSubSpans()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.initList(boolean)",4,2,n/a,10,2,1,8,5
"org.apache.lucene.search.spans.NearSpansUnordered.isPayloadAvailable()",2,14,n/a,12,2,0,6,3
"org.apache.lucene.search.spans.NearSpansUnordered.listToQueue()",2,3,n/a,6,1,0,5,2
"org.apache.lucene.search.spans.NearSpansUnordered.min()",1,10,n/a,1,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.next()",19,26,n/a,41,2,0,28,12
"org.apache.lucene.search.spans.NearSpansUnordered.queueToList()",3,1,n/a,6,1,0,3,2
"org.apache.lucene.search.spans.NearSpansUnordered.skipTo(int)",10,12,n/a,22,3,1,14,10
"org.apache.lucene.search.spans.NearSpansUnordered.start()",2,33,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.NearSpansUnordered.toString()",6,0,n/a,5,0,0,1,3
"org.apache.lucene.search.spans.SpanFirstQuery.SpanFirstQuery(SpanQuery,int)",1,8,n/a,5,0,2,1,1
"org.apache.lucene.search.spans.SpanFirstQuery.acceptPosition(Spans)",4,2,n/a,10,0,1,6,3
"org.apache.lucene.search.spans.SpanFirstQuery.clone()",4,27,n/a,6,0,0,3,1
"org.apache.lucene.search.spans.SpanFirstQuery.equals(Object)",3,28,n/a,9,0,1,6,5
"org.apache.lucene.search.spans.SpanFirstQuery.hashCode()",3,23,n/a,7,0,0,4,1
"org.apache.lucene.search.spans.SpanFirstQuery.toString(String)",11,47,n/a,11,0,1,8,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.SpanMultiTermQueryWrapper(Q)",12,6,n/a,40,3,1,13,5
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.SpanRewriteMethod.rewrite(IndexReader,MultiTermQuery)",n/a,2,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.TopTermsSpanBooleanQueryRewrite(int)",5,1,n/a,6,2,1,6,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.equals(Object)",3,0,n/a,8,0,1,8,4
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.getSize()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite.rewrite(IndexReader,MultiTermQuery)",1,2,n/a,4,0,2,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.equals(Object)",3,28,n/a,9,0,1,8,4
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getField()",4,16,n/a,13,2,0,6,3
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getRewriteMethod()",2,0,n/a,9,0,0,4,2
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getSpans(IndexReader)",1,12,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.hashCode()",1,23,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.rewrite(IndexReader)",2,30,n/a,7,0,1,4,2
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.setRewriteMethod(SpanRewriteMethod)",1,4,n/a,7,0,1,1,1
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.toString(String)",6,47,n/a,8,0,1,5,1
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.SpanNearPayloadCheckQuery(SpanNearQuery,Collection<byte[]>)",1,1,n/a,8,0,2,2,1
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.acceptPosition(Spans)",6,2,n/a,30,5,1,15,7
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()",4,27,n/a,6,0,0,3,1
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.equals(Object)",4,28,n/a,9,0,1,6,5
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.hashCode()",4,23,n/a,9,0,0,5,1
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.toString(String)",12,47,n/a,14,1,1,10,2
"org.apache.lucene.search.spans.SpanNearQuery.SpanNearQuery(SpanQuery[],int,boolean)",1,28,n/a,11,0,3,1,1
"org.apache.lucene.search.spans.SpanNearQuery.SpanNearQuery(SpanQuery[],int,boolean,boolean)",6,1,n/a,16,2,4,13,4
"org.apache.lucene.search.spans.SpanNearQuery.clone()",6,28,n/a,11,1,0,9,2
"org.apache.lucene.search.spans.SpanNearQuery.equals(Object)",3,29,n/a,11,0,1,12,6
"org.apache.lucene.search.spans.SpanNearQuery.extractTerms(Set<Term>)",1,24,n/a,6,1,1,2,2
"org.apache.lucene.search.spans.SpanNearQuery.getClauses()",2,6,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.SpanNearQuery.getField()",0,16,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanNearQuery.getSlop()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanNearQuery.getSpans(IndexReader)",9,12,n/a,10,0,1,5,4
"org.apache.lucene.search.spans.SpanNearQuery.hashCode()",3,24,n/a,13,0,0,7,2
"org.apache.lucene.search.spans.SpanNearQuery.isInOrder()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanNearQuery.rewrite(IndexReader)",5,30,n/a,18,2,1,13,5
"org.apache.lucene.search.spans.SpanNearQuery.toString(String)",18,47,n/a,20,2,1,15,3
"org.apache.lucene.search.spans.SpanNotQuery.SpanNotQuery(SpanQuery,SpanQuery)",4,5,n/a,8,0,2,4,2
"org.apache.lucene.search.spans.SpanNotQuery.clone()",5,29,n/a,6,0,0,3,1
"org.apache.lucene.search.spans.SpanNotQuery.equals(Object)",4,28,n/a,10,0,1,6,5
"org.apache.lucene.search.spans.SpanNotQuery.extractTerms(Set<Term>)",1,24,n/a,2,0,1,1,1
"org.apache.lucene.search.spans.SpanNotQuery.getExclude()",0,1,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanNotQuery.getField()",1,16,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanNotQuery.getInclude()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanNotQuery.getSpans(IndexReader)",42,12,n/a,4,4,1,32,22
"org.apache.lucene.search.spans.SpanNotQuery.hashCode()",4,23,n/a,9,0,0,6,1
"org.apache.lucene.search.spans.SpanNotQuery.rewrite(IndexReader)",4,30,n/a,19,1,1,13,5
"org.apache.lucene.search.spans.SpanNotQuery.toString(String)",12,47,n/a,11,0,1,8,1
"org.apache.lucene.search.spans.SpanOrQuery.SpanOrQuery(SpanQuery...)",2,9,n/a,8,1,1,5,2
"org.apache.lucene.search.spans.SpanOrQuery.SpanQueue.SpanQueue(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.spans.SpanOrQuery.SpanQueue.lessThan(Spans,Spans)",10,6,n/a,12,2,2,5,3
"org.apache.lucene.search.spans.SpanOrQuery.addClause(SpanQuery)",5,3,n/a,9,1,1,5,3
"org.apache.lucene.search.spans.SpanOrQuery.clone()",6,28,n/a,11,1,0,9,2
"org.apache.lucene.search.spans.SpanOrQuery.equals(Object)",7,28,n/a,9,0,1,10,7
"org.apache.lucene.search.spans.SpanOrQuery.extractTerms(Set<Term>)",1,24,n/a,6,1,1,2,2
"org.apache.lucene.search.spans.SpanOrQuery.getClauses()",2,2,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.SpanOrQuery.getField()",0,16,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanOrQuery.getSpans(IndexReader)",48,13,n/a,6,4,1,42,20
"org.apache.lucene.search.spans.SpanOrQuery.hashCode()",3,23,n/a,7,0,0,4,1
"org.apache.lucene.search.spans.SpanOrQuery.rewrite(IndexReader)",5,30,n/a,18,2,1,13,5
"org.apache.lucene.search.spans.SpanOrQuery.toString(String)",14,47,n/a,16,2,1,11,3
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.SpanPayloadCheckQuery(SpanQuery,Collection<byte[]>)",2,1,n/a,12,1,2,4,2
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.acceptPosition(Spans)",7,2,n/a,24,4,1,11,5
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()",4,27,n/a,6,0,0,3,1
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.equals(Object)",4,28,n/a,9,0,1,6,5
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.hashCode()",4,23,n/a,9,0,0,5,1
"org.apache.lucene.search.spans.SpanPayloadCheckQuery.toString(String)",12,47,n/a,14,1,1,10,2
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.PositionCheckSpan(IndexReader)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.doNext()",4,2,n/a,15,2,0,12,7
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.doc()",1,47,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.end()",1,29,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.getPayload()",3,10,n/a,8,1,0,4,2
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.isPayloadAvailable()",1,13,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.next()",2,25,n/a,6,0,0,3,2
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.skipTo(int)",2,12,n/a,6,0,1,3,2
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.start()",1,32,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.SpanPositionCheckQuery(SpanQuery)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.acceptPosition(Spans)",n/a,2,4,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.spans.SpanPositionCheckQuery.extractTerms(Set<Term>)",1,24,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.getField()",1,16,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.getMatch()",0,3,n/a,5,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.getSpans(IndexReader)",1,12,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.SpanPositionCheckQuery.rewrite(IndexReader)",2,30,n/a,14,1,1,8,3
"org.apache.lucene.search.spans.SpanPositionRangeQuery.SpanPositionRangeQuery(SpanQuery,int,int)",1,2,n/a,5,0,3,3,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.acceptPosition(Spans)",5,2,n/a,10,0,1,6,4
"org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()",4,27,n/a,6,0,0,3,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.equals(Object)",3,28,n/a,9,0,1,6,6
"org.apache.lucene.search.spans.SpanPositionRangeQuery.getEnd()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.getStart()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.hashCode()",3,23,n/a,7,0,0,4,1
"org.apache.lucene.search.spans.SpanPositionRangeQuery.toString(String)",13,47,n/a,11,0,1,8,1
"org.apache.lucene.search.spans.SpanQuery.createWeight(Searcher)",1,17,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.SpanQuery.getField()",n/a,16,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spans.SpanQuery.getSpans(IndexReader)",n/a,12,7,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.spans.SpanScorer.SpanScorer(Spans,Weight,Similarity,byte[])",3,3,n/a,13,1,4,8,2
"org.apache.lucene.search.spans.SpanScorer.advance(int)",3,55,n/a,13,1,1,7,4
"org.apache.lucene.search.spans.SpanScorer.docID()",0,45,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanScorer.explain(int)",6,3,n/a,10,0,1,6,2
"org.apache.lucene.search.spans.SpanScorer.freq()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.SpanScorer.nextDoc()",1,62,n/a,7,1,0,3,2
"org.apache.lucene.search.spans.SpanScorer.score()",4,65,n/a,5,0,0,2,2
"org.apache.lucene.search.spans.SpanScorer.setFreqCurrentDoc()",7,2,n/a,13,1,0,9,4
"org.apache.lucene.search.spans.SpanTermQuery.SpanTermQuery(Term)",0,50,n/a,2,0,1,1,1
"org.apache.lucene.search.spans.SpanTermQuery.equals(Object)",4,29,n/a,16,1,1,13,7
"org.apache.lucene.search.spans.SpanTermQuery.extractTerms(Set<Term>)",1,24,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.SpanTermQuery.getField()",1,16,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanTermQuery.getSpans(IndexReader)",2,12,n/a,4,0,1,1,1
"org.apache.lucene.search.spans.SpanTermQuery.getTerm()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanTermQuery.hashCode()",2,24,n/a,7,0,0,4,2
"org.apache.lucene.search.spans.SpanTermQuery.toString(String)",11,47,n/a,10,0,1,6,2
"org.apache.lucene.search.spans.SpanWeight.SpanWeight(SpanQuery,Searcher)",5,3,n/a,9,0,2,6,1
"org.apache.lucene.search.spans.SpanWeight.explain(IndexReader,int)",51,9,n/a,47,0,2,33,4
"org.apache.lucene.search.spans.SpanWeight.getQuery()",0,8,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanWeight.getValue()",0,9,n/a,2,0,0,1,1
"org.apache.lucene.search.spans.SpanWeight.normalize(float)",0,12,n/a,6,0,1,3,1
"org.apache.lucene.search.spans.SpanWeight.scorer(IndexReader,boolean,boolean)",5,19,n/a,9,1,3,3,2
"org.apache.lucene.search.spans.SpanWeight.sumOfSquaredWeights()",1,12,n/a,5,0,0,2,1
"org.apache.lucene.search.spans.Spans.doc()",n/a,47,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spans.Spans.end()",n/a,29,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spans.Spans.getPayload()",n/a,10,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spans.Spans.isPayloadAvailable()",n/a,13,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spans.Spans.next()",n/a,25,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spans.Spans.skipTo(int)",n/a,12,7,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.spans.Spans.start()",n/a,32,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spans.TermSpans.TermSpans(TermPositions,Term)",0,1,n/a,5,0,2,3,1
"org.apache.lucene.search.spans.TermSpans.doc()",0,47,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.TermSpans.end()",0,29,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.TermSpans.getPayload()",3,10,n/a,7,0,0,3,1
"org.apache.lucene.search.spans.TermSpans.getPositions()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.spans.TermSpans.isPayloadAvailable()",1,13,n/a,5,0,0,1,1
"org.apache.lucene.search.spans.TermSpans.next()",4,25,n/a,15,2,0,10,3
"org.apache.lucene.search.spans.TermSpans.skipTo(int)",4,12,n/a,13,1,1,9,2
"org.apache.lucene.search.spans.TermSpans.start()",0,32,n/a,4,0,0,1,1
"org.apache.lucene.search.spans.TermSpans.toString()",1,0,n/a,5,0,0,1,3
"org.apache.lucene.search.spell.Dictionary.getWordsIterator()",n/a,2,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyDictionary(IndexReader,String,float)",1,5,n/a,5,0,3,3,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.HighFrequencyIterator()",6,1,n/a,10,1,0,6,3
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.getComparator()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.isFrequent(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.next()",9,0,n/a,19,3,0,12,6
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator.weight()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.spell.HighFrequencyDictionary.getWordsIterator()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.spell.JaroWinklerDistance.getDistance(String,String)",5,0,n/a,11,1,2,7,3
"org.apache.lucene.search.spell.JaroWinklerDistance.getThreshold()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.search.spell.JaroWinklerDistance.matches(String,String)",21,1,n/a,56,3,2,51,14
"org.apache.lucene.search.spell.JaroWinklerDistance.setThreshold(float)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.search.spell.LevensteinDistance.LevensteinDistance()",0,3,n/a,6,0,0,0,1
"org.apache.lucene.search.spell.LevensteinDistance.getDistance(String,String)",7,0,n/a,62,2,2,36,8
"org.apache.lucene.search.spell.LuceneDictionary.LuceneDictionary(IndexReader,String)",1,0,n/a,4,0,2,2,1
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator.TermIterator()",5,1,n/a,9,1,0,5,3
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator.getComparator()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator.next()",7,0,n/a,17,3,0,11,5
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator.weight()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.spell.LuceneDictionary.getWordsIterator()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.spell.NGramDistance.NGramDistance()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.search.spell.NGramDistance.NGramDistance(int)",0,2,n/a,7,0,1,1,1
"org.apache.lucene.search.spell.NGramDistance.getDistance(String,String)",13,0,n/a,81,4,2,65,19
"org.apache.lucene.search.spell.PlainTextDictionary.FileIterator.getComparator()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.spell.PlainTextDictionary.FileIterator.next()",4,38,n/a,25,2,0,16,4
"org.apache.lucene.search.spell.PlainTextDictionary.PlainTextDictionary(File)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.search.spell.PlainTextDictionary.PlainTextDictionary(InputStream)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.search.spell.PlainTextDictionary.PlainTextDictionary(Reader)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.search.spell.PlainTextDictionary.getWordsIterator()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.spell.SpellChecker.SpellChecker(Directory)",2,1,n/a,13,0,1,1,1
"org.apache.lucene.search.spell.SpellChecker.SpellChecker(Directory,StringDistance)",1,1,n/a,10,0,2,1,1
"org.apache.lucene.search.spell.SpellChecker.SpellChecker(Directory,StringDistance,Comparator<SuggestWord>)",2,2,n/a,13,0,3,3,1
"org.apache.lucene.search.spell.SpellChecker.add(BooleanQuery,String,String)",4,1,n/a,6,0,3,1,1
"org.apache.lucene.search.spell.SpellChecker.add(BooleanQuery,String,String,float)",5,2,n/a,8,0,4,3,1
"org.apache.lucene.search.spell.SpellChecker.addGram(String,Document,int,int)",13,1,n/a,30,3,4,24,5
"org.apache.lucene.search.spell.SpellChecker.clearIndex()",7,1,n/a,17,1,0,6,1
"org.apache.lucene.search.spell.SpellChecker.close()",2,0,n/a,15,2,0,6,2
"org.apache.lucene.search.spell.SpellChecker.createDocument(String,int,int)",6,1,n/a,11,0,3,7,1
"org.apache.lucene.search.spell.SpellChecker.createSearcher(Directory)",1,1,n/a,10,0,1,1,1
"org.apache.lucene.search.spell.SpellChecker.ensureOpen()",1,5,n/a,5,1,0,2,2
"org.apache.lucene.search.spell.SpellChecker.exist(String)",4,1,n/a,16,1,1,4,1
"org.apache.lucene.search.spell.SpellChecker.formGrams(String,int)",2,1,n/a,14,1,2,7,2
"org.apache.lucene.search.spell.SpellChecker.getAccuracy()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.search.spell.SpellChecker.getComparator()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.spell.SpellChecker.getMax(int)",0,2,n/a,9,1,1,5,3
"org.apache.lucene.search.spell.SpellChecker.getMin(int)",0,2,n/a,9,1,1,5,3
"org.apache.lucene.search.spell.SpellChecker.getStringDistance()",0,0,n/a,10,0,0,1,1
"org.apache.lucene.search.spell.SpellChecker.indexDictionary(Dictionary,IndexWriterConfig,boolean)",22,1,n/a,56,6,3,30,8
"org.apache.lucene.search.spell.SpellChecker.isClosed()",0,0,n/a,10,0,0,1,1
"org.apache.lucene.search.spell.SpellChecker.obtainSearcher()",3,3,n/a,7,1,0,4,1
"org.apache.lucene.search.spell.SpellChecker.releaseSearcher(IndexSearcher)",2,3,n/a,5,0,1,1,1
"org.apache.lucene.search.spell.SpellChecker.setAccuracy(float)",0,2,n/a,7,0,1,1,1
"org.apache.lucene.search.spell.SpellChecker.setComparator(Comparator<SuggestWord>)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.spell.SpellChecker.setSpellIndex(Directory)",7,2,n/a,23,2,1,6,2
"org.apache.lucene.search.spell.SpellChecker.setStringDistance(StringDistance)",0,1,n/a,10,0,1,1,1
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int)",1,0,n/a,22,0,2,1,1
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,IndexReader,String,SuggestMode)",1,0,n/a,9,0,5,1,1
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,IndexReader,String,SuggestMode,float)",29,4,n/a,107,4,6,59,24
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,IndexReader,String,boolean)",1,2,n/a,40,0,5,1,1
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,IndexReader,String,boolean,float)",1,4,n/a,40,0,6,1,2
"org.apache.lucene.search.spell.SpellChecker.suggestSimilar(String,int,float)",1,0,n/a,23,0,3,1,1
"org.apache.lucene.search.spell.SpellChecker.swapSearcher(Directory)",4,3,n/a,20,2,1,9,3
"org.apache.lucene.search.spell.StringDistance.getDistance(String,String)",n/a,2,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.spell.SuggestWordFrequencyComparator.compare(SuggestWord,SuggestWord)",1,0,n/a,18,1,2,9,5
"org.apache.lucene.search.spell.SuggestWordQueue.SuggestWordQueue(int)",1,1,n/a,8,0,1,2,1
"org.apache.lucene.search.spell.SuggestWordQueue.SuggestWordQueue(int,Comparator<SuggestWord>)",1,0,n/a,9,0,2,2,1
"org.apache.lucene.search.spell.SuggestWordQueue.lessThan(SuggestWord,SuggestWord)",1,6,n/a,5,0,2,2,1
"org.apache.lucene.search.spell.SuggestWordScoreComparator.compare(SuggestWord,SuggestWord)",1,0,n/a,18,1,2,9,5
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper.TermFreqIteratorWrapper(BytesRefIterator)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper.getComparator()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper.next()",1,38,n/a,3,0,0,1,1
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper.weight()",0,11,n/a,3,0,0,1,1
"org.apache.lucene.search.spell.TermFreqIterator.weight()",n/a,11,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.spell.TestJaroWinklerDistance.testGetDistance()",20,0,n/a,22,0,0,20,6
"org.apache.lucene.search.spell.TestLevenshteinDistance.testEmpty()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.search.spell.TestLevenshteinDistance.testGetDistance()",20,0,n/a,22,0,0,20,1
"org.apache.lucene.search.spell.TestLuceneDictionary.setUp()",27,0,n/a,24,0,0,21,1
"org.apache.lucene.search.spell.TestLuceneDictionary.tearDown()",3,0,n/a,7,0,0,4,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldAaa()",11,0,n/a,12,2,0,9,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldContents_1()",20,0,n/a,22,2,0,17,3
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldContents_2()",12,0,n/a,14,2,0,9,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldNonExistent()",6,0,n/a,10,2,0,7,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testFieldZzz()",10,0,n/a,13,2,0,9,2
"org.apache.lucene.search.spell.TestLuceneDictionary.testSpellchecker()",15,0,n/a,15,0,0,13,1
"org.apache.lucene.search.spell.TestNGramDistance.testEmpty()",3,0,n/a,5,0,0,3,1
"org.apache.lucene.search.spell.TestNGramDistance.testGetDistance1()",30,0,n/a,32,0,0,30,1
"org.apache.lucene.search.spell.TestNGramDistance.testGetDistance2()",32,0,n/a,34,0,0,32,1
"org.apache.lucene.search.spell.TestNGramDistance.testGetDistance3()",30,0,n/a,32,0,0,30,1
"org.apache.lucene.search.spell.TestPlainTextDictionary.testBuild()",13,0,n/a,14,0,0,12,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckWorker.SpellCheckWorker(IndexReader)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckWorker.run()",2,0,n/a,17,3,0,9,4
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock.SpellCheckerMock(Directory)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock.SpellCheckerMock(Directory,StringDistance)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock.SpellCheckerMock(Directory,StringDistance,Comparator<SuggestWord>)",1,2,n/a,3,0,3,1,1
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock.createSearcher(Directory)",2,0,n/a,6,0,1,3,1
"org.apache.lucene.search.spell.TestSpellChecker.addwords(IndexReader,SpellChecker,String)",5,9,n/a,6,0,3,3,1
"org.apache.lucene.search.spell.TestSpellChecker.assertLastSearcherOpen(int)",9,2,n/a,13,2,1,8,3
"org.apache.lucene.search.spell.TestSpellChecker.assertSearchersClosed()",3,3,n/a,5,1,0,2,2
"org.apache.lucene.search.spell.TestSpellChecker.checkCommonSuggestions(IndexReader)",19,6,n/a,25,1,1,19,2
"org.apache.lucene.search.spell.TestSpellChecker.checkJaroWinklerSuggestions()",4,1,n/a,6,0,0,4,1
"org.apache.lucene.search.spell.TestSpellChecker.checkLevenshteinSuggestions(IndexReader)",33,1,n/a,43,1,1,34,2
"org.apache.lucene.search.spell.TestSpellChecker.checkNGramSuggestions()",4,1,n/a,6,0,0,4,1
"org.apache.lucene.search.spell.TestSpellChecker.numdoc()",4,6,n/a,8,0,0,5,1
"org.apache.lucene.search.spell.TestSpellChecker.setUp()",32,0,n/a,42,1,0,24,3
"org.apache.lucene.search.spell.TestSpellChecker.tearDown()",5,0,n/a,8,0,0,5,2
"org.apache.lucene.search.spell.TestSpellChecker.testBogusField()",12,0,n/a,13,0,0,10,2
"org.apache.lucene.search.spell.TestSpellChecker.testBuild()",28,0,n/a,29,0,0,26,1
"org.apache.lucene.search.spell.TestSpellChecker.testClose()",27,0,n/a,47,1,0,30,6
"org.apache.lucene.search.spell.TestSpellChecker.testComparator()",14,0,n/a,16,0,0,12,2
"org.apache.lucene.search.spell.TestSpellChecker.testConcurrentAccess()",33,0,n/a,48,1,0,37,4
"org.apache.lucene.search.spell.TestSpellChecker.testSuggestModes()",24,0,n/a,47,1,0,24,1
"org.apache.lucene.search.suggest.Average.Average(double,double)",0,1,n/a,8,0,2,2,1
"org.apache.lucene.search.suggest.Average.from(List<Double>)",5,0,n/a,14,1,1,7,2
"org.apache.lucene.search.suggest.Average.toString()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper.BufferingTermFreqIteratorWrapper(TermFreqIterator)",5,0,n/a,12,2,1,8,3
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper.getComparator()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper.next()",2,38,n/a,8,1,0,4,2
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper.weight()",0,11,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.BytesRefList.BytesRefList()",4,4,n/a,10,0,0,3,1
"org.apache.lucene.search.suggest.BytesRefList.append(BytesRef)",3,4,n/a,17,1,1,8,2
"org.apache.lucene.search.suggest.BytesRefList.bytesUsed()",1,1,n/a,10,0,0,1,1
"org.apache.lucene.search.suggest.BytesRefList.clear()",2,3,n/a,9,0,0,4,1
"org.apache.lucene.search.suggest.BytesRefList.get(BytesRef,int)",2,7,n/a,17,1,2,6,3
"org.apache.lucene.search.suggest.BytesRefList.iterator()",1,1,n/a,6,0,0,1,1
"org.apache.lucene.search.suggest.BytesRefList.iterator(Comparator<BytesRef>)",5,5,n/a,4,3,1,8,4
"org.apache.lucene.search.suggest.BytesRefList.size()",0,4,n/a,7,0,0,1,1
"org.apache.lucene.search.suggest.BytesRefList.sort(Comparator<BytesRef>)",13,1,n/a,5,2,1,16,2
"org.apache.lucene.search.suggest.FileDictionary.FileDictionary(InputStream)",2,0,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.FileDictionary.FileDictionary(Reader)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.search.suggest.FileDictionary.FileIterator.getComparator()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.FileDictionary.FileIterator.next()",7,38,n/a,27,3,0,16,5
"org.apache.lucene.search.suggest.FileDictionary.FileIterator.weight()",0,11,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.FileDictionary.getWordsIterator()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.Lookup.CharSequenceComparator.compare(CharSequence,CharSequence)",5,0,n/a,14,2,2,10,3
"org.apache.lucene.search.suggest.Lookup.LookupPriorityQueue.LookupPriorityQueue(int)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.search.suggest.Lookup.LookupPriorityQueue.getResults()",2,2,n/a,12,1,0,7,2
"org.apache.lucene.search.suggest.Lookup.LookupPriorityQueue.lessThan(LookupResult,LookupResult)",0,6,n/a,4,0,2,1,1
"org.apache.lucene.search.suggest.Lookup.LookupResult.LookupResult(CharSequence,long)",0,10,n/a,4,0,2,2,1
"org.apache.lucene.search.suggest.Lookup.LookupResult.compareTo(LookupResult)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.search.suggest.Lookup.LookupResult.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.Lookup.build(Dictionary)",3,1,n/a,15,1,1,6,2
"org.apache.lucene.search.suggest.Lookup.build(TermFreqIterator)",n/a,1,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.suggest.Lookup.load(InputStream)",n/a,3,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.suggest.Lookup.lookup(CharSequence,boolean,int)",n/a,3,5,n/a,n/a,3,n/a,n/a
"org.apache.lucene.search.suggest.Lookup.store(OutputStream)",n/a,2,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.suggest.LookupBenchmarkTest.BenchmarkResult.BenchmarkResult(List<Double>,int,int)",3,1,n/a,3,0,3,1,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.buildLookup(Class<? extends Lookup>,TermFreq[])",3,3,n/a,8,0,2,3,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.measure(Callable<Integer>)",8,2,n/a,17,2,1,11,3
"org.apache.lucene.search.suggest.LookupBenchmarkTest.readTop50KWiki()",14,2,n/a,19,1,0,13,2
"org.apache.lucene.search.suggest.LookupBenchmarkTest.runPerformanceTest(int,int,int,boolean)",21,3,n/a,7,4,4,12,4
"org.apache.lucene.search.suggest.LookupBenchmarkTest.setup()",5,0,n/a,12,0,0,6,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testConstructionTime()",9,0,n/a,4,3,0,6,2
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testPerformanceOnFullHits()",1,0,n/a,8,0,0,3,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testPerformanceOnPrefixes2_4()",1,0,n/a,8,0,0,3,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testPerformanceOnPrefixes6_9()",1,0,n/a,8,0,0,3,1
"org.apache.lucene.search.suggest.LookupBenchmarkTest.testStorageNeeds()",7,0,n/a,13,1,0,4,2
"org.apache.lucene.search.suggest.PersistenceTest.runTest(Class<? extends Lookup>,boolean)",21,3,n/a,29,2,2,21,4
"org.apache.lucene.search.suggest.PersistenceTest.testFSTPersistence()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.PersistenceTest.testJaspellPersistence()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.PersistenceTest.testTSTPersistence()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.BytesOnlyComparator.BytesOnlyComparator(Comparator<BytesRef>)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.BytesOnlyComparator.compare(BytesRef,BytesRef)",3,0,n/a,6,0,2,3,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.BytesOnlyComparator.wrap(BytesRef,BytesRef)",0,2,n/a,5,0,2,3,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator<BytesRef>)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.SortedTermFreqIteratorWrapper(TermFreqIterator,Comparator<BytesRef>,boolean)",2,2,n/a,5,0,3,3,2
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.close()",3,3,n/a,9,1,0,5,3
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.decode(BytesRef,ByteArrayDataInput)",3,1,n/a,6,0,2,4,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,long)",6,1,n/a,9,1,5,6,2
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.getComparator()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.next()",5,38,n/a,23,2,0,15,4
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.sort(Comparator<BytesRef>)",17,1,n/a,31,3,1,22,3
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.weight()",0,11,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.TermFreq.TermFreq(BytesRef,long)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.suggest.TermFreq.TermFreq(String,long)",2,6,n/a,3,0,2,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.TermFreqArrayIterator(Iterable<TermFreq>)",2,0,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.TermFreqArrayIterator(Iterator<TermFreq>)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.TermFreqArrayIterator(TermFreq[])",2,0,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.getComparator()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.TermFreqArrayIterator.next()",3,38,n/a,9,1,0,5,2
"org.apache.lucene.search.suggest.TermFreqArrayIterator.weight()",0,11,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.TestBytesRefList.testAppend()",26,0,n/a,37,3,0,34,9
"org.apache.lucene.search.suggest.TestBytesRefList.testSort()",22,0,n/a,30,2,0,25,6
"org.apache.lucene.search.suggest.TestHighFrequencyDictionary.testEmpty()",14,0,n/a,12,0,0,10,1
"org.apache.lucene.search.suggest.TestTermFreqIterator.asIntInternal(BytesRef,int)",0,2,n/a,4,0,2,1,1
"org.apache.lucene.search.suggest.TestTermFreqIterator.asLong(BytesRef)",2,1,n/a,4,0,1,1,1
"org.apache.lucene.search.suggest.TestTermFreqIterator.testEmpty()",8,0,n/a,7,0,0,5,1
"org.apache.lucene.search.suggest.TestTermFreqIterator.testRaw()",28,0,n/a,37,3,0,34,5
"org.apache.lucene.search.suggest.TestTermFreqIterator.testTerms()",34,0,n/a,33,2,0,27,6
"org.apache.lucene.search.suggest.UnsortedTermFreqIteratorWrapper.UnsortedTermFreqIteratorWrapper(TermFreqIterator)",4,1,n/a,14,1,1,14,3
"org.apache.lucene.search.suggest.UnsortedTermFreqIteratorWrapper.next()",2,0,n/a,7,1,0,3,2
"org.apache.lucene.search.suggest.UnsortedTermFreqIteratorWrapper.weight()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.BytesRefSorter.add(BytesRef)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.suggest.fst.BytesRefSorter.getComparator()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.suggest.fst.BytesRefSorter.iterator()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.search.suggest.fst.BytesRefSortersTest.check(BytesRefSorter)",16,2,n/a,24,1,1,17,5
"org.apache.lucene.search.suggest.fst.BytesRefSortersTest.testExternalRefSorter()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.BytesRefSortersTest.testInMemorySorter()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ByteSequenceIterator.ByteSequenceIterator(ByteSequencesReader,Comparator<BytesRef>)",0,1,n/a,5,0,2,2,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ByteSequenceIterator.getComparator()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ByteSequenceIterator.next()",3,38,n/a,24,2,0,15,4
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ExternalRefSorter(Sort)",3,0,n/a,9,0,1,3,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.add(BytesRef)",2,0,n/a,5,0,1,3,2
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.close()",3,0,n/a,12,1,0,6,3
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.closeWriter()",1,2,n/a,6,1,0,3,2
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.getComparator()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.iterator()",8,0,n/a,12,1,0,7,2
"org.apache.lucene.search.suggest.fst.FSTCompletion.Completion.Completion(BytesRef,int)",1,2,n/a,4,0,2,2,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.Completion.compareTo(Completion)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.Completion.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.FSTCompletion(FST<Object>)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.FSTCompletion(FST<Object>,boolean,boolean)",1,4,n/a,23,1,3,6,2
"org.apache.lucene.search.suggest.fst.FSTCompletion.cacheRootArcs(FST<Object>)",13,1,n/a,21,2,1,12,4
"org.apache.lucene.search.suggest.fst.FSTCompletion.checkExistingAndReorder(ArrayList<Completion>,BytesRef)",5,1,n/a,23,2,2,6,3
"org.apache.lucene.search.suggest.fst.FSTCompletion.collect(List<Completion>,int,int,BytesRef,Arc<Object>)",10,2,n/a,33,3,5,18,7
"org.apache.lucene.search.suggest.fst.FSTCompletion.descendWithPrefix(Arc<Object>,BytesRef)",2,2,n/a,26,2,2,8,3
"org.apache.lucene.search.suggest.fst.FSTCompletion.getBucket(CharSequence)",2,0,n/a,7,0,1,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.getBucketCount()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.getExactMatchStartingFromRootArc(int,BytesRef)",5,2,n/a,38,4,2,12,5
"org.apache.lucene.search.suggest.fst.FSTCompletion.getFST()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletion.lookup(CharSequence,int)",5,0,n/a,31,2,2,8,6
"org.apache.lucene.search.suggest.fst.FSTCompletion.lookupSortedAlphabetically(BytesRef,int)",4,2,n/a,16,1,2,5,2
"org.apache.lucene.search.suggest.fst.FSTCompletion.lookupSortedByWeight(BytesRef,int,boolean)",14,2,n/a,47,7,3,19,9
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.FSTCompletionBuilder()",3,0,n/a,8,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.FSTCompletionBuilder(int,BytesRefSorter,int)",2,1,n/a,31,1,3,7,4
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.add(BytesRef,int)",4,2,n/a,25,1,2,8,4
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.build()",3,1,n/a,11,1,0,4,2
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder.buildAutomaton(BytesRefSorter)",12,1,n/a,24,2,1,14,4
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.FSTCompletionLookup()",1,0,n/a,9,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.FSTCompletionLookup(FSTCompletion,boolean)",5,1,n/a,17,0,2,3,1
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.FSTCompletionLookup(int,boolean)",0,2,n/a,17,0,2,2,1
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.build(TermFreqIterator)",41,3,n/a,74,3,1,50,7
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.encodeWeight(long)",1,1,n/a,7,1,1,3,3
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.get(CharSequence)",2,0,n/a,4,0,1,2,2
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.load(InputStream)",7,3,n/a,12,1,1,5,1
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.lookup(CharSequence,boolean,int)",10,3,n/a,17,1,3,11,3
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup.store(OutputStream)",5,2,n/a,11,1,1,6,3
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.assertMatchEquals(List<Completion>,String...)",20,11,n/a,19,2,2,16,6
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.evalKeys()",18,1,n/a,23,0,0,2,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.maxLen(String[])",2,2,n/a,6,0,1,4,2
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.setUp()",7,0,n/a,9,1,0,6,2
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.stripScore(String[])",1,2,n/a,7,1,1,6,2
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testAlphabeticWithWeights()",4,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testEmptyInput()",5,0,n/a,4,0,0,2,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testExactMatchHighPriority()",3,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testExactMatchLowPriority()",3,0,n/a,5,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testExactMatchReordering()",3,0,n/a,8,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testFullMatchList()",3,0,n/a,7,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testLargeInputConstantWeights()",11,0,n/a,19,2,0,14,4
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testMiss()",3,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testMultilingualInput()",26,0,n/a,13,1,0,10,2
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testRandom()",19,0,n/a,19,3,0,17,5
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testRequestedCount()",20,0,n/a,29,0,0,7,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.testThreeByte()",9,0,n/a,9,0,0,6,1
"org.apache.lucene.search.suggest.fst.FSTCompletionTest.tf(String,int)",1,18,n/a,3,0,2,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.Entry.Entry(char[],float)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.search.suggest.fst.FSTLookup.FSTLookup()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.FSTLookup(int,boolean)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.search.suggest.fst.FSTLookup.build(TermFreqIterator)",14,7,n/a,30,1,1,15,4
"org.apache.lucene.search.suggest.fst.FSTLookup.buildAutomaton(List<Entry>)",18,1,n/a,12,3,1,38,8
"org.apache.lucene.search.suggest.fst.FSTLookup.cacheRootArcs()",12,2,n/a,19,2,0,11,4
"org.apache.lucene.search.suggest.fst.FSTLookup.checkExistingAndReorder(ArrayList<LookupResult>,CharSequence)",5,1,n/a,18,2,2,6,3
"org.apache.lucene.search.suggest.fst.FSTLookup.collect(List<LookupResult>,int,long,StringBuilder,Arc<Object>)",13,2,n/a,28,3,5,15,6
"org.apache.lucene.search.suggest.fst.FSTLookup.descendWithPrefix(Arc<Object>,CharSequence)",4,2,n/a,21,2,2,8,3
"org.apache.lucene.search.suggest.fst.FSTLookup.encodeWeightPrefix(List<Entry>)",0,1,n/a,14,1,1,4,3
"org.apache.lucene.search.suggest.fst.FSTLookup.get(CharSequence)",1,1,n/a,10,0,1,1,1
"org.apache.lucene.search.suggest.fst.FSTLookup.getExactMatchStartingFromRootArc(int,CharSequence)",5,2,n/a,29,4,2,12,5
"org.apache.lucene.search.suggest.fst.FSTLookup.load(InputStream)",6,3,n/a,11,1,1,6,1
"org.apache.lucene.search.suggest.fst.FSTLookup.lookup(CharSequence,boolean,int)",4,18,n/a,31,2,3,7,6
"org.apache.lucene.search.suggest.fst.FSTLookup.lookupSortedAlphabetically(CharSequence,int)",6,2,n/a,4,2,2,6,2
"org.apache.lucene.search.suggest.fst.FSTLookup.lookupSortedByWeight(CharSequence,int,boolean)",17,2,n/a,46,7,3,21,9
"org.apache.lucene.search.suggest.fst.FSTLookup.redistributeWeightsProportionalMinMax(List<Entry>,int)",3,1,n/a,16,1,2,8,3
"org.apache.lucene.search.suggest.fst.FSTLookup.store(OutputStream)",4,2,n/a,10,1,1,5,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.assertMatchEquals(List<LookupResult>,String...)",18,11,n/a,18,2,2,16,6
"org.apache.lucene.search.suggest.fst.FSTLookupTest.evalKeys()",18,2,n/a,23,0,0,2,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.maxLen(String[])",2,2,n/a,6,0,1,4,2
"org.apache.lucene.search.suggest.fst.FSTLookupTest.setUp()",5,0,n/a,5,0,0,3,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testAlphabeticWithWeights()",3,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testEmptyInput()",5,0,n/a,5,0,0,3,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testExactMatchHighPriority()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testExactMatchLowPriority()",2,0,n/a,5,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testFullMatchList()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testMiss()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testMultilingualInput()",13,0,n/a,9,1,0,6,2
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testRandom()",18,0,n/a,18,3,0,16,5
"org.apache.lucene.search.suggest.fst.FSTLookupTest.testRequestedCount()",16,0,n/a,30,0,0,8,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest.tf(String,long)",1,18,n/a,3,0,2,1,1
"org.apache.lucene.search.suggest.fst.InMemorySorter.InMemorySorter(Comparator<BytesRef>)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.fst.InMemorySorter.add(BytesRef)",2,0,n/a,5,0,1,3,2
"org.apache.lucene.search.suggest.fst.InMemorySorter.getComparator()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.InMemorySorter.iterator()",1,0,n/a,5,0,0,2,1
"org.apache.lucene.search.suggest.fst.LargeInputFST.main(String[])",19,0,n/a,25,2,1,19,3
"org.apache.lucene.search.suggest.fst.Sort.BufferSize.BufferSize(long)",1,3,n/a,7,1,1,3,2
"org.apache.lucene.search.suggest.fst.Sort.BufferSize.automatic()",8,4,n/a,20,1,0,9,2
"org.apache.lucene.search.suggest.fst.Sort.BufferSize.megabytes(int)",1,4,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.ByteSequencesReader(DataInput)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.ByteSequencesReader(File)",4,2,n/a,5,0,1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.close()",1,0,n/a,9,1,0,2,2
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.read()",2,3,n/a,21,1,0,8,2
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader.read(BytesRef)",3,3,n/a,21,1,1,9,2
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.ByteSequencesWriter(DataOutput)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.ByteSequencesWriter(File)",4,3,n/a,5,0,1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.close()",1,3,n/a,9,1,0,2,2
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.write(BytesRef)",1,2,n/a,4,0,1,2,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.write(byte[])",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter.write(byte[],int,int)",2,4,n/a,7,0,3,5,2
"org.apache.lucene.search.suggest.fst.Sort.FileAndTop.FileAndTop(int,byte[])",1,1,n/a,4,0,2,2,1
"org.apache.lucene.search.suggest.fst.Sort.Sort()",3,0,n/a,9,0,0,1,1
"org.apache.lucene.search.suggest.fst.Sort.Sort(Comparator<BytesRef>)",3,1,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.fst.Sort.Sort(Comparator<BytesRef>,BufferSize,File,int)",2,2,n/a,15,1,4,8,3
"org.apache.lucene.search.suggest.fst.Sort.SortInfo.toString()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.search.suggest.fst.Sort.copy(File,File)",5,1,n/a,19,2,2,10,2
"org.apache.lucene.search.suggest.fst.Sort.defaultTempDir()",7,4,n/a,15,1,0,7,4
"org.apache.lucene.search.suggest.fst.Sort.getComparator()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.suggest.fst.Sort.mergePartitions(List<File>,File)",21,2,n/a,3,3,2,26,5
"org.apache.lucene.search.suggest.fst.Sort.readPartition(ByteSequencesReader)",7,1,n/a,16,2,1,9,3
"org.apache.lucene.search.suggest.fst.Sort.sort(File,File)",24,2,n/a,53,4,2,32,8
"org.apache.lucene.search.suggest.fst.Sort.sortPartition(int)",10,1,n/a,22,2,1,15,2
"org.apache.lucene.search.suggest.fst.TestSort.assertFilesIdentical(File,File)",11,1,n/a,18,2,2,13,3
"org.apache.lucene.search.suggest.fst.TestSort.checkSort(Sort,byte[][])",6,5,n/a,14,0,2,7,1
"org.apache.lucene.search.suggest.fst.TestSort.cleanup()",1,0,n/a,5,0,0,2,2
"org.apache.lucene.search.suggest.fst.TestSort.generateRandom(int)",6,3,n/a,11,1,1,8,2
"org.apache.lucene.search.suggest.fst.TestSort.prepareTempDir()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.search.suggest.fst.TestSort.testEmpty()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.fst.TestSort.testIntermediateMerges()",6,0,n/a,7,0,0,2,1
"org.apache.lucene.search.suggest.fst.TestSort.testLargerRandom()",5,0,n/a,6,0,0,1,1
"org.apache.lucene.search.suggest.fst.TestSort.testSingleLine()",3,0,n/a,6,0,0,1,1
"org.apache.lucene.search.suggest.fst.TestSort.testSmallRandom()",6,0,n/a,7,0,0,2,1
"org.apache.lucene.search.suggest.fst.TestSort.writeAll(String,byte[][])",4,2,n/a,9,1,2,6,2
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTCompletionLookup()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTCompletionLookup(boolean)",0,2,n/a,11,0,1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTTermFreqIteratorWrapper.WFSTTermFreqIteratorWrapper(TermFreqIterator,Comparator<BytesRef>)",1,1,n/a,4,0,2,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTTermFreqIteratorWrapper.decode(BytesRef,ByteArrayDataInput)",3,1,n/a,7,0,2,4,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTTermFreqIteratorWrapper.encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,long)",8,1,n/a,11,1,5,7,2
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.build(TermFreqIterator)",14,1,n/a,23,2,1,16,4
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.decodeWeight(long)",0,3,n/a,4,0,1,1,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.encodeWeight(long)",1,1,n/a,7,1,1,3,3
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.get(CharSequence)",7,0,n/a,16,1,1,8,4
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.load(InputStream)",4,3,n/a,9,1,1,4,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.lookup(CharSequence,boolean,int)",25,3,n/a,41,2,3,31,8
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.lookupPrefix(BytesRef,Arc<Long>)",6,2,n/a,17,2,2,12,3
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.store(OutputStream)",3,2,n/a,12,2,1,6,2
"org.apache.lucene.search.suggest.fst.WFSTCompletionTest.test()",58,0,n/a,36,0,0,25,1
"org.apache.lucene.search.suggest.fst.WFSTCompletionTest.testRandom()",48,0,n/a,8,4,0,42,11
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.add(CharSequence,Object)",1,0,n/a,5,0,2,2,1
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.build(TermFreqIterator)",12,1,n/a,21,2,1,13,4
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.get(CharSequence)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.load(InputStream)",5,3,n/a,12,1,1,7,1
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.lookup(CharSequence,boolean,int)",20,3,n/a,32,2,3,23,9
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.readRecursively(DataInputStream,TSTNode)",10,4,n/a,22,1,2,16,5
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.store(OutputStream)",5,2,n/a,15,1,1,9,2
"org.apache.lucene.search.suggest.jaspell.JaspellLookup.writeRecursively(DataOutputStream,TSTNode)",7,4,n/a,18,1,2,18,7
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.JaspellTernarySearchTrie()",0,1,n/a,5,0,0,0,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.JaspellTernarySearchTrie(File)",1,0,n/a,13,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.JaspellTernarySearchTrie(File,boolean)",27,1,n/a,70,5,2,44,14
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.TSTNode.TSTNode(char,TSTNode)",0,5,n/a,12,0,2,2,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.compareCharsAlphabetically(char,char)",2,4,n/a,13,0,2,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.deleteNode(TSTNode)",1,1,n/a,18,1,1,5,3
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.deleteNodeRecursion(TSTNode)",1,1,n/a,89,2,1,50,17
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.get(CharSequence)",1,0,n/a,14,1,1,4,2
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getAndIncrement(String)",7,0,n/a,23,1,1,10,3
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getKey(TSTNode)",6,3,n/a,25,2,1,14,3
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getNode(CharSequence)",1,4,n/a,12,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getNode(CharSequence,TSTNode)",4,1,n/a,36,3,2,16,9
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getOrCreateNode(CharSequence)",14,2,n/a,56,3,1,24,11
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.getRoot()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchAlmost(CharSequence,int)",2,1,n/a,20,0,2,1,2
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchAlmost(String)",1,0,n/a,17,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchAlmostRecursion(TSTNode,int,int,CharSequence,int,List<String>,boolean)",10,4,n/a,58,1,7,14,15
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchPrefix(CharSequence,int)",5,1,n/a,24,1,2,7,4
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.matchPrefix(String)",1,0,n/a,13,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.numDataNodes()",1,0,n/a,8,0,0,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.numDataNodes(TSTNode)",1,1,n/a,11,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.numNodes()",1,0,n/a,9,0,0,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.numNodes(TSTNode)",1,1,n/a,11,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.put(CharSequence,Object)",1,1,n/a,11,0,2,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.recursiveNodeCalculator(TSTNode,boolean,int)",3,5,n/a,31,2,3,10,4
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.remove(String)",4,0,n/a,11,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.setMatchAlmostDiff(int)",0,0,n/a,20,1,1,5,3
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.setNumReturnValues(int)",0,0,n/a,16,0,1,1,2
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.setRoot(TSTNode)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.sortKeys(TSTNode,int)",2,0,n/a,17,0,2,1,2
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.sortKeysRecursion(TSTNode,int,List<String>)",6,5,n/a,36,1,3,9,5
"org.apache.lucene.search.suggest.tst.TSTAutocomplete.balancedTree(Object[],Object[],int,int,TernaryTreeNode)",3,2,n/a,22,0,5,6,2
"org.apache.lucene.search.suggest.tst.TSTAutocomplete.insert(TernaryTreeNode,CharSequence,Object,int)",13,5,n/a,44,2,4,21,8
"org.apache.lucene.search.suggest.tst.TSTAutocomplete.prefixCompletion(TernaryTreeNode,CharSequence,int)",15,0,n/a,62,3,3,35,16
"org.apache.lucene.search.suggest.tst.TSTLookup.add(CharSequence,Object)",1,0,n/a,5,0,2,2,1
"org.apache.lucene.search.suggest.tst.TSTLookup.build(TermFreqIterator)",20,1,n/a,20,1,1,13,3
"org.apache.lucene.search.suggest.tst.TSTLookup.charSeqEquals(CharSequence,CharSequence)",4,1,n/a,12,2,2,9,4
"org.apache.lucene.search.suggest.tst.TSTLookup.get(CharSequence)",3,0,n/a,12,2,1,7,5
"org.apache.lucene.search.suggest.tst.TSTLookup.load(InputStream)",4,3,n/a,11,1,1,6,1
"org.apache.lucene.search.suggest.tst.TSTLookup.lookup(CharSequence,boolean,int)",15,3,n/a,24,2,3,17,7
"org.apache.lucene.search.suggest.tst.TSTLookup.readRecursively(DataInputStream,TernaryTreeNode)",11,4,n/a,23,1,2,15,6
"org.apache.lucene.search.suggest.tst.TSTLookup.store(OutputStream)",4,2,n/a,11,1,1,6,1
"org.apache.lucene.search.suggest.tst.TSTLookup.writeRecursively(DataOutputStream,TernaryTreeNode)",8,4,n/a,25,1,2,23,11
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.BasicNGramTokenizer(Reader)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.BasicNGramTokenizer(Reader,String)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.BasicNGramTokenizer(Reader,int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.BasicNGramTokenizer(Reader,int,String)",2,2,n/a,13,0,3,11,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.end()",3,39,n/a,4,0,0,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.getFinalOffset()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.getNextPartialSnippet()",2,1,n/a,9,1,0,6,3
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.getNextSnippet()",10,1,n/a,21,1,0,18,8
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.incrementToken()",7,216,n/a,9,0,0,6,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.isDelimiter(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.readCharFromBuffer()",1,1,n/a,12,2,0,8,3
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.reset()",1,93,n/a,10,0,0,7,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer.reset(Reader)",2,28,n/a,5,0,1,2,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BigramAnalyzer.tokenStream(String,Reader)",1,78,n/a,4,0,2,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.assertCollectionQueries(Collection<Query>,Query...)",4,0,n/a,6,1,2,3,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.dmq(Query...)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.dmq(float,Query...)",2,1,n/a,7,1,2,4,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1d1fIndex(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1d1fIndexB(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1dmfIndex(Analyzer,String...)",10,2,n/a,12,0,2,9,3
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1dmfIndex(String...)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1dmfIndexB(String...)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.make1dmfIndexNA(String...)",10,1,n/a,12,0,1,9,3
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.makeIndexLongMV()",1,0,n/a,12,0,0,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.makeIndexLongMVB()",1,0,n/a,29,0,0,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.makeIndexShortMV()",1,0,n/a,16,0,0,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.makeIndexStrMV()",1,0,n/a,10,0,0,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pq(String,String...)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pq(float,String,String...)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pq(float,int,String,String...)",5,3,n/a,9,1,4,6,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pqF(String...)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pqF(float,String...)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.pqF(float,int,String...)",1,1,n/a,3,0,3,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.setUp()",7,0,n/a,10,0,0,7,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tearDown()",3,0,n/a,9,1,0,5,2
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tq(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tq(String,String)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tq(float,String)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.tq(float,String,String)",3,2,n/a,5,0,3,3,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.BaseFragmentsBuilder()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.BaseFragmentsBuilder(BoundaryScanner)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.BaseFragmentsBuilder(String[],String[])",2,1,n/a,3,0,2,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.BaseFragmentsBuilder(String[],String[],BoundaryScanner)",0,2,n/a,5,0,3,3,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.checkTagsArgument(Object)",1,0,n/a,5,0,1,5,3
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragment(IndexReader,int,String,FieldFragList)",1,0,n/a,5,0,4,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragment(IndexReader,int,String,FieldFragList,String[],String[],Encoder)",1,1,n/a,8,0,7,4,3
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragments(IndexReader,int,String,FieldFragList,int)",1,0,n/a,6,0,5,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder)",12,2,n/a,17,1,8,15,5
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFieldValues(IndexReader,int,String)",3,0,n/a,5,0,3,2,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFields(IndexReader,int,String)",3,1,n/a,5,0,3,2,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFragmentSource(StringBuilder,int[],Field[],int,int)",8,0,n/a,11,1,5,7,5
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFragmentSource(StringBuilder,int[],String[],int,int)",6,1,n/a,11,1,5,6,4
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getFragmentSourceMSO(StringBuilder,int[],Field[],int,int,int[])",11,1,n/a,17,1,6,11,6
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getMultiValuedSeparator()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getPostTag(String[],int)",0,3,n/a,4,0,2,2,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getPostTag(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getPreTag(String[],int)",0,3,n/a,4,0,2,2,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getPreTag(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.getWeightedFragInfoList(List<WeightedFragInfo>)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.makeFragment(StringBuilder,int[],Field[],WeightedFragInfo,String[],String[],Encoder)",26,1,n/a,20,2,7,11,3
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.makeFragment(StringBuilder,int[],String[],WeightedFragInfo)",2,0,n/a,6,0,4,2,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.makeFragment(WeightedFragInfo,String,int,String[],String[],Encoder)",15,1,n/a,17,2,6,8,3
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.setMultiValuedSeparator(char)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.BoundaryScanner.findEndOffset(StringBuilder,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.vectorhighlight.BoundaryScanner.findStartOffset(StringBuilder,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner.BreakIteratorBoundaryScanner(BreakIterator)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner.findEndOffset(StringBuilder,int)",4,0,n/a,6,0,2,4,3
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner.findStartOffset(StringBuilder,int)",5,0,n/a,7,0,2,5,3
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testFindEndOffset(StringBuilder,int,int,BoundaryScanner)",2,3,n/a,3,0,4,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testFindStartOffset(StringBuilder,int,int,BoundaryScanner)",2,3,n/a,3,0,4,1,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testLineBoundary()",8,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testOutOfRange()",12,0,n/a,12,0,0,10,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testSentenceBoundary()",8,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest.testWordBoundary()",8,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.FastVectorHighlighter()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.FastVectorHighlighter(boolean,boolean)",3,3,n/a,9,0,2,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.FastVectorHighlighter(boolean,boolean,FragListBuilder,FragmentsBuilder)",0,1,n/a,15,0,4,4,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragment(FieldQuery,IndexReader,int,String,int)",2,0,n/a,17,0,5,2,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragment(FieldQuery,IndexReader,int,String,int,FragListBuilder,FragmentsBuilder,String[],String[],Encoder)",2,0,n/a,23,0,10,2,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragments(FieldQuery,IndexReader,int,String,int,int)",2,1,n/a,19,0,6,2,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragments(FieldQuery,IndexReader,int,String,int,int,FragListBuilder,FragmentsBuilder,String[],String[],Encoder)",2,1,n/a,27,0,11,2,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldFragList(FragListBuilder,FieldQuery,IndexReader,int,String,int)",3,4,n/a,7,0,6,3,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query)",2,0,n/a,16,1,1,3,2
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getFieldQuery(Query,IndexReader)",1,2,n/a,9,0,2,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getPhraseLimit()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.isFieldMatch()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.isPhraseHighlight()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.setPhraseLimit(int)",0,1,n/a,5,0,1,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.FieldFragList(int)",0,0,n/a,7,0,1,0,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo.SubInfo(String,List<Toffs>,int)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo.getSeqnum()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo.getTermsOffsets()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo.toString()",7,1,n/a,9,0,0,6,2
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.WeightedFragInfo(int,int,List<WeightedPhraseInfo>)",3,1,n/a,10,1,3,7,2
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.getEndOffset()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.getStartOffset()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.getSubInfos()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.getTotalBoost()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.toString()",12,0,n/a,9,0,0,6,2
"org.apache.lucene.search.vectorhighlight.FieldFragList.add(int,int,List<WeightedPhraseInfo>)",2,0,n/a,10,0,3,1,1
"org.apache.lucene.search.vectorhighlight.FieldFragList.getFragInfos()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.FieldPhraseList(FieldTermStack,FieldQuery)",1,0,n/a,9,0,2,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.FieldPhraseList(FieldTermStack,FieldQuery,int)",27,1,n/a,51,6,3,30,12
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.Toffs(int,int)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.getEndOffset()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.getStartOffset()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.setEndOffset(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs.toString()",7,1,n/a,6,0,0,3,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.WeightedPhraseInfo(LinkedList<TermInfo>,float)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.WeightedPhraseInfo(LinkedList<TermInfo>,float,int)",28,3,n/a,27,2,3,22,4
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.getEndOffset()",2,5,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.getStartOffset()",1,5,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.isOffsetOverlap(WeightedPhraseInfo)",4,1,n/a,11,0,1,13,9
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.toString()",8,0,n/a,10,1,0,6,2
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.addIfNoOverlap(WeightedPhraseInfo)",2,2,n/a,6,1,1,4,3
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseIndex()",19,0,n/a,13,0,0,11,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseIndexB()",10,0,n/a,11,0,0,6,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseLongMV()",13,0,n/a,9,0,0,7,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseLongMVB()",10,0,n/a,8,0,0,6,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1PhraseShortMV()",10,0,n/a,8,0,0,6,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test1TermIndex()",16,0,n/a,12,0,0,10,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test2ConcatTermsIndexB()",13,0,n/a,12,0,0,7,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test2PhrasesOverlap()",14,0,n/a,11,0,0,9,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test2Terms1PhraseIndex()",22,0,n/a,16,0,0,12,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test2TermsIndex()",13,0,n/a,9,0,0,7,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.test3TermsPhrase()",10,0,n/a,8,0,0,6,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.testPhraseSlop()",16,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest.testSearchLongestPhrase()",17,0,n/a,12,0,0,10,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.FieldQuery(Query,IndexReader,boolean,boolean)",10,1,n/a,18,3,4,13,6
"org.apache.lucene.search.vectorhighlight.FieldQuery.FieldQuery(Query,boolean,boolean)",1,0,n/a,6,0,3,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.QueryPhraseMap(FieldQuery)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.add(Query,IndexReader)",11,1,n/a,18,2,2,12,4
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.addTerm(Term,float)",3,2,n/a,4,0,2,2,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getBoost()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getOrNewMap(Map<String, QueryPhraseMap>,String)",3,2,n/a,8,1,2,5,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getSlop()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getTermMap(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.getTermOrPhraseNumber()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.isTerminal()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.isValidTermOrPhrase(List<TermInfo>)",7,2,n/a,15,1,1,13,5
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.markTerminal(float)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.markTerminal(int,float)",1,2,n/a,6,0,2,4,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap.searchPhrase(List<TermInfo>)",3,1,n/a,8,1,1,6,4
"org.apache.lucene.search.vectorhighlight.FieldQuery.checkOverlap(Collection<Query>,PhraseQuery,PhraseQuery)",13,1,n/a,15,0,3,8,4
"org.apache.lucene.search.vectorhighlight.FieldQuery.checkOverlap(Collection<Query>,Term[],Term[],int,float)",13,2,n/a,39,3,5,22,10
"org.apache.lucene.search.vectorhighlight.FieldQuery.expand(Collection<Query>)",10,1,n/a,25,2,1,15,5
"org.apache.lucene.search.vectorhighlight.FieldQuery.flatten(Query,IndexReader,Collection<Query>)",19,4,n/a,36,3,3,24,14
"org.apache.lucene.search.vectorhighlight.FieldQuery.getFieldTermMap(String,String)",2,0,n/a,10,0,2,2,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.getKey(Query)",15,2,n/a,31,1,1,19,9
"org.apache.lucene.search.vectorhighlight.FieldQuery.getRootMap(Query)",4,1,n/a,9,1,1,6,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.getRootMap(String)",1,2,n/a,3,0,1,1,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.getTermSet(Query)",4,1,n/a,9,1,1,6,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.getTermSet(String)",1,0,n/a,3,0,1,1,2
"org.apache.lucene.search.vectorhighlight.FieldQuery.nextTermOrPhraseNumber()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldQuery.saveTerms(Collection<Query>,IndexReader)",15,1,n/a,41,3,2,12,8
"org.apache.lucene.search.vectorhighlight.FieldQuery.searchPhrase(String,List<TermInfo>)",2,0,n/a,11,0,2,4,2
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.defgMultiTermQueryTest(Query)",10,4,n/a,9,0,1,7,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testExpand()",81,0,n/a,52,0,0,34,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testExpandNotFieldMatch()",12,0,n/a,10,0,0,6,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlatten1TermPhrase()",6,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlattenBoolean()",8,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlattenDisjunctionMaxQuery()",11,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlattenTermAndPhrase()",7,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testFlattenTermAndPhrase2gram()",8,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testGetFieldTermMap()",10,0,n/a,11,0,0,9,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testGetRootMap()",13,0,n/a,11,0,0,9,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testGetRootMapNotFieldMatch()",13,0,n/a,11,0,0,9,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testGetTermSet()",18,0,n/a,14,0,0,12,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testHighlightQuery()",4,0,n/a,4,0,0,2,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testNoExpand()",56,0,n/a,40,0,0,26,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testPrefixQuery()",4,0,n/a,4,0,0,2,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap1Phrase()",106,0,n/a,89,0,0,81,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap1PhraseAnother()",22,0,n/a,19,0,0,16,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap1Term()",70,0,n/a,53,0,0,46,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap2Phrases()",37,0,n/a,31,0,0,26,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMap2PhrasesFields()",76,0,n/a,61,0,0,53,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMapOverlap2gram()",88,0,n/a,75,0,0,64,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMapOverlapPhrases()",61,0,n/a,56,0,0,43,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMapOverlapPhrases2()",33,0,n/a,34,0,0,23,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testQueryPhraseMapOverlapPhrases3()",49,0,n/a,48,0,0,33,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testRangeQuery()",3,0,n/a,4,0,0,2,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testRegexQuery()",4,0,n/a,5,0,0,3,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testSearchPhrase()",38,0,n/a,34,0,0,22,1
"org.apache.lucene.search.vectorhighlight.FieldQueryTest.testSearchPhraseSlop()",24,0,n/a,24,0,0,15,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.FieldTermStack(IndexReader,int,String,FieldQuery)",12,1,n/a,36,1,4,26,9
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.TermInfo(String,int,int,int)",0,14,n/a,6,0,4,4,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.compareTo(TermInfo)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.getEndOffset()",0,3,n/a,1,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.getPosition()",0,3,n/a,1,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.getStartOffset()",0,2,n/a,1,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.getText()",0,6,n/a,1,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo.toString()",10,0,n/a,6,0,0,3,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.getFieldName()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.isEmpty()",1,0,n/a,8,0,0,1,2
"org.apache.lucene.search.vectorhighlight.FieldTermStack.main(String[])",17,0,n/a,16,0,1,14,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.pop()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStack.push(TermInfo)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.makeIndex()",1,3,n/a,13,0,0,3,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.makeIndexB()",1,3,n/a,8,0,0,2,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1Phrase()",15,0,n/a,9,0,0,7,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1PhraseB()",18,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1PhraseLongMV()",18,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1PhraseMVB()",18,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1PhraseShortMV()",9,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1Term()",24,0,n/a,12,0,0,10,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test1TermB()",12,0,n/a,8,0,0,6,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test2Terms()",34,0,n/a,17,0,0,15,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.test2TermsB()",19,0,n/a,12,0,0,10,1
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest.testWildcard()",19,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.FragListBuilder.createFieldFragList(FieldPhraseList,int)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.search.vectorhighlight.FragmentsBuilder.createFragment(IndexReader,int,String,FieldFragList)",n/a,0,0,n/a,n/a,4,n/a,n/a
"org.apache.lucene.search.vectorhighlight.FragmentsBuilder.createFragment(IndexReader,int,String,FieldFragList,String[],String[],Encoder)",n/a,0,0,n/a,n/a,7,n/a,n/a
"org.apache.lucene.search.vectorhighlight.FragmentsBuilder.createFragments(IndexReader,int,String,FieldFragList,int)",n/a,0,0,n/a,n/a,5,n/a,n/a
"org.apache.lucene.search.vectorhighlight.FragmentsBuilder.createFragments(IndexReader,int,String,FieldFragList,int,String[],String[],Encoder)",n/a,0,0,n/a,n/a,8,n/a,n/a
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.TokenArrayAnalyzer.TokenArrayAnalyzer(Token...)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.TokenArrayAnalyzer.tokenStream(String,Reader)",4,78,n/a,7,2,2,7,2
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.makeIndex1w()",7,2,n/a,13,0,0,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.makeIndex1w2w()",7,7,n/a,12,0,0,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.makeIndex2w1w()",7,8,n/a,12,0,0,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.makeSynonymIndex(String,Token...)",2,3,n/a,4,0,2,2,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.t(String,int,int)",1,14,n/a,3,0,3,1,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.t(String,int,int,int)",2,5,n/a,5,0,4,3,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex1w2wSearch1partial()",16,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex1w2wSearch1phrase()",16,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex1w2wSearch1term1phrase()",21,0,n/a,13,0,0,11,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex2w1wSearch1partial()",16,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex2w1wSearch1phrase()",16,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex2w1wSearch1term()",16,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldPhraseListIndex2w1wSearch1term1phrase()",21,0,n/a,13,0,0,11,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1w2wSearch1partial()",9,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1w2wSearch1phrase()",12,0,n/a,8,0,0,6,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1w2wSearch1term()",9,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1w2wSearch1term1phrase()",24,0,n/a,15,0,0,13,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1wSearch1term()",9,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex1wSearch2terms()",21,0,n/a,14,0,0,12,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex2w1wSearch1partial()",9,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex2w1wSearch1phrase()",12,0,n/a,8,0,0,6,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex2w1wSearch1term()",9,0,n/a,7,0,0,5,1
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.testFieldTermStackIndex2w1wSearch1term1phrase()",24,0,n/a,15,0,0,13,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreComparator.compare(WeightedFragInfo,WeightedFragInfo)",0,0,n/a,10,1,2,9,5
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreOrderFragmentsBuilder()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreOrderFragmentsBuilder(BoundaryScanner)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreOrderFragmentsBuilder(String[],String[])",1,0,n/a,9,0,2,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreOrderFragmentsBuilder(String[],String[],BoundaryScanner)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.getWeightedFragInfoList(List<WeightedFragInfo>)",2,0,n/a,8,0,1,2,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilderTest.ffl(String,String)",7,1,n/a,8,0,2,6,1
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilderTest.test3Frags()",7,0,n/a,10,0,0,7,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner(Character[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner(int,Character[])",3,3,n/a,5,0,2,3,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.SimpleBoundaryScanner(int,Set<Character>)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.findEndOffset(StringBuilder,int)",4,0,n/a,13,1,2,10,6
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner.findStartOffset(StringBuilder,int)",3,0,n/a,16,1,2,12,7
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScannerTest.testFindEndOffset()",11,0,n/a,12,0,0,9,1
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScannerTest.testFindStartOffset()",15,0,n/a,15,0,0,12,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilder.SimpleFragListBuilder()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilder.SimpleFragListBuilder(int)",2,1,n/a,6,0,1,4,2
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilder.createFieldFragList(FieldPhraseList,int)",18,0,n/a,44,3,2,37,13
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.fpl(String,String)",5,18,n/a,7,0,2,5,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test1PhraseLongMV()",14,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test1PhraseLongMVB()",14,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test1PhraseShortMV()",14,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test1TermIndex()",10,0,n/a,6,0,0,4,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test2TermsIndex1Frag()",28,0,n/a,12,0,0,10,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test2TermsIndex2Frags()",40,0,n/a,15,0,0,13,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.test2TermsQuery()",24,0,n/a,11,0,0,9,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testNullFieldFragList()",6,0,n/a,5,0,0,3,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testPhraseQuery()",20,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testPhraseQuerySlop()",10,0,n/a,6,0,0,4,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testSmallerFragSizeThanPhraseQuery()",14,0,n/a,7,0,0,6,2
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testSmallerFragSizeThanTermQuery()",10,0,n/a,6,0,0,4,1
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest.testTooSmallFragSize()",4,0,n/a,9,1,0,4,2
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.SimpleFragmentsBuilder()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.SimpleFragmentsBuilder(BoundaryScanner)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.SimpleFragmentsBuilder(String[],String[])",1,0,n/a,9,0,2,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.SimpleFragmentsBuilder(String[],String[],BoundaryScanner)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder.getWeightedFragInfoList(List<WeightedFragInfo>)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.ffl(String,String)",7,4,n/a,8,0,2,6,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.makeUnstoredIndex()",10,1,n/a,10,0,0,8,2
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1PhraseLongMV()",10,0,n/a,11,0,0,8,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1PhraseLongMVB()",10,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1PhraseShortMV()",10,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1StrMV()",11,0,n/a,12,0,0,9,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test1TermIndex()",7,0,n/a,8,0,0,5,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test2Frags()",6,0,n/a,9,0,0,6,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.test3Frags()",7,0,n/a,9,0,0,7,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.testMVSeparator()",11,0,n/a,11,0,0,9,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.testTagsAndEncoder()",5,0,n/a,8,0,0,5,1
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest.testUnstoredField()",10,0,n/a,10,0,0,8,1
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilder.createFieldFragList(FieldPhraseList,int)",8,0,n/a,16,1,2,14,5
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest.fpl(String,String...)",5,3,n/a,7,0,2,5,1
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest.testLongFieldFragList()",10,0,n/a,6,0,0,4,1
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest.testNullFieldFragList()",6,0,n/a,5,0,0,3,1
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest.testShortFieldFragList()",10,0,n/a,6,0,0,4,1
"org.apache.lucene.spatial.DistanceUtils.angularDistance(double,double)",0,1,n/a,9,0,2,1,1
"org.apache.lucene.spatial.DistanceUtils.getBoundary(double,double,double)",3,0,n/a,12,0,3,2,1
"org.apache.lucene.spatial.DistanceUtils.getDistanceMi(double,double,double,double)",1,8,n/a,3,0,4,1,1
"org.apache.lucene.spatial.DistanceUtils.getLLMDistance(double,double,double,double)",3,5,n/a,5,0,4,3,1
"org.apache.lucene.spatial.DistanceUtils.haversine(double,double,double,double,double)",7,2,n/a,23,1,5,9,3
"org.apache.lucene.spatial.DistanceUtils.latLonCorner(double,double,double,double[],boolean,double)",1,2,n/a,20,0,6,3,2
"org.apache.lucene.spatial.DistanceUtils.latLonCornerDegs(double,double,double,double[],boolean,double)",1,0,n/a,20,0,6,4,1
"org.apache.lucene.spatial.DistanceUtils.normLat(double[])",0,1,n/a,20,2,1,10,5
"org.apache.lucene.spatial.DistanceUtils.normLng(double[])",0,1,n/a,12,1,1,4,3
"org.apache.lucene.spatial.DistanceUtils.parseLatitudeLongitude(String)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.spatial.DistanceUtils.parseLatitudeLongitude(double[],String)",3,3,n/a,30,1,2,10,6
"org.apache.lucene.spatial.DistanceUtils.parsePoint(String[],String,int)",9,8,n/a,43,3,3,27,15
"org.apache.lucene.spatial.DistanceUtils.parsePointDouble(double[],String,int)",11,3,n/a,43,3,3,27,15
"org.apache.lucene.spatial.DistanceUtils.pointOnBearing(double,double,double,double,double[],double)",12,5,n/a,36,1,6,12,3
"org.apache.lucene.spatial.DistanceUtils.squaredEuclideanDistance(double[],double[])",0,2,n/a,16,1,2,7,2
"org.apache.lucene.spatial.DistanceUtils.vectorBoxCorner(double[],double[],double,boolean)",0,2,n/a,26,1,4,10,5
"org.apache.lucene.spatial.DistanceUtils.vectorDistance(double[],double[],double)",1,1,n/a,14,0,3,1,1
"org.apache.lucene.spatial.DistanceUtils.vectorDistance(double[],double[],double,double)",7,3,n/a,33,2,4,24,11
"org.apache.lucene.spatial.DistanceUtilsTest.testBoxCorner()",24,0,n/a,24,0,0,22,1
"org.apache.lucene.spatial.DistanceUtilsTest.testHaversine()",34,0,n/a,23,0,0,15,1
"org.apache.lucene.spatial.DistanceUtilsTest.testLatLonCorner()",15,0,n/a,26,0,0,18,1
"org.apache.lucene.spatial.DistanceUtilsTest.testNormLatLon()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.spatial.DistanceUtilsTest.testParse()",46,0,n/a,70,1,0,53,7
"org.apache.lucene.spatial.DistanceUtilsTest.testPointBearing()",27,0,n/a,42,0,0,30,1
"org.apache.lucene.spatial.DistanceUtilsTest.testVectorDistance()",9,0,n/a,15,0,0,13,1
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter.GeoHashDistanceFilter(Filter,double,double,double,String)",1,1,n/a,14,0,5,4,1
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter.equals(Object)",2,0,n/a,15,1,1,8,8
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter.getDocIdSet(IndexReader)",10,23,n/a,24,3,1,18,3
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter.hashCode()",8,0,n/a,10,0,0,6,1
"org.apache.lucene.spatial.geohash.GeoHashUtils.GeoHashUtils()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.spatial.geohash.GeoHashUtils.decode(String)",5,3,n/a,36,4,1,21,6
"org.apache.lucene.spatial.geohash.GeoHashUtils.encode(double,double)",4,4,n/a,44,3,2,26,6
"org.apache.lucene.spatial.geohash.TestGeoHashUtils.testDecodeEncode()",13,0,n/a,17,0,0,11,1
"org.apache.lucene.spatial.geohash.TestGeoHashUtils.testDecodeImpreciseLongitudeLatitude()",4,0,n/a,11,0,0,4,1
"org.apache.lucene.spatial.geohash.TestGeoHashUtils.testDecodePreciseLongitudeLatitude()",4,0,n/a,11,0,0,4,1
"org.apache.lucene.spatial.geohash.TestGeoHashUtils.testEncode()",4,0,n/a,11,0,0,4,1
"org.apache.lucene.spatial.geometry.CartesianPoint.CartesianPoint(int,int)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.spatial.geometry.CartesianPoint.equals(Object)",2,0,n/a,15,0,1,12,6
"org.apache.lucene.spatial.geometry.CartesianPoint.getX()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.getY()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.hashCode()",0,0,n/a,8,0,0,5,1
"org.apache.lucene.spatial.geometry.CartesianPoint.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.CartesianPoint.translate(int,int)",1,0,n/a,6,0,2,1,1
"org.apache.lucene.spatial.geometry.DistanceUnits.DistanceUnits(String,double,double)",0,2,n/a,12,0,3,3,1
"org.apache.lucene.spatial.geometry.DistanceUnits.convert(double,DistanceUnits)",0,0,n/a,13,1,2,3,3
"org.apache.lucene.spatial.geometry.DistanceUnits.earthCircumference()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.spatial.geometry.DistanceUnits.earthRadius()",0,0,n/a,8,0,0,1,1
"org.apache.lucene.spatial.geometry.DistanceUnits.findDistanceUnit(String)",6,0,n/a,16,1,1,5,4
"org.apache.lucene.spatial.geometry.DistanceUnits.getUnit()",0,2,n/a,8,0,0,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.FixedLatLng(LatLng)",2,1,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.FixedLatLng.FixedLatLng(int,int)",2,2,n/a,4,0,2,2,1
"org.apache.lucene.spatial.geometry.FixedLatLng.calculateMidpoint(LatLng)",3,0,n/a,6,0,1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.copy()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.doubleToFixed(double)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.equals(Object)",2,0,n/a,15,0,1,12,6
"org.apache.lucene.spatial.geometry.FixedLatLng.fixedToDouble(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.getFixedLat()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.getFixedLng()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.getLat()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.getLng()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.hashCode()",0,0,n/a,8,0,0,5,2
"org.apache.lucene.spatial.geometry.FixedLatLng.isFixedPoint()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.isNormalized()",0,1,n/a,8,0,0,1,3
"org.apache.lucene.spatial.geometry.FixedLatLng.normalize()",2,0,n/a,14,1,0,13,6
"org.apache.lucene.spatial.geometry.FixedLatLng.setLat(int)",1,1,n/a,6,1,1,3,3
"org.apache.lucene.spatial.geometry.FixedLatLng.setLng(int)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.toFixed()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FixedLatLng.toFloat()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.FloatLatLng(LatLng)",2,1,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.FloatLatLng.FloatLatLng(double,double)",1,12,n/a,5,0,2,4,3
"org.apache.lucene.spatial.geometry.FloatLatLng.calculateMidpoint(LatLng)",3,0,n/a,6,0,1,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.copy()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.equals(Object)",6,0,n/a,15,0,1,12,6
"org.apache.lucene.spatial.geometry.FloatLatLng.getFixedLat()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.getFixedLng()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.getLat()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.getLng()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.hashCode()",2,0,n/a,11,0,0,8,2
"org.apache.lucene.spatial.geometry.FloatLatLng.isFixedPoint()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.isNormalized()",0,1,n/a,8,0,0,1,3
"org.apache.lucene.spatial.geometry.FloatLatLng.normalize()",2,0,n/a,14,1,0,13,6
"org.apache.lucene.spatial.geometry.FloatLatLng.toFixed()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.FloatLatLng.toFloat()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.LatLng.arcDistance(LatLng)",1,0,n/a,12,0,1,1,1
"org.apache.lucene.spatial.geometry.LatLng.arcDistance(LatLng,DistanceUnits)",15,4,n/a,37,0,2,16,6
"org.apache.lucene.spatial.geometry.LatLng.calculateMidpoint(LatLng)",n/a,1,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.copy()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.equals(Object)",n/a,2,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.fromCartesian(CartesianPoint)",3,0,n/a,9,0,1,3,1
"org.apache.lucene.spatial.geometry.LatLng.getFixedLat()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.getFixedLng()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.getLat()",n/a,11,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.getLng()",n/a,17,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.hashCode()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.isFixedPoint()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.isNormalized()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.normalize()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.radians(double)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.LatLng.toCartesian()",4,0,n/a,16,0,0,4,1
"org.apache.lucene.spatial.geometry.LatLng.toFixed()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.toFloat()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.LatLng.toString()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.TestDistanceUnits.testConvert()",8,0,n/a,11,0,0,4,1
"org.apache.lucene.spatial.geometry.TestDistanceUnits.testFindDistanceUnit()",4,0,n/a,9,0,0,2,1
"org.apache.lucene.spatial.geometry.TestDistanceUnits.testFindDistanceUnit_unknownUnit()",2,0,n/a,12,1,0,3,2
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.DistanceApproximation()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.getDistanceSq(double,double)",0,3,n/a,14,0,2,3,1
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.getDistanceSq(double,double,double,double)",3,0,n/a,24,0,4,11,3
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.getMilesPerLatDeg()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.getMilesPerLngDeg(double)",2,0,n/a,5,0,1,1,2
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation.setTestPoint(double,double)",1,0,n/a,6,0,2,3,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.Ellipse()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.Ellipse(Point2D,Point2D,double)",22,0,n/a,27,1,3,16,2
"org.apache.lucene.spatial.geometry.shape.Ellipse.SQR(double)",0,13,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.area()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.centroid()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.contains(Point2D)",6,4,n/a,8,0,1,4,1
"org.apache.lucene.spatial.geometry.shape.Ellipse.intersect(LineSegment,Point2D,Point2D)",22,4,n/a,79,3,3,42,12
"org.apache.lucene.spatial.geometry.shape.Ellipse.intersect(Rectangle)",35,0,n/a,29,0,1,20,10
"org.apache.lucene.spatial.geometry.shape.Ellipse.translate(Vector2D)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Geometry2D.area()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.shape.Geometry2D.centroid()",n/a,0,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.geometry.shape.Geometry2D.contains(Point2D)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.spatial.geometry.shape.Geometry2D.intersect(Rectangle)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.spatial.geometry.shape.Geometry2D.translate(Vector2D)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.spatial.geometry.shape.LLRect.LLRect(LLRect)",0,0,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.shape.LLRect.LLRect(LatLng,LatLng)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.spatial.geometry.shape.LLRect.area()",5,0,n/a,7,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.boxCorners(LatLng,double,double)",19,2,n/a,20,0,3,13,1
"org.apache.lucene.spatial.geometry.shape.LLRect.createBox(LatLng,double,double)",3,2,n/a,15,0,3,4,1
"org.apache.lucene.spatial.geometry.shape.LLRect.equals(Object)",4,0,n/a,21,1,1,18,10
"org.apache.lucene.spatial.geometry.shape.LLRect.getLowerLeft()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.getMidpoint()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.getUpperRight()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.hashCode()",2,0,n/a,8,0,0,5,3
"org.apache.lucene.spatial.geometry.shape.LLRect.normLat(double,double)",1,1,n/a,24,2,2,12,5
"org.apache.lucene.spatial.geometry.shape.LLRect.normLng(double,double)",1,1,n/a,13,1,2,6,3
"org.apache.lucene.spatial.geometry.shape.LLRect.toRectangle()",5,1,n/a,6,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.LLRect.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.LineSegment.LineSegment()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.spatial.geometry.shape.LineSegment.LineSegment(Point2D,Point2D)",2,0,n/a,4,0,2,2,1
"org.apache.lucene.spatial.geometry.shape.LineSegment.distance(Point2D,Point2D)",15,0,n/a,39,1,2,15,4
"org.apache.lucene.spatial.geometry.shape.LineSegment.equals(Object)",4,0,n/a,21,1,1,18,10
"org.apache.lucene.spatial.geometry.shape.LineSegment.hashCode()",2,0,n/a,8,0,0,5,3
"org.apache.lucene.spatial.geometry.shape.Point2D.Point2D()",0,0,n/a,4,0,0,2,1
"org.apache.lucene.spatial.geometry.shape.Point2D.Point2D(Point2D)",0,0,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.shape.Point2D.Point2D(double,double)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.spatial.geometry.shape.Point2D.add(Point2D)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.shape.Point2D.add(Vector2D)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.shape.Point2D.equals(Object)",6,0,n/a,15,0,1,12,6
"org.apache.lucene.spatial.geometry.shape.Point2D.getX()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.getY()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.hashCode()",2,0,n/a,11,0,0,8,1
"org.apache.lucene.spatial.geometry.shape.Point2D.set(Point2D)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.shape.Point2D.set(Vector2D)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.shape.Point2D.set(double,double)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.spatial.geometry.shape.Point2D.setX(double)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.setY(double)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.x()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.x(double)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.y()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Point2D.y(double)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.MaxPt()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.MinPt()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.Rectangle()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.Rectangle(Point2D,Point2D)",2,0,n/a,4,0,2,2,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.Rectangle(double,double,double,double)",1,0,n/a,3,0,4,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.area()",4,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.centroid()",5,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.contains(Point2D)",8,0,n/a,6,0,1,1,4
"org.apache.lucene.spatial.geometry.shape.Rectangle.equals(Object)",4,0,n/a,21,1,1,18,10
"org.apache.lucene.spatial.geometry.shape.Rectangle.getMaxPoint()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.getMinPoint()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.hashCode()",2,0,n/a,8,0,0,5,3
"org.apache.lucene.spatial.geometry.shape.Rectangle.intersect(Rectangle)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.set(double,double,double,double)",6,1,n/a,4,0,4,2,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Rectangle.translate(Vector2D)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D()",0,0,n/a,4,0,0,2,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D(Point2D)",3,0,n/a,7,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D(Point2D,Point2D)",5,0,n/a,9,0,2,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D(Vector2D)",0,0,n/a,4,0,1,2,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.Vector2D(double,double)",0,1,n/a,11,0,2,2,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.dot(Vector2D)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.equals(Object)",6,0,n/a,15,0,1,12,6
"org.apache.lucene.spatial.geometry.shape.Vector2D.equals(Vector2D)",0,0,n/a,3,0,1,1,3
"org.apache.lucene.spatial.geometry.shape.Vector2D.getX()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.getY()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.hashCode()",2,0,n/a,11,0,0,8,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.mult(double)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.norm()",2,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.normSqr()",0,1,n/a,7,0,0,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.set(double,double)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.setX(double)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.geometry.shape.Vector2D.setY(double)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.CartesianPolyFilterBuilder(String,int,int)",0,0,n/a,11,0,3,3,1
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.getBoundingArea(double,double,double)",3,0,n/a,5,0,3,2,1
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.getBoxShape(double,double,double)",21,1,n/a,61,2,3,33,10
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder.getShapeLoop(Shape,CartesianTierPlotter,double,double,double,double)",17,2,n/a,41,2,6,25,4
"org.apache.lucene.spatial.tier.CartesianShapeFilter.CartesianShapeFilter(Shape,String)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.spatial.tier.CartesianShapeFilter.getDocIdSet(IndexReader)",14,23,n/a,19,2,1,13,3
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceFieldComparatorSource(Filter)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.DistanceScoreDocLookupComparator(int)",0,1,n/a,4,0,1,2,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.cleanUp()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.compare(int,int)",0,7,n/a,10,0,2,7,3
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.compareBottom(int)",1,20,n/a,10,1,1,6,3
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.copy(int,int)",1,37,n/a,4,0,2,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.setBottom(int)",0,37,n/a,4,0,1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.setNextReader(IndexReader,int)",0,9,n/a,7,0,2,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator.value(int)",0,6,n/a,4,0,1,1,1
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.cleanUp()",1,0,n/a,7,1,0,4,2
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.newComparator(String,int,int,boolean)",1,1,n/a,6,0,4,2,1
"org.apache.lucene.spatial.tier.DistanceFilter.DistanceFilter(Filter,double)",3,1,n/a,19,1,2,6,2
"org.apache.lucene.spatial.tier.DistanceFilter.equals(Object)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.spatial.tier.DistanceFilter.getDistance(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.DistanceFilter.getDistances()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.DistanceFilter.hashCode()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.spatial.tier.DistanceFilter.readObject(ObjectInputStream)",2,0,n/a,5,0,1,2,1
"org.apache.lucene.spatial.tier.DistanceFilter.reset()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.spatial.tier.DistanceFilter.setDistances(Map<Integer, Double>)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.DistanceHandler.DistanceHandler(Map<Integer, Double>,Map<String, Double>,Precision)",0,0,n/a,5,0,3,3,1
"org.apache.lucene.spatial.tier.DistanceHandler.getDistance(int,double,double,double,double)",12,0,n/a,26,2,5,13,5
"org.apache.lucene.spatial.tier.DistanceHandler.getPrecision()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.DistanceHandler.getPrecision(double,Precision)",0,2,n/a,13,2,2,16,6
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.DistanceQueryBuilder(double,double,double,String,String,String,boolean,int,int)",3,0,n/a,30,1,9,9,2
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.DistanceQueryBuilder(double,double,double,String,String,boolean,int,int)",3,0,n/a,24,1,8,9,2
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getDistanceFilter()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getFilter()",1,0,n/a,11,1,0,3,2
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getFilter(Query)",3,1,n/a,9,1,1,4,2
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getLat()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getLng()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getMiles()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.getQuery(Query)",2,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.DistanceQueryBuilder.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.spatial.tier.InvalidGeoException.InvalidGeoException(String)",1,4,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.LatLongDistanceFilter.LatLongDistanceFilter(Filter,double,double,double,String,String)",1,0,n/a,17,0,6,5,1
"org.apache.lucene.spatial.tier.LatLongDistanceFilter.equals(Object)",3,0,n/a,16,1,1,8,9
"org.apache.lucene.spatial.tier.LatLongDistanceFilter.getDocIdSet(IndexReader)",12,0,n/a,25,3,1,18,3
"org.apache.lucene.spatial.tier.LatLongDistanceFilter.hashCode()",9,0,n/a,11,0,0,7,1
"org.apache.lucene.spatial.tier.Shape.Shape(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.Shape.addBox(double)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.Shape.getArea()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.Shape.getTierId()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.Shape.isInside(double)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.TestCartesian.addData(IndexWriter)",24,1,n/a,27,0,1,24,1
"org.apache.lucene.spatial.tier.TestCartesian.addPoint(IndexWriter,String,double,double)",22,21,n/a,21,1,4,13,2
"org.apache.lucene.spatial.tier.TestCartesian.setUp()",7,0,n/a,8,0,0,5,1
"org.apache.lucene.spatial.tier.TestCartesian.setUpPlotter(int,int)",2,1,n/a,6,1,2,3,2
"org.apache.lucene.spatial.tier.TestCartesian.tearDown()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.spatial.tier.TestCartesian.testAntiM()",46,0,n/a,14,4,0,56,9
"org.apache.lucene.spatial.tier.TestCartesian.testDistances()",11,0,n/a,15,1,0,13,3
"org.apache.lucene.spatial.tier.TestCartesian.testGeoHashRange()",41,0,n/a,14,5,0,52,9
"org.apache.lucene.spatial.tier.TestCartesian.testPoleFlipping()",48,0,n/a,14,4,0,60,11
"org.apache.lucene.spatial.tier.TestCartesian.testRange()",45,0,n/a,14,5,0,57,9
"org.apache.lucene.spatial.tier.TestCartesianShapeFilter.testSerializable()",7,0,n/a,11,1,0,6,2
"org.apache.lucene.spatial.tier.TestDistance.addData(IndexWriter)",18,1,n/a,20,0,1,18,1
"org.apache.lucene.spatial.tier.TestDistance.addPoint(IndexWriter,String,double,double)",12,17,n/a,10,0,4,6,1
"org.apache.lucene.spatial.tier.TestDistance.setUp()",6,0,n/a,7,0,0,4,1
"org.apache.lucene.spatial.tier.TestDistance.tearDown()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.spatial.tier.TestDistance.testLatLongFilterOnDeletedDocs()",9,0,n/a,11,1,0,9,2
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.CartesianTierPlotter(int,IProjector,String)",3,3,n/a,8,0,3,6,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.bestFit(double)",4,1,n/a,24,1,1,8,2
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getBoxId(double)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getBoxId(double,int)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getTierBoxId(double,double)",3,3,n/a,13,0,2,3,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getTierFieldName()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getTierFieldName(int)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.getTierVerticalPosDivider()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.log2(double)",2,1,n/a,8,0,1,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.setTierBoxes()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.setTierLength()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter.setTierVerticalPosDivider()",7,1,n/a,15,0,0,2,1
"org.apache.lucene.spatial.tier.projections.IProjector.coords(double,double)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.spatial.tier.projections.IProjector.coordsAsString(double,double)",n/a,0,0,n/a,n/a,2,n/a,n/a
"org.apache.lucene.spatial.tier.projections.SinusoidalProjector.coords(double,double)",3,0,n/a,7,0,2,5,1
"org.apache.lucene.spatial.tier.projections.SinusoidalProjector.coordsAsString(double,double)",0,0,n/a,3,0,2,1,1
"org.apache.lucene.spatial.tier.projections.SinusoidalProjectorTest.testProjection()",1,0,n/a,18,0,0,1,1
"org.apache.lucene.store.AlreadyClosedException.AlreadyClosedException(String)",1,22,n/a,3,0,1,1,1
"org.apache.lucene.store.BufferedIndexInput.BufferedIndexInput()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.store.BufferedIndexInput.BufferedIndexInput(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.store.BufferedIndexInput.BufferedIndexInput(String,int)",2,4,n/a,6,0,2,3,1
"org.apache.lucene.store.BufferedIndexInput.BufferedIndexInput(int)",1,1,n/a,6,0,1,1,1
"org.apache.lucene.store.BufferedIndexInput.checkBufferSize(int)",1,2,n/a,4,0,1,2,2
"org.apache.lucene.store.BufferedIndexInput.clone()",2,21,n/a,9,0,0,6,1
"org.apache.lucene.store.BufferedIndexInput.copyBytes(IndexOutput,long)",2,3,n/a,10,2,2,5,3
"org.apache.lucene.store.BufferedIndexInput.flushBuffer(IndexOutput,long)",1,3,n/a,20,1,2,7,3
"org.apache.lucene.store.BufferedIndexInput.getBufferSize()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.store.BufferedIndexInput.getFilePointer()",0,22,n/a,2,0,0,1,1
"org.apache.lucene.store.BufferedIndexInput.newBuffer(byte[])",0,3,n/a,4,0,1,1,1
"org.apache.lucene.store.BufferedIndexInput.readByte()",1,58,n/a,6,0,0,3,2
"org.apache.lucene.store.BufferedIndexInput.readBytes(byte[],int,int)",1,28,n/a,4,0,3,1,1
"org.apache.lucene.store.BufferedIndexInput.readBytes(byte[],int,int,boolean)",9,7,n/a,48,3,4,24,8
"org.apache.lucene.store.BufferedIndexInput.readInt()",1,43,n/a,9,1,0,3,2
"org.apache.lucene.store.BufferedIndexInput.readInternal(byte[],int,int)",n/a,4,4,n/a,n/a,3,n/a,n/a
"org.apache.lucene.store.BufferedIndexInput.readLong()",1,28,n/a,12,1,0,5,2
"org.apache.lucene.store.BufferedIndexInput.readShort()",1,6,n/a,8,1,0,3,2
"org.apache.lucene.store.BufferedIndexInput.readVInt()",2,101,n/a,24,1,0,23,7
"org.apache.lucene.store.BufferedIndexInput.readVLong()",2,18,n/a,35,1,0,39,11
"org.apache.lucene.store.BufferedIndexInput.refill()",6,3,n/a,17,1,0,14,4
"org.apache.lucene.store.BufferedIndexInput.seek(long)",1,33,n/a,11,1,1,6,3
"org.apache.lucene.store.BufferedIndexInput.seekInternal(long)",n/a,2,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.BufferedIndexInput.setBufferSize(int)",3,1,n/a,25,2,1,16,6
"org.apache.lucene.store.BufferedIndexOutput.close()",1,9,n/a,5,0,0,1,1
"org.apache.lucene.store.BufferedIndexOutput.flush()",1,9,n/a,7,0,0,3,1
"org.apache.lucene.store.BufferedIndexOutput.flushBuffer(byte[],int)",1,1,n/a,8,0,2,1,1
"org.apache.lucene.store.BufferedIndexOutput.flushBuffer(byte[],int,int)",n/a,2,1,n/a,n/a,3,n/a,n/a
"org.apache.lucene.store.BufferedIndexOutput.getFilePointer()",0,43,n/a,8,0,0,1,1
"org.apache.lucene.store.BufferedIndexOutput.length()",n/a,3,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.BufferedIndexOutput.seek(long)",1,7,n/a,8,0,1,2,1
"org.apache.lucene.store.BufferedIndexOutput.writeByte(byte)",1,49,n/a,9,0,1,3,2
"org.apache.lucene.store.BufferedIndexOutput.writeBytes(byte[],int,int)",6,20,n/a,44,4,3,22,8
"org.apache.lucene.store.ByteArrayDataInput.ByteArrayDataInput()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.store.ByteArrayDataInput.ByteArrayDataInput(byte[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.store.ByteArrayDataInput.ByteArrayDataInput(byte[],int,int)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.store.ByteArrayDataInput.eof()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.ByteArrayDataInput.getPosition()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.store.ByteArrayDataInput.readByte()",0,58,n/a,5,0,0,1,1
"org.apache.lucene.store.ByteArrayDataInput.readBytes(byte[],int,int)",1,28,n/a,6,0,3,2,1
"org.apache.lucene.store.ByteArrayDataInput.readInt()",0,45,n/a,5,0,0,1,1
"org.apache.lucene.store.ByteArrayDataInput.readLong()",0,29,n/a,8,0,0,3,1
"org.apache.lucene.store.ByteArrayDataInput.readShort()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.store.ByteArrayDataInput.readVInt()",1,103,n/a,20,0,0,21,6
"org.apache.lucene.store.ByteArrayDataInput.readVLong()",1,18,n/a,31,0,0,37,10
"org.apache.lucene.store.ByteArrayDataInput.reset(byte[])",1,5,n/a,3,0,1,1,1
"org.apache.lucene.store.ByteArrayDataInput.reset(byte[],int,int)",0,3,n/a,5,0,3,3,1
"org.apache.lucene.store.ByteArrayDataInput.skipBytes(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.ByteArrayDataOutput()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.store.ByteArrayDataOutput.ByteArrayDataOutput(byte[])",1,3,n/a,3,0,1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.ByteArrayDataOutput(byte[],int,int)",1,0,n/a,3,0,3,1,1
"org.apache.lucene.store.ByteArrayDataOutput.getPosition()",0,7,n/a,3,0,0,1,1
"org.apache.lucene.store.ByteArrayDataOutput.reset(byte[])",1,6,n/a,3,0,1,1,1
"org.apache.lucene.store.ByteArrayDataOutput.reset(byte[],int,int)",0,3,n/a,5,0,3,3,1
"org.apache.lucene.store.ByteArrayDataOutput.writeByte(byte)",0,50,n/a,5,0,1,2,1
"org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte[],int,int)",1,24,n/a,6,0,3,3,1
"org.apache.lucene.store.ChecksumIndexInput.ChecksumIndexInput(IndexInput)",2,1,n/a,5,0,1,3,1
"org.apache.lucene.store.ChecksumIndexInput.close()",1,21,n/a,4,0,0,1,1
"org.apache.lucene.store.ChecksumIndexInput.getChecksum()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.store.ChecksumIndexInput.getFilePointer()",1,17,n/a,4,0,0,1,1
"org.apache.lucene.store.ChecksumIndexInput.length()",1,22,n/a,4,0,0,1,1
"org.apache.lucene.store.ChecksumIndexInput.readByte()",2,59,n/a,6,0,0,3,1
"org.apache.lucene.store.ChecksumIndexInput.readBytes(byte[],int,int)",2,28,n/a,6,0,3,2,1
"org.apache.lucene.store.ChecksumIndexInput.seek(long)",1,33,n/a,4,0,1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.ChecksumIndexOutput(IndexOutput)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.store.ChecksumIndexOutput.close()",1,11,n/a,4,0,0,1,1
"org.apache.lucene.store.ChecksumIndexOutput.finishCommit()",2,2,n/a,4,0,0,1,1
"org.apache.lucene.store.ChecksumIndexOutput.flush()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.store.ChecksumIndexOutput.getChecksum()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.store.ChecksumIndexOutput.getFilePointer()",1,42,n/a,4,0,0,1,1
"org.apache.lucene.store.ChecksumIndexOutput.length()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.store.ChecksumIndexOutput.prepareCommit()",5,2,n/a,18,0,0,5,1
"org.apache.lucene.store.ChecksumIndexOutput.seek(long)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.store.ChecksumIndexOutput.writeByte(byte)",2,49,n/a,5,0,1,2,1
"org.apache.lucene.store.ChecksumIndexOutput.writeBytes(byte[],int,int)",2,20,n/a,5,0,3,2,1
"org.apache.lucene.store.DataInput.clone()",1,18,n/a,17,1,0,4,2
"org.apache.lucene.store.DataInput.readByte()",n/a,58,13,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.DataInput.readBytes(byte[],int,int)",n/a,28,13,n/a,n/a,3,n/a,n/a
"org.apache.lucene.store.DataInput.readBytes(byte[],int,int,boolean)",1,6,n/a,18,0,4,1,1
"org.apache.lucene.store.DataInput.readChars(char[],int,int)",4,6,n/a,28,2,3,10,4
"org.apache.lucene.store.DataInput.readInt()",4,43,n/a,7,0,0,1,1
"org.apache.lucene.store.DataInput.readLong()",2,28,n/a,6,0,0,1,1
"org.apache.lucene.store.DataInput.readModifiedUTF8String()",3,1,n/a,6,0,0,4,1
"org.apache.lucene.store.DataInput.readShort()",2,6,n/a,6,0,0,1,1
"org.apache.lucene.store.DataInput.readString()",4,17,n/a,11,0,0,6,2
"org.apache.lucene.store.DataInput.readStringStringMap()",5,2,n/a,10,1,0,9,2
"org.apache.lucene.store.DataInput.readVInt()",6,101,n/a,35,0,0,21,6
"org.apache.lucene.store.DataInput.readVLong()",10,18,n/a,44,0,0,37,10
"org.apache.lucene.store.DataInput.setModifiedUTF8StringsMode()",0,2,n/a,7,0,0,1,1
"org.apache.lucene.store.DataOutput.copyBytes(DataInput,long)",2,5,n/a,17,1,2,12,4
"org.apache.lucene.store.DataOutput.writeByte(byte)",n/a,49,9,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.DataOutput.writeBytes(byte[],int)",1,10,n/a,8,0,2,1,1
"org.apache.lucene.store.DataOutput.writeBytes(byte[],int,int)",n/a,20,9,n/a,n/a,3,n/a,n/a
"org.apache.lucene.store.DataOutput.writeChars(String,int,int)",7,1,n/a,26,2,3,13,7
"org.apache.lucene.store.DataOutput.writeChars(char[],int,int)",6,0,n/a,25,2,3,13,7
"org.apache.lucene.store.DataOutput.writeInt(int)",4,40,n/a,9,0,1,4,1
"org.apache.lucene.store.DataOutput.writeLong(long)",2,31,n/a,7,0,1,2,1
"org.apache.lucene.store.DataOutput.writeShort(short)",2,1,n/a,7,0,1,2,1
"org.apache.lucene.store.DataOutput.writeString(String)",5,17,n/a,9,0,1,4,1
"org.apache.lucene.store.DataOutput.writeStringStringMap(Map<String, String>)",8,2,n/a,11,2,1,6,3
"org.apache.lucene.store.DataOutput.writeVInt(int)",2,87,n/a,12,1,1,4,2
"org.apache.lucene.store.DataOutput.writeVLong(long)",2,14,n/a,13,1,1,5,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxDirectory(File,LockFactory,int)",1,0,n/a,16,0,3,2,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.DirectIOLinuxIndexInput(DirectIOLinuxIndexInput)",5,1,n/a,14,0,1,10,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.DirectIOLinuxIndexInput(File,int)",7,1,n/a,13,0,2,10,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.clone()",2,18,n/a,8,1,0,3,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.close()",2,20,n/a,12,3,0,5,4
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.getFilePointer()",0,18,n/a,4,0,0,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.length()",2,21,n/a,8,1,0,3,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.readByte()",4,58,n/a,12,1,0,5,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.readBytes(byte[],int,int)",3,28,n/a,21,2,3,11,3
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.refill()",7,3,n/a,19,1,0,13,3
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput.seek(long)",3,34,n/a,12,1,1,7,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.DirectIOLinuxIndexOutput(File,int)",5,1,n/a,10,0,2,6,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.close()",4,8,n/a,22,4,0,9,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.dump()",10,4,n/a,24,1,0,11,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.flush()",0,3,n/a,4,0,0,0,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.getFilePointer()",0,43,n/a,4,0,0,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.length()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.seek(long)",6,5,n/a,19,2,1,10,3
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.writeByte(byte)",4,49,n/a,8,1,1,4,2
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput.writeBytes(byte[],int,int)",3,20,n/a,18,2,3,12,3
"org.apache.lucene.store.DirectIOLinuxDirectory.createOutput(String)",5,24,n/a,6,0,1,3,2
"org.apache.lucene.store.DirectIOLinuxDirectory.openInput(String,int)",4,17,n/a,5,0,2,2,2
"org.apache.lucene.store.Directory.clearLock(String)",1,1,n/a,11,1,1,2,2
"org.apache.lucene.store.Directory.close()",n/a,180,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.Directory.copy(Directory,Directory,boolean)",5,0,n/a,40,2,3,6,4
"org.apache.lucene.store.Directory.copy(Directory,String,String)",5,5,n/a,31,1,3,9,2
"org.apache.lucene.store.Directory.createOutput(String)",n/a,24,7,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.Directory.deleteFile(String)",n/a,16,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.Directory.ensureOpen()",1,28,n/a,7,0,0,2,2
"org.apache.lucene.store.Directory.fileExists(String)",n/a,19,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.Directory.fileLength(String)",n/a,7,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.Directory.fileModified(String)",n/a,5,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.Directory.getLockFactory()",0,5,n/a,9,0,0,1,1
"org.apache.lucene.store.Directory.getLockID()",1,2,n/a,11,0,0,1,1
"org.apache.lucene.store.Directory.listAll()",n/a,13,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.Directory.makeLock(String)",1,6,n/a,6,0,1,1,1
"org.apache.lucene.store.Directory.openInput(String)",n/a,11,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.Directory.openInput(String,int)",1,17,n/a,10,0,2,1,1
"org.apache.lucene.store.Directory.setLockFactory(LockFactory)",2,9,n/a,14,0,1,3,1
"org.apache.lucene.store.Directory.sync(Collection<String>)",1,5,n/a,15,0,1,2,2
"org.apache.lucene.store.Directory.sync(String)",0,5,n/a,12,0,1,0,1
"org.apache.lucene.store.Directory.toString()",2,2,n/a,4,0,0,1,1
"org.apache.lucene.store.Directory.touchFile(String)",n/a,3,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.FSDirectory.FSDirectory(File,LockFactory)",6,9,n/a,16,1,2,6,4
"org.apache.lucene.store.FSDirectory.FSIndexOutput.FSIndexOutput(FSDirectory,String)",2,1,n/a,6,0,2,4,1
"org.apache.lucene.store.FSDirectory.FSIndexOutput.close()",4,9,n/a,23,4,0,11,4
"org.apache.lucene.store.FSDirectory.FSIndexOutput.flushBuffer(byte[],int,int)",1,2,n/a,5,0,3,1,1
"org.apache.lucene.store.FSDirectory.FSIndexOutput.length()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.store.FSDirectory.FSIndexOutput.seek(long)",2,7,n/a,6,0,1,2,1
"org.apache.lucene.store.FSDirectory.FSIndexOutput.setLength(long)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.store.FSDirectory.close()",0,181,n/a,5,0,0,1,1
"org.apache.lucene.store.FSDirectory.createOutput(String)",3,24,n/a,7,0,1,3,1
"org.apache.lucene.store.FSDirectory.deleteFile(String)",5,16,n/a,9,0,1,5,2
"org.apache.lucene.store.FSDirectory.ensureCanWrite(String)",7,2,n/a,8,0,1,6,5
"org.apache.lucene.store.FSDirectory.fileExists(String)",3,19,n/a,7,0,1,3,1
"org.apache.lucene.store.FSDirectory.fileLength(String)",5,7,n/a,12,1,1,6,3
"org.apache.lucene.store.FSDirectory.fileModified(File,String)",2,0,n/a,5,0,2,2,1
"org.apache.lucene.store.FSDirectory.fileModified(String)",3,5,n/a,7,0,1,3,1
"org.apache.lucene.store.FSDirectory.fsync(String)",7,1,n/a,32,3,1,21,8
"org.apache.lucene.store.FSDirectory.getCanonicalPath(File)",2,1,n/a,4,0,1,1,1
"org.apache.lucene.store.FSDirectory.getDirectory()",1,10,n/a,5,0,0,2,1
"org.apache.lucene.store.FSDirectory.getFile()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.store.FSDirectory.getLockID()",7,2,n/a,16,1,0,12,3
"org.apache.lucene.store.FSDirectory.getReadChunkSize()",0,2,n/a,9,0,0,1,1
"org.apache.lucene.store.FSDirectory.listAll()",2,13,n/a,8,0,0,2,1
"org.apache.lucene.store.FSDirectory.listAll(File)",9,2,n/a,3,2,1,9,4
"org.apache.lucene.store.FSDirectory.onIndexOutputClosed(FSIndexOutput)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.store.FSDirectory.open(File)",1,30,n/a,23,0,1,1,1
"org.apache.lucene.store.FSDirectory.open(File,LockFactory)",3,1,n/a,12,1,2,5,7
"org.apache.lucene.store.FSDirectory.openInput(String)",2,11,n/a,6,0,1,2,1
"org.apache.lucene.store.FSDirectory.setLockFactory(LockFactory)",8,10,n/a,17,2,1,9,4
"org.apache.lucene.store.FSDirectory.setReadChunkSize(int)",1,2,n/a,31,1,1,4,3
"org.apache.lucene.store.FSDirectory.sync(Collection<String>)",5,5,n/a,9,0,1,6,2
"org.apache.lucene.store.FSDirectory.sync(String)",2,5,n/a,5,0,1,1,1
"org.apache.lucene.store.FSDirectory.toString()",3,2,n/a,5,0,0,1,1
"org.apache.lucene.store.FSDirectory.touchFile(String)",4,3,n/a,10,0,1,3,1
"org.apache.lucene.store.FSLockFactory.getLockDir()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.store.FSLockFactory.setLockDir(File)",1,5,n/a,12,0,1,3,2
"org.apache.lucene.store.FileSwitchDirectory.FileSwitchDirectory(Set<String>,Directory,Directory,boolean)",1,0,n/a,7,0,4,5,1
"org.apache.lucene.store.FileSwitchDirectory.close()",2,180,n/a,11,2,0,5,2
"org.apache.lucene.store.FileSwitchDirectory.createOutput(String)",2,24,n/a,4,0,1,1,1
"org.apache.lucene.store.FileSwitchDirectory.deleteFile(String)",2,16,n/a,4,0,1,1,1
"org.apache.lucene.store.FileSwitchDirectory.fileExists(String)",2,19,n/a,4,0,1,1,1
"org.apache.lucene.store.FileSwitchDirectory.fileLength(String)",2,7,n/a,4,0,1,1,1
"org.apache.lucene.store.FileSwitchDirectory.fileModified(String)",2,5,n/a,4,0,1,1,1
"org.apache.lucene.store.FileSwitchDirectory.getDirectory(String)",2,7,n/a,8,1,1,4,2
"org.apache.lucene.store.FileSwitchDirectory.getExtension(String)",3,2,n/a,8,1,1,4,2
"org.apache.lucene.store.FileSwitchDirectory.getPrimaryDir()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.store.FileSwitchDirectory.getSecondaryDir()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.store.FileSwitchDirectory.listAll()",9,13,n/a,38,2,0,16,9
"org.apache.lucene.store.FileSwitchDirectory.openInput(String)",2,11,n/a,4,0,1,1,1
"org.apache.lucene.store.FileSwitchDirectory.sync(Collection<String>)",8,5,n/a,12,0,1,8,3
"org.apache.lucene.store.FileSwitchDirectory.sync(String)",2,5,n/a,5,0,1,1,1
"org.apache.lucene.store.FileSwitchDirectory.touchFile(String)",2,3,n/a,7,0,1,1,1
"org.apache.lucene.store.IndexInput.IndexInput()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.store.IndexInput.IndexInput(String)",1,9,n/a,9,1,1,3,2
"org.apache.lucene.store.IndexInput.close()",n/a,20,11,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.IndexInput.copyBytes(IndexOutput,long)",2,3,n/a,21,1,2,7,3
"org.apache.lucene.store.IndexInput.getFilePointer()",n/a,16,8,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.IndexInput.length()",n/a,21,10,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.IndexInput.seek(long)",n/a,33,8,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.IndexInput.skipChars(int)",4,2,n/a,26,2,1,9,4
"org.apache.lucene.store.IndexInput.toString()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.store.IndexOutput.close()",n/a,8,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.IndexOutput.flush()",n/a,3,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.IndexOutput.getFilePointer()",n/a,42,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.IndexOutput.length()",n/a,3,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.IndexOutput.seek(long)",n/a,5,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.IndexOutput.setLength(long)",0,1,n/a,11,0,1,0,1
"org.apache.lucene.store.InputStreamDataInput.InputStreamDataInput(InputStream)",0,10,n/a,3,0,1,1,1
"org.apache.lucene.store.InputStreamDataInput.close()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.store.InputStreamDataInput.readByte()",2,58,n/a,6,0,0,4,2
"org.apache.lucene.store.InputStreamDataInput.readBytes(byte[],int,int)",2,28,n/a,12,2,3,6,3
"org.apache.lucene.store.Lock.With.With(Lock,long)",0,0,n/a,5,0,2,2,1
"org.apache.lucene.store.Lock.With.doBody()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.Lock.With.run()",3,0,n/a,18,1,0,6,2
"org.apache.lucene.store.Lock.isLocked()",n/a,3,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.Lock.obtain()",n/a,5,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.Lock.obtain(long)",8,8,n/a,41,3,1,20,9
"org.apache.lucene.store.Lock.release()",n/a,11,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.store.LockFactory.clearLock(String)",n/a,2,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.LockFactory.getLockPrefix()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.store.LockFactory.makeLock(String)",n/a,3,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.store.LockFactory.setLockPrefix(String)",0,4,n/a,13,0,1,1,1
"org.apache.lucene.store.LockObtainFailedException.LockObtainFailedException(String)",1,4,n/a,3,0,1,1,1
"org.apache.lucene.store.LockReleaseFailedException.LockReleaseFailedException(String)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.store.LockStressTest.main(String[])",24,0,n/a,62,2,1,34,12
"org.apache.lucene.store.LockVerifyServer.getTime(long)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.store.LockVerifyServer.main(String[])",23,0,n/a,43,3,1,34,8
"org.apache.lucene.store.MMapDirectory.MMapDirectory(File)",2,1,n/a,9,0,1,2,1
"org.apache.lucene.store.MMapDirectory.MMapDirectory(File,LockFactory)",2,1,n/a,11,0,2,2,1
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.MMapIndexInput(String,RandomAccessFile,int)",8,1,n/a,26,1,3,20,6
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.clone()",7,18,n/a,24,1,0,16,4
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.close()",4,20,n/a,20,3,0,15,5
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.equals(Object)",0,0,n/a,5,0,1,1,1
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.getFilePointer()",2,17,n/a,8,1,0,3,2
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.hashCode()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.length()",0,21,n/a,4,0,0,1,1
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readByte()",6,58,n/a,18,3,0,10,5
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readBytes(byte[],int,int)",8,28,n/a,23,3,3,15,5
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readInt()",3,43,n/a,10,1,0,4,3
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readLong()",3,28,n/a,10,1,0,4,3
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.readShort()",3,6,n/a,10,1,0,4,3
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.seek(long)",6,35,n/a,24,2,1,13,6
"org.apache.lucene.store.MMapDirectory.MMapIndexInput.unsetBuffers()",0,2,n/a,5,0,0,3,1
"org.apache.lucene.store.MMapDirectory.cleanMapping(ByteBuffer)",12,1,n/a,11,5,1,12,4
"org.apache.lucene.store.MMapDirectory.getMaxChunkSize()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.store.MMapDirectory.getUseUnmap()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.store.MMapDirectory.openInput(String,int)",6,17,n/a,12,1,2,6,1
"org.apache.lucene.store.MMapDirectory.setMaxChunkSize(int)",2,6,n/a,21,0,1,4,3
"org.apache.lucene.store.MMapDirectory.setUseUnmap(boolean)",1,4,n/a,17,0,1,3,3
"org.apache.lucene.store.NIOFSDirectory.NIOFSDirectory(File)",1,1,n/a,8,0,1,1,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSDirectory(File,LockFactory)",1,1,n/a,10,0,2,1,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput.NIOFSIndexInput(File,int,int)",2,1,n/a,4,0,3,2,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput.close()",2,20,n/a,11,2,0,4,3
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput.newBuffer(byte[])",2,3,n/a,5,0,1,2,1
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput.readInternal(byte[],int,int)",17,4,n/a,66,3,3,37,10
"org.apache.lucene.store.NIOFSDirectory.openInput(String,int)",5,17,n/a,6,0,2,2,1
"org.apache.lucene.store.NRTCachingDirectory.NRTCachingDirectory(Directory,double,double)",0,0,n/a,10,0,3,3,1
"org.apache.lucene.store.NRTCachingDirectory.clearLock(String)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.store.NRTCachingDirectory.close()",4,180,n/a,15,1,0,4,2
"org.apache.lucene.store.NRTCachingDirectory.createOutput(String)",7,24,n/a,24,2,1,11,6
"org.apache.lucene.store.NRTCachingDirectory.deleteFile(String)",5,16,n/a,12,1,1,6,3
"org.apache.lucene.store.NRTCachingDirectory.doCacheWrite(String)",4,1,n/a,7,0,1,2,4
"org.apache.lucene.store.NRTCachingDirectory.fileExists(String)",2,19,n/a,4,0,1,1,2
"org.apache.lucene.store.NRTCachingDirectory.fileLength(String)",3,7,n/a,8,1,1,3,2
"org.apache.lucene.store.NRTCachingDirectory.fileModified(String)",3,5,n/a,8,1,1,3,2
"org.apache.lucene.store.NRTCachingDirectory.getLockFactory()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.store.NRTCachingDirectory.getLockID()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.store.NRTCachingDirectory.getMergeScheduler()",6,1,n/a,9,3,0,5,1
"org.apache.lucene.store.NRTCachingDirectory.listAll()",8,13,n/a,26,2,0,9,5
"org.apache.lucene.store.NRTCachingDirectory.listCachedFiles()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.store.NRTCachingDirectory.makeLock(String)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.store.NRTCachingDirectory.openInput(String)",5,11,n/a,14,2,1,7,4
"org.apache.lucene.store.NRTCachingDirectory.openInput(String,int)",3,17,n/a,8,1,2,3,2
"org.apache.lucene.store.NRTCachingDirectory.setLockFactory(LockFactory)",1,9,n/a,4,0,1,1,1
"org.apache.lucene.store.NRTCachingDirectory.sizeInBytes()",1,0,n/a,5,0,0,1,1
"org.apache.lucene.store.NRTCachingDirectory.sync(Collection<String>)",3,5,n/a,10,1,1,5,3
"org.apache.lucene.store.NRTCachingDirectory.toString()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.store.NRTCachingDirectory.touchFile(String)",3,3,n/a,11,1,1,3,2
"org.apache.lucene.store.NRTCachingDirectory.unCache(String)",10,2,n/a,30,2,1,15,4
"org.apache.lucene.store.NativeFSLock.NativeFSLock(File,String)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.store.NativeFSLock.isLocked()",4,3,n/a,16,1,0,10,5
"org.apache.lucene.store.NativeFSLock.lockExists()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.store.NativeFSLock.obtain()",20,7,n/a,90,6,0,38,14
"org.apache.lucene.store.NativeFSLock.release()",10,13,n/a,45,5,0,19,4
"org.apache.lucene.store.NativeFSLock.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.store.NativeFSLockFactory.NativeFSLockFactory()",1,1,n/a,10,0,0,1,1
"org.apache.lucene.store.NativeFSLockFactory.NativeFSLockFactory(File)",1,3,n/a,9,0,1,1,1
"org.apache.lucene.store.NativeFSLockFactory.NativeFSLockFactory(String)",2,2,n/a,9,0,1,1,1
"org.apache.lucene.store.NativeFSLockFactory.clearLock(String)",5,2,n/a,20,2,1,5,3
"org.apache.lucene.store.NativeFSLockFactory.makeLock(String)",1,4,n/a,6,0,1,3,2
"org.apache.lucene.store.NativePosixUtil.advise(FileDescriptor,long,long,int)",2,0,n/a,6,1,4,3,2
"org.apache.lucene.store.NativePosixUtil.madvise(ByteBuffer,int)",0,0,n/a,1,-1,2,0,1
"org.apache.lucene.store.NativePosixUtil.open_direct(String,boolean)",0,2,n/a,1,-1,2,0,1
"org.apache.lucene.store.NativePosixUtil.posix_fadvise(FileDescriptor,long,long,int)",0,1,n/a,1,-1,4,0,1
"org.apache.lucene.store.NativePosixUtil.posix_madvise(ByteBuffer,int)",0,0,n/a,1,-1,2,0,1
"org.apache.lucene.store.NativePosixUtil.pread(FileDescriptor,long,ByteBuffer)",0,1,n/a,1,-1,3,0,1
"org.apache.lucene.store.NoLock.isLocked()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.store.NoLock.obtain()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.store.NoLock.release()",0,11,n/a,3,0,0,0,1
"org.apache.lucene.store.NoLock.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.store.NoLockFactory.NoLockFactory()",0,1,n/a,8,0,0,0,1
"org.apache.lucene.store.NoLockFactory.clearLock(String)",0,2,n/a,2,0,1,0,1
"org.apache.lucene.store.NoLockFactory.getNoLockFactory()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.store.NoLockFactory.makeLock(String)",0,3,n/a,4,0,1,1,1
"org.apache.lucene.store.NoSuchDirectoryException.NoSuchDirectoryException(String)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.store.OutputStreamDataOutput.OutputStreamDataOutput(OutputStream)",0,9,n/a,3,0,1,1,1
"org.apache.lucene.store.OutputStreamDataOutput.close()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.store.OutputStreamDataOutput.writeByte(byte)",1,49,n/a,4,0,1,1,1
"org.apache.lucene.store.OutputStreamDataOutput.writeBytes(byte[],int,int)",1,20,n/a,4,0,3,1,1
"org.apache.lucene.store.RAMDirectory.RAMDirectory()",2,38,n/a,8,1,0,2,2
"org.apache.lucene.store.RAMDirectory.RAMDirectory(Directory)",1,0,n/a,29,0,1,1,1
"org.apache.lucene.store.RAMDirectory.RAMDirectory(Directory,boolean)",6,1,n/a,12,2,2,7,4
"org.apache.lucene.store.RAMDirectory.close()",1,182,n/a,6,0,0,2,1
"org.apache.lucene.store.RAMDirectory.createOutput(String)",6,28,n/a,13,1,1,8,2
"org.apache.lucene.store.RAMDirectory.deleteFile(String)",4,19,n/a,14,1,1,6,2
"org.apache.lucene.store.RAMDirectory.fileExists(String)",2,27,n/a,6,0,1,2,1
"org.apache.lucene.store.RAMDirectory.fileLength(String)",4,8,n/a,12,1,1,5,2
"org.apache.lucene.store.RAMDirectory.fileModified(String)",4,6,n/a,12,1,1,5,2
"org.apache.lucene.store.RAMDirectory.listAll()",7,16,n/a,10,0,0,6,2
"org.apache.lucene.store.RAMDirectory.newRAMFile()",1,1,n/a,8,0,0,1,1
"org.apache.lucene.store.RAMDirectory.openInput(String)",4,16,n/a,10,1,1,5,2
"org.apache.lucene.store.RAMDirectory.sizeInBytes()",2,2,n/a,8,0,0,2,1
"org.apache.lucene.store.RAMDirectory.touchFile(String)",8,4,n/a,23,2,1,11,4
"org.apache.lucene.store.RAMFile.RAMFile()",0,3,n/a,2,0,0,0,1
"org.apache.lucene.store.RAMFile.RAMFile(RAMDirectory)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.store.RAMFile.addBuffer(int)",3,1,n/a,11,1,1,7,2
"org.apache.lucene.store.RAMFile.getBuffer(int)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.store.RAMFile.getLastModified()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.store.RAMFile.getLength()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.store.RAMFile.getSizeInBytes()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.store.RAMFile.newBuffer(int)",0,2,n/a,9,0,1,1,1
"org.apache.lucene.store.RAMFile.numBuffers()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.store.RAMFile.setLastModified(long)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.store.RAMFile.setLength(long)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.store.RAMInputStream.RAMInputStream(RAMFile)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.store.RAMInputStream.RAMInputStream(String,RAMFile)",2,3,n/a,12,1,2,7,2
"org.apache.lucene.store.RAMInputStream.close()",0,20,n/a,4,0,0,0,1
"org.apache.lucene.store.RAMInputStream.copyBytes(IndexOutput,long)",2,3,n/a,17,2,2,12,4
"org.apache.lucene.store.RAMInputStream.getFilePointer()",0,16,n/a,4,0,0,1,2
"org.apache.lucene.store.RAMInputStream.length()",0,21,n/a,4,0,0,1,1
"org.apache.lucene.store.RAMInputStream.readByte()",1,58,n/a,8,1,0,4,2
"org.apache.lucene.store.RAMInputStream.readBytes(byte[],int,int)",2,28,n/a,15,2,3,10,4
"org.apache.lucene.store.RAMInputStream.seek(long)",1,33,n/a,8,1,1,4,4
"org.apache.lucene.store.RAMInputStream.switchCurrentBuffer(boolean)",3,4,n/a,18,2,1,10,4
"org.apache.lucene.store.RAMOutputStream.RAMOutputStream()",2,1,n/a,4,0,0,1,1
"org.apache.lucene.store.RAMOutputStream.RAMOutputStream(RAMFile)",0,5,n/a,7,0,1,3,1
"org.apache.lucene.store.RAMOutputStream.close()",1,9,n/a,4,0,0,1,1
"org.apache.lucene.store.RAMOutputStream.copyBytes(DataInput,long)",2,5,n/a,17,2,2,11,4
"org.apache.lucene.store.RAMOutputStream.flush()",3,6,n/a,5,0,0,2,1
"org.apache.lucene.store.RAMOutputStream.getFilePointer()",0,49,n/a,4,0,0,1,2
"org.apache.lucene.store.RAMOutputStream.length()",0,6,n/a,4,0,0,1,1
"org.apache.lucene.store.RAMOutputStream.reset()",1,4,n/a,9,0,0,6,1
"org.apache.lucene.store.RAMOutputStream.seek(long)",2,5,n/a,11,1,1,5,3
"org.apache.lucene.store.RAMOutputStream.setFileLength()",1,2,n/a,6,1,0,3,2
"org.apache.lucene.store.RAMOutputStream.sizeInBytes()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.store.RAMOutputStream.switchCurrentBuffer()",3,4,n/a,10,1,0,6,2
"org.apache.lucene.store.RAMOutputStream.writeByte(byte)",1,49,n/a,8,1,1,4,2
"org.apache.lucene.store.RAMOutputStream.writeBytes(byte[],int,int)",2,21,n/a,16,2,3,11,4
"org.apache.lucene.store.RAMOutputStream.writeTo(IndexOutput)",3,4,n/a,16,2,1,11,3
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSDirectory(File)",1,1,n/a,8,0,1,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSDirectory(File,LockFactory)",1,1,n/a,10,0,2,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.Descriptor.Descriptor(File,String)",2,1,n/a,5,0,2,3,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.Descriptor.close()",1,2,n/a,7,1,0,3,2
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.SimpleFSIndexInput(File,int,int)",1,0,n/a,5,0,3,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.SimpleFSIndexInput(String,File,int,int)",2,3,n/a,5,0,4,3,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.clone()",1,21,n/a,6,0,0,3,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.close()",1,20,n/a,5,0,0,2,2
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.copyBytes(IndexOutput,long)",2,3,n/a,6,0,2,2,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.isFDValid()",2,0,n/a,6,0,0,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.length()",0,22,n/a,4,0,0,1,1
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.readInternal(byte[],int,int)",9,4,n/a,43,4,3,23,7
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.seekInternal(long)",0,2,n/a,3,0,1,0,1
"org.apache.lucene.store.SimpleFSDirectory.openInput(String,int)",5,17,n/a,7,0,2,3,1
"org.apache.lucene.store.SimpleFSLock.SimpleFSLock(File,String)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.store.SimpleFSLock.isLocked()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.store.SimpleFSLock.obtain()",8,5,n/a,14,1,0,6,4
"org.apache.lucene.store.SimpleFSLock.release()",3,11,n/a,5,0,0,2,3
"org.apache.lucene.store.SimpleFSLock.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.store.SimpleFSLockFactory.SimpleFSLockFactory()",1,0,n/a,10,0,0,1,1
"org.apache.lucene.store.SimpleFSLockFactory.SimpleFSLockFactory(File)",1,3,n/a,7,0,1,1,1
"org.apache.lucene.store.SimpleFSLockFactory.SimpleFSLockFactory(String)",2,3,n/a,7,0,1,1,1
"org.apache.lucene.store.SimpleFSLockFactory.clearLock(String)",5,2,n/a,12,2,1,6,5
"org.apache.lucene.store.SimpleFSLockFactory.makeLock(String)",1,4,n/a,7,1,1,3,2
"org.apache.lucene.store.SingleInstanceLock.SingleInstanceLock(HashSet<String>,String)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.store.SingleInstanceLock.isLocked()",1,3,n/a,6,1,0,2,1
"org.apache.lucene.store.SingleInstanceLock.obtain()",1,5,n/a,6,1,0,2,1
"org.apache.lucene.store.SingleInstanceLock.release()",1,11,n/a,6,1,0,2,1
"org.apache.lucene.store.SingleInstanceLock.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.store.SingleInstanceLockFactory.clearLock(String)",2,2,n/a,8,2,1,3,2
"org.apache.lucene.store.SingleInstanceLockFactory.makeLock(String)",1,3,n/a,7,0,1,1,1
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.CheckedLock(Lock)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.isLocked()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.obtain()",1,5,n/a,5,0,0,1,1
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.obtain(long)",2,8,n/a,8,0,1,4,2
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.release()",3,11,n/a,7,1,0,3,2
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock.verify(byte)",11,2,n/a,17,1,1,13,3
"org.apache.lucene.store.VerifyingLockFactory.VerifyingLockFactory(byte,LockFactory,String,int)",0,1,n/a,14,0,4,4,1
"org.apache.lucene.store.VerifyingLockFactory.clearLock(String)",1,2,n/a,5,0,1,1,1
"org.apache.lucene.store.VerifyingLockFactory.makeLock(String)",2,3,n/a,4,0,1,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsDirectory(File)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsDirectory(File,LockFactory)",1,0,n/a,10,0,2,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.WindowsIndexInput(File,int)",5,1,n/a,6,0,2,4,1
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.clone()",1,21,n/a,6,0,0,3,1
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.close()",1,20,n/a,8,1,0,3,3
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.length()",0,21,n/a,4,0,0,1,1
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.readInternal(byte[],int,int)",6,4,n/a,14,1,3,8,3
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput.seekInternal(long)",0,2,n/a,3,0,1,0,1
"org.apache.lucene.store.WindowsDirectory.close(long)",0,1,n/a,2,-1,1,0,1
"org.apache.lucene.store.WindowsDirectory.length(long)",0,1,n/a,2,-1,1,0,1
"org.apache.lucene.store.WindowsDirectory.open(String)",0,0,n/a,2,-1,1,0,1
"org.apache.lucene.store.WindowsDirectory.openInput(String,int)",5,17,n/a,5,0,2,2,1
"org.apache.lucene.store.WindowsDirectory.read(long,byte[],int,int,long)",0,1,n/a,2,-1,5,0,1
"org.apache.lucene.store.instantiated.FieldSetting.FieldSetting()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.store.instantiated.FieldSetting.FieldSetting(String)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.FieldSetting.equals(Object)",3,0,n/a,9,0,1,6,4
"org.apache.lucene.store.instantiated.FieldSetting.hashCode()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.FieldSettings.FieldSettings()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.store.instantiated.FieldSettings.get(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.FieldSettings.get(String,boolean)",3,0,n/a,8,1,2,5,3
"org.apache.lucene.store.instantiated.FieldSettings.merge(FieldSetting)",5,0,n/a,32,1,1,21,10
"org.apache.lucene.store.instantiated.FieldSettings.values()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedAllTermDocs.InstantiatedAllTermDocs(InstantiatedIndexReader)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.store.instantiated.InstantiatedAllTermDocs.isDeleted(int)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.InstantiatedDocument()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.InstantiatedDocument(Document)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.getDocument()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.getDocumentNumber()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.getVectorSpace()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.setDocumentNumber(Integer)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.setVectorSpace(Map<String, List<InstantiatedTermDocumentInformation>>)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedDocument.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.InstantiatedIndex()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.InstantiatedIndex(IndexReader)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.InstantiatedIndex(IndexReader,Set<String>)",106,1,n/a,122,6,2,81,35
"org.apache.lucene.store.instantiated.InstantiatedIndex.close()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.findTerm(String,String)",2,2,n/a,8,1,2,4,2
"org.apache.lucene.store.instantiated.InstantiatedIndex.findTerm(Term)",3,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getDeletedDocuments()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getDocumentsByNumber()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getFieldInfos()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getFieldSettings()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getNormsByFieldNameAndDocumentNumber()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getOrderedTerms()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getTermsByFieldAndText()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.getVersion()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.indexReaderFactory()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.indexWriterFactory(Analyzer,boolean)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.initialize()",4,2,n/a,9,0,0,6,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.readObject(ObjectInputStream)",2,0,n/a,4,0,1,2,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.rebuildFieldInfos()",3,2,n/a,10,1,0,3,2
"org.apache.lucene.store.instantiated.InstantiatedIndex.setDeletedDocuments(BitVector)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.setDocumentsByNumber(InstantiatedDocument[])",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.setNormsByFieldNameAndDocumentNumber(Map<String, byte[]>)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.setOrderedTerms(InstantiatedTerm[])",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndex.setVersion(long)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.InstantiatedIndexReader(InstantiatedIndex)",1,0,n/a,4,0,1,2,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.NormUpdate.NormUpdate(int,byte)",0,1,n/a,4,0,2,2,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.directory()",1,13,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doClose()",0,1,n/a,5,0,0,0,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doCommit(Map<String, String>)",12,1,n/a,28,4,1,15,8
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doDelete(int)",7,1,n/a,12,1,1,5,6
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doSetNorm(int,String,byte)",9,2,n/a,12,1,3,7,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.doUndeleteAll()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.docFreq(Term)",3,28,n/a,9,1,1,4,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.document(int,FieldSelector)",4,20,n/a,35,0,2,1,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getFieldInfos()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getIndex()",0,14,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getTermFreqVector(int,String)",6,32,n/a,9,1,2,4,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getTermFreqVector(int,String,TermVectorMapper)",15,7,n/a,11,2,3,6,4
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getTermFreqVector(int,TermVectorMapper)",15,3,n/a,10,2,2,5,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getTermFreqVectors(int)",12,8,n/a,13,1,1,10,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.getVersion()",1,10,n/a,10,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.hasDeletions()",1,28,n/a,4,0,0,1,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.isCurrent()",0,15,n/a,21,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.isDeleted(int)",4,34,n/a,5,0,1,1,4
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.isOptimized()",0,3,n/a,5,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.maxDoc()",2,138,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.norms(String)",5,29,n/a,21,3,1,10,5
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.norms(String,byte[],int)",4,12,n/a,8,1,3,4,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.numDocs()",6,83,n/a,12,1,0,6,3
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.termDocs()",1,28,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.termDocs(Term)",3,40,n/a,10,1,1,5,2
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.termPositions()",1,10,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.terms()",1,13,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.terms(Term)",7,59,n/a,13,2,1,7,3
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.FieldSetting.FieldSetting()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.FieldSetting.FieldSetting(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.InstantiatedIndexWriter(InstantiatedIndex)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.InstantiatedIndexWriter(InstantiatedIndex,Analyzer)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.InstantiatedIndexWriter(InstantiatedIndex,Analyzer,boolean)",2,1,n/a,8,1,3,5,2
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.abort()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.addDocument(Document)",2,0,n/a,8,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.addDocument(Document,Analyzer)",2,2,n/a,13,0,2,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.addDocument(InstantiatedDocument,Analyzer)",101,1,n/a,152,6,2,91,31
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.addIndexes(IndexReader[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.close()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.commit()",191,2,n/a,207,5,0,140,35
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.deleteDocuments(Term)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.deleteDocuments(Term[])",1,0,n/a,5,1,1,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.docCount()",2,0,n/a,7,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getAnalyzer()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getInfoStream()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getMaxFieldLength()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getMergeFactor()",0,1,n/a,6,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.getSimilarity()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.setInfoStream(PrintStream)",0,0,n/a,8,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.setMaxFieldLength(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.setMergeFactor(int)",0,0,n/a,22,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.setSimilarity(Similarity)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.updateDocument(Term,Document)",2,0,n/a,3,0,2,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.updateDocument(Term,Document,Analyzer)",2,1,n/a,4,0,3,2,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.InstantiatedTerm(String,String)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.binarySearchAssociatedDocuments(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.binarySearchAssociatedDocuments(int,int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.binarySearchAssociatedDocuments(int,int,int)",15,2,n/a,51,2,3,27,10
"org.apache.lucene.store.instantiated.InstantiatedTerm.field()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.getAssociatedDocument(int)",2,0,n/a,13,0,1,2,2
"org.apache.lucene.store.instantiated.InstantiatedTerm.getAssociatedDocuments()",0,9,n/a,9,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.getTerm()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.getTermIndex()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.seekCeilingDocumentInformationIndex(int)",2,0,n/a,10,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.seekCeilingDocumentInformationIndex(int,int)",2,0,n/a,11,0,2,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.seekCeilingDocumentInformationIndex(int,int,int)",2,2,n/a,21,1,3,6,3
"org.apache.lucene.store.instantiated.InstantiatedTerm.setAssociatedDocuments(InstantiatedTermDocumentInformation[])",0,0,n/a,9,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.setTermIndex(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.text()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTerm.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.InstantiatedTermDocs(InstantiatedIndexReader)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.close()",0,52,n/a,5,0,0,0,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.doc()",2,117,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.freq()",1,55,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.next()",7,100,n/a,17,3,0,9,4
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.read(int[],int[])",3,10,n/a,11,2,2,9,3
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.seek(Term)",2,23,n/a,4,0,1,2,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.seek(TermEnum)",2,19,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocs.skipTo(int)",9,40,n/a,37,1,1,14,7
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.InstantiatedTermDocumentInformation(InstantiatedTerm,InstantiatedDocument,int[],byte[][])",0,0,n/a,6,0,4,4,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getDocument()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getPayloads()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getTerm()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getTermOffsets()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.getTermPositions()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.setDocument(InstantiatedDocument)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.setTerm(InstantiatedTerm)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.setTermOffsets(TermVectorOffsetInfo[])",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation.setTermPositions(int[])",0,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.InstantiatedTermEnum(InstantiatedIndexReader)",0,0,n/a,4,0,1,2,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.InstantiatedTermEnum(InstantiatedIndexReader,int)",1,0,n/a,5,0,2,3,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.close()",0,38,n/a,6,0,0,0,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.docFreq()",1,27,n/a,7,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.next()",4,54,n/a,13,1,0,5,2
"org.apache.lucene.store.instantiated.InstantiatedTermEnum.term()",1,110,n/a,7,0,0,1,2
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.InstantiatedTermFreqVector(InstantiatedDocument,String)",9,0,n/a,11,1,2,10,2
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.getField()",0,9,n/a,6,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.getTermDocumentInformations()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.getTermFrequencies()",0,12,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.getTerms()",0,17,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.indexOf(String)",1,3,n/a,6,0,1,4,3
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.indexesOf(String[],int,int)",1,0,n/a,12,1,3,6,2
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.size()",0,5,n/a,3,0,0,1,2
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector.toString()",10,0,n/a,14,2,0,12,4
"org.apache.lucene.store.instantiated.InstantiatedTermPositionVector.InstantiatedTermPositionVector(InstantiatedDocument,String)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositionVector.getOffsets(int)",3,10,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositionVector.getTermPositions(int)",3,10,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.InstantiatedTermPositions(InstantiatedIndexReader)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.getPayload(byte[],int)",3,12,n/a,11,1,2,5,3
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.getPayloadLength()",1,15,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.isPayloadAvailable()",1,9,n/a,3,0,0,1,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.next()",1,98,n/a,9,0,0,2,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.nextPosition()",1,26,n/a,13,0,0,2,1
"org.apache.lucene.store.instantiated.InstantiatedTermPositions.skipTo(int)",1,40,n/a,19,0,1,2,1
"org.apache.lucene.store.instantiated.TestEmptyIndex.termEnumTest(IndexReader)",5,2,n/a,5,0,1,3,1
"org.apache.lucene.store.instantiated.TestEmptyIndex.testNorms()",14,0,n/a,14,0,0,11,1
"org.apache.lucene.store.instantiated.TestEmptyIndex.testNorms(IndexReader)",5,2,n/a,13,2,1,9,3
"org.apache.lucene.store.instantiated.TestEmptyIndex.testSearch()",10,0,n/a,10,0,0,8,1
"org.apache.lucene.store.instantiated.TestEmptyIndex.testTermEnum()",14,0,n/a,14,0,0,11,1
"org.apache.lucene.store.instantiated.TestIndicesEquals.assembleDocument(Document,int)",38,3,n/a,4,8,2,31,7
"org.apache.lucene.store.instantiated.TestIndicesEquals.createToken(String,int,int)",1,1,n/a,4,0,3,1,1
"org.apache.lucene.store.instantiated.TestIndicesEquals.createToken(String,int,int,String)",1,2,n/a,4,0,4,1,1
"org.apache.lucene.store.instantiated.TestIndicesEquals.testEqualBehaviour(Directory,InstantiatedIndex)",78,2,n/a,49,1,2,38,2
"org.apache.lucene.store.instantiated.TestIndicesEquals.testEquals(Directory,InstantiatedIndex)",149,2,n/a,3,7,2,128,28
"org.apache.lucene.store.instantiated.TestIndicesEquals.testInstantiatedIndexWriter()",24,0,n/a,29,1,0,24,5
"org.apache.lucene.store.instantiated.TestIndicesEquals.testLoadIndexReader()",15,0,n/a,18,1,0,14,2
"org.apache.lucene.store.instantiated.TestIndicesEquals.testTermDocsSomeMore(Directory,InstantiatedIndex)",136,1,n/a,103,1,2,74,10
"org.apache.lucene.store.instantiated.TestMultiSegmentReaderOnConstructor.addDocument(IndexWriter,String)",4,6,n/a,5,0,2,3,1
"org.apache.lucene.store.instantiated.TestMultiSegmentReaderOnConstructor.test()",28,0,n/a,26,1,0,21,2
"org.apache.lucene.store.instantiated.TestRealTime.Collector.acceptsDocsOutOfOrder()",0,15,n/a,2,0,0,1,1
"org.apache.lucene.store.instantiated.TestRealTime.Collector.collect(int)",0,50,n/a,4,0,1,1,1
"org.apache.lucene.store.instantiated.TestRealTime.Collector.setNextReader(IndexReader,int)",0,19,n/a,2,0,2,0,1
"org.apache.lucene.store.instantiated.TestRealTime.Collector.setScorer(Scorer)",0,27,n/a,2,0,1,0,1
"org.apache.lucene.store.instantiated.TestRealTime.test()",24,0,n/a,22,0,0,20,1
"org.apache.lucene.store.instantiated.TestSerialization.test()",26,0,n/a,23,0,0,21,1
"org.apache.lucene.store.instantiated.TestUnoptimizedReaderOnConstructor.addDocument(IndexWriter,String)",4,6,n/a,5,0,2,3,1
"org.apache.lucene.store.instantiated.TestUnoptimizedReaderOnConstructor.test()",27,0,n/a,25,1,0,20,2
"org.apache.lucene.util.ArrayUtil.ArrayUtil()",0,0,n/a,8,0,0,0,1
"org.apache.lucene.util.ArrayUtil.equals(char[],int,char[],int,int)",0,0,n/a,23,3,5,8,5
"org.apache.lucene.util.ArrayUtil.equals(int[],int,int[],int,int)",0,0,n/a,23,3,5,8,5
"org.apache.lucene.util.ArrayUtil.getShrinkSize(int,int,int)",1,8,n/a,10,0,3,4,2
"org.apache.lucene.util.ArrayUtil.getSorter(T[])",3,3,n/a,4,2,1,7,1
"org.apache.lucene.util.ArrayUtil.getSorter(T[],Comparator<? super T>)",3,3,n/a,4,2,2,7,1
"org.apache.lucene.util.ArrayUtil.grow(boolean[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(boolean[],int)",2,1,n/a,9,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(byte[])",1,2,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(byte[],int)",2,16,n/a,9,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(char[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(char[],int)",2,8,n/a,9,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(double[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(double[],int)",2,1,n/a,9,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(float[])",1,2,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(float[],int)",2,1,n/a,9,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(float[][])",1,1,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(float[][],int)",2,1,n/a,10,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(int[])",1,8,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(int[],int)",2,26,n/a,9,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(int[][])",1,1,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(int[][],int)",2,1,n/a,10,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(long[])",1,1,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(long[],int)",2,3,n/a,9,1,2,6,2
"org.apache.lucene.util.ArrayUtil.grow(short[])",1,0,n/a,3,0,1,1,1
"org.apache.lucene.util.ArrayUtil.grow(short[],int)",2,1,n/a,9,1,2,6,2
"org.apache.lucene.util.ArrayUtil.hashCode(byte[],int,int)",0,1,n/a,10,0,3,6,2
"org.apache.lucene.util.ArrayUtil.hashCode(char[],int,int)",0,1,n/a,10,0,3,6,2
"org.apache.lucene.util.ArrayUtil.insertionSort(T[])",1,0,n/a,7,0,1,1,1
"org.apache.lucene.util.ArrayUtil.insertionSort(T[],Comparator<? super T>)",1,0,n/a,7,0,2,1,1
"org.apache.lucene.util.ArrayUtil.insertionSort(T[],int,int)",2,1,n/a,10,0,3,3,2
"org.apache.lucene.util.ArrayUtil.insertionSort(T[],int,int,Comparator<? super T>)",2,1,n/a,10,0,4,3,2
"org.apache.lucene.util.ArrayUtil.mergeSort(T[])",1,4,n/a,7,0,1,1,1
"org.apache.lucene.util.ArrayUtil.mergeSort(T[],Comparator<? super T>)",1,5,n/a,7,0,2,1,1
"org.apache.lucene.util.ArrayUtil.mergeSort(T[],int,int)",2,1,n/a,10,0,3,3,2
"org.apache.lucene.util.ArrayUtil.mergeSort(T[],int,int,Comparator<? super T>)",2,1,n/a,11,0,4,3,2
"org.apache.lucene.util.ArrayUtil.oversize(int,int)",1,43,n/a,78,2,2,30,13
"org.apache.lucene.util.ArrayUtil.parse(char[],int,int,int,boolean)",5,1,n/a,28,2,5,19,7
"org.apache.lucene.util.ArrayUtil.parseInt(char[])",1,0,n/a,12,0,1,1,1
"org.apache.lucene.util.ArrayUtil.parseInt(char[],int,int)",1,1,n/a,11,0,3,1,1
"org.apache.lucene.util.ArrayUtil.parseInt(char[],int,int,int)",4,2,n/a,31,1,4,12,8
"org.apache.lucene.util.ArrayUtil.quickSort(T[])",1,1,n/a,7,0,1,1,1
"org.apache.lucene.util.ArrayUtil.quickSort(T[],Comparator<? super T>)",1,1,n/a,7,0,2,1,1
"org.apache.lucene.util.ArrayUtil.quickSort(T[],int,int)",2,1,n/a,10,0,3,3,2
"org.apache.lucene.util.ArrayUtil.quickSort(T[],int,int,Comparator<? super T>)",2,2,n/a,10,0,4,3,2
"org.apache.lucene.util.ArrayUtil.shrink(boolean[],int)",2,0,n/a,10,1,2,7,2
"org.apache.lucene.util.ArrayUtil.shrink(byte[],int)",2,1,n/a,10,1,2,7,2
"org.apache.lucene.util.ArrayUtil.shrink(char[],int)",2,0,n/a,10,1,2,7,2
"org.apache.lucene.util.ArrayUtil.shrink(float[][],int)",2,0,n/a,11,1,2,7,2
"org.apache.lucene.util.ArrayUtil.shrink(int[],int)",2,1,n/a,10,1,2,7,2
"org.apache.lucene.util.ArrayUtil.shrink(int[][],int)",2,0,n/a,11,1,2,7,2
"org.apache.lucene.util.ArrayUtil.shrink(long[],int)",2,0,n/a,10,1,2,7,2
"org.apache.lucene.util.ArrayUtil.shrink(short[],int)",2,0,n/a,10,1,2,7,2
"org.apache.lucene.util.ArrayUtil.toIntArray(Collection<Integer>)",1,0,n/a,10,1,1,6,2
"org.apache.lucene.util.AttributeImpl.assertExternalClass(Class<? extends AttributeImpl>)",4,1,n/a,9,0,1,2,3
"org.apache.lucene.util.AttributeImpl.clear()",n/a,2,33,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.AttributeImpl.clone()",2,5,n/a,14,1,0,5,2
"org.apache.lucene.util.AttributeImpl.copyTo(AttributeImpl)",n/a,3,33,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.AttributeImpl.reflectAsString(boolean)",12,3,n/a,9,3,1,8,4
"org.apache.lucene.util.AttributeImpl.reflectWith(AttributeReflector)",25,8,n/a,61,3,1,24,9
"org.apache.lucene.util.AttributeImpl.toString()",1,4,n/a,18,0,0,1,1
"org.apache.lucene.util.AttributeReflector.reflect(Class<? extends Attribute>,String,Object)",n/a,25,4,n/a,n/a,3,n/a,n/a
"org.apache.lucene.util.AttributeSource.AttributeFactory.DefaultAttributeFactory.DefaultAttributeFactory()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.AttributeSource.AttributeFactory.DefaultAttributeFactory.createAttributeInstance(Class<? extends Attribute>)",6,2,n/a,10,1,1,4,3
"org.apache.lucene.util.AttributeSource.AttributeFactory.DefaultAttributeFactory.getClassForInterface(Class<? extends Attribute>)",11,1,n/a,24,3,1,10,5
"org.apache.lucene.util.AttributeSource.AttributeFactory.createAttributeInstance(Class<? extends Attribute>)",n/a,2,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.AttributeSource.AttributeSource()",1,3,n/a,6,0,0,1,1
"org.apache.lucene.util.AttributeSource.AttributeSource(AttributeFactory)",2,3,n/a,9,0,1,4,1
"org.apache.lucene.util.AttributeSource.AttributeSource(AttributeSource)",1,2,n/a,12,1,1,6,2
"org.apache.lucene.util.AttributeSource.State.clone()",3,2,n/a,9,1,0,5,2
"org.apache.lucene.util.AttributeSource.addAttribute(Class<A>)",8,482,n/a,19,2,1,6,4
"org.apache.lucene.util.AttributeSource.addAttributeImpl(AttributeImpl)",7,2,n/a,27,2,1,11,4
"org.apache.lucene.util.AttributeSource.captureState()",2,27,n/a,8,0,0,2,2
"org.apache.lucene.util.AttributeSource.clearAttributes()",2,60,n/a,9,1,0,4,2
"org.apache.lucene.util.AttributeSource.cloneAttributes()",12,14,n/a,21,2,0,9,4
"org.apache.lucene.util.AttributeSource.copyTo(AttributeSource)",7,9,n/a,18,2,1,7,3
"org.apache.lucene.util.AttributeSource.equals(Object)",10,0,n/a,31,4,1,19,10
"org.apache.lucene.util.AttributeSource.getAttribute(Class<A>)",4,29,n/a,18,1,1,4,2
"org.apache.lucene.util.AttributeSource.getAttributeClassesIterator()",3,3,n/a,6,0,0,1,1
"org.apache.lucene.util.AttributeSource.getAttributeFactory()",0,3,n/a,6,0,0,1,1
"org.apache.lucene.util.AttributeSource.getAttributeImplsIterator()",6,2,n/a,3,3,0,11,3
"org.apache.lucene.util.AttributeSource.getAttributeInterfaces(Class<? extends AttributeImpl>)",9,2,n/a,20,4,1,11,6
"org.apache.lucene.util.AttributeSource.getCurrentState()",8,10,n/a,15,1,0,11,4
"org.apache.lucene.util.AttributeSource.hasAttribute(Class<? extends Attribute>)",1,9,n/a,7,0,1,1,1
"org.apache.lucene.util.AttributeSource.hasAttributes()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.util.AttributeSource.hashCode()",2,0,n/a,8,1,0,6,2
"org.apache.lucene.util.AttributeSource.reflectAsString(boolean)",12,1,n/a,9,3,1,8,4
"org.apache.lucene.util.AttributeSource.reflectWith(AttributeReflector)",2,7,n/a,14,1,1,4,2
"org.apache.lucene.util.AttributeSource.restoreState(State)",6,23,n/a,27,2,1,8,4
"org.apache.lucene.util.AttributeSource.toString()",10,0,n/a,23,2,0,9,4
"org.apache.lucene.util.BitUtil.BitUtil()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.BitUtil.isPowerOfTwo(int)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.util.BitUtil.isPowerOfTwo(long)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(int)",0,3,n/a,11,0,1,8,1
"org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(long)",0,0,n/a,12,0,1,9,1
"org.apache.lucene.util.BitUtil.nlz(long)",0,1,n/a,18,1,1,12,4
"org.apache.lucene.util.BitUtil.ntz(int)",0,0,n/a,15,0,1,10,4
"org.apache.lucene.util.BitUtil.ntz(long)",0,6,n/a,37,1,1,23,8
"org.apache.lucene.util.BitUtil.ntz2(long)",0,0,n/a,12,1,1,12,4
"org.apache.lucene.util.BitUtil.ntz3(long)",0,0,n/a,17,1,1,18,6
"org.apache.lucene.util.BitUtil.pop(long)",0,35,n/a,23,0,1,7,1
"org.apache.lucene.util.BitUtil.pop_andnot(long[],long[],int,int)",7,1,n/a,109,2,4,66,5
"org.apache.lucene.util.BitUtil.pop_array(long[],int,int)",7,7,n/a,125,2,3,66,5
"org.apache.lucene.util.BitUtil.pop_intersect(long[],long[],int,int)",7,1,n/a,104,2,4,66,5
"org.apache.lucene.util.BitUtil.pop_union(long[],long[],int,int)",7,1,n/a,109,2,4,66,5
"org.apache.lucene.util.BitUtil.pop_xor(long[],long[],int,int)",7,1,n/a,105,2,4,66,5
"org.apache.lucene.util.BitVector.BitVector(Directory,String)",7,3,n/a,25,2,2,13,3
"org.apache.lucene.util.BitVector.BitVector(byte[],int)",0,1,n/a,5,0,2,3,1
"org.apache.lucene.util.BitVector.BitVector(int)",1,6,n/a,6,0,1,3,1
"org.apache.lucene.util.BitVector.clear(int)",1,0,n/a,8,1,1,4,2
"org.apache.lucene.util.BitVector.clone()",2,1,n/a,8,0,0,5,1
"org.apache.lucene.util.BitVector.count()",0,19,n/a,14,1,0,9,3
"org.apache.lucene.util.BitVector.get(int)",0,23,n/a,6,0,1,2,2
"org.apache.lucene.util.BitVector.getAndSet(int)",1,1,n/a,18,1,1,11,4
"org.apache.lucene.util.BitVector.getNumBytes(int)",0,2,n/a,7,1,1,4,2
"org.apache.lucene.util.BitVector.getRecomputedCount()",0,1,n/a,8,0,0,7,2
"org.apache.lucene.util.BitVector.isSparse()",3,1,n/a,29,1,0,18,6
"org.apache.lucene.util.BitVector.length()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.util.BitVector.readBits(IndexInput)",3,1,n/a,6,0,1,3,1
"org.apache.lucene.util.BitVector.readDgaps(IndexInput)",5,1,n/a,13,1,1,9,2
"org.apache.lucene.util.BitVector.set(int)",1,5,n/a,8,1,1,4,2
"org.apache.lucene.util.BitVector.size()",0,7,n/a,5,0,0,1,1
"org.apache.lucene.util.BitVector.write(Directory,String)",7,3,n/a,17,2,2,8,2
"org.apache.lucene.util.BitVector.writeBits(IndexOutput)",5,1,n/a,6,0,1,3,1
"org.apache.lucene.util.BitVector.writeDgaps(IndexOutput)",8,1,n/a,17,2,1,14,4
"org.apache.lucene.util.Bits.MatchAllBits.MatchAllBits(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.util.Bits.MatchAllBits.get(int)",0,14,n/a,3,0,1,1,1
"org.apache.lucene.util.Bits.MatchAllBits.length()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.Bits.MatchNoBits.MatchNoBits(int)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.util.Bits.MatchNoBits.get(int)",0,14,n/a,3,0,1,1,1
"org.apache.lucene.util.Bits.MatchNoBits.length()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.Bits.get(int)",n/a,14,5,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.Bits.length()",n/a,0,5,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.ByteBlockPool.Allocator.Allocator(int)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.util.ByteBlockPool.Allocator.getByteBlock()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.ByteBlockPool.Allocator.recycleByteBlocks(List<byte[]>)",3,0,n/a,4,0,1,2,1
"org.apache.lucene.util.ByteBlockPool.Allocator.recycleByteBlocks(byte[][],int,int)",n/a,3,3,n/a,n/a,3,n/a,n/a
"org.apache.lucene.util.ByteBlockPool.ByteBlockPool(Allocator)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectAllocator.DirectAllocator()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.ByteBlockPool.DirectAllocator.DirectAllocator(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectAllocator.recycleByteBlocks(byte[][],int,int)",0,3,n/a,3,0,3,0,1
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator.DirectTrackingAllocator(AtomicLong)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator.DirectTrackingAllocator(int,AtomicLong)",1,1,n/a,4,0,2,2,1
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator.getByteBlock()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator.recycleByteBlocks(byte[][],int,int)",1,3,n/a,7,1,3,5,2
"org.apache.lucene.util.ByteBlockPool.allocSlice(byte[],int)",1,0,n/a,24,0,2,17,2
"org.apache.lucene.util.ByteBlockPool.copy(BytesRef)",3,1,n/a,23,2,1,14,3
"org.apache.lucene.util.ByteBlockPool.copyFrom(BytesRef)",3,1,n/a,30,2,1,22,3
"org.apache.lucene.util.ByteBlockPool.dropBuffersAndReset()",1,1,n/a,12,1,0,7,2
"org.apache.lucene.util.ByteBlockPool.newSlice(int)",1,0,n/a,8,0,1,6,2
"org.apache.lucene.util.ByteBlockPool.nextBuffer()",3,5,n/a,12,1,0,8,2
"org.apache.lucene.util.ByteBlockPool.reset()",3,1,n/a,18,1,0,12,4
"org.apache.lucene.util.ByteBlockPool.setBytesRef(BytesRef,int)",0,6,n/a,17,1,2,9,2
"org.apache.lucene.util.ByteBlockPool.writePool(DataOutput)",2,0,n/a,12,1,1,6,2
"org.apache.lucene.util.BytesRef.BytesRef()",1,40,n/a,4,0,0,1,1
"org.apache.lucene.util.BytesRef.BytesRef(CharSequence)",2,4,n/a,11,0,1,2,1
"org.apache.lucene.util.BytesRef.BytesRef(byte[])",1,4,n/a,5,0,1,1,1
"org.apache.lucene.util.BytesRef.BytesRef(byte[],int,int)",0,5,n/a,9,0,3,4,1
"org.apache.lucene.util.BytesRef.BytesRef(int)",0,7,n/a,7,0,1,1,1
"org.apache.lucene.util.BytesRef.UTF8SortedAsUTF16Comparator.UTF8SortedAsUTF16Comparator()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.util.BytesRef.UTF8SortedAsUTF16Comparator.compare(BytesRef,BytesRef)",0,0,n/a,37,4,2,19,8
"org.apache.lucene.util.BytesRef.UTF8SortedAsUnicodeComparator.UTF8SortedAsUnicodeComparator()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.util.BytesRef.UTF8SortedAsUnicodeComparator.compare(BytesRef,BytesRef)",1,0,n/a,17,2,2,12,3
"org.apache.lucene.util.BytesRef.append(BytesRef)",2,2,n/a,17,1,1,8,2
"org.apache.lucene.util.BytesRef.bytesEquals(BytesRef)",0,2,n/a,23,3,1,12,4
"org.apache.lucene.util.BytesRef.clone()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.BytesRef.compareTo(BytesRef)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.util.BytesRef.copyBytes(BytesRef)",1,5,n/a,14,1,1,5,2
"org.apache.lucene.util.BytesRef.copyChars(CharSequence)",2,10,n/a,10,0,1,1,1
"org.apache.lucene.util.BytesRef.copyChars(char[],int,int)",1,0,n/a,9,0,3,1,1
"org.apache.lucene.util.BytesRef.deepCopyOf(BytesRef)",2,4,n/a,12,0,1,3,1
"org.apache.lucene.util.BytesRef.endsWith(BytesRef)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.util.BytesRef.equals(Object)",1,2,n/a,10,1,1,5,3
"org.apache.lucene.util.BytesRef.getUTF8SortedAsUTF16Comparator()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.util.BytesRef.getUTF8SortedAsUnicodeComparator()",0,10,n/a,3,0,0,1,1
"org.apache.lucene.util.BytesRef.grow(int)",1,8,n/a,4,0,1,1,1
"org.apache.lucene.util.BytesRef.hashCode()",0,1,n/a,18,1,0,7,2
"org.apache.lucene.util.BytesRef.sliceEquals(BytesRef,int)",0,2,n/a,14,2,2,9,5
"org.apache.lucene.util.BytesRef.startsWith(BytesRef)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.util.BytesRef.toString()",7,1,n/a,15,2,0,11,3
"org.apache.lucene.util.BytesRef.utf8ToString()",2,17,n/a,11,1,0,3,2
"org.apache.lucene.util.BytesRefHash.BytesRefHash()",3,2,n/a,7,0,0,1,1
"org.apache.lucene.util.BytesRefHash.BytesRefHash(ByteBlockPool)",2,1,n/a,6,0,1,1,1
"org.apache.lucene.util.BytesRefHash.BytesRefHash(ByteBlockPool,int,BytesStartArray)",6,1,n/a,16,0,3,10,2
"org.apache.lucene.util.BytesRefHash.BytesStartArray.bytesUsed()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.BytesRefHash.BytesStartArray.clear()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.BytesRefHash.BytesStartArray.grow()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.BytesRefHash.BytesStartArray.init()",n/a,2,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.DirectBytesStartArray(int)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.bytesUsed()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.clear()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.grow()",1,2,n/a,5,0,0,2,1
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray.init()",1,2,n/a,5,0,0,1,1
"org.apache.lucene.util.BytesRefHash.MaxBytesLengthExceededException.MaxBytesLengthExceededException(String)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.TrackingDirectBytesStartArray(int,AtomicLong)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.bytesUsed()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.clear()",1,1,n/a,7,1,0,3,2
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.grow()",2,2,n/a,8,0,0,5,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray.init()",2,2,n/a,7,0,0,3,1
"org.apache.lucene.util.BytesRefHash.add(BytesRef)",2,2,n/a,17,0,1,1,1
"org.apache.lucene.util.BytesRefHash.add(BytesRef,int)",8,2,n/a,90,3,2,38,11
"org.apache.lucene.util.BytesRefHash.addByPoolOffset(int)",2,0,n/a,34,2,1,22,8
"org.apache.lucene.util.BytesRefHash.byteStart(int)",0,0,n/a,14,0,1,3,2
"org.apache.lucene.util.BytesRefHash.clear()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.util.BytesRefHash.clear(boolean)",4,2,n/a,16,1,1,8,4
"org.apache.lucene.util.BytesRefHash.close()",2,0,n/a,9,0,0,3,1
"org.apache.lucene.util.BytesRefHash.compact()",0,1,n/a,24,3,0,13,4
"org.apache.lucene.util.BytesRefHash.equals(int,BytesRef)",2,2,n/a,3,0,2,1,1
"org.apache.lucene.util.BytesRefHash.get(int,BytesRef)",1,1,n/a,17,0,2,3,1
"org.apache.lucene.util.BytesRefHash.rehash(int,boolean)",3,2,n/a,53,4,2,39,8
"org.apache.lucene.util.BytesRefHash.reinit()",2,0,n/a,14,1,0,5,3
"org.apache.lucene.util.BytesRefHash.shrink(int)",2,1,n/a,20,1,1,12,4
"org.apache.lucene.util.BytesRefHash.size()",0,3,n/a,8,0,0,1,1
"org.apache.lucene.util.BytesRefHash.sort(Comparator<BytesRef>)",12,1,n/a,7,2,1,15,2
"org.apache.lucene.util.BytesRefIterator.getComparator()",n/a,5,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.BytesRefIterator.next()",n/a,38,9,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.CharacterBuffer(char[],int,int)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.getBuffer()",0,2,n/a,8,0,0,1,1
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.getLength()",0,1,n/a,9,0,0,1,1
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.getOffset()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.util.CharacterUtils.CharacterBuffer.reset()",0,1,n/a,9,0,0,3,1
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.Java4CharacterUtils()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.codePointAt(CharSequence,int)",1,2,n/a,4,0,2,1,1
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.codePointAt(char[],int)",0,7,n/a,4,0,2,1,1
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.codePointAt(char[],int,int)",1,2,n/a,6,0,3,3,2
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils.fill(CharacterBuffer,Reader)",1,3,n/a,9,0,2,6,2
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.Java5CharacterUtils()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.codePointAt(CharSequence,int)",1,2,n/a,4,0,2,1,1
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.codePointAt(char[],int)",1,7,n/a,4,0,2,1,1
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.codePointAt(char[],int,int)",1,2,n/a,4,0,3,1,1
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils.fill(CharacterBuffer,Reader)",4,3,n/a,45,2,2,24,8
"org.apache.lucene.util.CharacterUtils.codePointAt(CharSequence,int)",n/a,2,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.CharacterUtils.codePointAt(char[],int)",n/a,7,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.CharacterUtils.codePointAt(char[],int,int)",n/a,2,2,n/a,n/a,3,n/a,n/a
"org.apache.lucene.util.CharacterUtils.fill(CharacterBuffer,Reader)",n/a,3,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.CharacterUtils.getInstance(Version)",1,11,n/a,12,0,1,1,2
"org.apache.lucene.util.CharacterUtils.newCharacterBuffer(int)",2,1,n/a,14,1,1,3,2
"org.apache.lucene.util.CharsRef.CharsRef()",1,12,n/a,6,0,0,1,1
"org.apache.lucene.util.CharsRef.CharsRef(String)",1,2,n/a,9,0,1,3,1
"org.apache.lucene.util.CharsRef.CharsRef(char[],int,int)",0,3,n/a,11,0,3,5,1
"org.apache.lucene.util.CharsRef.CharsRef(int)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.util.CharsRef.UTF16SortedAsUTF8Comparator.UTF16SortedAsUTF8Comparator()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.util.CharsRef.UTF16SortedAsUTF8Comparator.compare(CharsRef,CharsRef)",1,0,n/a,33,4,2,20,8
"org.apache.lucene.util.CharsRef.append(char[],int,int)",2,0,n/a,10,0,3,4,1
"org.apache.lucene.util.CharsRef.charAt(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.util.CharsRef.charsEquals(CharsRef)",0,1,n/a,15,3,1,11,4
"org.apache.lucene.util.CharsRef.clone()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.CharsRef.compareTo(CharsRef)",1,0,n/a,21,2,1,15,5
"org.apache.lucene.util.CharsRef.copyChars(CharsRef)",2,1,n/a,18,1,1,6,2
"org.apache.lucene.util.CharsRef.copyChars(char[],int,int)",2,2,n/a,10,0,3,4,1
"org.apache.lucene.util.CharsRef.deepCopyOf(CharsRef)",2,1,n/a,12,0,1,3,1
"org.apache.lucene.util.CharsRef.equals(Object)",1,0,n/a,10,1,1,5,3
"org.apache.lucene.util.CharsRef.getUTF16SortedAsUTF8Comparator()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.CharsRef.grow(int)",1,10,n/a,5,1,1,2,2
"org.apache.lucene.util.CharsRef.hashCode()",0,0,n/a,10,1,0,8,2
"org.apache.lucene.util.CharsRef.length()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.CharsRef.subSequence(int,int)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.util.CharsRef.toString()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.util.CloseableThreadLocal.close()",1,7,n/a,12,1,0,4,2
"org.apache.lucene.util.CloseableThreadLocal.get()",5,5,n/a,15,2,0,9,3
"org.apache.lucene.util.CloseableThreadLocal.initialValue()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.CloseableThreadLocal.maybePurge()",2,2,n/a,5,1,0,2,2
"org.apache.lucene.util.CloseableThreadLocal.purge()",7,1,n/a,20,3,0,12,4
"org.apache.lucene.util.CloseableThreadLocal.set(T)",5,5,n/a,7,1,1,4,1
"org.apache.lucene.util.CodecUtil.CodecUtil()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.CodecUtil.checkHeader(DataInput,String,int,int)",8,8,n/a,20,1,4,12,5
"org.apache.lucene.util.CodecUtil.headerLength(String)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.util.CodecUtil.writeHeader(DataOutput,String,int)",6,8,n/a,11,1,3,7,3
"org.apache.lucene.util.CollectionUtil.CollectionUtil()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.CollectionUtil.getSorter(List<T>)",9,3,n/a,4,2,1,7,2
"org.apache.lucene.util.CollectionUtil.getSorter(List<T>,Comparator<? super T>)",9,3,n/a,4,2,2,7,2
"org.apache.lucene.util.CollectionUtil.insertionSort(List<T>)",3,0,n/a,11,0,1,4,2
"org.apache.lucene.util.CollectionUtil.insertionSort(List<T>,Comparator<? super T>)",3,0,n/a,11,0,2,4,2
"org.apache.lucene.util.CollectionUtil.mergeSort(List<T>)",3,1,n/a,11,0,1,4,2
"org.apache.lucene.util.CollectionUtil.mergeSort(List<T>,Comparator<? super T>)",3,2,n/a,11,0,2,4,2
"org.apache.lucene.util.CollectionUtil.quickSort(List<T>)",3,1,n/a,11,0,1,4,2
"org.apache.lucene.util.CollectionUtil.quickSort(List<T>,Comparator<? super T>)",3,1,n/a,11,0,2,4,2
"org.apache.lucene.util.CommandLineUtil.CommandLineUtil()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.util.CommandLineUtil.adjustDirectoryClassName(String)",7,2,n/a,10,1,1,5,4
"org.apache.lucene.util.CommandLineUtil.loadDirectoryClass(String)",3,0,n/a,10,0,1,1,1
"org.apache.lucene.util.CommandLineUtil.loadFSDirectoryClass(String)",3,1,n/a,10,0,1,1,1
"org.apache.lucene.util.CommandLineUtil.newFSDirectory(Class<? extends FSDirectory>,File)",2,4,n/a,16,0,2,2,1
"org.apache.lucene.util.CommandLineUtil.newFSDirectory(String,File)",9,4,n/a,23,1,2,7,5
"org.apache.lucene.util.Constants.Constants()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.Constants.ident(String)",1,2,n/a,5,0,1,1,1
"org.apache.lucene.util.Counter.AtomicCounter.addAndGet(long)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.util.Counter.AtomicCounter.get()",1,3,n/a,4,0,0,1,1
"org.apache.lucene.util.Counter.SerialCounter.addAndGet(long)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.util.Counter.SerialCounter.get()",0,3,n/a,4,0,0,1,1
"org.apache.lucene.util.Counter.addAndGet(long)",n/a,1,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.Counter.get()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.Counter.newCounter()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.util.Counter.newCounter(boolean)",2,2,n/a,11,0,1,1,2
"org.apache.lucene.util.DocIdBitSet.DocIdBitSet(BitSet)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator.DocIdBitSetIterator(BitSet)",0,1,n/a,4,0,1,2,1
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator.advance(int)",1,54,n/a,7,0,1,3,2
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator.nextDoc()",1,62,n/a,8,0,0,3,2
"org.apache.lucene.util.DocIdBitSet.getBitSet()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.util.DocIdBitSet.isCacheable()",0,4,n/a,5,0,0,1,1
"org.apache.lucene.util.DocIdBitSet.iterator()",1,24,n/a,4,0,0,1,1
"org.apache.lucene.util.DoubleBarrelLRUCache.CloneableKey.clone()",n/a,1,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.DoubleBarrelLRUCache.DoubleBarrelLRUCache(int)",3,1,n/a,6,0,1,4,1
"org.apache.lucene.util.DoubleBarrelLRUCache.get(K)",4,2,n/a,23,2,1,13,4
"org.apache.lucene.util.DoubleBarrelLRUCache.put(K,V)",4,3,n/a,26,1,2,12,3
"org.apache.lucene.util.DummyConcurrentLock.lock()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.DummyConcurrentLock.lockInterruptibly()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.DummyConcurrentLock.newCondition()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.DummyConcurrentLock.tryLock()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.DummyConcurrentLock.tryLock(long,TimeUnit)",0,0,n/a,3,0,2,1,1
"org.apache.lucene.util.DummyConcurrentLock.unlock()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.FieldCacheSanityChecker.FieldCacheSanityChecker()",0,2,n/a,3,0,0,0,1
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.Insanity(InsanityType,String,CacheEntry...)",2,2,n/a,13,1,3,7,4
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.getCacheEntries()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.getMsg()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.getType()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity.toString()",13,2,n/a,18,1,0,12,3
"org.apache.lucene.util.FieldCacheSanityChecker.InsanityType.InsanityType(String)",0,3,n/a,3,0,1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.InsanityType.toString()",0,0,n/a,2,0,0,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField.ReaderField(Object,String)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField.equals(Object)",1,0,n/a,7,0,1,4,3
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField.hashCode()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField.toString()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.check(CacheEntry...)",23,4,n/a,54,2,1,28,9
"org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(CacheEntry...)",3,1,n/a,10,0,1,3,1
"org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(FieldCache)",2,1,n/a,7,0,1,1,1
"org.apache.lucene.util.FieldCacheSanityChecker.checkSubreaders(MapOfSets<Integer, CacheEntry>,MapOfSets<ReaderField, Integer>)",34,1,n/a,61,3,2,33,10
"org.apache.lucene.util.FieldCacheSanityChecker.checkValueMismatch(MapOfSets<Integer, CacheEntry>,MapOfSets<ReaderField, Integer>,Set<ReaderField>)",15,1,n/a,31,4,3,13,5
"org.apache.lucene.util.FieldCacheSanityChecker.getAllDescendantReaderKeys(Object)",9,1,n/a,20,3,1,13,5
"org.apache.lucene.util.FieldCacheSanityChecker.setRamUsageEstimator(boolean)",0,1,n/a,6,0,1,1,1
"org.apache.lucene.util.FixedBitSet.FixedBitSet(FixedBitSet)",1,1,n/a,6,0,1,3,1
"org.apache.lucene.util.FixedBitSet.FixedBitSet(int)",1,29,n/a,4,0,1,2,1
"org.apache.lucene.util.FixedBitSet.and(DocIdSetIterator)",8,1,n/a,22,2,1,13,8
"org.apache.lucene.util.FixedBitSet.and(FixedBitSet)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.FixedBitSet.and(long[],int)",2,2,n/a,10,1,2,6,3
"org.apache.lucene.util.FixedBitSet.andNot(DocIdSetIterator)",5,1,n/a,16,2,1,7,4
"org.apache.lucene.util.FixedBitSet.andNot(FixedBitSet)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.FixedBitSet.andNot(long[],int)",1,2,n/a,7,1,2,4,2
"org.apache.lucene.util.FixedBitSet.bits2words(int)",0,1,n/a,8,1,1,4,2
"org.apache.lucene.util.FixedBitSet.cardinality()",1,13,n/a,6,0,0,1,1
"org.apache.lucene.util.FixedBitSet.clear(int)",0,2,n/a,7,0,1,5,2
"org.apache.lucene.util.FixedBitSet.clear(int,int)",1,2,n/a,26,1,2,16,5
"org.apache.lucene.util.FixedBitSet.clone()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.FixedBitSet.equals(Object)",2,0,n/a,15,1,1,8,4
"org.apache.lucene.util.FixedBitSet.flip(int,int)",0,1,n/a,31,1,2,17,6
"org.apache.lucene.util.FixedBitSet.get(int)",0,21,n/a,9,0,1,5,2
"org.apache.lucene.util.FixedBitSet.getAndClear(int)",0,0,n/a,9,0,1,7,2
"org.apache.lucene.util.FixedBitSet.getAndSet(int)",0,0,n/a,9,0,1,7,2
"org.apache.lucene.util.FixedBitSet.getBits()",0,4,n/a,4,0,0,1,1
"org.apache.lucene.util.FixedBitSet.hashCode()",0,0,n/a,11,1,0,6,2
"org.apache.lucene.util.FixedBitSet.isCacheable()",0,4,n/a,5,0,0,1,1
"org.apache.lucene.util.FixedBitSet.iterator()",1,27,n/a,4,0,0,1,1
"org.apache.lucene.util.FixedBitSet.length()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.util.FixedBitSet.nextSetBit(int)",2,6,n/a,19,2,1,11,5
"org.apache.lucene.util.FixedBitSet.or(DocIdSetIterator)",5,4,n/a,16,2,1,7,4
"org.apache.lucene.util.FixedBitSet.or(FixedBitSet)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.util.FixedBitSet.or(long[],int)",1,2,n/a,7,1,2,4,2
"org.apache.lucene.util.FixedBitSet.prevSetBit(int)",2,3,n/a,19,2,1,11,5
"org.apache.lucene.util.FixedBitSet.set(int)",0,24,n/a,7,0,1,5,2
"org.apache.lucene.util.FixedBitSet.set(int,int)",1,2,n/a,23,1,2,14,5
"org.apache.lucene.util.IOUtils.IOUtils()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.IOUtils.addSuppressed(Throwable,Throwable)",1,4,n/a,13,2,2,3,5
"org.apache.lucene.util.IOUtils.close(Closeable...)",3,22,n/a,31,3,1,16,9
"org.apache.lucene.util.IOUtils.close(Iterable<? extends Closeable>)",3,0,n/a,24,3,1,16,9
"org.apache.lucene.util.IOUtils.closeWhileHandlingException(Closeable...)",1,1,n/a,17,3,1,4,4
"org.apache.lucene.util.IOUtils.closeWhileHandlingException(E,Closeable...)",3,3,n/a,44,3,2,18,11
"org.apache.lucene.util.IOUtils.closeWhileHandlingException(E,Iterable<? extends Closeable>)",3,0,n/a,24,3,2,18,11
"org.apache.lucene.util.IOUtils.closeWhileHandlingException(Iterable<? extends Closeable>)",1,0,n/a,13,3,1,4,4
"org.apache.lucene.util.IOUtils.getDecodingReader(Class<?>,String,Charset)",3,18,n/a,29,2,3,9,2
"org.apache.lucene.util.IOUtils.getDecodingReader(File,Charset)",3,18,n/a,26,2,2,9,2
"org.apache.lucene.util.IOUtils.getDecodingReader(InputStream,Charset)",5,18,n/a,19,0,2,2,1
"org.apache.lucene.util.IndexableBinaryStringTools.CodingCase.CodingCase(int,int)",0,2,n/a,9,1,2,6,2
"org.apache.lucene.util.IndexableBinaryStringTools.CodingCase.CodingCase(int,int,int)",0,6,n/a,8,0,3,6,1
"org.apache.lucene.util.IndexableBinaryStringTools.IndexableBinaryStringTools()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.util.IndexableBinaryStringTools.decode(CharBuffer)",3,0,n/a,20,0,1,4,1
"org.apache.lucene.util.IndexableBinaryStringTools.decode(CharBuffer,ByteBuffer)",13,1,n/a,29,1,2,9,3
"org.apache.lucene.util.IndexableBinaryStringTools.decode(char[],int,int,byte[],int,int)",1,3,n/a,65,4,6,36,10
"org.apache.lucene.util.IndexableBinaryStringTools.encode(ByteBuffer)",3,1,n/a,18,0,1,4,1
"org.apache.lucene.util.IndexableBinaryStringTools.encode(ByteBuffer,CharBuffer)",13,2,n/a,29,1,2,9,3
"org.apache.lucene.util.IndexableBinaryStringTools.encode(byte[],int,int,char[],int,int)",1,5,n/a,52,3,6,23,8
"org.apache.lucene.util.IndexableBinaryStringTools.getDecodedLength(CharBuffer)",7,2,n/a,20,1,1,3,2
"org.apache.lucene.util.IndexableBinaryStringTools.getDecodedLength(char[],int,int)",0,5,n/a,19,1,3,6,2
"org.apache.lucene.util.IndexableBinaryStringTools.getEncodedLength(ByteBuffer)",7,2,n/a,21,1,1,3,2
"org.apache.lucene.util.IndexableBinaryStringTools.getEncodedLength(byte[],int,int)",0,7,n/a,13,0,3,1,1
"org.apache.lucene.util.IntsRef.IntsRef()",0,12,n/a,3,0,0,1,1
"org.apache.lucene.util.IntsRef.IntsRef(int)",0,4,n/a,3,0,1,1,1
"org.apache.lucene.util.IntsRef.IntsRef(int[],int,int)",0,3,n/a,6,0,3,4,1
"org.apache.lucene.util.IntsRef.clone()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.IntsRef.compareTo(IntsRef)",1,4,n/a,20,2,1,15,5
"org.apache.lucene.util.IntsRef.copyInts(IntsRef)",2,2,n/a,10,1,1,6,2
"org.apache.lucene.util.IntsRef.deepCopyOf(IntsRef)",2,0,n/a,12,0,1,3,1
"org.apache.lucene.util.IntsRef.equals(Object)",1,0,n/a,10,1,1,5,3
"org.apache.lucene.util.IntsRef.grow(int)",1,12,n/a,5,1,1,2,2
"org.apache.lucene.util.IntsRef.hashCode()",0,0,n/a,10,1,0,8,2
"org.apache.lucene.util.IntsRef.intsEquals(IntsRef)",0,1,n/a,15,3,1,11,4
"org.apache.lucene.util.IntsRef.toString()",7,1,n/a,14,2,0,11,3
"org.apache.lucene.util.MapBackedSet.MapBackedSet(Map<E, Boolean>)",0,1,n/a,6,0,1,1,1
"org.apache.lucene.util.MapBackedSet.add(E)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.MapBackedSet.clear()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.MapBackedSet.contains(Object)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.MapBackedSet.iterator()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.util.MapBackedSet.remove(Object)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.MapBackedSet.size()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.MapOfSets.MapOfSets(Map<K, Set<V>>)",0,3,n/a,6,0,1,1,1
"org.apache.lucene.util.MapOfSets.getMap()",0,4,n/a,6,0,0,1,1
"org.apache.lucene.util.MapOfSets.put(K,V)",6,4,n/a,16,1,2,7,2
"org.apache.lucene.util.MapOfSets.putAll(K,Collection<? extends V>)",6,1,n/a,17,1,2,7,2
"org.apache.lucene.util.NamedThreadFactory.NamedThreadFactory(String)",7,1,n/a,12,0,1,3,2
"org.apache.lucene.util.NamedThreadFactory.checkPrefix(String)",1,1,n/a,3,0,1,1,3
"org.apache.lucene.util.NamedThreadFactory.newThread(Runnable)",5,0,n/a,12,0,1,4,1
"org.apache.lucene.util.NumericUtils.IntRangeBuilder.addRange(String,String)",1,2,n/a,7,0,2,1,1
"org.apache.lucene.util.NumericUtils.IntRangeBuilder.addRange(int,int,int)",3,1,n/a,7,0,3,1,1
"org.apache.lucene.util.NumericUtils.LongRangeBuilder.addRange(String,String)",1,2,n/a,7,0,2,1,1
"org.apache.lucene.util.NumericUtils.LongRangeBuilder.addRange(long,long,int)",3,1,n/a,7,0,3,1,1
"org.apache.lucene.util.NumericUtils.NumericUtils()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.NumericUtils.addRange(Object,int,long,long,int)",3,3,n/a,24,1,5,10,4
"org.apache.lucene.util.NumericUtils.doubleToPrefixCoded(double)",2,6,n/a,7,0,1,1,1
"org.apache.lucene.util.NumericUtils.doubleToSortableLong(double)",1,12,n/a,14,0,1,4,2
"org.apache.lucene.util.NumericUtils.floatToPrefixCoded(float)",2,0,n/a,7,0,1,1,1
"org.apache.lucene.util.NumericUtils.floatToSortableInt(float)",1,12,n/a,14,0,1,4,2
"org.apache.lucene.util.NumericUtils.intToPrefixCoded(int)",1,8,n/a,9,0,1,1,1
"org.apache.lucene.util.NumericUtils.intToPrefixCoded(int,int)",2,3,n/a,11,0,2,3,1
"org.apache.lucene.util.NumericUtils.intToPrefixCoded(int,int,char[])",1,3,n/a,25,1,3,10,4
"org.apache.lucene.util.NumericUtils.longToPrefixCoded(long)",1,9,n/a,9,0,1,1,1
"org.apache.lucene.util.NumericUtils.longToPrefixCoded(long,int)",2,3,n/a,11,0,2,3,1
"org.apache.lucene.util.NumericUtils.longToPrefixCoded(long,int,char[])",1,3,n/a,25,1,3,10,4
"org.apache.lucene.util.NumericUtils.prefixCodedToDouble(String)",2,8,n/a,7,0,1,1,1
"org.apache.lucene.util.NumericUtils.prefixCodedToFloat(String)",2,0,n/a,7,0,1,1,1
"org.apache.lucene.util.NumericUtils.prefixCodedToInt(String)",6,5,n/a,26,2,1,13,5
"org.apache.lucene.util.NumericUtils.prefixCodedToLong(String)",6,6,n/a,26,2,1,13,5
"org.apache.lucene.util.NumericUtils.sortableIntToFloat(int)",1,6,n/a,8,0,1,3,2
"org.apache.lucene.util.NumericUtils.sortableLongToDouble(long)",1,6,n/a,8,0,1,3,2
"org.apache.lucene.util.NumericUtils.splitIntRange(IntRangeBuilder,int,int,int)",1,3,n/a,13,0,4,1,1
"org.apache.lucene.util.NumericUtils.splitLongRange(LongRangeBuilder,int,long,long)",1,3,n/a,13,0,4,1,1
"org.apache.lucene.util.NumericUtils.splitRange(Object,int,int,long,long)",4,2,n/a,36,2,5,20,12
"org.apache.lucene.util.OpenBitSet.OpenBitSet()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.util.OpenBitSet.OpenBitSet(long)",1,15,n/a,9,0,1,3,1
"org.apache.lucene.util.OpenBitSet.OpenBitSet(long[],int)",0,3,n/a,18,0,2,3,1
"org.apache.lucene.util.OpenBitSet.and(OpenBitSet)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.util.OpenBitSet.andNot(OpenBitSet)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.util.OpenBitSet.andNotCount(OpenBitSet,OpenBitSet)",3,1,n/a,11,1,2,4,2
"org.apache.lucene.util.OpenBitSet.bits2words(long)",0,2,n/a,4,0,1,1,1
"org.apache.lucene.util.OpenBitSet.capacity()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.util.OpenBitSet.cardinality()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.util.OpenBitSet.clear(int,int)",2,1,n/a,28,1,2,18,5
"org.apache.lucene.util.OpenBitSet.clear(long)",0,3,n/a,8,0,1,6,2
"org.apache.lucene.util.OpenBitSet.clear(long,long)",2,1,n/a,28,1,2,18,5
"org.apache.lucene.util.OpenBitSet.clone()",3,9,n/a,10,1,0,5,2
"org.apache.lucene.util.OpenBitSet.ensureCapacity(long)",2,1,n/a,6,0,1,1,1
"org.apache.lucene.util.OpenBitSet.ensureCapacityWords(int)",1,3,n/a,8,1,1,2,2
"org.apache.lucene.util.OpenBitSet.equals(Object)",0,1,n/a,22,1,1,21,8
"org.apache.lucene.util.OpenBitSet.expandingWordNum(long)",2,4,n/a,9,1,1,6,2
"org.apache.lucene.util.OpenBitSet.fastClear(int)",0,2,n/a,17,0,1,5,2
"org.apache.lucene.util.OpenBitSet.fastClear(long)",0,0,n/a,10,0,1,5,2
"org.apache.lucene.util.OpenBitSet.fastFlip(int)",0,1,n/a,10,0,1,5,2
"org.apache.lucene.util.OpenBitSet.fastFlip(long)",0,0,n/a,10,0,1,5,2
"org.apache.lucene.util.OpenBitSet.fastGet(int)",0,1,n/a,12,0,1,5,2
"org.apache.lucene.util.OpenBitSet.fastGet(long)",0,0,n/a,10,0,1,5,2
"org.apache.lucene.util.OpenBitSet.fastSet(int)",0,12,n/a,10,0,1,5,2
"org.apache.lucene.util.OpenBitSet.fastSet(long)",0,0,n/a,10,0,1,5,2
"org.apache.lucene.util.OpenBitSet.flip(long)",1,1,n/a,7,0,1,4,1
"org.apache.lucene.util.OpenBitSet.flip(long,long)",1,5,n/a,29,1,2,15,4
"org.apache.lucene.util.OpenBitSet.flipAndGet(int)",0,0,n/a,11,0,1,6,2
"org.apache.lucene.util.OpenBitSet.flipAndGet(long)",0,0,n/a,11,0,1,6,2
"org.apache.lucene.util.OpenBitSet.get(int)",0,18,n/a,10,0,1,6,2
"org.apache.lucene.util.OpenBitSet.get(long)",0,0,n/a,9,0,1,6,2
"org.apache.lucene.util.OpenBitSet.getAndSet(int)",0,0,n/a,12,0,1,7,2
"org.apache.lucene.util.OpenBitSet.getAndSet(long)",0,0,n/a,12,0,1,7,2
"org.apache.lucene.util.OpenBitSet.getBit(int)",0,0,n/a,9,0,1,4,2
"org.apache.lucene.util.OpenBitSet.getBits()",0,3,n/a,2,0,0,1,1
"org.apache.lucene.util.OpenBitSet.getNumWords()",0,2,n/a,2,0,0,1,1
"org.apache.lucene.util.OpenBitSet.hashCode()",0,0,n/a,13,1,0,6,2
"org.apache.lucene.util.OpenBitSet.intersect(OpenBitSet)",2,1,n/a,16,1,1,9,3
"org.apache.lucene.util.OpenBitSet.intersectionCount(OpenBitSet,OpenBitSet)",2,1,n/a,6,0,2,1,1
"org.apache.lucene.util.OpenBitSet.intersects(OpenBitSet)",1,0,n/a,10,1,1,7,3
"org.apache.lucene.util.OpenBitSet.isCacheable()",0,4,n/a,5,0,0,1,1
"org.apache.lucene.util.OpenBitSet.isEmpty()",1,0,n/a,2,0,0,1,1
"org.apache.lucene.util.OpenBitSet.iterator()",1,27,n/a,4,0,0,1,1
"org.apache.lucene.util.OpenBitSet.length()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.OpenBitSet.nextSetBit(int)",2,4,n/a,17,1,1,12,5
"org.apache.lucene.util.OpenBitSet.nextSetBit(long)",2,0,n/a,17,1,1,12,5
"org.apache.lucene.util.OpenBitSet.or(OpenBitSet)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.util.OpenBitSet.prevSetBit(int)",2,0,n/a,29,2,1,20,7
"org.apache.lucene.util.OpenBitSet.prevSetBit(long)",2,0,n/a,29,2,1,20,7
"org.apache.lucene.util.OpenBitSet.remove(OpenBitSet)",1,1,n/a,9,1,1,5,2
"org.apache.lucene.util.OpenBitSet.set(long)",1,8,n/a,7,0,1,4,1
"org.apache.lucene.util.OpenBitSet.set(long,long)",2,0,n/a,21,1,2,12,3
"org.apache.lucene.util.OpenBitSet.setBits(long[])",0,0,n/a,2,0,1,1,1
"org.apache.lucene.util.OpenBitSet.setNumWords(int)",0,0,n/a,2,0,1,1,1
"org.apache.lucene.util.OpenBitSet.size()",1,4,n/a,7,0,0,1,1
"org.apache.lucene.util.OpenBitSet.trimTrailingZeros()",0,0,n/a,8,0,0,4,3
"org.apache.lucene.util.OpenBitSet.union(OpenBitSet)",5,2,n/a,16,1,1,11,3
"org.apache.lucene.util.OpenBitSet.unionCount(OpenBitSet,OpenBitSet)",4,1,n/a,12,1,2,6,3
"org.apache.lucene.util.OpenBitSet.xor(OpenBitSet)",5,1,n/a,16,1,1,11,3
"org.apache.lucene.util.OpenBitSet.xorCount(OpenBitSet,OpenBitSet)",4,0,n/a,12,1,2,6,3
"org.apache.lucene.util.OpenBitSetDISI.OpenBitSetDISI(DocIdSetIterator,int)",2,5,n/a,9,0,2,2,1
"org.apache.lucene.util.OpenBitSetDISI.OpenBitSetDISI(int)",1,1,n/a,7,0,1,1,1
"org.apache.lucene.util.OpenBitSetDISI.inPlaceAnd(DocIdSetIterator)",6,1,n/a,17,1,1,7,4
"org.apache.lucene.util.OpenBitSetDISI.inPlaceNot(DocIdSetIterator)",3,1,n/a,13,1,1,4,2
"org.apache.lucene.util.OpenBitSetDISI.inPlaceOr(DocIdSetIterator)",3,2,n/a,13,1,1,4,2
"org.apache.lucene.util.OpenBitSetDISI.inPlaceXor(DocIdSetIterator)",3,1,n/a,13,1,1,4,2
"org.apache.lucene.util.OpenBitSetIterator.OpenBitSetIterator(OpenBitSet)",3,1,n/a,3,0,1,1,1
"org.apache.lucene.util.OpenBitSetIterator.OpenBitSetIterator(long[],int)",0,3,n/a,4,0,2,2,1
"org.apache.lucene.util.OpenBitSetIterator.advance(int)",1,57,n/a,28,3,1,18,5
"org.apache.lucene.util.OpenBitSetIterator.docID()",0,45,n/a,4,0,0,1,1
"org.apache.lucene.util.OpenBitSetIterator.nextDoc()",1,64,n/a,44,3,0,13,5
"org.apache.lucene.util.OpenBitSetIterator.shift()",0,2,n/a,7,1,0,10,4
"org.apache.lucene.util.PagedBytes.PagedBytes(int)",0,1,n/a,8,0,1,4,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.PagedBytesDataInput()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.clone()",3,22,n/a,6,0,0,3,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.getPosition()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.nextBlock()",1,2,n/a,5,0,0,3,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.readByte()",1,58,n/a,7,1,0,3,2
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.readBytes(byte[],int,int)",3,29,n/a,23,2,3,12,3
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput.setPosition(long)",1,4,n/a,7,0,1,3,1
"org.apache.lucene.util.PagedBytes.PagedBytesDataOutput.getPosition()",1,1,n/a,8,1,0,3,2
"org.apache.lucene.util.PagedBytes.PagedBytesDataOutput.writeByte(byte)",2,49,n/a,12,2,1,7,3
"org.apache.lucene.util.PagedBytes.PagedBytesDataOutput.writeBytes(byte[],int,int)",6,20,n/a,33,2,3,23,6
"org.apache.lucene.util.PagedBytes.Reader.Reader(PagedBytes)",3,1,n/a,13,1,1,13,3
"org.apache.lucene.util.PagedBytes.Reader.fill(BytesRef,long)",0,0,n/a,25,1,2,10,2
"org.apache.lucene.util.PagedBytes.Reader.fillAndGetIndex(BytesRef,long)",0,0,n/a,24,1,2,10,2
"org.apache.lucene.util.PagedBytes.Reader.fillAndGetStart(BytesRef,long)",0,0,n/a,30,1,2,12,2
"org.apache.lucene.util.PagedBytes.Reader.fillSlice(BytesRef,long,int)",2,0,n/a,28,1,3,13,2
"org.apache.lucene.util.PagedBytes.Reader.fillSliceWithPrefix(BytesRef,long)",2,0,n/a,43,1,2,20,3
"org.apache.lucene.util.PagedBytes.Reader.getBlockEnds()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.PagedBytes.Reader.getBlocks()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.PagedBytes.copy(BytesRef)",4,0,n/a,27,3,1,19,5
"org.apache.lucene.util.PagedBytes.copy(BytesRef,BytesRef)",3,0,n/a,23,2,2,15,4
"org.apache.lucene.util.PagedBytes.copy(IndexInput,long)",4,0,n/a,24,3,2,16,5
"org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(BytesRef)",6,0,n/a,28,2,1,18,6
"org.apache.lucene.util.PagedBytes.freeze(boolean)",6,2,n/a,22,1,1,15,6
"org.apache.lucene.util.PagedBytes.getDataInput()",2,2,n/a,8,1,0,3,2
"org.apache.lucene.util.PagedBytes.getDataOutput()",2,1,n/a,10,1,0,3,2
"org.apache.lucene.util.PagedBytes.getPointer()",1,1,n/a,7,1,0,3,2
"org.apache.lucene.util.Parameter.Parameter(String)",4,0,n/a,8,0,1,5,2
"org.apache.lucene.util.Parameter.makeKey(String)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.util.Parameter.readResolve()",3,0,n/a,13,0,0,4,2
"org.apache.lucene.util.Parameter.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.PriorityQueue.add(T)",1,24,n/a,13,0,1,4,1
"org.apache.lucene.util.PriorityQueue.clear()",0,5,n/a,7,1,0,5,2
"org.apache.lucene.util.PriorityQueue.downHeap()",3,2,n/a,19,2,0,14,7
"org.apache.lucene.util.PriorityQueue.getHeapArray()",0,2,n/a,6,0,0,1,1
"org.apache.lucene.util.PriorityQueue.getSentinelObject()",0,2,n/a,42,0,0,1,1
"org.apache.lucene.util.PriorityQueue.initialize(int)",2,36,n/a,37,2,1,17,5
"org.apache.lucene.util.PriorityQueue.insertWithOverflow(T)",3,18,n/a,23,1,1,9,4
"org.apache.lucene.util.PriorityQueue.lessThan(T,T)",n/a,6,32,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.PriorityQueue.pop()",1,47,n/a,13,1,0,8,2
"org.apache.lucene.util.PriorityQueue.size()",0,71,n/a,4,0,0,1,1
"org.apache.lucene.util.PriorityQueue.top()",0,20,n/a,7,0,0,1,1
"org.apache.lucene.util.PriorityQueue.upHeap()",1,1,n/a,11,1,0,8,3
"org.apache.lucene.util.PriorityQueue.updateTop()",1,21,n/a,23,0,0,2,1
"org.apache.lucene.util.RamUsageEstimator.ClassCache.ClassCache(long,Field[])",0,1,n/a,4,0,2,2,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.IdentityHashSet()",1,1,n/a,7,0,0,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.IdentityHashSet(int)",1,0,n/a,7,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.IdentityHashSet(int,float)",3,2,n/a,11,0,2,5,2
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.add(KType)",2,1,n/a,19,2,1,13,4
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.allocateBuffers(int)",0,2,n/a,10,0,1,2,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.clear()",1,1,n/a,4,0,0,2,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.contains(KType)",1,3,n/a,15,2,1,8,3
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.expandAndRehash()",4,1,n/a,24,3,0,14,4
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.isEmpty()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.iterator()",5,0,n/a,4,3,0,12,5
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.nextCapacity(int)",1,1,n/a,10,0,1,5,3
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.rehash(Object)",1,3,n/a,17,0,1,7,1
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.roundCapacity(int)",0,1,n/a,12,1,1,6,3
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet.size()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.RamUsageEstimator.JvmFeature.JvmFeature(String)",0,4,n/a,3,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.JvmFeature.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.RamUsageEstimator.RamUsageEstimator()",1,0,n/a,11,0,0,1,1
"org.apache.lucene.util.RamUsageEstimator.RamUsageEstimator(boolean)",0,1,n/a,13,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.adjustForField(long,Field)",12,2,n/a,34,2,2,14,7
"org.apache.lucene.util.RamUsageEstimator.alignObjectSize(long)",0,12,n/a,7,0,1,2,1
"org.apache.lucene.util.RamUsageEstimator.createCacheEntry(Class<?>)",14,1,n/a,25,4,1,15,5
"org.apache.lucene.util.RamUsageEstimator.estimateRamUsage(Object)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.getSupportedFeatures()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.RamUsageEstimator.getUnsupportedFeatures()",2,0,n/a,6,0,0,3,1
"org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long)",3,6,n/a,7,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long,DecimalFormat)",3,1,n/a,14,1,2,7,4
"org.apache.lucene.util.RamUsageEstimator.humanSizeOf(Object)",2,0,n/a,8,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.isSupportedJVM()",2,0,n/a,10,0,0,1,1
"org.apache.lucene.util.RamUsageEstimator.measureObjectSize(Object,boolean)",30,2,n/a,80,6,2,41,18
"org.apache.lucene.util.RamUsageEstimator.shallowSizeOf(Object)",4,2,n/a,16,1,1,6,3
"org.apache.lucene.util.RamUsageEstimator.shallowSizeOfArray(Object)",6,1,n/a,16,2,1,8,3
"org.apache.lucene.util.RamUsageEstimator.shallowSizeOfInstance(Class<?>)",10,2,n/a,25,3,1,12,6
"org.apache.lucene.util.RamUsageEstimator.sizeOf(Object)",1,8,n/a,12,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(boolean[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(byte[])",1,1,n/a,4,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(char[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(double[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(float[])",1,0,n/a,4,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(int[])",1,2,n/a,4,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(long[])",1,2,n/a,4,0,1,1,1
"org.apache.lucene.util.RamUsageEstimator.sizeOf(short[])",1,1,n/a,4,0,1,1,1
"org.apache.lucene.util.ReaderUtil.Gather.Gather(IndexReader)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.util.ReaderUtil.Gather.add(int,IndexReader)",n/a,1,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.ReaderUtil.Gather.run()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.util.ReaderUtil.Gather.run(int)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.util.ReaderUtil.Gather.run(int,IndexReader)",4,3,n/a,14,2,2,9,3
"org.apache.lucene.util.ReaderUtil.ReaderUtil()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.ReaderUtil.gatherSubReaders(List<IndexReader>,IndexReader)",3,7,n/a,17,2,2,7,3
"org.apache.lucene.util.ReaderUtil.getIndexedFields(IndexReader)",3,6,n/a,9,2,1,5,3
"org.apache.lucene.util.ReaderUtil.getMergedFieldInfos(IndexReader)",5,9,n/a,11,1,1,6,2
"org.apache.lucene.util.ReaderUtil.subIndex(int,int[])",0,4,n/a,25,3,2,14,6
"org.apache.lucene.util.RecyclingByteBlockAllocator.RecyclingByteBlockAllocator()",2,0,n/a,10,0,0,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.RecyclingByteBlockAllocator(int,int)",2,0,n/a,12,0,2,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.RecyclingByteBlockAllocator(int,int,AtomicLong)",2,2,n/a,19,0,3,4,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.bytesUsed()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.freeBlocks(int)",2,0,n/a,25,1,1,13,3
"org.apache.lucene.util.RecyclingByteBlockAllocator.getByteBlock()",1,2,n/a,10,1,0,6,2
"org.apache.lucene.util.RecyclingByteBlockAllocator.maxBufferedBlocks()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.numBufferedBlocks()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.util.RecyclingByteBlockAllocator.recycleByteBlocks(byte[][],int,int)",5,3,n/a,21,1,3,18,4
"org.apache.lucene.util.RollingCharBuffer.freeBefore(int)",0,2,n/a,10,0,1,6,1
"org.apache.lucene.util.RollingCharBuffer.get(int)",5,7,n/a,41,2,1,23,6
"org.apache.lucene.util.RollingCharBuffer.get(int,int)",6,6,n/a,18,1,2,11,3
"org.apache.lucene.util.RollingCharBuffer.getIndex(int)",0,3,n/a,9,1,1,5,2
"org.apache.lucene.util.RollingCharBuffer.inBounds(int)",0,1,n/a,4,0,1,1,3
"org.apache.lucene.util.RollingCharBuffer.reset(Reader)",0,2,n/a,8,0,1,5,1
"org.apache.lucene.util.ScorerDocQueue.HeapedScorerDoc.HeapedScorerDoc(Scorer)",2,1,n/a,1,0,1,1,1
"org.apache.lucene.util.ScorerDocQueue.HeapedScorerDoc.HeapedScorerDoc(Scorer,int)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.util.ScorerDocQueue.HeapedScorerDoc.adjust()",1,1,n/a,1,0,0,1,1
"org.apache.lucene.util.ScorerDocQueue.ScorerDocQueue(int)",0,1,n/a,9,0,1,5,1
"org.apache.lucene.util.ScorerDocQueue.adjustTop()",2,0,n/a,12,0,0,2,1
"org.apache.lucene.util.ScorerDocQueue.checkAdjustElsePop(boolean)",2,2,n/a,11,1,1,7,2
"org.apache.lucene.util.ScorerDocQueue.clear()",0,0,n/a,7,1,0,5,2
"org.apache.lucene.util.ScorerDocQueue.downHeap()",0,4,n/a,20,2,0,15,7
"org.apache.lucene.util.ScorerDocQueue.insert(Scorer)",4,1,n/a,21,2,1,9,4
"org.apache.lucene.util.ScorerDocQueue.pop()",1,0,n/a,10,0,0,3,1
"org.apache.lucene.util.ScorerDocQueue.popNoResult()",1,1,n/a,9,0,0,4,1
"org.apache.lucene.util.ScorerDocQueue.put(Scorer)",2,1,n/a,10,0,1,3,1
"org.apache.lucene.util.ScorerDocQueue.size()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.util.ScorerDocQueue.top()",0,0,n/a,7,0,0,1,1
"org.apache.lucene.util.ScorerDocQueue.topDoc()",0,3,n/a,8,0,0,1,1
"org.apache.lucene.util.ScorerDocQueue.topNextAndAdjustElsePop()",2,1,n/a,3,0,0,1,1
"org.apache.lucene.util.ScorerDocQueue.topScore()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.util.ScorerDocQueue.topSkipToAndAdjustElsePop(int)",2,1,n/a,3,0,1,1,1
"org.apache.lucene.util.ScorerDocQueue.upHeap()",0,1,n/a,12,1,0,9,3
"org.apache.lucene.util.SetOnce.AlreadySetException.AlreadySetException()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.SetOnce.SetOnce()",1,1,n/a,7,0,0,1,1
"org.apache.lucene.util.SetOnce.SetOnce(T)",1,0,n/a,12,0,1,2,1
"org.apache.lucene.util.SetOnce.get()",0,27,n/a,4,0,0,1,1
"org.apache.lucene.util.SetOnce.set(T)",2,7,n/a,8,1,1,3,2
"org.apache.lucene.util.SimpleStringInterner.Entry.Entry(String,int,Entry)",0,1,n/a,5,0,3,3,1
"org.apache.lucene.util.SimpleStringInterner.SimpleStringInterner(int,int)",3,1,n/a,8,0,2,2,1
"org.apache.lucene.util.SimpleStringInterner.intern(String)",4,2,n/a,28,2,1,18,7
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.SlowIndexInput(IndexInput)",1,2,n/a,4,0,1,2,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.clone()",1,18,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.close()",1,20,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.equals(Object)",1,0,n/a,1,0,1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.getFilePointer()",1,16,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.hashCode()",1,0,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.length()",1,21,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.readByte()",2,58,n/a,9,1,0,5,2
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.readBytes(byte[],int,int)",2,28,n/a,9,1,3,5,2
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput.seek(long)",1,33,n/a,1,0,1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.SlowIndexOutput(IndexOutput)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.close()",1,8,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.flush()",1,3,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.getFilePointer()",1,42,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.length()",1,3,n/a,1,0,0,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.seek(long)",1,5,n/a,1,0,1,1,1
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.writeByte(byte)",2,49,n/a,9,1,1,5,2
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput.writeBytes(byte[],int,int)",2,20,n/a,9,1,3,5,2
"org.apache.lucene.util.SlowRAMDirectory.SlowRAMDirectory(int,Random)",0,5,n/a,4,0,2,2,1
"org.apache.lucene.util.SlowRAMDirectory.createOutput(String)",3,28,n/a,7,1,1,3,2
"org.apache.lucene.util.SlowRAMDirectory.doSleep(int)",4,0,n/a,11,1,1,6,4
"org.apache.lucene.util.SlowRAMDirectory.openInput(String)",3,16,n/a,7,1,1,3,2
"org.apache.lucene.util.SlowRAMDirectory.openInput(String,int)",3,17,n/a,7,1,2,3,2
"org.apache.lucene.util.SlowRAMDirectory.setSleepMillis(int)",0,5,n/a,3,0,1,1,1
"org.apache.lucene.util.SmallFloat.byte315ToFloat(byte)",1,1,n/a,9,0,1,5,2
"org.apache.lucene.util.SmallFloat.byte52ToFloat(byte)",1,0,n/a,9,0,1,5,2
"org.apache.lucene.util.SmallFloat.byteToFloat(byte,int,int)",1,0,n/a,9,0,3,5,2
"org.apache.lucene.util.SmallFloat.floatToByte(float,int,int)",1,0,n/a,27,1,3,8,4
"org.apache.lucene.util.SmallFloat.floatToByte315(float)",1,2,n/a,16,1,1,7,4
"org.apache.lucene.util.SmallFloat.floatToByte52(float)",1,0,n/a,16,1,1,7,4
"org.apache.lucene.util.SortedVIntList.SortedVIntList(BitSet)",5,0,n/a,13,1,1,6,2
"org.apache.lucene.util.SortedVIntList.SortedVIntList(DocIdSetIterator)",4,0,n/a,15,1,1,5,2
"org.apache.lucene.util.SortedVIntList.SortedVIntList(int...)",1,0,n/a,8,0,1,1,1
"org.apache.lucene.util.SortedVIntList.SortedVIntList(int[],int)",3,1,n/a,12,1,2,6,2
"org.apache.lucene.util.SortedVIntList.SortedVIntListBuilder.SortedVIntListBuilder()",1,3,n/a,4,0,0,2,1
"org.apache.lucene.util.SortedVIntList.SortedVIntListBuilder.addInt(int)",3,3,n/a,19,1,1,11,4
"org.apache.lucene.util.SortedVIntList.SortedVIntListBuilder.done()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.util.SortedVIntList.getByteSize()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.util.SortedVIntList.initBytes()",0,1,n/a,5,0,0,3,1
"org.apache.lucene.util.SortedVIntList.isCacheable()",0,4,n/a,5,0,0,1,1
"org.apache.lucene.util.SortedVIntList.iterator()",3,25,n/a,10,4,0,19,5
"org.apache.lucene.util.SortedVIntList.resizeBytes(int)",1,2,n/a,7,1,1,4,2
"org.apache.lucene.util.SortedVIntList.size()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.util.SorterTemplate.compare(int,int)",n/a,7,7,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.SorterTemplate.comparePivot(int)",n/a,2,7,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.SorterTemplate.insertionSort(int,int)",2,8,n/a,13,3,2,9,4
"org.apache.lucene.util.SorterTemplate.lower(int,int,int)",1,1,n/a,14,2,3,8,3
"org.apache.lucene.util.SorterTemplate.merge(int,int,int,int,int)",7,3,n/a,28,2,5,21,6
"org.apache.lucene.util.SorterTemplate.mergeSort(int,int)",4,7,n/a,13,1,2,8,2
"org.apache.lucene.util.SorterTemplate.quickSort(int,int)",2,7,n/a,7,0,2,3,2
"org.apache.lucene.util.SorterTemplate.quickSort(int,int,int)",14,3,n/a,40,2,3,28,11
"org.apache.lucene.util.SorterTemplate.rotate(int,int,int)",3,1,n/a,15,1,3,12,4
"org.apache.lucene.util.SorterTemplate.setPivot(int)",n/a,1,7,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.SorterTemplate.swap(int,int)",n/a,9,7,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.SorterTemplate.upper(int,int,int)",1,1,n/a,14,2,3,8,3
"org.apache.lucene.util.StringHelper.StringHelper()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.util.StringHelper.bytesDifference(byte[],int,byte[],int)",0,1,n/a,15,0,4,7,4
"org.apache.lucene.util.StringHelper.getVersionComparator()",0,3,n/a,7,0,0,1,1
"org.apache.lucene.util.StringHelper.intern(String)",1,36,n/a,4,0,1,1,1
"org.apache.lucene.util.StringInterner.intern(String)",1,2,n/a,4,0,1,1,1
"org.apache.lucene.util.StringInterner.intern(char[],int,int)",2,0,n/a,4,0,3,1,1
"org.apache.lucene.util.ThreadInterruptedException.ThreadInterruptedException(InterruptedException)",1,22,n/a,3,0,1,1,1
"org.apache.lucene.util.ToStringUtils.ToStringUtils()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.ToStringUtils.boost(float)",1,26,n/a,8,1,1,3,2
"org.apache.lucene.util.ToStringUtils.byteArray(StringBuilder,byte[])",5,2,n/a,8,2,2,6,3
"org.apache.lucene.util.TwoPhaseCommit.commit()",n/a,27,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.TwoPhaseCommit.commit(Map<String, String>)",n/a,2,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.TwoPhaseCommit.prepareCommit()",n/a,6,3,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.TwoPhaseCommit.prepareCommit(Map<String, String>)",n/a,2,3,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.TwoPhaseCommit.rollback()",n/a,4,4,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.TwoPhaseCommitTool.CommitFailException.CommitFailException(Throwable,TwoPhaseCommit)",2,1,n/a,4,0,2,2,1
"org.apache.lucene.util.TwoPhaseCommitTool.PrepareCommitFailException.PrepareCommitFailException(Throwable,TwoPhaseCommit)",2,1,n/a,4,0,2,2,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.TwoPhaseCommitWrapper(TwoPhaseCommit,Map<String, String>)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.commit()",1,27,n/a,3,0,0,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.commit(Map<String, String>)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.prepareCommit()",1,6,n/a,3,0,0,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.prepareCommit(Map<String, String>)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper.rollback()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.execute(TwoPhaseCommit...)",6,3,n/a,53,3,1,19,7
"org.apache.lucene.util.TwoPhaseCommitTool.rollback(TwoPhaseCommit...)",1,2,n/a,12,3,1,4,4
"org.apache.lucene.util.UnicodeUtil.UTF16Result.copyText(UTF16Result)",2,2,n/a,4,0,1,2,1
"org.apache.lucene.util.UnicodeUtil.UTF16Result.setLength(int)",1,4,n/a,6,1,1,3,2
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(CharSequence,int,int,BytesRef)",2,0,n/a,50,4,4,34,11
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(String,int,int,UTF8Result)",3,0,n/a,47,4,4,32,11
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[],int,UTF8Result)",1,2,n/a,50,4,3,32,12
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[],int,int,BytesRef)",0,1,n/a,51,4,4,33,11
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[],int,int,UTF8Result)",1,1,n/a,48,4,4,31,12
"org.apache.lucene.util.UnicodeUtil.UTF16toUTF8WithHash(char[],int,int,BytesRef)",1,1,n/a,52,4,4,35,11
"org.apache.lucene.util.UnicodeUtil.UTF8Result.setLength(int)",1,2,n/a,6,1,1,3,2
"org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(BytesRef,CharsRef)",1,4,n/a,7,0,2,1,1
"org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[],int,int,CharsRef)",1,5,n/a,38,3,4,22,6
"org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[],int,int,UTF16Result)",2,5,n/a,55,2,4,37,9
"org.apache.lucene.util.UnicodeUtil.UnicodeUtil()",0,0,n/a,1,0,0,0,1
"org.apache.lucene.util.UnicodeUtil.newString(int[],int,int)",5,0,n/a,43,4,3,24,8
"org.apache.lucene.util.UnicodeUtil.validUTF16String(CharSequence)",3,9,n/a,22,4,1,15,9
"org.apache.lucene.util.UnsafeByteArrayInputStream.UnsafeByteArrayInputStream()",0,2,n/a,12,0,0,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.UnsafeByteArrayInputStream(byte[])",1,3,n/a,10,0,1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.UnsafeByteArrayInputStream(byte[],int,int)",1,1,n/a,15,0,3,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.available()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.mark(int)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.markSupported()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.reInit(byte[])",1,4,n/a,10,0,1,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.reInit(byte[],int,int)",0,4,n/a,18,0,3,4,1
"org.apache.lucene.util.UnsafeByteArrayInputStream.read()",0,11,n/a,8,0,0,1,2
"org.apache.lucene.util.UnsafeByteArrayInputStream.reset()",0,1,n/a,8,0,0,1,1
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testDefaultCtor()",5,0,n/a,6,0,0,3,1
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testMark()",9,0,n/a,17,1,0,15,3
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testReinit()",12,0,n/a,33,1,0,30,5
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testSimple()",6,0,n/a,18,1,0,15,3
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest.testStartPos()",5,0,n/a,21,1,0,19,4
"org.apache.lucene.util.UnsafeByteArrayOutputStream.UnsafeByteArrayOutputStream()",1,2,n/a,7,0,0,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.UnsafeByteArrayOutputStream(byte[])",1,5,n/a,10,0,1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.UnsafeByteArrayOutputStream(byte[],int)",1,2,n/a,12,0,2,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.getStartPos()",0,1,n/a,9,0,0,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.grow(int)",1,2,n/a,7,0,1,3,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.length()",0,8,n/a,11,0,0,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.reInit(byte[])",1,3,n/a,9,0,1,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.reInit(byte[],int)",1,5,n/a,15,1,2,5,2
"org.apache.lucene.util.UnsafeByteArrayOutputStream.toByteArray()",0,10,n/a,8,0,0,1,1
"org.apache.lucene.util.UnsafeByteArrayOutputStream.write(byte[],int,int)",2,1,n/a,29,2,3,7,3
"org.apache.lucene.util.UnsafeByteArrayOutputStream.write(int)",1,8,n/a,13,1,1,3,2
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testArrayWrite()",8,0,n/a,23,1,0,24,5
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testArrayWriteStartNotZero()",8,0,n/a,25,1,0,26,5
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testBufferGrow()",14,0,n/a,32,1,0,35,7
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testDefaultCtor()",6,0,n/a,13,1,0,12,3
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testIllegalBufferSize()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testSimpleWrite()",6,0,n/a,14,1,0,13,3
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest.testStartPos()",10,0,n/a,27,1,0,27,6
"org.apache.lucene.util.Version.onOrAfter(Version)",1,61,n/a,3,0,1,1,1
"org.apache.lucene.util.Vint8.Position.Position()",0,4,n/a,6,0,0,0,1
"org.apache.lucene.util.Vint8.Position.Position(int)",0,2,n/a,7,0,1,1,1
"org.apache.lucene.util.Vint8.Vint8()",0,0,n/a,6,0,0,0,1
"org.apache.lucene.util.Vint8.bytesNeeded(int)",0,2,n/a,18,1,1,9,5
"org.apache.lucene.util.Vint8.decode(InputStream)",2,1,n/a,23,2,1,9,4
"org.apache.lucene.util.Vint8.decode(byte[],Position)",0,5,n/a,21,2,2,8,3
"org.apache.lucene.util.Vint8.encode(int,OutputStream)",15,1,n/a,29,1,2,19,5
"org.apache.lucene.util.Vint8.encode(int,byte[],int)",0,5,n/a,37,1,3,24,5
"org.apache.lucene.util.Vint8Test.testArrayEncodingAndDecoding()",6,0,n/a,18,1,0,14,3
"org.apache.lucene.util.Vint8Test.testBytesNeeded()",3,0,n/a,10,1,0,5,2
"org.apache.lucene.util.Vint8Test.testLegacyCompatibility()",3,0,n/a,25,1,0,5,2
"org.apache.lucene.util.Vint8Test.testPosition()",4,0,n/a,11,0,0,4,1
"org.apache.lucene.util.Vint8Test.testStreamEncodingAndDecoding()",10,0,n/a,18,1,0,14,3
"org.apache.lucene.util.VirtualMethod.VirtualMethod(Class<C>,String,Class<?>...)",6,9,n/a,20,1,3,7,3
"org.apache.lucene.util.VirtualMethod.compareImplementationDistance(Class<? extends C>,VirtualMethod<C>,VirtualMethod<C>)",4,6,n/a,13,0,3,1,1
"org.apache.lucene.util.VirtualMethod.getImplementationDistance(Class<? extends C>)",5,4,n/a,13,1,1,4,2
"org.apache.lucene.util.VirtualMethod.isOverriddenAsOf(Class<? extends C>)",1,3,n/a,10,0,1,1,1
"org.apache.lucene.util.VirtualMethod.reflectImplementationDistance(Class<? extends C>)",6,1,n/a,19,3,1,14,7
"org.apache.lucene.util.WeakIdentityMap.IdentityWeakReference.IdentityWeakReference(Object,ReferenceQueue<Object>)",2,4,n/a,4,0,2,2,2
"org.apache.lucene.util.WeakIdentityMap.IdentityWeakReference.equals(Object)",2,0,n/a,12,2,1,7,4
"org.apache.lucene.util.WeakIdentityMap.IdentityWeakReference.hashCode()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.WeakIdentityMap.WeakIdentityMap(Map<IdentityWeakReference, V>)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.util.WeakIdentityMap.clear()",2,0,n/a,4,0,0,2,1
"org.apache.lucene.util.WeakIdentityMap.containsKey(Object)",3,0,n/a,4,0,1,2,1
"org.apache.lucene.util.WeakIdentityMap.get(Object)",3,3,n/a,4,0,1,2,1
"org.apache.lucene.util.WeakIdentityMap.isEmpty()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.WeakIdentityMap.newConcurrentHashMap()",2,3,n/a,4,0,0,1,1
"org.apache.lucene.util.WeakIdentityMap.newHashMap()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.util.WeakIdentityMap.put(K,V)",3,3,n/a,4,0,2,2,1
"org.apache.lucene.util.WeakIdentityMap.reap()",2,6,n/a,6,1,0,3,2
"org.apache.lucene.util.WeakIdentityMap.remove(Object)",3,0,n/a,4,0,1,2,1
"org.apache.lucene.util.WeakIdentityMap.size()",3,1,n/a,6,0,0,4,2
"org.apache.lucene.util.collections.ArrayHashMap.ArrayHashMap()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ArrayHashMap(int)",1,4,n/a,27,1,1,12,2
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator.IndexIterator()",0,3,n/a,13,2,0,6,3
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator.next()",0,1,n/a,13,1,0,5,3
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator.remove()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator.KeyIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator.ValueIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.calcBaseHashIndex(K)",1,3,n/a,4,0,1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.clear()",1,1,n/a,18,1,0,7,2
"org.apache.lucene.util.collections.ArrayHashMap.containsKey(K)",1,7,n/a,4,0,1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.containsValue(Object)",4,6,n/a,10,2,1,6,3
"org.apache.lucene.util.collections.ArrayHashMap.equals(Object)",8,2,n/a,20,2,1,11,8
"org.apache.lucene.util.collections.ArrayHashMap.find(K)",2,3,n/a,19,2,1,7,3
"org.apache.lucene.util.collections.ArrayHashMap.findForRemove(K,int)",1,1,n/a,25,2,2,8,3
"org.apache.lucene.util.collections.ArrayHashMap.get(K)",1,14,n/a,5,0,1,1,1
"org.apache.lucene.util.collections.ArrayHashMap.grow()",5,1,n/a,24,1,0,13,2
"org.apache.lucene.util.collections.ArrayHashMap.hashCode()",3,8,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.isEmpty()",0,5,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.iterator()",1,6,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.keyIterator()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.printBaseHash()",1,0,n/a,7,1,0,2,2
"org.apache.lucene.util.collections.ArrayHashMap.prvt_put(K,V)",1,2,n/a,20,0,2,8,1
"org.apache.lucene.util.collections.ArrayHashMap.put(K,V)",3,11,n/a,28,1,2,9,3
"org.apache.lucene.util.collections.ArrayHashMap.remove(K)",2,7,n/a,25,2,1,11,3
"org.apache.lucene.util.collections.ArrayHashMap.size()",0,13,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ArrayHashMap.toArray()",3,1,n/a,14,1,0,6,2
"org.apache.lucene.util.collections.ArrayHashMap.toArray(V[])",3,2,n/a,19,1,1,8,4
"org.apache.lucene.util.collections.ArrayHashMap.toString()",14,0,n/a,18,2,0,13,3
"org.apache.lucene.util.collections.ArrayHashMapTest.test0()",39,0,n/a,41,1,0,47,12
"org.apache.lucene.util.collections.ArrayHashMapTest.test1()",26,0,n/a,28,2,0,27,7
"org.apache.lucene.util.collections.ArrayHashMapTest.test2()",32,0,n/a,29,1,0,30,5
"org.apache.lucene.util.collections.ArrayHashMapTest.test3()",41,0,n/a,47,1,0,46,10
"org.apache.lucene.util.collections.ArrayHashMapTest.test4()",20,0,n/a,24,1,0,20,3
"org.apache.lucene.util.collections.ArrayHashMapTest.testEquals()",31,0,n/a,32,1,0,28,4
"org.apache.lucene.util.collections.DoubleIterator.hasNext()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.DoubleIterator.next()",n/a,3,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.DoubleIterator.remove()",n/a,1,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.FloatIterator.hasNext()",n/a,5,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.FloatIterator.next()",n/a,5,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.FloatIterator.remove()",n/a,2,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.FloatToObjectMap.FloatToObjectMap()",1,5,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.FloatToObjectMap(int)",1,4,n/a,29,1,1,12,2
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator.IndexIterator()",0,3,n/a,13,2,0,6,3
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator.next()",0,1,n/a,13,1,0,5,3
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator.remove()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator.KeyIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator.ValueIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.calcBaseHashIndex(float)",1,3,n/a,7,0,1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.clear()",1,1,n/a,20,1,0,7,2
"org.apache.lucene.util.collections.FloatToObjectMap.containsKey(float)",1,8,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.containsValue(Object)",4,6,n/a,18,2,1,6,3
"org.apache.lucene.util.collections.FloatToObjectMap.equals(Object)",9,2,n/a,23,2,1,13,9
"org.apache.lucene.util.collections.FloatToObjectMap.find(float)",1,3,n/a,24,2,1,7,3
"org.apache.lucene.util.collections.FloatToObjectMap.findForRemove(float,int)",0,1,n/a,29,2,2,9,3
"org.apache.lucene.util.collections.FloatToObjectMap.get(float)",1,14,n/a,11,0,1,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.grow()",5,1,n/a,25,1,0,13,2
"org.apache.lucene.util.collections.FloatToObjectMap.hashCode()",3,8,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.isEmpty()",0,5,n/a,7,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.iterator()",1,6,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.keyIterator()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.printBaseHash()",1,0,n/a,9,1,0,4,2
"org.apache.lucene.util.collections.FloatToObjectMap.prvt_put(float,T)",1,2,n/a,27,0,2,8,1
"org.apache.lucene.util.collections.FloatToObjectMap.put(float,T)",3,11,n/a,28,1,2,9,3
"org.apache.lucene.util.collections.FloatToObjectMap.remove(float)",2,7,n/a,25,2,1,11,3
"org.apache.lucene.util.collections.FloatToObjectMap.size()",0,13,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.FloatToObjectMap.toArray()",3,1,n/a,14,1,0,6,2
"org.apache.lucene.util.collections.FloatToObjectMap.toArray(T[])",3,2,n/a,23,1,1,8,4
"org.apache.lucene.util.collections.FloatToObjectMap.toString()",14,0,n/a,18,2,0,13,3
"org.apache.lucene.util.collections.FloatToObjectMapTest.test0()",39,0,n/a,41,1,0,47,12
"org.apache.lucene.util.collections.FloatToObjectMapTest.test1()",26,0,n/a,28,2,0,27,7
"org.apache.lucene.util.collections.FloatToObjectMapTest.test2()",32,0,n/a,29,1,0,30,5
"org.apache.lucene.util.collections.FloatToObjectMapTest.test3()",41,0,n/a,47,1,0,46,10
"org.apache.lucene.util.collections.FloatToObjectMapTest.test4()",20,0,n/a,24,1,0,20,3
"org.apache.lucene.util.collections.FloatToObjectMapTest.testEquals()",29,0,n/a,32,1,0,28,4
"org.apache.lucene.util.collections.IntArray.IntArray()",1,8,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntArray.addToArray(int)",1,8,n/a,16,1,1,7,2
"org.apache.lucene.util.collections.IntArray.clear(boolean)",1,1,n/a,9,0,1,1,1
"org.apache.lucene.util.collections.IntArray.equals(Object)",2,5,n/a,23,1,1,13,5
"org.apache.lucene.util.collections.IntArray.get(int)",1,5,n/a,12,1,1,3,2
"org.apache.lucene.util.collections.IntArray.hashCode()",0,0,n/a,11,1,0,6,2
"org.apache.lucene.util.collections.IntArray.init(boolean)",0,2,n/a,7,1,1,4,2
"org.apache.lucene.util.collections.IntArray.intersect(IntArray)",2,1,n/a,51,3,1,29,18
"org.apache.lucene.util.collections.IntArray.intersect(IntHashSet)",1,0,n/a,17,2,1,8,3
"org.apache.lucene.util.collections.IntArray.set(int,int)",1,2,n/a,6,1,2,3,2
"org.apache.lucene.util.collections.IntArray.size()",0,5,n/a,9,0,0,1,1
"org.apache.lucene.util.collections.IntArray.sort()",1,5,n/a,9,1,0,3,2
"org.apache.lucene.util.collections.IntArray.toString()",0,0,n/a,11,1,0,6,2
"org.apache.lucene.util.collections.IntArrayTest.test0()",10,0,n/a,13,1,0,12,3
"org.apache.lucene.util.collections.IntArrayTest.test1()",15,0,n/a,19,1,0,19,4
"org.apache.lucene.util.collections.IntArrayTest.test2()",13,0,n/a,19,1,0,19,4
"org.apache.lucene.util.collections.IntArrayTest.testSet()",7,0,n/a,25,1,0,17,5
"org.apache.lucene.util.collections.IntHashSet.IndexIterator.IndexIterator()",0,2,n/a,13,2,0,6,3
"org.apache.lucene.util.collections.IntHashSet.IndexIterator.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.IndexIterator.next()",0,1,n/a,13,1,0,5,3
"org.apache.lucene.util.collections.IntHashSet.IndexIterator.remove()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.IntHashSet()",1,8,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.IntHashSet(int)",1,2,n/a,28,1,1,11,2
"org.apache.lucene.util.collections.IntHashSet.KeyIterator.KeyIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.IntHashSet.KeyIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.KeyIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.KeyIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.add(int)",3,9,n/a,29,1,1,7,3
"org.apache.lucene.util.collections.IntHashSet.calcBaseHashIndex(int)",0,3,n/a,9,0,1,1,1
"org.apache.lucene.util.collections.IntHashSet.clear()",1,4,n/a,20,1,0,7,2
"org.apache.lucene.util.collections.IntHashSet.contains(int)",1,4,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.IntHashSet.find(int)",1,2,n/a,24,2,1,7,3
"org.apache.lucene.util.collections.IntHashSet.findForRemove(int,int)",0,1,n/a,29,2,2,9,3
"org.apache.lucene.util.collections.IntHashSet.grow()",5,2,n/a,27,1,0,12,2
"org.apache.lucene.util.collections.IntHashSet.isEmpty()",0,10,n/a,7,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.iterator()",1,3,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.printBaseHash()",1,0,n/a,10,2,0,5,3
"org.apache.lucene.util.collections.IntHashSet.prvt_add(int)",1,2,n/a,26,0,1,7,1
"org.apache.lucene.util.collections.IntHashSet.remove(int)",2,10,n/a,26,2,1,11,3
"org.apache.lucene.util.collections.IntHashSet.size()",0,14,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntHashSet.toArray()",3,1,n/a,14,1,0,6,2
"org.apache.lucene.util.collections.IntHashSet.toArray(int[])",3,1,n/a,23,1,1,8,4
"org.apache.lucene.util.collections.IntHashSet.toHashString()",7,0,n/a,18,2,0,17,4
"org.apache.lucene.util.collections.IntHashSet.toString()",11,0,n/a,19,2,0,10,3
"org.apache.lucene.util.collections.IntHashSetTest.test0()",15,0,n/a,12,0,0,9,1
"org.apache.lucene.util.collections.IntHashSetTest.test1()",17,0,n/a,17,1,0,16,3
"org.apache.lucene.util.collections.IntHashSetTest.test2()",17,0,n/a,16,1,0,14,2
"org.apache.lucene.util.collections.IntHashSetTest.test3()",13,0,n/a,20,2,0,18,5
"org.apache.lucene.util.collections.IntHashSetTest.test4()",13,0,n/a,20,2,0,15,4
"org.apache.lucene.util.collections.IntHashSetTest.testMySet()",6,0,n/a,16,3,0,13,4
"org.apache.lucene.util.collections.IntHashSetTest.testRegularJavaSet()",6,0,n/a,16,3,0,13,4
"org.apache.lucene.util.collections.IntHashSetTest.testToArray()",14,0,n/a,26,3,0,23,6
"org.apache.lucene.util.collections.IntHashSetTest.testZZMySet()",6,0,n/a,16,3,0,13,4
"org.apache.lucene.util.collections.IntHashSetTest.testZZRegularJavaSet()",6,0,n/a,16,3,0,13,4
"org.apache.lucene.util.collections.IntIterator.hasNext()",n/a,13,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.IntIterator.next()",n/a,13,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.IntIterator.remove()",n/a,5,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator.IndexIterator()",0,3,n/a,13,2,0,6,3
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator.next()",0,1,n/a,13,1,0,5,3
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator.remove()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.IntToDoubleMap()",1,5,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.IntToDoubleMap(int)",1,4,n/a,30,1,1,13,2
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator.KeyIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator.ValueIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.calcBaseHashIndex(int)",0,3,n/a,9,0,1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.clear()",1,1,n/a,20,1,0,7,2
"org.apache.lucene.util.collections.IntToDoubleMap.containsKey(int)",1,8,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.containsValue(double)",3,6,n/a,17,2,1,6,3
"org.apache.lucene.util.collections.IntToDoubleMap.equals(Object)",9,2,n/a,20,2,1,13,5
"org.apache.lucene.util.collections.IntToDoubleMap.find(int)",1,3,n/a,24,2,1,7,3
"org.apache.lucene.util.collections.IntToDoubleMap.findForRemove(int,int)",0,1,n/a,29,2,2,9,3
"org.apache.lucene.util.collections.IntToDoubleMap.get(int)",1,14,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.grow()",5,1,n/a,24,1,0,13,2
"org.apache.lucene.util.collections.IntToDoubleMap.hashCode()",3,8,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.isEmpty()",0,5,n/a,7,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.iterator()",1,6,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.keyIterator()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.printBaseHash()",1,0,n/a,9,1,0,4,2
"org.apache.lucene.util.collections.IntToDoubleMap.prvt_put(int,double)",1,2,n/a,27,0,2,8,1
"org.apache.lucene.util.collections.IntToDoubleMap.put(int,double)",3,11,n/a,27,1,2,9,3
"org.apache.lucene.util.collections.IntToDoubleMap.remove(int)",2,7,n/a,24,2,1,11,3
"org.apache.lucene.util.collections.IntToDoubleMap.size()",0,15,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToDoubleMap.toArray()",3,1,n/a,14,1,0,6,2
"org.apache.lucene.util.collections.IntToDoubleMap.toArray(double[])",5,2,n/a,27,1,1,10,4
"org.apache.lucene.util.collections.IntToDoubleMap.toString()",14,0,n/a,18,2,0,13,3
"org.apache.lucene.util.collections.IntToDoubleMapTest.assertGround(double)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.util.collections.IntToDoubleMapTest.test0()",35,0,n/a,41,1,0,47,12
"org.apache.lucene.util.collections.IntToDoubleMapTest.test1()",26,0,n/a,28,2,0,27,7
"org.apache.lucene.util.collections.IntToDoubleMapTest.test2()",30,0,n/a,29,1,0,30,5
"org.apache.lucene.util.collections.IntToDoubleMapTest.test3()",41,0,n/a,47,1,0,46,10
"org.apache.lucene.util.collections.IntToDoubleMapTest.test4()",20,0,n/a,24,1,0,20,3
"org.apache.lucene.util.collections.IntToDoubleMapTest.testEquals()",31,0,n/a,32,1,0,28,4
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator.IndexIterator()",0,3,n/a,13,2,0,6,3
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator.next()",0,1,n/a,13,1,0,5,3
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator.remove()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.IntToIntMap()",1,6,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.IntToIntMap(int)",1,4,n/a,30,1,1,13,2
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator.KeyIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator.ValueIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.calcBaseHashIndex(int)",0,3,n/a,8,0,1,1,1
"org.apache.lucene.util.collections.IntToIntMap.clear()",1,2,n/a,20,1,0,7,2
"org.apache.lucene.util.collections.IntToIntMap.containsKey(int)",1,9,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.IntToIntMap.containsValue(int)",3,6,n/a,17,2,1,5,3
"org.apache.lucene.util.collections.IntToIntMap.equals(Object)",8,2,n/a,20,2,1,13,5
"org.apache.lucene.util.collections.IntToIntMap.find(int)",1,3,n/a,24,2,1,7,3
"org.apache.lucene.util.collections.IntToIntMap.findForRemove(int,int)",0,1,n/a,29,2,2,9,3
"org.apache.lucene.util.collections.IntToIntMap.get(int)",1,15,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.IntToIntMap.grow()",5,1,n/a,24,1,0,13,2
"org.apache.lucene.util.collections.IntToIntMap.hashCode()",3,8,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.isEmpty()",0,5,n/a,7,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.iterator()",1,6,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.keyIterator()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.printBaseHash()",1,0,n/a,9,1,0,4,2
"org.apache.lucene.util.collections.IntToIntMap.prvt_put(int,int)",1,2,n/a,27,0,2,8,1
"org.apache.lucene.util.collections.IntToIntMap.put(int,int)",3,12,n/a,27,1,2,9,3
"org.apache.lucene.util.collections.IntToIntMap.remove(int)",2,7,n/a,24,2,1,11,3
"org.apache.lucene.util.collections.IntToIntMap.size()",0,13,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToIntMap.toArray()",3,1,n/a,14,1,0,6,2
"org.apache.lucene.util.collections.IntToIntMap.toArray(int[])",3,2,n/a,23,1,1,8,4
"org.apache.lucene.util.collections.IntToIntMap.toString()",14,0,n/a,18,2,0,13,3
"org.apache.lucene.util.collections.IntToIntMapTest.assertGround(int)",1,3,n/a,3,0,1,1,1
"org.apache.lucene.util.collections.IntToIntMapTest.test0()",35,0,n/a,41,1,0,47,12
"org.apache.lucene.util.collections.IntToIntMapTest.test1()",26,0,n/a,28,2,0,27,7
"org.apache.lucene.util.collections.IntToIntMapTest.test2()",30,0,n/a,29,1,0,30,5
"org.apache.lucene.util.collections.IntToIntMapTest.test3()",41,0,n/a,47,1,0,46,10
"org.apache.lucene.util.collections.IntToIntMapTest.test4()",19,0,n/a,24,1,0,20,3
"org.apache.lucene.util.collections.IntToIntMapTest.testEquals()",29,0,n/a,32,1,0,28,4
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator.IndexIterator()",0,3,n/a,13,2,0,6,3
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator.next()",0,1,n/a,13,1,0,5,3
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator.remove()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.IntToObjectMap()",1,6,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.IntToObjectMap(int)",1,4,n/a,29,1,1,12,2
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator.KeyIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator.ValueIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.calcBaseHashIndex(int)",0,3,n/a,8,0,1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.clear()",1,1,n/a,20,1,0,7,2
"org.apache.lucene.util.collections.IntToObjectMap.containsKey(int)",1,8,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.containsValue(Object)",4,6,n/a,18,2,1,6,3
"org.apache.lucene.util.collections.IntToObjectMap.equals(Object)",9,2,n/a,23,2,1,13,9
"org.apache.lucene.util.collections.IntToObjectMap.find(int)",1,3,n/a,24,2,1,7,3
"org.apache.lucene.util.collections.IntToObjectMap.findForRemove(int,int)",0,1,n/a,29,2,2,9,3
"org.apache.lucene.util.collections.IntToObjectMap.get(int)",1,18,n/a,11,0,1,1,1
"org.apache.lucene.util.collections.IntToObjectMap.grow()",5,1,n/a,25,1,0,13,2
"org.apache.lucene.util.collections.IntToObjectMap.hashCode()",3,8,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.isEmpty()",0,5,n/a,7,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.iterator()",1,6,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.keyIterator()",1,5,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.printBaseHash()",1,0,n/a,9,1,0,4,2
"org.apache.lucene.util.collections.IntToObjectMap.prvt_put(int,T)",1,2,n/a,27,0,2,8,1
"org.apache.lucene.util.collections.IntToObjectMap.put(int,T)",3,14,n/a,28,1,2,9,3
"org.apache.lucene.util.collections.IntToObjectMap.remove(int)",2,7,n/a,25,2,1,11,3
"org.apache.lucene.util.collections.IntToObjectMap.size()",0,13,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.IntToObjectMap.toArray()",3,1,n/a,14,1,0,6,2
"org.apache.lucene.util.collections.IntToObjectMap.toArray(T[])",3,2,n/a,23,1,1,8,4
"org.apache.lucene.util.collections.IntToObjectMap.toString()",14,0,n/a,18,2,0,13,3
"org.apache.lucene.util.collections.IntToObjectMapTest.test0()",39,0,n/a,41,1,0,47,12
"org.apache.lucene.util.collections.IntToObjectMapTest.test1()",26,0,n/a,28,2,0,27,7
"org.apache.lucene.util.collections.IntToObjectMapTest.test2()",32,0,n/a,29,1,0,30,5
"org.apache.lucene.util.collections.IntToObjectMapTest.test3()",41,0,n/a,47,1,0,46,10
"org.apache.lucene.util.collections.IntToObjectMapTest.test4()",20,0,n/a,24,1,0,20,3
"org.apache.lucene.util.collections.IntToObjectMapTest.testEquals()",31,0,n/a,32,1,0,28,4
"org.apache.lucene.util.collections.LRUHashMap.LRUHashMap(int)",1,3,n/a,17,0,1,2,1
"org.apache.lucene.util.collections.LRUHashMap.getMaxSize()",0,0,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.LRUHashMap.removeEldestEntry(Entry<K, V>)",1,0,n/a,9,0,1,1,1
"org.apache.lucene.util.collections.LRUHashMap.setMaxSize(int)",0,2,n/a,13,0,1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator.IndexIterator()",0,3,n/a,13,2,0,6,3
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator.next()",0,1,n/a,13,1,0,5,3
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator.remove()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator.KeyIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ObjectToFloatMap()",1,5,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ObjectToFloatMap(int)",1,4,n/a,29,1,1,12,2
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator.ValueIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.calcBaseHashIndex(K)",1,3,n/a,8,0,1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.clear()",1,1,n/a,21,1,0,8,2
"org.apache.lucene.util.collections.ObjectToFloatMap.containsKey(K)",1,7,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.containsValue(float)",3,6,n/a,17,2,1,5,3
"org.apache.lucene.util.collections.ObjectToFloatMap.equals(Object)",8,2,n/a,18,2,1,11,4
"org.apache.lucene.util.collections.ObjectToFloatMap.find(K)",2,3,n/a,24,2,1,7,3
"org.apache.lucene.util.collections.ObjectToFloatMap.findForRemove(K,int)",1,1,n/a,29,2,2,9,3
"org.apache.lucene.util.collections.ObjectToFloatMap.get(K)",1,14,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.grow()",5,1,n/a,25,1,0,13,2
"org.apache.lucene.util.collections.ObjectToFloatMap.hashCode()",3,8,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.isEmpty()",0,5,n/a,7,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.iterator()",1,6,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.keyIterator()",1,4,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.printBaseHash()",1,0,n/a,9,1,0,4,2
"org.apache.lucene.util.collections.ObjectToFloatMap.prvt_put(K,float)",1,2,n/a,27,0,2,8,1
"org.apache.lucene.util.collections.ObjectToFloatMap.put(K,float)",3,11,n/a,27,1,2,9,3
"org.apache.lucene.util.collections.ObjectToFloatMap.remove(K)",2,7,n/a,24,2,1,11,3
"org.apache.lucene.util.collections.ObjectToFloatMap.size()",0,13,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.ObjectToFloatMap.toArray()",3,1,n/a,14,1,0,6,2
"org.apache.lucene.util.collections.ObjectToFloatMap.toArray(float[])",3,2,n/a,22,1,1,8,4
"org.apache.lucene.util.collections.ObjectToFloatMap.toString()",14,0,n/a,18,2,0,13,3
"org.apache.lucene.util.collections.ObjectToFloatMapTest.assertNaN(float)",2,4,n/a,3,0,1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMapTest.assertNotNaN(float)",2,2,n/a,3,0,1,1,1
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test0()",35,0,n/a,41,1,0,47,12
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test1()",26,0,n/a,28,2,0,27,7
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test2()",30,0,n/a,29,1,0,30,5
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test3()",42,0,n/a,48,1,0,47,10
"org.apache.lucene.util.collections.ObjectToFloatMapTest.test4()",20,0,n/a,24,1,0,20,3
"org.apache.lucene.util.collections.ObjectToFloatMapTest.testEquals()",31,0,n/a,32,1,0,28,4
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator.IndexIterator()",0,3,n/a,13,2,0,6,3
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator.hasNext()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator.next()",0,1,n/a,13,1,0,5,3
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator.remove()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator.KeyIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator.next()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ObjectToIntMap()",1,5,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ObjectToIntMap(int)",1,4,n/a,29,1,1,12,2
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator.ValueIterator()",0,1,n/a,1,0,0,0,1
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator.hasNext()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator.next()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator.remove()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.calcBaseHashIndex(K)",1,3,n/a,8,0,1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.clear()",1,1,n/a,21,1,0,8,2
"org.apache.lucene.util.collections.ObjectToIntMap.containsKey(K)",1,7,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.containsValue(int)",3,6,n/a,17,2,1,5,3
"org.apache.lucene.util.collections.ObjectToIntMap.equals(Object)",8,2,n/a,18,2,1,11,4
"org.apache.lucene.util.collections.ObjectToIntMap.find(K)",2,3,n/a,24,2,1,7,3
"org.apache.lucene.util.collections.ObjectToIntMap.findForRemove(K,int)",1,1,n/a,29,2,2,9,3
"org.apache.lucene.util.collections.ObjectToIntMap.get(K)",1,14,n/a,10,0,1,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.grow()",5,1,n/a,25,1,0,13,2
"org.apache.lucene.util.collections.ObjectToIntMap.hashCode()",3,8,n/a,4,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.isEmpty()",0,5,n/a,7,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.iterator()",1,6,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.keyIterator()",1,4,n/a,3,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.printBaseHash()",1,0,n/a,9,1,0,4,2
"org.apache.lucene.util.collections.ObjectToIntMap.prvt_put(K,int)",1,2,n/a,27,0,2,8,1
"org.apache.lucene.util.collections.ObjectToIntMap.put(K,int)",3,11,n/a,27,1,2,9,3
"org.apache.lucene.util.collections.ObjectToIntMap.remove(K)",2,7,n/a,24,2,1,11,3
"org.apache.lucene.util.collections.ObjectToIntMap.size()",0,13,n/a,6,0,0,1,1
"org.apache.lucene.util.collections.ObjectToIntMap.toArray()",3,1,n/a,14,1,0,6,2
"org.apache.lucene.util.collections.ObjectToIntMap.toArray(int[])",3,2,n/a,22,1,1,8,4
"org.apache.lucene.util.collections.ObjectToIntMap.toString()",14,0,n/a,18,2,0,13,3
"org.apache.lucene.util.collections.ObjectToIntMapTest.assertIntegerMaxValue(int)",1,4,n/a,3,0,1,1,1
"org.apache.lucene.util.collections.ObjectToIntMapTest.assertNotIntegerMaxValue(int)",1,2,n/a,3,0,1,1,1
"org.apache.lucene.util.collections.ObjectToIntMapTest.test0()",35,0,n/a,41,1,0,47,12
"org.apache.lucene.util.collections.ObjectToIntMapTest.test1()",26,0,n/a,28,2,0,27,7
"org.apache.lucene.util.collections.ObjectToIntMapTest.test2()",30,0,n/a,29,1,0,30,5
"org.apache.lucene.util.collections.ObjectToIntMapTest.test3()",42,0,n/a,48,1,0,47,10
"org.apache.lucene.util.collections.ObjectToIntMapTest.test4()",19,0,n/a,24,1,0,20,3
"org.apache.lucene.util.collections.ObjectToIntMapTest.testEquals()",29,0,n/a,32,1,0,28,4
"org.apache.lucene.util.collections.TestLRUHashMap.testLRU()",49,0,n/a,35,0,0,29,1
"org.apache.lucene.util.encoding.ChunksIntEncoder.ChunksIntEncoder(int)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.util.encoding.ChunksIntEncoder.close()",3,0,n/a,8,1,0,4,2
"org.apache.lucene.util.encoding.ChunksIntEncoder.encodeChunk()",2,2,n/a,13,1,0,8,2
"org.apache.lucene.util.encoding.ChunksIntEncoder.reInit(OutputStream)",2,0,n/a,8,0,1,5,1
"org.apache.lucene.util.encoding.DGapIntDecoder.DGapIntDecoder(IntDecoder)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.util.encoding.DGapIntDecoder.decode()",1,0,n/a,8,1,0,4,2
"org.apache.lucene.util.encoding.DGapIntDecoder.reInit(InputStream)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.util.encoding.DGapIntDecoder.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.DGapIntEncoder.DGapIntEncoder(IntEncoder)",1,14,n/a,4,0,1,1,1
"org.apache.lucene.util.encoding.DGapIntEncoder.createMatchingDecoder()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.DGapIntEncoder.encode(int)",1,1,n/a,5,0,1,2,1
"org.apache.lucene.util.encoding.DGapIntEncoder.reInit(OutputStream)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.util.encoding.DGapIntEncoder.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EightFlagsIntDecoder.decode()",2,0,n/a,17,2,0,9,5
"org.apache.lucene.util.encoding.EightFlagsIntDecoder.reInit(InputStream)",2,0,n/a,7,0,1,4,1
"org.apache.lucene.util.encoding.EightFlagsIntDecoder.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EightFlagsIntEncoder.EightFlagsIntEncoder()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.util.encoding.EightFlagsIntEncoder.createMatchingDecoder()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EightFlagsIntEncoder.encode(int)",1,0,n/a,13,1,1,6,3
"org.apache.lucene.util.encoding.EightFlagsIntEncoder.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EncodingSpeed.encoderTest(IntEncoder,int[],int)",34,7,n/a,54,2,3,43,9
"org.apache.lucene.util.encoding.EncodingSpeed.main(String[])",4,0,n/a,10,0,1,4,1
"org.apache.lucene.util.encoding.EncodingSpeed.testFacetIDs(int[],int)",41,4,n/a,28,0,2,18,1
"org.apache.lucene.util.encoding.EncodingTest.decoding(ByteArrayOutputStream,IntDecoder)",21,2,n/a,21,1,2,16,3
"org.apache.lucene.util.encoding.EncodingTest.encoderTest(IntEncoder)",25,8,n/a,24,1,1,17,3
"org.apache.lucene.util.encoding.EncodingTest.encoding(IntEncoder,ByteArrayOutputStream)",7,2,n/a,13,1,2,9,3
"org.apache.lucene.util.encoding.EncodingTest.setData()",2,1,n/a,254,1,0,3,2
"org.apache.lucene.util.encoding.EncodingTest.testSimpleInt()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGap()",5,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGapEightFlags()",5,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGapFourFlags()",5,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGapNOnes3()",5,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueDGapNOnes4()",5,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EncodingTest.testSortingUniqueValues()",4,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.EncodingTest.testVInt8()",12,0,n/a,12,0,0,8,1
"org.apache.lucene.util.encoding.FourFlagsIntDecoder.decode()",2,0,n/a,18,2,0,10,5
"org.apache.lucene.util.encoding.FourFlagsIntDecoder.reInit(InputStream)",2,0,n/a,7,0,1,4,1
"org.apache.lucene.util.encoding.FourFlagsIntDecoder.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.FourFlagsIntEncoder.FourFlagsIntEncoder()",1,2,n/a,3,0,0,1,1
"org.apache.lucene.util.encoding.FourFlagsIntEncoder.createMatchingDecoder()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.FourFlagsIntEncoder.encode(int)",1,0,n/a,21,1,1,6,3
"org.apache.lucene.util.encoding.FourFlagsIntEncoder.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.IntDecoder.decode()",n/a,20,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.encoding.IntDecoder.reInit(InputStream)",0,12,n/a,4,0,1,1,1
"org.apache.lucene.util.encoding.IntEncoder.IntEncoder()",0,1,n/a,8,0,0,0,1
"org.apache.lucene.util.encoding.IntEncoder.close()",1,13,n/a,17,1,0,2,2
"org.apache.lucene.util.encoding.IntEncoder.createMatchingDecoder()",n/a,11,0,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.encoding.IntEncoder.encode(int)",n/a,11,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.encoding.IntEncoder.reInit(OutputStream)",0,13,n/a,16,0,1,1,1
"org.apache.lucene.util.encoding.IntEncoderFilter.IntEncoderFilter(IntEncoder)",0,0,n/a,3,0,1,1,1
"org.apache.lucene.util.encoding.IntEncoderFilter.close()",1,1,n/a,6,0,0,1,1
"org.apache.lucene.util.encoding.IntEncoderFilter.reInit(OutputStream)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.util.encoding.NOnesIntDecoder.NOnesIntDecoder(int)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.util.encoding.NOnesIntDecoder.decode()",1,0,n/a,20,1,0,12,6
"org.apache.lucene.util.encoding.NOnesIntDecoder.reInit(InputStream)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.util.encoding.NOnesIntDecoder.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.NOnesIntEncoder.NOnesIntEncoder(int)",0,5,n/a,7,0,1,1,1
"org.apache.lucene.util.encoding.NOnesIntEncoder.close()",2,0,n/a,8,1,0,3,2
"org.apache.lucene.util.encoding.NOnesIntEncoder.createMatchingDecoder()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.NOnesIntEncoder.encode(int)",3,0,n/a,19,2,1,9,4
"org.apache.lucene.util.encoding.NOnesIntEncoder.reInit(OutputStream)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.util.encoding.NOnesIntEncoder.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.SimpleIntDecoder.decode()",2,0,n/a,21,3,0,13,4
"org.apache.lucene.util.encoding.SimpleIntDecoder.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.SimpleIntEncoder.createMatchingDecoder()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.SimpleIntEncoder.encode(int)",4,0,n/a,17,0,1,4,1
"org.apache.lucene.util.encoding.SimpleIntEncoder.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.SortingIntEncoder.SortingIntEncoder(IntEncoder)",1,15,n/a,4,0,1,1,1
"org.apache.lucene.util.encoding.SortingIntEncoder.close()",4,1,n/a,13,1,0,10,3
"org.apache.lucene.util.encoding.SortingIntEncoder.createMatchingDecoder()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.SortingIntEncoder.encode(int)",1,0,n/a,9,1,1,5,2
"org.apache.lucene.util.encoding.SortingIntEncoder.reInit(OutputStream)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.util.encoding.SortingIntEncoder.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.UniqueValuesIntEncoder(IntEncoder)",1,16,n/a,4,0,1,1,1
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.createMatchingDecoder()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.encode(int)",1,1,n/a,7,1,1,3,2
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.reInit(OutputStream)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder.toString()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.VInt8IntDecoder.decode()",2,0,n/a,20,3,0,13,5
"org.apache.lucene.util.encoding.VInt8IntDecoder.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.VInt8IntEncoder.createMatchingDecoder()",1,0,n/a,4,0,0,1,1
"org.apache.lucene.util.encoding.VInt8IntEncoder.encode(int)",15,0,n/a,24,1,1,19,5
"org.apache.lucene.util.encoding.VInt8IntEncoder.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.Builder.Builder(INPUT_TYPE,Outputs<T>)",1,4,n/a,9,0,2,1,1
"org.apache.lucene.util.fst.Builder.Builder(INPUT_TYPE,int,int,boolean,boolean,int,Outputs<T>,FreezeTail<T>,boolean)",4,4,n/a,64,1,9,16,3
"org.apache.lucene.util.fst.Builder.CompiledNode.isCompiled()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.Builder.FreezeTail.freeze(UnCompiledNode<T>[],int,IntsRef)",n/a,1,0,n/a,n/a,3,n/a,n/a
"org.apache.lucene.util.fst.Builder.Node.isCompiled()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.fst.Builder.UnCompiledNode.UnCompiledNode(Builder<T>,int)",1,3,n/a,14,0,2,5,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.addArc(int,Node)",3,1,n/a,18,2,2,15,4
"org.apache.lucene.util.fst.Builder.UnCompiledNode.clear()",0,3,n/a,8,0,0,4,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.deleteLast(int,Node)",0,1,n/a,6,0,2,4,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.getLastOutput(int)",0,1,n/a,5,0,1,3,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.isCompiled()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.prependOutput(T)",5,1,n/a,12,1,1,9,3
"org.apache.lucene.util.fst.Builder.UnCompiledNode.replaceLast(int,Node,T,boolean)",0,2,n/a,9,0,4,6,1
"org.apache.lucene.util.fst.Builder.UnCompiledNode.setLastOutput(int,T)",1,2,n/a,7,0,2,5,1
"org.apache.lucene.util.fst.Builder.add(IntsRef,T)",23,6,n/a,106,2,2,59,14
"org.apache.lucene.util.fst.Builder.compileAllTargets(UnCompiledNode<T>,int)",2,2,n/a,14,3,2,9,4
"org.apache.lucene.util.fst.Builder.compileNode(UnCompiledNode<T>,int)",5,3,n/a,17,2,2,11,6
"org.apache.lucene.util.fst.Builder.finish()",4,6,n/a,22,2,0,11,8
"org.apache.lucene.util.fst.Builder.freezeTail(int)",10,2,n/a,89,4,1,37,18
"org.apache.lucene.util.fst.Builder.getMappedStateCount()",0,0,n/a,3,0,0,1,2
"org.apache.lucene.util.fst.Builder.getTermCount()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.Builder.getTotStateCount()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.Builder.setAllowArrayArcs(boolean)",1,0,n/a,6,0,1,1,1
"org.apache.lucene.util.fst.Builder.validOutput(T)",1,9,n/a,3,0,1,1,2
"org.apache.lucene.util.fst.ByteSequenceOutputs.ByteSequenceOutputs()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.util.fst.ByteSequenceOutputs.add(BytesRef,BytesRef)",3,21,n/a,18,1,2,13,3
"org.apache.lucene.util.fst.ByteSequenceOutputs.common(BytesRef,BytesRef)",2,3,n/a,27,2,2,17,6
"org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()",0,30,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.ByteSequenceOutputs.getSingleton()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(BytesRef)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.util.fst.ByteSequenceOutputs.read(DataInput)",3,11,n/a,12,1,1,7,2
"org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(BytesRef,BytesRef)",1,4,n/a,16,1,2,9,3
"org.apache.lucene.util.fst.ByteSequenceOutputs.write(BytesRef,DataOutput)",2,7,n/a,6,0,2,3,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.BytesRefFSTEnum(FST<T>)",1,0,n/a,8,0,1,3,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.current()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.getCurrentLabel()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.getTargetLabel()",0,11,n/a,8,1,0,3,2
"org.apache.lucene.util.fst.BytesRefFSTEnum.grow()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.next()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.seekCeil(BytesRef)",2,1,n/a,7,0,1,4,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.seekExact(BytesRef)",2,0,n/a,14,1,1,6,2
"org.apache.lucene.util.fst.BytesRefFSTEnum.seekFloor(BytesRef)",2,1,n/a,7,0,1,4,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.setCurrentLabel(int)",0,7,n/a,4,0,1,1,1
"org.apache.lucene.util.fst.BytesRefFSTEnum.setResult()",0,4,n/a,9,1,0,5,2
"org.apache.lucene.util.fst.FST.Arc.copyFrom(Arc<T>)",0,20,n/a,17,1,1,13,2
"org.apache.lucene.util.fst.FST.Arc.flag(int)",1,19,n/a,3,0,1,1,1
"org.apache.lucene.util.fst.FST.Arc.isFinal()",1,18,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.FST.Arc.isLast()",1,26,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.FST.Arc.toString()",16,0,n/a,26,1,0,17,7
"org.apache.lucene.util.fst.FST.ArcAndState.ArcAndState(Arc<T>,IntsRef)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.util.fst.FST.BytesReader.BytesReader(byte[],int)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.util.fst.FST.BytesReader.skip(int)",n/a,7,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.fst.FST.BytesReader.skip(int,int)",n/a,3,2,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.fst.FST.BytesWriter.BytesWriter()",0,2,n/a,5,0,0,1,1
"org.apache.lucene.util.fst.FST.BytesWriter.setPosWrite(int)",1,1,n/a,6,1,1,3,2
"org.apache.lucene.util.fst.FST.BytesWriter.writeByte(byte)",1,55,n/a,9,1,1,5,2
"org.apache.lucene.util.fst.FST.BytesWriter.writeBytes(byte[],int,int)",2,20,n/a,7,0,3,4,1
"org.apache.lucene.util.fst.FST.FST(DataInput,Outputs<T>)",21,5,n/a,54,2,2,41,9
"org.apache.lucene.util.fst.FST.FST(INPUT_TYPE,Outputs<T>,boolean)",2,1,n/a,19,1,3,13,2
"org.apache.lucene.util.fst.FST.FST(INPUT_TYPE,int[],Outputs<T>)",2,1,n/a,10,0,3,7,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.ForwardBytesReader(byte[],int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.readByte()",0,58,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.readBytes(byte[],int,int)",1,28,n/a,5,0,3,2,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.skip(int)",0,7,n/a,3,0,1,1,1
"org.apache.lucene.util.fst.FST.ForwardBytesReader.skip(int,int)",0,3,n/a,3,0,2,1,1
"org.apache.lucene.util.fst.FST.NodeAndInCount.NodeAndInCount(int,int)",0,2,n/a,4,0,2,2,1
"org.apache.lucene.util.fst.FST.NodeAndInCount.compareTo(NodeAndInCount)",0,1,n/a,11,1,1,5,3
"org.apache.lucene.util.fst.FST.NodeQueue.NodeQueue(int)",1,1,n/a,3,0,1,1,1
"org.apache.lucene.util.fst.FST.NodeQueue.lessThan(NodeAndInCount,NodeAndInCount)",1,6,n/a,6,0,2,3,1
"org.apache.lucene.util.fst.FST.ReverseBytesReader.ReverseBytesReader(byte[],int)",1,1,n/a,3,0,2,1,1
"org.apache.lucene.util.fst.FST.ReverseBytesReader.readByte()",0,58,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.FST.ReverseBytesReader.readBytes(byte[],int,int)",0,28,n/a,6,1,3,4,2
"org.apache.lucene.util.fst.FST.ReverseBytesReader.skip(int)",0,7,n/a,3,0,1,1,1
"org.apache.lucene.util.fst.FST.ReverseBytesReader.skip(int,int)",0,3,n/a,3,0,2,1,1
"org.apache.lucene.util.fst.FST.addNode(UnCompiledNode<T>)",15,3,n/a,151,3,1,92,25
"org.apache.lucene.util.fst.FST.cacheRootArcs()",9,3,n/a,23,3,0,14,5
"org.apache.lucene.util.fst.FST.findTargetArc(int,Arc<T>,Arc<T>,BytesReader)",14,10,n/a,86,3,4,52,17
"org.apache.lucene.util.fst.FST.finish(int)",3,1,n/a,13,1,1,9,4
"org.apache.lucene.util.fst.FST.flag(int,int)",0,7,n/a,3,0,2,1,1
"org.apache.lucene.util.fst.FST.getArcCount()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.FST.getArcWithOutputCount()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.FST.getBytesReader(int)",2,28,n/a,8,1,1,3,2
"org.apache.lucene.util.fst.FST.getEmptyOutput()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.FST.getFirstArc(Arc<T>)",0,12,n/a,16,1,1,8,2
"org.apache.lucene.util.fst.FST.getInputType()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.FST.getNodeAddress(int)",0,5,n/a,9,1,1,3,2
"org.apache.lucene.util.fst.FST.getNodeCount()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.FST.isExpandedTarget(Arc<T>)",4,2,n/a,14,1,1,4,2
"org.apache.lucene.util.fst.FST.pack(int,int)",46,2,n/a,281,8,2,163,48
"org.apache.lucene.util.fst.FST.read(File,Outputs<T>)",6,0,n/a,18,2,2,9,2
"org.apache.lucene.util.fst.FST.readFirstRealTargetArc(int,Arc<T>,BytesReader)",6,9,n/a,27,2,3,14,3
"org.apache.lucene.util.fst.FST.readFirstTargetArc(Arc<T>,Arc<T>)",3,19,n/a,29,2,2,11,3
"org.apache.lucene.util.fst.FST.readLabel(DataInput)",3,8,n/a,13,1,1,7,3
"org.apache.lucene.util.fst.FST.readLastTargetArc(Arc<T>,Arc<T>)",22,1,n/a,65,5,2,36,10
"org.apache.lucene.util.fst.FST.readNextArc(Arc<T>)",5,13,n/a,12,2,1,5,3
"org.apache.lucene.util.fst.FST.readNextArcLabel(Arc<T>)",12,4,n/a,35,3,1,17,5
"org.apache.lucene.util.fst.FST.readNextRealArc(Arc<T>,BytesReader)",18,17,n/a,77,4,2,40,13
"org.apache.lucene.util.fst.FST.save(DataOutput)",18,3,n/a,45,2,1,33,9
"org.apache.lucene.util.fst.FST.save(File)",6,1,n/a,17,2,1,8,2
"org.apache.lucene.util.fst.FST.seekToNextNode(BytesReader)",11,1,n/a,22,3,1,13,8
"org.apache.lucene.util.fst.FST.setAllowArrayArcs(boolean)",0,1,n/a,3,0,1,1,1
"org.apache.lucene.util.fst.FST.setEmptyOutput(T)",3,2,n/a,25,2,1,16,4
"org.apache.lucene.util.fst.FST.shouldExpand(UnCompiledNode<T>)",0,4,n/a,20,0,1,1,4
"org.apache.lucene.util.fst.FST.sizeInBytes()",0,1,n/a,11,1,0,7,3
"org.apache.lucene.util.fst.FST.targetHasArcs(Arc<T>)",0,9,n/a,5,0,1,1,1
"org.apache.lucene.util.fst.FST.writeLabel(int)",3,2,n/a,13,1,1,8,3
"org.apache.lucene.util.fst.FSTEnum.FSTEnum(FST<T>)",3,2,n/a,9,0,1,4,1
"org.apache.lucene.util.fst.FSTEnum.doNext()",6,2,n/a,20,3,0,9,4
"org.apache.lucene.util.fst.FSTEnum.doSeekCeil()",34,2,n/a,128,5,0,77,21
"org.apache.lucene.util.fst.FSTEnum.doSeekExact()",12,2,n/a,37,2,0,16,4
"org.apache.lucene.util.fst.FSTEnum.doSeekFloor()",44,2,n/a,149,6,0,82,27
"org.apache.lucene.util.fst.FSTEnum.getArc(int)",1,24,n/a,6,1,1,3,2
"org.apache.lucene.util.fst.FSTEnum.getCurrentLabel()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.fst.FSTEnum.getTargetLabel()",n/a,11,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.fst.FSTEnum.grow()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.fst.FSTEnum.incr()",5,7,n/a,16,1,0,10,3
"org.apache.lucene.util.fst.FSTEnum.pushFirst()",5,5,n/a,19,2,0,11,3
"org.apache.lucene.util.fst.FSTEnum.pushLast()",5,5,n/a,16,2,0,9,3
"org.apache.lucene.util.fst.FSTEnum.rewindPrefix()",8,3,n/a,29,2,0,15,6
"org.apache.lucene.util.fst.FSTEnum.setCurrentLabel(int)",n/a,7,2,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.fst.IntSequenceOutputs.IntSequenceOutputs()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.util.fst.IntSequenceOutputs.add(IntsRef,IntsRef)",3,21,n/a,18,1,2,13,3
"org.apache.lucene.util.fst.IntSequenceOutputs.common(IntsRef,IntsRef)",2,3,n/a,27,2,2,17,6
"org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()",0,30,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.IntSequenceOutputs.getSingleton()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(IntsRef)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.util.fst.IntSequenceOutputs.read(DataInput)",3,11,n/a,14,2,1,10,3
"org.apache.lucene.util.fst.IntSequenceOutputs.subtract(IntsRef,IntsRef)",1,4,n/a,16,1,2,9,3
"org.apache.lucene.util.fst.IntSequenceOutputs.write(IntsRef,DataOutput)",2,7,n/a,8,1,2,6,2
"org.apache.lucene.util.fst.IntsRefFSTEnum.IntsRefFSTEnum(FST<T>)",1,1,n/a,8,0,1,3,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.current()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.getCurrentLabel()",0,1,n/a,5,0,0,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.getTargetLabel()",0,11,n/a,8,1,0,3,2
"org.apache.lucene.util.fst.IntsRefFSTEnum.grow()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.next()",2,1,n/a,5,0,0,2,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.seekCeil(IntsRef)",2,1,n/a,7,0,1,4,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.seekExact(IntsRef)",2,0,n/a,14,1,1,6,2
"org.apache.lucene.util.fst.IntsRefFSTEnum.seekFloor(IntsRef)",2,1,n/a,7,0,1,4,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.setCurrentLabel(int)",0,7,n/a,4,0,1,1,1
"org.apache.lucene.util.fst.IntsRefFSTEnum.setResult()",0,4,n/a,9,1,0,5,2
"org.apache.lucene.util.fst.NoOutputs.NoOutputs()",0,1,n/a,2,0,0,0,1
"org.apache.lucene.util.fst.NoOutputs.add(Object,Object)",0,21,n/a,6,0,2,3,1
"org.apache.lucene.util.fst.NoOutputs.common(Object,Object)",0,3,n/a,6,0,2,3,1
"org.apache.lucene.util.fst.NoOutputs.getNoOutput()",0,31,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.NoOutputs.getSingleton()",0,5,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.NoOutputs.outputToString(Object)",0,6,n/a,4,0,1,1,1
"org.apache.lucene.util.fst.NoOutputs.read(DataInput)",0,11,n/a,6,0,1,1,1
"org.apache.lucene.util.fst.NoOutputs.subtract(Object,Object)",0,4,n/a,6,0,2,3,1
"org.apache.lucene.util.fst.NoOutputs.write(Object,DataOutput)",0,7,n/a,4,0,2,0,1
"org.apache.lucene.util.fst.NodeHash.NodeHash(FST<T>)",0,1,n/a,5,0,1,3,1
"org.apache.lucene.util.fst.NodeHash.add(UnCompiledNode<T>)",7,1,n/a,27,3,1,17,5
"org.apache.lucene.util.fst.NodeHash.addNew(int)",1,1,n/a,13,2,1,7,3
"org.apache.lucene.util.fst.NodeHash.count()",0,0,n/a,3,0,0,1,1
"org.apache.lucene.util.fst.NodeHash.hash(UnCompiledNode<T>)",2,1,n/a,21,2,1,13,3
"org.apache.lucene.util.fst.NodeHash.hash(int)",7,3,n/a,24,2,1,15,4
"org.apache.lucene.util.fst.NodeHash.nodesEqual(UnCompiledNode<T>,int,BytesReader)",6,1,n/a,25,3,3,15,11
"org.apache.lucene.util.fst.NodeHash.rehash()",1,1,n/a,11,2,0,9,3
"org.apache.lucene.util.fst.Outputs.add(T,T)",n/a,21,6,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.fst.Outputs.common(T,T)",n/a,3,6,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.fst.Outputs.getNoOutput()",n/a,30,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.fst.Outputs.merge(T,T)",1,2,n/a,3,0,2,1,1
"org.apache.lucene.util.fst.Outputs.outputToString(T)",n/a,6,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.fst.Outputs.read(DataInput)",n/a,11,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.fst.Outputs.subtract(T,T)",n/a,4,6,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.fst.Outputs.write(T,DataOutput)",n/a,7,6,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.fst.PairOutputs.Pair.Pair(A,B)",0,2,n/a,5,0,2,2,1
"org.apache.lucene.util.fst.PairOutputs.Pair.equals(Object)",2,0,n/a,11,1,1,6,4
"org.apache.lucene.util.fst.PairOutputs.Pair.hashCode()",2,0,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.PairOutputs.PairOutputs(Outputs<A>,Outputs<B>)",3,0,n/a,5,0,2,3,1
"org.apache.lucene.util.fst.PairOutputs.add(Pair<A, B>,Pair<A, B>)",5,21,n/a,7,0,2,3,1
"org.apache.lucene.util.fst.PairOutputs.common(Pair<A, B>,Pair<A, B>)",5,3,n/a,7,0,2,3,1
"org.apache.lucene.util.fst.PairOutputs.getNoOutput()",0,30,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.PairOutputs.newPair(A,B)",10,4,n/a,16,1,2,9,5
"org.apache.lucene.util.fst.PairOutputs.outputToString(Pair<A, B>)",3,6,n/a,5,0,1,2,1
"org.apache.lucene.util.fst.PairOutputs.read(DataInput)",3,11,n/a,6,0,1,3,1
"org.apache.lucene.util.fst.PairOutputs.subtract(Pair<A, B>,Pair<A, B>)",5,4,n/a,7,0,2,3,1
"org.apache.lucene.util.fst.PairOutputs.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.PairOutputs.valid(Pair<A, B>)",6,9,n/a,20,2,1,11,8
"org.apache.lucene.util.fst.PairOutputs.write(Pair<A, B>,DataOutput)",3,7,n/a,6,0,2,3,1
"org.apache.lucene.util.fst.PositiveIntOutputs.PositiveIntOutputs(boolean)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.add(Long,Long)",2,21,n/a,12,1,2,7,3
"org.apache.lucene.util.fst.PositiveIntOutputs.common(Long,Long)",4,3,n/a,16,1,2,11,5
"org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()",0,30,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.getSingleton(boolean)",0,7,n/a,3,0,1,1,2
"org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(Long)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.read(DataInput)",1,11,n/a,9,1,1,4,2
"org.apache.lucene.util.fst.PositiveIntOutputs.subtract(Long,Long)",3,4,n/a,13,1,2,8,3
"org.apache.lucene.util.fst.PositiveIntOutputs.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.PositiveIntOutputs.valid(Long)",0,7,n/a,6,0,1,4,2
"org.apache.lucene.util.fst.PositiveIntOutputs.write(Long,DataOutput)",2,7,n/a,5,0,2,2,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs.TwoLongs(long,long)",0,4,n/a,6,0,2,4,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs.equals(Object)",0,0,n/a,9,1,1,4,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs.hashCode()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.UpToTwoPositiveIntOutputs(boolean)",0,2,n/a,3,0,1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.add(Object,Object)",3,21,n/a,20,2,2,13,4
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.common(Object,Object)",4,3,n/a,18,1,2,13,5
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.get(long)",1,0,n/a,7,1,1,3,2
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.get(long,long)",1,0,n/a,3,0,2,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.getNoOutput()",0,30,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.getSingleton(boolean)",0,0,n/a,3,0,1,1,2
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.merge(Object,Object)",3,2,n/a,6,0,2,3,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.outputToString(Object)",1,6,n/a,4,0,1,1,1
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.read(DataInput)",4,11,n/a,18,2,1,9,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.subtract(Object,Object)",3,4,n/a,15,1,2,10,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.valid(Long)",0,2,n/a,6,0,1,4,2
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.valid(Object,boolean)",2,9,n/a,11,1,2,6,3
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.write(Object,DataOutput)",4,7,n/a,12,1,2,7,2
"org.apache.lucene.util.fst.Util.FSTPath.FSTPath(T,Arc<T>,Comparator<T>)",2,2,n/a,5,0,3,3,1
"org.apache.lucene.util.fst.Util.FSTPath.compareTo(FSTPath<T>)",2,0,n/a,9,1,1,4,2
"org.apache.lucene.util.fst.Util.FSTPath.toString()",0,0,n/a,4,0,0,1,1
"org.apache.lucene.util.fst.Util.MinResult.MinResult(IntsRef,T,Comparator<T>)",0,2,n/a,5,0,3,3,1
"org.apache.lucene.util.fst.Util.MinResult.compareTo(MinResult<T>)",2,0,n/a,9,1,1,4,2
"org.apache.lucene.util.fst.Util.TopNSearcher.TopNSearcher(FST<T>,Arc<T>,int,Comparator<T>)",0,1,n/a,6,0,4,4,1
"org.apache.lucene.util.fst.Util.TopNSearcher.addIfCompetitive(FSTPath<T>)",14,3,n/a,48,3,1,28,7
"org.apache.lucene.util.fst.Util.TopNSearcher.search()",41,1,n/a,155,5,0,77,25
"org.apache.lucene.util.fst.Util.Util()",0,0,n/a,2,0,0,0,1
"org.apache.lucene.util.fst.Util.emitDotState(Writer,String,String,String,String)",1,3,n/a,12,0,5,1,4
"org.apache.lucene.util.fst.Util.get(FST<T>,BytesRef)",8,0,n/a,21,2,2,13,4
"org.apache.lucene.util.fst.Util.get(FST<T>,IntsRef)",8,0,n/a,20,2,2,12,4
"org.apache.lucene.util.fst.Util.getByOutput(FST<Long>,long)",18,0,n/a,128,6,2,70,19
"org.apache.lucene.util.fst.Util.printableLabel(int)",2,1,n/a,10,1,1,3,3
"org.apache.lucene.util.fst.Util.shortestPaths(FST<T>,Arc<T>,Comparator<T>,int)",2,3,n/a,9,0,4,1,1
"org.apache.lucene.util.fst.Util.toBytesRef(IntsRef,BytesRef)",1,1,n/a,10,1,2,7,2
"org.apache.lucene.util.fst.Util.toDot(FST<T>,Writer,boolean,boolean)",58,0,n/a,178,6,4,80,26
"org.apache.lucene.util.fst.Util.toIntsRef(BytesRef,IntsRef)",1,2,n/a,10,1,2,7,2
"org.apache.lucene.util.fst.Util.toUTF32(CharSequence,IntsRef)",4,1,n/a,17,1,2,11,2
"org.apache.lucene.util.fst.Util.toUTF32(char[],int,int,IntsRef)",3,0,n/a,17,1,4,11,2
"org.apache.lucene.util.packed.Direct16.Direct16(DataInput,int)",3,1,n/a,16,2,2,14,4
"org.apache.lucene.util.packed.Direct16.Direct16(int)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.util.packed.Direct16.Direct16(short[])",1,0,n/a,11,0,1,2,1
"org.apache.lucene.util.packed.Direct16.clear()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Direct16.get(int)",1,5,n/a,4,0,1,2,2
"org.apache.lucene.util.packed.Direct16.getArray()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.Direct16.hasArray()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.Direct16.ramBytesUsed()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Direct16.set(int,long)",0,2,n/a,3,0,2,1,1
"org.apache.lucene.util.packed.Direct32.Direct32(DataInput,int)",3,1,n/a,12,1,2,10,3
"org.apache.lucene.util.packed.Direct32.Direct32(int)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.util.packed.Direct32.Direct32(int[])",1,0,n/a,11,0,1,2,1
"org.apache.lucene.util.packed.Direct32.clear()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Direct32.get(int)",1,5,n/a,4,0,1,2,2
"org.apache.lucene.util.packed.Direct32.getArray()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.Direct32.hasArray()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.Direct32.ramBytesUsed()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Direct32.set(int,long)",0,2,n/a,3,0,2,1,1
"org.apache.lucene.util.packed.Direct64.Direct64(DataInput,int)",2,1,n/a,8,1,2,7,2
"org.apache.lucene.util.packed.Direct64.Direct64(int)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.util.packed.Direct64.Direct64(long[])",1,0,n/a,11,0,1,2,1
"org.apache.lucene.util.packed.Direct64.clear()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Direct64.get(int)",1,5,n/a,4,0,1,2,2
"org.apache.lucene.util.packed.Direct64.getArray()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.Direct64.hasArray()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.Direct64.ramBytesUsed()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Direct64.set(int,long)",0,2,n/a,3,0,2,1,1
"org.apache.lucene.util.packed.Direct8.Direct8(DataInput,int)",3,1,n/a,17,2,2,14,4
"org.apache.lucene.util.packed.Direct8.Direct8(byte[])",1,0,n/a,11,0,1,2,1
"org.apache.lucene.util.packed.Direct8.Direct8(int)",1,1,n/a,4,0,1,2,1
"org.apache.lucene.util.packed.Direct8.clear()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Direct8.get(int)",1,5,n/a,4,0,1,2,2
"org.apache.lucene.util.packed.Direct8.getArray()",0,2,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.Direct8.hasArray()",0,1,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.Direct8.ramBytesUsed()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Direct8.set(int,long)",0,2,n/a,3,0,2,1,1
"org.apache.lucene.util.packed.GrowableWriter.GrowableWriter(int,int,boolean)",4,2,n/a,5,0,3,3,1
"org.apache.lucene.util.packed.GrowableWriter.clear()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.GrowableWriter.get(int)",1,6,n/a,3,0,1,1,1
"org.apache.lucene.util.packed.GrowableWriter.getArray()",1,2,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.GrowableWriter.getBitsPerValue()",1,5,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.GrowableWriter.getMutable()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.GrowableWriter.getSize(int)",1,2,n/a,7,1,1,3,2
"org.apache.lucene.util.packed.GrowableWriter.hasArray()",1,1,n/a,4,0,0,1,1
"org.apache.lucene.util.packed.GrowableWriter.resize(int)",6,0,n/a,8,1,1,7,2
"org.apache.lucene.util.packed.GrowableWriter.set(int,long)",9,4,n/a,17,2,2,14,5
"org.apache.lucene.util.packed.GrowableWriter.size()",1,3,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Packed32.Packed32(DataInput,int,int)",5,1,n/a,22,1,3,10,3
"org.apache.lucene.util.packed.Packed32.Packed32(int,int)",1,1,n/a,11,0,2,1,1
"org.apache.lucene.util.packed.Packed32.Packed32(int[],int,int)",4,1,n/a,23,1,3,5,2
"org.apache.lucene.util.packed.Packed32.clear()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Packed32.get(int)",1,5,n/a,13,0,1,6,2
"org.apache.lucene.util.packed.Packed32.ramBytesUsed()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Packed32.set(int,long)",0,2,n/a,12,0,2,7,1
"org.apache.lucene.util.packed.Packed32.size(int,int)",0,1,n/a,4,0,2,2,2
"org.apache.lucene.util.packed.Packed32.toString()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.util.packed.Packed32.updateCached()",0,2,n/a,6,0,0,4,1
"org.apache.lucene.util.packed.Packed64.Packed64(DataInput,int,int)",4,1,n/a,19,1,3,8,2
"org.apache.lucene.util.packed.Packed64.Packed64(int,int)",1,1,n/a,12,0,2,1,1
"org.apache.lucene.util.packed.Packed64.Packed64(long[],int,int)",2,1,n/a,15,0,3,3,1
"org.apache.lucene.util.packed.Packed64.clear()",1,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Packed64.get(int)",1,5,n/a,14,0,1,7,2
"org.apache.lucene.util.packed.Packed64.ramBytesUsed()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.Packed64.set(int,long)",0,2,n/a,10,0,2,6,1
"org.apache.lucene.util.packed.Packed64.size(int,int)",0,1,n/a,4,0,2,2,2
"org.apache.lucene.util.packed.Packed64.toString()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.util.packed.Packed64.updateCached()",0,2,n/a,6,0,0,4,1
"org.apache.lucene.util.packed.PackedInts.Mutable.clear()",n/a,1,7,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.Mutable.set(int,long)",n/a,2,7,n/a,n/a,2,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.Reader.get(int)",n/a,5,7,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.Reader.getArray()",n/a,2,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.Reader.getBitsPerValue()",n/a,3,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.Reader.hasArray()",n/a,1,6,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.Reader.size()",n/a,1,2,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.ReaderImpl(int,int)",0,16,n/a,5,0,2,3,2
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.getArray()",0,2,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.getBitsPerValue()",0,3,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.getMaxValue()",1,0,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.hasArray()",0,1,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.PackedInts.ReaderImpl.size()",0,8,n/a,3,0,0,1,1
"org.apache.lucene.util.packed.PackedInts.Writer.Writer(DataOutput,int,int)",3,1,n/a,10,0,3,7,1
"org.apache.lucene.util.packed.PackedInts.Writer.add(long)",n/a,0,1,n/a,n/a,1,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.Writer.finish()",n/a,0,1,n/a,n/a,0,n/a,n/a
"org.apache.lucene.util.packed.PackedInts.bitsRequired(long)",4,0,n/a,16,1,1,5,3
"org.apache.lucene.util.packed.PackedInts.getMutable(int,int)",6,2,n/a,31,2,2,13,8
"org.apache.lucene.util.packed.PackedInts.getNextFixedSize(int)",0,2,n/a,12,1,1,7,4
"org.apache.lucene.util.packed.PackedInts.getReader(DataInput)",9,0,n/a,30,2,1,17,9
"org.apache.lucene.util.packed.PackedInts.getRoundedFixedSize(int)",1,0,n/a,8,1,1,3,4
"org.apache.lucene.util.packed.PackedInts.getWriter(DataOutput,int,int)",1,0,n/a,15,0,3,1,1
"org.apache.lucene.util.packed.PackedInts.maxValue(int)",0,5,n/a,10,0,1,1,2
"org.apache.lucene.util.packed.PackedWriter.PackedWriter(DataOutput,int,int)",1,1,n/a,11,1,3,9,2
"org.apache.lucene.util.packed.PackedWriter.add(long)",4,1,n/a,36,2,1,14,3
"org.apache.lucene.util.packed.PackedWriter.finish()",2,0,n/a,9,1,0,4,3
"org.apache.lucene.util.packed.PackedWriter.toString()",0,0,n/a,5,0,0,1,1
"org.apache.lucene.xmlparser.CoreParser.CoreParser(Analyzer,QueryParser)",1,0,n/a,10,0,2,1,1
"org.apache.lucene.xmlparser.CoreParser.CoreParser(String,Analyzer)",1,0,n/a,9,0,2,1,1
"org.apache.lucene.xmlparser.CoreParser.CoreParser(String,Analyzer,QueryParser)",48,2,n/a,48,1,3,39,2
"org.apache.lucene.xmlparser.CoreParser.addFilterBuilder(String,FilterBuilder)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.xmlparser.CoreParser.addQueryBuilder(String,QueryBuilder)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.xmlparser.CoreParser.getQuery(Element)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.CoreParser.parse(InputStream)",3,0,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.CoreParser.parseXML(InputStream)",5,1,n/a,23,1,1,10,3
"org.apache.lucene.xmlparser.CorePlusExtensionsParser.CorePlusExtensionsParser(Analyzer,QueryParser)",1,0,n/a,10,0,2,1,1
"org.apache.lucene.xmlparser.CorePlusExtensionsParser.CorePlusExtensionsParser(String,Analyzer)",1,1,n/a,9,0,2,1,1
"org.apache.lucene.xmlparser.CorePlusExtensionsParser.CorePlusExtensionsParser(String,Analyzer,QueryParser)",13,2,n/a,11,0,3,8,1
"org.apache.lucene.xmlparser.DOMUtils.getAttribute(Element,String,String)",2,5,n/a,9,1,3,4,3
"org.apache.lucene.xmlparser.DOMUtils.getAttribute(Element,String,boolean)",4,10,n/a,10,1,3,4,3
"org.apache.lucene.xmlparser.DOMUtils.getAttribute(Element,String,float)",3,18,n/a,9,1,3,4,3
"org.apache.lucene.xmlparser.DOMUtils.getAttribute(Element,String,int)",3,10,n/a,9,1,3,4,3
"org.apache.lucene.xmlparser.DOMUtils.getAttributeOrFail(Element,String)",3,5,n/a,10,1,2,4,2
"org.apache.lucene.xmlparser.DOMUtils.getAttributeWithInheritance(Element,String)",4,4,n/a,25,2,2,10,6
"org.apache.lucene.xmlparser.DOMUtils.getAttributeWithInheritanceOrFail(Element,String)",3,9,n/a,10,1,2,4,2
"org.apache.lucene.xmlparser.DOMUtils.getChildByTagName(Element,String)",5,2,n/a,12,2,2,6,4
"org.apache.lucene.xmlparser.DOMUtils.getChildByTagOrFail(Element,String)",3,6,n/a,10,1,2,4,2
"org.apache.lucene.xmlparser.DOMUtils.getChildTextByTagName(Element,String)",2,0,n/a,10,1,2,4,2
"org.apache.lucene.xmlparser.DOMUtils.getFirstChildElement(Element)",3,2,n/a,12,2,1,6,3
"org.apache.lucene.xmlparser.DOMUtils.getFirstChildOrFail(Element)",3,10,n/a,10,1,1,4,2
"org.apache.lucene.xmlparser.DOMUtils.getNonBlankTextOrFail(Element)",5,6,n/a,11,1,1,6,4
"org.apache.lucene.xmlparser.DOMUtils.getText(Node)",3,5,n/a,8,0,1,3,1
"org.apache.lucene.xmlparser.DOMUtils.getTextBuffer(Node,StringBuilder)",7,3,n/a,24,3,2,13,5
"org.apache.lucene.xmlparser.DOMUtils.insertChild(Element,String,String)",6,0,n/a,11,1,3,5,2
"org.apache.lucene.xmlparser.DOMUtils.loadXML(Reader)",6,0,n/a,30,1,1,10,3
"org.apache.lucene.xmlparser.FilterBuilder.getFilter(Element)",n/a,2,6,n/a,n/a,1,n/a,n/a
"org.apache.lucene.xmlparser.FilterBuilderFactory.addBuilder(String,FilterBuilder)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.xmlparser.FilterBuilderFactory.getFilter(Element)",5,2,n/a,8,1,1,4,2
"org.apache.lucene.xmlparser.FilterBuilderFactory.getFilterBuilder(String)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.ParserException.ParserException()",1,0,n/a,6,0,0,1,1
"org.apache.lucene.xmlparser.ParserException.ParserException(String)",1,7,n/a,6,0,1,1,1
"org.apache.lucene.xmlparser.ParserException.ParserException(String,Throwable)",1,2,n/a,7,0,2,1,1
"org.apache.lucene.xmlparser.ParserException.ParserException(Throwable)",1,7,n/a,6,0,1,1,1
"org.apache.lucene.xmlparser.QueryBuilder.getQuery(Element)",n/a,5,11,n/a,n/a,1,n/a,n/a
"org.apache.lucene.xmlparser.QueryBuilderFactory.addBuilder(String,QueryBuilder)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.xmlparser.QueryBuilderFactory.getQuery(Element)",5,0,n/a,8,1,1,4,2
"org.apache.lucene.xmlparser.QueryBuilderFactory.getQueryBuilder(String)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.QueryTemplateManager()",0,0,n/a,3,0,0,0,1
"org.apache.lucene.xmlparser.QueryTemplateManager.QueryTemplateManager(InputStream)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.addDefaultQueryTemplate(InputStream)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.addQueryTemplate(String,InputStream)",2,0,n/a,4,0,2,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsDOM(Properties)",1,1,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsDOM(Properties,InputStream)",3,2,n/a,9,0,2,3,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsDOM(Properties,String)",2,2,n/a,5,0,2,2,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsDOM(Properties,Templates)",3,2,n/a,9,0,2,3,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsXmlString(Properties)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsXmlString(Properties,InputStream)",4,2,n/a,10,0,2,4,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsXmlString(Properties,String)",2,2,n/a,5,0,2,2,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getQueryAsXmlString(Properties,Templates)",4,2,n/a,10,0,2,4,1
"org.apache.lucene.xmlparser.QueryTemplateManager.getTemplates(InputStream)",5,2,n/a,11,0,1,5,1
"org.apache.lucene.xmlparser.QueryTemplateManager.transformCriteria(Properties,InputStream,Result)",6,1,n/a,16,1,3,8,1
"org.apache.lucene.xmlparser.QueryTemplateManager.transformCriteria(Properties,Templates,Result)",2,1,n/a,7,0,3,1,1
"org.apache.lucene.xmlparser.QueryTemplateManager.transformCriteria(Properties,Transformer,Result)",13,1,n/a,22,2,3,13,4
"org.apache.lucene.xmlparser.TestParser.afterClass()",3,0,n/a,10,0,0,7,1
"org.apache.lucene.xmlparser.TestParser.beforeClass()",29,0,n/a,29,1,0,22,2
"org.apache.lucene.xmlparser.TestParser.dumpResults(String,Query,int)",9,18,n/a,16,2,3,11,3
"org.apache.lucene.xmlparser.TestParser.parse(String)",3,20,n/a,8,0,1,4,1
"org.apache.lucene.xmlparser.TestParser.testBooleanFilterXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testBooleanQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testBoostingQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testBoostingTermQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testCachedFilterXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testConstantScoreQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testCustomFieldUserQueryXML()",5,0,n/a,7,0,0,4,1
"org.apache.lucene.xmlparser.TestParser.testDuplicateFilterQueryXML()",8,0,n/a,8,0,0,4,2
"org.apache.lucene.xmlparser.TestParser.testFuzzyLikeThisQueryXML()",4,0,n/a,10,1,0,4,2
"org.apache.lucene.xmlparser.TestParser.testLikeThisQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testMatchAllDocsPlusFilterXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testNestedBooleanQuery()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testNumericRangeFilterQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testNumericRangeQueryQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testRangeFilterQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testSimpleTermsQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testSimpleXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testSpanTermXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testTermsFilterXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestParser.testUserQueryXML()",2,0,n/a,5,0,0,2,1
"org.apache.lucene.xmlparser.TestQueryTemplateManager.getDocumentFromString(String)",10,1,n/a,16,2,1,8,3
"org.apache.lucene.xmlparser.TestQueryTemplateManager.getPropsFromString(String)",9,1,n/a,16,2,1,8,3
"org.apache.lucene.xmlparser.TestQueryTemplateManager.setUp()",10,0,n/a,19,1,0,11,2
"org.apache.lucene.xmlparser.TestQueryTemplateManager.tearDown()",3,0,n/a,6,0,0,3,1
"org.apache.lucene.xmlparser.TestQueryTemplateManager.testFormTransforms()",26,0,n/a,29,1,0,16,5
"org.apache.lucene.xmlparser.builders.BooleanFilterBuilder.BooleanFilterBuilder(FilterBuilder)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.BooleanFilterBuilder.getFilter(Element)",11,2,n/a,17,2,1,13,3
"org.apache.lucene.xmlparser.builders.BooleanQueryBuilder.BooleanQueryBuilder(QueryBuilder)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.BooleanQueryBuilder.getOccursValue(Element)",6,1,n/a,31,4,1,11,6
"org.apache.lucene.xmlparser.builders.BooleanQueryBuilder.getQuery(Element)",16,5,n/a,22,2,1,15,3
"org.apache.lucene.xmlparser.builders.BoostingQueryBuilder.BoostingQueryBuilder(QueryBuilder)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.BoostingQueryBuilder.getQuery(Element)",10,5,n/a,13,0,1,10,1
"org.apache.lucene.xmlparser.builders.BoostingTermBuilder.getSpanQuery(Element)",7,0,n/a,8,0,1,5,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.CachedFilterBuilder(QueryBuilderFactory,FilterBuilderFactory,int)",0,0,n/a,7,0,3,3,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.LRUCache.LRUCache(int)",1,1,n/a,5,0,1,2,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.LRUCache.removeEldestEntry(Entry<K, V>)",1,0,n/a,5,0,1,1,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.getFilter(Element)",10,2,n/a,38,1,1,20,5
"org.apache.lucene.xmlparser.builders.ConstantScoreQueryBuilder.ConstantScoreQueryBuilder(FilterBuilderFactory)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.ConstantScoreQueryBuilder.getQuery(Element)",5,5,n/a,7,0,1,4,1
"org.apache.lucene.xmlparser.builders.DuplicateFilterBuilder.getFilter(Element)",14,2,n/a,33,1,1,15,5
"org.apache.lucene.xmlparser.builders.FilteredQueryBuilder.FilteredQueryBuilder(FilterBuilder,QueryBuilder)",0,0,n/a,5,0,2,2,1
"org.apache.lucene.xmlparser.builders.FilteredQueryBuilder.getQuery(Element)",9,5,n/a,14,0,1,9,1
"org.apache.lucene.xmlparser.builders.FuzzyLikeThisQueryBuilder.FuzzyLikeThisQueryBuilder(Analyzer)",0,1,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.FuzzyLikeThisQueryBuilder.getQuery(Element)",14,5,n/a,18,1,1,15,2
"org.apache.lucene.xmlparser.builders.LikeThisQueryBuilder.LikeThisQueryBuilder(Analyzer,String[])",0,1,n/a,5,0,2,2,1
"org.apache.lucene.xmlparser.builders.LikeThisQueryBuilder.getQuery(Element)",34,5,n/a,55,4,1,34,10
"org.apache.lucene.xmlparser.builders.MatchAllDocsQueryBuilder.getQuery(Element)",1,5,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder.NoMatchFilter.getDocIdSet(IndexReader)",0,23,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder.getFilter(Element)",25,3,n/a,39,2,1,22,7
"org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder.setStrictMode(boolean)",0,0,n/a,16,0,1,1,1
"org.apache.lucene.xmlparser.builders.NumericRangeQueryBuilder.getQuery(Element)",25,5,n/a,36,2,1,20,6
"org.apache.lucene.xmlparser.builders.RangeFilterBuilder.getFilter(Element)",6,2,n/a,8,0,1,6,1
"org.apache.lucene.xmlparser.builders.SpanBuilderBase.getQuery(Element)",1,0,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.SpanFirstBuilder.SpanFirstBuilder(SpanQueryBuilder)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.xmlparser.builders.SpanFirstBuilder.getSpanQuery(Element)",6,0,n/a,9,0,1,6,1
"org.apache.lucene.xmlparser.builders.SpanNearBuilder.SpanNearBuilder(SpanQueryBuilder)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.SpanNearBuilder.getSpanQuery(Element)",12,0,n/a,17,2,1,12,3
"org.apache.lucene.xmlparser.builders.SpanNotBuilder.SpanNotBuilder(SpanQueryBuilder)",1,0,n/a,8,0,1,2,1
"org.apache.lucene.xmlparser.builders.SpanNotBuilder.getSpanQuery(Element)",9,0,n/a,12,0,1,9,1
"org.apache.lucene.xmlparser.builders.SpanOrBuilder.SpanOrBuilder(SpanQueryBuilder)",1,0,n/a,5,0,1,2,1
"org.apache.lucene.xmlparser.builders.SpanOrBuilder.getSpanQuery(Element)",11,0,n/a,16,2,1,11,3
"org.apache.lucene.xmlparser.builders.SpanOrTermsBuilder.SpanOrTermsBuilder(Analyzer)",1,0,n/a,8,0,1,2,1
"org.apache.lucene.xmlparser.builders.SpanOrTermsBuilder.getSpanQuery(Element)",20,0,n/a,25,2,1,16,3
"org.apache.lucene.xmlparser.builders.SpanQueryBuilder.getSpanQuery(Element)",n/a,0,0,n/a,n/a,1,n/a,n/a
"org.apache.lucene.xmlparser.builders.SpanQueryBuilderFactory.addBuilder(String,SpanQueryBuilder)",1,0,n/a,4,0,2,1,1
"org.apache.lucene.xmlparser.builders.SpanQueryBuilderFactory.getQuery(Element)",1,0,n/a,3,0,1,1,1
"org.apache.lucene.xmlparser.builders.SpanQueryBuilderFactory.getSpanQuery(Element)",5,1,n/a,9,1,1,4,2
"org.apache.lucene.xmlparser.builders.SpanTermBuilder.getSpanQuery(Element)",6,0,n/a,8,0,1,5,1
"org.apache.lucene.xmlparser.builders.TermQueryBuilder.getQuery(Element)",6,5,n/a,7,0,1,5,1
"org.apache.lucene.xmlparser.builders.TermsFilterBuilder.TermsFilterBuilder(Analyzer)",0,1,n/a,7,0,1,1,1
"org.apache.lucene.xmlparser.builders.TermsFilterBuilder.getFilter(Element)",16,2,n/a,37,3,1,17,4
"org.apache.lucene.xmlparser.builders.TermsQueryBuilder.TermsQueryBuilder(Analyzer)",0,0,n/a,4,0,1,1,1
"org.apache.lucene.xmlparser.builders.TermsQueryBuilder.getQuery(Element)",23,5,n/a,33,3,1,19,4
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.getDocumentFromString(String)",7,10,n/a,10,0,1,7,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterDouble()",34,0,n/a,25,0,0,22,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterFloat()",34,0,n/a,25,0,0,22,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterHandleNumericParseError()",16,0,n/a,28,2,0,16,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterHandleNumericParseErrorStrict()",6,0,n/a,12,1,0,8,2
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterInt()",34,0,n/a,25,0,0,22,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder.testGetFilterLong()",34,0,n/a,25,0,0,22,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.getDocumentFromString(String)",7,9,n/a,10,0,1,7,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterDouble()",33,0,n/a,24,0,0,21,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterFloat()",33,0,n/a,24,0,0,21,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterHandleNumericParseErrorStrict()",5,0,n/a,11,1,0,7,2
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterInt()",33,0,n/a,24,0,0,21,1
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder.testGetFilterLong()",33,0,n/a,24,0,0,21,1
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder.UserInputQueryBuilder(QueryParser)",0,0,n/a,7,0,1,1,1
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder.UserInputQueryBuilder(String,Analyzer)",0,0,n/a,4,0,2,2,1
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder.createQueryParser(String,Analyzer)",1,1,n/a,10,0,2,1,1
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder.getQuery(Element)",10,5,n/a,29,3,1,12,3
"org.apache.lucene.xmlparser.webdemo.FormBasedXmlQueryDemo.doPost(HttpServletRequest,HttpServletResponse)",18,0,n/a,35,3,2,22,7
"org.apache.lucene.xmlparser.webdemo.FormBasedXmlQueryDemo.init(ServletConfig)",9,0,n/a,17,1,1,8,2
"org.apache.lucene.xmlparser.webdemo.FormBasedXmlQueryDemo.openExampleIndex()",27,1,n/a,31,2,0,18,3
"org.egothor.stemmer.Cell.Cell()",0,0,n/a,2,0,0,0,1
"org.egothor.stemmer.Cell.Cell(Cell)",0,0,n/a,11,0,1,4,1
"org.egothor.stemmer.Cell.toString()",0,0,n/a,9,0,0,1,1
"org.egothor.stemmer.Compile.allocTrie()",2,1,n/a,7,1,0,3,2
"org.egothor.stemmer.Compile.main(String[])",44,0,n/a,107,6,1,83,21
"org.egothor.stemmer.Diff.Diff()",1,0,n/a,6,0,0,1,1
"org.egothor.stemmer.Diff.Diff(int,int,int,int)",0,1,n/a,14,0,4,4,1
"org.egothor.stemmer.Diff.apply(StringBuilder,CharSequence)",7,1,n/a,51,3,2,28,10
"org.egothor.stemmer.Diff.exec(String,String)",19,0,n/a,135,3,2,101,27
"org.egothor.stemmer.DiffIt.get(int,String)",2,4,n/a,7,1,2,3,2
"org.egothor.stemmer.DiffIt.main(String[])",20,0,n/a,41,6,1,24,7
"org.egothor.stemmer.Gener.Gener()",0,0,n/a,4,0,0,0,1
"org.egothor.stemmer.Gener.eat(Row,int[])",8,1,n/a,34,3,2,19,9
"org.egothor.stemmer.Gener.optimize(Trie)",10,0,n/a,22,2,1,13,3
"org.egothor.stemmer.Lift.Lift(boolean)",0,0,n/a,9,0,1,1,1
"org.egothor.stemmer.Lift.liftUp(Row,List<Row>)",6,1,n/a,42,6,2,22,9
"org.egothor.stemmer.Lift.optimize(Trie)",9,0,n/a,20,1,1,11,2
"org.egothor.stemmer.MultiTrie.MultiTrie(DataInput)",6,0,n/a,14,1,1,7,2
"org.egothor.stemmer.MultiTrie.MultiTrie(boolean)",1,0,n/a,9,0,1,1,1
"org.egothor.stemmer.MultiTrie.add(CharSequence,CharSequence)",10,0,n/a,24,1,2,10,4
"org.egothor.stemmer.MultiTrie.getFully(CharSequence)",8,0,n/a,18,2,1,9,5
"org.egothor.stemmer.MultiTrie.getLastOnPath(CharSequence)",8,0,n/a,19,2,1,9,5
"org.egothor.stemmer.MultiTrie.printInfo(CharSequence)",1,0,n/a,11,0,1,3,2
"org.egothor.stemmer.MultiTrie.reduce(Reduce)",4,0,n/a,15,0,1,6,2
"org.egothor.stemmer.MultiTrie.store(DataOutput)",5,0,n/a,14,0,1,5,2
"org.egothor.stemmer.MultiTrie2.MultiTrie2(DataInput)",1,0,n/a,9,0,1,1,1
"org.egothor.stemmer.MultiTrie2.MultiTrie2(boolean)",1,0,n/a,9,0,1,1,1
"org.egothor.stemmer.MultiTrie2.add(CharSequence,CharSequence)",21,0,n/a,48,3,2,21,9
"org.egothor.stemmer.MultiTrie2.cannotFollow(char,char)",0,2,n/a,8,1,2,5,2
"org.egothor.stemmer.MultiTrie2.dashEven(CharSequence,int)",2,2,n/a,10,2,2,5,3
"org.egothor.stemmer.MultiTrie2.decompose(CharSequence)",8,1,n/a,33,2,1,20,8
"org.egothor.stemmer.MultiTrie2.getFully(CharSequence)",19,0,n/a,40,4,1,23,10
"org.egothor.stemmer.MultiTrie2.getLastOnPath(CharSequence)",19,0,n/a,42,4,1,23,10
"org.egothor.stemmer.MultiTrie2.lengthPP(CharSequence)",3,6,n/a,17,2,1,14,5
"org.egothor.stemmer.MultiTrie2.reduce(Reduce)",4,0,n/a,15,0,1,6,2
"org.egothor.stemmer.MultiTrie2.skip(CharSequence,int)",4,6,n/a,7,1,2,3,2
"org.egothor.stemmer.MultiTrie2.store(DataOutput)",1,0,n/a,10,0,1,1,1
"org.egothor.stemmer.Optimizer.Optimizer()",0,0,n/a,4,0,0,0,1
"org.egothor.stemmer.Optimizer.merge(Cell,Cell)",1,1,n/a,47,4,2,22,9
"org.egothor.stemmer.Optimizer.merge(Row,Row)",17,1,n/a,32,2,2,17,6
"org.egothor.stemmer.Optimizer.optimize(Trie)",15,0,n/a,35,3,1,25,5
"org.egothor.stemmer.Optimizer2.Optimizer2()",0,0,n/a,4,0,0,0,1
"org.egothor.stemmer.Optimizer2.merge(Cell,Cell)",1,0,n/a,18,1,2,5,4
"org.egothor.stemmer.Reduce.Reduce()",0,0,n/a,4,0,0,0,1
"org.egothor.stemmer.Reduce.Remap.Remap(Row,int[])",9,1,n/a,22,2,2,11,3
"org.egothor.stemmer.Reduce.optimize(Trie)",6,0,n/a,16,0,1,7,1
"org.egothor.stemmer.Reduce.removeGaps(int,List<Row>,List<Row>,int[])",10,2,n/a,14,2,4,10,4
"org.egothor.stemmer.Row.Row()",0,0,n/a,4,0,0,0,1
"org.egothor.stemmer.Row.Row(DataInput)",8,0,n/a,17,1,1,10,2
"org.egothor.stemmer.Row.Row(Row)",0,0,n/a,8,0,1,1,1
"org.egothor.stemmer.Row.at(Character)",1,10,n/a,3,0,1,1,1
"org.egothor.stemmer.Row.getCells()",5,0,n/a,17,2,0,8,4
"org.egothor.stemmer.Row.getCellsPnt()",5,0,n/a,17,2,0,8,3
"org.egothor.stemmer.Row.getCellsVal()",5,0,n/a,17,2,0,8,3
"org.egothor.stemmer.Row.getCmd(Character)",1,0,n/a,11,0,1,2,2
"org.egothor.stemmer.Row.getCnt(Character)",1,0,n/a,11,0,1,2,2
"org.egothor.stemmer.Row.getRef(Character)",1,0,n/a,11,0,1,2,2
"org.egothor.stemmer.Row.print()",7,0,n/a,11,1,0,6,2
"org.egothor.stemmer.Row.setCmd(Character,int)",3,0,n/a,17,1,2,7,3
"org.egothor.stemmer.Row.setRef(Character,int)",3,0,n/a,17,1,2,6,2
"org.egothor.stemmer.Row.store(DataOutput)",13,0,n/a,22,2,1,12,4
"org.egothor.stemmer.Row.uniformCmd(boolean)",4,0,n/a,40,5,1,20,8
"org.egothor.stemmer.TestCompile.assertTrie(Trie,String,boolean,boolean)",27,6,n/a,32,4,4,21,8
"org.egothor.stemmer.TestCompile.loadTrie(String)",9,3,n/a,13,1,1,8,2
"org.egothor.stemmer.TestCompile.testCompile()",10,0,n/a,10,0,0,8,1
"org.egothor.stemmer.TestCompile.testCompileBackwards()",10,0,n/a,10,0,0,8,1
"org.egothor.stemmer.TestCompile.testCompileMulti()",10,0,n/a,10,0,0,8,1
"org.egothor.stemmer.TestStemmer.assertTrieContents(Trie,String[],String[])",16,6,n/a,16,2,3,7,3
"org.egothor.stemmer.TestStemmer.testMultiTrie()",3,0,n/a,9,1,0,8,2
"org.egothor.stemmer.TestStemmer.testMultiTrie2()",3,0,n/a,13,1,0,8,2
"org.egothor.stemmer.TestStemmer.testMultiTrie2Backwards()",3,0,n/a,13,1,0,8,2
"org.egothor.stemmer.TestStemmer.testMultiTrieBackwards()",3,0,n/a,9,1,0,8,2
"org.egothor.stemmer.TestStemmer.testTrie()",8,0,n/a,12,1,0,11,2
"org.egothor.stemmer.TestStemmer.testTrieBackwards()",3,0,n/a,9,1,0,8,2
"org.egothor.stemmer.Trie.StrEnum.StrEnum(CharSequence,boolean)",1,4,n/a,16,1,2,6,2
"org.egothor.stemmer.Trie.StrEnum.length()",1,1,n/a,3,0,0,1,1
"org.egothor.stemmer.Trie.StrEnum.next()",1,8,n/a,5,0,0,3,1
"org.egothor.stemmer.Trie.Trie(DataInput)",8,0,n/a,16,1,1,10,3
"org.egothor.stemmer.Trie.Trie(boolean)",2,0,n/a,10,0,1,3,1
"org.egothor.stemmer.Trie.Trie(boolean,int,List<CharSequence>,List<Row>)",0,0,n/a,15,0,4,4,1
"org.egothor.stemmer.Trie.add(CharSequence,CharSequence)",18,0,n/a,37,2,2,24,7
"org.egothor.stemmer.Trie.getAll(CharSequence)",13,0,n/a,60,4,1,46,14
"org.egothor.stemmer.Trie.getCells()",1,1,n/a,11,0,0,4,2
"org.egothor.stemmer.Trie.getCellsPnt()",1,1,n/a,11,0,0,4,2
"org.egothor.stemmer.Trie.getCellsVal()",1,1,n/a,11,0,0,4,2
"org.egothor.stemmer.Trie.getFully(CharSequence)",13,0,n/a,39,3,1,28,8
"org.egothor.stemmer.Trie.getLastOnPath(CharSequence)",13,1,n/a,28,2,1,17,5
"org.egothor.stemmer.Trie.getRow(int)",2,8,n/a,12,1,1,3,3
"org.egothor.stemmer.Trie.printInfo(CharSequence)",6,0,n/a,5,0,1,1,1
"org.egothor.stemmer.Trie.reduce(Reduce)",1,0,n/a,9,0,1,1,1
"org.egothor.stemmer.Trie.store(DataOutput)",9,0,n/a,16,0,1,8,3
"org.tartarus.snowball.Among.Among(String,int,int,String,SnowballProgram)",6,3.557,n/a,18,2,5,10,3
"org.tartarus.snowball.SnowballProgram.SnowballProgram()",1,0,n/a,5,0,0,2,1
"org.tartarus.snowball.SnowballProgram.assign_to(StringBuilder)",2,0,n/a,6,0,1,3,1
"org.tartarus.snowball.SnowballProgram.copy_from(SnowballProgram)",0,23,n/a,9,0,1,6,1
"org.tartarus.snowball.SnowballProgram.eq_s(int,CharSequence)",1,35,n/a,10,1,2,10,4
"org.tartarus.snowball.SnowballProgram.eq_s(int,String)",1,35,n/a,6,0,2,1,1
"org.tartarus.snowball.SnowballProgram.eq_s_b(int,CharSequence)",1,210,n/a,10,1,2,10,4
"org.tartarus.snowball.SnowballProgram.eq_s_b(int,String)",1,210,n/a,6,0,2,1,1
"org.tartarus.snowball.SnowballProgram.eq_v(CharSequence)",2,0,n/a,4,0,1,1,1
"org.tartarus.snowball.SnowballProgram.eq_v(StringBuilder)",2,0,n/a,6,0,1,1,1
"org.tartarus.snowball.SnowballProgram.eq_v_b(CharSequence)",2,2,n/a,3,0,1,1,1
"org.tartarus.snowball.SnowballProgram.eq_v_b(StringBuilder)",2,2,n/a,5,0,1,1,1
"org.tartarus.snowball.SnowballProgram.find_among(Among[],int)",3,18,n/a,64,3,2,54,18
"org.tartarus.snowball.SnowballProgram.find_among_b(Among[],int)",3,149,n/a,62,3,2,54,18
"org.tartarus.snowball.SnowballProgram.getCurrent()",1,0,n/a,7,0,0,1,1
"org.tartarus.snowball.SnowballProgram.getCurrentBuffer()",0,2,n/a,17,0,0,1,1
"org.tartarus.snowball.SnowballProgram.getCurrentBufferLength()",0,3,n/a,8,0,0,1,1
"org.tartarus.snowball.SnowballProgram.in_grouping(char[],int,int)",0,92,n/a,10,0,3,10,5
"org.tartarus.snowball.SnowballProgram.in_grouping_b(char[],int,int)",0,51,n/a,10,0,3,10,5
"org.tartarus.snowball.SnowballProgram.in_range(int,int)",0,0,n/a,8,0,2,7,4
"org.tartarus.snowball.SnowballProgram.in_range_b(int,int)",0,0,n/a,8,0,2,7,4
"org.tartarus.snowball.SnowballProgram.insert(int,int,CharSequence)",1,15,n/a,6,0,3,5,3
"org.tartarus.snowball.SnowballProgram.insert(int,int,String)",1,15,n/a,6,0,3,1,1
"org.tartarus.snowball.SnowballProgram.insert(int,int,StringBuilder)",1,15,n/a,6,0,3,1,1
"org.tartarus.snowball.SnowballProgram.out_grouping(char[],int,int)",0,63,n/a,15,1,3,11,5
"org.tartarus.snowball.SnowballProgram.out_grouping_b(char[],int,int)",0,28,n/a,15,1,3,11,5
"org.tartarus.snowball.SnowballProgram.out_range(int,int)",0,0,n/a,8,0,2,7,4
"org.tartarus.snowball.SnowballProgram.out_range_b(int,int)",0,0,n/a,8,0,2,7,4
"org.tartarus.snowball.SnowballProgram.replace_s(int,int,CharSequence)",7,3,n/a,29,1,3,18,7
"org.tartarus.snowball.SnowballProgram.replace_s(int,int,String)",1,3,n/a,5,0,3,1,1
"org.tartarus.snowball.SnowballProgram.setCurrent(String)",2,1,n/a,12,0,1,6,1
"org.tartarus.snowball.SnowballProgram.setCurrent(char[],int)",0,1,n/a,13,0,2,6,1
"org.tartarus.snowball.SnowballProgram.slice_check()",1,2,n/a,15,1,0,2,4
"org.tartarus.snowball.SnowballProgram.slice_del()",1,322,n/a,4,0,0,1,1
"org.tartarus.snowball.SnowballProgram.slice_from(CharSequence)",2,358,n/a,5,0,1,2,1
"org.tartarus.snowball.SnowballProgram.slice_from(String)",1,358,n/a,6,0,1,1,1
"org.tartarus.snowball.SnowballProgram.slice_from(StringBuilder)",1,358,n/a,6,0,1,1,1
"org.tartarus.snowball.SnowballProgram.slice_to(StringBuilder)",3,3,n/a,9,0,1,5,1
"org.tartarus.snowball.SnowballProgram.stem()",n/a,1,23,n/a,n/a,0,n/a,n/a
"org.tartarus.snowball.TestApp.main(String[])",29,0,n/a,50,4,1,38,10
"org.tartarus.snowball.TestApp.usage()",1,2,n/a,4,0,0,1,1
"org.tartarus.snowball.ext.ArmenianStemmer.copy_from(ArmenianStemmer)",1,0,n/a,5,0,1,3,1
"org.tartarus.snowball.ext.ArmenianStemmer.equals(Object)",0,0,n/a,3,0,1,1,1
"org.tartarus.snowball.ext.ArmenianStemmer.hashCode()",2,0,n/a,3,0,0,1,1
"org.tartarus.snowball.ext.ArmenianStemmer.r_R2()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.ArmenianStemmer.r_adjective()",2,1,n/a,24,1,0,13,4
"org.tartarus.snowball.ext.ArmenianStemmer.r_ending()",3,1,n/a,29,1,0,15,5
"org.tartarus.snowball.ext.ArmenianStemmer.r_mark_regions()",4,1,n/a,81,4,0,50,18
"org.tartarus.snowball.ext.ArmenianStemmer.r_noun()",2,1,n/a,24,1,0,13,4
"org.tartarus.snowball.ext.ArmenianStemmer.r_verb()",2,1,n/a,24,1,0,13,4
"org.tartarus.snowball.ext.ArmenianStemmer.stem()",5,1,n/a,76,2,0,49,12
"org.tartarus.snowball.ext.BasqueStemmer.copy_from(BasqueStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.BasqueStemmer.equals(Object)",0,0,n/a,3,0,1,1,1
"org.tartarus.snowball.ext.BasqueStemmer.hashCode()",2,0,n/a,3,0,0,1,1
"org.tartarus.snowball.ext.BasqueStemmer.r_R1()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.BasqueStemmer.r_R2()",0,2,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.BasqueStemmer.r_RV()",0,3,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.BasqueStemmer.r_aditzak()",8,1,n/a,54,2,0,29,10
"org.tartarus.snowball.ext.BasqueStemmer.r_adjetiboak()",4,1,n/a,34,2,0,18,6
"org.tartarus.snowball.ext.BasqueStemmer.r_izenak()",14,1,n/a,84,2,0,46,16
"org.tartarus.snowball.ext.BasqueStemmer.r_mark_regions()",13,1,n/a,202,8,0,126,44
"org.tartarus.snowball.ext.BasqueStemmer.stem()",4,1,n/a,61,3,0,40,11
"org.tartarus.snowball.ext.CatalanStemmer.copy_from(CatalanStemmer)",1,0,n/a,5,0,1,3,1
"org.tartarus.snowball.ext.CatalanStemmer.equals(Object)",0,0,n/a,3,0,1,1,1
"org.tartarus.snowball.ext.CatalanStemmer.hashCode()",2,0,n/a,3,0,0,1,1
"org.tartarus.snowball.ext.CatalanStemmer.r_R1()",0,6,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.CatalanStemmer.r_R2()",0,4,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.CatalanStemmer.r_attached_pronoun()",3,1,n/a,29,2,0,15,5
"org.tartarus.snowball.ext.CatalanStemmer.r_cleaning()",13,1,n/a,99,4,0,60,19
"org.tartarus.snowball.ext.CatalanStemmer.r_mark_regions()",4,1,n/a,81,4,0,50,18
"org.tartarus.snowball.ext.CatalanStemmer.r_residual_suffix()",5,1,n/a,39,2,0,20,7
"org.tartarus.snowball.ext.CatalanStemmer.r_standard_suffix()",11,1,n/a,69,2,0,35,13
"org.tartarus.snowball.ext.CatalanStemmer.r_verb_suffix()",5,1,n/a,39,2,0,20,7
"org.tartarus.snowball.ext.CatalanStemmer.stem()",6,1,n/a,77,4,0,49,14
"org.tartarus.snowball.ext.DanishStemmer.copy_from(DanishStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.DanishStemmer.r_consonant_pair()",2,2,n/a,44,1,0,24,4
"org.tartarus.snowball.ext.DanishStemmer.r_main_suffix()",4,1,n/a,49,2,0,29,7
"org.tartarus.snowball.ext.DanishStemmer.r_mark_regions()",2,1,n/a,68,3,0,40,13
"org.tartarus.snowball.ext.DanishStemmer.r_other_suffix()",7,1,n/a,79,3,0,46,11
"org.tartarus.snowball.ext.DanishStemmer.r_undouble()",4,1,n/a,37,1,0,20,4
"org.tartarus.snowball.ext.DanishStemmer.stem()",5,1,n/a,62,2,0,39,11
"org.tartarus.snowball.ext.DutchStemmer.copy_from(DutchStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.DutchStemmer.r_R1()",0,4,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.DutchStemmer.r_R2()",0,7,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.DutchStemmer.r_e_ending()",5,2,n/a,37,1,0,17,5
"org.tartarus.snowball.ext.DutchStemmer.r_en_ending()",5,2,n/a,38,3,0,19,6
"org.tartarus.snowball.ext.DutchStemmer.r_mark_regions()",4,1,n/a,83,3,0,50,19
"org.tartarus.snowball.ext.DutchStemmer.r_postlude()",3,1,n/a,49,4,0,30,9
"org.tartarus.snowball.ext.DutchStemmer.r_prelude()",14,1,n/a,154,7,0,94,25
"org.tartarus.snowball.ext.DutchStemmer.r_standard_suffix()",36,1,n/a,297,7,0,159,49
"org.tartarus.snowball.ext.DutchStemmer.r_undouble()",2,3,n/a,25,1,0,12,3
"org.tartarus.snowball.ext.DutchStemmer.stem()",4,1,n/a,50,2,0,32,9
"org.tartarus.snowball.ext.EnglishStemmer.copy_from(EnglishStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.EnglishStemmer.r_R1()",0,4,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.EnglishStemmer.r_R2()",0,4,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_1a()",8,1,n/a,104,5,0,62,19
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_1b()",10,1,n/a,115,4,0,65,18
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_1c()",4,1,n/a,47,3,0,26,8
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_2()",20,1,n/a,113,2,0,64,22
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_3()",9,1,n/a,59,2,0,32,11
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_4()",6,1,n/a,53,4,0,30,10
"org.tartarus.snowball.ext.EnglishStemmer.r_Step_5()",8,1,n/a,73,5,0,40,13
"org.tartarus.snowball.ext.EnglishStemmer.r_exception1()",12,1,n/a,79,1,0,45,15
"org.tartarus.snowball.ext.EnglishStemmer.r_exception2()",1,1,n/a,18,1,0,7,3
"org.tartarus.snowball.ext.EnglishStemmer.r_mark_regions()",5,1,n/a,96,5,0,60,21
"org.tartarus.snowball.ext.EnglishStemmer.r_postlude()",2,1,n/a,49,5,0,29,8
"org.tartarus.snowball.ext.EnglishStemmer.r_prelude()",7,1,n/a,96,6,0,57,13
"org.tartarus.snowball.ext.EnglishStemmer.r_shortv()",5,2,n/a,40,3,0,21,9
"org.tartarus.snowball.ext.EnglishStemmer.stem()",12,1,n/a,169,6,0,108,31
"org.tartarus.snowball.ext.FinnishStemmer.copy_from(FinnishStemmer)",1,0,n/a,7,0,1,5,1
"org.tartarus.snowball.ext.FinnishStemmer.r_LONG()",1,2,n/a,8,1,0,3,2
"org.tartarus.snowball.ext.FinnishStemmer.r_R2()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.FinnishStemmer.r_VI()",2,0,n/a,13,1,0,5,3
"org.tartarus.snowball.ext.FinnishStemmer.r_case_ending()",13,1,n/a,148,5,0,84,28
"org.tartarus.snowball.ext.FinnishStemmer.r_i_plural()",2,1,n/a,31,1,0,17,3
"org.tartarus.snowball.ext.FinnishStemmer.r_mark_regions()",4,1,n/a,82,3,0,53,17
"org.tartarus.snowball.ext.FinnishStemmer.r_other_endings()",3,1,n/a,54,4,0,32,7
"org.tartarus.snowball.ext.FinnishStemmer.r_particle_etc()",4,1,n/a,52,2,0,30,8
"org.tartarus.snowball.ext.FinnishStemmer.r_possessive()",13,1,n/a,105,4,0,58,16
"org.tartarus.snowball.ext.FinnishStemmer.r_t_plural()",6,1,n/a,90,4,0,54,10
"org.tartarus.snowball.ext.FinnishStemmer.r_tidy()",16,1,n/a,168,4,0,96,23
"org.tartarus.snowball.ext.FinnishStemmer.stem()",8,1,n/a,112,4,0,71,20
"org.tartarus.snowball.ext.FrenchStemmer.copy_from(FrenchStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.FrenchStemmer.r_R1()",0,4,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.FrenchStemmer.r_R2()",0,20,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.FrenchStemmer.r_RV()",0,5,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.FrenchStemmer.r_i_verb_suffix()",3,1,n/a,45,2,0,28,6
"org.tartarus.snowball.ext.FrenchStemmer.r_mark_regions()",8,1,n/a,147,5,0,91,31
"org.tartarus.snowball.ext.FrenchStemmer.r_postlude()",4,1,n/a,54,4,0,33,10
"org.tartarus.snowball.ext.FrenchStemmer.r_prelude()",15,1,n/a,135,9,0,79,22
"org.tartarus.snowball.ext.FrenchStemmer.r_residual_suffix()",12,1,n/a,115,4,0,69,17
"org.tartarus.snowball.ext.FrenchStemmer.r_standard_suffix()",68,1,n/a,468,6,0,258,78
"org.tartarus.snowball.ext.FrenchStemmer.r_un_accent()",4,1,n/a,50,4,0,28,9
"org.tartarus.snowball.ext.FrenchStemmer.r_un_double()",2,1,n/a,25,1,0,12,3
"org.tartarus.snowball.ext.FrenchStemmer.r_verb_suffix()",7,1,n/a,74,3,0,44,10
"org.tartarus.snowball.ext.FrenchStemmer.stem()",13,1,n/a,155,7,0,97,26
"org.tartarus.snowball.ext.German2Stemmer.copy_from(German2Stemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.German2Stemmer.r_R1()",0,3,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.German2Stemmer.r_R2()",0,3,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.German2Stemmer.r_mark_regions()",4,1,n/a,99,3,0,58,21
"org.tartarus.snowball.ext.German2Stemmer.r_postlude()",6,1,n/a,64,4,0,39,12
"org.tartarus.snowball.ext.German2Stemmer.r_prelude()",12,1,n/a,147,7,0,89,26
"org.tartarus.snowball.ext.German2Stemmer.r_standard_suffix()",28,1,n/a,264,6,0,152,43
"org.tartarus.snowball.ext.German2Stemmer.stem()",4,1,n/a,50,2,0,32,9
"org.tartarus.snowball.ext.GermanStemmer.copy_from(GermanStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.GermanStemmer.r_R1()",0,3,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.GermanStemmer.r_R2()",0,3,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.GermanStemmer.r_mark_regions()",4,1,n/a,99,3,0,58,21
"org.tartarus.snowball.ext.GermanStemmer.r_postlude()",6,1,n/a,64,4,0,39,12
"org.tartarus.snowball.ext.GermanStemmer.r_prelude()",9,1,n/a,118,7,0,73,19
"org.tartarus.snowball.ext.GermanStemmer.r_standard_suffix()",28,1,n/a,264,6,0,152,43
"org.tartarus.snowball.ext.GermanStemmer.stem()",4,1,n/a,50,2,0,32,9
"org.tartarus.snowball.ext.HungarianStemmer.copy_from(HungarianStemmer)",1,0,n/a,4,0,1,2,1
"org.tartarus.snowball.ext.HungarianStemmer.r_R1()",0,10,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.HungarianStemmer.r_case()",4,1,n/a,25,1,0,10,4
"org.tartarus.snowball.ext.HungarianStemmer.r_case_other()",6,1,n/a,44,1,0,24,8
"org.tartarus.snowball.ext.HungarianStemmer.r_case_special()",5,1,n/a,39,1,0,21,7
"org.tartarus.snowball.ext.HungarianStemmer.r_double()",1,4,n/a,13,1,0,6,2
"org.tartarus.snowball.ext.HungarianStemmer.r_factive()",6,1,n/a,47,2,0,23,9
"org.tartarus.snowball.ext.HungarianStemmer.r_instrum()",6,1,n/a,47,2,0,23,9
"org.tartarus.snowball.ext.HungarianStemmer.r_mark_regions()",5,1,n/a,84,5,0,53,17
"org.tartarus.snowball.ext.HungarianStemmer.r_owned()",11,1,n/a,69,1,0,39,13
"org.tartarus.snowball.ext.HungarianStemmer.r_plur_owner()",31,1,n/a,169,1,0,99,33
"org.tartarus.snowball.ext.HungarianStemmer.r_plural()",9,1,n/a,59,1,0,33,11
"org.tartarus.snowball.ext.HungarianStemmer.r_sing_owner()",22,1,n/a,124,1,0,72,24
"org.tartarus.snowball.ext.HungarianStemmer.r_undouble()",1,2,n/a,25,2,0,11,4
"org.tartarus.snowball.ext.HungarianStemmer.r_v_ending()",4,1,n/a,34,1,0,18,6
"org.tartarus.snowball.ext.HungarianStemmer.stem()",10,1,n/a,117,2,0,74,21
"org.tartarus.snowball.ext.IrishStemmer.copy_from(IrishStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.IrishStemmer.equals(Object)",0,0,n/a,3,0,1,1,1
"org.tartarus.snowball.ext.IrishStemmer.hashCode()",2,0,n/a,3,0,0,1,1
"org.tartarus.snowball.ext.IrishStemmer.r_R1()",0,2,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.IrishStemmer.r_R2()",0,2,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.IrishStemmer.r_RV()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.IrishStemmer.r_deriv()",8,1,n/a,54,2,0,30,10
"org.tartarus.snowball.ext.IrishStemmer.r_initial_morph()",22,1,n/a,124,1,0,73,24
"org.tartarus.snowball.ext.IrishStemmer.r_mark_regions()",5,1,n/a,107,4,0,67,23
"org.tartarus.snowball.ext.IrishStemmer.r_noun_sfx()",5,1,n/a,39,2,0,20,7
"org.tartarus.snowball.ext.IrishStemmer.r_verb_sfx()",5,1,n/a,39,2,0,20,7
"org.tartarus.snowball.ext.IrishStemmer.stem()",5,1,n/a,62,2,0,39,11
"org.tartarus.snowball.ext.ItalianStemmer.copy_from(ItalianStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.ItalianStemmer.r_R1()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.ItalianStemmer.r_R2()",0,13,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.ItalianStemmer.r_RV()",0,5,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.ItalianStemmer.r_attached_pronoun()",5,1,n/a,40,1,0,20,7
"org.tartarus.snowball.ext.ItalianStemmer.r_mark_regions()",13,1,n/a,202,8,0,126,44
"org.tartarus.snowball.ext.ItalianStemmer.r_postlude()",3,1,n/a,49,4,0,30,9
"org.tartarus.snowball.ext.ItalianStemmer.r_prelude()",14,1,n/a,145,7,0,89,25
"org.tartarus.snowball.ext.ItalianStemmer.r_standard_suffix()",37,1,n/a,259,4,0,139,41
"org.tartarus.snowball.ext.ItalianStemmer.r_verb_suffix()",2,1,n/a,40,1,0,25,5
"org.tartarus.snowball.ext.ItalianStemmer.r_vowel_suffix()",10,1,n/a,74,2,0,39,10
"org.tartarus.snowball.ext.ItalianStemmer.stem()",7,1,n/a,88,4,0,56,16
"org.tartarus.snowball.ext.KpStemmer.copy_from(KpStemmer)",1,0,n/a,10,0,1,8,1
"org.tartarus.snowball.ext.KpStemmer.r_C()",2,17,n/a,26,3,0,14,4
"org.tartarus.snowball.ext.KpStemmer.r_Lose_infix()",4,1,n/a,90,3,0,53,16
"org.tartarus.snowball.ext.KpStemmer.r_Lose_prefix()",4,1,n/a,71,3,0,42,12
"org.tartarus.snowball.ext.KpStemmer.r_R1()",0,45,n/a,10,1,0,4,2
"org.tartarus.snowball.ext.KpStemmer.r_R2()",0,2,n/a,10,1,0,4,2
"org.tartarus.snowball.ext.KpStemmer.r_Step_1()",42,1,n/a,276,6,0,143,49
"org.tartarus.snowball.ext.KpStemmer.r_Step_1c()",9,2,n/a,80,4,0,40,13
"org.tartarus.snowball.ext.KpStemmer.r_Step_2()",50,1,n/a,295,4,0,150,51
"org.tartarus.snowball.ext.KpStemmer.r_Step_3()",29,1,n/a,154,2,0,74,29
"org.tartarus.snowball.ext.KpStemmer.r_Step_4()",31,1,n/a,191,4,0,95,36
"org.tartarus.snowball.ext.KpStemmer.r_Step_6()",23,1,n/a,130,1,0,76,25
"org.tartarus.snowball.ext.KpStemmer.r_Step_7()",4,1,n/a,35,1,0,19,6
"org.tartarus.snowball.ext.KpStemmer.r_V()",2,5,n/a,26,3,0,16,5
"org.tartarus.snowball.ext.KpStemmer.r_VX()",2,1,n/a,32,3,0,19,6
"org.tartarus.snowball.ext.KpStemmer.r_lengthen_V()",10,10,n/a,131,6,0,78,21
"org.tartarus.snowball.ext.KpStemmer.r_measure()",8,3,n/a,138,7,0,86,25
"org.tartarus.snowball.ext.KpStemmer.stem()",20,1,n/a,327,6,0,195,48
"org.tartarus.snowball.ext.LovinsStemmer.copy_from(LovinsStemmer)",1,0,n/a,3,0,1,1,1
"org.tartarus.snowball.ext.LovinsStemmer.r_A()",0,0,n/a,13,2,0,5,3
"org.tartarus.snowball.ext.LovinsStemmer.r_AA()",1,0,n/a,22,2,0,10,4
"org.tartarus.snowball.ext.LovinsStemmer.r_B()",0,0,n/a,13,2,0,5,3
"org.tartarus.snowball.ext.LovinsStemmer.r_BB()",2,0,n/a,45,3,0,24,7
"org.tartarus.snowball.ext.LovinsStemmer.r_C()",0,0,n/a,13,2,0,5,3
"org.tartarus.snowball.ext.LovinsStemmer.r_CC()",1,0,n/a,22,2,0,10,4
"org.tartarus.snowball.ext.LovinsStemmer.r_D()",0,0,n/a,13,2,0,5,3
"org.tartarus.snowball.ext.LovinsStemmer.r_E()",1,0,n/a,31,3,0,16,5
"org.tartarus.snowball.ext.LovinsStemmer.r_F()",1,0,n/a,31,3,0,16,5
"org.tartarus.snowball.ext.LovinsStemmer.r_G()",1,0,n/a,22,2,0,10,4
"org.tartarus.snowball.ext.LovinsStemmer.r_H()",2,0,n/a,36,3,0,20,7
"org.tartarus.snowball.ext.LovinsStemmer.r_I()",2,0,n/a,45,3,0,24,7
"org.tartarus.snowball.ext.LovinsStemmer.r_J()",2,0,n/a,45,3,0,24,7
"org.tartarus.snowball.ext.LovinsStemmer.r_K()",4,0,n/a,57,3,0,31,11
"org.tartarus.snowball.ext.LovinsStemmer.r_L()",4,0,n/a,74,5,0,40,11
"org.tartarus.snowball.ext.LovinsStemmer.r_M()",4,0,n/a,73,3,0,40,11
"org.tartarus.snowball.ext.LovinsStemmer.r_N()",1,0,n/a,59,5,0,32,11
"org.tartarus.snowball.ext.LovinsStemmer.r_O()",2,0,n/a,36,3,0,20,7
"org.tartarus.snowball.ext.LovinsStemmer.r_P()",1,0,n/a,31,3,0,16,5
"org.tartarus.snowball.ext.LovinsStemmer.r_Q()",2,0,n/a,58,3,0,31,9
"org.tartarus.snowball.ext.LovinsStemmer.r_R()",2,0,n/a,36,3,0,20,7
"org.tartarus.snowball.ext.LovinsStemmer.r_S()",3,0,n/a,51,4,0,28,9
"org.tartarus.snowball.ext.LovinsStemmer.r_T()",3,0,n/a,51,4,0,28,9
"org.tartarus.snowball.ext.LovinsStemmer.r_U()",4,0,n/a,54,3,0,32,11
"org.tartarus.snowball.ext.LovinsStemmer.r_V()",1,0,n/a,22,2,0,10,4
"org.tartarus.snowball.ext.LovinsStemmer.r_W()",2,0,n/a,45,3,0,24,7
"org.tartarus.snowball.ext.LovinsStemmer.r_X()",4,0,n/a,57,3,0,31,11
"org.tartarus.snowball.ext.LovinsStemmer.r_Y()",1,0,n/a,22,2,0,10,4
"org.tartarus.snowball.ext.LovinsStemmer.r_Z()",1,0,n/a,31,3,0,16,5
"org.tartarus.snowball.ext.LovinsStemmer.r_endings()",2,1,n/a,24,1,0,13,4
"org.tartarus.snowball.ext.LovinsStemmer.r_respell()",43,1,n/a,301,4,0,176,53
"org.tartarus.snowball.ext.LovinsStemmer.r_undouble()",2,1,n/a,25,1,0,12,3
"org.tartarus.snowball.ext.LovinsStemmer.stem()",3,1,n/a,40,2,0,25,7
"org.tartarus.snowball.ext.NorwegianStemmer.copy_from(NorwegianStemmer)",1,0,n/a,5,0,1,3,1
"org.tartarus.snowball.ext.NorwegianStemmer.r_consonant_pair()",2,1,n/a,44,1,0,24,4
"org.tartarus.snowball.ext.NorwegianStemmer.r_main_suffix()",7,1,n/a,73,4,0,44,12
"org.tartarus.snowball.ext.NorwegianStemmer.r_mark_regions()",2,1,n/a,68,3,0,40,13
"org.tartarus.snowball.ext.NorwegianStemmer.r_other_suffix()",2,1,n/a,40,1,0,24,5
"org.tartarus.snowball.ext.NorwegianStemmer.stem()",4,1,n/a,51,2,0,32,9
"org.tartarus.snowball.ext.PorterStemmer.copy_from(PorterStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.PorterStemmer.r_R1()",0,4,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.PorterStemmer.r_R2()",0,3,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.PorterStemmer.r_Step_1a()",4,1,n/a,34,1,0,19,6
"org.tartarus.snowball.ext.PorterStemmer.r_Step_1b()",10,1,n/a,115,4,0,65,18
"org.tartarus.snowball.ext.PorterStemmer.r_Step_1c()",4,1,n/a,45,3,0,26,9
"org.tartarus.snowball.ext.PorterStemmer.r_Step_2()",16,1,n/a,94,1,0,54,18
"org.tartarus.snowball.ext.PorterStemmer.r_Step_3()",5,1,n/a,39,1,0,21,7
"org.tartarus.snowball.ext.PorterStemmer.r_Step_4()",6,1,n/a,53,4,0,30,10
"org.tartarus.snowball.ext.PorterStemmer.r_Step_5a()",5,1,n/a,49,4,0,26,8
"org.tartarus.snowball.ext.PorterStemmer.r_Step_5b()",4,1,n/a,25,1,0,10,4
"org.tartarus.snowball.ext.PorterStemmer.r_shortv()",3,2,n/a,16,1,0,7,4
"org.tartarus.snowball.ext.PorterStemmer.stem()",19,1,n/a,298,6,0,188,52
"org.tartarus.snowball.ext.PortugueseStemmer.copy_from(PortugueseStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.PortugueseStemmer.r_R1()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.PortugueseStemmer.r_R2()",0,12,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.PortugueseStemmer.r_RV()",0,5,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.PortugueseStemmer.r_mark_regions()",13,1,n/a,202,8,0,126,44
"org.tartarus.snowball.ext.PortugueseStemmer.r_postlude()",3,1,n/a,49,4,0,30,9
"org.tartarus.snowball.ext.PortugueseStemmer.r_prelude()",3,1,n/a,49,4,0,30,9
"org.tartarus.snowball.ext.PortugueseStemmer.r_residual_form()",10,1,n/a,86,4,0,46,13
"org.tartarus.snowball.ext.PortugueseStemmer.r_residual_suffix()",3,1,n/a,29,2,0,15,5
"org.tartarus.snowball.ext.PortugueseStemmer.r_standard_suffix()",35,1,n/a,255,4,0,139,42
"org.tartarus.snowball.ext.PortugueseStemmer.r_verb_suffix()",2,1,n/a,40,1,0,25,5
"org.tartarus.snowball.ext.PortugueseStemmer.stem()",11,1,n/a,129,6,0,79,21
"org.tartarus.snowball.ext.RomanianStemmer.copy_from(RomanianStemmer)",1,0,n/a,7,0,1,5,1
"org.tartarus.snowball.ext.RomanianStemmer.r_R1()",0,2,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.RomanianStemmer.r_R2()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.RomanianStemmer.r_RV()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.RomanianStemmer.r_combo_suffix()",8,1,n/a,61,1,0,34,10
"org.tartarus.snowball.ext.RomanianStemmer.r_mark_regions()",13,1,n/a,202,8,0,126,44
"org.tartarus.snowball.ext.RomanianStemmer.r_postlude()",3,1,n/a,49,4,0,30,9
"org.tartarus.snowball.ext.RomanianStemmer.r_prelude()",7,1,n/a,75,7,0,45,13
"org.tartarus.snowball.ext.RomanianStemmer.r_standard_suffix()",7,1,n/a,67,3,0,37,11
"org.tartarus.snowball.ext.RomanianStemmer.r_step_0()",10,1,n/a,73,4,0,41,13
"org.tartarus.snowball.ext.RomanianStemmer.r_verb_suffix()",5,1,n/a,64,4,0,41,10
"org.tartarus.snowball.ext.RomanianStemmer.r_vowel_suffix()",3,1,n/a,29,1,0,15,5
"org.tartarus.snowball.ext.RomanianStemmer.stem()",7,1,n/a,99,4,0,63,18
"org.tartarus.snowball.ext.RussianStemmer.copy_from(RussianStemmer)",1,0,n/a,5,0,1,3,1
"org.tartarus.snowball.ext.RussianStemmer.r_R2()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.RussianStemmer.r_adjectival()",6,1,n/a,62,5,0,37,11
"org.tartarus.snowball.ext.RussianStemmer.r_adjective()",2,1,n/a,24,1,0,13,4
"org.tartarus.snowball.ext.RussianStemmer.r_derivational()",3,1,n/a,29,1,0,15,5
"org.tartarus.snowball.ext.RussianStemmer.r_mark_regions()",4,1,n/a,81,4,0,50,18
"org.tartarus.snowball.ext.RussianStemmer.r_noun()",2,1,n/a,24,1,0,13,4
"org.tartarus.snowball.ext.RussianStemmer.r_perfective_gerund()",5,1,n/a,48,4,0,28,9
"org.tartarus.snowball.ext.RussianStemmer.r_reflexive()",2,1,n/a,24,1,0,13,4
"org.tartarus.snowball.ext.RussianStemmer.r_tidy_up()",8,1,n/a,55,2,0,28,9
"org.tartarus.snowball.ext.RussianStemmer.r_verb()",5,1,n/a,48,4,0,28,9
"org.tartarus.snowball.ext.RussianStemmer.stem()",10,1,n/a,133,5,0,85,22
"org.tartarus.snowball.ext.SpanishStemmer.copy_from(SpanishStemmer)",1,0,n/a,6,0,1,4,1
"org.tartarus.snowball.ext.SpanishStemmer.r_R1()",0,1,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.SpanishStemmer.r_R2()",0,14,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.SpanishStemmer.r_RV()",0,4,n/a,7,1,0,3,2
"org.tartarus.snowball.ext.SpanishStemmer.r_attached_pronoun()",11,1,n/a,79,2,0,42,13
"org.tartarus.snowball.ext.SpanishStemmer.r_mark_regions()",13,1,n/a,202,8,0,126,44
"org.tartarus.snowball.ext.SpanishStemmer.r_postlude()",6,1,n/a,64,4,0,39,12
"org.tartarus.snowball.ext.SpanishStemmer.r_residual_suffix()",9,1,n/a,73,3,0,39,11
"org.tartarus.snowball.ext.SpanishStemmer.r_standard_suffix()",37,1,n/a,274,4,0,150,44
"org.tartarus.snowball.ext.SpanishStemmer.r_verb_suffix()",5,1,n/a,69,3,0,41,9
"org.tartarus.snowball.ext.SpanishStemmer.r_y_verb_suffix()",3,1,n/a,45,2,0,26,6
"org.tartarus.snowball.ext.SpanishStemmer.stem()",7,1,n/a,86,4,0,55,16
"org.tartarus.snowball.ext.SwedishStemmer.copy_from(SwedishStemmer)",1,0,n/a,5,0,1,3,1
"org.tartarus.snowball.ext.SwedishStemmer.r_consonant_pair()",2,1,n/a,42,1,0,24,4
"org.tartarus.snowball.ext.SwedishStemmer.r_main_suffix()",4,1,n/a,49,2,0,29,7
"org.tartarus.snowball.ext.SwedishStemmer.r_mark_regions()",2,1,n/a,68,3,0,40,13
"org.tartarus.snowball.ext.SwedishStemmer.r_other_suffix()",4,1,n/a,50,1,0,31,7
"org.tartarus.snowball.ext.SwedishStemmer.stem()",4,1,n/a,51,2,0,32,9
"org.tartarus.snowball.ext.TurkishStemmer.copy_from(TurkishStemmer)",1,0,n/a,5,0,1,3,1
"org.tartarus.snowball.ext.TurkishStemmer.r_append_U_to_stems_ending_with_d_or_g()",18,1,n/a,253,5,0,160,41
"org.tartarus.snowball.ext.TurkishStemmer.r_check_vowel_harmony()",17,20,n/a,272,5,0,178,53
"org.tartarus.snowball.ext.TurkishStemmer.r_is_reserved_word()",2,1,n/a,71,5,0,41,13
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_DA()",2,2,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_DAn()",2,1,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_DUr()",2,2,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_cAsInA()",1,1,n/a,9,1,0,3,2
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ki()",1,1,n/a,9,1,0,3,2
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_lAr()",2,19,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_lArI()",1,6,n/a,9,1,0,3,2
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_nA()",2,1,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_nU()",2,1,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_nUn()",3,2,n/a,20,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_nUz()",2,1,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ncA()",3,1,n/a,20,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ndA()",2,2,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ndAn()",2,1,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_possessives()",2,7,n/a,15,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_sU()",3,7,n/a,19,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_sUn()",2,3,n/a,14,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_sUnUz()",1,3,n/a,9,1,0,3,2
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_suffix_with_optional_U_vowel()",4,1,n/a,78,4,0,44,10
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_suffix_with_optional_n_consonant()",4,2,n/a,80,4,0,44,10
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_suffix_with_optional_s_consonant()",4,1,n/a,80,4,0,44,10
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_suffix_with_optional_y_consonant()",4,9,n/a,80,4,0,44,10
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yA()",3,1,n/a,20,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yDU()",3,3,n/a,20,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yU()",3,1,n/a,19,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yUm()",3,3,n/a,20,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yUz()",3,3,n/a,20,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_yken()",2,1,n/a,15,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ylA()",3,1,n/a,20,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ymUs_()",3,5,n/a,20,1,0,7,4
"org.tartarus.snowball.ext.TurkishStemmer.r_mark_ysA()",2,3,n/a,15,1,0,5,3
"org.tartarus.snowball.ext.TurkishStemmer.r_more_than_one_syllable_word()",1,1,n/a,46,6,0,27,8
"org.tartarus.snowball.ext.TurkishStemmer.r_post_process_last_consonants()",5,1,n/a,39,1,0,22,7
"org.tartarus.snowball.ext.TurkishStemmer.r_postlude()",3,1,n/a,44,3,0,26,7
"org.tartarus.snowball.ext.TurkishStemmer.r_stem_nominal_verb_suffixes()",35,1,n/a,354,6,0,220,67
"org.tartarus.snowball.ext.TurkishStemmer.r_stem_noun_suffixes()",77,1,n/a,719,8,0,416,107
"org.tartarus.snowball.ext.TurkishStemmer.r_stem_suffix_chain_before_ki()",31,21,n/a,278,8,0,155,40
"org.tartarus.snowball.ext.TurkishStemmer.stem()",4,1,n/a,46,2,0,24,8

Class,CBO,CSA,CSO,CSOA,Dcy*,DIT,Inner,LCOM,LOC,NCLOC,NOC,NOIC,NOOC,OCavg,Query,RFC,WMC
"conf.ConfLoader",1,0,0,0,0,0,0,0,19,2,0,0,0,n/a,0,0,0
"org.apache.lucene.LucenePackage",2,0,2,2,0,0,0,1,8,6,0,0,0,"1,00",1,2,2
"org.apache.lucene.analysis.ASCIIFoldingFilter",12,8,38,46,26,3,0,1,2.015,1.960,0,24,0,"60,00",2,10,240
"org.apache.lucene.analysis.Analyzer",250,1,9,10,29,0,0,5,116,63,33,0,0,"1,50",6,14,12
"org.apache.lucene.analysis.BaseCharFilter",8,4,13,17,13,2,0,1,107,54,4,6,1,"3,75",2,6,15
"org.apache.lucene.analysis.CachingTokenFilter",10,8,39,47,26,3,0,1,53,40,0,20,2,"2,00",1,10,10
"org.apache.lucene.analysis.CharArrayMap",21,10,31,41,13,0,0,7,405,306,1,0,0,"2,23",26,39,78
"org.apache.lucene.analysis.CharArrayMap.EmptyCharArrayMap",3,8,43,51,13,2,0,6,46,41,0,19,6,"1,86",6,9,13
"org.apache.lucene.analysis.CharArrayMap.EntryIterator",4,3,9,12,13,0,0,2,47,41,0,0,0,"1,22",6,10,11
"org.apache.lucene.analysis.CharArrayMap.EntrySet",3,1,6,7,13,0,0,4,36,35,0,0,0,"1,50",4,9,9
"org.apache.lucene.analysis.CharArrayMap.MapEntry",3,2,5,7,13,0,0,1,29,27,0,0,0,"1,40",4,6,7
"org.apache.lucene.analysis.CharArrayMap.UnmodifiableCharArrayMap",4,8,36,44,13,1,0,7,34,33,1,15,7,"1,00",6,10,8
"org.apache.lucene.analysis.CharArraySet",111,3,20,23,13,0,0,1,240,101,1,0,0,"1,50",14,36,30
"org.apache.lucene.analysis.CharArraySet.CharArraySetIterator",3,2,6,8,13,0,0,2,34,27,0,0,0,"1,17",3,6,7
"org.apache.lucene.analysis.CharFilter",6,1,9,10,1,1,0,1,49,33,2,0,0,"1,00",4,9,8
"org.apache.lucene.analysis.CharReader",9,1,9,10,1,1,0,3,40,34,0,0,0,"1,12",4,8,9
"org.apache.lucene.analysis.CharStream",18,0,1,1,0,0,0,1,19,3,2,0,0,n/a,1,1,0
"org.apache.lucene.analysis.CharTokenizer",16,18,54,72,33,3,0,2,333,169,4,22,2,"2,33",7,35,35
"org.apache.lucene.analysis.FilteringTokenFilter",11,8,40,48,27,3,0,1,77,49,5,22,1,"2,60",3,12,13
"org.apache.lucene.analysis.ISOLatin1AccentFilter",6,8,37,45,26,3,0,1,229,198,0,24,0,"14,33",1,8,43
"org.apache.lucene.analysis.KeywordAnalyzer",8,1,15,16,36,2,0,1,12,8,0,9,0,"1,00",1,4,2
"org.apache.lucene.analysis.KeywordMarkerFilter",44,8,37,45,40,3,0,1,52,25,0,24,0,"2,00",1,10,6
"org.apache.lucene.analysis.KeywordTokenizer",71,10,46,56,28,3,0,1,56,52,0,22,2,"1,57",1,18,11
"org.apache.lucene.analysis.LengthFilter",5,11,43,54,28,4,0,1,34,19,0,28,0,"1,00",1,5,3
"org.apache.lucene.analysis.LetterTokenizer",7,14,61,75,34,4,0,1,96,27,2,30,1,"1,00",1,10,7
"org.apache.lucene.analysis.LimitTokenCountAnalyzer",4,3,15,18,32,1,0,1,39,32,0,3,3,"1,00",5,11,6
"org.apache.lucene.analysis.LimitTokenCountFilter",4,7,37,44,26,3,0,1,28,21,0,22,1,"1,33",1,6,4
"org.apache.lucene.analysis.LowerCaseFilter",54,7,37,44,31,3,0,1,44,26,0,24,0,"1,67",1,9,5
"org.apache.lucene.analysis.LowerCaseTokenizer",13,14,68,82,35,5,0,1,99,27,0,31,1,"1,00",1,10,7
"org.apache.lucene.analysis.MappingCharFilter",9,9,21,30,16,3,0,1,104,96,0,9,1,"3,75",4,12,30
"org.apache.lucene.analysis.NormalizeCharMap",5,3,1,4,0,0,0,1,37,25,0,0,0,"5,00",0,1,5
"org.apache.lucene.analysis.NumericTokenStream",9,13,42,55,30,2,0,1,202,95,0,19,2,"1,92",7,25,23
"org.apache.lucene.analysis.PerFieldAnalyzerWrapper",3,3,17,20,30,1,0,1,99,51,0,3,3,"1,62",5,13,13
"org.apache.lucene.analysis.PorterStemFilter",10,8,36,44,28,3,0,1,40,16,0,24,0,"2,00",1,12,4
"org.apache.lucene.analysis.PorterStemmer",4,7,27,34,11,0,0,1,438,333,0,0,0,"5,74",15,29,155
"org.apache.lucene.analysis.ReusableAnalyzerBase",13,1,13,14,33,1,0,1,75,24,157,5,1,"1,33",4,8,4
"org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents",117,2,4,6,27,0,0,2,61,20,3,0,0,"1,00",2,5,4
"org.apache.lucene.analysis.SimpleAnalyzer",10,2,16,18,43,2,0,1,34,14,0,9,0,"1,00",1,5,3
"org.apache.lucene.analysis.StopAnalyzer",24,4,21,25,58,3,0,1,73,36,0,10,0,"1,00",1,11,5
"org.apache.lucene.analysis.StopFilter",53,10,55,65,41,4,0,3,224,65,0,28,0,"1,07",10,21,16
"org.apache.lucene.analysis.StopwordAnalyzerBase",54,3,19,22,49,2,0,3,117,44,35,9,0,"1,17",4,12,7
"org.apache.lucene.analysis.TeeSinkTokenFilter",10,7,41,48,28,3,0,1,130,62,0,22,1,"2,25",3,19,18
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkFilter",6,0,2,2,24,0,0,2,17,5,4,0,0,"1,00",1,2,1
"org.apache.lucene.analysis.TeeSinkTokenFilter.SinkTokenStream",8,8,37,45,26,2,0,3,48,44,0,19,2,"1,57",2,10,11
"org.apache.lucene.analysis.Token",59,10,106,116,32,3,8,1,533,259,0,25,6,"1,32",16,61,50
"org.apache.lucene.analysis.Token.TokenAttributeFactory",4,1,5,6,32,1,0,1,30,24,0,0,0,"1,75",3,6,7
"org.apache.lucene.analysis.TokenFilter",134,5,34,39,25,2,0,1,31,19,110,18,3,"1,00",0,8,4
"org.apache.lucene.analysis.TokenStream",425,4,30,34,24,1,0,5,145,33,30,18,0,"1,14",2,11,8
"org.apache.lucene.analysis.Tokenizer",155,5,39,44,26,2,0,1,70,37,24,20,1,"1,22",1,12,11
"org.apache.lucene.analysis.TypeTokenFilter",5,11,43,54,29,4,0,1,24,17,0,28,0,"1,00",1,6,3
"org.apache.lucene.analysis.WhitespaceAnalyzer",20,2,16,18,42,2,0,1,35,15,0,9,0,"1,00",1,5,3
"org.apache.lucene.analysis.WhitespaceTokenizer",15,14,61,75,34,4,0,1,90,27,0,30,1,"1,00",1,13,7
"org.apache.lucene.analysis.WordlistLoader",36,1,8,9,15,0,0,1,164,78,0,0,0,"2,12",8,11,17
"org.apache.lucene.analysis.ar.ArabicAnalyzer",13,6,24,30,72,3,0,2,126,46,0,10,0,"1,25",2,19,10
"org.apache.lucene.analysis.ar.ArabicAnalyzer.DefaultSetHolder",2,1,0,1,72,0,0,0,16,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.ar.ArabicLetterTokenizer",7,14,68,82,35,5,0,1,97,28,0,30,1,"1,00",1,14,7
"org.apache.lucene.analysis.ar.ArabicNormalizationFilter",6,7,36,43,26,3,0,1,20,16,0,24,0,"1,50",1,7,3
"org.apache.lucene.analysis.ar.ArabicNormalizer",1,17,1,18,2,0,0,1,73,51,0,0,0,"7,00",1,2,7
"org.apache.lucene.analysis.ar.ArabicStemFilter",6,8,36,44,27,3,0,1,28,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.ar.ArabicStemmer",2,13,5,18,2,0,0,1,118,73,0,0,0,"3,20",5,6,16
"org.apache.lucene.analysis.ar.TestArabicAnalyzer",1,0,7,7,14,0,0,7,64,45,0,0,0,"1,00",0,7,7
"org.apache.lucene.analysis.ar.TestArabicLetterTokenizer",1,0,2,2,1,0,0,2,20,16,0,0,0,"1,00",0,2,2
"org.apache.lucene.analysis.ar.TestArabicNormalizationFilter",4,0,16,16,35,0,0,2,62,59,0,0,0,"1,00",0,16,17
"org.apache.lucene.analysis.ar.TestArabicStemFilter",6,0,24,24,51,0,0,3,91,87,0,0,0,"1,00",0,25,25
"org.apache.lucene.analysis.bg.BulgarianAnalyzer",12,6,21,27,72,3,0,2,80,30,0,10,0,"1,20",2,13,6
"org.apache.lucene.analysis.bg.BulgarianAnalyzer.DefaultSetHolder",2,1,0,1,72,0,0,0,16,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.bg.BulgarianStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.bg.BulgarianStemmer",1,0,3,3,2,0,0,1,106,81,0,0,0,"9,00",3,4,27
"org.apache.lucene.analysis.bg.TestBulgarianAnalyzer",3,0,7,7,43,0,0,6,46,36,0,0,0,"1,00",0,9,7
"org.apache.lucene.analysis.bg.TestBulgarianStemmer",7,0,7,7,51,0,0,7,181,136,0,0,0,"1,00",0,9,8
"org.apache.lucene.analysis.br.BrazilianAnalyzer",15,6,27,33,72,3,0,2,158,81,0,10,0,"1,09",2,23,12
"org.apache.lucene.analysis.br.BrazilianAnalyzer.DefaultSetHolder",4,1,0,1,72,0,0,0,13,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.br.BrazilianStemFilter",6,9,37,46,27,3,0,1,55,28,0,24,0,"2,00",1,9,6
"org.apache.lucene.analysis.br.BrazilianStemmer",0,5,19,24,0,0,0,1,918,761,0,0,0,"12,63",14,19,240
"org.apache.lucene.analysis.br.TestBrazilianStemmer",7,0,12,12,54,0,0,7,165,154,0,0,0,"1,00",0,14,13
"org.apache.lucene.analysis.ca.CatalanAnalyzer",15,6,21,27,77,3,0,2,84,38,0,10,0,"1,40",2,16,7
"org.apache.lucene.analysis.ca.CatalanAnalyzer.DefaultSetHolder",2,1,0,1,77,0,0,0,17,11,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.ca.TestCatalanAnalyzer",2,0,5,5,43,0,0,5,34,26,0,0,0,"1,00",0,5,5
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter",9,94,40,134,29,3,0,6,31.484,31.285,0,8,2,"7,44",18,47,201
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilter.TextSegment",2,3,36,39,2,1,0,1,30,23,0,27,0,"1,00",2,9,6
"org.apache.lucene.analysis.charfilter.HTMLStripCharFilterTest",5,0,35,35,34,0,0,25,715,680,0,0,0,"2,11",1,36,78
"org.apache.lucene.analysis.cjk.CJKAnalyzer",9,4,21,25,70,3,0,2,77,40,0,10,0,"1,20",2,11,6
"org.apache.lucene.analysis.cjk.CJKAnalyzer.DefaultSetHolder",3,1,0,1,70,0,0,0,5,5,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.cjk.CJKBigramFilter",10,31,44,75,69,3,0,1,242,159,0,22,1,"2,90",4,26,29
"org.apache.lucene.analysis.cjk.CJKTokenizer",8,21,46,67,29,3,0,1,246,159,0,21,3,"4,43",1,18,31
"org.apache.lucene.analysis.cjk.CJKWidthFilter",7,9,37,46,27,3,0,1,80,59,0,24,0,"3,33",2,9,10
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer",12,1,17,18,76,0,0,6,208,189,0,0,0,"1,00",0,18,21
"org.apache.lucene.analysis.cjk.TestCJKAnalyzer.FakeStandardTokenizer",6,6,36,42,69,3,0,1,15,15,0,24,0,"1,50",1,6,3
"org.apache.lucene.analysis.cjk.TestCJKTokenizer",4,0,16,16,32,0,0,1,225,210,0,0,0,"1,12",1,16,18
"org.apache.lucene.analysis.cjk.TestCJKTokenizer.TestToken",1,4,0,4,0,0,0,0,6,6,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.cjk.TestCJKWidthFilter",4,1,4,5,35,0,0,2,47,36,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.cn.ChineseAnalyzer",3,1,14,15,34,2,0,1,24,9,0,9,0,"1,00",1,2,1
"org.apache.lucene.analysis.cn.ChineseFilter",7,8,36,44,39,3,0,1,59,36,0,24,0,"3,50",1,7,7
"org.apache.lucene.analysis.cn.ChineseTokenizer",7,16,48,64,28,3,0,1,118,87,0,21,3,"2,22",2,19,20
"org.apache.lucene.analysis.cn.TestChineseTokenizer",4,0,5,5,42,0,0,5,65,52,0,0,0,"1,20",0,7,6
"org.apache.lucene.analysis.cn.TestChineseTokenizer.JustChineseFilterAnalyzer",5,1,10,11,40,1,0,1,10,6,0,6,0,"1,00",1,2,1
"org.apache.lucene.analysis.cn.TestChineseTokenizer.JustChineseTokenizerAnalyzer",3,1,10,11,30,1,0,1,10,6,0,6,0,"1,00",1,1,1
"org.apache.lucene.analysis.cn.smart.AnalyzerProfile",3,1,2,3,1,0,0,1,59,47,0,0,0,"4,00",1,2,8
"org.apache.lucene.analysis.cn.smart.CharType",1,8,0,8,0,0,0,0,38,10,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.cn.smart.SentenceTokenizer",8,12,46,58,29,3,0,1,91,77,0,21,3,"1,86",1,19,13
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer",11,5,15,20,61,1,0,2,100,50,0,5,1,"1,83",3,14,11
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.DefaultSetHolder",5,1,1,2,61,0,0,1,23,16,0,0,0,"1,00",1,4,1
"org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer.SavedStreams",3,2,0,2,27,0,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.cn.smart.TestSmartChineseAnalyzer",8,0,20,20,38,0,0,7,189,144,0,0,0,"1,23",0,23,27
"org.apache.lucene.analysis.cn.smart.Utility",5,7,3,10,1,0,0,2,143,90,0,0,0,"9,00",3,3,27
"org.apache.lucene.analysis.cn.smart.WordSegmenter",3,2,2,4,7,0,0,1,53,31,0,0,0,"3,00",2,4,6
"org.apache.lucene.analysis.cn.smart.WordTokenFilter",9,14,37,51,29,3,0,1,65,46,0,22,1,"2,33",1,13,7
"org.apache.lucene.analysis.cn.smart.WordType",2,8,0,8,0,0,0,0,38,10,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.cn.smart.hhmm.AbstractDictionary",1,3,6,9,1,0,0,4,175,71,0,0,0,"1,67",6,6,10
"org.apache.lucene.analysis.cn.smart.hhmm.BiSegGraph",1,3,8,11,2,0,0,1,181,135,0,0,0,"2,88",5,8,23
"org.apache.lucene.analysis.cn.smart.hhmm.BigramDictionary",1,7,11,18,2,0,0,1,210,175,0,0,0,"2,82",5,11,31
"org.apache.lucene.analysis.cn.smart.hhmm.HHMMSegmenter",6,1,3,4,5,0,0,1,168,130,0,0,0,"7,67",3,5,23
"org.apache.lucene.analysis.cn.smart.hhmm.PathNode",0,2,3,5,0,0,0,1,51,38,0,0,0,"3,33",3,3,10
"org.apache.lucene.analysis.cn.smart.hhmm.SegGraph",0,2,7,9,0,0,0,1,110,70,0,0,0,"2,29",6,7,16
"org.apache.lucene.analysis.cn.smart.hhmm.SegToken",4,6,3,9,1,0,0,0,89,52,0,0,0,"4,33",2,3,13
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenFilter",3,0,1,1,3,0,0,1,44,27,0,0,0,"10,00",1,1,10
"org.apache.lucene.analysis.cn.smart.hhmm.SegTokenPair",1,4,3,7,1,0,0,0,62,46,0,0,0,"3,67",2,3,11
"org.apache.lucene.analysis.cn.smart.hhmm.WordDictionary",3,6,19,25,3,0,0,1,455,325,0,0,0,"3,37",11,21,64
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase",11,18,50,68,42,3,0,2,157,105,0,22,1,"1,40",2,26,21
"org.apache.lucene.analysis.compound.CompoundWordTokenFilterBase.CompoundToken",2,3,1,4,42,0,0,0,24,17,0,0,0,"2,00",0,3,2
"org.apache.lucene.analysis.compound.DictionaryCompoundWordTokenFilter",2,0,9,9,26,0,0,1,194,64,0,0,0,"1,89",0,9,17
"org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter",6,1,15,16,28,0,0,2,343,138,0,0,0,"1,93",4,19,29
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter",15,0,12,12,51,0,0,12,257,241,0,0,0,"1,06",0,18,19
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeFilter",5,6,36,42,27,3,0,1,15,15,0,24,0,"1,50",1,6,3
"org.apache.lucene.analysis.compound.TestCompoundWordTokenFilter.MockRetainAttributeImpl",2,2,13,15,25,1,2,1,18,18,0,4,0,"1,00",1,5,4
"org.apache.lucene.analysis.compound.hyphenation.ByteVector",1,4,11,15,1,0,0,1,88,65,0,0,0,"1,36",5,11,15
"org.apache.lucene.analysis.compound.hyphenation.CharVector",1,4,13,17,1,0,0,1,98,74,0,0,0,"1,31",6,14,17
"org.apache.lucene.analysis.compound.hyphenation.Hyphen",0,3,3,6,0,0,0,0,42,30,0,0,0,"1,33",1,3,4
"org.apache.lucene.analysis.compound.hyphenation.Hyphenation",2,1,3,4,1,0,0,1,26,12,0,0,0,"1,00",2,3,3
"org.apache.lucene.analysis.compound.hyphenation.HyphenationException",0,0,1,1,0,0,0,0,11,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.compound.hyphenation.HyphenationTree",4,5,15,20,1,0,0,1,417,257,0,0,0,"3,73",7,15,56
"org.apache.lucene.analysis.compound.hyphenation.PatternConsumer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.analysis.compound.hyphenation.PatternParser",1,11,21,32,1,0,0,7,350,292,0,0,0,"3,05",8,21,64
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree",2,9,23,32,3,0,0,3,417,280,0,0,0,"2,35",11,28,54
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator",2,4,7,11,3,0,0,1,135,113,0,0,0,"3,71",5,10,26
"org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator.Item",1,2,3,5,0,0,0,0,16,16,0,0,0,"1,00",1,3,3
"org.apache.lucene.analysis.cz.CzechAnalyzer",15,6,22,28,72,2,0,2,187,83,0,9,0,"1,44",2,23,13
"org.apache.lucene.analysis.cz.CzechAnalyzer.DefaultSetHolder",4,1,0,1,72,0,0,0,13,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.cz.CzechStemFilter",6,8,36,44,27,3,0,1,31,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.cz.CzechStemmer",1,0,4,4,2,0,0,1,137,117,0,0,0,"4,50",4,5,18
"org.apache.lucene.analysis.cz.TestCzechAnalyzer",4,0,8,8,44,0,0,5,72,47,0,0,0,"1,00",0,9,8
"org.apache.lucene.analysis.cz.TestCzechAnalyzer.UnreliableInputStream",1,0,1,1,0,0,0,1,11,7,0,0,0,"1,00",1,1,1
"org.apache.lucene.analysis.cz.TestCzechStemmer",6,0,9,9,51,0,0,9,235,183,0,0,0,"1,00",0,10,10
"org.apache.lucene.analysis.da.DanishAnalyzer",14,5,21,26,76,3,0,2,68,30,0,10,0,"1,20",2,14,6
"org.apache.lucene.analysis.da.DanishAnalyzer.DefaultSetHolder",5,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.da.TestDanishAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.de.GermanAnalyzer",17,6,27,33,76,3,0,2,178,81,0,10,0,"1,27",2,25,14
"org.apache.lucene.analysis.de.GermanAnalyzer.DefaultSetHolder",6,2,0,2,76,0,0,0,17,14,0,0,0,n/a,0,3,0
"org.apache.lucene.analysis.de.GermanLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.de.GermanLightStemmer",0,0,4,4,0,0,0,1,72,65,0,0,0,"4,75",4,4,19
"org.apache.lucene.analysis.de.GermanMinimalStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.de.GermanMinimalStemmer",0,0,1,1,0,0,0,1,35,28,0,0,0,"17,00",1,1,17
"org.apache.lucene.analysis.de.GermanNormalizationFilter",6,9,36,45,27,3,0,1,83,66,0,24,0,"8,00",1,9,16
"org.apache.lucene.analysis.de.GermanStemFilter",6,9,39,48,27,3,0,1,79,42,0,24,0,"1,80",1,11,9
"org.apache.lucene.analysis.de.GermanStemmer",0,2,7,9,0,0,0,1,239,172,0,0,0,"6,29",2,7,44
"org.apache.lucene.analysis.de.TestGermanAnalyzer",5,0,8,8,52,0,0,8,68,58,0,0,0,"1,00",0,10,8
"org.apache.lucene.analysis.de.TestGermanLightStemFilter",4,1,3,4,35,0,0,2,31,26,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.de.TestGermanMinimalStemFilter",4,1,4,5,35,0,0,2,42,36,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.de.TestGermanNormalizationFilter",5,1,5,6,35,0,0,2,46,33,0,0,0,"1,00",0,5,7
"org.apache.lucene.analysis.de.TestGermanStemFilter",5,1,4,5,42,0,0,2,41,32,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.el.GreekAnalyzer",9,4,22,26,70,3,0,2,91,32,0,10,0,"1,33",2,12,8
"org.apache.lucene.analysis.el.GreekAnalyzer.DefaultSetHolder",2,1,0,1,70,0,0,0,12,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.el.GreekAnalyzerTest",2,0,5,5,31,0,0,4,79,41,0,0,0,"1,00",0,5,5
"org.apache.lucene.analysis.el.GreekLowerCaseFilter",7,7,38,45,31,3,0,1,93,63,0,24,0,"4,00",2,10,16
"org.apache.lucene.analysis.el.GreekStemFilter",6,8,36,44,27,3,0,1,34,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.el.GreekStemmer",2,16,27,43,14,0,0,1,693,681,0,0,0,"4,89",27,28,132
"org.apache.lucene.analysis.el.TestGreekStemmer",4,1,7,8,35,0,0,2,429,367,0,0,0,"1,00",0,7,8
"org.apache.lucene.analysis.en.EnglishAnalyzer",14,4,21,25,74,3,0,2,69,31,0,10,0,"1,40",2,15,7
"org.apache.lucene.analysis.en.EnglishAnalyzer.DefaultSetHolder",2,1,0,1,69,0,0,0,7,3,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.en.EnglishMinimalStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.en.EnglishMinimalStemmer",0,0,1,1,0,0,0,1,26,19,0,0,0,"7,00",1,1,7
"org.apache.lucene.analysis.en.EnglishPossessiveFilter",7,7,37,44,27,3,0,1,41,27,0,24,0,"1,67",1,9,5
"org.apache.lucene.analysis.en.KStemData1",0,1,1,2,0,0,0,0,709,706,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.KStemData2",0,1,1,2,0,0,0,0,708,706,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.KStemData3",0,1,1,2,0,0,0,0,708,706,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.KStemData4",0,1,1,2,0,0,0,0,708,706,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.KStemData5",0,1,1,2,0,0,0,0,708,706,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.KStemData6",0,1,1,2,0,0,0,0,708,706,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.KStemData7",0,1,1,2,0,0,0,0,708,706,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.KStemData8",0,1,1,2,0,0,0,0,607,605,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.KStemFilter",6,8,36,44,27,3,0,1,32,19,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.en.KStemmer",5,16,43,59,16,0,0,1,1.265,973,0,0,0,"5,26",23,58,226
"org.apache.lucene.analysis.en.KStemmer.DictEntry",1,2,1,3,0,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.en.TestEnglishAnalyzer",2,0,4,4,43,0,0,4,32,24,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.en.TestEnglishMinimalStemFilter",4,1,3,4,35,0,0,2,39,34,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.en.TestKStemmer",4,1,3,4,35,0,0,2,59,25,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.es.SpanishAnalyzer",14,5,21,26,76,3,0,2,79,34,0,10,0,"1,40",2,15,7
"org.apache.lucene.analysis.es.SpanishAnalyzer.DefaultSetHolder",5,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.es.SpanishLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.es.SpanishLightStemmer",0,0,1,1,0,0,0,1,51,44,0,0,0,"13,00",1,1,13
"org.apache.lucene.analysis.es.TestSpanishAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.es.TestSpanishLightStemFilter",4,1,3,4,35,0,0,2,31,26,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.eu.BasqueAnalyzer",14,5,21,26,76,3,0,2,68,30,0,10,0,"1,20",2,14,6
"org.apache.lucene.analysis.eu.BasqueAnalyzer.DefaultSetHolder",2,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.eu.TestBasqueAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.fa.PersianAnalyzer",14,5,24,29,73,3,0,2,114,47,0,9,1,"1,25",3,19,10
"org.apache.lucene.analysis.fa.PersianAnalyzer.DefaultSetHolder",2,1,0,1,73,0,0,0,16,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.fa.PersianCharFilter",3,1,11,12,2,2,0,1,22,18,0,6,1,"2,50",1,4,5
"org.apache.lucene.analysis.fa.PersianNormalizationFilter",5,7,36,43,26,3,0,1,22,17,0,24,0,"1,50",1,7,3
"org.apache.lucene.analysis.fa.PersianNormalizer",1,9,1,10,2,0,0,1,55,35,0,0,0,"7,00",1,2,7
"org.apache.lucene.analysis.fa.TestPersianAnalyzer",2,0,8,8,43,0,0,8,194,94,0,0,0,"1,00",0,8,8
"org.apache.lucene.analysis.fa.TestPersianNormalizationFilter",5,0,8,8,43,0,0,2,41,37,0,0,0,"1,00",0,8,9
"org.apache.lucene.analysis.fi.FinnishAnalyzer",14,5,21,26,76,3,0,2,68,30,0,10,0,"1,20",2,14,6
"org.apache.lucene.analysis.fi.FinnishAnalyzer.DefaultSetHolder",5,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.fi.FinnishLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.fi.FinnishLightStemmer",1,0,7,7,2,0,0,1,169,162,0,0,0,"7,71",7,9,54
"org.apache.lucene.analysis.fi.TestFinnishAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.fi.TestFinnishLightStemFilter",4,1,3,4,35,0,0,2,31,26,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.fr.ElisionFilter",10,9,42,51,39,3,0,1,106,63,0,24,0,"1,62",1,16,13
"org.apache.lucene.analysis.fr.FrenchAnalyzer",16,6,26,32,74,3,0,2,191,98,0,10,0,"1,50",2,23,15
"org.apache.lucene.analysis.fr.FrenchAnalyzer.DefaultSetHolder",6,2,0,2,74,0,0,0,18,15,0,0,0,n/a,0,3,0
"org.apache.lucene.analysis.fr.FrenchLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.fr.FrenchLightStemmer",1,0,2,2,2,0,0,1,176,168,0,0,0,"25,50",2,4,51
"org.apache.lucene.analysis.fr.FrenchMinimalStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.fr.FrenchMinimalStemmer",0,0,1,1,0,0,0,1,24,17,0,0,0,"9,00",1,1,9
"org.apache.lucene.analysis.fr.FrenchStemFilter",5,9,39,48,27,3,0,1,75,38,0,24,0,"1,80",1,11,9
"org.apache.lucene.analysis.fr.FrenchStemmer",1,8,20,28,1,0,0,1,633,454,0,0,0,"5,05",10,20,101
"org.apache.lucene.analysis.fr.TestElision",10,0,3,3,70,0,0,2,33,30,0,0,0,"1,25",1,6,5
"org.apache.lucene.analysis.fr.TestFrenchAnalyzer",3,0,10,10,43,0,0,9,220,174,0,0,0,"1,00",0,11,10
"org.apache.lucene.analysis.fr.TestFrenchLightStemFilter",4,1,4,5,35,0,0,2,108,98,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.fr.TestFrenchMinimalStemFilter",4,1,4,5,35,0,0,2,42,36,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.ga.IrishAnalyzer",15,7,21,28,77,3,0,2,87,44,0,10,0,"1,20",2,15,6
"org.apache.lucene.analysis.ga.IrishAnalyzer.DefaultSetHolder",3,1,0,1,77,0,0,0,17,11,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.ga.IrishLowerCaseFilter",5,6,37,43,26,3,0,1,55,47,0,24,0,"3,00",2,9,9
"org.apache.lucene.analysis.ga.TestIrishAnalyzer",2,0,6,6,43,0,0,6,41,32,0,0,0,"1,00",0,6,6
"org.apache.lucene.analysis.ga.TestIrishLowerCaseFilter",5,0,2,2,35,0,0,2,25,19,0,0,0,"1,00",0,2,3
"org.apache.lucene.analysis.gl.GalicianAnalyzer",12,5,21,26,72,3,0,2,68,30,0,10,0,"1,20",2,13,6
"org.apache.lucene.analysis.gl.GalicianAnalyzer.DefaultSetHolder",4,1,0,1,72,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.gl.GalicianMinimalStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.gl.GalicianMinimalStemmer",2,1,1,2,20,1,0,1,15,7,0,0,0,"1,00",1,3,1
"org.apache.lucene.analysis.gl.GalicianStemFilter",6,8,36,44,27,3,0,1,31,21,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.gl.GalicianStemmer",3,7,1,8,20,1,0,1,52,40,0,0,0,"9,00",1,3,9
"org.apache.lucene.analysis.gl.TestGalicianAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.gl.TestGalicianMinimalStemFilter",4,1,4,5,35,0,0,2,36,32,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.gl.TestGalicianStemFilter",7,1,2,3,70,0,0,2,28,24,0,0,0,"1,00",0,2,4
"org.apache.lucene.analysis.hi.HindiAnalyzer",13,6,21,27,74,3,0,2,86,37,0,10,0,"1,40",2,15,7
"org.apache.lucene.analysis.hi.HindiAnalyzer.DefaultSetHolder",2,1,0,1,74,0,0,0,16,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.hi.HindiNormalizationFilter",6,8,36,44,27,3,0,1,29,18,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.hi.HindiNormalizer",1,0,1,1,2,0,0,1,158,124,0,0,0,"38,00",1,2,38
"org.apache.lucene.analysis.hi.HindiStemFilter",6,8,36,44,27,3,0,1,21,18,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.hi.HindiStemmer",1,0,1,1,2,0,0,1,96,82,0,0,0,"6,00",1,2,6
"org.apache.lucene.analysis.hi.TestHindiAnalyzer",2,0,4,4,43,0,0,4,26,19,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.hi.TestHindiNormalizer",5,0,4,4,36,0,0,2,48,37,0,0,0,"1,00",0,4,5
"org.apache.lucene.analysis.hi.TestHindiStemmer",5,0,6,6,36,0,0,2,63,46,0,0,0,"1,00",0,6,7
"org.apache.lucene.analysis.hu.HungarianAnalyzer",14,5,21,26,76,3,0,2,68,30,0,10,0,"1,20",2,14,6
"org.apache.lucene.analysis.hu.HungarianAnalyzer.DefaultSetHolder",5,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.hu.HungarianLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.hu.HungarianLightStemmer",1,0,6,6,2,0,0,1,162,155,0,0,0,"8,00",6,7,48
"org.apache.lucene.analysis.hu.TestHungarianAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.hu.TestHungarianLightStemFilter",4,1,2,3,35,0,0,2,27,23,0,0,0,"1,00",0,2,4
"org.apache.lucene.analysis.hunspell.HunspellAffix",0,7,13,20,0,0,0,6,119,49,0,0,0,"1,00",7,13,13
"org.apache.lucene.analysis.hunspell.HunspellDictionary",7,16,14,30,18,0,0,3,288,174,0,0,0,"2,71",8,19,38
"org.apache.lucene.analysis.hunspell.HunspellDictionary.DoubleASCIIFlagParsingStrategy",2,0,3,3,1,1,0,1,24,15,0,1,0,"3,00",1,1,3
"org.apache.lucene.analysis.hunspell.HunspellDictionary.FlagParsingStrategy",4,0,2,2,0,0,0,1,21,6,3,0,0,"1,00",2,2,1
"org.apache.lucene.analysis.hunspell.HunspellDictionary.NumFlagParsingStrategy",3,0,3,3,2,1,0,1,18,10,0,1,0,"2,00",1,1,2
"org.apache.lucene.analysis.hunspell.HunspellDictionary.SimpleFlagParsingStrategy",2,0,3,3,1,1,0,1,12,5,0,1,0,"1,00",1,1,1
"org.apache.lucene.analysis.hunspell.HunspellDictionaryTest",0,0,1,1,0,0,0,1,13,13,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.hunspell.HunspellStemFilter",9,12,38,50,29,3,0,1,75,50,0,22,1,"2,50",1,17,10
"org.apache.lucene.analysis.hunspell.HunspellStemFilterTest",6,1,5,6,51,0,0,1,47,42,0,0,0,"1,00",1,5,7
"org.apache.lucene.analysis.hunspell.HunspellStemmer",5,4,10,14,15,0,0,1,232,160,0,0,0,"4,00",7,19,40
"org.apache.lucene.analysis.hunspell.HunspellStemmer.Stem",2,4,8,12,0,0,0,3,70,31,0,0,0,"1,00",5,8,8
"org.apache.lucene.analysis.hunspell.HunspellStemmerTest",0,1,7,8,0,0,0,1,72,72,0,0,0,"1,00",0,7,7
"org.apache.lucene.analysis.hunspell.HunspellWord",0,1,4,5,0,0,0,1,37,15,0,0,0,"1,00",2,4,4
"org.apache.lucene.analysis.hy.ArmenianAnalyzer",14,5,21,26,76,3,0,2,68,30,0,10,0,"1,20",2,14,6
"org.apache.lucene.analysis.hy.ArmenianAnalyzer.DefaultSetHolder",2,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.hy.TestArmenianAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.icu.GenerateHTMLStripCharFilterSupplementaryMacros",0,4,3,7,0,0,0,1,76,72,0,0,0,"3,33",0,3,10
"org.apache.lucene.analysis.icu.GenerateJFlexSupplementaryMacros",0,4,3,7,0,0,0,1,78,74,0,0,0,"2,67",0,3,8
"org.apache.lucene.analysis.icu.ICUFoldingFilter",1,1,1,2,25,0,0,0,50,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.icu.ICUNormalizer2Filter",5,8,37,45,26,3,0,1,60,25,0,24,0,"1,67",1,8,5
"org.apache.lucene.analysis.icu.ICUTransformFilter",5,9,36,45,27,3,0,1,74,30,0,24,0,"2,50",1,6,5
"org.apache.lucene.analysis.icu.ICUTransformFilter.ReplaceableTermAttribute",2,3,10,13,2,0,0,2,61,51,0,0,0,"1,20",5,13,12
"org.apache.lucene.analysis.icu.RBBIRuleCompiler",1,0,3,3,1,0,0,1,62,49,0,0,0,"2,25",1,3,9
"org.apache.lucene.analysis.icu.TestICUFoldingFilter",4,1,3,4,35,0,0,2,54,37,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.icu.TestICUNormalizer2Filter",4,1,4,5,35,0,0,3,55,43,0,0,0,"1,00",0,4,7
"org.apache.lucene.analysis.icu.TestICUTransformFilter",5,0,9,9,35,0,0,5,71,67,0,0,0,"1,00",0,10,11
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper",2,4,6,10,2,0,0,5,46,24,2,0,0,"1,50",4,8,3
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.BIWrapper",1,6,11,17,2,1,0,1,52,43,0,1,0,"1,67",4,6,10
"org.apache.lucene.analysis.icu.segmentation.BreakIteratorWrapper.RBBIWrapper",1,5,10,15,2,1,0,1,26,22,0,1,0,"1,00",3,5,5
"org.apache.lucene.analysis.icu.segmentation.CharArrayIterator",0,5,14,19,0,0,0,1,83,72,0,0,0,"1,36",13,14,19
"org.apache.lucene.analysis.icu.segmentation.CompositeBreakIterator",0,5,7,12,0,0,0,1,95,49,0,0,0,"1,71",5,7,12
"org.apache.lucene.analysis.icu.segmentation.DefaultICUTokenizerConfig",1,12,3,15,69,0,0,3,85,58,0,0,0,"5,33",3,3,16
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizer",8,16,49,65,30,3,0,1,165,101,0,21,3,"2,30",4,20,23
"org.apache.lucene.analysis.icu.segmentation.ICUTokenizerConfig",0,0,2,2,0,0,0,2,12,4,0,0,0,n/a,2,2,0
"org.apache.lucene.analysis.icu.segmentation.LaoBreakIterator",0,7,14,21,0,0,0,5,175,136,0,0,0,"2,07",10,14,29
"org.apache.lucene.analysis.icu.segmentation.ScriptIterator",1,8,7,15,1,0,0,1,120,63,0,0,0,"1,86",6,7,13
"org.apache.lucene.analysis.icu.segmentation.TestCharArrayIterator",1,0,7,7,1,0,0,7,78,69,0,0,0,"1,00",0,7,7
"org.apache.lucene.analysis.icu.segmentation.TestICUTokenizer",5,1,29,30,35,0,0,3,183,163,0,0,0,"1,03",0,29,31
"org.apache.lucene.analysis.icu.segmentation.TestLaoBreakIterator",1,1,6,7,1,0,0,1,52,49,0,0,0,"1,67",1,6,10
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.lucene.analysis.icu.tokenattributes.ScriptAttributeImpl",2,2,16,18,24,1,1,1,47,42,0,3,1,"1,22",5,10,11
"org.apache.lucene.analysis.id.IndonesianAnalyzer",12,5,21,26,72,3,0,2,72,30,0,10,0,"1,20",2,13,6
"org.apache.lucene.analysis.id.IndonesianAnalyzer.DefaultSetHolder",2,1,0,1,72,0,0,0,16,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.id.IndonesianStemFilter",6,9,37,46,27,3,0,1,38,26,0,24,0,"1,67",1,9,5
"org.apache.lucene.analysis.id.IndonesianStemmer",1,9,8,17,2,0,0,1,216,202,0,0,0,"6,00",8,11,48
"org.apache.lucene.analysis.id.TestIndonesianAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.id.TestIndonesianStemmer",4,2,5,7,35,0,0,3,108,100,0,0,0,"1,00",0,5,8
"org.apache.lucene.analysis.in.IndicNormalizationFilter",6,7,36,43,26,3,0,1,20,16,0,24,0,"1,50",1,7,3
"org.apache.lucene.analysis.in.IndicNormalizer",3,2,3,5,3,0,0,1,247,144,0,0,0,"6,00",3,5,18
"org.apache.lucene.analysis.in.IndicNormalizer.ScriptData",1,3,1,4,0,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.in.IndicTokenizer",5,14,58,72,34,4,0,1,23,19,0,30,1,"1,00",1,7,4
"org.apache.lucene.analysis.in.TestIndicNormalizer",5,0,3,3,36,0,0,2,33,26,0,0,0,"1,00",0,3,4
"org.apache.lucene.analysis.it.ItalianAnalyzer",15,6,21,27,77,3,0,2,90,43,0,10,0,"1,60",2,16,8
"org.apache.lucene.analysis.it.ItalianAnalyzer.DefaultSetHolder",5,1,0,1,77,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.it.ItalianLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.it.ItalianLightStemmer",0,0,1,1,0,0,0,1,59,52,0,0,0,"16,00",1,1,16
"org.apache.lucene.analysis.it.TestItalianAnalyzer",3,0,6,6,43,0,0,6,40,31,0,0,0,"1,00",0,6,6
"org.apache.lucene.analysis.it.TestItalianLightStemFilter",4,1,3,4,35,0,0,2,31,26,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.ja.GraphvizFormatter",4,6,8,14,33,0,0,2,124,112,0,0,0,"2,00",5,12,16
"org.apache.lucene.analysis.ja.JapaneseAnalyzer",12,6,21,27,97,3,0,3,35,31,0,10,0,"1,00",3,9,5
"org.apache.lucene.analysis.ja.JapaneseAnalyzer.DefaultSetHolder",3,2,0,2,97,0,0,0,22,17,0,0,0,n/a,0,1,1
"org.apache.lucene.analysis.ja.JapaneseBaseFormFilter",7,8,36,44,31,3,0,1,32,22,0,24,0,"2,50",1,9,5
"org.apache.lucene.analysis.ja.JapaneseKatakanaStemFilter",6,10,39,49,27,3,0,1,62,45,0,24,0,"2,40",3,11,12
"org.apache.lucene.analysis.ja.JapanesePartOfSpeechStopFilter",5,10,42,52,32,4,0,1,16,13,0,28,0,"1,00",1,5,2
"org.apache.lucene.analysis.ja.JapaneseReadingFormFilter",7,8,37,45,31,3,0,1,33,28,0,24,0,"2,00",1,10,6
"org.apache.lucene.analysis.ja.JapaneseTokenizer",24,46,54,100,85,3,0,1,839,641,0,21,3,"8,27",5,57,124
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Mode",7,3,0,3,0,n/a,0,0,21,5,n/a,0,0,n/a,0,0,0
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Position",6,13,5,18,12,0,0,1,78,59,0,0,0,"1,40",0,6,7
"org.apache.lucene.analysis.ja.JapaneseTokenizer.Type",3,3,0,3,0,n/a,0,0,5,5,n/a,0,0,n/a,0,0,0
"org.apache.lucene.analysis.ja.JapaneseTokenizer.WrappedPositionArray",6,4,7,11,13,0,0,1,93,78,0,0,0,"2,57",4,9,18
"org.apache.lucene.analysis.ja.TestExtendedMode",8,1,4,5,42,0,0,1,35,31,0,0,0,"1,40",0,9,7
"org.apache.lucene.analysis.ja.TestJapaneseAnalyzer",2,0,9,9,31,0,0,3,144,110,0,0,0,"1,00",0,10,9
"org.apache.lucene.analysis.ja.TestJapaneseBaseFormFilter",4,1,4,5,35,0,0,2,31,31,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.ja.TestJapaneseKatakanaStemFilter",4,1,4,5,35,0,0,2,51,31,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.ja.TestJapaneseReadingFormFilter",4,2,4,6,35,0,0,2,43,40,0,0,0,"1,00",0,4,7
"org.apache.lucene.analysis.ja.TestJapaneseTokenizer",13,4,40,44,75,0,0,4,535,420,0,0,0,"1,47",1,49,66
"org.apache.lucene.analysis.ja.TestSearchMode",6,2,1,3,35,0,0,1,49,46,0,0,0,"4,00",0,1,8
"org.apache.lucene.analysis.ja.Token",10,8,18,26,2,0,0,4,130,72,0,0,0,"1,00",16,25,18
"org.apache.lucene.analysis.ja.dict.BinaryDictionary",7,16,20,36,28,0,0,3,234,214,0,0,0,"2,00",18,24,40
"org.apache.lucene.analysis.ja.dict.CharacterDefinition",11,19,7,26,29,0,0,3,64,60,0,0,0,"1,14",6,13,8
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.CharacterClass",1,12,0,12,0,n/a,0,0,4,3,n/a,0,0,n/a,0,0,0
"org.apache.lucene.analysis.ja.dict.CharacterDefinition.SingletonHolder",1,1,0,1,29,0,0,0,10,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.ja.dict.ConnectionCosts",10,4,3,7,28,0,0,2,43,40,0,0,0,"1,67",2,6,5
"org.apache.lucene.analysis.ja.dict.ConnectionCosts.SingletonHolder",1,1,0,1,28,0,0,0,10,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.ja.dict.Dictionary",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,9,n/a
"org.apache.lucene.analysis.ja.dict.TestTokenInfoDictionary",7,0,1,1,51,0,0,1,69,63,0,0,0,"7,00",0,8,7
"org.apache.lucene.analysis.ja.dict.TokenInfoDictionary",7,2,3,5,49,0,0,2,31,26,0,0,0,"1,00",2,6,3
"org.apache.lucene.analysis.ja.dict.TokenInfoDictionary.SingletonHolder",1,1,0,1,49,0,0,0,10,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.ja.dict.TokenInfoFST",6,4,6,10,47,0,0,1,62,49,0,0,0,"1,83",5,11,11
"org.apache.lucene.analysis.ja.dict.UnknownDictionary",3,1,7,8,1,0,0,5,43,39,0,0,0,"1,43",6,7,10
"org.apache.lucene.analysis.ja.dict.UnknownDictionary.SingletonHolder",1,1,0,1,1,0,0,0,10,10,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.ja.dict.UnknownDictionaryTest",2,1,2,3,34,0,0,2,40,40,0,0,0,"1,00",0,6,2
"org.apache.lucene.analysis.ja.dict.UserDictionary",13,8,16,24,49,0,0,8,199,162,0,0,0,"2,12",15,25,36
"org.apache.lucene.analysis.ja.dict.UserDictionaryTest",2,0,4,4,76,0,0,2,47,43,0,0,0,"1,00",0,5,4
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.ja.tokenattributes.BaseFormAttributeImpl",3,2,12,14,27,1,1,1,25,22,0,3,1,"1,20",1,7,6
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.analysis.ja.tokenattributes.InflectionAttributeImpl",4,2,13,15,28,1,1,1,35,32,0,3,1,"1,67",2,11,10
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.ja.tokenattributes.PartOfSpeechAttributeImpl",4,2,12,14,28,1,1,1,28,25,0,3,1,"1,40",1,8,7
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.analysis.ja.tokenattributes.ReadingAttributeImpl",4,2,13,15,28,1,1,1,35,32,0,3,1,"1,67",2,10,10
"org.apache.lucene.analysis.ja.util.BinaryDictionaryWriter",6,8,12,20,30,0,0,1,250,230,0,0,0,"3,67",5,19,44
"org.apache.lucene.analysis.ja.util.CSVUtil",2,4,4,8,0,0,0,1,71,56,0,0,0,"3,25",3,4,13
"org.apache.lucene.analysis.ja.util.CharacterDefinitionWriter",5,3,4,7,31,0,0,1,55,41,0,0,0,"2,00",0,9,8
"org.apache.lucene.analysis.ja.util.ConnectionCostsBuilder",1,0,2,2,1,0,0,1,29,29,0,0,0,"1,50",1,2,3
"org.apache.lucene.analysis.ja.util.ConnectionCostsWriter",5,3,3,6,30,0,0,1,41,38,0,0,0,"1,67",0,6,5
"org.apache.lucene.analysis.ja.util.DictionaryBuilder",1,0,3,3,1,0,0,1,53,53,0,0,0,"1,67",0,3,5
"org.apache.lucene.analysis.ja.util.DictionaryBuilder.DictionaryFormat",2,2,0,2,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.analysis.ja.util.TestToStringUtil",0,0,2,2,0,0,0,2,12,12,0,0,0,"1,00",0,2,2
"org.apache.lucene.analysis.ja.util.ToStringUtil",5,3,5,8,0,0,0,4,1.009,986,0,0,0,"45,00",4,5,225
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryBuilder",7,5,4,9,49,0,0,1,159,124,0,0,0,"3,33",3,14,20
"org.apache.lucene.analysis.ja.util.TokenInfoDictionaryWriter",2,1,4,5,50,0,0,1,19,19,0,0,0,"1,00",0,5,4
"org.apache.lucene.analysis.ja.util.UnknownDictionaryBuilder",1,2,5,7,30,0,0,1,83,80,0,0,0,"2,17",3,5,13
"org.apache.lucene.analysis.ja.util.UnknownDictionaryWriter",3,1,5,6,32,0,0,2,34,25,0,0,0,"1,00",1,6,5
"org.apache.lucene.analysis.lv.LatvianAnalyzer",12,5,21,26,72,3,0,2,68,30,0,10,0,"1,20",2,13,6
"org.apache.lucene.analysis.lv.LatvianAnalyzer.DefaultSetHolder",4,1,0,1,72,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.lv.LatvianStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.lv.LatvianStemmer",3,1,3,4,3,0,0,1,134,99,0,0,0,"7,00",3,6,21
"org.apache.lucene.analysis.lv.LatvianStemmer.Affix",1,3,1,4,0,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.lv.TestLatvianAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.lv.TestLatvianStemmer",4,1,10,11,35,0,0,2,240,209,0,0,0,"1,00",0,10,12
"org.apache.lucene.analysis.miscellaneous.EmptyTokenStream",3,4,31,35,25,2,0,1,9,6,0,21,0,"1,00",1,1,1
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer",12,10,21,31,62,2,0,3,261,147,0,9,0,"3,50",7,15,28
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringReader",1,1,2,3,0,0,0,1,14,10,0,0,0,"1,00",1,2,2
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.FastStringTokenizer",6,13,46,59,62,3,0,1,87,70,0,21,3,"2,00",3,17,14
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzer.PatternTokenizer",6,13,44,57,62,3,0,1,63,58,0,21,3,"2,20",1,15,11
"org.apache.lucene.analysis.miscellaneous.PatternAnalyzerTest",3,0,7,7,59,0,0,1,134,89,0,0,0,"1,50",1,7,12
"org.apache.lucene.analysis.miscellaneous.PrefixAndSuffixAwareTokenFilter",3,5,37,42,34,2,0,3,50,44,0,18,3,"1,00",3,12,9
"org.apache.lucene.analysis.miscellaneous.PrefixAwareTokenFilter",11,21,43,64,34,2,0,1,146,129,0,18,3,"1,69",6,52,22
"org.apache.lucene.analysis.miscellaneous.SingleTokenTokenStream",6,7,35,42,34,2,0,1,37,33,0,20,1,"1,20",2,10,6
"org.apache.lucene.analysis.miscellaneous.StemmerOverrideFilter",9,8,36,44,40,3,0,1,38,26,0,24,0,"3,00",1,12,6
"org.apache.lucene.analysis.miscellaneous.TestEmptyTokenStream",1,0,1,1,25,0,0,1,8,8,0,0,0,"1,00",0,3,1
"org.apache.lucene.analysis.miscellaneous.TestPrefixAndSuffixAwareTokenFilter",1,0,2,2,33,0,0,1,16,16,0,0,0,"1,00",1,3,2
"org.apache.lucene.analysis.miscellaneous.TestPrefixAwareTokenFilter",1,0,2,2,33,0,0,1,24,23,0,0,0,"1,00",1,3,2
"org.apache.lucene.analysis.miscellaneous.TestSingleTokenTokenFilter",3,0,1,1,33,0,0,1,18,18,0,0,0,"1,00",0,3,1
"org.apache.lucene.analysis.miscellaneous.TestStemmerOverrideFilter",5,0,1,1,46,0,0,1,29,10,0,0,0,"1,00",0,4,1
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter",8,19,38,57,28,3,0,1,98,73,0,22,1,"3,50",1,16,14
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.Side",2,2,2,4,0,n/a,0,2,24,20,n/a,0,0,"1,67",2,4,5
"org.apache.lucene.analysis.ngram.EdgeNGramTokenFilterTest",9,1,14,15,44,0,0,5,130,122,0,0,0,"1,00",0,15,19
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer",9,18,49,67,29,3,0,1,172,104,0,22,2,"2,30",1,21,23
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizer.Side",2,2,2,4,0,n/a,0,2,24,20,n/a,0,0,"1,67",2,4,5
"org.apache.lucene.analysis.ngram.EdgeNGramTokenizerTest",3,1,11,12,33,0,0,2,85,81,0,0,0,"1,00",0,11,13
"org.apache.lucene.analysis.ngram.NGramTokenFilter",7,18,38,56,27,3,0,1,83,67,0,22,1,"3,00",1,15,12
"org.apache.lucene.analysis.ngram.NGramTokenFilterTest",9,1,12,13,44,0,0,5,103,95,0,0,0,"1,00",0,13,15
"org.apache.lucene.analysis.ngram.NGramTokenizer",8,17,47,64,28,3,0,1,126,94,0,22,2,"2,50",1,18,20
"org.apache.lucene.analysis.ngram.NGramTokenizerTest",3,1,9,10,33,0,0,2,68,64,0,0,0,"1,00",0,9,10
"org.apache.lucene.analysis.nl.DutchAnalyzer",18,7,26,33,75,2,0,2,219,113,0,9,0,"1,54",2,32,20
"org.apache.lucene.analysis.nl.DutchAnalyzer.DefaultSetHolder",6,2,0,2,75,0,0,0,19,17,0,0,0,n/a,0,4,0
"org.apache.lucene.analysis.nl.DutchStemFilter",5,9,42,51,27,3,0,1,98,51,0,24,0,"1,62",1,14,13
"org.apache.lucene.analysis.nl.DutchStemmer",1,5,18,23,1,0,0,1,357,288,0,0,0,"3,78",7,18,68
"org.apache.lucene.analysis.nl.TestDutchStemmer",3,0,13,13,43,0,0,8,181,146,0,0,0,"1,00",0,15,13
"org.apache.lucene.analysis.no.NorwegianAnalyzer",14,5,21,26,76,3,0,2,68,30,0,10,0,"1,20",2,14,6
"org.apache.lucene.analysis.no.NorwegianAnalyzer.DefaultSetHolder",5,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.no.NorwegianLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.no.NorwegianLightStemmer",1,0,1,1,2,0,0,1,54,45,0,0,0,"10,00",1,2,10
"org.apache.lucene.analysis.no.NorwegianMinimalStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.no.NorwegianMinimalStemmer",1,0,1,1,2,0,0,1,29,23,0,0,0,"6,00",1,2,6
"org.apache.lucene.analysis.no.TestNorwegianAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.no.TestNorwegianLightStemFilter",4,1,3,4,35,0,0,2,31,26,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.no.TestNorwegianMinimalStemFilter",4,1,3,4,35,0,0,2,31,26,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.path.PathHierarchyTokenizer",6,19,48,67,29,3,0,1,151,133,0,22,2,"2,44",1,21,22
"org.apache.lucene.analysis.path.ReversePathHierarchyTokenizer",7,21,50,71,29,3,0,1,128,108,0,22,2,"1,64",1,20,18
"org.apache.lucene.analysis.path.TestPathHierarchyTokenizer",6,0,17,17,38,0,0,17,177,175,0,0,0,"1,00",0,18,19
"org.apache.lucene.analysis.path.TestReversePathHierarchyTokenizer",3,0,14,14,33,0,0,14,144,142,0,0,0,"1,00",0,14,16
"org.apache.lucene.analysis.payloads.AbstractEncoder",2,0,1,1,12,0,0,1,9,5,0,0,0,"1,00",1,1,1
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilter",6,10,36,46,28,3,0,1,41,28,0,24,0,"2,50",1,8,5
"org.apache.lucene.analysis.payloads.DelimitedPayloadTokenFilterTest",6,0,6,6,27,0,0,1,102,102,0,0,0,"1,67",0,12,10
"org.apache.lucene.analysis.payloads.FloatEncoder",2,0,1,1,12,0,0,1,15,9,0,0,0,"1,00",1,3,1
"org.apache.lucene.analysis.payloads.IdentityEncoder",2,2,3,5,12,0,0,1,28,21,0,0,0,"1,33",1,5,4
"org.apache.lucene.analysis.payloads.IntegerEncoder",3,0,1,1,12,0,0,1,15,9,0,0,0,"1,00",1,4,1
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilter",7,9,36,45,29,3,0,1,26,21,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilterTest",6,0,1,1,30,0,0,1,26,26,0,0,0,"3,00",0,7,3
"org.apache.lucene.analysis.payloads.NumericPayloadTokenFilterTest.WordTokenFilter",6,7,36,43,27,3,0,1,17,17,0,24,0,"2,00",1,6,4
"org.apache.lucene.analysis.payloads.PayloadEncoder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.payloads.PayloadHelper",2,0,7,7,0,0,0,2,47,28,0,0,0,"1,00",7,7,7
"org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilter",7,7,36,43,29,3,0,1,26,20,0,24,0,"1,50",1,9,3
"org.apache.lucene.analysis.payloads.TokenOffsetPayloadTokenFilterTest",3,0,1,1,15,0,0,1,21,21,0,0,0,"2,00",0,5,2
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilter",7,7,36,43,29,3,0,1,25,19,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilterTest",5,0,1,1,30,0,0,1,19,19,0,0,0,"2,00",0,6,2
"org.apache.lucene.analysis.payloads.TypeAsPayloadTokenFilterTest.WordTokenFilter",6,7,36,43,27,3,0,1,16,16,0,24,0,"1,50",1,7,3
"org.apache.lucene.analysis.phonetic.BeiderMorseFilter",7,15,38,53,28,3,0,1,76,49,0,22,1,"2,00",1,15,8
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilter",6,11,37,48,27,3,0,1,69,61,0,22,1,"4,67",1,13,14
"org.apache.lucene.analysis.phonetic.DoubleMetaphoneFilterTest",6,0,8,8,42,0,0,8,65,64,0,0,0,"1,00",0,8,11
"org.apache.lucene.analysis.phonetic.PhoneticFilter",6,10,37,47,27,3,0,1,55,45,0,22,1,"3,00",1,13,9
"org.apache.lucene.analysis.phonetic.TestBeiderMorseFilter",4,1,5,6,35,0,0,3,67,63,0,0,0,"1,00",0,5,8
"org.apache.lucene.analysis.phonetic.TestPhoneticFilter",5,0,4,4,42,0,0,3,74,70,0,0,0,"1,29",0,4,9
"org.apache.lucene.analysis.pl.PolishAnalyzer",15,7,21,28,77,3,0,2,72,33,0,10,0,"1,20",2,15,6
"org.apache.lucene.analysis.pl.PolishAnalyzer.DefaultsHolder",6,2,0,2,77,0,0,0,25,17,0,0,0,n/a,0,3,0
"org.apache.lucene.analysis.pl.TestPolishAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.position.PositionFilter",5,8,38,46,27,3,0,1,50,30,0,22,1,"1,50",1,9,6
"org.apache.lucene.analysis.position.PositionFilterTest",2,6,4,10,33,0,0,1,77,72,0,0,0,"1,00",0,6,4
"org.apache.lucene.analysis.position.PositionFilterTest.TestTokenStream",5,7,33,40,25,2,0,1,23,23,0,20,1,"1,33",1,8,4
"org.apache.lucene.analysis.pt.PortugueseAnalyzer",14,5,21,26,76,3,0,2,79,34,0,10,0,"1,40",2,15,7
"org.apache.lucene.analysis.pt.PortugueseAnalyzer.DefaultSetHolder",5,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.pt.PortugueseLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.pt.PortugueseLightStemmer",1,0,3,3,2,0,0,1,129,122,0,0,0,"10,33",3,4,31
"org.apache.lucene.analysis.pt.PortugueseMinimalStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.pt.PortugueseMinimalStemmer",0,1,1,2,0,0,0,1,18,7,0,0,0,"1,00",1,1,1
"org.apache.lucene.analysis.pt.PortugueseStemFilter",6,8,36,44,27,3,0,1,31,21,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.pt.PortugueseStemmer",1,7,1,8,1,0,0,1,73,61,0,0,0,"12,00",1,1,12
"org.apache.lucene.analysis.pt.RSLPStemmerBase",7,4,6,10,19,0,0,1,146,94,2,0,0,"3,00",6,10,18
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Rule",6,3,3,6,2,0,0,1,34,19,2,0,0,"1,33",2,4,4
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSetExceptions",5,4,5,9,16,1,0,1,20,17,0,1,1,"2,00",1,5,4
"org.apache.lucene.analysis.pt.RSLPStemmerBase.RuleWithSuffixExceptions",4,4,5,9,3,1,0,1,27,23,0,1,1,"4,00",1,5,8
"org.apache.lucene.analysis.pt.RSLPStemmerBase.Step",6,4,2,6,3,0,0,1,54,41,0,0,0,"6,50",1,5,13
"org.apache.lucene.analysis.pt.TestPortugueseAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.pt.TestPortugueseLightStemFilter",7,1,5,6,70,0,0,2,68,56,0,0,0,"1,00",0,5,7
"org.apache.lucene.analysis.pt.TestPortugueseMinimalStemFilter",7,1,4,5,70,0,0,2,49,40,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.pt.TestPortugueseStemFilter",7,1,4,5,70,0,0,2,49,40,0,0,0,"1,00",0,4,6
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer",10,5,24,29,435,1,0,1,350,183,0,5,1,"2,40",9,31,36
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzer.SavedStreams",2,2,0,2,25,0,0,0,9,4,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest",17,6,11,17,491,0,0,1,100,98,0,0,0,"1,09",1,25,12
"org.apache.lucene.analysis.query.QueryAutoStopWordAnalyzerTest.NonreusableAnalyzer",3,2,10,12,30,1,0,1,14,10,0,6,0,"2,00",1,1,2
"org.apache.lucene.analysis.reverse.ReverseStringFilter",9,13,48,61,27,3,0,1,282,136,0,24,0,"1,93",3,21,27
"org.apache.lucene.analysis.reverse.TestReverseStringFilter",5,0,9,9,35,0,0,9,86,72,0,0,0,"1,00",0,9,11
"org.apache.lucene.analysis.ro.RomanianAnalyzer",14,6,21,27,76,3,0,2,73,31,0,10,0,"1,20",2,14,6
"org.apache.lucene.analysis.ro.RomanianAnalyzer.DefaultSetHolder",2,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.ro.TestRomanianAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.ru.RussianAnalyzer",13,6,23,29,74,3,0,2,125,63,0,10,0,"1,57",2,17,11
"org.apache.lucene.analysis.ru.RussianAnalyzer.DefaultSetHolder",6,2,0,2,74,0,0,0,18,15,0,0,0,n/a,0,3,0
"org.apache.lucene.analysis.ru.RussianLetterTokenizer",5,16,61,77,34,4,0,1,97,31,0,30,1,"1,00",1,13,7
"org.apache.lucene.analysis.ru.RussianLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.ru.RussianLightStemmer",1,0,3,3,2,0,0,1,90,83,0,0,0,"4,00",3,4,12
"org.apache.lucene.analysis.ru.RussianLowerCaseFilter",4,6,36,42,26,3,0,1,29,24,0,24,0,"2,00",1,6,4
"org.apache.lucene.analysis.ru.RussianStemFilter",6,8,37,45,28,3,0,1,59,33,0,24,0,"2,33",1,11,7
"org.apache.lucene.analysis.ru.RussianStemmer",2,38,19,57,1,0,0,1,544,418,0,0,0,"2,53",17,19,48
"org.apache.lucene.analysis.ru.TestRussianAnalyzer",6,2,6,8,43,0,0,5,78,68,0,0,0,"1,50",0,9,9
"org.apache.lucene.analysis.ru.TestRussianLetterTokenizer",1,0,2,2,1,0,0,2,20,16,0,0,0,"1,00",0,2,2
"org.apache.lucene.analysis.ru.TestRussianLightStemFilter",4,1,3,4,35,0,0,2,31,26,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.ru.TestRussianStem",4,0,1,1,35,0,0,1,21,18,0,0,0,"1,00",0,1,2
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper",6,7,27,34,70,1,0,1,212,130,0,5,1,"1,56",7,23,28
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapper.SavedStreams",2,2,0,2,25,0,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest",26,1,17,18,491,0,0,9,301,270,0,0,0,"1,18",2,40,20
"org.apache.lucene.analysis.shingle.ShingleAnalyzerWrapperTest.NonreusableAnalyzer",3,2,10,12,30,1,0,1,14,10,0,6,0,"2,00",1,1,2
"org.apache.lucene.analysis.shingle.ShingleFilter",13,29,48,77,31,3,0,1,380,214,0,22,1,"3,07",2,37,43
"org.apache.lucene.analysis.shingle.ShingleFilter.CircularSequence",1,3,6,9,31,0,0,1,72,31,0,0,0,"1,50",3,6,9
"org.apache.lucene.analysis.shingle.ShingleFilter.InputWindowToken",4,4,1,5,25,0,0,0,11,11,0,0,0,"1,00",0,2,1
"org.apache.lucene.analysis.shingle.ShingleFilterTest",11,93,47,140,51,0,0,5,959,949,0,0,0,"1,02",2,56,51
"org.apache.lucene.analysis.shingle.ShingleFilterTest.TestTokenStream",10,10,32,42,34,2,0,1,30,30,0,21,0,"1,50",1,14,3
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter",18,35,54,89,41,2,0,1,526,315,0,20,1,"2,54",11,69,61
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix",5,2,3,5,35,0,0,1,62,48,0,0,0,"1,57",3,3,11
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column",5,3,10,13,35,0,0,5,48,48,0,0,0,"1,10",6,12,11
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.Matrix.Column.Row",5,1,6,7,35,0,0,3,40,25,0,0,0,"1,17",4,6,7
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec",4,0,8,8,35,1,0,4,22,16,0,0,0,"1,00",2,4,4
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec",5,0,8,8,36,1,0,4,65,34,0,0,0,"2,25",2,13,9
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenPositioner",5,4,2,6,0,0,0,1,17,12,0,0,0,"1,00",1,2,2
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TokenSettingsCodec",6,0,4,4,34,0,0,4,32,6,3,0,0,n/a,2,4,0
"org.apache.lucene.analysis.shingle.ShingleMatrixFilter.TwoDimensionalNonWeightedSynonymTokenSettingsCodec",3,0,8,8,35,1,0,4,26,21,0,0,0,"1,25",2,5,5
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter",19,0,12,12,53,0,0,3,362,304,0,0,0,"1,17",5,33,14
"org.apache.lucene.analysis.shingle.TestShingleMatrixFilter.TokenListStream",11,12,33,45,34,2,0,1,35,35,0,20,1,"1,67",1,19,5
"org.apache.lucene.analysis.sinks.DateRecognizerSinkFilter",3,3,5,8,25,1,0,1,34,25,0,1,0,"1,67",1,4,5
"org.apache.lucene.analysis.sinks.DateRecognizerSinkTokenizerTest",3,0,1,1,29,0,0,1,20,20,0,0,0,"3,00",0,7,3
"org.apache.lucene.analysis.sinks.TokenRangeSinkFilter",2,3,5,8,25,1,0,1,28,24,0,0,1,"1,33",1,3,4
"org.apache.lucene.analysis.sinks.TokenRangeSinkTokenizerTest",3,0,1,1,29,0,0,1,20,20,0,0,0,"3,00",0,7,3
"org.apache.lucene.analysis.sinks.TokenTypeSinkFilter",3,2,4,6,26,1,0,1,18,14,0,1,0,"1,50",1,4,3
"org.apache.lucene.analysis.sinks.TokenTypeSinkTokenizerTest",7,0,1,1,31,0,0,1,27,27,0,0,0,"4,00",0,10,4
"org.apache.lucene.analysis.sinks.TokenTypeSinkTokenizerTest.WordTokenFilter",6,7,36,43,27,3,0,1,15,15,0,24,0,"2,00",1,6,4
"org.apache.lucene.analysis.snowball.SnowballAnalyzer",12,4,14,18,72,1,0,1,90,59,0,5,1,"2,20",2,18,11
"org.apache.lucene.analysis.snowball.SnowballAnalyzer.SavedStreams",3,2,0,2,27,0,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.snowball.SnowballFilter",41,8,37,45,28,3,0,1,60,38,0,24,0,"2,00",1,14,6
"org.apache.lucene.analysis.snowball.TestSnowball",14,0,8,8,74,0,0,7,88,74,0,0,0,"1,11",0,16,10
"org.apache.lucene.analysis.snowball.TestSnowball.TestTokenStream",10,10,32,42,31,2,0,1,22,22,0,21,0,"1,00",1,13,2
"org.apache.lucene.analysis.snowball.TestSnowballVocab",4,0,2,2,35,0,0,1,51,35,0,0,0,"1,33",0,2,4
"org.apache.lucene.analysis.standard.ClassicAnalyzer",11,7,23,30,70,3,0,1,101,43,0,10,0,"1,00",2,17,8
"org.apache.lucene.analysis.standard.ClassicFilter",8,9,36,45,69,3,0,1,41,33,0,24,0,"3,50",1,8,7
"org.apache.lucene.analysis.standard.ClassicTokenizer",15,22,50,72,68,3,0,1,181,103,0,22,2,"1,55",3,29,17
"org.apache.lucene.analysis.standard.ClassicTokenizerImpl",5,42,29,71,68,0,1,6,613,443,0,0,0,"3,04",16,25,73
"org.apache.lucene.analysis.standard.StandardAnalyzer",36,7,23,30,68,3,0,1,102,43,0,10,0,"1,00",2,17,8
"org.apache.lucene.analysis.standard.StandardFilter",40,10,38,48,68,3,0,1,51,45,0,24,0,"2,50",2,11,10
"org.apache.lucene.analysis.standard.StandardTokenizer",62,27,50,77,68,3,0,1,201,124,0,22,2,"1,73",3,31,19
"org.apache.lucene.analysis.standard.StandardTokenizerImpl",4,39,29,68,68,0,1,6,983,798,0,0,0,"2,88",16,25,69
"org.apache.lucene.analysis.standard.StandardTokenizerInterface",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.lucene.analysis.standard.UAX29URLEmailAnalyzer",11,6,22,28,73,3,0,1,74,35,0,10,0,"1,00",2,13,7
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizer",16,30,52,82,72,3,0,2,192,119,0,22,2,"1,38",3,32,18
"org.apache.lucene.analysis.standard.UAX29URLEmailTokenizerImpl",4,42,29,71,72,0,1,6,4.061,3.872,0,0,0,"3,12",16,25,75
"org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31",4,39,29,68,68,0,1,6,962,780,0,0,0,"2,88",16,25,69
"org.apache.lucene.analysis.standard.std31.UAX29URLEmailTokenizerImpl31",4,41,29,70,72,0,1,6,3.543,3.361,0,0,0,"3,04",16,25,73
"org.apache.lucene.analysis.standard.std34.UAX29URLEmailTokenizerImpl34",4,41,29,70,72,0,1,6,3.619,3.436,0,0,0,"3,04",16,25,73
"org.apache.lucene.analysis.stempel.StempelFilter",6,10,37,47,27,3,0,1,54,28,0,24,0,"2,00",1,9,6
"org.apache.lucene.analysis.stempel.StempelStemmer",4,2,4,6,3,0,0,2,66,36,0,0,0,"1,75",2,6,7
"org.apache.lucene.analysis.sv.SwedishAnalyzer",14,5,21,26,76,3,0,2,68,30,0,10,0,"1,20",2,14,6
"org.apache.lucene.analysis.sv.SwedishAnalyzer.DefaultSetHolder",5,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,2,0
"org.apache.lucene.analysis.sv.SwedishLightStemFilter",6,8,36,44,27,3,0,1,29,20,0,24,0,"2,00",1,8,4
"org.apache.lucene.analysis.sv.SwedishLightStemmer",1,0,1,1,2,0,0,1,48,41,0,0,0,"8,00",1,2,8
"org.apache.lucene.analysis.sv.TestSwedishAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.sv.TestSwedishLightStemFilter",4,1,3,4,35,0,0,2,31,26,0,0,0,"1,00",0,3,5
"org.apache.lucene.analysis.synonym.SolrSynonymParser",4,2,5,7,32,0,0,1,137,105,0,0,0,"4,80",2,6,24
"org.apache.lucene.analysis.synonym.SynonymFilter",18,28,42,70,68,3,0,1,439,258,0,22,1,"5,38",3,41,43
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingInput",3,7,1,8,26,0,0,1,21,15,0,0,0,"1,00",0,2,1
"org.apache.lucene.analysis.synonym.SynonymFilter.PendingOutputs",5,6,5,11,13,0,0,1,51,47,0,0,0,"1,80",2,8,9
"org.apache.lucene.analysis.synonym.SynonymMap",5,4,1,5,54,0,0,0,19,11,0,0,0,"1,00",0,1,1
"org.apache.lucene.analysis.synonym.SynonymMap.Builder",20,5,8,13,82,0,0,1,222,175,0,0,0,"4,50",5,36,36
"org.apache.lucene.analysis.synonym.SynonymMap.Builder.MapEntry",1,2,0,2,0,0,0,0,5,4,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.synonym.TestSolrSynonymParser",4,0,7,7,75,0,0,7,96,85,0,0,0,"1,00",0,8,9
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter",11,6,24,30,39,0,0,2,658,622,0,0,0,"2,43",3,33,90
"org.apache.lucene.analysis.synonym.TestSynonymMapFilter.OneSyn",1,3,0,3,0,0,0,0,5,5,0,0,0,n/a,0,0,0
"org.apache.lucene.analysis.synonym.TestWordnetSynonymParser",3,2,1,3,33,0,0,1,37,34,0,0,0,"1,00",0,1,2
"org.apache.lucene.analysis.synonym.WordnetSynonymParser",4,2,4,6,32,0,0,1,73,65,0,0,0,"3,25",1,5,13
"org.apache.lucene.analysis.th.TestThaiAnalyzer",10,0,14,14,61,0,0,9,147,122,0,0,0,"1,00",0,15,15
"org.apache.lucene.analysis.th.ThaiAnalyzer",11,5,20,25,70,3,0,2,64,24,0,10,0,"1,50",2,10,6
"org.apache.lucene.analysis.th.ThaiAnalyzer.DefaultSetHolder",2,1,0,1,70,0,0,0,17,11,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.th.ThaiWordFilter",10,18,38,56,35,3,0,1,111,85,0,22,1,"3,75",1,22,15
"org.apache.lucene.analysis.tokenattributes.CharTermAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,11,n/a
"org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl",28,4,57,61,23,1,3,2,240,216,1,1,3,"1,84",22,38,57
"org.apache.lucene.analysis.tokenattributes.FlagsAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl",2,2,15,17,25,1,2,1,49,32,0,4,0,"1,33",3,7,8
"org.apache.lucene.analysis.tokenattributes.KeywordAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl",2,2,15,17,25,1,2,1,53,32,0,4,0,"1,50",3,7,9
"org.apache.lucene.analysis.tokenattributes.OffsetAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl",2,3,17,20,25,1,2,1,54,41,0,4,0,"1,29",4,8,9
"org.apache.lucene.analysis.tokenattributes.PayloadAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl",3,2,18,20,26,1,2,1,63,48,0,3,1,"1,67",4,14,15
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl",2,2,15,17,25,1,2,1,68,37,0,4,0,"1,50",3,7,9
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl",2,2,15,17,25,1,2,1,44,37,0,4,0,"1,50",3,7,9
"org.apache.lucene.analysis.tokenattributes.TermAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,8,n/a
"org.apache.lucene.analysis.tokenattributes.TermAttributeImpl",2,3,57,60,24,2,3,0,8,3,1,33,0,n/a,0,0,0
"org.apache.lucene.analysis.tokenattributes.TypeAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl",2,2,17,19,25,1,2,1,45,39,0,4,0,"1,50",3,9,12
"org.apache.lucene.analysis.tr.TestTurkishAnalyzer",2,0,4,4,43,0,0,4,28,21,0,0,0,"1,00",0,4,4
"org.apache.lucene.analysis.tr.TestTurkishLowerCaseFilter",5,0,4,4,35,0,0,4,47,33,0,0,0,"1,00",0,4,5
"org.apache.lucene.analysis.tr.TurkishAnalyzer",13,6,21,27,76,3,0,2,73,31,0,10,0,"1,20",2,13,6
"org.apache.lucene.analysis.tr.TurkishAnalyzer.DefaultSetHolder",2,1,0,1,76,0,0,0,17,11,0,0,0,n/a,0,1,0
"org.apache.lucene.analysis.tr.TurkishLowerCaseFilter",6,10,38,48,26,3,0,1,87,59,0,24,0,"3,50",3,9,14
"org.apache.lucene.analysis.util.CharArrayIterator",1,6,17,23,0,0,0,2,151,121,4,0,0,"1,45",16,17,29
"org.apache.lucene.analysis.util.OpenStringBuilder",4,2,30,32,1,0,0,3,99,96,1,0,0,"1,10",11,30,33
"org.apache.lucene.analysis.util.StemmerUtil",24,0,5,5,1,0,0,4,82,39,0,0,0,"3,20",5,5,16
"org.apache.lucene.analysis.util.TestCharArrayIterator",1,0,6,6,1,0,0,1,121,79,0,0,0,"1,50",0,6,9
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizer",12,48,52,100,31,3,0,1,280,199,0,21,3,"1,92",1,29,25
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerImpl",2,65,28,93,3,0,0,6,889,716,0,0,0,"5,39",19,29,151
"org.apache.lucene.analysis.wikipedia.WikipediaTokenizerTest",6,1,9,10,38,0,0,5,155,146,0,0,0,"1,09",0,10,12
"org.apache.lucene.benchmark.BenchmarkTestCase",12,3,9,12,465,0,0,2,70,63,10,0,0,"1,44",5,11,13
"org.apache.lucene.benchmark.Constants",0,5,0,5,0,0,0,0,11,8,0,0,0,n/a,0,0,0
"org.apache.lucene.benchmark.byTask.Benchmark",5,3,6,9,464,0,0,1,103,65,0,0,0,"1,50",2,10,9
"org.apache.lucene.benchmark.byTask.PerfRunData",85,17,30,47,456,0,0,4,323,201,0,0,0,"1,53",18,49,46
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic",30,1,39,40,581,1,0,2,918,768,0,5,0,"1,42",5,73,47
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.MyMergePolicy",2,10,38,48,419,3,0,0,6,6,0,26,0,"1,00",0,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksLogic.MyMergeScheduler",2,1,5,6,420,2,0,0,7,7,0,2,0,"1,00",0,1,1
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse",8,3,3,6,472,0,0,2,85,79,0,0,0,"4,00",0,11,16
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.MockContentSource",4,0,3,3,5,1,0,2,7,7,0,0,0,"1,00",1,2,2
"org.apache.lucene.benchmark.byTask.TestPerfTasksParse.MockQueryMaker",3,3,8,11,421,1,0,1,5,5,0,6,0,"1,00",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.AbstractQueryMaker",4,3,7,10,420,0,0,2,44,35,1,0,0,"1,33",5,8,8
"org.apache.lucene.benchmark.byTask.feeds.ContentItemsSource",3,12,13,25,3,0,0,3,137,88,0,0,0,"1,75",6,17,21
"org.apache.lucene.benchmark.byTask.feeds.ContentSource",2,0,1,1,0,0,0,1,15,3,1,0,0,n/a,1,1,0
"org.apache.lucene.benchmark.byTask.feeds.DemoHTMLParser",0,0,1,1,0,0,0,1,41,34,0,0,0,"5,00",1,1,5
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource",3,4,6,10,5,0,0,1,98,82,0,0,0,"2,00",3,11,12
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.DateFormatInfo",1,2,1,3,0,0,0,0,5,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator",3,3,8,11,2,0,0,2,60,53,0,0,0,"1,30",3,8,13
"org.apache.lucene.benchmark.byTask.feeds.DirContentSource.Iterator.Comparator",1,0,1,1,0,0,0,1,20,18,0,0,0,"5,00",1,1,5
"org.apache.lucene.benchmark.byTask.feeds.DocData",4,6,14,20,2,0,0,1,66,59,0,0,0,"1,07",6,15,15
"org.apache.lucene.benchmark.byTask.feeds.DocMaker",26,24,10,34,50,0,0,1,311,231,8,0,0,"4,80",6,24,48
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DateUtil",1,3,1,4,0,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.DocState",7,5,3,8,50,0,0,1,54,48,0,0,0,"2,67",2,7,8
"org.apache.lucene.benchmark.byTask.feeds.DocMaker.LeftOver",1,2,1,3,0,0,0,0,5,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest",16,1,11,12,488,1,0,3,100,83,0,5,0,"1,60",1,25,8
"org.apache.lucene.benchmark.byTask.feeds.DocMakerTest.OneDocSource",1,1,2,3,0,0,0,2,21,21,0,0,0,"1,50",1,2,3
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource",3,12,5,17,7,0,0,3,77,61,0,0,0,"1,60",2,10,8
"org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource.Parser",4,9,7,16,7,0,0,1,183,165,0,0,0,"4,00",2,10,28
"org.apache.lucene.benchmark.byTask.feeds.EnwikiQueryMaker",13,1,3,4,568,0,0,1,87,73,0,0,0,"2,67",3,12,8
"org.apache.lucene.benchmark.byTask.feeds.FacetSource",2,0,2,2,29,0,0,2,19,9,0,0,0,"1,00",1,2,1
"org.apache.lucene.benchmark.byTask.feeds.FileBasedQueryMaker",6,0,1,1,528,0,0,1,63,48,0,0,0,"7,00",1,6,7
"org.apache.lucene.benchmark.byTask.feeds.HTMLParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource",6,5,6,11,464,0,0,1,119,96,0,0,0,"3,00",2,11,18
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.HeaderLineParser",6,2,5,7,462,1,0,1,69,63,0,0,0,"5,67",0,4,17
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.HeaderLineParser.FieldName",1,5,0,5,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.LineParser",4,1,2,3,0,0,0,1,12,7,2,0,0,"1,00",0,2,1
"org.apache.lucene.benchmark.byTask.feeds.LineDocSource.SimpleLineParser",3,1,4,5,461,1,0,1,32,26,0,0,0,"2,50",0,3,5
"org.apache.lucene.benchmark.byTask.feeds.LineDocSourceTest",19,2,20,22,493,1,0,1,169,157,0,5,0,"1,71",0,33,24
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishContentSource",0,2,3,5,0,0,0,2,36,30,0,0,0,"1,33",1,3,4
"org.apache.lucene.benchmark.byTask.feeds.LongToEnglishQueryMaker",7,3,6,9,550,0,0,2,33,28,0,0,0,"1,17",4,9,7
"org.apache.lucene.benchmark.byTask.feeds.NoMoreDataException",4,0,0,0,0,0,0,0,7,2,0,0,0,n/a,0,0,0
"org.apache.lucene.benchmark.byTask.feeds.QueryMaker",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.lucene.benchmark.byTask.feeds.RandomFacetSource",3,4,3,7,30,0,0,2,50,37,0,0,0,"2,00",1,10,6
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource",2,5,6,11,3,0,0,2,101,87,0,0,0,"2,00",3,8,12
"org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource.DateFormatInfo",1,2,1,3,0,0,0,0,5,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.benchmark.byTask.feeds.ReutersQueryMaker",12,1,3,4,546,0,0,1,69,53,0,0,0,"2,33",3,11,7
"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker",9,0,1,1,528,0,0,1,36,25,0,0,0,"1,00",1,8,1
"org.apache.lucene.benchmark.byTask.feeds.SimpleSloppyPhraseQueryMaker",4,0,1,1,432,0,0,1,54,44,0,0,0,"9,00",1,5,9
"org.apache.lucene.benchmark.byTask.feeds.SingleDocSource",0,2,4,6,0,0,0,2,44,40,0,0,0,"1,25",2,4,5
"org.apache.lucene.benchmark.byTask.feeds.SortableSingleDocSource",2,3,3,6,2,0,0,1,81,68,0,0,0,"1,33",2,4,4
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource",7,20,11,31,8,0,0,3,274,222,0,0,0,"3,18",6,18,35
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSource.DateFormatInfo",1,2,1,3,0,0,0,0,5,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest",4,0,8,8,6,0,0,1,311,299,0,0,0,"2,00",0,13,16
"org.apache.lucene.benchmark.byTask.feeds.TrecContentSourceTest.StringableTrecSource",2,1,3,4,2,0,0,2,22,21,0,0,0,"1,67",0,3,5
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser",1,4,5,9,1,0,0,5,97,59,0,0,0,"3,25",5,6,13
"org.apache.lucene.benchmark.byTask.feeds.TrecDocParser.ParsePathType",3,5,0,5,0,n/a,0,0,2,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.benchmark.byTask.feeds.TrecFBISParser",0,7,1,8,0,0,0,1,38,32,0,0,0,"3,00",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.TrecFR94Parser",0,6,1,7,0,0,0,1,39,33,0,0,0,"3,00",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.TrecFTParser",0,4,1,5,0,0,0,1,28,23,0,0,0,"2,00",1,1,2
"org.apache.lucene.benchmark.byTask.feeds.TrecGov2Parser",0,5,1,6,0,0,0,1,30,25,0,0,0,"3,00",1,1,3
"org.apache.lucene.benchmark.byTask.feeds.TrecLATimesParser",0,7,1,8,0,0,0,1,42,37,0,0,0,"5,00",1,1,5
"org.apache.lucene.benchmark.byTask.feeds.TrecParserByPath",0,0,1,1,0,0,0,1,11,7,0,0,0,"1,00",1,1,1
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Entities",0,2,3,5,0,0,0,1,300,300,0,0,0,"3,67",2,3,11
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser",4,38,38,76,4,0,0,3,669,645,0,0,0,"4,92",16,40,187
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.JJCalls",1,4,0,4,0,0,0,0,6,6,0,0,0,n/a,0,0,0
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.LookaheadSuccess",1,0,0,0,0,0,0,0,1,1,0,0,0,n/a,0,0,0
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParser.MyPipedInputStream",1,0,3,3,0,0,0,1,11,11,0,0,0,"1,00",1,3,3
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserConstants",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.lucene.benchmark.byTask.feeds.demohtml.HTMLParserTokenManager",0,19,51,70,0,0,0,2,1.635,1.623,0,0,0,"8,80",40,51,449
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParseException",1,5,5,10,1,0,0,1,181,112,0,0,0,"5,20",2,5,26
"org.apache.lucene.benchmark.byTask.feeds.demohtml.ParserThread",0,1,2,3,0,0,0,1,27,27,0,0,0,"1,00",0,2,2
"org.apache.lucene.benchmark.byTask.feeds.demohtml.SimpleCharStream",1,16,36,52,1,0,0,3,397,352,0,0,0,"1,83",11,36,66
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Tags",0,1,0,1,0,0,0,0,38,35,0,0,0,n/a,0,0,0
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TestHtmlParser",0,0,12,12,0,0,0,5,94,92,0,0,0,"1,08",0,12,13
"org.apache.lucene.benchmark.byTask.feeds.demohtml.Token",0,8,7,15,0,0,0,2,105,38,0,0,0,"1,14",4,7,8
"org.apache.lucene.benchmark.byTask.feeds.demohtml.TokenMgrError",0,5,6,11,0,0,0,2,123,72,0,0,0,"3,17",3,6,19
"org.apache.lucene.benchmark.byTask.programmatic.Sample",7,0,2,2,469,0,0,1,59,41,0,0,0,"1,00",1,15,2
"org.apache.lucene.benchmark.byTask.stats.Points",3,3,7,10,456,0,0,1,58,29,0,0,0,"1,00",4,7,7
"org.apache.lucene.benchmark.byTask.stats.Report",7,4,5,9,0,0,0,4,39,24,0,0,0,"1,00",4,5,5
"org.apache.lucene.benchmark.byTask.stats.TaskStats",11,12,17,29,456,0,0,3,175,110,0,0,0,"1,47",13,19,25
"org.apache.lucene.benchmark.byTask.tasks.AddDocTask",6,2,7,9,457,0,0,3,56,40,0,0,0,"1,14",3,9,8
"org.apache.lucene.benchmark.byTask.tasks.AddFacetedDocTask",3,3,4,7,487,0,0,1,47,32,0,0,0,"1,75",2,7,7
"org.apache.lucene.benchmark.byTask.tasks.BenchmarkHighlighter",3,0,1,1,419,0,0,1,4,4,0,0,0,n/a,1,1,0
"org.apache.lucene.benchmark.byTask.tasks.ClearStatsTask",1,0,3,3,457,0,0,2,21,14,0,0,0,"1,00",2,3,3
"org.apache.lucene.benchmark.byTask.tasks.CloseIndexTask",5,1,4,5,457,0,0,2,35,29,0,0,0,"1,50",2,6,6
"org.apache.lucene.benchmark.byTask.tasks.CloseReaderTask",2,0,2,2,457,0,0,1,20,15,0,0,0,"1,50",1,4,3
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyIndexTask",2,0,2,2,457,0,0,1,15,11,0,0,0,"1,00",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.CloseTaxonomyReaderTask",2,0,2,2,457,0,0,1,19,15,0,0,0,"1,50",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.CommitIndexTask",3,1,4,5,457,0,0,2,36,32,0,0,0,"1,50",2,7,6
"org.apache.lucene.benchmark.byTask.tasks.CommitTaxonomyIndexTask",3,0,2,2,457,0,0,1,18,15,0,0,0,"1,50",1,3,3
"org.apache.lucene.benchmark.byTask.tasks.ConsumeContentSourceTask",4,2,4,6,461,0,0,2,40,33,0,0,0,"1,25",2,7,5
"org.apache.lucene.benchmark.byTask.tasks.CountingHighlighterTestTask",13,2,3,5,468,0,0,2,31,28,0,0,0,"1,75",2,7,7
"org.apache.lucene.benchmark.byTask.tasks.CountingSearchTestTask",2,4,4,8,457,0,0,1,29,26,0,0,0,"1,25",2,4,5
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTask",21,0,5,5,460,0,0,1,127,101,0,0,0,"3,80",4,31,19
"org.apache.lucene.benchmark.byTask.tasks.CreateIndexTaskTest",7,1,12,13,469,1,0,1,65,64,0,5,0,"1,17",1,11,7
"org.apache.lucene.benchmark.byTask.tasks.CreateTaxonomyIndexTask",3,0,2,2,468,0,0,1,15,11,0,0,0,"1,00",1,5,2
"org.apache.lucene.benchmark.byTask.tasks.DeleteByPercentTask",4,3,5,8,457,0,0,3,64,47,0,0,0,"1,80",2,17,9
"org.apache.lucene.benchmark.byTask.tasks.DeleteDocTask",2,5,6,11,457,0,0,2,58,40,0,0,0,"1,33",3,8,8
"org.apache.lucene.benchmark.byTask.tasks.FlushReaderTask",2,1,4,5,457,0,0,2,31,28,0,0,0,"1,25",2,7,5
"org.apache.lucene.benchmark.byTask.tasks.ForceMergeTask",2,1,4,5,457,0,0,2,29,24,0,0,0,"1,25",2,5,5
"org.apache.lucene.benchmark.byTask.tasks.NearRealtimeReaderTask",5,3,5,8,457,0,0,2,79,61,0,0,0,"2,40",2,12,12
"org.apache.lucene.benchmark.byTask.tasks.NewAnalyzerTask",8,2,5,7,456,0,0,2,69,53,0,0,0,"1,80",3,5,9
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask",3,1,5,6,458,0,0,2,68,57,0,0,0,"2,00",3,5,10
"org.apache.lucene.benchmark.byTask.tasks.NewCollationAnalyzerTask.Implementation",1,4,1,5,0,n/a,0,0,12,12,n/a,0,0,"1,00",0,1,1
"org.apache.lucene.benchmark.byTask.tasks.NewLocaleTask",1,3,5,8,457,0,0,2,58,41,0,0,0,"2,40",3,5,12
"org.apache.lucene.benchmark.byTask.tasks.NewRoundTask",1,0,3,3,457,0,0,2,21,14,0,0,0,"1,00",2,3,3
"org.apache.lucene.benchmark.byTask.tasks.NewShingleAnalyzerTask",5,3,5,8,496,0,0,2,84,71,0,0,0,"2,20",2,6,11
"org.apache.lucene.benchmark.byTask.tasks.OpenIndexTask",8,5,4,9,457,0,0,2,47,35,0,0,0,"1,50",2,8,6
"org.apache.lucene.benchmark.byTask.tasks.OpenReaderTask",7,3,5,8,457,0,0,2,69,63,0,0,0,"2,60",3,10,13
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyIndexTask",2,0,2,2,468,0,0,1,15,11,0,0,0,"1,00",1,5,2
"org.apache.lucene.benchmark.byTask.tasks.OpenTaxonomyReaderTask",2,0,2,2,461,0,0,1,18,13,0,0,0,"1,00",1,6,2
"org.apache.lucene.benchmark.byTask.tasks.PerfTask",15,13,28,41,456,0,0,4,257,155,1,0,0,"1,52",17,36,41
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest",4,1,9,10,467,1,0,1,29,28,0,5,0,"1,67",1,7,5
"org.apache.lucene.benchmark.byTask.tasks.PerfTaskTest.MyPerfTask",2,0,3,3,457,0,0,2,10,10,0,0,0,"1,00",2,3,3
"org.apache.lucene.benchmark.byTask.tasks.PrintReaderTask",3,1,4,5,457,0,0,2,32,29,0,0,0,"1,25",2,8,5
"org.apache.lucene.benchmark.byTask.tasks.ReadTask",18,3,19,22,456,0,0,2,225,157,0,0,0,"2,57",17,41,36
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask",8,3,5,8,458,0,0,1,68,55,0,0,0,"2,20",2,17,11
"org.apache.lucene.benchmark.byTask.tasks.ReadTokensTask.ReusableStringReader",2,3,5,8,1,0,0,2,34,34,0,0,0,"1,40",2,5,7
"org.apache.lucene.benchmark.byTask.tasks.ReopenReaderTask",2,0,2,2,457,0,0,1,20,16,0,0,0,"1,50",1,4,3
"org.apache.lucene.benchmark.byTask.tasks.RepAllTask",3,0,3,3,458,0,0,1,46,38,0,0,0,"2,67",2,8,8
"org.apache.lucene.benchmark.byTask.tasks.RepSelectByPrefTask",4,0,3,3,458,0,0,1,43,39,0,0,0,"2,67",2,11,8
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameRoundTask",4,0,3,3,458,0,0,1,48,38,0,0,0,"2,00",2,13,6
"org.apache.lucene.benchmark.byTask.tasks.RepSumByNameTask",5,0,3,3,458,0,0,1,47,37,0,0,0,"2,00",2,12,6
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefRoundTask",4,0,3,3,458,0,0,1,44,38,0,0,0,"2,00",2,13,6
"org.apache.lucene.benchmark.byTask.tasks.RepSumByPrefTask",5,1,5,6,458,0,0,1,54,45,0,0,0,"1,60",3,14,8
"org.apache.lucene.benchmark.byTask.tasks.ReportTask",6,10,7,17,459,0,0,3,139,107,0,0,0,"3,14",6,21,22
"org.apache.lucene.benchmark.byTask.tasks.ResetInputsTask",1,0,3,3,457,0,0,2,22,14,0,0,0,"1,00",2,3,3
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemEraseTask",1,0,2,2,457,0,0,1,17,10,0,0,0,"1,00",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.ResetSystemSoftTask",1,0,2,2,457,0,0,1,17,10,0,0,0,"1,00",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.RollbackIndexTask",2,1,2,3,457,0,0,1,24,20,0,0,0,"2,00",1,4,4
"org.apache.lucene.benchmark.byTask.tasks.SearchTask",2,0,6,6,456,0,0,5,31,25,0,0,0,"1,00",5,6,6
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetHighlightTask",13,6,7,13,468,0,0,2,105,75,0,0,0,"2,25",4,14,18
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetLoadFieldSelectorTask",5,1,5,6,458,0,0,3,42,28,0,0,0,"1,20",3,7,6
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetTask",1,0,2,2,457,0,0,1,21,9,0,0,0,"1,00",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.SearchTravRetVectorHighlightTask",9,5,7,12,501,0,0,3,106,78,0,0,0,"2,50",4,10,20
"org.apache.lucene.benchmark.byTask.tasks.SearchTravTask",2,1,9,10,457,0,0,7,53,39,0,0,0,"1,00",7,9,9
"org.apache.lucene.benchmark.byTask.tasks.SearchWithCollectorTask",5,1,9,10,457,0,0,7,55,51,0,0,0,"1,33",7,12,12
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTask",5,3,12,15,457,0,0,7,126,111,0,0,0,"2,33",10,14,28
"org.apache.lucene.benchmark.byTask.tasks.SearchWithSortTaskTest",4,1,7,8,466,1,0,1,7,7,0,5,0,"1,00",0,3,1
"org.apache.lucene.benchmark.byTask.tasks.SetPropTask",1,2,4,6,457,0,0,2,42,26,0,0,0,"1,25",2,4,5
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence",13,19,26,45,460,0,0,3,403,351,0,0,0,"3,77",13,34,98
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.ParallelTask",2,2,2,4,460,0,0,1,22,22,0,0,0,"1,50",0,3,3
"org.apache.lucene.benchmark.byTask.tasks.TaskSequence.RunBackgroundTask",1,3,4,7,0,0,0,1,23,23,0,0,0,"1,00",1,4,4
"org.apache.lucene.benchmark.byTask.tasks.UpdateDocTask",5,2,7,9,457,0,0,3,59,45,0,0,0,"1,29",3,12,9
"org.apache.lucene.benchmark.byTask.tasks.WaitForMergesTask",1,0,2,2,457,0,0,1,13,10,0,0,0,"1,00",1,2,2
"org.apache.lucene.benchmark.byTask.tasks.WaitTask",1,1,4,5,457,0,0,2,48,37,0,0,0,"2,00",2,4,8
"org.apache.lucene.benchmark.byTask.tasks.WarmTask",2,0,6,6,457,0,0,5,35,25,0,0,0,"1,00",5,6,6
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask",12,12,7,19,459,0,0,3,154,110,0,0,0,"3,00",3,15,21
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest",14,2,19,21,475,1,0,1,208,193,0,5,0,"1,86",1,16,26
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.EmptyDocMaker",3,16,11,27,51,1,0,1,7,6,0,7,1,"1,00",1,2,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.JustDateDocMaker",6,16,11,27,51,1,0,1,9,8,0,7,1,"1,00",1,4,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.LegalJustDateDocMaker",6,16,11,27,51,1,0,1,10,8,0,7,1,"1,00",1,4,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NewLinesDocMaker",6,16,11,27,51,1,0,1,11,10,0,7,1,"1,00",1,4,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NoBodyDocMaker",6,16,11,27,51,1,0,1,10,9,0,7,1,"1,00",1,4,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.NoTitleDocMaker",6,16,11,27,51,1,0,1,10,9,0,7,1,"1,00",1,4,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.ThreadingDocMaker",6,16,11,27,51,1,0,1,12,11,0,7,1,"1,00",1,4,1
"org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.WriteLineDocMaker",6,16,11,27,51,1,0,1,11,10,0,7,1,"1,00",1,4,1
"org.apache.lucene.benchmark.byTask.tasks.alt.AltPackageTaskTest",2,1,9,10,466,1,0,1,30,26,0,5,0,"1,33",1,5,4
"org.apache.lucene.benchmark.byTask.tasks.alt.AltTestTask",2,11,30,41,457,1,0,1,12,9,0,25,0,"1,00",1,3,2
"org.apache.lucene.benchmark.byTask.utils.Algorithm",6,2,7,9,463,0,0,3,278,242,0,0,0,"7,43",4,27,52
"org.apache.lucene.benchmark.byTask.utils.Config",38,7,17,24,1,0,0,2,391,280,0,0,0,"3,53",13,17,60
"org.apache.lucene.benchmark.byTask.utils.FileUtils",2,0,1,1,1,0,0,1,30,20,0,0,0,"7,00",1,1,7
"org.apache.lucene.benchmark.byTask.utils.Format",2,2,7,9,0,0,0,1,79,44,0,0,0,"1,00",7,7,7
"org.apache.lucene.benchmark.byTask.utils.StreamUtils",7,2,3,5,1,0,0,1,47,27,0,0,0,"1,67",3,5,5
"org.apache.lucene.benchmark.byTask.utils.StreamUtils.Type",2,4,3,7,0,n/a,0,1,30,26,n/a,0,0,"1,67",2,3,5
"org.apache.lucene.benchmark.byTask.utils.StreamUtilsTest",2,3,20,23,468,1,0,1,98,98,0,5,0,"1,00",4,17,14
"org.apache.lucene.benchmark.byTask.utils.StringBuilderReader",2,4,11,15,1,0,0,2,138,95,0,0,0,"1,64",5,11,18
"org.apache.lucene.benchmark.byTask.utils.TestConfig",0,0,1,1,0,0,0,1,11,11,0,0,0,"1,00",0,1,1
"org.apache.lucene.benchmark.quality.Judge",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.benchmark.quality.QualityBenchmark",8,6,7,13,422,0,0,1,119,67,0,0,0,"1,86",4,12,13
"org.apache.lucene.benchmark.quality.QualityQuery",6,2,5,7,0,0,0,2,60,26,0,0,0,"1,00",4,5,5
"org.apache.lucene.benchmark.quality.QualityQueryParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.benchmark.quality.QualityStats",3,12,16,28,2,0,0,1,231,164,0,0,0,"2,25",13,17,36
"org.apache.lucene.benchmark.quality.QualityStats.RecallPoint",1,2,3,5,0,0,0,2,19,14,0,0,0,"1,00",2,3,3
"org.apache.lucene.benchmark.quality.TestQualityRun",9,1,10,11,567,1,0,2,138,117,0,5,0,"4,25",0,17,17
"org.apache.lucene.benchmark.quality.trec.QueryDriver",11,0,1,1,536,0,0,1,50,41,0,0,0,"6,00",0,14,6
"org.apache.lucene.benchmark.quality.trec.Trec1MQReader",1,1,2,3,1,0,0,1,57,31,0,0,0,"2,00",1,3,4
"org.apache.lucene.benchmark.quality.trec.TrecJudge",5,1,7,8,4,0,1,1,99,78,0,0,0,"4,50",3,9,18
"org.apache.lucene.benchmark.quality.trec.TrecJudge.QRelJudgement",1,2,4,6,0,0,0,1,18,17,0,0,0,"1,00",2,4,4
"org.apache.lucene.benchmark.quality.trec.TrecTopicsReader",2,1,3,4,1,0,0,1,108,71,0,0,0,"5,33",2,4,16
"org.apache.lucene.benchmark.quality.utils.DocNameExtractor",5,2,2,4,419,0,0,1,31,17,0,0,0,"1,33",1,4,4
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder",9,2,5,7,436,0,0,1,80,67,0,0,0,"3,00",3,21,15
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.TermDf",2,2,1,3,0,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.benchmark.quality.utils.QualityQueriesFinder.TermsDfQueue",3,3,15,18,3,1,0,1,9,9,0,10,0,"1,00",1,3,2
"org.apache.lucene.benchmark.quality.utils.SimpleQQParser",13,3,4,7,514,0,1,1,40,23,0,0,0,"1,67",1,10,5
"org.apache.lucene.benchmark.quality.utils.SubmissionReport",8,4,4,8,420,0,0,1,61,42,0,0,0,"2,00",1,5,8
"org.apache.lucene.benchmark.utils.ExtractReuters",1,6,5,11,1,0,0,1,108,90,0,0,0,"2,83",0,5,17
"org.apache.lucene.benchmark.utils.ExtractWikipedia",5,4,6,10,52,0,0,1,105,101,0,0,0,"2,67",1,11,16
"org.apache.lucene.collation.CollationKeyAnalyzer",7,2,12,14,39,1,0,1,75,26,0,5,1,"1,33",2,8,4
"org.apache.lucene.collation.CollationKeyAnalyzer.SavedStreams",3,2,0,2,27,0,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.lucene.collation.CollationKeyFilter",8,7,36,43,28,3,0,1,74,23,0,24,0,"1,50",1,10,3
"org.apache.lucene.collation.ICUCollationKeyAnalyzer",7,2,12,14,39,1,0,1,67,26,0,5,1,"1,33",2,8,4
"org.apache.lucene.collation.ICUCollationKeyAnalyzer.SavedStreams",3,2,0,2,27,0,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.lucene.collation.ICUCollationKeyFilter",8,8,36,44,28,3,0,1,76,32,0,24,0,"2,00",1,10,4
"org.apache.lucene.collation.TestICUCollationKeyAnalyzer",2,6,5,11,40,0,0,3,55,47,0,0,0,"1,20",0,6,6
"org.apache.lucene.collation.TestICUCollationKeyFilter",2,6,4,10,39,0,0,2,45,37,0,0,0,"1,00",0,5,4
"org.apache.lucene.collation.TestICUCollationKeyFilter.TestAnalyzer",5,2,11,13,38,1,0,1,12,12,0,6,0,"1,00",1,4,2
"org.apache.lucene.demo.IndexFiles",17,0,3,3,468,0,0,1,152,91,0,0,0,"5,00",0,19,15
"org.apache.lucene.demo.SearchFiles",12,0,3,3,527,0,0,1,175,162,0,0,0,"13,33",0,16,40
"org.apache.lucene.demo.TestDemo",0,0,2,2,0,0,0,1,27,27,0,0,0,"1,00",0,2,2
"org.apache.lucene.document.AbstractField",22,16,47,63,36,0,1,11,254,149,3,0,0,"1,88",18,33,47
"org.apache.lucene.document.CompressionTools",5,0,8,8,19,0,0,1,81,55,0,0,0,"1,25",7,9,10
"org.apache.lucene.document.DateField",5,1,7,8,0,0,0,2,84,40,0,0,0,"1,71",6,7,12
"org.apache.lucene.document.DateTools",9,3,7,10,1,0,0,2,148,64,0,0,0,"2,00",6,7,18
"org.apache.lucene.document.DateTools.Resolution",16,9,2,11,1,n/a,0,0,19,14,n/a,0,0,"1,00",1,2,2
"org.apache.lucene.document.Document",161,6,16,22,37,0,0,2,262,121,0,0,0,"2,50",11,20,40
"org.apache.lucene.document.Field",97,16,66,82,36,1,1,2,296,139,0,23,0,"2,11",3,25,40
"org.apache.lucene.document.Field.Index",85,5,5,10,0,n/a,0,4,98,63,n/a,0,0,"1,24",5,5,21
"org.apache.lucene.document.Field.Store",85,2,1,3,0,n/a,0,1,18,11,n/a,0,0,"1,00",1,1,2
"org.apache.lucene.document.Field.TermVector",25,5,4,9,36,n/a,0,4,84,60,n/a,0,0,"1,25",4,4,20
"org.apache.lucene.document.FieldSelector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.document.FieldSelectorResult",11,7,0,7,0,n/a,0,0,51,9,n/a,0,0,n/a,0,0,0
"org.apache.lucene.document.Fieldable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,22,n/a
"org.apache.lucene.document.LoadFirstFieldSelector",2,0,2,2,2,0,1,1,10,5,0,0,0,"1,00",1,1,1
"org.apache.lucene.document.MapFieldSelector",5,1,5,6,2,0,1,1,35,18,0,0,0,"1,50",1,4,6
"org.apache.lucene.document.NumberTools",0,6,2,8,0,0,0,1,98,51,0,0,0,"5,00",2,2,10
"org.apache.lucene.document.NumericField",24,19,62,81,44,1,1,3,267,88,0,22,1,"2,00",11,23,30
"org.apache.lucene.document.NumericField.DataType",10,4,0,4,0,n/a,0,0,4,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.document.SetBasedFieldSelector",5,2,3,5,2,0,1,1,36,18,0,0,0,"2,00",1,2,4
"org.apache.lucene.facet.FacetException",5,0,4,4,0,0,0,0,20,15,1,0,0,"1,00",0,4,4
"org.apache.lucene.facet.FacetTestBase",36,8,22,30,511,0,0,4,235,191,4,0,0,"1,78",11,62,41
"org.apache.lucene.facet.FacetTestBase.NotSameResultError",2,0,1,1,0,0,0,0,6,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.FacetTestBase.SearchTaxoDirPair",2,2,1,3,419,0,0,0,5,4,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.FacetTestUtils",35,0,5,5,548,0,0,4,88,72,0,0,0,"1,80",4,30,9
"org.apache.lucene.facet.FacetTestUtils.IndexTaxonomyReaderPair",6,3,1,4,421,0,0,1,10,10,0,0,0,"1,00",0,3,1
"org.apache.lucene.facet.FacetTestUtils.IndexTaxonomyWriterPair",6,2,2,4,420,0,0,1,12,12,0,0,0,"1,00",0,5,2
"org.apache.lucene.facet.enhancements.CategoryEnhancement",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy1",8,0,15,15,36,0,1,6,49,33,0,0,0,"1,12",8,8,9
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy2",10,1,15,16,37,0,1,5,56,40,0,0,0,"1,25",8,8,10
"org.apache.lucene.facet.enhancements.CategoryEnhancementDummy3",8,1,15,16,36,0,1,5,56,40,0,0,0,"1,25",8,8,10
"org.apache.lucene.facet.enhancements.EnhancementsCategoryTokenizer",5,4,5,9,39,1,0,1,87,55,0,1,1,"5,00",0,5,10
"org.apache.lucene.facet.enhancements.EnhancementsDocumentBuilder",13,4,14,18,457,1,0,1,55,39,0,5,3,"2,00",3,11,8
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIterator",8,8,9,17,422,1,0,1,69,40,0,3,1,"2,67",2,7,8
"org.apache.lucene.facet.enhancements.EnhancementsPayloadIteratorTest",11,4,5,9,497,0,0,1,83,65,0,0,0,"1,20",0,16,6
"org.apache.lucene.facet.enhancements.TwoEnhancementsTest",14,0,2,2,480,0,0,2,94,72,0,0,0,"1,00",0,15,2
"org.apache.lucene.facet.enhancements.association.AssociationEnhancement",12,3,17,20,38,0,1,6,112,83,0,0,0,"1,90",10,16,19
"org.apache.lucene.facet.enhancements.association.AssociationFloatProperty",4,0,6,6,1,0,0,2,46,33,0,0,0,"1,33",4,6,8
"org.apache.lucene.facet.enhancements.association.AssociationIntProperty",5,0,4,4,1,0,0,1,34,24,0,0,0,"1,50",2,4,6
"org.apache.lucene.facet.enhancements.association.AssociationListTokenizer",7,2,8,10,40,1,0,1,53,48,0,2,1,"3,00",1,9,9
"org.apache.lucene.facet.enhancements.association.AssociationProperty",5,1,5,6,1,0,1,1,45,16,0,0,0,"1,00",3,4,4
"org.apache.lucene.facet.enhancements.association.AssociationPropertyTest",5,0,3,3,5,0,0,3,33,32,0,0,0,"1,00",0,9,3
"org.apache.lucene.facet.enhancements.association.AssociationsPayloadIterator",9,5,7,12,448,0,0,1,180,94,0,0,0,"2,86",6,21,20
"org.apache.lucene.facet.enhancements.association.CustomAssociationPropertyTest",15,0,1,1,478,0,0,1,68,52,0,0,0,"1,67",0,17,5
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParams",10,2,11,13,448,1,0,2,64,50,0,3,0,"2,33",2,9,14
"org.apache.lucene.facet.enhancements.params.DefaultEnhancementsIndexingParamsTest",7,0,1,1,452,0,0,1,43,25,0,0,0,"1,00",0,5,1
"org.apache.lucene.facet.enhancements.params.EnhancementsIndexingParams",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.facet.example.ExampleResult",10,1,2,3,481,0,0,1,22,9,0,0,0,"1,00",1,2,2
"org.apache.lucene.facet.example.ExampleUtils",13,2,1,3,1,0,0,1,13,9,0,0,0,"2,00",0,1,2
"org.apache.lucene.facet.example.TestAdaptiveExample",2,0,1,1,509,0,0,1,14,10,0,0,0,"1,00",0,3,1
"org.apache.lucene.facet.example.TestAssociationExample",3,2,2,4,484,0,0,1,24,20,0,0,0,"1,50",0,7,3
"org.apache.lucene.facet.example.TestMultiCLExample",6,0,2,2,484,0,0,1,53,49,0,0,0,"1,00",0,8,2
"org.apache.lucene.facet.example.TestSimpleExample",4,0,2,2,488,0,0,2,34,25,0,0,0,"1,00",0,7,2
"org.apache.lucene.facet.example.adaptive.AdaptiveMain",7,0,2,2,508,0,0,1,29,17,0,0,0,"1,00",1,6,2
"org.apache.lucene.facet.example.adaptive.AdaptiveSearcher",18,0,1,1,524,0,0,1,49,23,0,0,0,"2,00",1,19,2
"org.apache.lucene.facet.example.association.AssociationIndexer",20,0,1,1,481,0,0,1,81,42,0,0,0,"4,00",0,19,4
"org.apache.lucene.facet.example.association.AssociationMain",6,0,3,3,483,0,0,1,42,29,0,0,0,"1,00",2,6,3
"org.apache.lucene.facet.example.association.AssociationSearcher",9,0,2,2,507,0,0,2,38,26,0,0,0,"1,00",2,7,2
"org.apache.lucene.facet.example.association.AssociationUtils",7,3,0,3,455,0,0,0,47,26,0,0,0,n/a,0,3,0
"org.apache.lucene.facet.example.merge.TaxonomyMergeUtils",12,0,3,3,458,0,0,1,60,32,0,0,0,"1,00",0,18,3
"org.apache.lucene.facet.example.multiCL.MultiCLIndexer",20,6,4,10,476,0,0,1,145,94,0,0,0,"2,25",0,26,9
"org.apache.lucene.facet.example.multiCL.MultiCLMain",6,0,2,2,483,0,0,1,30,18,0,0,0,"1,00",1,5,2
"org.apache.lucene.facet.example.multiCL.MultiCLSearcher",19,0,2,2,507,0,0,1,73,35,0,0,0,"1,50",2,17,3
"org.apache.lucene.facet.example.simple.SimpleIndexer",15,0,1,1,467,0,0,1,51,24,0,0,0,"2,00",0,14,2
"org.apache.lucene.facet.example.simple.SimpleMain",9,0,3,3,487,0,0,1,54,37,0,0,0,"1,00",2,10,3
"org.apache.lucene.facet.example.simple.SimpleSearcher",20,0,4,4,492,0,0,3,103,49,0,0,0,"1,75",4,19,7
"org.apache.lucene.facet.example.simple.SimpleUtils",8,6,1,7,45,0,0,1,51,24,0,0,0,"2,00",1,3,2
"org.apache.lucene.facet.index.CategoryContainer",12,1,18,19,28,0,0,2,213,125,0,0,0,"1,72",11,23,31
"org.apache.lucene.facet.index.CategoryContainerTest",7,0,10,10,33,0,0,10,203,158,0,0,0,"2,30",0,16,23
"org.apache.lucene.facet.index.CategoryContainerTestBase",7,2,1,3,29,0,0,1,31,15,4,0,0,"2,00",0,4,2
"org.apache.lucene.facet.index.CategoryDocumentBuilder",29,4,10,14,454,0,0,1,227,80,1,0,0,"1,60",7,21,16
"org.apache.lucene.facet.index.CategoryListPayloadStream",4,2,4,6,1,0,0,1,35,24,0,0,0,"1,00",1,7,4
"org.apache.lucene.facet.index.CategoryListPayloadStreamTest",7,0,1,1,8,0,0,1,58,38,0,0,0,"1,00",0,12,1
"org.apache.lucene.facet.index.DummyProperty",6,0,5,5,1,0,1,1,24,21,0,0,0,"1,25",3,4,5
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider",7,2,4,6,444,1,0,1,75,13,0,1,1,"1,50",1,4,3
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsDirPayloadProcessor",7,2,3,5,443,1,0,1,23,18,0,0,0,"2,00",1,5,4
"org.apache.lucene.facet.index.FacetsPayloadProcessorProvider.FacetsPayloadProcessor",5,4,5,9,442,1,0,1,34,29,0,0,0,"1,33",2,10,4
"org.apache.lucene.facet.index.FacetsPayloadProcessorProviderTest",15,1,3,4,509,0,0,1,76,59,0,0,0,"2,67",0,24,8
"org.apache.lucene.facet.index.attributes.CategoryAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,11,n/a
"org.apache.lucene.facet.index.attributes.CategoryAttributeImpl",7,3,23,26,25,1,1,1,146,119,0,3,1,"2,06",7,20,33
"org.apache.lucene.facet.index.attributes.CategoryAttributeImplTest",5,0,3,3,30,0,0,3,91,75,0,0,0,"1,33",0,16,4
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable",5,1,2,3,3,0,0,1,16,9,0,0,0,"1,00",1,3,2
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterable.CategoryAttributesIterator",2,2,4,6,2,0,0,1,19,19,0,0,0,"1,00",2,4,4
"org.apache.lucene.facet.index.attributes.CategoryAttributesIterableTest",5,2,2,4,32,1,0,1,34,17,0,1,0,"3,00",0,3,3
"org.apache.lucene.facet.index.attributes.CategoryProperty",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.facet.index.attributes.OrdinalProperty",3,1,7,8,0,0,0,2,43,34,0,0,0,"1,29",4,7,9
"org.apache.lucene.facet.index.categorypolicy.DefaultOrdinalPolicy",5,0,2,2,4,0,0,2,19,6,0,0,0,"1,00",1,2,2
"org.apache.lucene.facet.index.categorypolicy.DefaultPathPolicy",4,0,1,1,2,0,0,1,15,5,0,0,0,"1,00",1,2,1
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelOrdinalPolicy",4,1,3,4,4,0,0,1,44,21,0,0,0,"1,67",1,4,5
"org.apache.lucene.facet.index.categorypolicy.NonTopLevelPathPolicy",3,1,1,2,2,0,0,1,19,6,0,0,0,"1,00",1,2,1
"org.apache.lucene.facet.index.categorypolicy.OrdinalPolicy",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.facet.index.categorypolicy.OrdinalPolicyTest",9,0,2,2,437,0,0,1,73,54,0,0,0,"4,00",0,8,8
"org.apache.lucene.facet.index.categorypolicy.PathPolicy",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.facet.index.categorypolicy.PathPolicyTest",8,0,2,2,437,0,0,1,77,59,0,0,0,"4,50",0,8,9
"org.apache.lucene.facet.index.params.CategoryListParams",32,3,7,10,441,0,0,1,102,43,0,0,0,"1,43",5,17,10
"org.apache.lucene.facet.index.params.CategoryListParamsTest",3,0,3,3,442,0,0,3,71,42,0,0,0,"1,00",0,12,3
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParams",18,5,14,19,10,0,0,8,147,104,5,0,0,"2,21",12,15,31
"org.apache.lucene.facet.index.params.DefaultFacetIndexingParamsTest",13,0,3,3,447,0,0,3,96,78,0,0,0,"2,00",0,23,6
"org.apache.lucene.facet.index.params.FacetIndexingParams",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,7,n/a
"org.apache.lucene.facet.index.params.FacetParamsMissingPropertyException",1,0,5,5,1,1,0,0,10,5,0,0,0,"1,00",0,2,1
"org.apache.lucene.facet.index.params.PerDimensionIndexingParams",6,1,5,6,2,0,0,1,74,31,1,0,0,"1,60",2,6,8
"org.apache.lucene.facet.index.params.PerDimensionIndexingParamsTest",7,0,2,2,448,0,0,2,62,46,0,0,0,"1,00",0,17,2
"org.apache.lucene.facet.index.streaming.CategoryAttributesStream",9,7,33,40,27,2,0,1,49,28,0,20,1,"2,00",1,5,6
"org.apache.lucene.facet.index.streaming.CategoryAttributesStreamTest",7,2,2,4,32,1,0,1,62,37,0,1,0,"7,00",0,8,7
"org.apache.lucene.facet.index.streaming.CategoryListTokenizer",11,0,5,5,31,0,0,3,36,17,2,0,0,"1,00",1,5,4
"org.apache.lucene.facet.index.streaming.CategoryParentsStream",14,11,38,49,35,3,0,1,141,88,0,24,0,"4,00",1,24,16
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest",16,2,5,7,455,1,0,1,146,93,0,1,0,"2,00",0,15,12
"org.apache.lucene.facet.index.streaming.CategoryParentsStreamTest.MyCategoryListTokenizer",5,0,7,7,34,1,0,1,21,21,0,3,0,"3,00",1,3,6
"org.apache.lucene.facet.index.streaming.CategoryTokenizer",7,0,3,3,31,0,0,1,35,22,1,0,0,"1,67",1,4,5
"org.apache.lucene.facet.index.streaming.CategoryTokenizerBase",8,10,36,46,35,3,0,1,39,17,0,24,0,"1,00",1,5,1
"org.apache.lucene.facet.index.streaming.CategoryTokenizerTest",10,2,3,5,449,1,0,2,81,50,0,1,0,"3,00",0,12,6
"org.apache.lucene.facet.index.streaming.CountingListTokenizer",9,2,5,7,444,0,0,1,83,68,0,0,0,"2,20",3,11,11
"org.apache.lucene.facet.search.AdaptiveAccumulatorTest",5,5,29,34,531,3,0,1,27,11,0,23,0,"1,00",1,1,1
"org.apache.lucene.facet.search.AdaptiveFacetsAccumulator",8,1,6,7,495,0,0,1,73,37,0,0,0,"1,50",3,9,9
"org.apache.lucene.facet.search.BaseTestTopK",10,10,23,33,515,1,0,4,82,63,1,10,5,"1,38",6,16,11
"org.apache.lucene.facet.search.CategoryListIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.facet.search.CategoryListIteratorTest",18,1,2,3,430,0,0,1,113,91,0,0,0,"4,33",0,20,13
"org.apache.lucene.facet.search.CategoryListIteratorTest.DataTokenStream",8,11,33,44,430,2,0,1,33,33,0,21,0,"1,67",1,14,5
"org.apache.lucene.facet.search.DrillDown",17,0,7,7,446,0,0,1,72,39,0,0,0,"1,43",7,17,10
"org.apache.lucene.facet.search.DrillDownTest",22,6,7,13,476,0,0,2,133,106,0,0,0,"2,00",0,32,14
"org.apache.lucene.facet.search.FacetArrays",9,5,5,10,1,0,0,1,65,40,0,0,0,"1,80",3,5,9
"org.apache.lucene.facet.search.FacetResultsHandler",7,2,9,11,480,0,0,8,122,25,0,0,0,"1,00",7,9,4
"org.apache.lucene.facet.search.FacetsAccumulator",11,8,7,15,481,0,0,4,111,38,0,0,0,"1,33",4,9,8
"org.apache.lucene.facet.search.FacetsCollector",14,4,12,16,481,1,0,4,95,52,1,0,0,"1,38",4,11,11
"org.apache.lucene.facet.search.FloatArrayAllocator",3,1,3,4,0,0,0,2,42,15,0,0,0,"1,00",1,3,3
"org.apache.lucene.facet.search.Heap",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.lucene.facet.search.IntArrayAllocator",3,1,3,4,0,0,0,2,42,15,0,0,0,"1,00",1,3,3
"org.apache.lucene.facet.search.PayloadIntDecodingIterator",7,6,7,13,421,0,0,1,78,50,0,0,0,"1,43",5,13,10
"org.apache.lucene.facet.search.PayloadIterator",8,4,6,10,419,0,0,1,83,52,1,0,0,"2,17",4,13,13
"org.apache.lucene.facet.search.SamplingWrapper",5,2,6,8,485,0,0,1,73,49,0,0,0,"1,33",3,12,8
"org.apache.lucene.facet.search.SamplingWrapperTest",5,5,29,34,531,3,0,1,26,10,0,23,0,"1,00",1,1,1
"org.apache.lucene.facet.search.ScoredDocIDs",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.facet.search.ScoredDocIDsIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.facet.search.ScoredDocIdCollector",12,3,11,14,421,1,0,5,54,33,2,0,0,"1,14",4,10,8
"org.apache.lucene.facet.search.ScoredDocIdCollector.NonScoringDocIdCollector",4,4,17,21,421,2,0,3,44,42,0,2,0,"1,00",3,9,10
"org.apache.lucene.facet.search.ScoredDocIdCollector.ScoringDocIdCollector",6,5,17,22,421,2,0,4,56,54,0,2,0,"1,20",3,11,12
"org.apache.lucene.facet.search.StandardFacetsAccumulator",15,8,9,17,487,0,0,1,262,167,1,0,0,"3,56",5,16,32
"org.apache.lucene.facet.search.TemporaryObjectAllocator",0,2,5,7,0,0,0,1,86,22,0,0,0,"1,67",2,5,5
"org.apache.lucene.facet.search.TestCategoryListCache",10,3,23,26,518,1,0,3,100,81,0,15,0,"1,33",0,23,16
"org.apache.lucene.facet.search.TestFacetArrays",3,0,1,1,4,0,0,1,36,16,0,0,0,"1,00",0,7,1
"org.apache.lucene.facet.search.TestFacetsAccumulatorWithComplement",16,3,23,26,534,1,0,3,97,80,0,14,1,"1,50",2,25,12
"org.apache.lucene.facet.search.TestMultipleCategoryLists",27,0,11,11,550,0,0,1,282,235,0,0,0,"1,00",2,38,11
"org.apache.lucene.facet.search.TestScoredDocIdCollector",19,3,23,26,532,1,0,4,111,99,0,14,1,"1,88",3,34,15
"org.apache.lucene.facet.search.TestTopKInEachNodeResultHandler",32,0,2,2,529,0,0,1,264,230,0,0,0,"5,67",0,41,17
"org.apache.lucene.facet.search.TestTopKResultsHandler",9,1,6,7,487,0,0,4,188,160,0,0,0,"1,67",3,14,15
"org.apache.lucene.facet.search.TestTopKResultsHandlerRandom",7,0,3,3,484,0,0,2,113,78,0,0,0,"3,75",2,9,15
"org.apache.lucene.facet.search.TestTotalFacetCounts",7,0,3,3,549,0,0,1,86,63,0,0,0,"1,25",0,11,5
"org.apache.lucene.facet.search.TestTotalFacetCountsCache",29,1,12,13,569,0,0,1,406,293,0,0,0,"1,81",2,54,29
"org.apache.lucene.facet.search.TestTotalFacetCountsCache.TFCThread",4,4,2,6,569,0,0,1,23,19,0,0,0,"1,00",0,2,2
"org.apache.lucene.facet.search.TopKFacetResultsHandler",10,0,7,7,480,0,0,5,205,150,1,0,0,"4,29",5,26,30
"org.apache.lucene.facet.search.TopKFacetResultsHandler.TopKFacetResult",6,4,10,14,480,1,1,1,30,12,0,5,0,"1,00",1,4,3
"org.apache.lucene.facet.search.TopKInEachNodeHandler",22,0,11,11,480,0,0,2,562,322,0,0,0,"5,91",7,41,65
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AACO",2,3,1,4,0,0,0,0,21,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ACComparator",7,0,2,2,0,0,0,1,9,4,4,0,0,"1,00",1,2,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AggregatedCategory",2,2,1,3,0,0,0,0,13,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AggregatedCategoryHeap",4,4,15,19,4,1,0,1,11,11,0,10,0,"1,00",1,4,2
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscOrdACComparator",2,0,4,4,1,1,0,1,7,7,0,0,0,"1,00",1,2,2
"org.apache.lucene.facet.search.TopKInEachNodeHandler.AscValueACComparator",2,0,4,4,1,1,0,1,7,7,0,0,0,"1,00",1,2,2
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescOrdACComparator",2,0,4,4,1,1,0,1,7,7,0,0,0,"1,00",1,2,2
"org.apache.lucene.facet.search.TopKInEachNodeHandler.DescValueACComparator",2,0,4,4,1,1,0,1,7,7,0,0,0,"1,00",1,2,2
"org.apache.lucene.facet.search.TopKInEachNodeHandler.IntermediateFacetResultWithHash",5,5,3,8,480,0,1,1,32,18,0,0,0,"1,00",1,2,2
"org.apache.lucene.facet.search.TopKInEachNodeHandler.ResultNodeHeap",4,4,15,19,7,1,0,1,11,11,0,10,0,"1,00",1,6,2
"org.apache.lucene.facet.search.TotalFacetCounts",14,6,7,13,454,0,0,2,131,103,0,0,0,"2,25",4,15,18
"org.apache.lucene.facet.search.TotalFacetCounts.CreationType",2,2,0,2,0,n/a,0,0,2,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.facet.search.TotalFacetCountsCache",5,5,11,16,443,0,0,2,196,83,0,0,0,"1,73",4,12,19
"org.apache.lucene.facet.search.TotalFacetCountsCache.TFCKey",5,6,3,9,442,0,0,0,36,36,0,0,0,"2,00",2,5,6
"org.apache.lucene.facet.search.aggregator.Aggregator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.facet.search.aggregator.ComplementCountingAggregator",1,0,2,2,0,0,0,1,15,10,0,0,0,"1,00",0,2,2
"org.apache.lucene.facet.search.aggregator.CountingAggregator",2,1,5,6,0,0,0,2,33,24,0,0,0,"1,40",2,5,7
"org.apache.lucene.facet.search.aggregator.ScoringAggregator",1,3,5,8,0,0,0,1,33,27,0,0,0,"1,40",2,5,7
"org.apache.lucene.facet.search.aggregator.association.AssociationFloatSumAggregator",6,3,8,11,450,0,1,1,40,34,0,0,0,"1,33",2,10,8
"org.apache.lucene.facet.search.aggregator.association.AssociationIntSumAggregator",6,3,8,11,450,0,1,1,40,34,0,0,0,"1,33",2,10,8
"org.apache.lucene.facet.search.association.AssociationsFacetRequestTest",22,7,5,12,535,0,0,1,110,100,0,0,0,"1,40",0,27,7
"org.apache.lucene.facet.search.cache.CategoryListCache",10,1,3,4,441,0,0,1,29,15,0,0,0,"1,00",1,3,3
"org.apache.lucene.facet.search.cache.CategoryListData",10,1,3,4,444,0,0,1,66,38,1,0,0,"3,33",1,16,10
"org.apache.lucene.facet.search.cache.CategoryListData.RAMCategoryListIterator",3,4,7,11,2,0,1,1,30,27,0,0,0,"1,50",3,4,6
"org.apache.lucene.facet.search.params.CountFacetRequest",19,0,5,5,426,0,0,4,42,27,0,0,0,"1,20",4,8,6
"org.apache.lucene.facet.search.params.FacetRequest",34,11,23,34,480,0,0,11,284,120,3,0,0,"1,30",17,31,26
"org.apache.lucene.facet.search.params.FacetRequest.ResultMode",2,2,0,2,0,n/a,0,0,11,4,n/a,0,0,n/a,0,0,0
"org.apache.lucene.facet.search.params.FacetRequest.SortBy",2,2,0,2,0,n/a,0,0,9,4,n/a,0,0,n/a,0,0,0
"org.apache.lucene.facet.search.params.FacetRequest.SortOrder",3,2,0,2,0,n/a,0,0,2,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.facet.search.params.FacetRequestTest",8,0,6,6,485,0,0,6,75,55,0,0,0,"1,00",0,13,6
"org.apache.lucene.facet.search.params.FacetSearchParams",34,3,8,11,441,0,0,3,91,42,0,0,0,"1,25",4,9,10
"org.apache.lucene.facet.search.params.FacetSearchParamsTest",9,0,4,4,457,0,0,4,60,44,0,0,0,"1,00",0,10,4
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest",23,2,6,8,519,0,0,1,110,96,0,0,0,"1,67",0,27,10
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimCountFacetRequest",10,0,3,3,519,0,0,2,29,27,0,0,0,"1,25",2,5,5
"org.apache.lucene.facet.search.params.MultiIteratorsPerCLParamsTest.PerDimensionCLI",4,3,8,11,5,0,1,1,43,38,0,0,0,"1,80",4,11,9
"org.apache.lucene.facet.search.params.ScoreFacetRequest",7,0,5,5,425,0,0,4,30,24,0,0,0,"1,00",4,7,5
"org.apache.lucene.facet.search.params.association.AssociationFloatSumFacetRequest",9,8,28,36,488,1,0,4,34,24,0,18,1,"1,00",4,8,5
"org.apache.lucene.facet.search.params.association.AssociationIntSumFacetRequest",9,8,28,36,488,1,0,4,34,24,0,18,1,"1,00",4,8,5
"org.apache.lucene.facet.search.results.FacetResult",38,3,6,9,480,0,0,3,70,39,1,0,0,"1,33",5,7,8
"org.apache.lucene.facet.search.results.FacetResultNode",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,9,n/a
"org.apache.lucene.facet.search.results.IntermediateFacetResult",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.facet.search.results.MutableFacetResultNode",6,6,25,31,4,0,0,2,281,146,0,0,0,"1,64",12,26,41
"org.apache.lucene.facet.search.sampling.BaseSampleTestTopK",18,7,28,35,527,2,0,1,100,72,2,22,0,"2,00",3,18,10
"org.apache.lucene.facet.search.sampling.RandomSampler",5,1,3,4,425,0,0,1,40,34,0,0,0,"2,00",1,7,6
"org.apache.lucene.facet.search.sampling.RepeatableSampler",8,6,8,14,429,0,0,1,270,164,0,0,0,"5,12",5,16,41
"org.apache.lucene.facet.search.sampling.RepeatableSampler.Algorithm",1,2,0,2,0,n/a,0,0,23,4,n/a,0,0,n/a,0,0,0
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue",3,4,17,21,3,1,0,2,45,20,0,10,0,"1,25",2,8,5
"org.apache.lucene.facet.search.sampling.RepeatableSampler.IntPriorityQueue.MI",2,1,1,2,0,0,0,0,7,4,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.search.sampling.RepeatableSampler.Sorted",1,2,0,2,0,n/a,0,0,13,4,n/a,0,0,n/a,0,0,0
"org.apache.lucene.facet.search.sampling.SampleFixer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.facet.search.sampling.Sampler",13,1,9,10,484,0,0,2,131,66,0,0,0,"1,62",7,23,13
"org.apache.lucene.facet.search.sampling.Sampler.OverSampledFacetRequest",6,9,27,36,481,1,0,1,29,22,0,19,0,"1,00",3,9,4
"org.apache.lucene.facet.search.sampling.Sampler.SampleResult",4,2,1,3,3,0,0,0,11,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.search.sampling.SamplingAccumulator",12,9,14,23,491,1,0,1,92,58,0,4,1,"1,60",3,12,8
"org.apache.lucene.facet.search.sampling.SamplingAccumulatorTest",4,0,1,1,482,0,0,1,25,9,0,0,0,"1,00",1,1,1
"org.apache.lucene.facet.search.sampling.SamplingParams",0,10,11,21,0,0,0,2,132,49,0,0,0,"1,00",6,11,11
"org.apache.lucene.facet.search.sampling.TakmiSampleFixer",11,3,6,9,488,0,0,1,129,75,0,0,0,"3,00",2,18,18
"org.apache.lucene.facet.taxonomy.CategoryPath",85,3,42,45,1,0,0,2,975,595,0,0,0,"3,98",23,42,167
"org.apache.lucene.facet.taxonomy.InconsistentTaxonomyException",3,0,2,2,0,0,0,0,18,8,0,0,0,"1,00",0,2,2
"org.apache.lucene.facet.taxonomy.TaxonomyReader",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,12,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyReader.ChildrenArrays",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.facet.taxonomy.TaxonomyWriter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.facet.taxonomy.TestCategoryPath",3,0,31,31,3,0,0,28,820,700,0,0,0,"1,61",0,71,50
"org.apache.lucene.facet.taxonomy.TestCategoryPath.CS",2,1,4,5,1,0,0,2,16,16,0,0,0,"1,00",3,4,4
"org.apache.lucene.facet.taxonomy.TestTaxonomyCombined",8,3,29,32,441,0,0,8,995,715,0,0,0,"2,71",3,38,84
"org.apache.lucene.facet.taxonomy.directory.Consts",2,6,0,6,2,0,0,0,32,15,0,0,0,"2,00",0,0,2
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader",39,11,34,45,425,0,1,2,496,272,1,0,0,"2,32",14,48,51
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyReader.ChildrenArraysImpl",2,2,5,7,1,0,1,2,13,13,0,0,0,"1,00",2,3,3
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter",58,15,44,59,433,0,2,6,810,409,1,0,0,"2,58",17,96,93
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.DiskOrdinalMap",3,3,9,12,2,0,1,1,49,42,0,0,0,"1,80",1,5,9
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.MemoryOrdinalMap",3,1,8,9,1,0,1,2,16,13,0,0,0,"1,00",1,4,4
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.OrdinalMap",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.SinglePositionTokenStream",5,7,33,40,26,2,0,1,35,23,0,21,0,"1,33",1,7,4
"org.apache.lucene.facet.taxonomy.directory.ParentArray",7,1,3,4,421,0,0,1,119,63,0,0,0,"4,33",1,13,13
"org.apache.lucene.facet.taxonomy.directory.TestAddTaxonomies",10,0,4,4,440,0,0,1,212,177,0,0,0,"6,25",0,16,25
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyReader",11,0,8,8,438,0,0,6,157,128,0,0,0,"1,50",0,27,12
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter",10,0,7,7,423,0,0,3,146,109,0,0,0,"1,00",0,18,7
"org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.NoOpCache",3,0,13,13,3,0,1,5,11,9,0,0,0,"1,00",5,7,7
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose",5,0,1,1,444,0,0,1,48,41,0,0,0,"3,00",0,12,3
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker",10,4,4,8,443,0,0,3,25,25,0,0,0,"1,50",3,6,6
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexReader",6,10,109,119,443,2,0,1,31,25,0,79,2,"1,67",1,6,5
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedIndexWriter",7,42,159,201,443,1,1,1,18,16,0,114,1,"1,50",0,4,3
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyReader",7,10,36,46,443,1,1,1,9,9,0,18,1,"1,00",1,5,2
"org.apache.lucene.facet.taxonomy.directory.TestIndexClose.LeakChecker.InstrumentedTaxonomyWriter",11,14,44,58,443,1,2,3,18,18,0,17,3,"1,00",3,8,4
"org.apache.lucene.facet.taxonomy.writercache.TaxonomyWriterCache",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray",2,6,16,22,1,0,0,6,132,126,0,0,0,"1,69",12,17,27
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CharBlockArray.Block",1,3,1,4,0,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.Cl2oTaxonomyWriterCache",3,1,14,15,3,0,1,2,50,33,0,0,0,"1,25",6,9,10
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap",4,6,15,21,4,0,0,1,154,132,0,0,0,"2,07",9,21,31
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.Entry",2,4,1,5,0,0,0,0,12,12,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CollisionMap.EntryIterator",3,3,4,7,2,0,0,2,37,36,0,0,0,"2,00",2,4,8
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal",4,9,23,32,3,0,0,1,439,329,0,0,0,"2,96",15,34,68
"org.apache.lucene.facet.taxonomy.writercache.cl2o.CompactLabelToOrdinal.HashArray",1,3,1,4,0,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.facet.taxonomy.writercache.cl2o.LabelToOrdinal",3,2,6,8,2,0,0,5,44,14,1,0,0,"1,00",4,6,2
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCharBlockArray",1,0,2,2,2,0,0,1,64,48,0,0,0,"3,50",0,9,7
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal",4,0,1,1,6,0,0,1,65,48,0,0,0,"8,00",0,10,8
"org.apache.lucene.facet.taxonomy.writercache.cl2o.TestCompactLabelToOrdinal.LabelToOrdinalMap",3,2,11,13,3,1,0,1,22,22,0,2,0,"1,40",2,7,7
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache",3,1,14,15,4,0,1,1,87,51,0,0,0,"1,75",5,10,14
"org.apache.lucene.facet.taxonomy.writercache.lru.LruTaxonomyWriterCache.LRUType",1,2,0,2,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.facet.taxonomy.writercache.lru.NameHashIntCacheLRU",1,0,3,3,2,0,0,2,22,13,0,0,0,"1,00",2,5,3
"org.apache.lucene.facet.taxonomy.writercache.lru.NameIntCacheLRU",1,4,13,17,2,0,0,1,105,72,0,0,0,"1,38",10,15,18
"org.apache.lucene.facet.util.MultiCategoryListIterator",1,3,7,10,1,0,1,1,52,37,0,0,0,"2,50",3,6,10
"org.apache.lucene.facet.util.PartitionsUtils",12,0,8,8,441,0,0,2,71,37,0,0,0,"1,12",8,13,9
"org.apache.lucene.facet.util.ResultSortUtils",11,0,1,1,480,0,0,1,35,25,0,0,0,"7,00",1,9,7
"org.apache.lucene.facet.util.ResultSortUtils.AllValueHeap",3,3,13,16,6,0,1,1,52,47,0,0,0,"1,50",5,7,12
"org.apache.lucene.facet.util.ResultSortUtils.MaxOrdinalHeap",4,3,21,24,7,1,1,1,10,10,0,10,0,"1,00",1,4,2
"org.apache.lucene.facet.util.ResultSortUtils.MaxValueHeap",4,3,21,24,7,1,1,1,15,15,0,10,0,"1,50",1,5,3
"org.apache.lucene.facet.util.ResultSortUtils.MinOrdinalHeap",4,3,21,24,7,1,1,1,10,10,0,10,0,"1,00",1,4,2
"org.apache.lucene.facet.util.ResultSortUtils.MinValueHeap",4,3,21,24,7,1,1,1,15,15,0,10,0,"1,50",1,5,3
"org.apache.lucene.facet.util.ScoredDocIdsUtils",15,0,5,5,424,0,0,2,161,123,0,0,0,"1,50",4,22,33
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllDocsScoredDocIDs",6,1,7,8,421,0,1,1,68,61,0,0,0,"1,25",3,6,15
"org.apache.lucene.facet.util.ScoredDocIdsUtils.AllLiveDocsScoredDocIDs",6,2,7,9,421,0,1,1,75,65,0,0,0,"1,25",3,7,15
"org.apache.lucene.facet.util.TestScoredDocIDsUtils",15,0,5,5,430,0,0,1,151,124,0,0,0,"1,71",2,39,12
"org.apache.lucene.facet.util.TestScoredDocIDsUtils.DocumentFactory",5,6,4,10,38,0,0,1,30,28,1,0,0,"1,50",3,7,6
"org.apache.lucene.index.AbstractAllTermDocs",6,2,18,20,9,0,1,4,59,52,2,0,0,"1,56",6,10,14
"org.apache.lucene.index.AllTermDocs",3,3,20,23,418,1,1,1,13,13,0,8,0,"1,00",1,5,2
"org.apache.lucene.index.BalancedSegmentMergePolicy",9,14,59,73,420,3,0,1,282,252,0,27,5,"4,00",10,33,64
"org.apache.lucene.index.BalancedSegmentMergePolicy.MergePolicyParams",2,6,13,19,420,0,0,6,56,53,0,0,0,"1,00",6,13,13
"org.apache.lucene.index.BufferedDeletes",9,11,7,18,418,0,0,1,99,71,0,0,0,"2,14",2,7,15
"org.apache.lucene.index.BufferedDeletesStream",18,8,16,24,418,0,0,1,295,249,0,0,0,"3,53",9,41,60
"org.apache.lucene.index.BufferedDeletesStream.ApplyDeletesResult",3,3,1,4,418,0,0,0,13,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.index.BufferedDeletesStream.QueryAndLimit",4,2,1,3,418,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.index.ByteBlockPool",9,9,5,14,418,0,0,1,81,66,0,0,0,"2,20",2,8,11
"org.apache.lucene.index.ByteBlockPool.Allocator",2,0,3,3,0,0,0,3,5,5,1,0,0,n/a,1,3,0
"org.apache.lucene.index.ByteSliceReader",10,10,33,43,418,2,0,5,106,94,0,14,0,"1,70",5,11,17
"org.apache.lucene.index.ByteSliceWriter",3,4,6,10,419,0,0,1,59,49,0,0,0,"1,67",1,7,10
"org.apache.lucene.index.CharBlockPool",8,7,3,10,418,0,0,1,30,30,0,0,0,"1,33",0,6,4
"org.apache.lucene.index.CheckIndex",30,3,13,16,446,0,0,1,740,621,0,0,0,"10,31",8,75,134
"org.apache.lucene.index.CheckIndex.MySegmentTermDocs",4,17,25,42,419,1,1,1,15,15,0,9,2,"1,00",0,5,3
"org.apache.lucene.index.CheckIndex.Status",4,18,0,18,424,0,0,0,50,20,0,0,0,n/a,0,0,0
"org.apache.lucene.index.CheckIndex.Status.FieldNormStatus",2,2,0,2,0,0,0,0,9,4,0,0,0,n/a,0,0,0
"org.apache.lucene.index.CheckIndex.Status.SegmentInfoStatus",6,19,0,19,4,0,0,0,56,21,0,0,0,n/a,0,0,0
"org.apache.lucene.index.CheckIndex.Status.StoredFieldStatus",2,3,0,3,0,0,0,0,11,5,0,0,0,n/a,0,0,0
"org.apache.lucene.index.CheckIndex.Status.TermIndexStatus",2,4,0,4,0,0,0,0,13,6,0,0,0,n/a,0,0,0
"org.apache.lucene.index.CheckIndex.Status.TermVectorStatus",2,3,0,3,0,0,0,0,11,5,0,0,0,n/a,0,0,0
"org.apache.lucene.index.CoalescedDeletes",10,2,5,7,418,0,0,1,117,110,0,0,0,"1,80",4,6,27
"org.apache.lucene.index.CoalescedDeletes.SubIterator",3,3,0,3,7,0,0,0,5,5,0,0,0,n/a,0,0,0
"org.apache.lucene.index.CoalescedDeletes.TermMergeQueue",4,3,15,18,9,1,0,1,14,14,0,10,0,"1,50",1,4,3
"org.apache.lucene.index.CompoundFileExtractor",8,0,1,1,435,0,0,1,80,76,0,0,0,"13,00",0,12,13
"org.apache.lucene.index.CompoundFileReader",17,7,36,43,418,1,0,5,164,132,0,9,2,"1,75",10,27,28
"org.apache.lucene.index.CompoundFileReader.CSIndexInput",5,10,55,65,24,3,0,2,71,52,0,26,2,"1,38",2,17,11
"org.apache.lucene.index.CompoundFileReader.FileEntry",1,2,0,2,0,0,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.lucene.index.CompoundFileWriter",11,9,8,17,418,0,0,1,181,105,0,0,0,"2,50",2,24,20
"org.apache.lucene.index.CompoundFileWriter.FileEntry",2,4,0,4,418,0,0,0,10,6,0,0,0,n/a,0,0,0
"org.apache.lucene.index.ConcurrentMergeScheduler",12,12,26,38,418,1,0,2,391,271,1,0,0,"2,64",7,41,66
"org.apache.lucene.index.ConcurrentMergeScheduler.MergeThread",4,4,6,10,418,0,0,2,79,68,0,0,0,"2,50",2,14,15
"org.apache.lucene.index.CorruptIndexException",67,0,1,1,0,0,0,0,9,5,2,0,0,"1,00",0,1,1
"org.apache.lucene.index.DefaultSkipListReader",4,21,18,39,26,1,0,1,80,63,0,4,2,"1,25",4,13,10
"org.apache.lucene.index.DefaultSkipListWriter",7,14,12,26,418,1,0,1,99,65,0,3,1,"1,67",0,10,10
"org.apache.lucene.index.DirectoryReader",37,25,123,148,418,1,0,2,827,684,1,27,18,"2,59",39,140,145
"org.apache.lucene.index.DirectoryReader.MultiTermDocs",10,11,19,30,418,0,1,1,136,134,1,0,0,"3,18",7,23,35
"org.apache.lucene.index.DirectoryReader.MultiTermEnum",10,5,9,14,418,1,0,1,70,70,0,0,0,"3,00",3,19,15
"org.apache.lucene.index.DirectoryReader.MultiTermPositions",6,11,29,40,418,1,2,2,22,21,0,8,1,"1,00",5,12,6
"org.apache.lucene.index.DirectoryReader.ReaderCommit",4,7,24,31,418,1,0,9,58,58,0,4,0,"1,00",9,17,11
"org.apache.lucene.index.DocConsumer",6,0,4,4,418,0,0,4,6,6,1,0,0,n/a,2,4,0
"org.apache.lucene.index.DocConsumerPerThread",6,0,2,2,1,0,0,2,10,4,1,0,0,n/a,1,2,0
"org.apache.lucene.index.DocFieldConsumer",7,1,5,6,418,0,0,5,17,10,1,0,0,"1,00",2,5,1
"org.apache.lucene.index.DocFieldConsumerPerField",9,0,2,2,27,0,0,2,5,4,1,0,0,n/a,0,2,0
"org.apache.lucene.index.DocFieldConsumerPerThread",9,0,4,4,30,0,0,4,6,6,1,0,0,n/a,2,4,0
"org.apache.lucene.index.DocFieldProcessor",12,4,9,13,418,1,0,2,53,42,0,0,0,"1,20",2,18,6
"org.apache.lucene.index.DocFieldProcessorPerField",5,6,2,8,418,0,0,1,18,15,0,0,0,"1,00",0,4,2
"org.apache.lucene.index.DocFieldProcessorPerThread",24,16,10,26,418,1,0,1,244,205,0,0,0,"4,44",3,32,40
"org.apache.lucene.index.DocFieldProcessorPerThread.PerDoc",2,4,7,11,418,1,0,1,32,32,0,1,0,"1,00",1,7,3
"org.apache.lucene.index.DocInverter",15,3,11,14,418,1,0,2,52,49,0,0,1,"1,33",2,15,8
"org.apache.lucene.index.DocInverterPerField",24,6,5,11,418,1,0,1,158,125,0,0,0,"7,33",0,35,22
"org.apache.lucene.index.DocInverterPerThread",19,7,9,16,418,1,0,2,43,37,0,0,0,"1,00",2,16,5
"org.apache.lucene.index.DocInverterPerThread.SingleTokenAttributeSource",5,6,24,30,25,1,0,1,12,12,0,18,0,"1,00",0,6,2
"org.apache.lucene.index.DocumentsWriter",58,41,40,81,418,0,0,2,969,722,0,0,0,"3,39",21,104,139
"org.apache.lucene.index.DocumentsWriter.ByteBlockAllocator",3,2,7,9,418,1,0,1,41,39,0,0,0,"1,75",1,4,7
"org.apache.lucene.index.DocumentsWriter.DocState",19,8,2,10,418,0,0,2,20,17,0,0,0,"1,00",1,3,2
"org.apache.lucene.index.DocumentsWriter.DocWriter",19,2,4,6,0,0,0,4,13,10,4,0,0,"1,00",1,4,1
"org.apache.lucene.index.DocumentsWriter.IndexingChain",3,0,1,1,418,0,0,1,8,3,1,0,0,n/a,1,1,0
"org.apache.lucene.index.DocumentsWriter.PerDocBuffer",5,5,13,18,418,1,0,1,26,16,0,8,1,"1,50",1,6,3
"org.apache.lucene.index.DocumentsWriter.SkipDocWriter",2,2,7,9,1,1,0,3,12,12,0,1,0,"1,00",1,3,3
"org.apache.lucene.index.DocumentsWriter.WaitQueue",6,5,7,12,418,0,0,1,115,105,0,0,0,"2,57",3,13,18
"org.apache.lucene.index.DocumentsWriterThreadState",6,5,2,7,418,0,0,1,23,19,0,0,0,"1,00",0,3,2
"org.apache.lucene.index.FieldInfo",41,7,3,10,1,0,0,1,63,54,0,0,0,"3,67",1,3,11
"org.apache.lucene.index.FieldInfo.IndexOptions",23,3,0,3,0,n/a,0,0,12,5,n/a,0,0,n/a,0,0,0
"org.apache.lucene.index.FieldInfos",54,13,22,35,418,0,0,1,303,211,0,0,0,"2,27",12,46,50
"org.apache.lucene.index.FieldInvertState",17,8,14,22,24,0,0,1,103,62,0,0,0,"1,00",8,14,14
"org.apache.lucene.index.FieldNormModifier",12,2,3,5,434,0,0,1,120,82,0,0,0,"5,33",0,29,16
"org.apache.lucene.index.FieldReaderException",1,0,4,4,0,0,0,0,58,13,0,0,0,"1,00",0,4,4
"org.apache.lucene.index.FieldSortedTermVectorMapper",3,6,13,19,3,1,0,1,44,30,0,3,0,"1,00",2,8,6
"org.apache.lucene.index.FieldsReader",30,13,20,33,418,0,0,2,391,328,0,0,0,"3,25",9,57,65
"org.apache.lucene.index.FieldsReader.LazyField",14,20,54,74,418,1,1,3,136,118,0,22,1,"2,86",5,16,20
"org.apache.lucene.index.FieldsWriter",18,19,11,30,418,0,0,1,189,163,0,0,0,"3,18",0,37,35
"org.apache.lucene.index.FilterIndexReader",21,9,106,115,419,1,0,1,210,175,7,31,14,"1,00",28,74,37
"org.apache.lucene.index.FilterIndexReader.FilterTermDocs",7,1,17,18,9,0,1,1,15,14,1,0,0,"1,00",5,17,9
"org.apache.lucene.index.FilterIndexReader.FilterTermEnum",3,1,9,10,8,1,0,1,13,12,1,0,0,"1,00",3,9,5
"org.apache.lucene.index.FilterIndexReader.FilterTermPositions",3,1,26,27,11,1,2,1,18,16,3,8,0,"1,00",4,10,5
"org.apache.lucene.index.FormatPostingsDocsConsumer",6,0,2,2,1,0,0,2,10,4,1,0,0,n/a,1,2,0
"org.apache.lucene.index.FormatPostingsDocsWriter",20,14,7,21,418,1,0,1,85,77,0,0,0,"2,20",1,20,11
"org.apache.lucene.index.FormatPostingsFieldsConsumer",5,0,2,2,16,0,0,2,13,4,1,0,0,n/a,1,2,0
"org.apache.lucene.index.FormatPostingsFieldsWriter",14,7,5,12,418,1,0,1,42,36,0,0,0,"1,33",1,8,4
"org.apache.lucene.index.FormatPostingsPositionsConsumer",5,0,2,2,0,0,0,2,7,4,1,0,0,n/a,0,2,0
"org.apache.lucene.index.FormatPostingsPositionsWriter",14,6,7,13,418,1,0,1,52,47,0,0,0,"2,00",0,11,10
"org.apache.lucene.index.FormatPostingsTermsConsumer",9,1,3,4,13,0,0,2,19,13,1,0,0,"2,00",2,4,2
"org.apache.lucene.index.FormatPostingsTermsWriter",10,9,8,17,418,1,0,2,40,35,0,1,0,"1,20",1,10,6
"org.apache.lucene.index.FreqProxFieldMergeState",13,13,4,17,418,0,0,1,74,69,0,0,0,"3,00",3,8,12
"org.apache.lucene.index.FreqProxTermsWriter",26,3,9,12,418,1,0,3,241,180,0,1,0,"8,40",2,30,42
"org.apache.lucene.index.FreqProxTermsWriterPerField",15,8,21,29,418,1,0,6,139,128,0,0,0,"2,08",4,21,27
"org.apache.lucene.index.FreqProxTermsWriterPerField.FreqProxPostingsArray",4,8,9,17,12,1,0,3,31,31,0,1,3,"1,00",2,6,4
"org.apache.lucene.index.FreqProxTermsWriterPerThread",10,2,9,11,418,1,0,4,37,21,0,0,0,"1,00",2,6,5
"org.apache.lucene.index.FrozenBufferedDeletes",12,8,5,13,418,0,0,2,88,75,0,0,0,"1,50",4,9,15
"org.apache.lucene.index.IndexCommit",30,0,13,13,418,0,0,7,101,43,4,0,0,"2,00",12,14,8
"org.apache.lucene.index.IndexDeletionPolicy",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.index.IndexFileDeleter",15,12,23,35,418,0,0,2,459,332,0,0,0,"3,48",4,45,80
"org.apache.lucene.index.IndexFileDeleter.CommitPoint",4,9,24,33,418,1,0,8,74,64,0,4,0,"1,09",9,17,12
"org.apache.lucene.index.IndexFileDeleter.RefCount",1,3,3,6,0,0,0,1,24,20,0,0,0,"1,33",2,3,4
"org.apache.lucene.index.IndexFileNameFilter",6,3,4,7,418,0,0,3,66,51,0,0,0,"3,75",3,4,15
"org.apache.lucene.index.IndexFileNames",24,26,6,32,418,0,0,5,223,131,0,0,0,"2,67",6,6,16
"org.apache.lucene.index.IndexFormatTooNewException",8,0,3,3,2,1,0,0,16,10,0,0,0,"1,00",0,3,2
"org.apache.lucene.index.IndexFormatTooOldException",4,0,5,5,2,1,0,0,27,19,0,0,0,"1,00",0,5,4
"org.apache.lucene.index.IndexNotFoundException",2,0,1,1,0,0,0,0,9,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.index.IndexReader",514,17,89,106,418,0,0,36,1.536,472,7,0,0,"1,38",64,108,94
"org.apache.lucene.index.IndexReader.ReaderClosedListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.index.IndexSorter",15,1,4,5,451,0,0,1,79,67,0,0,0,"2,25",1,17,9
"org.apache.lucene.index.IndexSorter.DocScore",1,2,2,4,0,0,0,1,15,15,0,0,0,"2,00",2,2,4
"org.apache.lucene.index.IndexSorter.PostingMap",1,2,1,3,0,0,0,1,7,7,0,0,0,"1,00",1,1,1
"org.apache.lucene.index.IndexSorter.SortedTermPositions",13,11,25,36,451,0,2,7,94,92,0,0,0,"1,38",9,29,18
"org.apache.lucene.index.IndexSorter.SortingReader",13,11,118,129,451,2,0,9,71,71,0,69,11,"1,33",8,20,16
"org.apache.lucene.index.IndexSplitter",5,4,8,12,434,0,0,1,129,102,0,0,0,"2,88",2,18,23
"org.apache.lucene.index.IndexUpgrader",13,4,6,10,436,0,0,1,122,93,0,0,0,"2,83",0,23,17
"org.apache.lucene.index.IndexWriter",140,53,163,216,418,0,1,5,3.916,2.019,2,0,0,"2,84",61,362,449
"org.apache.lucene.index.IndexWriter.FlushControl",5,5,9,14,418,0,0,1,99,92,0,0,0,"2,33",6,17,21
"org.apache.lucene.index.IndexWriter.IndexReaderWarmer",3,0,1,1,418,0,0,1,15,3,0,0,0,n/a,0,1,0
"org.apache.lucene.index.IndexWriter.MaxFieldLength",5,4,4,8,0,0,0,1,47,24,0,0,0,"1,00",2,4,4
"org.apache.lucene.index.IndexWriter.ReaderPool",10,1,14,15,418,0,0,1,229,132,0,0,0,"2,43",8,29,34
"org.apache.lucene.index.IndexWriterConfig",68,27,38,65,418,0,0,16,538,229,0,0,0,"1,42",36,42,54
"org.apache.lucene.index.IndexWriterConfig.OpenMode",32,3,0,3,0,n/a,0,0,10,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.index.IntBlockPool",4,6,3,9,418,0,0,1,50,32,0,0,0,"2,00",0,5,6
"org.apache.lucene.index.InvertedDocConsumer",8,1,5,6,418,0,0,5,15,10,1,0,0,"1,00",2,5,1
"org.apache.lucene.index.InvertedDocConsumerPerField",8,0,5,5,27,0,0,5,16,7,1,0,0,n/a,1,5,0
"org.apache.lucene.index.InvertedDocConsumerPerThread",9,0,4,4,418,0,0,4,6,6,1,0,0,n/a,2,4,0
"org.apache.lucene.index.InvertedDocEndConsumer",7,0,4,4,418,0,0,4,6,6,1,0,0,n/a,1,4,0
"org.apache.lucene.index.InvertedDocEndConsumerPerField",7,0,2,2,0,0,0,2,20,4,1,0,0,n/a,0,2,0
"org.apache.lucene.index.InvertedDocEndConsumerPerThread",8,0,4,4,418,0,0,4,22,6,1,0,0,n/a,1,4,0
"org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy",5,0,4,4,418,0,1,1,26,11,0,0,0,"1,50",0,2,3
"org.apache.lucene.index.LogByteSizeMergePolicy",8,12,43,55,418,2,0,4,87,40,1,23,0,"1,00",5,11,10
"org.apache.lucene.index.LogDocMergePolicy",5,10,37,47,418,2,0,2,36,18,1,23,0,"1,00",2,5,4
"org.apache.lucene.index.LogMergePolicy",19,13,33,46,418,1,0,2,533,368,2,1,0,"3,96",18,44,99
"org.apache.lucene.index.LogMergePolicy.SegmentInfoAndLevel",2,3,2,5,418,0,0,1,19,18,0,0,0,"2,00",1,2,4
"org.apache.lucene.index.MergeDocIDRemapper",4,6,2,8,419,0,0,1,82,68,0,0,0,"7,00",1,4,14
"org.apache.lucene.index.MergePolicy",14,1,7,8,418,0,0,6,99,18,4,0,0,"1,00",4,9,2
"org.apache.lucene.index.MergePolicy.MergeAbortedException",5,0,2,2,0,0,0,0,8,8,0,0,0,"1,00",0,2,2
"org.apache.lucene.index.MergePolicy.MergeException",3,1,3,4,418,0,0,1,18,14,0,0,0,"1,00",1,3,3
"org.apache.lucene.index.MergePolicy.MergeSpecification",9,1,2,3,418,0,0,1,22,14,0,0,0,"1,50",1,2,3
"org.apache.lucene.index.MergePolicy.OneMerge",18,13,11,24,418,0,0,2,117,92,0,0,0,"2,18",6,13,24
"org.apache.lucene.index.MergeScheduler",9,0,2,2,418,0,0,2,15,6,3,0,0,n/a,0,2,0
"org.apache.lucene.index.MultiLevelSkipListReader",7,14,10,24,25,0,0,1,174,125,1,0,0,"3,11",4,17,28
"org.apache.lucene.index.MultiLevelSkipListReader.SkipBuffer",4,5,30,35,24,2,0,1,37,36,0,14,0,"1,00",3,10,7
"org.apache.lucene.index.MultiLevelSkipListWriter",6,3,6,9,418,0,0,1,108,56,1,0,0,"3,20",1,12,16
"org.apache.lucene.index.MultiPassIndexSplitter",12,0,3,3,451,0,0,1,158,113,0,0,0,"8,33",0,17,25
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteAtomicIndexReader",7,11,114,125,421,2,0,2,62,58,0,73,7,"1,67",5,19,15
"org.apache.lucene.index.MultiPassIndexSplitter.FakeDeleteIndexReader",5,15,108,123,424,2,0,1,20,15,0,78,0,"1,00",1,5,3
"org.apache.lucene.index.MultiReader",22,15,106,121,419,1,0,5,387,328,1,35,10,"2,03",26,72,75
"org.apache.lucene.index.MultipleTermPositions",10,4,25,29,421,0,2,7,114,76,0,0,0,"1,62",9,31,21
"org.apache.lucene.index.MultipleTermPositions.IntQueue",3,4,6,10,11,0,0,1,28,28,0,0,0,"1,17",2,7,7
"org.apache.lucene.index.MultipleTermPositions.TermPositionsQueue",4,3,16,19,11,1,0,2,16,16,0,10,0,"1,67",2,8,5
"org.apache.lucene.index.NoDeletionPolicy",4,1,5,6,419,0,1,2,14,7,0,0,0,"1,00",0,3,3
"org.apache.lucene.index.NoMergePolicy",10,4,15,19,419,1,0,6,46,28,0,0,1,"1,00",5,8,8
"org.apache.lucene.index.NoMergeScheduler",5,1,5,6,419,1,0,2,21,9,0,0,0,"1,00",0,3,3
"org.apache.lucene.index.NormsWriter",18,2,9,11,418,1,0,4,114,97,0,0,0,"4,40",1,16,22
"org.apache.lucene.index.NormsWriterPerField",10,7,7,14,418,1,0,1,50,44,0,0,0,"1,60",1,11,8
"org.apache.lucene.index.NormsWriterPerThread",8,2,10,12,418,1,0,5,37,21,0,0,0,"1,00",2,7,6
"org.apache.lucene.index.PKIndexSplitter",14,6,9,15,439,0,0,2,102,76,0,0,0,"1,33",1,19,12
"org.apache.lucene.index.PKIndexSplitter.DocumentFilteredAtomicIndexReader",9,11,112,123,421,2,0,2,60,59,0,75,5,"2,14",5,20,15
"org.apache.lucene.index.ParallelArrayTermVectorMapper",7,10,10,20,7,1,0,1,55,48,0,3,0,"3,00",1,5,9
"org.apache.lucene.index.ParallelPostingsArray",9,5,5,10,11,0,0,1,30,30,2,0,0,"1,00",3,6,5
"org.apache.lucene.index.ParallelReader",19,17,107,124,422,1,0,8,411,339,0,35,10,"2,16",26,73,82
"org.apache.lucene.index.ParallelReader.ParallelTermDocs",6,1,18,19,422,0,1,1,39,38,1,0,0,"1,70",5,19,17
"org.apache.lucene.index.ParallelReader.ParallelTermEnum",4,3,10,13,422,1,0,1,62,59,0,0,0,"2,67",3,13,16
"org.apache.lucene.index.ParallelReader.ParallelTermPositions",5,1,28,29,422,1,2,1,23,21,0,7,1,"1,17",4,12,7
"org.apache.lucene.index.Payload",28,3,14,17,11,0,0,1,161,88,0,0,0,"1,64",8,16,23
"org.apache.lucene.index.PayloadProcessorProvider",8,0,2,2,418,0,0,1,41,9,1,0,0,"1,00",2,3,2
"org.apache.lucene.index.PayloadProcessorProvider.DirPayloadProcessor",2,0,1,1,9,1,0,0,5,2,0,0,0,n/a,0,0,0
"org.apache.lucene.index.PayloadProcessorProvider.PayloadProcessor",4,0,2,2,0,0,0,2,17,4,1,0,0,n/a,2,2,0
"org.apache.lucene.index.PayloadProcessorProvider.ReaderPayloadProcessor",8,0,1,1,8,0,0,1,13,3,2,0,0,n/a,1,1,0
"org.apache.lucene.index.PersistentSnapshotDeletionPolicy",16,6,21,27,422,1,1,1,156,84,0,7,3,"2,29",2,35,16
"org.apache.lucene.index.PositionBasedTermVectorMapper",4,6,13,19,4,1,0,2,83,47,0,2,1,"1,83",2,9,11
"org.apache.lucene.index.PositionBasedTermVectorMapper.TVPositionInfo",2,3,5,8,1,0,0,2,43,28,0,0,0,"1,40",3,5,7
"org.apache.lucene.index.PrefixCodedTerms",5,1,3,4,418,0,0,2,18,12,0,0,0,"1,00",2,5,3
"org.apache.lucene.index.PrefixCodedTerms.Builder",7,5,3,8,418,0,0,1,52,49,0,0,0,"2,00",2,16,6
"org.apache.lucene.index.PrefixCodedTerms.PrefixCodedTermsIterator",7,4,4,8,418,0,0,2,38,37,0,0,0,"1,25",2,16,5
"org.apache.lucene.index.PruningReader",20,18,113,131,428,2,0,1,171,141,0,74,6,"4,71",6,28,33
"org.apache.lucene.index.PruningReader.PruningTermEnum",5,1,11,12,428,2,0,1,26,23,0,3,1,"3,00",1,8,6
"org.apache.lucene.index.PruningReader.PruningTermPositions",9,6,34,40,428,2,2,1,77,76,0,6,6,"2,12",4,24,17
"org.apache.lucene.index.ReadOnlyDirectoryReader",7,25,124,149,418,2,0,1,16,16,0,85,1,"1,00",0,8,4
"org.apache.lucene.index.ReadOnlySegmentReader",4,27,132,159,418,2,0,2,30,13,0,99,2,"1,00",1,4,3
"org.apache.lucene.index.ReusableStringReader",3,3,4,7,1,0,0,2,38,34,0,0,0,"1,50",2,4,6
"org.apache.lucene.index.SegmentCoreReaders",16,17,14,31,418,0,0,1,187,159,0,0,0,"2,29",6,31,32
"org.apache.lucene.index.SegmentInfo",37,24,43,67,418,0,0,2,754,588,0,0,0,"3,19",22,66,137
"org.apache.lucene.index.SegmentInfos",42,27,51,78,418,0,0,4,741,506,0,0,0,"2,10",28,95,109
"org.apache.lucene.index.SegmentInfos.FindSegmentsFile",11,1,4,5,418,0,0,1,200,140,4,0,0,"10,67",3,17,32
"org.apache.lucene.index.SegmentMergeInfo",10,9,5,14,418,0,0,1,62,60,0,0,0,"2,40",3,13,12
"org.apache.lucene.index.SegmentMergeQueue",5,3,16,19,418,1,0,2,17,17,0,10,0,"1,67",1,8,5
"org.apache.lucene.index.SegmentMerger",44,18,18,36,418,0,0,1,527,434,0,0,0,"4,68",9,97,89
"org.apache.lucene.index.SegmentMerger.CheckAbort",5,3,2,5,418,0,0,1,24,16,1,0,0,"1,50",0,3,3
"org.apache.lucene.index.SegmentNorms",10,11,10,21,418,0,0,1,209,161,0,0,0,"2,40",4,23,24
"org.apache.lucene.index.SegmentReader",46,27,136,163,418,1,0,7,748,608,1,33,12,"1,97",49,146,132
"org.apache.lucene.index.SegmentReader.CoreClosedListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.index.SegmentReader.FieldsReaderLocal",4,3,7,10,418,1,0,1,9,6,0,3,1,"1,00",1,3,1
"org.apache.lucene.index.SegmentTermDocs",20,16,22,38,418,0,1,1,168,159,2,0,0,"2,64",6,35,37
"org.apache.lucene.index.SegmentTermEnum",14,16,17,33,418,1,0,1,177,146,0,0,0,"2,08",9,32,27
"org.apache.lucene.index.SegmentTermPositionVector",6,6,19,25,5,1,2,1,58,30,0,7,0,"2,33",2,4,7
"org.apache.lucene.index.SegmentTermPositions",10,23,41,64,418,1,2,2,155,123,0,5,6,"1,87",7,25,28
"org.apache.lucene.index.SegmentTermVector",6,3,14,17,2,0,1,3,58,49,1,0,0,"1,88",7,8,15
"org.apache.lucene.index.SegmentWriteState",23,11,1,12,418,0,0,0,46,23,0,0,0,"1,00",0,1,1
"org.apache.lucene.index.SerialMergeScheduler",5,0,4,4,419,1,0,2,19,14,1,0,0,"2,00",0,4,4
"org.apache.lucene.index.SnapshotDeletionPolicy",5,4,14,18,421,0,1,1,225,111,1,0,0,"2,58",5,17,31
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotCommitPoint",3,1,25,26,421,1,0,1,59,53,0,4,0,"1,08",10,21,13
"org.apache.lucene.index.SnapshotDeletionPolicy.SnapshotInfo",2,3,2,5,419,0,0,0,15,14,0,0,0,"1,00",1,2,2
"org.apache.lucene.index.SortedTermVectorMapper",4,7,12,19,4,1,0,1,100,66,0,3,0,"2,80",1,13,14
"org.apache.lucene.index.StaleReaderException",2,0,1,1,0,0,0,0,15,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.index.StoredFieldsWriter",15,7,9,16,418,0,0,2,87,79,0,0,0,"1,78",2,22,16
"org.apache.lucene.index.StoredFieldsWriter.PerDoc",7,5,8,13,418,1,0,2,23,23,0,1,0,"1,00",1,11,4
"org.apache.lucene.index.StoredFieldsWriterPerThread",10,4,5,9,418,0,0,1,48,43,0,0,0,"1,60",1,14,8
"org.apache.lucene.index.Term",309,2,12,14,6,0,0,1,99,68,0,0,0,"2,08",7,13,25
"org.apache.lucene.index.TermBuffer",8,6,9,15,418,0,0,1,102,97,0,0,0,"2,00",4,21,18
"org.apache.lucene.index.TermDocs",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,8,n/a
"org.apache.lucene.index.TermEnum",82,0,4,4,7,0,0,4,13,6,8,0,0,n/a,3,4,0
"org.apache.lucene.index.TermFreqVector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,6,n/a
"org.apache.lucene.index.TermInfo",9,4,5,9,0,0,0,1,33,31,1,0,0,"1,00",0,5,5
"org.apache.lucene.index.TermInfosReader",17,11,13,24,418,0,0,1,201,174,0,0,0,"2,77",10,38,36
"org.apache.lucene.index.TermInfosReader.CloneableTerm",3,1,5,6,8,1,0,0,19,19,0,0,0,"1,00",3,9,4
"org.apache.lucene.index.TermInfosReader.TermInfoAndOrd",2,5,6,11,1,1,0,0,9,8,0,2,0,"1,00",0,2,1
"org.apache.lucene.index.TermInfosReader.ThreadResources",2,1,0,1,418,0,0,0,6,3,0,0,0,n/a,0,0,0
"org.apache.lucene.index.TermInfosReaderIndex",14,8,9,17,418,0,0,2,200,118,0,0,0,"2,22",7,39,20
"org.apache.lucene.index.TermInfosWriter",16,19,9,28,418,0,0,1,194,154,0,0,0,"2,89",2,24,26
"org.apache.lucene.index.TermPositionVector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.index.TermPositions",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.lucene.index.TermVectorAccessor",11,4,3,7,420,0,0,1,92,58,0,0,0,"4,00",0,21,12
"org.apache.lucene.index.TermVectorAccessor.TermVectorMapperDecorator",3,4,12,16,2,1,0,1,25,25,0,0,3,"1,00",2,10,5
"org.apache.lucene.index.TermVectorEntry",4,5,13,18,1,0,0,5,64,60,0,0,0,"1,38",8,13,18
"org.apache.lucene.index.TermVectorEntryFreqSortedComparator",1,0,1,1,2,0,0,1,20,15,0,0,0,"3,00",1,4,3
"org.apache.lucene.index.TermVectorMapper",18,2,7,9,1,0,0,5,74,22,6,0,0,"1,00",2,7,5
"org.apache.lucene.index.TermVectorOffsetInfo",23,3,8,11,0,0,0,2,61,39,0,0,0,"1,50",4,8,12
"org.apache.lucene.index.TermVectorsReader",22,15,21,36,418,0,0,3,426,336,0,0,0,"3,00",11,46,63
"org.apache.lucene.index.TermVectorsTermsWriter",22,10,13,23,418,1,0,2,160,143,0,1,0,"2,44",2,28,22
"org.apache.lucene.index.TermVectorsTermsWriter.PerDoc",10,7,9,16,418,1,0,2,36,36,0,1,0,"1,40",1,15,7
"org.apache.lucene.index.TermVectorsTermsWriterPerField",24,11,19,30,418,1,0,5,193,170,0,0,0,"2,82",3,36,31
"org.apache.lucene.index.TermVectorsTermsWriterPerField.TermVectorsPostingsArray",3,7,9,16,12,1,0,3,28,28,0,1,3,"1,00",2,7,4
"org.apache.lucene.index.TermVectorsTermsWriterPerThread",12,7,11,18,418,1,0,2,59,56,0,0,0,"1,43",4,10,10
"org.apache.lucene.index.TermVectorsWriter",15,7,5,12,418,0,0,1,166,139,0,0,0,"4,40",0,28,22
"org.apache.lucene.index.TermsHash",12,5,12,17,418,1,0,2,78,70,0,0,1,"2,14",3,11,15
"org.apache.lucene.index.TermsHashConsumer",9,1,4,5,418,0,0,4,9,9,2,0,0,"1,00",1,4,1
"org.apache.lucene.index.TermsHashConsumerPerField",12,0,8,8,28,0,0,8,10,10,2,0,0,n/a,3,8,0
"org.apache.lucene.index.TermsHashConsumerPerThread",11,0,4,4,418,0,0,4,6,6,2,0,0,n/a,2,4,0
"org.apache.lucene.index.TermsHashPerField",29,23,25,48,418,1,0,1,460,414,0,0,0,"3,32",3,42,83
"org.apache.lucene.index.TermsHashPerThread",21,8,10,18,418,1,0,1,72,70,0,0,0,"2,17",2,19,13
"org.apache.lucene.index.TestFieldNormModifier",15,3,6,9,439,0,0,1,182,167,0,0,0,"1,32",0,24,25
"org.apache.lucene.index.TestIndexSorter",15,4,2,6,452,0,0,1,90,86,0,0,0,"6,00",0,23,12
"org.apache.lucene.index.TestIndexSplitter",15,0,2,2,435,0,0,1,117,108,0,0,0,"2,50",0,28,5
"org.apache.lucene.index.TestMultiPassIndexSplitter",11,3,4,7,453,0,0,1,111,103,0,0,0,"2,00",0,22,8
"org.apache.lucene.index.TestPKIndexSplitter",10,0,4,4,441,0,0,1,73,72,0,0,0,"2,75",1,21,11
"org.apache.lucene.index.TestPruningReader",27,6,13,19,450,0,0,3,301,279,0,0,0,"1,54",2,51,20
"org.apache.lucene.index.TestTermVectorAccessor",12,0,1,1,421,0,0,1,62,62,0,0,0,"2,00",0,15,2
"org.apache.lucene.index.TieredMergePolicy",14,11,37,48,418,1,0,2,531,397,0,1,0,"2,88",28,47,92
"org.apache.lucene.index.TieredMergePolicy.MergeScore",1,0,2,2,0,0,0,2,6,4,1,0,0,n/a,2,2,0
"org.apache.lucene.index.TieredMergePolicy.SegmentByteSizeDescending",2,0,1,1,418,0,0,1,17,17,0,0,0,"3,00",1,2,3
"org.apache.lucene.index.UpgradeIndexMergePolicy",10,2,18,20,419,1,0,1,112,77,0,0,1,"2,09",7,23,23
"org.apache.lucene.index.memory.MemoryIndex",21,9,13,22,422,0,0,4,460,212,0,0,0,"2,42",7,39,46
"org.apache.lucene.index.memory.MemoryIndex.ArrayIntList",4,3,9,12,1,0,0,1,63,58,0,0,0,"1,89",4,9,17
"org.apache.lucene.index.memory.MemoryIndex.Info",4,7,5,12,422,0,0,2,50,27,0,0,0,"1,20",3,6,6
"org.apache.lucene.index.memory.MemoryIndex.MemoryIndexReader",18,12,96,108,422,1,0,5,391,363,0,45,0,"2,35",17,46,122
"org.apache.lucene.index.memory.MemoryIndexTest",20,3,9,12,515,0,0,3,147,111,0,0,0,"2,22",3,28,20
"org.apache.lucene.index.memory.MemoryIndexTest.EmptyMTQ",5,3,26,29,433,2,0,2,27,26,0,20,0,"1,00",3,4,6
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy",18,9,7,16,425,0,0,4,174,89,0,0,0,"2,29",4,15,16
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ByDocComparator",2,1,1,2,1,0,0,1,6,6,0,0,0,"1,00",1,1,1
"org.apache.lucene.index.pruning.CarmelTopKTermPruningPolicy.ThresholdCollector",5,4,9,13,419,1,0,2,32,29,0,0,0,"1,20",1,7,6
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy",16,7,6,13,424,0,0,4,126,77,0,0,0,"2,50",4,15,15
"org.apache.lucene.index.pruning.CarmelUniformTermPruningPolicy.ByDocComparator",2,1,1,2,1,0,0,1,6,6,0,0,0,"1,00",1,1,1
"org.apache.lucene.index.pruning.PruningPolicy",1,5,0,5,0,0,0,0,15,7,0,0,0,n/a,0,0,0
"org.apache.lucene.index.pruning.PruningTool",10,0,2,2,456,0,0,1,138,131,0,0,0,"16,00",1,12,32
"org.apache.lucene.index.pruning.RIDFTermPruningPolicy",7,5,6,11,419,0,0,4,80,58,0,0,0,"1,83",4,12,11
"org.apache.lucene.index.pruning.StorePruningPolicy",8,6,3,9,420,0,0,2,68,41,0,0,0,"3,00",2,8,9
"org.apache.lucene.index.pruning.StorePruningPolicy.DelFieldSelector",3,3,4,7,420,0,1,1,23,23,0,0,0,"2,00",1,4,6
"org.apache.lucene.index.pruning.TFTermPruningPolicy",8,3,6,9,419,0,0,2,97,80,0,0,0,"3,00",4,12,18
"org.apache.lucene.index.pruning.TermPruningPolicy",8,2,9,11,419,0,0,6,167,45,0,0,0,"2,00",7,10,8
"org.apache.lucene.messages.Message",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.lucene.messages.MessageImpl",26,3,7,10,1,0,0,1,41,36,0,0,0,"1,43",5,7,10
"org.apache.lucene.messages.MessagesTestBundle",0,4,1,5,0,0,0,0,32,11,0,0,0,"1,00",0,1,1
"org.apache.lucene.messages.NLS",3,1,11,12,1,0,0,3,159,106,1,0,0,"2,00",5,11,24
"org.apache.lucene.messages.NLSException",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.messages.TestNLS",0,0,6,6,0,0,0,6,74,52,0,0,0,"1,83",0,6,11
"org.apache.lucene.misc.GetTermInfo",5,0,3,3,434,0,0,1,31,28,0,0,0,"1,33",0,9,4
"org.apache.lucene.misc.HighFreqTerms",10,2,5,7,437,0,0,1,130,97,0,0,0,"4,00",3,24,20
"org.apache.lucene.misc.IndexMergeTool",8,0,1,1,445,0,0,1,26,22,0,0,0,"3,00",0,9,3
"org.apache.lucene.misc.SweetSpotSimilarity",2,15,32,47,419,2,0,3,223,109,0,14,2,"1,90",5,13,19
"org.apache.lucene.misc.SweetSpotSimilarityTest",3,0,3,3,419,0,0,3,158,146,0,0,0,"5,00",0,8,20
"org.apache.lucene.misc.TermInfoWiTFQueue",3,3,15,18,9,1,0,1,13,10,0,10,0,"1,00",1,3,2
"org.apache.lucene.misc.TermStats",4,3,2,5,7,0,0,0,14,14,0,0,0,"1,00",0,2,2
"org.apache.lucene.misc.TestHighFreqTerms",10,3,17,20,419,0,0,1,212,188,0,0,0,"2,06",3,26,35
"org.apache.lucene.misc.TestLengthNormModifier",15,3,5,8,439,0,0,1,147,134,0,0,0,"1,40",0,22,21
"org.apache.lucene.misc.TotalTermFreqComparatorSortDescending",2,0,1,1,8,0,0,1,17,11,0,0,0,"3,00",1,1,3
"org.apache.lucene.queryParser.CharStream",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,12,n/a
"org.apache.lucene.queryParser.FastCharStream",3,6,26,32,2,0,1,4,86,80,0,0,0,"1,36",10,14,19
"org.apache.lucene.queryParser.MultiFieldQueryParser",11,36,87,123,490,1,1,1,303,167,0,55,6,"3,58",9,27,43
"org.apache.lucene.queryParser.ParseException",57,5,5,10,2,0,0,1,181,112,0,0,0,"5,20",2,5,26
"org.apache.lucene.queryParser.QueryParser",72,46,80,126,489,0,1,4,1.699,1.222,5,0,0,"4,06",53,128,325
"org.apache.lucene.queryParser.QueryParser.JJCalls",2,4,0,4,1,0,0,0,6,6,0,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.QueryParser.LookaheadSuccess",1,0,0,0,0,0,0,0,1,1,0,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.QueryParser.Operator",6,2,0,2,0,n/a,0,0,4,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.QueryParserConstants",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.lucene.queryParser.QueryParserTokenManager",5,21,36,57,4,0,1,2,1.206,1.194,0,0,0,"10,36",25,47,373
"org.apache.lucene.queryParser.TestAttributes",24,0,1,1,485,0,0,1,164,164,0,0,0,"1,00",0,31,4
"org.apache.lucene.queryParser.Token",4,8,7,15,0,0,0,2,105,38,0,0,0,"1,14",4,7,8
"org.apache.lucene.queryParser.TokenMgrError",2,5,6,11,0,0,0,2,123,72,0,0,0,"3,17",3,6,19
"org.apache.lucene.queryParser.analyzing.ASCIIAnalyzer",8,1,11,12,70,1,0,1,12,12,0,6,0,"1,00",1,6,2
"org.apache.lucene.queryParser.analyzing.AnalyzingQueryParser",8,34,80,114,490,1,1,4,317,213,0,57,4,"6,80",4,18,34
"org.apache.lucene.queryParser.analyzing.TestAnalyzingQueryParser",5,9,6,15,457,0,0,1,63,60,0,0,0,"1,67",1,8,10
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser",10,37,84,121,505,1,1,1,138,92,0,54,7,"1,89",7,25,17
"org.apache.lucene.queryParser.complexPhrase.ComplexPhraseQueryParser.ComplexPhraseQuery",16,5,20,25,504,1,0,1,190,158,0,9,3,"5,14",4,19,36
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery",14,5,5,10,491,0,0,1,83,77,0,0,0,"1,80",0,19,9
"org.apache.lucene.queryParser.complexPhrase.TestComplexPhraseQuery.DocData",1,2,1,3,0,0,0,0,9,9,0,0,0,"1,00",0,1,1
"org.apache.lucene.queryParser.core.QueryNodeError",9,2,5,7,2,0,1,1,43,18,0,0,0,"1,00",1,5,4
"org.apache.lucene.queryParser.core.QueryNodeException",70,2,9,11,6,0,1,1,47,33,0,0,0,"1,00",5,11,8
"org.apache.lucene.queryParser.core.QueryNodeParseException",8,5,12,17,5,0,0,5,79,45,0,0,0,"1,00",4,13,12
"org.apache.lucene.queryParser.core.QueryParserHelper",7,4,10,14,16,0,0,1,206,60,1,0,0,"1,50",5,14,15
"org.apache.lucene.queryParser.core.builders.QueryBuilder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.queryParser.core.builders.QueryTreeBuilder",19,3,9,12,14,0,0,1,148,85,2,0,0,"2,67",3,16,24
"org.apache.lucene.queryParser.core.builders.TestQueryTreeBuilder",4,0,1,1,13,0,0,1,9,9,0,0,0,"1,00",0,3,1
"org.apache.lucene.queryParser.core.builders.TestQueryTreeBuilder.DummyBuilder",3,0,1,1,10,0,0,1,5,5,0,0,0,"1,00",1,1,1
"org.apache.lucene.queryParser.core.config.AbstractQueryConfig",17,5,29,34,24,1,0,2,114,58,0,17,1,"2,29",5,10,16
"org.apache.lucene.queryParser.core.config.ConfigAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.queryParser.core.config.ConfigurationKey",2,0,2,2,0,0,0,1,20,6,0,0,0,"1,00",1,2,2
"org.apache.lucene.queryParser.core.config.FieldConfig",10,1,5,6,1,0,0,1,58,25,0,0,0,"1,20",3,6,6
"org.apache.lucene.queryParser.core.config.FieldConfigListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.queryParser.core.config.QueryConfigHandler",22,1,3,4,1,0,0,1,74,17,2,0,0,"1,33",2,4,4
"org.apache.lucene.queryParser.core.messages.QueryParserMessages",26,17,2,19,2,1,0,0,31,24,0,0,0,"1,00",0,2,1
"org.apache.lucene.queryParser.core.nodes.AndQueryNode",6,1,3,4,2,0,0,1,48,39,0,0,0,"3,00",2,3,9
"org.apache.lucene.queryParser.core.nodes.AnyQueryNode",2,3,8,11,2,0,0,1,101,78,0,0,0,"2,38",6,8,19
"org.apache.lucene.queryParser.core.nodes.BooleanQueryNode",13,1,4,5,2,0,0,2,52,41,1,0,0,"2,25",3,4,9
"org.apache.lucene.queryParser.core.nodes.BoostQueryNode",10,2,7,9,10,0,0,1,80,48,0,0,0,"1,57",6,8,11
"org.apache.lucene.queryParser.core.nodes.DeletedQueryNode",3,1,4,5,2,0,0,2,23,17,0,0,0,"1,00",3,4,4
"org.apache.lucene.queryParser.core.nodes.FieldQueryNode",23,6,20,26,2,0,0,1,138,93,1,0,0,"1,15",13,21,23
"org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.lucene.queryParser.core.nodes.FieldableNode",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode",10,3,8,11,2,0,0,2,67,42,0,0,0,"1,12",5,8,9
"org.apache.lucene.queryParser.core.nodes.GroupQueryNode",10,1,6,7,9,0,0,3,47,34,0,0,0,"1,33",4,7,8
"org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode",4,1,4,5,2,0,0,2,23,17,0,0,0,"1,00",3,4,4
"org.apache.lucene.queryParser.core.nodes.MatchNoDocsQueryNode",5,1,2,3,0,0,0,0,15,9,0,0,0,"1,00",1,2,2
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode",15,2,7,9,10,0,0,2,73,53,1,0,0,"1,57",5,11,11
"org.apache.lucene.queryParser.core.nodes.ModifierQueryNode.Modifier",8,3,3,6,0,n/a,0,1,40,37,n/a,0,0,"4,00",3,3,12
"org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode",2,1,4,5,2,0,0,2,24,19,0,0,0,"1,00",3,4,4
"org.apache.lucene.queryParser.core.nodes.OpaqueQueryNode",1,3,6,9,2,0,0,1,47,30,0,0,0,"1,00",5,6,6
"org.apache.lucene.queryParser.core.nodes.OrQueryNode",4,1,3,4,2,0,0,1,49,39,0,0,0,"3,00",2,3,9
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode",11,2,6,8,3,0,0,2,54,32,0,0,0,"1,00",5,6,6
"org.apache.lucene.queryParser.core.nodes.ParametricQueryNode.CompareOperator",7,6,0,6,0,n/a,0,0,26,26,n/a,0,0,"1,00",0,0,6
"org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode",5,1,10,11,3,0,0,3,75,70,0,0,0,"1,60",8,10,16
"org.apache.lucene.queryParser.core.nodes.PathQueryNode",3,2,10,12,3,0,0,1,113,68,0,0,0,"1,60",8,12,16
"org.apache.lucene.queryParser.core.nodes.PathQueryNode.QueryText",1,3,6,9,0,0,0,3,55,32,0,0,0,"1,00",5,6,6
"org.apache.lucene.queryParser.core.nodes.PhraseSlopQueryNode",5,2,9,11,10,0,0,1,64,58,0,0,0,"1,56",7,10,14
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode",5,5,12,17,10,0,0,2,158,106,0,0,0,"2,17",8,14,26
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.ProximityType",1,2,2,4,1,0,0,0,12,11,0,0,0,"1,00",0,2,2
"org.apache.lucene.queryParser.core.nodes.ProximityQueryNode.Type",2,3,1,4,0,n/a,0,1,15,15,n/a,0,0,"1,00",1,1,3
"org.apache.lucene.queryParser.core.nodes.QueryNode",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,19,n/a
"org.apache.lucene.queryParser.core.nodes.QueryNodeImpl",7,7,24,31,4,0,0,2,205,143,3,0,0,"1,58",14,26,38
"org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode",4,1,4,5,2,0,0,2,40,25,0,0,0,"1,25",3,4,5
"org.apache.lucene.queryParser.core.nodes.RangeQueryNode",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.lucene.queryParser.core.nodes.SlopQueryNode",9,2,9,11,9,0,0,1,73,57,0,0,0,"1,56",7,10,14
"org.apache.lucene.queryParser.core.nodes.TestQueryNode",0,0,2,2,0,0,0,2,19,17,0,0,0,"1,00",0,2,2
"org.apache.lucene.queryParser.core.nodes.TextableQueryNode",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode",7,1,6,7,2,0,0,4,62,56,0,0,0,"2,33",4,6,14
"org.apache.lucene.queryParser.core.nodes.ValueQueryNode",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax.Type",6,2,0,2,0,n/a,0,0,3,3,n/a,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.core.parser.SyntaxParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor",9,0,4,4,18,0,0,3,43,31,0,0,0,"2,00",3,6,8
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessor",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl",25,2,11,13,13,0,0,2,177,67,21,0,0,"1,75",7,13,14
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl.ChildrenList",2,2,0,2,3,0,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline",9,2,29,31,12,0,0,1,244,116,1,0,0,"1,21",23,29,35
"org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor",5,0,5,5,12,0,0,4,56,49,0,0,0,"2,60",4,9,13
"org.apache.lucene.queryParser.core.util.QueryNodeOperation",4,0,2,2,8,0,0,1,58,45,0,0,0,"5,50",1,7,11
"org.apache.lucene.queryParser.core.util.QueryNodeOperation.ANDOperation",1,4,0,4,0,n/a,0,0,3,3,n/a,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.core.util.StringUtils",9,0,1,1,0,0,0,0,25,9,0,0,0,"2,00",1,1,2
"org.apache.lucene.queryParser.core.util.UnescapedCharSequence",6,2,12,14,1,0,0,1,122,87,0,0,0,"1,92",9,12,23
"org.apache.lucene.queryParser.ext.ExtendableQueryParser",6,37,79,116,491,1,1,1,108,31,0,60,1,"1,25",2,6,5
"org.apache.lucene.queryParser.ext.ExtensionQuery",1,3,4,7,490,0,0,3,49,19,0,0,0,"1,00",3,4,4
"org.apache.lucene.queryParser.ext.ExtensionStub",4,0,1,1,425,0,0,1,23,7,0,0,0,"1,00",1,3,1
"org.apache.lucene.queryParser.ext.Extensions",2,3,9,12,491,0,0,2,156,42,0,0,0,"1,22",6,11,11
"org.apache.lucene.queryParser.ext.Extensions.Pair",2,2,1,3,0,0,0,0,24,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.queryParser.ext.ParserExtension",2,0,1,1,421,0,0,1,28,3,0,0,0,n/a,1,1,0
"org.apache.lucene.queryParser.ext.TestExtendableQueryParser",9,1,7,8,490,0,0,1,94,91,0,0,0,"1,71",3,13,12
"org.apache.lucene.queryParser.ext.TestExtensions",0,1,6,7,0,0,0,1,49,45,0,0,0,"1,00",0,6,6
"org.apache.lucene.queryParser.precedence.PrecedenceQueryParser",4,4,51,55,528,2,0,0,28,9,0,46,0,"1,00",0,6,2
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser",19,2,32,34,505,0,0,4,473,425,0,0,0,"1,31",8,41,42
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestAnalyzer",5,1,10,11,43,1,0,1,7,6,0,6,0,"1,00",1,2,1
"org.apache.lucene.queryParser.precedence.TestPrecedenceQueryParser.QPTestFilter",6,10,37,47,27,3,0,1,41,37,0,22,1,"2,33",1,12,7
"org.apache.lucene.queryParser.precedence.processors.BooleanModifiersQueryNodeProcessor",11,4,17,21,458,1,0,3,73,56,0,3,1,"2,17",5,13,13
"org.apache.lucene.queryParser.precedence.processors.PrecedenceQueryNodeProcessorPipeline",5,2,31,33,468,2,0,0,28,11,0,27,0,"3,00",0,6,3
"org.apache.lucene.queryParser.spans.SpanOrQueryNodeBuilder",7,0,3,3,442,0,2,1,20,13,0,0,0,"2,00",1,3,2
"org.apache.lucene.queryParser.spans.SpanTermQueryNodeBuilder",6,0,3,3,437,0,2,1,11,7,0,0,0,"1,00",1,5,1
"org.apache.lucene.queryParser.spans.SpansQueryConfigHandler",3,2,5,7,4,1,0,1,17,9,0,2,1,"1,00",1,3,2
"org.apache.lucene.queryParser.spans.SpansQueryTreeBuilder",7,2,13,15,441,1,2,1,21,11,0,3,1,"1,00",1,3,2
"org.apache.lucene.queryParser.spans.SpansValidatorQueryNodeProcessor",8,2,14,16,17,1,0,3,30,20,0,4,0,"1,33",3,4,4
"org.apache.lucene.queryParser.spans.TestSpanQueryParser",10,4,8,12,465,0,0,1,157,87,0,0,0,"1,00",2,16,8
"org.apache.lucene.queryParser.spans.TestSpanQueryParserSimpleSample",8,0,1,1,457,0,0,1,95,19,0,0,0,"3,00",0,7,3
"org.apache.lucene.queryParser.spans.UniqueFieldAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.spans.UniqueFieldAttributeImpl",1,3,15,18,24,1,1,1,53,45,0,3,1,"1,25",4,8,10
"org.apache.lucene.queryParser.spans.UniqueFieldQueryNodeProcessor",5,2,14,16,15,1,0,3,39,29,0,4,0,"2,00",3,5,6
"org.apache.lucene.queryParser.standard.MultiFieldQueryParserWrapper",8,0,5,5,421,0,0,1,232,61,0,0,0,"2,80",3,8,14
"org.apache.lucene.queryParser.standard.QueryParserUtil",7,0,4,4,425,0,0,2,167,65,0,0,0,"3,75",4,7,15
"org.apache.lucene.queryParser.standard.QueryParserWrapper",22,9,45,54,507,0,0,14,292,226,0,0,0,"1,40",28,54,63
"org.apache.lucene.queryParser.standard.QueryParserWrapper.Operator",2,2,0,2,0,n/a,0,0,5,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.standard.StandardQueryParser",31,4,49,53,524,1,0,31,533,208,1,8,1,"1,21",17,63,47
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper",6,1,2,3,83,0,0,2,94,59,0,0,0,"1,00",0,4,2
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.MultiAnalyzer",6,1,11,12,83,1,0,1,15,11,0,6,0,"1,00",1,5,2
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.PosIncrementAnalyzer",6,1,11,12,70,1,0,1,15,11,0,6,0,"1,00",1,5,2
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestFilter",9,12,37,49,83,3,0,1,48,48,0,22,1,"2,33",1,15,7
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerQPHelper.TestPosIncrementFilter",6,7,36,43,27,3,0,1,22,21,0,24,0,"2,50",1,6,5
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper",4,1,2,3,75,0,0,2,91,55,0,0,0,"1,00",0,4,2
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.MultiAnalyzer",6,1,11,12,75,1,0,1,15,11,0,6,0,"1,00",1,5,2
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.PosIncrementAnalyzer",6,1,11,12,70,1,0,1,15,11,0,6,0,"1,00",1,5,2
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestFilter",9,12,36,48,75,3,0,1,41,41,0,24,0,"3,00",1,13,6
"org.apache.lucene.queryParser.standard.TestMultiAnalyzerWrapper.TestPosIncrementFilter",6,7,36,43,27,3,0,1,22,21,0,24,0,"2,50",1,6,5
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper",18,0,11,11,431,0,0,5,248,220,0,0,0,"1,00",0,22,11
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.AnalyzerReturningNull",4,2,11,13,31,1,0,1,16,13,0,6,0,"1,50",1,2,3
"org.apache.lucene.queryParser.standard.TestMultiFieldQPHelper.AnalyzerReturningNull.EmptyTokenStream",2,4,31,35,25,2,0,1,6,6,0,21,0,"1,00",1,1,1
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper",21,0,11,11,545,0,0,6,252,222,0,0,0,"1,00",0,28,11
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.AnalyzerReturningNull",6,2,11,13,70,1,0,1,16,13,0,6,0,"1,50",1,4,3
"org.apache.lucene.queryParser.standard.TestMultiFieldQueryParserWrapper.AnalyzerReturningNull.EmptyTokenStream",2,4,31,35,25,2,0,1,6,6,0,21,0,"1,00",1,1,1
"org.apache.lucene.queryParser.standard.TestNumericQueryParser",19,17,15,32,432,0,0,1,344,280,0,0,0,"2,93",5,27,44
"org.apache.lucene.queryParser.standard.TestNumericQueryParser.NumberType",1,3,0,3,0,n/a,0,0,3,3,n/a,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.standard.TestQPHelper",41,2,57,59,529,0,0,12,884,723,0,0,0,"1,23",9,98,70
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedAnalyzer",4,1,10,11,34,1,0,1,6,6,0,6,0,"1,00",1,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.CannedTokenizer",6,8,42,50,28,3,0,1,35,35,0,23,1,"2,33",1,10,7
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestAnalyzer",5,1,10,11,43,1,0,1,7,6,0,6,0,"1,00",1,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestFilter",6,10,37,47,27,3,0,1,43,39,0,22,1,"2,33",1,13,7
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser",4,0,1,1,48,0,0,0,7,7,0,0,0,"1,00",0,2,1
"org.apache.lucene.queryParser.standard.TestQPHelper.QPTestParser.QPTestParserQueryNodeProcessor",8,2,14,16,17,1,0,3,22,22,0,4,0,"1,33",3,4,4
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper",37,2,55,57,528,0,0,12,845,685,0,0,0,"1,24",9,93,68
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestAnalyzer",5,1,10,11,43,1,0,1,7,6,0,6,0,"1,00",1,2,1
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestFilter",6,10,36,46,27,3,0,1,35,31,0,24,0,"3,00",1,11,6
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser",7,0,3,3,445,0,0,2,21,21,0,0,0,"1,00",2,7,3
"org.apache.lucene.queryParser.standard.TestQueryParserWrapper.QPTestParser.QPTestParserQueryNodeProcessor",8,2,14,16,17,1,0,3,22,22,0,4,0,"1,33",3,4,4
"org.apache.lucene.queryParser.standard.builders.AnyQueryNodeBuilder",11,0,2,2,434,0,0,1,29,25,0,0,0,"2,50",1,9,5
"org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder",14,0,3,3,437,0,0,1,51,41,0,0,0,"3,33",2,11,10
"org.apache.lucene.queryParser.standard.builders.BoostQueryNodeBuilder",5,0,2,2,435,0,0,1,22,15,0,0,0,"1,50",1,6,3
"org.apache.lucene.queryParser.standard.builders.DummyQueryNodeBuilder",3,0,2,2,432,0,0,1,20,7,0,0,0,"1,00",1,2,2
"org.apache.lucene.queryParser.standard.builders.FieldQueryNodeBuilder",5,0,2,2,433,0,0,1,13,9,0,0,0,"1,00",1,6,2
"org.apache.lucene.queryParser.standard.builders.FuzzyQueryNodeBuilder",5,0,2,2,449,0,0,1,14,10,0,0,0,"1,00",1,6,2
"org.apache.lucene.queryParser.standard.builders.GroupQueryNodeBuilder",5,0,2,2,435,0,0,1,15,9,0,0,0,"1,00",1,3,2
"org.apache.lucene.queryParser.standard.builders.MatchAllDocsQueryNodeBuilder",7,0,2,2,434,0,0,1,19,13,0,0,0,"1,50",1,5,3
"org.apache.lucene.queryParser.standard.builders.MatchNoDocsQueryNodeBuilder",7,0,2,2,431,0,0,1,19,13,0,0,0,"1,50",1,5,3
"org.apache.lucene.queryParser.standard.builders.ModifierQueryNodeBuilder",5,0,2,2,436,0,0,1,15,9,0,0,0,"1,00",1,3,2
"org.apache.lucene.queryParser.standard.builders.MultiPhraseQueryNodeBuilder",9,0,2,2,452,0,0,1,35,30,0,0,0,"3,00",1,6,6
"org.apache.lucene.queryParser.standard.builders.NumericRangeQueryNodeBuilder",10,0,2,2,450,0,0,1,57,47,0,0,0,"4,50",1,11,9
"org.apache.lucene.queryParser.standard.builders.PhraseQueryNodeBuilder",7,0,2,2,448,0,0,1,23,18,0,0,0,"2,00",1,7,4
"org.apache.lucene.queryParser.standard.builders.PrefixWildcardQueryNodeBuilder",8,0,2,2,461,0,0,1,19,14,0,0,0,"1,50",1,6,3
"org.apache.lucene.queryParser.standard.builders.RangeQueryNodeBuilder",9,0,2,2,463,0,0,1,34,28,0,0,0,"2,50",1,9,5
"org.apache.lucene.queryParser.standard.builders.SlopQueryNodeBuilder",7,0,2,2,453,0,0,1,22,15,0,0,0,"1,50",1,6,3
"org.apache.lucene.queryParser.standard.builders.StandardBooleanQueryNodeBuilder",14,0,3,3,438,0,0,1,51,41,0,0,0,"3,00",2,12,9
"org.apache.lucene.queryParser.standard.builders.StandardQueryBuilder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder",24,2,11,13,458,1,0,1,38,29,0,3,1,"1,00",1,3,2
"org.apache.lucene.queryParser.standard.builders.TermRangeQueryNodeBuilder",9,0,2,2,461,0,0,1,24,19,0,0,0,"1,50",1,7,3
"org.apache.lucene.queryParser.standard.builders.WildcardQueryNodeBuilder",9,0,2,2,462,0,0,1,19,14,0,0,0,"1,50",1,8,3
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttributeImpl",4,3,16,19,440,1,2,3,53,44,0,3,1,"1,38",4,11,11
"org.apache.lucene.queryParser.standard.config.AnalyzerAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.AnalyzerAttributeImpl",5,3,17,20,440,1,2,3,59,48,0,3,1,"1,33",4,11,12
"org.apache.lucene.queryParser.standard.config.BoostAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.BoostAttributeImpl",4,3,17,20,440,1,2,3,58,45,0,3,1,"1,22",4,12,11
"org.apache.lucene.queryParser.standard.config.DateResolutionAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.DateResolutionAttributeImpl",5,3,17,20,440,1,2,3,56,46,0,3,1,"1,33",4,11,12
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute.Operator",3,2,0,2,0,n/a,0,0,3,3,n/a,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.standard.config.DefaultOperatorAttributeImpl",4,3,17,20,440,1,2,3,75,63,0,3,1,"1,67",4,12,15
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttributeImpl",4,3,17,20,440,1,2,3,56,45,0,3,1,"1,22",4,12,11
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.FieldBoostMapAttributeImpl",4,3,17,20,440,1,2,3,63,50,0,3,1,"1,33",4,12,12
"org.apache.lucene.queryParser.standard.config.FieldBoostMapFCListener",4,2,3,5,442,0,1,1,29,16,0,0,0,"2,00",0,3,4
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionFCListener",5,2,3,5,442,0,1,1,32,18,0,0,0,"2,00",0,3,4
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.FieldDateResolutionMapAttributeImpl",5,3,17,20,440,1,2,3,61,51,0,3,1,"1,33",4,12,12
"org.apache.lucene.queryParser.standard.config.FuzzyAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.lucene.queryParser.standard.config.FuzzyAttributeImpl",4,3,20,23,440,1,2,3,75,63,0,3,1,"1,25",6,15,15
"org.apache.lucene.queryParser.standard.config.FuzzyConfig",3,2,5,7,439,0,0,2,17,17,0,0,0,"1,00",2,5,5
"org.apache.lucene.queryParser.standard.config.LocaleAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.LocaleAttributeImpl",4,4,17,21,440,1,2,3,59,49,0,3,1,"1,44",4,12,13
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttributeImpl",4,3,17,20,440,1,2,3,56,46,0,3,1,"1,33",4,12,12
"org.apache.lucene.queryParser.standard.config.MultiFieldAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.MultiFieldAttributeImpl",4,3,17,20,440,1,2,3,53,42,0,3,1,"1,11",4,11,10
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttributeImpl",6,3,17,20,440,1,2,3,58,46,0,3,1,"1,22",4,12,11
"org.apache.lucene.queryParser.standard.config.NumberDateFormat",1,2,5,7,0,0,0,1,37,27,0,0,0,"1,20",4,5,6
"org.apache.lucene.queryParser.standard.config.NumericConfig",7,3,8,11,1,0,0,3,110,48,0,0,0,"1,62",4,8,13
"org.apache.lucene.queryParser.standard.config.NumericFieldConfigListener",4,1,3,4,442,0,1,1,36,20,0,0,0,"2,50",0,3,5
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.PositionIncrementsAttributeImpl",4,3,17,20,440,1,2,3,56,46,0,3,1,"1,33",4,12,12
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.standard.config.RangeCollatorAttributeImpl",4,3,17,20,440,1,2,3,59,48,0,3,1,"1,33",4,11,12
"org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler",10,1,4,5,2,1,0,0,49,20,0,3,0,"1,00",0,2,1
"org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler.ConfigurationKeys",39,17,0,17,437,0,0,0,144,36,0,0,0,n/a,0,1,0
"org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler.Operator",9,2,0,2,0,n/a,0,0,3,3,n/a,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode",7,8,37,45,10,1,1,1,145,90,0,23,0,"2,11",6,14,19
"org.apache.lucene.queryParser.standard.nodes.BooleanModifierNode",5,2,8,10,12,1,0,0,13,6,0,6,0,"1,00",0,2,1
"org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode",9,6,32,38,9,1,1,4,60,55,0,21,2,"2,33",4,14,14
"org.apache.lucene.queryParser.standard.nodes.NumericQueryNode",8,9,34,43,8,1,1,2,102,48,0,22,1,"1,10",6,12,11
"org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode",10,1,5,6,52,0,0,1,105,70,0,0,0,"2,80",3,7,14
"org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode",4,1,4,5,3,0,0,1,37,20,0,0,0,"1,00",2,8,4
"org.apache.lucene.queryParser.standard.nodes.RangeQueryNode",6,2,6,8,5,0,0,4,78,45,0,0,0,"1,33",4,7,8
"org.apache.lucene.queryParser.standard.nodes.StandardBooleanQueryNode",5,2,6,8,4,1,0,1,22,11,0,3,0,"1,00",1,3,2
"org.apache.lucene.queryParser.standard.nodes.TermRangeQueryNode",3,1,1,2,3,0,0,0,29,7,0,0,0,"1,00",0,1,1
"org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode",11,6,25,31,3,1,0,2,42,27,0,16,3,"1,20",3,12,6
"org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl",13,6,9,15,7,0,1,2,235,181,0,0,0,"5,50",8,12,44
"org.apache.lucene.queryParser.standard.parser.JavaCharStream",1,18,39,57,1,0,0,3,526,479,0,0,0,"2,46",13,39,96
"org.apache.lucene.queryParser.standard.parser.ParseException",4,5,5,10,3,0,0,1,174,105,0,0,0,"5,00",2,5,25
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser",27,23,34,57,29,0,1,3,798,714,0,0,0,"6,27",18,49,207
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.JJCalls",1,4,0,4,0,0,0,0,6,6,0,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser.LookaheadSuccess",1,0,0,0,0,0,0,0,1,1,0,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserConstants",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager",0,21,35,56,0,0,0,2,1.057,1.045,0,0,0,"8,94",24,35,313
"org.apache.lucene.queryParser.standard.parser.Token",0,8,7,15,0,0,0,2,105,38,0,0,0,"1,14",4,7,8
"org.apache.lucene.queryParser.standard.parser.TokenMgrError",0,5,6,11,0,0,0,2,123,72,0,0,0,"3,17",3,6,19
"org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor",10,2,16,18,455,1,0,4,52,41,0,3,1,"2,20",4,10,11
"org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor",21,4,16,20,469,1,0,3,212,177,0,3,1,"5,80",4,26,29
"org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor",7,2,15,17,19,1,0,3,42,33,0,4,0,"2,00",3,6,8
"org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor",9,2,14,16,455,1,0,3,39,30,0,4,0,"2,33",3,9,7
"org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor",8,4,17,21,457,1,0,3,58,46,0,2,2,"1,83",4,10,11
"org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor",7,2,14,16,459,1,0,3,40,28,0,4,0,"2,33",3,9,7
"org.apache.lucene.queryParser.standard.processors.GroupQueryNodeProcessor",15,4,10,14,459,0,1,1,120,103,0,0,0,"3,86",3,15,27
"org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor",9,2,16,18,457,1,0,4,42,31,0,3,1,"1,40",4,10,7
"org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor",5,2,15,17,16,1,0,3,32,24,0,4,0,"1,50",3,7,6
"org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor",8,3,16,19,455,1,0,3,71,55,0,3,1,"2,40",3,11,12
"org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor",11,3,14,17,457,1,0,3,36,25,0,4,0,"1,67",3,4,5
"org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor",15,2,15,17,461,1,0,3,85,61,0,4,0,"3,00",3,15,12
"org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor",17,2,15,17,461,1,0,3,94,76,0,4,0,"3,00",3,17,12
"org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor",13,2,15,17,458,1,0,3,100,71,0,4,0,"2,75",3,13,11
"org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor",6,2,15,17,20,1,0,3,32,24,0,4,0,"1,50",3,5,6
"org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor",4,3,16,19,15,1,0,4,59,46,0,3,1,"2,00",4,9,10
"org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline",7,2,30,32,23,1,0,0,41,25,1,27,0,"1,00",0,5,1
"org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor",12,2,17,19,22,1,0,3,81,58,0,4,0,"3,50",5,10,21
"org.apache.lucene.queryParser.surround.parser.CharStream",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,12,n/a
"org.apache.lucene.queryParser.surround.parser.FastCharStream",1,6,14,20,1,0,0,4,85,80,0,0,0,"1,36",10,14,19
"org.apache.lucene.queryParser.surround.parser.ParseException",2,5,5,10,1,0,0,1,181,112,0,0,0,"5,20",2,5,26
"org.apache.lucene.queryParser.surround.parser.QueryParser",14,29,46,75,441,0,0,3,653,619,0,0,0,"4,00",33,56,184
"org.apache.lucene.queryParser.surround.parser.QueryParser.JJCalls",1,4,0,4,0,0,0,0,6,6,0,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.surround.parser.QueryParser.LookaheadSuccess",1,0,0,0,0,0,0,0,1,1,0,0,0,n/a,0,0,0
"org.apache.lucene.queryParser.surround.parser.QueryParserConstants",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.lucene.queryParser.surround.parser.QueryParserTokenManager",0,19,21,40,0,0,0,2,680,668,0,0,0,"10,24",10,21,215
"org.apache.lucene.queryParser.surround.parser.Token",0,8,7,15,0,0,0,2,105,38,0,0,0,"1,14",4,7,8
"org.apache.lucene.queryParser.surround.parser.TokenMgrError",0,5,6,11,0,0,0,2,123,72,0,0,0,"3,17",3,6,19
"org.apache.lucene.queryParser.surround.query.AndQuery",4,0,2,2,419,0,0,1,10,10,0,0,0,"1,00",1,2,2
"org.apache.lucene.queryParser.surround.query.BasicQueryFactory",3,2,7,9,429,0,0,1,26,26,0,0,0,"1,14",4,9,8
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst",5,7,3,10,443,0,0,1,42,40,0,0,0,"1,33",0,8,4
"org.apache.lucene.queryParser.surround.query.BooleanQueryTst.TestCollector",5,4,10,14,443,1,0,2,44,43,0,0,0,"1,50",1,7,9
"org.apache.lucene.queryParser.surround.query.ComposedQuery",1,3,15,18,419,0,0,2,81,78,0,0,0,"1,60",11,15,24
"org.apache.lucene.queryParser.surround.query.DistanceQuery",5,2,7,9,430,0,0,2,77,77,0,0,0,"1,67",5,9,15
"org.apache.lucene.queryParser.surround.query.DistanceSubQuery",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.queryParser.surround.query.ExceptionQueryTst",3,2,3,5,443,0,0,1,38,38,0,0,0,"2,33",1,5,7
"org.apache.lucene.queryParser.surround.query.FieldsQuery",2,4,9,13,419,0,0,2,61,61,0,0,0,"1,33",6,9,12
"org.apache.lucene.queryParser.surround.query.NotQuery",5,0,2,2,419,0,0,1,15,13,0,0,0,"1,00",1,4,2
"org.apache.lucene.queryParser.surround.query.OrQuery",4,0,4,4,419,0,0,3,32,31,0,0,0,"2,00",2,4,8
"org.apache.lucene.queryParser.surround.query.SimpleTerm",6,1,12,13,420,0,0,7,69,67,0,0,0,"1,29",8,12,18
"org.apache.lucene.queryParser.surround.query.SimpleTerm.MatchingTermVisitor",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.queryParser.surround.query.SingleFieldTestDb",10,3,4,7,419,0,0,3,26,26,0,0,0,"1,25",3,12,5
"org.apache.lucene.queryParser.surround.query.SpanNearClauseFactory",9,4,11,15,432,0,0,1,55,53,0,0,0,"1,45",6,17,16
"org.apache.lucene.queryParser.surround.query.SrndBooleanQuery",3,0,2,2,419,0,0,1,20,20,0,0,0,"2,00",1,4,4
"org.apache.lucene.queryParser.surround.query.SrndPrefixQuery",4,2,7,9,419,0,0,2,41,40,0,0,0,"1,29",4,14,9
"org.apache.lucene.queryParser.surround.query.SrndQuery",4,3,12,15,419,0,0,2,53,52,0,0,0,"1,15",9,15,15
"org.apache.lucene.queryParser.surround.query.SrndTermQuery",4,1,5,6,419,0,0,1,32,31,0,0,0,"1,20",3,11,6
"org.apache.lucene.queryParser.surround.query.SrndTruncQuery",4,5,7,12,419,0,0,1,70,70,0,0,0,"2,14",3,14,15
"org.apache.lucene.queryParser.surround.query.Test01Exceptions",0,3,2,5,0,0,0,2,40,39,0,0,0,"1,50",0,2,3
"org.apache.lucene.queryParser.surround.query.Test02Boolean",0,5,25,30,0,0,0,2,91,91,0,0,0,"1,00",0,25,25
"org.apache.lucene.queryParser.surround.query.Test03Distance",0,10,47,57,0,0,0,2,188,188,0,0,0,"1,02",0,47,48
"org.apache.lucene.queryParser.surround.query.TooManyBasicQueries",0,0,1,1,0,0,0,0,5,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.BooleanClause",60,2,10,12,418,0,0,2,49,42,0,0,0,"1,30",7,13,13
"org.apache.lucene.search.BooleanClause.Occur",69,3,0,3,0,n/a,0,0,16,5,n/a,0,0,"1,00",0,0,3
"org.apache.lucene.search.BooleanFilter",9,1,10,11,420,1,0,1,118,93,0,0,0,"3,11",7,20,28
"org.apache.lucene.search.BooleanFilterTest",17,2,23,25,439,0,0,1,250,241,0,0,0,"1,04",6,36,29
"org.apache.lucene.search.BooleanQuery",73,5,32,37,418,1,0,2,206,139,2,6,6,"2,21",12,33,42
"org.apache.lucene.search.BooleanQuery.BooleanWeight",13,4,15,19,418,1,0,3,171,153,0,0,1,"4,38",6,33,35
"org.apache.lucene.search.BooleanQuery.TooManyClauses",7,0,1,1,418,0,0,0,10,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.BooleanScorer",14,9,22,31,418,2,0,5,141,122,0,3,3,"3,11",6,22,28
"org.apache.lucene.search.BooleanScorer.BooleanScorerCollector",5,3,9,12,418,1,0,3,39,38,0,0,0,"1,20",1,6,6
"org.apache.lucene.search.BooleanScorer.Bucket",3,5,0,5,0,0,0,0,10,7,0,0,0,n/a,0,0,0
"org.apache.lucene.search.BooleanScorer.BucketScorer",4,5,19,24,418,2,0,4,20,16,0,5,1,"1,00",5,7,6
"org.apache.lucene.search.BooleanScorer.BucketTable",4,4,3,7,418,0,0,2,18,15,0,0,0,"1,33",2,4,4
"org.apache.lucene.search.BooleanScorer.SubScorer",3,4,1,5,418,0,0,0,21,17,0,0,0,"2,00",0,1,2
"org.apache.lucene.search.BooleanScorer2",15,9,29,38,418,2,0,1,231,175,0,2,4,"2,22",13,32,40
"org.apache.lucene.search.BooleanScorer2.Coordinator",4,3,1,4,418,0,0,1,11,11,0,0,0,"3,00",0,2,3
"org.apache.lucene.search.BooleanScorer2.SingleMatchScorer",4,5,18,23,418,2,0,1,36,33,0,6,0,"1,40",4,10,7
"org.apache.lucene.search.BoostingQuery",9,4,18,22,419,1,0,1,86,71,0,9,3,"3,14",4,12,22
"org.apache.lucene.search.BoostingQueryTest",3,0,1,1,424,0,0,1,10,10,0,0,0,"1,00",0,4,1
"org.apache.lucene.search.CachingCollector",9,12,14,26,423,1,0,4,165,85,2,0,0,"1,54",5,17,20
"org.apache.lucene.search.CachingCollector.CachedScorer",3,4,19,23,419,2,0,5,19,15,0,5,1,"1,00",5,7,6
"org.apache.lucene.search.CachingCollector.NoScoreCachingCollector",5,9,17,26,423,2,0,1,76,70,0,4,0,"2,50",1,13,15
"org.apache.lucene.search.CachingCollector.ScoreCachingCollector",6,13,17,30,423,2,0,1,103,97,0,4,0,"2,50",1,15,15
"org.apache.lucene.search.CachingCollector.SegStart",4,3,1,4,419,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.CachingSpanFilter",7,4,10,14,426,2,0,1,72,55,0,0,0,"1,56",6,16,14
"org.apache.lucene.search.CachingWrapperFilter",13,4,8,12,421,1,0,1,107,67,0,0,0,"1,78",5,19,16
"org.apache.lucene.search.CachingWrapperFilter.DeletesMode",4,3,0,3,0,n/a,0,0,22,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.search.CachingWrapperFilter.FilterCache",4,2,4,6,420,0,0,1,49,39,2,0,0,"3,33",2,5,10
"org.apache.lucene.search.ChainedFilter",9,8,12,20,420,1,0,1,221,160,0,0,0,"3,09",7,26,34
"org.apache.lucene.search.ChainedFilterTest",21,8,10,18,444,0,0,2,142,130,0,0,0,"1,30",2,29,13
"org.apache.lucene.search.Collector",62,0,4,4,418,0,0,4,148,6,38,0,0,n/a,1,4,0
"org.apache.lucene.search.ComplexExplanation",17,4,19,23,2,1,0,1,46,25,0,9,2,"1,50",3,12,9
"org.apache.lucene.search.ConjunctionScorer",6,5,20,25,418,2,0,1,102,77,1,6,0,"2,38",5,13,19
"org.apache.lucene.search.ConstantScoreAutoRewrite",12,4,14,18,434,2,0,1,92,72,1,2,0,"1,89",6,21,17
"org.apache.lucene.search.ConstantScoreAutoRewrite.CutOffTermCollector",4,6,3,9,420,0,1,1,25,21,0,0,0,"1,50",1,3,3
"org.apache.lucene.search.ConstantScoreQuery",20,3,23,26,421,1,0,3,94,69,1,7,5,"2,20",7,19,22
"org.apache.lucene.search.ConstantScoreQuery.ConstantScorer",7,4,21,25,419,2,0,2,67,62,0,4,2,"1,17",6,15,14
"org.apache.lucene.search.ConstantScoreQuery.ConstantWeight",13,4,15,19,421,1,0,2,72,70,0,0,1,"2,00",6,26,16
"org.apache.lucene.search.DefaultSimilarity",10,2,22,24,418,1,0,6,63,38,5,8,0,"1,12",7,11,9
"org.apache.lucene.search.DisjunctionMaxQuery",14,3,25,28,421,1,0,2,152,100,0,6,6,"2,17",7,19,26
"org.apache.lucene.search.DisjunctionMaxQuery.DisjunctionMaxWeight",11,2,14,16,421,1,0,3,81,65,0,1,0,"2,43",5,23,17
"org.apache.lucene.search.DisjunctionMaxScorer",5,8,22,30,419,2,0,1,155,117,0,6,0,"2,78",4,14,25
"org.apache.lucene.search.DisjunctionSumScorer",6,9,24,33,418,2,0,1,191,109,1,4,2,"3,00",7,22,33
"org.apache.lucene.search.DocIdSet",52,1,2,3,1,0,0,2,40,24,17,0,0,"1,00",2,2,6
"org.apache.lucene.search.DocIdSetIterator",74,1,3,4,0,0,0,3,72,6,16,0,0,n/a,3,3,0
"org.apache.lucene.search.DuplicateFilter",9,7,14,21,419,1,0,1,169,152,0,0,0,"2,23",8,27,29
"org.apache.lucene.search.DuplicateFilterTest",14,5,8,13,424,0,0,1,124,121,0,0,0,"1,88",0,24,15
"org.apache.lucene.search.ExactPhraseScorer",11,15,21,36,421,2,0,1,265,239,0,5,1,"6,50",7,19,52
"org.apache.lucene.search.ExactPhraseScorer.ChunkState",2,7,1,8,10,0,0,0,14,14,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.Explanation",44,3,13,16,1,0,0,1,88,67,1,0,0,"1,54",8,13,20
"org.apache.lucene.search.Explanation.IDFExplanation",5,0,2,2,0,0,0,2,20,4,2,0,0,n/a,2,2,0
"org.apache.lucene.search.FieldCache",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,27,n/a
"org.apache.lucene.search.FieldCache.ByteParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.FieldCache.CacheEntry",8,1,9,10,9,0,0,5,45,32,1,0,0,"1,25",7,11,5
"org.apache.lucene.search.FieldCache.CreationPlaceholder",2,1,0,1,0,0,0,0,3,3,0,0,0,n/a,0,0,0
"org.apache.lucene.search.FieldCache.DoubleParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.FieldCache.FloatParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.FieldCache.IntParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.FieldCache.LongParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.FieldCache.Parser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.lucene.search.FieldCache.ShortParser",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.FieldCache.StringIndex",28,2,2,4,1,0,0,1,30,25,0,0,0,"3,00",1,2,6
"org.apache.lucene.search.FieldCacheDocIdSet",4,1,6,7,419,1,0,1,85,70,10,0,1,"2,11",3,7,19
"org.apache.lucene.search.FieldCacheImpl",30,4,55,59,418,0,1,2,193,162,0,0,0,"1,26",23,45,39
"org.apache.lucene.search.FieldCacheImpl.ByteCache",11,2,9,11,418,1,0,1,47,46,0,3,0,"4,50",1,21,9
"org.apache.lucene.search.FieldCacheImpl.Cache",18,2,7,9,418,0,0,1,107,95,9,0,0,"3,17",2,15,19
"org.apache.lucene.search.FieldCacheImpl.CacheEntryImpl",2,6,15,21,10,1,0,5,31,27,0,4,0,"1,00",5,6,6
"org.apache.lucene.search.FieldCacheImpl.DocsWithFieldCache",10,2,9,11,418,1,0,1,39,37,0,3,0,"4,00",1,21,8
"org.apache.lucene.search.FieldCacheImpl.DoubleCache",11,2,9,11,418,1,0,1,57,56,0,3,0,"5,50",1,21,11
"org.apache.lucene.search.FieldCacheImpl.Entry",12,2,3,5,6,0,0,0,30,26,0,0,0,"3,00",2,4,9
"org.apache.lucene.search.FieldCacheImpl.FloatCache",11,2,9,11,418,1,0,1,57,56,0,3,0,"5,50",1,21,11
"org.apache.lucene.search.FieldCacheImpl.IntCache",11,2,9,11,418,1,0,1,57,56,0,3,0,"5,50",1,21,11
"org.apache.lucene.search.FieldCacheImpl.LongCache",11,2,9,11,418,1,0,1,56,55,0,3,0,"5,50",1,21,11
"org.apache.lucene.search.FieldCacheImpl.ShortCache",11,2,9,11,418,1,0,1,47,46,0,3,0,"4,50",1,21,9
"org.apache.lucene.search.FieldCacheImpl.StopFillCacheException",7,0,0,0,0,0,0,0,7,2,0,0,0,n/a,0,0,0
"org.apache.lucene.search.FieldCacheImpl.StringCache",8,2,9,11,418,1,0,1,36,33,0,3,0,"3,00",1,17,6
"org.apache.lucene.search.FieldCacheImpl.StringIndexCache",10,2,9,11,418,1,0,1,49,40,0,3,0,"3,50",1,18,7
"org.apache.lucene.search.FieldCacheRangeFilter",13,6,25,31,419,1,0,2,427,319,7,0,0,"2,81",23,24,104
"org.apache.lucene.search.FieldCacheTermsFilter",7,2,4,6,419,1,0,1,97,28,0,0,0,"1,50",2,8,6
"org.apache.lucene.search.FieldComparator",48,0,10,10,418,0,0,9,166,46,12,0,0,"2,75",6,10,11
"org.apache.lucene.search.FieldComparator.ByteComparator",7,7,17,24,418,2,0,1,52,44,0,2,1,"1,29",3,11,9
"org.apache.lucene.search.FieldComparator.DocComparator",3,3,15,18,418,1,0,1,38,32,0,2,0,"1,00",3,7,7
"org.apache.lucene.search.FieldComparator.DoubleComparator",7,7,17,24,418,2,0,1,66,58,0,2,1,"1,86",3,11,13
"org.apache.lucene.search.FieldComparator.FloatComparator",7,7,17,24,418,2,0,1,70,58,0,2,1,"1,86",3,11,13
"org.apache.lucene.search.FieldComparator.IntComparator",7,7,17,24,418,2,0,1,74,58,0,2,1,"1,86",3,11,13
"org.apache.lucene.search.FieldComparator.LongComparator",7,7,17,24,418,2,0,1,70,58,0,2,1,"1,86",3,11,13
"org.apache.lucene.search.FieldComparator.NumericComparator",11,3,10,13,418,1,0,1,21,20,6,2,0,"2,00",0,3,4
"org.apache.lucene.search.FieldComparator.RelevanceComparator",5,3,17,20,418,1,0,3,58,46,0,1,2,"1,56",4,11,14
"org.apache.lucene.search.FieldComparator.ShortComparator",7,7,17,24,418,2,0,1,52,44,0,2,1,"1,29",3,11,9
"org.apache.lucene.search.FieldComparator.StringComparatorLocale",4,5,16,21,418,1,0,1,69,67,0,2,1,"2,12",4,9,17
"org.apache.lucene.search.FieldComparator.StringOrdValComparator",6,11,19,30,418,1,0,2,133,119,0,2,1,"2,18",7,13,24
"org.apache.lucene.search.FieldComparator.StringValComparator",4,4,16,20,418,1,0,2,70,66,0,2,1,"2,12",4,9,17
"org.apache.lucene.search.FieldComparatorSource",12,0,1,1,418,0,0,1,19,4,7,0,0,n/a,1,1,0
"org.apache.lucene.search.FieldDoc",13,4,7,11,2,1,0,0,58,25,1,0,1,"1,25",1,7,5
"org.apache.lucene.search.FieldDocSortedHitQueue",9,6,18,24,419,1,0,1,101,61,0,10,0,"3,40",3,11,17
"org.apache.lucene.search.FieldValueFilter",7,2,9,11,419,1,0,1,114,83,0,0,0,"2,27",6,12,25
"org.apache.lucene.search.FieldValueHitQueue",23,6,20,26,418,1,0,4,84,41,2,10,0,"1,50",6,11,9
"org.apache.lucene.search.FieldValueHitQueue.Entry",19,4,5,9,1,1,0,0,11,11,1,0,1,"1,00",1,4,2
"org.apache.lucene.search.FieldValueHitQueue.MultiComparatorsFieldValueHitQueue",7,6,21,27,418,2,0,1,32,26,0,14,0,"3,00",1,6,6
"org.apache.lucene.search.FieldValueHitQueue.OneComparatorFieldValueHitQueue",6,8,21,29,418,2,0,1,35,24,0,14,0,"2,00",1,6,4
"org.apache.lucene.search.Filter",80,0,1,1,418,0,0,1,28,3,25,0,0,n/a,1,1,0
"org.apache.lucene.search.FilterClause",4,2,6,8,419,0,0,2,51,32,0,0,0,"1,33",5,6,8
"org.apache.lucene.search.FilterManager",5,7,5,12,421,0,0,4,84,43,0,0,0,"1,40",2,7,7
"org.apache.lucene.search.FilterManager.FilterCleaner",3,2,2,4,421,0,0,1,64,42,0,0,0,"2,67",0,3,8
"org.apache.lucene.search.FilterManager.FilterItem",3,2,1,3,419,0,0,0,13,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.FilteredDocIdSet",2,1,6,7,2,1,0,1,57,24,4,0,1,"1,25",3,7,5
"org.apache.lucene.search.FilteredDocIdSetIterator",1,2,8,10,1,1,0,1,58,42,1,0,0,"2,75",4,7,11
"org.apache.lucene.search.FilteredQuery",19,3,23,26,418,1,0,1,216,165,0,7,5,"1,70",8,24,39
"org.apache.lucene.search.FilteredTermEnum",22,2,13,15,8,1,0,2,70,49,10,0,0,"2,33",6,13,14
"org.apache.lucene.search.FuzzyLikeThisQuery",23,9,22,31,444,1,0,1,230,188,0,9,3,"4,44",5,41,40
"org.apache.lucene.search.FuzzyLikeThisQuery.FieldVals",1,4,3,7,0,0,0,0,52,52,0,0,0,"5,33",2,3,16
"org.apache.lucene.search.FuzzyLikeThisQuery.FuzzyTermQuery",7,3,22,25,424,2,0,1,33,31,0,17,1,"1,25",1,5,5
"org.apache.lucene.search.FuzzyLikeThisQuery.ScoreTerm",3,3,1,4,7,0,0,0,13,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.FuzzyLikeThisQuery.ScoreTermQueue",4,3,15,18,9,1,0,1,15,12,0,10,0,"1,50",1,4,3
"org.apache.lucene.search.FuzzyLikeThisQueryTest",14,4,7,11,445,0,0,2,93,89,0,0,0,"1,00",0,21,7
"org.apache.lucene.search.FuzzyQuery",20,10,34,44,438,2,0,1,147,95,0,16,2,"2,45",7,23,27
"org.apache.lucene.search.FuzzyTermEnum",6,12,22,34,438,2,0,1,229,102,0,4,1,"2,67",5,16,24
"org.apache.lucene.search.HitQueue",8,4,16,20,3,1,0,2,61,18,0,9,1,"1,67",2,5,5
"org.apache.lucene.search.IndexSearcher",131,10,70,80,418,1,1,3,572,295,1,2,10,"1,71",22,69,65
"org.apache.lucene.search.IndexSearcher.ExecutionHelper",2,2,6,8,1,0,0,3,41,33,0,0,0,"1,17",3,7,7
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableNoSort",8,7,2,9,418,0,0,1,46,40,0,0,0,"2,50",1,5,5
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort",13,8,2,10,418,0,0,1,53,46,0,0,0,"3,00",1,9,6
"org.apache.lucene.search.IndexSearcher.MultiSearcherCallableWithSort.FakeScorer",2,4,19,23,418,2,0,5,27,27,0,5,1,"1,00",5,7,6
"org.apache.lucene.search.MatchAllDocsQuery",27,2,20,22,421,1,0,2,41,34,0,8,4,"1,14",4,10,8
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllDocsWeight",10,3,15,18,421,1,0,3,46,45,0,1,0,"1,25",6,15,10
"org.apache.lucene.search.MatchAllDocsQuery.MatchAllScorer",7,6,18,24,419,2,0,1,29,29,0,6,0,"1,60",4,13,8
"org.apache.lucene.search.MultiCollector",14,1,10,11,419,1,0,2,90,64,0,0,0,"3,33",2,10,20
"org.apache.lucene.search.MultiPhraseQuery",22,5,28,33,434,1,0,4,190,146,0,7,5,"2,60",10,24,39
"org.apache.lucene.search.MultiPhraseQuery.MultiPhraseWeight",19,6,14,20,434,1,0,1,136,129,0,1,0,"3,14",5,32,22
"org.apache.lucene.search.MultiSearcher",32,4,50,54,424,1,1,1,198,151,1,11,1,"1,62",14,44,34
"org.apache.lucene.search.MultiSearcher.CachedDfSource",15,3,45,48,419,1,1,10,73,64,0,11,1,"1,08",9,14,13
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableNoSort",10,8,2,10,419,0,0,1,41,37,0,0,0,"2,00",1,4,4
"org.apache.lucene.search.MultiSearcher.MultiSearcherCallableWithSort",14,9,2,11,420,0,0,1,62,54,0,0,0,"3,50",1,6,7
"org.apache.lucene.search.MultiTermQuery",36,7,23,30,432,1,0,3,205,81,8,9,3,"1,36",6,12,19
"org.apache.lucene.search.MultiTermQuery.ConstantScoreAutoRewrite",1,2,14,16,435,3,0,0,9,1,1,11,0,n/a,0,0,0
"org.apache.lucene.search.MultiTermQuery.RewriteMethod",22,0,2,2,432,0,0,2,11,6,4,0,0,"1,00",2,3,1
"org.apache.lucene.search.MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite",8,1,15,16,435,3,0,3,36,19,0,6,0,"1,00",2,11,4
"org.apache.lucene.search.MultiTermQuery.TopTermsScoringBooleanQueryRewrite",9,1,15,16,435,3,0,3,38,19,0,6,0,"1,00",2,10,4
"org.apache.lucene.search.MultiTermQueryWrapperFilter",12,1,8,9,432,1,0,1,111,70,3,0,0,"2,29",5,24,16
"org.apache.lucene.search.NGramPhraseQuery",5,7,30,37,432,2,0,1,66,48,0,18,3,"3,00",3,12,12
"org.apache.lucene.search.NRTManager",9,10,25,35,424,1,0,4,210,120,0,4,2,"1,71",5,28,24
"org.apache.lucene.search.NRTManager.TrackingIndexWriter",9,2,19,21,419,0,0,1,99,76,0,0,0,"1,00",18,34,19
"org.apache.lucene.search.NRTManager.WaitingListener",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.NRTManagerReopenThread",4,5,5,10,425,0,1,1,158,68,0,0,0,"2,50",0,9,10
"org.apache.lucene.search.NumericRangeFilter",4,1,23,24,435,2,0,9,157,67,0,6,0,"1,00",14,30,15
"org.apache.lucene.search.NumericRangeQuery",18,14,43,57,434,2,0,8,344,144,0,16,2,"1,95",18,29,39
"org.apache.lucene.search.NumericRangeQuery.NumericRangeTermEnum",7,6,20,26,434,2,0,4,168,134,0,2,3,"4,22",4,20,38
"org.apache.lucene.search.ParallelMultiSearcher",21,7,58,65,428,2,1,1,168,125,0,22,6,"2,08",4,26,27
"org.apache.lucene.search.ParallelMultiSearcher.DocumentFrequencyCallable",3,2,2,4,419,0,0,1,14,11,0,0,0,"1,00",1,3,2
"org.apache.lucene.search.ParallelMultiSearcher.ExecutionHelper",2,2,6,8,1,0,0,3,41,33,0,0,0,"1,17",3,7,7
"org.apache.lucene.search.PhrasePositions",6,10,6,16,10,0,0,1,67,57,0,0,0,"1,67",4,12,10
"org.apache.lucene.search.PhraseQuery",29,6,26,32,431,1,0,2,153,112,1,7,5,"2,15",8,21,28
"org.apache.lucene.search.PhraseQuery.PhraseWeight",17,6,15,21,431,1,0,1,129,125,0,1,0,"2,50",6,32,20
"org.apache.lucene.search.PhraseQuery.PostingsAndFreq",8,5,4,9,10,0,0,1,66,66,0,0,0,"5,00",3,6,20
"org.apache.lucene.search.PhraseQueue",3,3,15,18,12,1,0,1,23,21,0,10,0,"2,50",1,3,5
"org.apache.lucene.search.PhraseScorer",8,7,22,29,421,2,0,1,100,72,1,5,1,"2,00",8,16,16
"org.apache.lucene.search.PositiveScoresOnlyCollector",4,2,9,11,419,1,0,1,33,26,0,0,0,"1,20",1,11,6
"org.apache.lucene.search.PrefixFilter",3,1,11,12,435,2,0,1,19,14,0,5,1,"1,00",2,7,3
"org.apache.lucene.search.PrefixQuery",17,4,29,33,434,2,0,1,55,46,0,16,2,"2,33",5,15,14
"org.apache.lucene.search.PrefixTermEnum",5,4,18,22,420,2,0,2,35,27,0,5,0,"1,20",4,10,6
"org.apache.lucene.search.Query",309,1,14,15,418,0,0,7,190,100,26,0,0,"2,15",12,23,28
"org.apache.lucene.search.QueryTermVector",7,2,16,18,31,0,1,2,104,94,0,0,0,"2,10",7,15,21
"org.apache.lucene.search.QueryWrapperFilter",18,1,6,7,418,1,0,1,45,32,0,0,0,"1,14",4,9,8
"org.apache.lucene.search.RMIRemoteSearchable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.lucene.search.ReferenceManager",4,3,11,14,1,0,0,1,135,72,2,0,0,"1,88",4,12,15
"org.apache.lucene.search.RemoteCachingWrapperFilter",5,1,3,4,422,1,0,1,36,12,1,0,0,"1,00",1,5,2
"org.apache.lucene.search.RemoteCachingWrapperFilterHelper",6,2,6,8,423,2,0,1,28,24,0,0,1,"1,67",1,7,5
"org.apache.lucene.search.RemoteSearchable",18,1,24,25,435,0,2,2,71,60,0,0,0,"1,23",9,26,16
"org.apache.lucene.search.RemoteTestCase",6,1,3,4,437,0,0,1,41,32,3,0,0,"1,00",1,4,5
"org.apache.lucene.search.ReqExclScorer",3,5,19,24,418,2,0,1,92,67,0,6,0,"2,83",5,11,17
"org.apache.lucene.search.ReqOptSumScorer",3,4,18,22,418,2,0,1,55,38,0,6,0,"1,60",4,10,8
"org.apache.lucene.search.ScoreCachingWrappingScorer",7,5,21,26,418,2,0,1,54,42,0,3,3,"1,12",6,16,9
"org.apache.lucene.search.ScoreDoc",86,3,3,6,0,0,0,0,25,17,2,0,0,"1,00",1,3,3
"org.apache.lucene.search.Scorer",120,2,13,15,418,1,0,5,149,60,30,0,0,"1,67",4,17,15
"org.apache.lucene.search.Scorer.ScorerVisitor",6,0,3,3,418,0,0,3,33,5,1,0,0,"1,00",0,3,3
"org.apache.lucene.search.ScoringRewrite",12,2,6,8,432,2,0,1,73,45,2,2,0,"1,14",1,4,8
"org.apache.lucene.search.Searchable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,11,n/a
"org.apache.lucene.search.Searcher",84,1,33,34,418,0,1,7,172,68,3,0,0,"1,17",17,28,14
"org.apache.lucene.search.SearcherFactory",4,0,1,1,419,0,0,1,30,5,0,0,0,"1,00",1,2,1
"org.apache.lucene.search.SearcherLifetimeManager",6,3,6,9,421,0,0,2,203,69,0,0,0,"2,83",2,14,17
"org.apache.lucene.search.SearcherLifetimeManager.PruneByAge",2,1,3,4,420,0,1,1,15,12,0,0,0,"1,50",1,2,3
"org.apache.lucene.search.SearcherLifetimeManager.Pruner",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.SearcherLifetimeManager.SearcherTracker",3,3,3,6,421,0,0,2,29,23,0,0,0,"1,67",1,7,5
"org.apache.lucene.search.SearcherManager",7,3,19,22,421,1,0,5,125,62,0,6,0,"1,62",5,19,13
"org.apache.lucene.search.Similarity",68,6,19,25,418,0,0,12,862,102,2,0,0,"1,18",18,26,20
"org.apache.lucene.search.SimilarityDelegator",3,2,22,24,419,1,0,1,44,35,1,7,1,"1,00",7,15,8
"org.apache.lucene.search.SingleTermEnum",5,4,17,21,420,2,0,2,39,26,0,5,0,"1,25",3,8,5
"org.apache.lucene.search.SloppyPhraseScorer",14,16,43,59,423,3,0,1,447,340,0,12,0,"4,05",15,37,89
"org.apache.lucene.search.Sort",66,3,9,12,418,0,0,1,144,45,0,0,0,"1,44",4,10,13
"org.apache.lucene.search.SortField",89,20,21,41,418,0,0,1,345,203,1,0,0,"3,24",11,34,68
"org.apache.lucene.search.SpanFilter",5,0,2,2,422,1,0,1,16,3,2,0,0,n/a,1,1,0
"org.apache.lucene.search.SpanFilterResult",5,2,3,5,4,0,0,2,31,14,0,0,0,"1,00",2,3,3
"org.apache.lucene.search.SpanFilterResult.PositionInfo",3,2,4,6,1,0,0,2,22,18,0,0,0,"1,00",2,5,4
"org.apache.lucene.search.SpanFilterResult.StartEnd",1,2,3,5,0,0,0,2,23,15,0,0,0,"1,00",2,3,3
"org.apache.lucene.search.SpanQueryFilter",9,1,10,11,427,2,0,1,64,50,0,0,0,"1,25",6,22,10
"org.apache.lucene.search.TermCollectingRewrite",10,0,5,5,432,1,0,3,18,16,3,1,0,"3,00",1,9,3
"org.apache.lucene.search.TermCollectingRewrite.TermCollector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.TermQuery",87,2,20,22,422,1,0,2,46,38,1,8,4,"1,29",5,14,9
"org.apache.lucene.search.TermQuery.TermWeight",15,7,15,22,422,1,0,1,123,119,0,1,0,"2,00",6,38,18
"org.apache.lucene.search.TermRangeFilter",7,1,18,19,435,2,0,3,77,23,0,6,0,"1,00",8,19,10
"org.apache.lucene.search.TermRangeQuery",23,9,35,44,434,2,0,1,165,93,0,16,2,"3,50",10,17,42
"org.apache.lucene.search.TermRangeTermEnum",5,9,17,26,420,2,0,2,120,77,0,5,0,"4,25",3,10,17
"org.apache.lucene.search.TermScorer",7,13,22,35,419,2,0,1,132,97,0,3,3,"2,22",7,21,20
"org.apache.lucene.search.TermsFilter",9,1,5,6,419,1,0,1,68,53,0,0,0,"2,25",3,13,9
"org.apache.lucene.search.TermsFilterTest",11,0,3,3,421,0,0,2,76,76,0,0,0,"1,67",0,13,5
"org.apache.lucene.search.TestBlockJoin",39,0,19,19,454,0,0,1,837,757,0,0,0,"5,63",9,69,107
"org.apache.lucene.search.TestJoinUtil",19,0,5,5,426,0,0,1,245,234,0,0,0,"4,33",3,27,39
"org.apache.lucene.search.TestJoinUtil.IndexIterationContext",2,6,0,6,1,0,0,0,8,8,0,0,0,n/a,0,0,0
"org.apache.lucene.search.TestJoinUtil.RandomDoc",2,3,1,4,0,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.TestRemoteCachingWrapperFilter",21,2,4,6,465,1,0,2,76,62,0,0,0,"1,00",0,26,4
"org.apache.lucene.search.TestRemoteSearchable",27,2,8,10,474,1,0,2,87,82,0,0,0,"1,00",0,36,8
"org.apache.lucene.search.TestRemoteSort",22,9,13,22,460,1,0,2,256,228,0,0,0,"2,69",5,42,35
"org.apache.lucene.search.TestRemoteSort.MyFieldComparator",4,3,15,18,419,1,0,1,36,36,0,2,0,"1,00",3,8,8
"org.apache.lucene.search.TestRemoteSort.MyFieldComparatorSource",3,0,2,2,420,1,0,1,6,6,0,0,0,"1,00",1,2,1
"org.apache.lucene.search.TimeLimitingCollector",10,7,16,23,425,1,0,2,152,63,0,0,0,"1,25",4,18,15
"org.apache.lucene.search.TimeLimitingCollector.TimeExceededException",4,3,4,7,0,0,0,3,25,21,0,0,0,"1,00",3,4,4
"org.apache.lucene.search.TimeLimitingCollector.TimerThread",4,6,7,13,4,0,0,2,78,40,0,0,0,"1,14",2,9,8
"org.apache.lucene.search.TimeLimitingCollector.TimerThreadHolder",3,1,0,1,5,0,0,0,7,7,0,0,0,n/a,0,2,0
"org.apache.lucene.search.TopDocs",81,3,5,8,418,0,0,1,89,60,1,0,0,"2,40",2,13,12
"org.apache.lucene.search.TopDocs.MergeSortQueue",9,6,15,21,418,1,0,1,68,55,0,10,0,"6,50",1,7,13
"org.apache.lucene.search.TopDocs.ScoreMergeSortQueue",5,4,15,19,418,1,0,1,35,29,0,10,0,"3,50",1,3,7
"org.apache.lucene.search.TopDocs.ShardRef",3,2,2,4,0,0,0,0,14,11,0,0,0,"1,00",1,2,2
"org.apache.lucene.search.TopDocsCollector",33,3,12,15,418,1,0,1,121,39,2,0,0,"1,62",6,12,13
"org.apache.lucene.search.TopFieldCollector",31,9,18,27,418,2,0,3,158,92,2,5,2,"3,83",3,28,23
"org.apache.lucene.search.TopFieldCollector.MultiComparatorNonScoringCollector",15,10,22,32,418,3,0,1,76,61,3,11,0,"3,40",0,15,17
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringMaxScoreCollector",11,11,26,37,418,4,0,1,70,56,1,13,2,"3,75",0,12,15
"org.apache.lucene.search.TopFieldCollector.MultiComparatorScoringNoMaxScoreCollector",11,11,26,37,418,4,0,1,68,53,1,13,2,"3,50",0,12,14
"org.apache.lucene.search.TopFieldCollector.OneComparatorNonScoringCollector",14,10,22,32,418,3,0,1,54,43,3,11,0,"1,60",0,15,8
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringMaxScoreCollector",10,11,26,37,418,4,0,1,53,42,1,13,2,"2,00",0,12,8
"org.apache.lucene.search.TopFieldCollector.OneComparatorScoringNoMaxScoreCollector",10,11,26,37,418,4,0,1,51,39,1,13,2,"1,75",0,12,7
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorNonScoringCollector",8,10,25,35,418,4,0,2,61,48,0,13,2,"4,67",1,9,14
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringMaxScoreCollector",10,11,29,40,418,5,0,2,65,52,0,15,2,"5,00",1,10,15
"org.apache.lucene.search.TopFieldCollector.OutOfOrderMultiComparatorScoringNoMaxScoreCollector",10,11,30,41,418,5,0,2,71,56,0,13,3,"3,75",1,12,15
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorNonScoringCollector",7,10,25,35,418,4,0,2,40,31,0,13,2,"2,00",1,9,6
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringMaxScoreCollector",9,11,29,40,418,5,0,2,44,35,0,15,2,"2,33",1,10,7
"org.apache.lucene.search.TopFieldCollector.OutOfOrderOneComparatorScoringNoMaxScoreCollector",9,11,29,40,418,5,0,2,45,34,0,15,2,"2,00",1,10,6
"org.apache.lucene.search.TopFieldDocs",15,4,5,9,418,1,0,0,18,8,0,2,0,"1,00",0,2,1
"org.apache.lucene.search.TopScoreDocCollector",27,5,18,23,418,2,0,4,88,48,4,6,1,"2,17",3,16,13
"org.apache.lucene.search.TopScoreDocCollector.InOrderPagingScoreDocCollector",7,8,22,30,418,3,0,2,50,43,0,6,3,"1,67",3,13,10
"org.apache.lucene.search.TopScoreDocCollector.InOrderTopScoreDocCollector",5,5,19,24,418,3,0,2,27,22,0,10,0,"1,33",1,6,4
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderPagingScoreDocCollector",7,8,22,30,418,3,0,2,52,46,0,6,3,"1,83",3,13,11
"org.apache.lucene.search.TopScoreDocCollector.OutOfOrderTopScoreDocCollector",5,5,19,24,418,3,0,2,29,25,0,10,0,"1,67",1,6,5
"org.apache.lucene.search.TopTermsRewrite",10,1,11,12,434,2,0,1,64,46,3,2,0,"2,17",5,11,13
"org.apache.lucene.search.TopTermsRewrite.ScoreTerm",2,2,1,3,7,0,0,1,10,10,0,0,0,"2,00",1,2,2
"org.apache.lucene.search.TotalHitCountCollector",5,1,9,10,419,1,0,4,24,20,0,0,0,"1,00",2,5,5
"org.apache.lucene.search.Weight",83,0,7,7,418,0,0,7,86,10,17,0,0,"1,00",6,7,1
"org.apache.lucene.search.WildcardQuery",21,6,29,35,436,2,0,1,78,62,0,16,2,"2,67",5,18,16
"org.apache.lucene.search.WildcardTermEnum",5,10,18,28,420,2,0,2,149,108,0,5,0,"4,60",4,11,23
"org.apache.lucene.search.function.ByteFieldSource",6,2,19,21,422,2,0,1,83,51,0,4,1,"1,30",4,9,13
"org.apache.lucene.search.function.CustomScoreProvider",7,1,5,6,419,0,0,1,130,50,4,0,0,"2,60",4,8,13
"org.apache.lucene.search.function.CustomScoreQuery",12,4,27,31,427,1,0,5,165,102,4,6,6,"2,21",9,27,31
"org.apache.lucene.search.function.CustomScoreQuery.CustomScorer",8,7,18,25,427,2,0,1,52,47,0,6,0,"2,00",4,13,10
"org.apache.lucene.search.function.CustomScoreQuery.CustomWeight",13,4,16,20,427,1,0,3,96,86,0,0,1,"2,11",7,26,19
"org.apache.lucene.search.function.DocValues",11,4,12,16,2,0,0,2,152,59,6,0,0,"1,50",11,13,15
"org.apache.lucene.search.function.FieldCacheSource",8,1,13,14,421,1,0,3,76,33,4,1,0,"1,20",7,8,6
"org.apache.lucene.search.function.FieldScoreQuery",8,2,22,24,430,2,0,1,66,20,0,18,0,"3,00",1,7,6
"org.apache.lucene.search.function.FieldScoreQuery.Type",2,5,2,7,0,0,0,0,31,14,0,0,0,"1,00",1,2,2
"org.apache.lucene.search.function.FloatFieldSource",6,2,19,21,422,2,0,1,78,47,0,4,1,"1,33",4,9,12
"org.apache.lucene.search.function.IntFieldSource",6,2,19,21,422,2,0,1,83,51,0,4,1,"1,30",4,9,13
"org.apache.lucene.search.function.OrdFieldSource",5,2,10,12,421,1,0,1,84,45,0,1,0,"1,33",4,6,12
"org.apache.lucene.search.function.ReverseOrdFieldSource",6,2,10,12,421,1,0,1,92,51,0,1,0,"1,30",4,6,13
"org.apache.lucene.search.function.ShortFieldSource",6,2,19,21,422,2,0,1,83,51,0,4,1,"1,30",4,9,13
"org.apache.lucene.search.function.ValueSource",9,0,5,5,420,0,0,2,42,12,3,0,0,"1,00",5,5,1
"org.apache.lucene.search.function.ValueSourceQuery",12,2,20,22,423,1,0,3,60,38,1,7,5,"1,43",5,14,10
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceScorer",9,6,18,24,423,2,0,1,37,28,0,6,0,"1,40",4,13,7
"org.apache.lucene.search.function.ValueSourceQuery.ValueSourceWeight",12,3,14,17,423,1,0,3,46,41,0,1,0,"1,00",5,17,7
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector",6,3,12,15,421,1,0,3,90,53,0,0,0,"2,17",5,12,13
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.GroupHead",1,2,3,5,0,0,0,2,31,10,0,0,0,"1,00",1,3,1
"org.apache.lucene.search.grouping.AbstractAllGroupHeadsCollector.TemporalResult",1,2,0,2,0,0,0,0,8,4,0,0,0,n/a,0,0,0
"org.apache.lucene.search.grouping.AbstractAllGroupsCollector",2,0,8,8,419,1,0,3,37,10,0,0,0,"1,00",3,4,3
"org.apache.lucene.search.grouping.AbstractFirstPassGroupingCollector",8,9,13,22,420,1,0,2,278,185,0,0,0,"5,50",4,19,44
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector",9,8,11,19,420,1,0,2,100,76,0,0,0,"2,33",3,16,14
"org.apache.lucene.search.grouping.AbstractSecondPassGroupingCollector.SearchGroupDocs",2,2,1,3,419,0,0,0,11,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.grouping.BlockGroupingCollector",19,22,11,33,422,1,0,2,371,241,0,0,0,"7,00",2,36,49
"org.apache.lucene.search.grouping.BlockGroupingCollector.FakeScorer",3,4,18,22,419,2,0,4,23,23,0,6,0,"1,00",4,6,5
"org.apache.lucene.search.grouping.BlockGroupingCollector.GroupQueue",5,3,15,18,422,1,0,1,22,18,0,10,0,"2,00",1,4,4
"org.apache.lucene.search.grouping.BlockGroupingCollector.OneGroup",3,7,0,7,419,0,0,0,10,9,0,0,0,n/a,0,0,0
"org.apache.lucene.search.grouping.CollectedSearchGroup",1,2,0,2,0,0,0,0,4,4,0,0,0,n/a,0,0,0
"org.apache.lucene.search.grouping.GroupDocs",10,5,1,6,1,0,0,0,30,18,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.grouping.SearchGroup",9,2,4,6,423,0,0,1,54,34,0,0,0,"2,75",4,6,11
"org.apache.lucene.search.grouping.SearchGroup.GroupComparator",6,2,2,4,423,0,0,1,35,32,0,0,0,"3,50",1,6,7
"org.apache.lucene.search.grouping.SearchGroup.GroupMerger",7,3,3,6,423,0,0,1,116,94,0,0,0,"7,00",1,8,21
"org.apache.lucene.search.grouping.SearchGroup.MergedGroup",3,6,4,10,423,0,0,1,49,44,0,0,0,"2,25",3,4,9
"org.apache.lucene.search.grouping.SearchGroup.ShardIter",3,2,3,5,423,0,0,1,21,21,0,0,0,"1,33",2,3,4
"org.apache.lucene.search.grouping.SentinelIntSet",2,4,9,13,2,0,0,1,92,80,0,0,0,"2,56",6,10,23
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector",13,5,4,9,427,0,0,1,70,38,4,0,0,"2,25",3,10,9
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector",10,7,6,13,427,1,0,1,49,48,0,0,0,"2,80",1,12,14
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.GeneralAllGroupHeadsCollector.GroupHead",6,1,3,4,427,0,0,1,26,26,0,0,0,"1,67",1,10,5
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector",9,9,6,15,427,1,0,2,62,60,0,0,0,"2,60",1,12,13
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdAllGroupHeadsCollector.GroupHead",4,2,3,5,427,0,0,1,38,37,0,0,0,"3,00",1,3,9
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector",9,10,6,16,427,1,0,2,70,68,0,0,0,"3,00",1,13,15
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.OrdScoreAllGroupHeadsCollector.GroupHead",6,3,3,6,427,0,0,1,58,57,0,0,0,"4,67",1,5,14
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector",9,9,6,15,427,1,0,2,56,54,0,0,0,"2,20",1,11,11
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollector.ScoreAllGroupHeadsCollector.GroupHead",4,1,3,4,427,0,0,1,27,27,0,0,0,"2,33",1,4,7
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest",19,0,7,7,424,0,0,1,381,364,0,0,0,"8,00",5,34,64
"org.apache.lucene.search.grouping.TermAllGroupHeadsCollectorTest.GroupDoc",1,7,1,8,0,0,0,0,18,17,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.grouping.TermAllGroupsCollector",3,5,5,10,419,0,0,1,72,36,0,0,0,"1,80",1,7,9
"org.apache.lucene.search.grouping.TermAllGroupsCollectorTest",9,0,1,1,423,0,0,1,66,59,0,0,0,"1,00",0,9,1
"org.apache.lucene.search.grouping.TermFirstPassGroupingCollector",5,2,4,6,419,0,0,2,45,22,0,0,0,"1,25",2,5,5
"org.apache.lucene.search.grouping.TermSecondPassGroupingCollector",4,3,3,6,419,0,0,1,43,34,0,0,0,"2,33",1,5,7
"org.apache.lucene.search.grouping.TestGrouping",30,0,14,14,435,0,0,1,885,812,0,0,0,"11,20",8,51,168
"org.apache.lucene.search.grouping.TestGrouping.GroupDoc",1,7,1,8,0,0,0,0,17,16,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.grouping.TestGrouping.ShardSearcher",6,1,4,5,419,0,0,1,16,16,0,0,0,"1,00",2,7,4
"org.apache.lucene.search.grouping.TestGrouping.ShardState",5,2,1,3,420,0,0,0,21,20,0,0,0,"4,00",0,5,4
"org.apache.lucene.search.grouping.TopGroups",15,6,3,9,419,0,0,1,141,104,0,0,0,"6,00",1,6,18
"org.apache.lucene.search.highlight.DefaultEncoder",1,0,2,2,0,0,0,1,14,10,0,0,0,"1,00",1,2,2
"org.apache.lucene.search.highlight.Encoder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.highlight.Formatter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.highlight.FragmentQueue",2,3,15,18,2,1,0,1,15,15,0,10,0,"1,50",1,3,3
"org.apache.lucene.search.highlight.Fragmenter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.search.highlight.GradientFormatter",0,16,7,23,0,0,0,2,189,147,0,0,0,"3,00",6,7,21
"org.apache.lucene.search.highlight.Highlighter",12,6,18,24,34,0,0,1,448,308,0,0,0,"2,78",10,30,50
"org.apache.lucene.search.highlight.HighlighterPhraseTest",24,1,5,6,451,0,0,1,233,232,0,0,0,"1,11",0,32,10
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamConcurrent",8,9,33,42,34,2,0,1,34,34,0,20,1,"1,33",1,14,4
"org.apache.lucene.search.highlight.HighlighterPhraseTest.TokenStreamSparse",8,9,33,42,34,2,0,1,34,34,0,20,1,"1,33",1,14,4
"org.apache.lucene.search.highlight.HighlighterTest",50,12,61,73,547,0,0,5,1.364,1.237,0,0,0,"1,74",6,119,164
"org.apache.lucene.search.highlight.InvalidTokenOffsetsException",1,0,1,1,0,0,0,0,11,7,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.highlight.NullFragmenter",3,0,2,2,25,0,0,2,11,7,0,0,0,"1,00",1,2,2
"org.apache.lucene.search.highlight.OffsetLimitTokenFilter",4,8,37,45,27,3,0,1,27,23,0,22,1,"1,33",1,9,4
"org.apache.lucene.search.highlight.OffsetLimitTokenFilterTest",1,0,1,1,25,0,0,1,34,31,0,0,0,"1,00",0,2,2
"org.apache.lucene.search.highlight.PositionSpan",0,2,1,3,0,0,0,0,12,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.highlight.QueryScorer",11,15,19,34,419,0,0,2,213,129,1,0,0,"1,53",8,22,29
"org.apache.lucene.search.highlight.QueryTermExtractor",9,0,7,7,419,0,0,1,135,82,0,0,0,"2,29",4,19,16
"org.apache.lucene.search.highlight.QueryTermScorer",6,6,10,16,419,0,0,3,118,58,0,0,0,"1,40",4,11,14
"org.apache.lucene.search.highlight.Scorer",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.lucene.search.highlight.SimpleFragmenter",5,4,6,10,26,0,0,1,49,29,1,0,0,"1,17",2,8,7
"org.apache.lucene.search.highlight.SimpleHTMLEncoder",2,0,3,3,0,0,0,1,54,47,0,0,0,"3,67",2,3,11
"org.apache.lucene.search.highlight.SimpleHTMLFormatter",4,4,3,7,0,0,0,1,33,23,0,0,0,"1,33",1,3,4
"org.apache.lucene.search.highlight.SimpleSpanFragmenter",5,10,4,14,27,0,0,1,68,51,0,0,0,"2,50",1,7,10
"org.apache.lucene.search.highlight.SpanGradientFormatter",0,2,2,4,0,0,0,1,53,43,0,0,0,"3,00",1,2,6
"org.apache.lucene.search.highlight.SynonymAnalyzer",9,2,11,13,50,1,0,1,25,19,0,6,0,"1,00",1,5,2
"org.apache.lucene.search.highlight.SynonymTokenizer",8,14,33,47,34,2,0,1,67,62,0,20,1,"2,67",1,20,8
"org.apache.lucene.search.highlight.SynonymTokenizer.TestHighlightRunner",8,4,7,11,547,0,0,1,64,64,27,0,0,"2,83",3,10,17
"org.apache.lucene.search.highlight.TextFragment",2,5,8,13,0,0,0,2,68,46,0,0,0,"1,00",4,8,8
"org.apache.lucene.search.highlight.TokenGroup",6,11,10,21,34,0,0,1,96,71,0,0,0,"1,40",7,16,14
"org.apache.lucene.search.highlight.TokenSources",17,0,8,8,424,0,0,1,235,151,0,0,0,"3,00",8,21,33
"org.apache.lucene.search.highlight.TokenSourcesTest",19,1,4,5,440,0,0,1,181,168,0,0,0,"1,00",0,22,4
"org.apache.lucene.search.highlight.TokenSourcesTest.OverlappingTokenStream",8,9,32,41,34,2,0,1,33,33,0,20,1,"1,50",1,13,3
"org.apache.lucene.search.highlight.TokenStreamFromTermPositionVector",12,10,33,43,38,2,0,1,69,60,0,20,1,"2,25",1,23,9
"org.apache.lucene.search.highlight.WeightedSpanTerm",1,2,7,9,0,0,0,2,58,34,0,0,0,"1,29",3,7,9
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor",31,8,20,28,479,0,0,1,434,340,1,0,0,"4,35",9,66,87
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.FakeReader",7,11,108,119,424,2,0,1,20,14,0,80,1,"1,50",1,8,3
"org.apache.lucene.search.highlight.WeightedSpanTermExtractor.PositionCheckingMap",1,0,2,2,0,0,0,1,23,19,0,0,0,"2,50",1,2,5
"org.apache.lucene.search.highlight.WeightedTerm",0,2,5,7,0,0,0,2,40,26,0,0,0,"1,00",2,5,5
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest",11,1,2,3,514,0,0,1,57,38,0,0,0,"2,50",1,10,5
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.CustomQuery",6,2,18,20,423,1,0,1,39,39,0,9,3,"2,40",4,11,12
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyQueryScorer",5,15,21,36,484,1,0,1,10,10,0,10,1,"1,50",1,5,3
"org.apache.lucene.search.highlight.custom.HighlightCustomQueryTest.MyWeightedSpanTermExtractor",6,8,23,31,482,1,0,1,16,16,0,16,1,"1,33",0,7,4
"org.apache.lucene.search.join.JoinUtil",3,0,2,2,419,0,0,1,35,12,0,0,0,"1,00",1,2,2
"org.apache.lucene.search.join.RawTermFilter",8,1,3,4,419,1,0,1,54,44,0,0,0,"1,50",1,2,9
"org.apache.lucene.search.join.TermsCollector",4,3,10,13,419,1,0,3,27,22,0,0,0,"1,00",2,7,6
"org.apache.lucene.search.join.TermsQuery",7,6,26,32,434,2,0,1,57,47,0,20,0,"1,20",2,9,12
"org.apache.lucene.search.join.TermsQuery.SeekingTermsEnum",5,7,17,24,9,2,0,2,56,56,0,5,0,"3,00",3,7,12
"org.apache.lucene.search.join.ToChildBlockJoinQuery",8,5,22,27,421,1,0,1,100,72,0,6,6,"1,22",6,19,11
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinScorer",8,8,19,27,419,2,0,1,102,78,0,5,1,"2,67",4,15,16
"org.apache.lucene.search.join.ToChildBlockJoinQuery.ToChildBlockJoinWeight",10,4,15,19,420,1,0,3,59,53,0,0,1,"1,38",6,15,11
"org.apache.lucene.search.join.ToParentBlockJoinCollector",22,18,13,31,423,1,0,2,342,234,0,0,0,"4,25",2,41,51
"org.apache.lucene.search.join.ToParentBlockJoinCollector.FakeScorer",3,4,18,22,419,2,0,4,23,23,0,6,0,"1,00",4,6,5
"org.apache.lucene.search.join.ToParentBlockJoinCollector.OneGroup",3,9,6,15,419,2,0,0,21,21,0,2,0,"4,00",0,2,4
"org.apache.lucene.search.join.ToParentBlockJoinQuery",9,5,22,27,422,1,0,1,142,72,0,6,6,"1,22",6,19,11
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer",11,11,22,33,420,2,0,1,143,119,0,5,1,"2,78",7,19,25
"org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinWeight",12,4,15,19,421,1,0,3,64,57,0,0,1,"1,50",6,16,12
"org.apache.lucene.search.join.ToParentBlockJoinQuery.ScoreMode",4,4,0,4,0,n/a,0,0,14,5,n/a,0,0,n/a,0,0,0
"org.apache.lucene.search.payloads.AveragePayloadFunction",4,0,10,10,3,1,0,3,41,35,0,0,1,"2,00",5,8,10
"org.apache.lucene.search.payloads.MaxPayloadFunction",2,0,10,10,3,1,0,3,45,39,0,0,1,"2,20",5,8,11
"org.apache.lucene.search.payloads.MinPayloadFunction",2,0,10,10,3,1,0,3,43,39,0,0,1,"2,20",5,8,11
"org.apache.lucene.search.payloads.PayloadFunction",8,0,5,5,2,0,0,3,45,14,3,0,0,"1,00",5,8,1
"org.apache.lucene.search.payloads.PayloadNearQuery",10,8,36,44,434,3,0,1,92,78,0,15,5,"3,00",5,18,21
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanScorer",12,12,27,39,434,3,0,1,85,71,0,10,3,"2,33",3,30,14
"org.apache.lucene.search.payloads.PayloadNearQuery.PayloadNearSpanWeight",7,8,16,24,434,2,0,1,12,12,0,6,1,"1,00",1,7,2
"org.apache.lucene.search.payloads.PayloadSpanUtil",16,1,4,5,453,0,0,1,125,106,0,0,0,"6,75",1,23,27
"org.apache.lucene.search.payloads.PayloadTermQuery",8,4,29,33,428,3,0,1,55,43,0,14,3,"2,80",3,11,14
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight",9,8,17,25,428,2,0,1,22,21,0,5,2,"1,33",2,10,4
"org.apache.lucene.search.payloads.PayloadTermQuery.PayloadTermWeight.PayloadTermSpanScorer",14,12,28,40,428,3,0,1,101,73,0,10,3,"1,86",5,31,13
"org.apache.lucene.search.regex.JakartaRegexpCapabilities",0,6,7,13,0,0,0,1,84,59,0,0,0,"2,14",4,7,15
"org.apache.lucene.search.regex.JavaUtilRegexCapabilities",0,10,7,17,0,0,0,2,64,39,0,0,0,"1,71",4,7,12
"org.apache.lucene.search.regex.RegexCapabilities",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.search.regex.RegexQuery",9,5,31,36,433,2,0,1,60,43,0,16,2,"1,50",6,14,12
"org.apache.lucene.search.regex.RegexQueryCapable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.search.regex.RegexTermEnum",3,6,18,24,420,2,0,2,49,40,0,4,1,"1,60",3,12,8
"org.apache.lucene.search.regex.SpanRegexQuery",3,5,29,34,446,3,0,1,20,14,0,21,0,"1,00",2,5,4
"org.apache.lucene.search.regex.TestJakartaRegexpCapabilities",0,0,2,2,0,0,0,2,22,18,0,0,0,"1,00",0,2,2
"org.apache.lucene.search.regex.TestRegexQuery",12,4,16,20,430,0,0,1,77,76,0,0,0,"1,06",3,27,17
"org.apache.lucene.search.regex.TestSpanRegexQuery",18,2,7,9,462,0,0,1,141,111,0,0,0,"1,00",0,23,7
"org.apache.lucene.search.similar.MoreLikeThis",26,25,47,72,459,0,0,3,861,344,0,0,0,"1,66",29,72,78
"org.apache.lucene.search.similar.MoreLikeThis.FreqQ",2,3,15,18,2,1,0,1,14,11,0,10,0,"1,00",1,3,2
"org.apache.lucene.search.similar.MoreLikeThis.Int",1,1,1,2,0,0,0,0,9,6,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.similar.MoreLikeThisQuery",8,10,33,43,460,1,0,1,105,89,0,11,1,"1,05",10,30,21
"org.apache.lucene.search.similar.SimilarityQueries",11,0,2,2,423,0,0,1,80,33,0,0,0,"2,50",1,9,5
"org.apache.lucene.search.similar.TestMoreLikeThis",12,3,7,10,423,0,0,1,98,93,0,0,0,"1,29",1,17,9
"org.apache.lucene.search.spans.FieldMaskingSpanQuery",9,3,26,29,423,2,0,2,111,67,0,7,5,"1,30",8,20,13
"org.apache.lucene.search.spans.NearSpansOrdered",9,13,24,37,429,1,0,1,279,221,0,0,0,"3,06",15,29,55
"org.apache.lucene.search.spans.NearSpansUnordered",10,11,24,35,429,1,0,2,179,164,0,0,0,"2,65",11,35,45
"org.apache.lucene.search.spans.NearSpansUnordered.CellQueue",4,3,15,18,429,1,0,1,13,13,0,10,0,"1,50",1,5,3
"org.apache.lucene.search.spans.NearSpansUnordered.SpansCell",3,4,17,21,429,1,0,1,52,49,0,0,0,"1,30",9,17,13
"org.apache.lucene.search.spans.SpanFirstQuery",12,4,37,41,427,4,0,1,57,48,0,17,5,"1,67",5,16,10
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper",16,5,25,30,445,2,0,2,150,104,1,10,3,"1,54",7,18,20
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.SpanRewriteMethod",6,0,3,3,437,1,0,1,5,4,2,1,0,n/a,1,1,0
"org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.TopTermsSpanBooleanQueryRewrite",10,1,8,9,444,2,0,1,56,40,0,1,0,"1,38",4,10,11
"org.apache.lucene.search.spans.SpanNearPayloadCheckQuery",6,3,29,32,433,3,0,1,85,70,0,15,3,"2,50",5,17,15
"org.apache.lucene.search.spans.SpanNearQuery",26,6,29,35,429,2,0,3,136,117,1,8,5,"2,54",10,24,33
"org.apache.lucene.search.spans.SpanNotQuery",10,3,27,30,423,2,0,1,149,141,0,8,5,"1,95",9,21,37
"org.apache.lucene.search.spans.SpanOrQuery",22,3,27,30,424,2,0,1,176,171,0,8,5,"2,33",8,18,49
"org.apache.lucene.search.spans.SpanOrQuery.SpanQueue",3,3,15,18,3,1,0,1,17,17,0,10,0,"2,00",1,6,4
"org.apache.lucene.search.spans.SpanPayloadCheckQuery",7,3,29,32,433,3,0,1,86,66,0,15,3,"2,33",5,17,14
"org.apache.lucene.search.spans.SpanPositionCheckQuery",12,2,23,25,425,2,0,3,53,32,3,11,2,"1,33",5,12,8
"org.apache.lucene.search.spans.SpanPositionCheckQuery.AcceptStatus",6,3,0,3,0,n/a,0,0,5,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.search.spans.SpanPositionCheckQuery.PositionCheckSpan",6,1,17,18,425,1,0,1,57,55,0,0,0,"1,90",9,20,19
"org.apache.lucene.search.spans.SpanPositionRangeQuery",7,4,31,35,426,3,0,1,69,58,1,15,3,"1,50",7,18,12
"org.apache.lucene.search.spans.SpanQuery",51,1,16,17,422,1,0,3,12,8,7,11,1,"1,00",3,4,1
"org.apache.lucene.search.spans.SpanScorer",9,8,21,29,420,2,0,1,78,73,2,5,1,"2,12",7,22,17
"org.apache.lucene.search.spans.SpanTermQuery",26,2,24,26,424,2,0,1,51,48,1,10,3,"2,00",6,19,16
"org.apache.lucene.search.spans.SpanWeight",14,8,14,22,422,1,0,1,93,87,2,1,0,"1,57",5,29,11
"org.apache.lucene.search.spans.Spans",24,0,7,7,0,0,0,7,58,9,7,0,0,n/a,7,7,0
"org.apache.lucene.search.spans.TermSpans",7,6,17,23,11,1,0,1,77,71,0,0,0,"1,50",9,19,15
"org.apache.lucene.search.spell.Dictionary",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.spell.HighFrequencyDictionary",9,3,2,5,421,0,0,1,23,13,0,0,0,"1,00",1,4,2
"org.apache.lucene.search.spell.HighFrequencyDictionary.HighFrequencyIterator",5,5,5,10,421,0,0,2,46,44,0,0,0,"2,00",4,16,10
"org.apache.lucene.search.spell.JaroWinklerDistance",2,1,4,5,1,0,0,1,91,76,0,0,0,"4,50",3,4,18
"org.apache.lucene.search.spell.LevensteinDistance",4,0,2,2,1,0,0,1,73,43,0,0,0,"4,00",1,2,8
"org.apache.lucene.search.spell.LuceneDictionary",4,2,2,4,421,0,0,1,21,11,0,0,0,"1,00",1,4,2
"org.apache.lucene.search.spell.LuceneDictionary.TermIterator",5,4,4,8,421,0,0,2,39,37,0,0,0,"2,00",3,14,8
"org.apache.lucene.search.spell.NGramDistance",2,1,3,4,1,0,0,1,111,82,0,0,0,"6,33",1,3,19
"org.apache.lucene.search.spell.PlainTextDictionary",3,1,4,5,22,0,0,1,26,15,0,0,0,"1,00",1,4,4
"org.apache.lucene.search.spell.PlainTextDictionary.FileIterator",4,2,4,6,22,0,1,2,33,31,0,0,0,"2,50",2,5,5
"org.apache.lucene.search.spell.SpellChecker",29,13,33,46,435,0,0,3,653,323,0,0,0,"2,18",17,69,72
"org.apache.lucene.search.spell.StringDistance",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.spell.SuggestMode",1,3,0,3,0,n/a,0,0,20,5,n/a,0,0,n/a,0,0,0
"org.apache.lucene.search.spell.SuggestWord",2,3,0,3,0,0,0,0,21,5,0,0,0,n/a,0,0,0
"org.apache.lucene.search.spell.SuggestWordFrequencyComparator",1,0,1,1,0,0,0,1,24,17,0,0,0,"5,00",1,1,5
"org.apache.lucene.search.spell.SuggestWordQueue",3,5,16,21,2,1,0,1,33,17,0,10,0,"1,00",1,4,3
"org.apache.lucene.search.spell.SuggestWordScoreComparator",0,0,1,1,0,0,0,1,24,17,0,0,0,"5,00",1,1,5
"org.apache.lucene.search.spell.TermFreqIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.spell.TermFreqIterator.TermFreqIteratorWrapper",4,1,7,8,21,0,2,2,20,15,0,0,0,"1,00",3,6,4
"org.apache.lucene.search.spell.TestJaroWinklerDistance",0,1,1,2,0,0,0,1,25,25,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.spell.TestLevenshteinDistance",0,1,2,3,0,0,0,1,29,29,0,0,0,"1,00",0,2,2
"org.apache.lucene.search.spell.TestLuceneDictionary",10,5,8,13,420,0,0,1,129,123,0,0,0,"1,88",0,20,15
"org.apache.lucene.search.spell.TestNGramDistance",0,0,4,4,0,0,0,4,105,105,0,0,0,"1,00",0,4,4
"org.apache.lucene.search.spell.TestPlainTextDictionary",2,0,1,1,419,0,0,1,20,16,0,0,0,"1,00",0,2,1
"org.apache.lucene.search.spell.TestSpellChecker",14,4,16,20,421,0,0,1,379,336,0,0,0,"1,75",1,31,28
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckWorker",3,3,2,5,421,0,0,1,26,26,0,0,0,"1,50",0,3,3
"org.apache.lucene.search.spell.TestSpellChecker.SpellCheckerMock",3,0,4,4,421,0,0,1,18,18,0,0,0,"1,00",1,4,4
"org.apache.lucene.search.suggest.Average",0,2,3,5,0,0,0,1,41,29,0,0,0,"1,33",2,3,4
"org.apache.lucene.search.suggest.BufferingTermFreqIteratorWrapper",5,5,7,12,21,0,2,2,39,32,0,0,0,"1,75",3,9,7
"org.apache.lucene.search.suggest.BytesRefList",11,5,9,14,25,0,0,1,159,101,0,0,0,"1,47",7,18,22
"org.apache.lucene.search.suggest.FileDictionary",4,3,4,7,24,0,1,1,25,14,0,0,0,"1,00",1,3,3
"org.apache.lucene.search.suggest.FileDictionary.FileIterator",5,2,6,8,24,0,2,2,38,35,0,0,0,"2,00",3,5,6
"org.apache.lucene.search.suggest.Lookup",19,1,5,6,25,0,0,4,54,17,5,0,0,"2,00",3,7,2
"org.apache.lucene.search.suggest.Lookup.CharSequenceComparator",1,0,1,1,0,0,0,1,16,14,0,0,0,"3,00",1,1,3
"org.apache.lucene.search.suggest.Lookup.LookupPriorityQueue",4,3,16,19,27,1,0,2,25,17,0,10,0,"1,33",2,6,4
"org.apache.lucene.search.suggest.Lookup.LookupResult",12,2,3,5,25,0,0,1,19,15,0,0,0,"1,00",2,3,3
"org.apache.lucene.search.suggest.LookupBenchmarkTest",9,10,10,20,84,0,0,1,173,133,0,0,0,"1,58",3,11,19
"org.apache.lucene.search.suggest.LookupBenchmarkTest.BenchmarkResult",1,1,1,2,0,0,0,0,7,6,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.suggest.PersistenceTest",6,1,4,5,76,0,0,1,56,52,0,0,0,"1,75",0,7,7
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper",15,8,12,20,38,0,2,2,108,101,1,0,0,"2,00",5,31,18
"org.apache.lucene.search.suggest.SortedTermFreqIteratorWrapper.BytesOnlyComparator",2,3,3,6,19,0,0,1,19,18,0,0,0,"1,00",1,4,3
"org.apache.lucene.search.suggest.TermFreq",3,2,2,4,19,0,0,0,27,11,0,0,0,"1,00",0,2,2
"org.apache.lucene.search.suggest.TermFreqArrayIterator",4,3,9,12,21,0,2,2,33,28,0,0,0,"1,17",3,8,7
"org.apache.lucene.search.suggest.TestBytesRefList",3,0,2,2,26,0,0,2,69,68,0,0,0,"6,50",0,13,13
"org.apache.lucene.search.suggest.TestHighFrequencyDictionary",6,0,1,1,423,0,0,1,14,14,0,0,0,"1,00",0,10,1
"org.apache.lucene.search.suggest.TestTermFreqIterator",8,0,5,5,31,0,0,3,87,84,0,0,0,"2,80",2,23,14
"org.apache.lucene.search.suggest.UnsortedTermFreqIteratorWrapper",4,3,3,6,21,0,0,1,36,30,0,0,0,"2,00",2,4,6
"org.apache.lucene.search.suggest.fst.BytesRefSorter",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.search.suggest.fst.BytesRefSortersTest",2,0,3,3,20,0,0,1,34,31,0,0,0,"1,67",0,6,5
"org.apache.lucene.search.suggest.fst.ExternalRefSorter",3,4,6,10,23,0,0,1,59,45,0,0,0,"1,83",2,7,11
"org.apache.lucene.search.suggest.fst.ExternalRefSorter.ByteSequenceIterator",6,3,5,8,22,0,1,2,41,36,0,0,0,"2,00",2,5,6
"org.apache.lucene.search.suggest.fst.FSTCompletion",7,6,13,19,48,0,0,2,323,164,0,0,0,"3,00",11,25,39
"org.apache.lucene.search.suggest.fst.FSTCompletion.Completion",4,2,3,5,19,0,0,1,19,15,0,0,0,"1,00",2,6,3
"org.apache.lucene.search.suggest.fst.FSTCompletionBuilder",10,6,5,11,53,0,0,1,211,62,0,0,0,"2,60",2,19,13
"org.apache.lucene.search.suggest.fst.FSTCompletionLookup",22,6,14,20,68,1,0,1,219,137,0,1,0,"2,11",5,32,19
"org.apache.lucene.search.suggest.fst.FSTCompletionTest",4,2,18,20,27,0,0,5,197,185,0,0,0,"1,89",4,18,34
"org.apache.lucene.search.suggest.fst.FSTLookup",19,6,22,28,56,1,0,1,456,251,0,1,0,"3,00",11,40,57
"org.apache.lucene.search.suggest.fst.FSTLookup.Entry",1,2,1,3,0,0,0,0,9,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.suggest.fst.FSTLookupTest",7,1,14,15,89,0,0,1,146,136,0,0,0,"1,79",3,22,25
"org.apache.lucene.search.suggest.fst.InMemorySorter",3,3,4,7,26,0,0,1,27,19,0,0,0,"1,25",2,7,5
"org.apache.lucene.search.suggest.fst.LargeInputFST",1,0,1,1,19,0,0,1,31,27,0,0,0,"3,00",0,3,3
"org.apache.lucene.search.suggest.fst.Sort",12,13,10,23,33,0,0,2,239,179,0,0,0,"2,73",5,32,30
"org.apache.lucene.search.suggest.fst.Sort.BufferSize",3,1,3,4,33,0,0,1,39,25,0,0,0,"1,67",2,3,5
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesReader",4,1,5,6,19,0,0,1,66,41,0,0,0,"1,20",2,6,6
"org.apache.lucene.search.suggest.fst.Sort.ByteSequencesWriter",6,1,6,7,19,0,0,1,38,30,0,0,0,"1,17",0,6,7
"org.apache.lucene.search.suggest.fst.Sort.FileAndTop",2,2,1,3,19,0,0,0,8,8,0,0,0,"1,00",0,2,1
"org.apache.lucene.search.suggest.fst.Sort.SortInfo",4,8,1,9,33,0,0,0,21,18,0,0,0,"1,00",1,1,1
"org.apache.lucene.search.suggest.fst.TestSort",5,2,11,13,34,0,0,1,110,96,0,0,0,"1,58",3,15,19
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup",22,3,15,18,74,1,0,2,176,134,0,1,0,"2,09",7,42,23
"org.apache.lucene.search.suggest.fst.WFSTCompletionLookup.WFSTTermFreqIteratorWrapper",10,8,15,23,74,1,2,1,24,24,0,3,2,"1,33",1,15,4
"org.apache.lucene.search.suggest.fst.WFSTCompletionTest",3,0,2,2,28,0,0,2,96,86,0,0,0,"4,33",0,4,13
"org.apache.lucene.search.suggest.jaspell.JaspellLookup",15,7,13,20,31,1,0,1,137,134,0,1,0,"3,62",5,21,29
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie",1,3,30,33,1,0,0,1,759,396,0,0,0,"3,30",21,31,99
"org.apache.lucene.search.suggest.jaspell.JaspellTernarySearchTrie.TSTNode",2,7,1,8,0,0,0,0,25,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.search.suggest.tst.TSTAutocomplete",0,0,3,3,0,0,0,2,130,89,0,0,0,"7,67",2,3,23
"org.apache.lucene.search.suggest.tst.TSTLookup",14,7,14,21,45,1,0,1,152,144,0,1,0,"4,11",6,22,37
"org.apache.lucene.search.suggest.tst.TernaryTreeNode",0,6,0,6,0,0,0,0,22,8,0,0,0,n/a,0,0,0
"org.apache.lucene.search.vectorhighlight.AbstractTestCase",19,14,25,39,495,0,0,3,209,151,0,0,0,"1,32",12,45,33
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BasicNGramTokenizer",5,22,52,74,28,3,0,1,117,117,0,21,3,"1,85",6,21,24
"org.apache.lucene.search.vectorhighlight.AbstractTestCase.BigramAnalyzer",4,1,10,11,34,1,0,1,6,6,0,6,0,"1,00",1,2,1
"org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder",11,7,24,31,427,0,0,3,184,182,0,0,0,"1,83",19,39,42
"org.apache.lucene.search.vectorhighlight.BoundaryScanner",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScanner",0,1,3,4,0,0,0,1,24,17,0,0,0,"1,67",2,3,5
"org.apache.lucene.search.vectorhighlight.BreakIteratorBoundaryScannerTest",0,1,6,7,0,0,0,1,54,54,0,0,0,"1,00",0,6,6
"org.apache.lucene.search.vectorhighlight.FastVectorHighlighter",5,7,14,21,420,0,0,2,182,71,0,0,0,"1,00",10,14,14
"org.apache.lucene.search.vectorhighlight.FieldFragList",2,1,3,4,5,0,0,1,32,11,0,0,0,"1,00",1,4,3
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo",7,4,6,10,4,0,0,4,37,37,0,0,0,"1,33",5,8,8
"org.apache.lucene.search.vectorhighlight.FieldFragList.WeightedFragInfo.SubInfo",3,3,4,7,1,0,0,2,26,25,0,0,0,"1,25",3,5,5
"org.apache.lucene.search.vectorhighlight.FieldPhraseList",3,1,3,4,463,0,0,1,73,54,0,0,0,"4,67",0,10,14
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo",7,4,6,10,2,0,0,1,64,63,0,0,0,"2,33",4,12,14
"org.apache.lucene.search.vectorhighlight.FieldPhraseList.WeightedPhraseInfo.Toffs",3,2,5,7,0,0,0,2,23,23,0,0,0,"1,00",3,5,5
"org.apache.lucene.search.vectorhighlight.FieldPhraseListTest",2,0,13,13,419,0,0,12,169,133,0,0,0,"1,00",0,15,13
"org.apache.lucene.search.vectorhighlight.FieldQuery",20,5,15,20,460,0,0,2,275,191,0,0,0,"4,27",9,45,64
"org.apache.lucene.search.vectorhighlight.FieldQuery.QueryPhraseMap",9,6,13,19,460,0,0,1,88,84,0,0,0,"1,85",8,21,24
"org.apache.lucene.search.vectorhighlight.FieldQueryTest",10,0,28,28,461,0,0,16,736,641,0,0,0,"1,00",0,37,28
"org.apache.lucene.search.vectorhighlight.FieldTermStack",20,2,6,8,493,0,0,3,87,57,0,0,0,"2,17",3,27,13
"org.apache.lucene.search.vectorhighlight.FieldTermStack.TermInfo",6,4,7,11,0,0,0,4,25,25,0,0,0,"1,00",6,7,7
"org.apache.lucene.search.vectorhighlight.FieldTermStackTest",4,0,12,12,437,0,0,5,128,116,0,0,0,"1,00",0,16,12
"org.apache.lucene.search.vectorhighlight.FragListBuilder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.search.vectorhighlight.FragmentsBuilder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,4,n/a
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest",5,0,23,23,426,0,0,1,222,206,0,0,0,"1,00",2,28,23
"org.apache.lucene.search.vectorhighlight.IndexTimeSynonymTest.TokenArrayAnalyzer",9,2,11,13,41,1,0,1,21,21,0,6,0,"1,33",1,3,4
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder",2,0,5,5,6,0,0,1,34,19,0,0,0,"1,00",1,5,5
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilder.ScoreComparator",2,0,1,1,5,0,0,1,12,11,0,0,0,"5,00",1,1,5
"org.apache.lucene.search.vectorhighlight.ScoreOrderFragmentsBuilderTest",2,0,2,2,419,0,0,1,20,19,0,0,0,"1,00",1,2,2
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScanner",0,4,7,11,0,0,0,1,53,45,0,0,0,"2,00",2,7,14
"org.apache.lucene.search.vectorhighlight.SimpleBoundaryScannerTest",0,1,2,3,0,0,0,1,31,29,0,0,0,"1,00",0,2,2
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilder",1,4,3,7,3,0,0,1,62,58,0,0,0,"5,33",1,5,16
"org.apache.lucene.search.vectorhighlight.SimpleFragListBuilderTest",1,0,14,14,419,0,0,4,126,126,0,0,0,"1,07",1,14,15
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilder",1,0,5,5,5,0,0,1,34,18,0,0,0,"1,00",1,5,5
"org.apache.lucene.search.vectorhighlight.SimpleFragmentsBuilderTest",12,0,12,12,420,0,0,7,118,115,0,0,0,"1,08",1,20,13
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilder",1,0,1,1,3,0,0,1,27,18,0,0,0,"5,00",1,1,5
"org.apache.lucene.search.vectorhighlight.SingleFragListBuilderTest",1,0,4,4,419,0,0,1,42,26,0,0,0,"1,00",1,4,4
"org.apache.lucene.spatial.DistanceUtils",22,14,18,32,7,0,0,5,396,233,0,0,0,"3,39",16,23,61
"org.apache.lucene.spatial.DistanceUtilsTest",2,0,7,7,2,0,0,7,208,183,0,0,0,"1,00",0,7,7
"org.apache.lucene.spatial.geohash.GeoHashDistanceFilter",7,10,13,23,428,2,0,1,85,65,0,4,0,"2,00",3,8,10
"org.apache.lucene.spatial.geohash.GeoHashUtils",5,4,3,7,1,0,0,1,100,83,0,0,0,"4,67",2,3,14
"org.apache.lucene.spatial.geohash.TestGeoHashUtils",0,0,4,4,0,0,0,4,55,37,0,0,0,"1,00",0,4,4
"org.apache.lucene.spatial.geometry.CartesianPoint",0,2,7,9,0,0,0,1,57,45,0,0,0,"1,71",6,7,12
"org.apache.lucene.spatial.geometry.DistanceUnits",4,6,6,12,0,n/a,0,3,78,38,n/a,0,0,"1,67",5,6,10
"org.apache.lucene.spatial.geometry.FixedLatLng",0,5,19,24,0,0,0,5,118,113,0,0,0,"1,58",15,19,30
"org.apache.lucene.spatial.geometry.FloatLatLng",4,3,15,18,0,0,0,5,106,101,0,0,0,"1,73",13,15,26
"org.apache.lucene.spatial.geometry.LatLng",4,0,19,19,0,0,0,8,113,63,0,0,0,"1,67",19,19,10
"org.apache.lucene.spatial.geometry.TestDistanceUnits",0,0,3,3,0,0,0,3,37,22,0,0,0,"1,00",0,3,3
"org.apache.lucene.spatial.geometry.shape.DistanceApproximation",0,6,6,12,0,0,0,1,94,65,0,0,0,"1,50",4,6,9
"org.apache.lucene.spatial.geometry.shape.Ellipse",0,8,9,17,0,0,0,4,186,127,0,0,0,"2,67",6,9,24
"org.apache.lucene.spatial.geometry.shape.Geometry2D",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.lucene.spatial.geometry.shape.IntersectCase",0,4,0,4,0,n/a,0,0,13,7,n/a,0,0,n/a,0,0,0
"org.apache.lucene.spatial.geometry.shape.LLRect",4,2,14,16,2,0,0,2,146,113,0,0,0,"2,21",12,20,31
"org.apache.lucene.spatial.geometry.shape.LineSegment",0,2,5,7,0,0,0,1,88,61,0,0,0,"3,80",3,5,19
"org.apache.lucene.spatial.geometry.shape.Point2D",0,2,19,21,0,0,0,1,98,91,0,0,0,"1,26",7,19,24
"org.apache.lucene.spatial.geometry.shape.Rectangle",1,2,16,18,0,0,0,2,92,84,0,0,0,"1,69",11,16,27
"org.apache.lucene.spatial.geometry.shape.Vector2D",0,2,17,19,0,0,0,1,108,80,0,0,0,"1,29",9,17,22
"org.apache.lucene.spatial.tier.CartesianPolyFilterBuilder",7,5,4,9,425,0,0,1,135,91,0,0,0,"3,50",3,15,14
"org.apache.lucene.spatial.tier.CartesianShapeFilter",7,2,3,5,419,1,0,1,33,25,0,0,0,"2,00",1,12,4
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource",4,3,4,7,420,1,0,1,27,22,0,0,0,"1,33",1,5,4
"org.apache.lucene.spatial.tier.DistanceFieldComparatorSource.DistanceScoreDocLookupComparator",3,3,16,19,420,1,0,1,51,49,0,2,0,"1,50",3,8,12
"org.apache.lucene.spatial.tier.DistanceFilter",3,6,9,15,420,1,0,2,69,38,1,0,0,"1,17",4,8,7
"org.apache.lucene.spatial.tier.DistanceHandler",2,3,4,7,9,0,0,1,62,46,0,0,0,"3,25",3,5,13
"org.apache.lucene.spatial.tier.DistanceHandler.Precision",2,4,0,4,0,n/a,0,0,1,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.spatial.tier.DistanceQueryBuilder",6,6,10,16,434,0,0,4,107,70,0,0,0,"1,40",8,14,14
"org.apache.lucene.spatial.tier.InvalidGeoException",6,1,1,2,0,0,0,0,15,7,0,0,0,"1,00",0,1,1
"org.apache.lucene.spatial.tier.LatLongDistanceFilter",5,6,4,10,426,0,0,1,95,70,0,0,0,"2,00",3,7,10
"org.apache.lucene.spatial.tier.Shape",0,2,5,7,0,0,0,2,25,20,0,0,0,"1,00",3,5,5
"org.apache.lucene.spatial.tier.TestCartesian",29,9,10,19,450,0,0,2,439,341,0,0,0,"3,11",0,42,56
"org.apache.lucene.spatial.tier.TestCartesianShapeFilter",0,0,1,1,0,0,0,1,18,13,0,0,0,"1,00",0,1,1
"org.apache.lucene.spatial.tier.TestDistance",12,6,5,11,422,0,0,1,91,60,0,0,0,"1,20",0,21,6
"org.apache.lucene.spatial.tier.projections.CartesianTierPlotter",2,8,12,20,0,0,0,2,115,65,0,0,0,"1,08",8,12,13
"org.apache.lucene.spatial.tier.projections.IProjector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.spatial.tier.projections.SinusoidalProjector",2,0,2,2,0,0,0,2,26,13,0,0,0,"1,00",2,2,2
"org.apache.lucene.spatial.tier.projections.SinusoidalProjectorTest",0,0,1,1,0,0,0,1,24,6,0,0,0,"1,00",0,1,1
"org.apache.lucene.store.AlreadyClosedException",16,0,1,1,0,0,0,0,9,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.store.BufferedIndexInput",17,8,47,55,23,2,0,1,295,249,3,6,8,"2,77",10,33,61
"org.apache.lucene.store.BufferedIndexOutput",3,5,28,33,22,2,0,2,106,68,1,12,0,"2,14",2,9,15
"org.apache.lucene.store.ByteArrayDataInput",7,4,29,33,20,1,0,1,115,107,0,6,5,"1,93",8,15,29
"org.apache.lucene.store.ByteArrayDataOutput",8,4,21,25,21,1,0,1,42,36,0,11,0,"1,00",1,8,8
"org.apache.lucene.store.ChecksumIndexInput",3,4,31,35,24,2,0,2,45,40,0,14,0,"1,00",4,14,8
"org.apache.lucene.store.ChecksumIndexOutput",3,3,30,33,22,2,0,2,68,51,0,12,0,"1,00",3,19,11
"org.apache.lucene.store.DataInput",59,1,14,15,0,0,0,1,214,122,5,0,0,"2,58",10,14,31
"org.apache.lucene.store.DataOutput",57,2,13,15,20,0,0,1,163,107,5,0,0,"2,18",0,15,24
"org.apache.lucene.store.DirectIOLinuxDirectory",8,8,45,53,437,2,0,1,47,20,0,30,2,"1,67",2,9,5
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexInput",3,10,33,43,437,2,0,1,133,121,0,13,1,"1,70",4,13,17
"org.apache.lucene.store.DirectIOLinuxDirectory.DirectIOLinuxIndexOutput",3,9,28,37,437,2,0,2,129,104,0,12,0,"1,78",2,11,16
"org.apache.lucene.store.Directory",199,2,21,23,418,0,0,9,242,85,5,0,0,"1,50",11,29,18
"org.apache.lucene.store.FSDirectory",40,6,47,53,433,1,0,7,387,215,5,6,5,"1,86",16,41,52
"org.apache.lucene.store.FSDirectory.FSIndexOutput",2,8,34,42,433,3,0,1,54,50,0,15,3,"1,33",1,9,8
"org.apache.lucene.store.FSLockFactory",5,2,6,8,4,1,0,1,27,11,2,2,0,"1,50",1,2,3
"org.apache.lucene.store.FileSwitchDirectory",4,6,36,42,419,1,0,2,145,119,0,9,2,"1,62",10,26,26
"org.apache.lucene.store.IndexInput",49,2,23,25,23,1,0,6,85,44,8,11,0,"2,20",3,12,11
"org.apache.lucene.store.IndexOutput",39,1,19,20,21,1,0,6,33,8,5,11,0,"1,00",2,6,1
"org.apache.lucene.store.InputStreamDataInput",9,2,18,20,1,1,0,1,31,26,0,11,0,"1,75",1,4,7
"org.apache.lucene.store.Lock",21,3,4,7,2,0,0,3,76,36,5,0,0,"6,00",3,6,6
"org.apache.lucene.store.Lock.With",2,2,3,5,3,0,0,1,30,19,0,0,0,"1,50",2,5,3
"org.apache.lucene.store.LockFactory",16,1,4,5,3,0,0,3,47,11,4,0,0,"1,00",2,4,2
"org.apache.lucene.store.LockObtainFailedException",21,0,1,1,0,0,0,0,12,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.store.LockReleaseFailedException",2,0,1,1,0,0,0,0,10,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.store.LockStressTest",6,0,1,1,8,0,0,1,72,64,0,0,0,"6,00",0,7,6
"org.apache.lucene.store.LockVerifyServer",1,0,2,2,1,0,0,1,57,47,0,0,0,"4,50",1,2,9
"org.apache.lucene.store.MMapDirectory",7,9,50,59,433,2,0,2,177,77,0,31,1,"1,56",3,12,14
"org.apache.lucene.store.MMapDirectory.MMapIndexInput",6,11,37,48,433,2,0,2,204,192,0,10,4,"2,07",9,22,29
"org.apache.lucene.store.NIOFSDirectory",6,5,45,50,433,2,0,1,51,13,0,31,1,"1,00",1,8,3
"org.apache.lucene.store.NIOFSDirectory.NIOFSIndexInput",4,14,60,74,26,4,0,1,92,80,0,34,3,"2,75",0,8,11
"org.apache.lucene.store.NRTCachingDirectory",12,9,43,52,419,1,0,1,284,205,0,3,8,"1,88",15,54,45
"org.apache.lucene.store.NativeFSLock",3,7,10,17,4,1,0,1,189,135,0,1,0,"3,67",4,7,22
"org.apache.lucene.store.NativeFSLockFactory",6,2,11,13,7,2,0,1,85,27,0,4,0,"1,60",1,8,8
"org.apache.lucene.store.NativePosixUtil",2,6,6,12,0,0,0,5,22,22,0,0,0,"2,00",5,6,7
"org.apache.lucene.store.NoLock",2,1,8,9,3,1,0,3,17,17,0,1,0,"1,00",3,4,4
"org.apache.lucene.store.NoLockFactory",4,3,8,11,5,1,0,3,29,15,0,2,0,"1,00",2,4,4
"org.apache.lucene.store.NoSuchDirectoryException",5,0,1,1,0,0,0,0,9,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.store.OutputStreamDataOutput",8,2,17,19,21,1,0,1,21,17,0,11,0,"1,00",0,4,4
"org.apache.lucene.store.RAMDirectory",33,5,34,39,418,1,0,1,196,120,2,11,0,"1,79",8,28,25
"org.apache.lucene.store.RAMFile",8,6,11,17,418,0,0,3,58,47,1,0,0,"1,09",7,11,12
"org.apache.lucene.store.RAMInputStream",7,10,33,43,418,2,0,2,108,99,0,13,1,"2,30",3,14,23
"org.apache.lucene.store.RAMOutputStream",17,8,34,42,418,2,0,1,139,126,0,11,1,"1,87",3,23,28
"org.apache.lucene.store.SimpleFSDirectory",6,5,45,50,433,2,0,1,33,14,0,31,1,"1,00",1,7,3
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput",6,10,56,66,25,3,0,3,89,78,1,26,2,"1,56",3,16,14
"org.apache.lucene.store.SimpleFSDirectory.SimpleFSIndexInput.Descriptor",2,3,2,5,25,0,0,1,19,17,0,0,0,"1,50",0,3,3
"org.apache.lucene.store.SimpleFSLock",3,3,9,12,4,1,0,1,35,33,0,1,0,"1,80",3,6,9
"org.apache.lucene.store.SimpleFSLockFactory",6,2,11,13,7,2,0,1,74,30,0,4,0,"1,80",1,7,9
"org.apache.lucene.store.SingleInstanceLock",2,3,9,12,3,1,0,1,30,30,0,1,0,"1,00",3,5,5
"org.apache.lucene.store.SingleInstanceLockFactory",5,2,6,8,5,1,0,1,28,15,0,2,0,"1,50",1,3,3
"org.apache.lucene.store.VerifyingLockFactory",4,5,7,12,5,1,0,1,42,21,0,2,0,"1,00",1,6,3
"org.apache.lucene.store.VerifyingLockFactory.CheckedLock",3,2,10,12,5,1,0,1,47,47,0,0,1,"1,50",3,10,9
"org.apache.lucene.store.WindowsDirectory",5,6,49,55,435,2,0,5,54,21,0,31,1,"1,00",4,11,7
"org.apache.lucene.store.WindowsDirectory.WindowsIndexInput",2,11,53,64,435,3,0,3,47,46,0,28,1,"1,33",2,12,8
"org.apache.lucene.store.instantiated.FieldSetting",0,8,4,12,0,0,0,0,31,28,0,0,0,"1,50",2,4,6
"org.apache.lucene.store.instantiated.FieldSettings",0,1,5,6,0,0,0,1,54,51,0,0,0,"3,00",4,5,15
"org.apache.lucene.store.instantiated.InstantiatedAllTermDocs",1,3,20,23,10,1,1,1,11,11,0,8,0,"1,00",1,3,2
"org.apache.lucene.store.instantiated.InstantiatedDocument",1,4,8,12,38,0,0,3,42,32,0,0,0,"1,00",4,10,8
"org.apache.lucene.store.instantiated.InstantiatedIndex",16,9,24,33,419,0,0,6,251,205,0,0,0,"2,21",12,55,53
"org.apache.lucene.store.instantiated.InstantiatedIndexReader",15,11,98,109,420,1,0,9,305,228,0,40,5,"2,03",20,39,59
"org.apache.lucene.store.instantiated.InstantiatedIndexReader.NormUpdate",1,2,1,3,0,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter",23,11,24,35,425,0,0,4,517,386,0,0,0,"3,52",6,70,88
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.FieldSetting",1,6,2,8,0,0,0,0,13,13,0,0,0,"1,00",0,2,2
"org.apache.lucene.store.instantiated.InstantiatedIndexWriter.TermDocumentInformationFactory",2,3,0,3,1,0,0,0,5,5,0,0,0,n/a,0,0,0
"org.apache.lucene.store.instantiated.InstantiatedTerm",2,6,16,22,7,0,0,3,187,105,0,0,0,"1,67",13,20,30
"org.apache.lucene.store.instantiated.InstantiatedTermDocs",4,4,17,21,9,0,1,2,96,73,0,0,0,"2,11",5,10,19
"org.apache.lucene.store.instantiated.InstantiatedTermDocumentInformation",1,9,10,19,1,0,0,5,89,60,0,0,0,"1,00",5,10,13
"org.apache.lucene.store.instantiated.InstantiatedTermEnum",2,3,10,13,8,1,0,2,50,35,0,0,0,"1,33",3,6,8
"org.apache.lucene.store.instantiated.InstantiatedTermFreqVector",2,5,15,20,2,0,1,4,74,61,0,0,0,"1,89",8,9,17
"org.apache.lucene.store.instantiated.InstantiatedTermPositionVector",2,1,11,12,3,0,2,2,19,14,0,0,0,"1,00",2,3,3
"org.apache.lucene.store.instantiated.InstantiatedTermPositions",2,1,19,20,10,0,2,1,69,37,0,0,0,"1,14",6,7,8
"org.apache.lucene.store.instantiated.TestEmptyIndex",9,0,5,5,423,0,0,3,58,56,0,0,0,"1,40",0,19,7
"org.apache.lucene.store.instantiated.TestIndicesEquals",25,0,8,8,423,0,0,1,418,374,0,0,0,"4,92",2,62,59
"org.apache.lucene.store.instantiated.TestMultiSegmentReaderOnConstructor",9,0,2,2,419,0,0,1,36,32,0,0,0,"1,00",0,14,2
"org.apache.lucene.store.instantiated.TestRealTime",8,0,1,1,424,0,0,1,30,24,0,0,0,"1,00",0,7,1
"org.apache.lucene.store.instantiated.TestRealTime.Collector",4,1,8,9,419,1,0,4,13,13,0,0,0,"1,00",1,4,4
"org.apache.lucene.store.instantiated.TestSerialization",9,0,1,1,430,0,0,1,25,25,0,0,0,"1,00",0,11,1
"org.apache.lucene.store.instantiated.TestUnoptimizedReaderOnConstructor",9,0,2,2,419,0,0,1,35,31,0,0,0,"1,00",0,14,2
"org.apache.lucene.util.ArrayUtil",72,0,54,54,10,0,0,1,628,438,0,0,0,"1,90",41,57,118
"org.apache.lucene.util.Attribute",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,0,n/a
"org.apache.lucene.util.AttributeImpl",48,2,7,9,23,0,1,3,165,76,32,0,0,"2,50",4,11,15
"org.apache.lucene.util.AttributeReflector",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.util.AttributeSource",231,5,23,28,23,0,0,1,381,241,3,0,0,"2,48",15,33,67
"org.apache.lucene.util.AttributeSource.AttributeFactory",26,1,1,2,23,0,0,1,14,4,2,0,0,n/a,1,2,0
"org.apache.lucene.util.AttributeSource.AttributeFactory.DefaultAttributeFactory",6,1,4,5,23,1,0,1,39,35,0,0,0,"2,00",2,6,6
"org.apache.lucene.util.AttributeSource.State",18,2,1,3,23,0,0,0,18,13,0,0,0,"2,00",1,2,2
"org.apache.lucene.util.BitUtil",6,2,16,18,0,0,0,8,725,562,0,0,0,"3,56",15,16,57
"org.apache.lucene.util.BitVector",20,8,21,29,418,0,1,1,252,205,0,0,0,"2,05",9,33,39
"org.apache.lucene.util.Bits",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.util.Bits.MatchAllBits",5,1,5,6,1,0,1,2,15,12,0,0,0,"1,00",2,3,3
"org.apache.lucene.util.Bits.MatchNoBits",4,1,5,6,1,0,1,2,15,12,0,0,0,"1,00",2,3,3
"org.apache.lucene.util.ByteBlockPool",11,12,10,22,22,0,0,1,197,147,0,0,0,"2,30",4,15,23
"org.apache.lucene.util.ByteBlockPool.Allocator",5,1,4,5,1,0,0,2,16,14,3,0,0,"1,00",1,4,3
"org.apache.lucene.util.ByteBlockPool.DirectAllocator",3,1,7,8,23,1,0,1,12,11,0,2,0,"1,00",0,4,3
"org.apache.lucene.util.ByteBlockPool.DirectTrackingAllocator",3,2,8,10,23,1,0,1,23,21,0,1,1,"1,25",1,5,5
"org.apache.lucene.util.BytesRef",65,6,23,29,18,0,0,5,230,149,0,0,0,"1,57",13,27,36
"org.apache.lucene.util.BytesRef.UTF8SortedAsUTF16Comparator",1,0,2,2,18,0,0,1,41,31,0,0,0,"4,00",1,2,8
"org.apache.lucene.util.BytesRef.UTF8SortedAsUnicodeComparator",1,0,2,2,18,0,0,1,21,19,0,0,0,"2,00",1,2,4
"org.apache.lucene.util.BytesRefHash",12,12,18,30,27,0,0,1,427,281,0,0,0,"2,36",10,33,52
"org.apache.lucene.util.BytesRefHash.BytesStartArray",3,0,4,4,0,0,0,4,30,6,2,0,0,n/a,4,4,0
"org.apache.lucene.util.BytesRefHash.DirectBytesStartArray",5,3,9,12,12,1,0,2,33,27,0,0,0,"1,00",4,7,5
"org.apache.lucene.util.BytesRefHash.MaxBytesLengthExceededException",1,0,1,1,0,0,0,0,10,6,0,0,0,"1,00",0,1,1
"org.apache.lucene.util.BytesRefHash.TrackingDirectBytesStartArray",4,3,9,12,12,1,0,1,38,35,0,0,0,"1,20",4,7,6
"org.apache.lucene.util.BytesRefIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.util.CharacterUtils",9,2,6,8,5,0,0,6,127,17,2,0,0,"2,00",6,10,4
"org.apache.lucene.util.CharacterUtils.CharacterBuffer",4,4,5,9,0,0,0,2,51,25,0,0,0,"1,00",3,5,5
"org.apache.lucene.util.CharacterUtils.Java4CharacterUtils",2,0,9,9,5,1,0,4,27,27,0,0,0,"1,40",4,5,7
"org.apache.lucene.util.CharacterUtils.Java5CharacterUtils",3,0,9,9,5,1,0,4,61,56,0,0,0,"2,00",4,5,10
"org.apache.lucene.util.CharsRef",16,5,19,24,12,0,0,2,177,133,0,0,0,"1,63",11,21,31
"org.apache.lucene.util.CharsRef.UTF16SortedAsUTF8Comparator",1,0,2,2,12,0,0,1,37,32,0,0,0,"4,00",1,2,8
"org.apache.lucene.util.CloseableThreadLocal",6,4,6,10,0,0,0,1,103,61,1,0,0,"2,17",2,6,13
"org.apache.lucene.util.CodecUtil",16,1,4,5,24,0,0,2,44,37,0,0,0,"2,25",3,11,9
"org.apache.lucene.util.CollectionUtil",6,0,9,9,1,0,0,2,127,79,0,0,0,"1,47",2,12,25
"org.apache.lucene.util.CommandLineUtil",5,0,6,6,434,0,0,1,77,44,0,0,0,"1,33",5,6,8
"org.apache.lucene.util.Constants",11,20,2,22,1,0,0,1,102,77,0,0,0,"3,50",1,3,7
"org.apache.lucene.util.Counter",5,0,4,4,2,0,0,3,39,10,2,0,0,"1,50",4,4,3
"org.apache.lucene.util.Counter.AtomicCounter",1,1,4,5,2,1,0,1,11,11,0,0,0,"1,00",2,2,2
"org.apache.lucene.util.Counter.SerialCounter",1,1,4,5,2,1,0,1,11,11,0,0,0,"1,00",2,2,2
"org.apache.lucene.util.DocIdBitSet",3,1,6,7,3,1,0,2,22,17,0,0,1,"1,00",3,5,4
"org.apache.lucene.util.DocIdBitSet.DocIdBitSetIterator",2,2,7,9,1,1,0,1,27,24,0,0,0,"1,50",3,4,6
"org.apache.lucene.util.DoubleBarrelLRUCache",2,5,3,8,1,0,0,1,82,50,0,0,0,"2,67",1,4,8
"org.apache.lucene.util.DoubleBarrelLRUCache.CloneableKey",2,0,1,1,0,0,0,0,5,4,1,0,0,n/a,1,1,0
"org.apache.lucene.util.DummyConcurrentLock",1,1,6,7,0,0,0,6,20,15,0,0,0,"1,00",3,6,6
"org.apache.lucene.util.FieldCacheSanityChecker",12,1,8,9,418,0,0,1,217,135,0,0,0,"3,88",6,22,31
"org.apache.lucene.util.FieldCacheSanityChecker.Insanity",6,3,5,8,11,0,0,3,53,34,0,0,0,"1,80",4,6,9
"org.apache.lucene.util.FieldCacheSanityChecker.InsanityType",2,4,2,6,0,0,0,0,46,14,0,0,0,"1,00",1,2,2
"org.apache.lucene.util.FieldCacheSanityChecker.ReaderField",1,2,4,6,0,0,0,0,26,23,0,0,0,"1,25",3,4,5
"org.apache.lucene.util.FixedBitSet",38,2,34,36,17,1,1,3,335,268,0,0,1,"2,03",14,37,61
"org.apache.lucene.util.IOUtils",80,3,11,14,0,0,0,5,267,166,0,0,0,"4,55",3,11,50
"org.apache.lucene.util.IndexableBinaryStringTools",4,1,11,12,2,0,0,1,335,180,0,0,0,"2,91",6,13,32
"org.apache.lucene.util.IndexableBinaryStringTools.CodingCase",1,7,2,9,0,0,0,0,21,21,0,0,0,"1,50",0,2,3
"org.apache.lucene.util.IntsRef",21,4,12,16,11,0,0,1,122,109,0,0,0,"2,17",7,13,26
"org.apache.lucene.util.MapBackedSet",1,2,7,9,0,0,0,1,42,31,0,0,0,"1,00",5,7,7
"org.apache.lucene.util.MapOfSets",1,1,4,5,0,0,0,1,52,31,0,0,0,"1,50",3,4,6
"org.apache.lucene.util.NamedThreadFactory",1,5,3,8,0,0,0,2,40,24,0,0,0,"1,67",2,3,5
"org.apache.lucene.util.NumericUtils",14,5,21,26,2,0,0,3,367,174,0,0,0,"2,19",16,23,46
"org.apache.lucene.util.NumericUtils.IntRangeBuilder",1,0,2,2,2,0,0,1,22,8,1,0,0,"1,00",0,3,2
"org.apache.lucene.util.NumericUtils.LongRangeBuilder",1,0,2,2,2,0,0,1,22,8,1,0,0,"1,00",0,3,2
"org.apache.lucene.util.OpenBitSet",32,3,64,67,16,1,1,2,742,478,1,0,1,"2,02",32,69,121
"org.apache.lucene.util.OpenBitSetDISI",5,3,65,68,17,2,1,4,76,41,0,53,0,"1,83",0,16,11
"org.apache.lucene.util.OpenBitSetIterator",4,8,9,17,16,1,0,1,154,102,0,0,0,"2,83",3,8,17
"org.apache.lucene.util.PagedBytes",7,10,9,19,27,0,0,1,176,152,0,0,0,"3,44",5,12,31
"org.apache.lucene.util.PagedBytes.PagedBytesDataInput",4,4,21,25,27,1,0,1,60,56,0,10,1,"1,43",3,8,10
"org.apache.lucene.util.PagedBytes.PagedBytesDataOutput",4,1,16,17,27,1,0,1,55,53,0,11,0,"3,67",1,3,11
"org.apache.lucene.util.PagedBytes.Reader",3,5,8,13,27,0,0,2,182,113,0,0,0,"2,00",7,8,16
"org.apache.lucene.util.Parameter",0,2,4,6,0,0,0,1,39,26,0,0,0,"1,50",3,4,6
"org.apache.lucene.util.PriorityQueue",76,3,13,16,1,0,0,1,224,112,31,0,0,"2,00",9,13,24
"org.apache.lucene.util.RamUsageEstimator",51,21,25,46,8,0,0,1,508,315,0,0,0,"2,48",23,31,62
"org.apache.lucene.util.RamUsageEstimator.ClassCache",1,2,1,3,0,0,0,0,11,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.util.RamUsageEstimator.DummyOneFieldObject",1,1,0,1,0,0,0,0,5,4,0,0,0,n/a,0,0,0
"org.apache.lucene.util.RamUsageEstimator.DummyTwoLongObject",1,2,0,2,0,0,0,0,6,4,0,0,0,n/a,0,0,0
"org.apache.lucene.util.RamUsageEstimator.IdentityHashSet",2,6,14,20,1,0,0,1,206,133,0,0,0,"1,78",8,14,32
"org.apache.lucene.util.RamUsageEstimator.JvmFeature",1,5,2,7,0,n/a,0,0,17,14,n/a,0,0,"1,00",1,2,2
"org.apache.lucene.util.ReaderUtil",19,0,5,5,418,0,0,1,70,51,0,0,0,"2,80",3,9,14
"org.apache.lucene.util.ReaderUtil.Gather",4,1,5,6,419,0,0,1,32,25,2,0,0,"1,50",3,7,6
"org.apache.lucene.util.RecyclingByteBlockAllocator",5,6,13,19,23,1,0,1,129,78,0,1,1,"1,67",5,11,15
"org.apache.lucene.util.RollingCharBuffer",4,6,6,12,11,0,0,1,109,80,0,0,0,"2,17",4,7,13
"org.apache.lucene.util.ScorerDocQueue",4,4,16,20,418,0,0,1,162,115,0,0,0,"1,50",9,23,24
"org.apache.lucene.util.ScorerDocQueue.HeapedScorerDoc",3,2,3,5,418,0,0,1,10,10,0,0,0,"1,00",0,4,3
"org.apache.lucene.util.SetOnce",5,2,4,6,1,0,0,1,44,21,0,0,0,"1,25",1,5,5
"org.apache.lucene.util.SetOnce.AlreadySetException",1,0,1,1,0,0,0,0,6,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.util.SimpleStringInterner",5,2,4,6,4,1,0,1,47,31,0,1,1,"3,00",1,4,6
"org.apache.lucene.util.SimpleStringInterner.Entry",1,3,1,4,0,0,0,0,10,10,0,0,0,"1,00",0,1,1
"org.apache.lucene.util.SlowRAMDirectory",9,7,40,47,421,2,0,1,48,44,0,19,3,"1,83",3,12,11
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexInput",3,4,33,37,421,2,0,1,37,33,0,13,1,"1,20",6,19,12
"org.apache.lucene.util.SlowRAMDirectory.SlowIndexOutput",3,3,27,30,421,2,0,1,34,30,0,12,0,"1,25",2,16,10
"org.apache.lucene.util.SmallFloat",1,0,6,6,0,0,0,6,97,56,0,0,0,"3,00",6,6,18
"org.apache.lucene.util.SortedVIntList",4,7,12,19,14,1,0,2,148,98,0,0,1,"1,57",4,14,22
"org.apache.lucene.util.SortedVIntList.SortedVIntListBuilder",3,1,3,4,14,0,0,1,29,27,0,0,0,"2,00",0,6,6
"org.apache.lucene.util.SorterTemplate",5,2,12,14,0,0,0,1,168,143,7,0,0,"4,12",4,12,33
"org.apache.lucene.util.StringHelper",30,2,4,6,5,0,0,3,67,42,0,0,0,"3,00",3,6,15
"org.apache.lucene.util.StringInterner",2,0,2,2,0,0,0,1,18,8,1,0,0,"1,00",2,2,2
"org.apache.lucene.util.ThreadInterruptedException",17,0,1,1,0,0,0,0,10,5,0,0,0,"1,00",0,1,1
"org.apache.lucene.util.ToStringUtils",27,0,3,3,1,0,0,2,22,16,0,0,0,"2,00",1,3,6
"org.apache.lucene.util.TwoPhaseCommit",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.lucene.util.TwoPhaseCommitTool",4,0,2,2,4,0,0,1,73,37,0,0,0,"4,00",0,7,8
"org.apache.lucene.util.TwoPhaseCommitTool.CommitFailException",2,0,1,1,1,0,0,0,10,6,0,0,0,"1,00",0,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.PrepareCommitFailException",2,0,1,1,1,0,0,0,10,6,0,0,0,"1,00",0,1,1
"org.apache.lucene.util.TwoPhaseCommitTool.TwoPhaseCommitWrapper",1,2,11,13,1,0,1,1,29,23,0,0,0,"1,00",0,9,6
"org.apache.lucene.util.UnicodeUtil",24,16,12,28,18,0,0,1,588,389,0,0,0,"6,50",3,16,78
"org.apache.lucene.util.UnicodeUtil.UTF16Result",6,3,2,5,11,0,0,1,20,15,0,0,0,"1,50",0,3,3
"org.apache.lucene.util.UnicodeUtil.UTF8Result",12,2,1,3,11,0,0,1,15,10,0,0,0,"2,00",0,2,2
"org.apache.lucene.util.UnsafeByteArrayInputStream",3,4,10,14,1,0,0,2,112,44,0,0,0,"1,10",3,10,11
"org.apache.lucene.util.UnsafeByteArrayInputStreamTest",2,0,5,5,2,0,0,2,113,96,0,0,0,"3,20",0,14,16
"org.apache.lucene.util.UnsafeByteArrayOutputStream",3,3,11,14,1,0,0,1,147,57,0,0,0,"1,36",3,11,15
"org.apache.lucene.util.UnsafeByteArrayOutputStreamTest",2,0,7,7,2,0,0,7,157,139,0,0,0,"4,29",0,16,30
"org.apache.lucene.util.Version",163,14,1,15,0,n/a,0,1,85,27,n/a,0,0,"1,00",1,1,1
"org.apache.lucene.util.Vint8",5,1,6,7,1,0,0,5,172,95,0,0,0,"3,83",4,6,23
"org.apache.lucene.util.Vint8.Position",4,1,2,3,0,0,0,0,24,8,0,0,0,"1,00",0,2,2
"org.apache.lucene.util.Vint8Test",3,3,5,8,3,0,0,1,105,66,0,0,0,"2,20",0,12,11
"org.apache.lucene.util.VirtualMethod",6,5,5,10,2,0,0,1,116,53,0,0,0,"2,20",4,8,11
"org.apache.lucene.util.WeakIdentityMap",4,2,11,13,1,0,0,3,70,48,0,0,0,"1,18",8,12,13
"org.apache.lucene.util.WeakIdentityMap.IdentityWeakReference",1,2,3,5,0,0,0,0,24,23,0,0,0,"2,33",2,3,7
"org.apache.lucene.util.collections.ArrayHashMap",5,10,23,33,4,0,0,2,362,216,0,0,0,"1,96",17,28,45
"org.apache.lucene.util.collections.ArrayHashMap.IndexIterator",4,3,4,7,4,0,0,1,45,28,0,0,0,"1,75",2,5,7
"org.apache.lucene.util.collections.ArrayHashMap.KeyIterator",2,1,4,5,4,0,0,1,15,14,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.ArrayHashMap.ValueIterator",2,1,4,5,4,0,0,1,15,14,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.ArrayHashMapTest",2,1,6,7,5,0,0,6,220,201,0,0,0,"6,50",0,21,39
"org.apache.lucene.util.collections.DoubleIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.util.collections.FloatIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.util.collections.FloatToObjectMap",5,10,23,33,4,0,0,2,435,221,0,0,0,"2,00",17,28,46
"org.apache.lucene.util.collections.FloatToObjectMap.IndexIterator",4,3,4,7,4,0,0,1,50,27,0,0,0,"1,75",2,5,7
"org.apache.lucene.util.collections.FloatToObjectMap.KeyIterator",2,1,4,5,4,0,0,1,16,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.FloatToObjectMap.ValueIterator",2,1,4,5,4,0,0,1,18,14,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.FloatToObjectMapTest",3,0,6,6,6,0,0,6,219,200,0,0,0,"6,50",0,24,39
"org.apache.lucene.util.collections.IntArray",3,3,13,16,1,0,0,1,208,138,0,0,0,"2,77",5,13,36
"org.apache.lucene.util.collections.IntArrayTest",2,0,4,4,2,0,0,4,94,74,0,0,0,"3,75",0,12,15
"org.apache.lucene.util.collections.IntHashSet",4,9,19,28,3,0,0,1,387,184,0,0,0,"2,11",13,23,40
"org.apache.lucene.util.collections.IntHashSet.IndexIterator",3,3,4,7,3,0,0,1,50,27,0,0,0,"1,75",2,5,7
"org.apache.lucene.util.collections.IntHashSet.KeyIterator",2,1,4,5,3,0,0,1,16,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.IntHashSetTest",2,0,10,10,4,0,0,10,193,177,0,0,0,"3,70",0,19,37
"org.apache.lucene.util.collections.IntIterator",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,3,n/a
"org.apache.lucene.util.collections.IntToDoubleMap",5,11,23,34,4,0,0,2,434,218,0,0,0,"2,04",17,28,47
"org.apache.lucene.util.collections.IntToDoubleMap.IndexIterator",4,3,4,7,4,0,0,1,50,27,0,0,0,"1,75",2,5,7
"org.apache.lucene.util.collections.IntToDoubleMap.KeyIterator",2,1,4,5,4,0,0,1,16,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.IntToDoubleMap.ValueIterator",2,1,4,5,4,0,0,1,17,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.IntToDoubleMapTest",4,0,7,7,7,0,0,5,222,203,0,0,0,"5,71",0,28,40
"org.apache.lucene.util.collections.IntToIntMap",6,11,23,34,4,0,0,2,429,215,0,0,0,"2,00",17,28,46
"org.apache.lucene.util.collections.IntToIntMap.IndexIterator",4,3,4,7,4,0,0,1,50,27,0,0,0,"1,75",2,5,7
"org.apache.lucene.util.collections.IntToIntMap.KeyIterator",2,1,4,5,4,0,0,1,16,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.IntToIntMap.ValueIterator",2,1,4,5,4,0,0,1,16,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.IntToIntMapTest",3,0,7,7,6,0,0,5,222,203,0,0,0,"5,71",0,25,40
"org.apache.lucene.util.collections.IntToObjectMap",7,10,23,33,4,0,0,2,436,221,0,0,0,"2,00",17,28,46
"org.apache.lucene.util.collections.IntToObjectMap.IndexIterator",4,3,4,7,4,0,0,1,50,27,0,0,0,"1,75",2,5,7
"org.apache.lucene.util.collections.IntToObjectMap.KeyIterator",2,1,4,5,4,0,0,1,16,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.IntToObjectMap.ValueIterator",2,1,4,5,4,0,0,1,18,14,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.IntToObjectMapTest",3,0,6,6,6,0,0,6,219,200,0,0,0,"6,50",0,24,39
"org.apache.lucene.util.collections.LRUHashMap",2,1,4,5,0,0,0,1,77,17,0,0,0,"1,00",2,4,4
"org.apache.lucene.util.collections.ObjectToFloatMap",5,10,23,33,4,0,0,2,427,213,0,0,0,"1,96",17,28,45
"org.apache.lucene.util.collections.ObjectToFloatMap.IndexIterator",4,3,4,7,4,0,0,1,51,28,0,0,0,"1,75",2,5,7
"org.apache.lucene.util.collections.ObjectToFloatMap.KeyIterator",2,1,4,5,4,0,0,1,17,14,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.ObjectToFloatMap.ValueIterator",2,1,4,5,4,0,0,1,17,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.ObjectToFloatMapTest",3,0,8,8,6,0,0,4,226,207,0,0,0,"5,12",0,26,41
"org.apache.lucene.util.collections.ObjectToIntMap",5,10,23,33,4,0,0,2,426,213,0,0,0,"1,96",17,28,45
"org.apache.lucene.util.collections.ObjectToIntMap.IndexIterator",4,3,4,7,4,0,0,1,51,28,0,0,0,"1,75",2,5,7
"org.apache.lucene.util.collections.ObjectToIntMap.KeyIterator",2,1,4,5,4,0,0,1,17,14,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.ObjectToIntMap.ValueIterator",2,1,4,5,4,0,0,1,17,13,0,0,0,"1,00",2,5,4
"org.apache.lucene.util.collections.ObjectToIntMapTest",3,0,8,8,6,0,0,4,226,207,0,0,0,"5,12",0,26,41
"org.apache.lucene.util.collections.TestLRUHashMap",1,0,1,1,1,0,0,1,53,34,0,0,0,"1,00",0,2,1
"org.apache.lucene.util.encoding.ChunksIntEncoder",0,5,4,9,0,0,0,1,74,35,0,0,0,"1,50",0,4,6
"org.apache.lucene.util.encoding.DGapIntDecoder",1,2,4,6,0,0,0,1,32,24,0,0,0,"1,25",2,4,5
"org.apache.lucene.util.encoding.DGapIntEncoder",5,1,5,6,0,0,0,2,40,24,0,0,0,"1,00",2,5,5
"org.apache.lucene.util.encoding.EightFlagsIntDecoder",0,4,3,7,0,0,0,1,58,41,0,0,0,"3,00",2,3,9
"org.apache.lucene.util.encoding.EightFlagsIntEncoder",2,1,4,5,0,0,0,2,56,26,0,0,0,"1,50",2,4,6
"org.apache.lucene.util.encoding.EncodingSpeed",10,8,3,11,10,0,0,1,614,590,0,0,0,"3,67",0,15,11
"org.apache.lucene.util.encoding.EncodingTest",10,2,12,14,11,0,0,1,375,355,0,0,0,"1,42",0,24,17
"org.apache.lucene.util.encoding.FourFlagsIntDecoder",0,4,3,7,0,0,0,1,59,42,0,0,0,"3,00",2,3,9
"org.apache.lucene.util.encoding.FourFlagsIntEncoder",2,1,4,5,0,0,0,2,71,31,0,0,0,"1,50",2,4,6
"org.apache.lucene.util.encoding.IntDecoder",5,2,2,4,0,0,0,2,26,8,0,0,0,"1,00",1,2,1
"org.apache.lucene.util.encoding.IntEncoder",9,1,5,6,0,0,0,3,84,15,0,0,0,"1,33",1,5,4
"org.apache.lucene.util.encoding.IntEncoderFilter",0,1,3,4,0,0,0,1,31,14,0,0,0,"1,00",0,3,3
"org.apache.lucene.util.encoding.NOnesIntDecoder",1,2,4,6,0,0,0,1,49,35,0,0,0,"2,25",2,4,9
"org.apache.lucene.util.encoding.NOnesIntEncoder",3,2,6,8,0,0,0,1,81,42,0,0,0,"1,67",2,6,10
"org.apache.lucene.util.encoding.SimpleIntDecoder",1,1,2,3,0,0,0,1,37,27,0,0,0,"2,50",2,2,5
"org.apache.lucene.util.encoding.SimpleIntEncoder",2,0,3,3,0,0,0,2,32,17,0,0,0,"1,00",2,3,3
"org.apache.lucene.util.encoding.SortingIntEncoder",5,3,6,9,1,0,0,2,52,43,0,0,0,"1,50",2,6,9
"org.apache.lucene.util.encoding.UniqueValuesIntEncoder",5,2,5,7,0,0,0,2,41,27,0,0,0,"1,20",2,5,6
"org.apache.lucene.util.encoding.VInt8IntDecoder",0,1,2,3,0,0,0,1,33,27,0,0,0,"3,00",2,2,6
"org.apache.lucene.util.encoding.VInt8IntEncoder",4,0,3,3,0,0,0,2,61,34,0,0,0,"2,33",2,3,7
"org.apache.lucene.util.fst.Builder",19,10,12,22,46,0,0,1,390,223,0,0,0,"3,67",6,37,44
"org.apache.lucene.util.fst.Builder.Arc",5,5,0,5,1,0,0,0,8,7,0,0,0,n/a,0,0,0
"org.apache.lucene.util.fst.Builder.CompiledNode",4,1,2,3,1,0,1,1,6,6,0,0,0,"1,00",1,1,1
"org.apache.lucene.util.fst.Builder.FreezeTail",3,0,1,1,46,0,0,1,5,3,0,0,0,n/a,0,1,0
"org.apache.lucene.util.fst.Builder.Node",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.util.fst.Builder.UnCompiledNode",10,7,10,17,46,0,1,2,97,81,0,0,0,"1,44",2,12,13
"org.apache.lucene.util.fst.ByteSequenceOutputs",5,2,17,19,22,1,0,3,102,91,0,1,0,"2,11",7,17,19
"org.apache.lucene.util.fst.BytesRefFSTEnum",4,10,25,35,49,1,0,1,84,68,0,5,0,"1,27",8,18,14
"org.apache.lucene.util.fst.BytesRefFSTEnum.InputOutput",2,2,0,2,19,0,0,0,5,4,0,0,0,n/a,0,0,0
"org.apache.lucene.util.fst.FST",43,40,35,75,46,0,0,2,1.324,940,0,0,0,"5,40",24,75,189
"org.apache.lucene.util.fst.FST.Arc",14,11,5,16,46,0,0,1,71,64,0,0,0,"2,40",5,6,12
"org.apache.lucene.util.fst.FST.ArcAndState",2,2,1,3,47,0,0,0,8,8,0,0,0,"1,00",0,1,1
"org.apache.lucene.util.fst.FST.BytesReader",14,3,17,20,1,1,0,2,14,10,2,11,0,"1,00",0,3,1
"org.apache.lucene.util.fst.FST.BytesWriter",4,2,17,19,46,1,0,1,31,28,0,11,0,"1,50",0,6,6
"org.apache.lucene.util.fst.FST.ForwardBytesReader",2,3,22,25,2,2,0,1,22,20,0,11,0,"1,00",1,6,5
"org.apache.lucene.util.fst.FST.INPUT_TYPE",9,3,0,3,0,n/a,0,0,3,1,n/a,0,0,n/a,0,0,0
"org.apache.lucene.util.fst.FST.NodeAndInCount",2,2,2,4,0,0,0,1,19,17,0,0,0,"2,00",1,2,4
"org.apache.lucene.util.fst.FST.NodeQueue",3,3,15,18,3,1,0,1,11,11,0,10,0,"1,00",1,4,2
"org.apache.lucene.util.fst.FST.ReverseBytesReader",2,3,22,25,2,2,0,1,21,21,0,11,0,"1,20",1,6,6
"org.apache.lucene.util.fst.FSTEnum",9,7,14,21,47,0,0,1,451,328,2,0,0,"6,80",4,28,68
"org.apache.lucene.util.fst.IntSequenceOutputs",4,2,17,19,23,1,0,3,106,95,0,1,0,"2,33",7,15,21
"org.apache.lucene.util.fst.IntsRefFSTEnum",5,10,25,35,49,1,0,1,84,68,0,5,0,"1,27",8,18,14
"org.apache.lucene.util.fst.IntsRefFSTEnum.InputOutput",3,2,0,2,12,0,0,0,5,4,0,0,0,n/a,0,0,0
"org.apache.lucene.util.fst.NoOutputs",6,2,17,19,22,1,0,4,62,51,0,1,0,"1,00",7,9,11
"org.apache.lucene.util.fst.NodeHash",8,5,8,13,46,0,0,1,137,119,0,0,0,"3,25",5,14,26
"org.apache.lucene.util.fst.Outputs",19,0,8,8,21,0,0,8,33,12,6,0,0,"1,00",7,8,1
"org.apache.lucene.util.fst.PairOutputs",4,3,19,22,23,1,0,1,97,90,0,1,0,"1,64",9,19,18
"org.apache.lucene.util.fst.PairOutputs.Pair",1,2,3,5,0,0,0,0,25,23,0,0,0,"1,67",2,3,5
"org.apache.lucene.util.fst.PositiveIntOutputs",7,4,19,23,22,1,0,3,91,85,0,1,0,"1,82",9,13,20
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs",4,4,22,26,23,1,0,4,150,133,0,1,1,"2,07",12,17,29
"org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.TwoLongs",1,2,4,6,0,0,0,0,28,27,0,0,0,"1,25",3,4,5
"org.apache.lucene.util.fst.Util",14,0,12,12,50,0,0,2,440,299,0,0,0,"5,33",9,35,64
"org.apache.lucene.util.fst.Util.FSTPath",3,4,3,7,47,0,0,1,24,23,0,0,0,"1,33",2,6,4
"org.apache.lucene.util.fst.Util.MinResult",4,3,2,5,12,0,0,1,21,18,0,0,0,"1,50",1,3,3
"org.apache.lucene.util.fst.Util.TopNSearcher",7,6,3,9,49,0,0,1,218,154,0,0,0,"10,33",1,13,31
"org.apache.lucene.util.packed.Direct16",6,4,22,26,36,1,2,2,61,49,0,3,2,"1,33",4,13,12
"org.apache.lucene.util.packed.Direct32",6,4,22,26,36,1,2,2,57,46,0,3,2,"1,22",4,13,11
"org.apache.lucene.util.packed.Direct64",6,4,22,26,36,1,2,2,53,42,0,3,2,"1,11",4,13,10
"org.apache.lucene.util.packed.Direct8",6,4,22,26,36,1,2,2,62,50,0,3,2,"1,33",4,13,12
"org.apache.lucene.util.packed.GrowableWriter",4,3,18,21,37,0,2,1,71,63,0,0,0,"1,45",8,21,16
"org.apache.lucene.util.packed.Packed32",6,15,23,38,36,1,2,2,181,127,0,5,0,"2,10",4,14,21
"org.apache.lucene.util.packed.Packed64",6,15,23,38,36,1,2,2,172,117,0,5,0,"1,90",4,14,19
"org.apache.lucene.util.packed.PackedInts",16,3,7,10,36,0,0,5,135,79,0,0,0,"3,71",7,22,26
"org.apache.lucene.util.packed.PackedInts.Mutable",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,2,n/a
"org.apache.lucene.util.packed.PackedInts.Reader",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,5,n/a
"org.apache.lucene.util.packed.PackedInts.ReaderImpl",8,2,11,13,36,0,1,4,28,24,6,0,0,"1,00",5,7,6
"org.apache.lucene.util.packed.PackedInts.Writer",4,3,3,6,36,0,0,2,20,17,1,0,0,"1,00",0,5,1
"org.apache.lucene.util.packed.PackedWriter",3,7,7,14,36,1,0,1,73,53,0,0,0,"2,25",1,7,9
"org.apache.lucene.xmlparser.CoreParser",3,5,8,13,490,0,0,2,119,103,0,0,0,"1,12",3,8,9
"org.apache.lucene.xmlparser.CorePlusExtensionsParser",9,0,3,3,537,0,0,0,36,22,0,0,0,"1,00",0,8,3
"org.apache.lucene.xmlparser.DOMUtils",23,0,17,17,0,0,0,10,226,205,0,0,0,"2,35",16,17,40
"org.apache.lucene.xmlparser.FilterBuilder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.xmlparser.FilterBuilderFactory",3,1,3,4,419,0,0,1,22,19,0,0,0,"1,33",2,3,4
"org.apache.lucene.xmlparser.ParserException",29,0,4,4,0,0,0,0,30,14,0,0,0,"1,00",0,4,4
"org.apache.lucene.xmlparser.QueryBuilder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.xmlparser.QueryBuilderFactory",2,1,3,4,419,0,0,1,22,19,0,0,0,"1,33",2,3,4
"org.apache.lucene.xmlparser.QueryTemplateManager",1,4,16,20,0,0,0,4,143,111,0,0,0,"1,12",9,16,18
"org.apache.lucene.xmlparser.TestParser",16,4,24,28,453,0,0,1,195,175,0,0,0,"1,17",1,43,28
"org.apache.lucene.xmlparser.TestQueryTemplateManager",13,6,5,11,453,0,0,1,115,92,0,0,0,"2,40",2,16,12
"org.apache.lucene.xmlparser.builders.BooleanFilterBuilder",8,1,3,4,424,0,1,1,27,24,0,0,0,"2,00",1,6,4
"org.apache.lucene.xmlparser.builders.BooleanQueryBuilder",7,1,4,5,422,0,1,1,63,57,0,0,0,"3,00",2,14,9
"org.apache.lucene.xmlparser.builders.BoostingQueryBuilder",6,2,3,5,423,0,1,1,25,22,0,0,0,"1,00",1,8,2
"org.apache.lucene.xmlparser.builders.BoostingTermBuilder",7,0,1,1,432,0,0,1,14,11,0,0,0,"1,00",1,7,1
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder",11,4,3,7,429,0,1,1,67,48,0,0,0,"3,00",1,9,6
"org.apache.lucene.xmlparser.builders.CachedFilterBuilder.LRUCache",1,1,2,3,0,0,0,1,14,14,0,0,0,"1,00",1,2,2
"org.apache.lucene.xmlparser.builders.ConstantScoreQueryBuilder",6,1,3,4,426,0,1,1,18,15,0,0,0,"1,00",1,7,2
"org.apache.lucene.xmlparser.builders.DuplicateFilterBuilder",6,0,2,2,423,0,1,1,38,35,0,0,0,"5,00",1,7,5
"org.apache.lucene.xmlparser.builders.FilteredQueryBuilder",7,2,3,5,423,0,1,1,26,20,0,0,0,"1,00",1,9,2
"org.apache.lucene.xmlparser.builders.FuzzyLikeThisQueryBuilder",7,5,3,8,448,0,1,1,33,30,0,0,0,"1,50",1,11,3
"org.apache.lucene.xmlparser.builders.LikeThisQueryBuilder",11,5,3,8,464,0,1,1,70,60,0,0,0,"4,00",1,18,8
"org.apache.lucene.xmlparser.builders.MatchAllDocsQueryBuilder",4,0,2,2,424,0,1,1,10,7,0,0,0,"1,00",1,2,1
"org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder",7,2,3,5,440,0,1,1,120,46,0,0,0,"3,50",1,13,7
"org.apache.lucene.xmlparser.builders.NumericRangeFilterBuilder.NoMatchFilter",4,1,2,3,419,1,0,1,7,7,0,0,0,"1,00",1,1,1
"org.apache.lucene.xmlparser.builders.NumericRangeQueryBuilder",6,0,2,2,438,0,1,1,98,38,0,0,0,"5,00",1,12,5
"org.apache.lucene.xmlparser.builders.RangeFilterBuilder",5,0,2,2,439,0,1,1,13,10,0,0,0,"1,00",1,4,1
"org.apache.lucene.xmlparser.builders.SpanBuilderBase",2,0,1,1,420,0,0,1,10,7,0,0,0,"1,00",1,1,1
"org.apache.lucene.xmlparser.builders.SpanFirstBuilder",5,1,2,3,430,0,0,1,21,18,0,0,0,"1,00",1,7,2
"org.apache.lucene.xmlparser.builders.SpanNearBuilder",4,1,2,3,432,0,0,1,28,25,0,0,0,"2,00",1,5,4
"org.apache.lucene.xmlparser.builders.SpanNotBuilder",5,1,2,3,426,0,0,1,27,21,0,0,0,"1,00",1,7,2
"org.apache.lucene.xmlparser.builders.SpanOrBuilder",5,1,2,3,427,0,0,1,28,25,0,0,0,"2,00",1,5,4
"org.apache.lucene.xmlparser.builders.SpanOrTermsBuilder",11,1,2,3,429,0,0,1,40,34,0,0,0,"1,50",1,15,3
"org.apache.lucene.xmlparser.builders.SpanQueryBuilder",n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,n/a,1,n/a
"org.apache.lucene.xmlparser.builders.SpanQueryBuilderFactory",3,1,3,4,424,0,0,1,22,19,0,0,0,"1,33",2,3,4
"org.apache.lucene.xmlparser.builders.SpanTermBuilder",6,0,1,1,427,0,0,1,14,11,0,0,0,"1,00",1,7,1
"org.apache.lucene.xmlparser.builders.TermQueryBuilder",6,0,2,2,426,0,1,1,12,9,0,0,0,"1,00",1,7,1
"org.apache.lucene.xmlparser.builders.TermsFilterBuilder",11,1,3,4,423,0,1,1,51,39,0,0,0,"2,00",1,13,4
"org.apache.lucene.xmlparser.builders.TermsQueryBuilder",13,1,3,4,426,0,1,1,43,39,0,0,0,"2,00",1,21,4
"org.apache.lucene.xmlparser.builders.TestNumericRangeFilterBuilder",6,0,7,7,437,0,0,1,152,152,0,0,0,"1,00",1,19,7
"org.apache.lucene.xmlparser.builders.TestNumericRangeQueryBuilder",3,0,6,6,436,0,0,1,119,119,0,0,0,"1,00",1,11,6
"org.apache.lucene.xmlparser.builders.UserInputQueryBuilder",8,3,5,8,493,0,1,1,61,39,0,0,0,"1,25",2,13,5
"org.apache.lucene.xmlparser.webdemo.FormBasedXmlQueryDemo",18,4,3,7,539,0,0,1,89,78,0,0,0,"3,00",0,16,9
"org.egothor.stemmer.Cell",0,4,3,7,0,0,0,0,35,17,0,0,0,"1,00",1,3,3
"org.egothor.stemmer.Compile",1,3,2,5,1,0,0,1,122,107,0,0,0,"10,00",0,2,20
"org.egothor.stemmer.Diff",1,8,4,12,0,0,0,2,225,165,0,0,0,"8,75",1,4,35
"org.egothor.stemmer.DiffIt",1,0,2,2,1,0,0,1,54,39,0,0,0,"3,00",1,2,6
"org.egothor.stemmer.Gener",0,0,3,3,0,0,0,1,66,44,0,0,0,"3,67",2,3,11
"org.egothor.stemmer.Lift",0,1,3,4,0,0,0,1,80,52,0,0,0,"4,00",1,3,12
"org.egothor.stemmer.MultiTrie",0,4,8,12,0,0,0,1,135,78,0,0,0,"2,38",3,8,19
"org.egothor.stemmer.MultiTrie2",1,0,12,12,1,0,0,3,257,184,0,0,0,"3,75",8,12,45
"org.egothor.stemmer.Optimizer",0,0,4,4,0,0,0,2,126,93,0,0,0,"5,25",3,4,21
"org.egothor.stemmer.Optimizer2",0,0,2,2,0,0,0,1,33,13,0,0,0,"1,50",1,2,3
"org.egothor.stemmer.Reduce",1,0,3,3,1,0,0,1,39,26,0,0,0,"1,67",2,4,5
"org.egothor.stemmer.Reduce.Remap",1,0,1,1,0,0,0,0,27,18,0,0,0,"3,00",0,1,3
"org.egothor.stemmer.Row",0,3,15,18,0,0,0,1,231,147,0,0,0,"2,53",8,15,38
"org.egothor.stemmer.TestCompile",0,0,5,5,0,0,0,1,77,76,0,0,0,"2,40",1,5,12
"org.egothor.stemmer.TestStemmer",1,0,7,7,1,0,0,1,83,75,0,0,0,"2,14",0,7,15
"org.egothor.stemmer.Trie",4,4,14,18,1,0,0,2,294,207,0,0,0,"3,64",8,17,51
"org.egothor.stemmer.Trie.StrEnum",1,3,3,6,0,0,0,1,32,23,0,0,0,"1,33",2,3,4
"org.tartarus.snowball.Among",23,7,1,8,0,0,0,0,27,27,0,0,0,"2,00",0,1,2
"org.tartarus.snowball.SnowballProgram",28,7,38,45,11,0,0,6,473,379,23,0,0,"2,73",26,39,101
"org.tartarus.snowball.TestApp",1,0,2,2,1,0,0,1,56,56,0,0,0,"5,00",0,2,10
"org.tartarus.snowball.ext.ArmenianStemmer",3,15,48,63,13,1,0,1,486,433,0,36,0,"5,20",9,16,52
"org.tartarus.snowball.ext.BasqueStemmer",3,15,49,64,13,1,0,1,909,817,0,36,0,"8,73",10,18,96
"org.tartarus.snowball.ext.CatalanStemmer",3,16,50,66,13,1,0,1,1.036,931,0,36,0,"7,50",11,20,90
"org.tartarus.snowball.ext.DanishStemmer",3,14,45,59,13,1,0,1,402,324,0,36,0,"7,14",6,19,50
"org.tartarus.snowball.ext.DutchStemmer",2,18,49,67,13,1,0,1,808,642,0,36,0,"11,82",10,22,130
"org.tartarus.snowball.ext.EnglishStemmer",2,23,55,78,13,1,0,1,1.274,1.016,0,36,0,"12,00",16,30,204
"org.tartarus.snowball.ext.FinnishStemmer",3,24,51,75,13,1,0,2,998,811,0,36,0,"10,77",12,25,140
"org.tartarus.snowball.ext.FrenchStemmer",2,20,52,72,13,1,0,1,1.467,1.164,0,36,0,"15,64",13,26,219
"org.tartarus.snowball.ext.German2Stemmer",3,18,46,64,13,1,0,1,700,562,0,36,0,"14,12",7,19,113
"org.tartarus.snowball.ext.GermanStemmer",2,17,46,63,13,1,0,1,663,533,0,36,0,"13,38",7,19,107
"org.tartarus.snowball.ext.HungarianStemmer",3,20,54,74,13,1,0,1,1.120,862,0,36,0,"10,62",15,24,170
"org.tartarus.snowball.ext.IrishStemmer",3,16,50,66,13,1,0,1,555,442,0,36,0,"7,58",11,20,91
"org.tartarus.snowball.ext.ItalianStemmer",3,20,50,70,13,1,0,1,1.148,949,0,36,0,"13,67",11,23,164
"org.tartarus.snowball.ext.KpStemmer",2,25,56,81,13,1,0,1,2.142,1.644,0,36,0,"19,39",17,32,349
"org.tartarus.snowball.ext.LovinsStemmer",2,10,72,82,13,1,0,2,1.861,1.567,0,36,0,"6,76",33,40,230
"org.tartarus.snowball.ext.NorwegianStemmer",3,13,44,57,13,1,0,1,338,277,0,36,0,"7,17",5,16,43
"org.tartarus.snowball.ext.PorterStemmer",2,17,51,68,13,1,0,1,876,700,0,36,0,"10,85",12,25,141
"org.tartarus.snowball.ext.PortugueseStemmer",3,19,50,69,13,1,0,1,1.085,900,0,36,0,"12,92",11,21,155
"org.tartarus.snowball.ext.RomanianStemmer",3,17,51,68,13,1,0,1,995,845,0,36,0,"10,77",12,24,140
"org.tartarus.snowball.ext.RussianStemmer",2,17,50,67,13,1,0,1,697,580,0,36,0,"8,17",11,19,98
"org.tartarus.snowball.ext.SpanishStemmer",3,20,50,70,13,1,0,1,1.150,943,0,36,0,"13,50",11,21,162
"org.tartarus.snowball.ext.SwedishStemmer",3,13,44,57,13,1,0,1,329,272,0,36,0,"6,67",5,14,40
"org.tartarus.snowball.ext.TurkishStemmer",3,40,80,120,13,1,0,1,3.047,2.392,0,36,0,"11,40",41,53,479

Package,C(rec),LOC(rec),METH(rec)
"",2.996,565.016,16.758
"analyzers",669,231.283,3.057
"analyzers.common",533,216.214,2.487
"analyzers.common.src",533,216.116,2.487
"analyzers.common.src.java",290,94.089,1.611
"analyzers.common.src.java.org",290,94.068,1.611
"analyzers.common.src.java.org.apache",264,69.202,1.251
"analyzers.common.src.java.org.apache.lucene",264,69.202,1.251
"analyzers.common.src.java.org.apache.lucene.analysis",264,69.202,1.251
"analyzers.common.src.java.org.apache.lucene.analysis.ar",7,635,25
"analyzers.common.src.java.org.apache.lucene.analysis.bg",4,325,10
"analyzers.common.src.java.org.apache.lucene.analysis.br",4,1.243,33
"analyzers.common.src.java.org.apache.lucene.analysis.ca",2,156,5
"analyzers.common.src.java.org.apache.lucene.analysis.charfilter",2,33.095,33
"analyzers.common.src.java.org.apache.lucene.analysis.cjk",5,787,25
"analyzers.common.src.java.org.apache.lucene.analysis.cn",3,309,12
"analyzers.common.src.java.org.apache.lucene.analysis.compound",15,2.813,144
"analyzers.common.src.java.org.apache.lucene.analysis.compound.hyphenation",11,1.834,103
"analyzers.common.src.java.org.apache.lucene.analysis.cz",4,464,15
"analyzers.common.src.java.org.apache.lucene.analysis.da",2,140,5
"analyzers.common.src.java.org.apache.lucene.analysis.de",9,1.032,34
"analyzers.common.src.java.org.apache.lucene.analysis.el",5,1.037,39
"analyzers.common.src.java.org.apache.lucene.analysis.en",16,7.508,65
"analyzers.common.src.java.org.apache.lucene.analysis.es",4,304,8
"analyzers.common.src.java.org.apache.lucene.analysis.eu",2,138,5
"analyzers.common.src.java.org.apache.lucene.analysis.fa",5,343,13
"analyzers.common.src.java.org.apache.lucene.analysis.fi",4,412,14
"analyzers.common.src.java.org.apache.lucene.analysis.fr",9,1.557,50
"analyzers.common.src.java.org.apache.lucene.analysis.ga",3,383,8
"analyzers.common.src.java.org.apache.lucene.analysis.gl",6,348,11
"analyzers.common.src.java.org.apache.lucene.analysis.hi",6,538,11
"analyzers.common.src.java.org.apache.lucene.analysis.hu",4,405,13
"analyzers.common.src.java.org.apache.lucene.analysis.hunspell",10,1.037,58
"analyzers.common.src.java.org.apache.lucene.analysis.hy",2,138,5
"analyzers.common.src.java.org.apache.lucene.analysis.id",4,432,16
"analyzers.common.src.java.org.apache.lucene.analysis.in",4,383,10
"analyzers.common.src.java.org.apache.lucene.analysis.it",4,325,8
"analyzers.common.src.java.org.apache.lucene.analysis.lv",5,353,11
"analyzers.common.src.java.org.apache.lucene.analysis.miscellaneous",11,872,52
"analyzers.common.src.java.org.apache.lucene.analysis.ngram",6,637,34
"analyzers.common.src.java.org.apache.lucene.analysis.nl",4,801,39
"analyzers.common.src.java.org.apache.lucene.analysis.no",6,429,11
"analyzers.common.src.java.org.apache.lucene.analysis.path",2,347,20
"analyzers.common.src.java.org.apache.lucene.analysis.payloads",10,479,23
"analyzers.common.src.java.org.apache.lucene.analysis.position",1,91,4
"analyzers.common.src.java.org.apache.lucene.analysis.pt",13,927,31
"analyzers.common.src.java.org.apache.lucene.analysis.query",2,408,15
"analyzers.common.src.java.org.apache.lucene.analysis.reverse",1,324,14
"analyzers.common.src.java.org.apache.lucene.analysis.ro",2,143,5
"analyzers.common.src.java.org.apache.lucene.analysis.ru",8,1.210,43
"analyzers.common.src.java.org.apache.lucene.analysis.shingle",15,1.624,104
"analyzers.common.src.java.org.apache.lucene.analysis.sinks",3,188,8
"analyzers.common.src.java.org.apache.lucene.analysis.snowball",3,253,8
"analyzers.common.src.java.org.apache.lucene.analysis.sv",4,291,8
"analyzers.common.src.java.org.apache.lucene.analysis.synonym",8,1.104,32
"analyzers.common.src.java.org.apache.lucene.analysis.th",3,270,8
"analyzers.common.src.java.org.apache.lucene.analysis.tr",3,250,9
"analyzers.common.src.java.org.apache.lucene.analysis.util",7,406,56
"analyzers.common.src.java.org.apache.lucene.analysis.wikipedia",2,1.508,41
"analyzers.common.src.java.org.tartarus",26,24.866,360
"analyzers.common.src.java.org.tartarus.snowball",26,24.866,360
"analyzers.common.src.java.org.tartarus.snowball.ext",23,24.198,319
"analyzers.common.src.resources",n/a,6.734,n/a
"analyzers.common.src.resources.org",n/a,6.734,n/a
"analyzers.common.src.resources.org.apache",n/a,6.734,n/a
"analyzers.common.src.resources.org.apache.lucene",n/a,6.734,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis",n/a,6.734,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.ar",n/a,125,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.bg",n/a,193,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.br",n/a,128,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.ca",n/a,220,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.compound",n/a,57,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.compound.hyphenation",n/a,57,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.cz",n/a,172,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.el",n/a,78,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.eu",n/a,99,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.fa",n/a,313,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.ga",n/a,109,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.gl",n/a,801,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.hi",n/a,235,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.hy",n/a,46,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.id",n/a,359,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.lv",n/a,172,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.pt",n/a,449,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.ro",n/a,233,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.snowball",n/a,2.614,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.th",n/a,119,n/a
"analyzers.common.src.resources.org.apache.lucene.analysis.tr",n/a,212,n/a
"analyzers.common.src.test",243,115.293,876
"analyzers.common.src.test.org",243,115.293,876
"analyzers.common.src.test.org.apache",243,115.293,876
"analyzers.common.src.test.org.apache.lucene",243,115.293,876
"analyzers.common.src.test.org.apache.lucene.analysis",243,115.293,876
"analyzers.common.src.test.org.apache.lucene.analysis.ar",6,330,51
"analyzers.common.src.test.org.apache.lucene.analysis.bg",3,278,15
"analyzers.common.src.test.org.apache.lucene.analysis.br",2,193,13
"analyzers.common.src.test.org.apache.lucene.analysis.ca",1,55,5
"analyzers.common.src.test.org.apache.lucene.analysis.charfilter",2,1.725,37
"analyzers.common.src.test.org.apache.lucene.analysis.cjk",10,581,45
"analyzers.common.src.test.org.apache.lucene.analysis.cn",3,111,7
"analyzers.common.src.test.org.apache.lucene.analysis.compound",9,1.592,26
"analyzers.common.src.test.org.apache.lucene.analysis.cz",4,372,19
"analyzers.common.src.test.org.apache.lucene.analysis.da",1,49,4
"analyzers.common.src.test.org.apache.lucene.analysis.de",13,399,32
"analyzers.common.src.test.org.apache.lucene.analysis.el",3,551,13
"analyzers.common.src.test.org.apache.lucene.analysis.en",7,202,14
"analyzers.common.src.test.org.apache.lucene.analysis.es",4,106,9
"analyzers.common.src.test.org.apache.lucene.analysis.eu",1,49,4
"analyzers.common.src.test.org.apache.lucene.analysis.fa",3,281,17
"analyzers.common.src.test.org.apache.lucene.analysis.fi",4,106,9
"analyzers.common.src.test.org.apache.lucene.analysis.fr",9,508,26
"analyzers.common.src.test.org.apache.lucene.analysis.ga",3,114,9
"analyzers.common.src.test.org.apache.lucene.analysis.gl",7,166,14
"analyzers.common.src.test.org.apache.lucene.analysis.hi",5,211,16
"analyzers.common.src.test.org.apache.lucene.analysis.hu",4,102,8
"analyzers.common.src.test.org.apache.lucene.analysis.hunspell",5,234,15
"analyzers.common.src.test.org.apache.lucene.analysis.hy",1,49,4
"analyzers.common.src.test.org.apache.lucene.analysis.id",5,181,12
"analyzers.common.src.test.org.apache.lucene.analysis.in",2,60,4
"analyzers.common.src.test.org.apache.lucene.analysis.it",4,119,11
"analyzers.common.src.test.org.apache.lucene.analysis.lv",4,314,16
"analyzers.common.src.test.org.apache.lucene.analysis.miscellaneous",7,350,15
"analyzers.common.src.test.org.apache.lucene.analysis.ngram",15,490,57
"analyzers.common.src.test.org.apache.lucene.analysis.nl",1,207,13
"analyzers.common.src.test.org.apache.lucene.analysis.no",7,407,14
"analyzers.common.src.test.org.apache.lucene.analysis.path",6,370,35
"analyzers.common.src.test.org.apache.lucene.analysis.payloads",6,298,13
"analyzers.common.src.test.org.apache.lucene.analysis.position",2,122,7
"analyzers.common.src.test.org.apache.lucene.analysis.pt",10,299,23
"analyzers.common.src.test.org.apache.lucene.analysis.query",2,152,12
"analyzers.common.src.test.org.apache.lucene.analysis.reverse",3,114,11
"analyzers.common.src.test.org.apache.lucene.analysis.ro",1,49,4
"analyzers.common.src.test.org.apache.lucene.analysis.ru",7,99.597,15
"analyzers.common.src.test.org.apache.lucene.analysis.shingle",9,1.807,85
"analyzers.common.src.test.org.apache.lucene.analysis.sinks",4,154,5
"analyzers.common.src.test.org.apache.lucene.analysis.snowball",5,220,14
"analyzers.common.src.test.org.apache.lucene.analysis.sv",4,106,9
"analyzers.common.src.test.org.apache.lucene.analysis.synonym",20,886,48
"analyzers.common.src.test.org.apache.lucene.analysis.th",2,177,15
"analyzers.common.src.test.org.apache.lucene.analysis.tr",3,123,9
"analyzers.common.src.test.org.apache.lucene.analysis.util",1,144,6
"analyzers.common.src.test.org.apache.lucene.analysis.wikipedia",3,183,11
"analyzers.kuromoji",75,7.327,317
"analyzers.kuromoji.src",75,7.188,317
"analyzers.kuromoji.src.java",37,4.215,183
"analyzers.kuromoji.src.java.org",37,4.191,183
"analyzers.kuromoji.src.java.org.apache",37,4.191,183
"analyzers.kuromoji.src.java.org.apache.lucene",37,4.191,183
"analyzers.kuromoji.src.java.org.apache.lucene.analysis",37,4.191,183
"analyzers.kuromoji.src.java.org.apache.lucene.analysis.ja",37,4.191,183
"analyzers.kuromoji.src.java.org.apache.lucene.analysis.ja.dict",14,991,72
"analyzers.kuromoji.src.java.org.apache.lucene.analysis.ja.tokenattributes",8,341,32
"analyzers.kuromoji.src.java.org.apache.lucene.analysis.ja.util",2,1.139,9
"analyzers.kuromoji.src.resources",n/a,547,n/a
"analyzers.kuromoji.src.resources.org",n/a,547,n/a
"analyzers.kuromoji.src.resources.org.apache",n/a,547,n/a
"analyzers.kuromoji.src.resources.org.apache.lucene",n/a,547,n/a
"analyzers.kuromoji.src.resources.org.apache.lucene.analysis",n/a,547,n/a
"analyzers.kuromoji.src.resources.org.apache.lucene.analysis.ja",n/a,547,n/a
"analyzers.kuromoji.src.test",24,1.406,87
"analyzers.kuromoji.src.test.org",24,1.406,87
"analyzers.kuromoji.src.test.org.apache",24,1.406,87
"analyzers.kuromoji.src.test.org.apache.lucene",24,1.406,87
"analyzers.kuromoji.src.test.org.apache.lucene.analysis",24,1.406,87
"analyzers.kuromoji.src.test.org.apache.lucene.analysis.ja",24,1.406,87
"analyzers.kuromoji.src.test.org.apache.lucene.analysis.ja.dict",2,161,5
"analyzers.kuromoji.src.test.org.apache.lucene.analysis.ja.util",1,30,2
"analyzers.kuromoji.src.tools",14,1.020,47
"analyzers.kuromoji.src.tools.java",13,959,45
"analyzers.kuromoji.src.tools.java.org",13,959,45
"analyzers.kuromoji.src.tools.java.org.apache",13,959,45
"analyzers.kuromoji.src.tools.java.org.apache.lucene",13,959,45
"analyzers.kuromoji.src.tools.java.org.apache.lucene.analysis",13,959,45
"analyzers.kuromoji.src.tools.java.org.apache.lucene.analysis.ja",13,959,45
"analyzers.kuromoji.src.tools.java.org.apache.lucene.analysis.ja.util",13,959,45
"analyzers.kuromoji.src.tools.test",1,61,2
"analyzers.kuromoji.src.tools.test.org",1,61,2
"analyzers.kuromoji.src.tools.test.org.apache",1,61,2
"analyzers.kuromoji.src.tools.test.org.apache.lucene",1,61,2
"analyzers.kuromoji.src.tools.test.org.apache.lucene.analysis",1,61,2
"analyzers.kuromoji.src.tools.test.org.apache.lucene.analysis.ja",1,61,2
"analyzers.kuromoji.src.tools.test.org.apache.lucene.analysis.ja.dict",1,61,2
"analyzers.phonetic",16,850,36
"analyzers.phonetic.lib",n/a,181,n/a
"analyzers.phonetic.src",16,618,36
"analyzers.phonetic.src.java",3,319,10
"analyzers.phonetic.src.java.org",3,295,10
"analyzers.phonetic.src.java.org.apache",3,295,10
"analyzers.phonetic.src.java.org.apache.lucene",3,295,10
"analyzers.phonetic.src.java.org.apache.lucene.analysis",3,295,10
"analyzers.phonetic.src.java.org.apache.lucene.analysis.phonetic",3,295,10
"analyzers.phonetic.src.test",13,299,26
"analyzers.phonetic.src.test.org",13,299,26
"analyzers.phonetic.src.test.org.apache",13,299,26
"analyzers.phonetic.src.test.org.apache.lucene",13,299,26
"analyzers.phonetic.src.test.org.apache.lucene.analysis",13,299,26
"analyzers.phonetic.src.test.org.apache.lucene.analysis.phonetic",13,299,26
"analyzers.smartcn",23,2.966,110
"analyzers.smartcn.src",23,2.923,110
"analyzers.smartcn.src.java",20,2.647,88
"analyzers.smartcn.src.java.org",20,2.623,88
"analyzers.smartcn.src.java.org.apache",20,2.623,88
"analyzers.smartcn.src.java.org.apache.lucene",20,2.623,88
"analyzers.smartcn.src.java.org.apache.lucene.analysis",20,2.623,88
"analyzers.smartcn.src.java.org.apache.lucene.analysis.cn",20,2.623,88
"analyzers.smartcn.src.java.org.apache.lucene.analysis.cn.smart",20,2.623,88
"analyzers.smartcn.src.java.org.apache.lucene.analysis.cn.smart.hhmm",10,1.790,64
"analyzers.smartcn.src.resources",n/a,57,n/a
"analyzers.smartcn.src.resources.org",n/a,57,n/a
"analyzers.smartcn.src.resources.org.apache",n/a,57,n/a
"analyzers.smartcn.src.resources.org.apache.lucene",n/a,57,n/a
"analyzers.smartcn.src.resources.org.apache.lucene.analysis",n/a,57,n/a
"analyzers.smartcn.src.resources.org.apache.lucene.analysis.cn",n/a,57,n/a
"analyzers.smartcn.src.resources.org.apache.lucene.analysis.cn.smart",n/a,57,n/a
"analyzers.smartcn.src.test",3,219,22
"analyzers.smartcn.src.test.org",3,219,22
"analyzers.smartcn.src.test.org.apache",3,219,22
"analyzers.smartcn.src.test.org.apache.lucene",3,219,22
"analyzers.smartcn.src.test.org.apache.lucene.analysis",3,219,22
"analyzers.smartcn.src.test.org.apache.lucene.analysis.cn",3,219,22
"analyzers.smartcn.src.test.org.apache.lucene.analysis.cn.smart",3,219,22
"analyzers.stempel",22,3.840,107
"analyzers.stempel.src",22,3.797,107
"analyzers.stempel.src.java",19,3.286,91
"analyzers.stempel.src.java.org",19,2.814,91
"analyzers.stempel.src.java.org.apache",4,337,12
"analyzers.stempel.src.java.org.apache.lucene",4,337,12
"analyzers.stempel.src.java.org.apache.lucene.analysis",4,337,12
"analyzers.stempel.src.java.org.apache.lucene.analysis.pl",2,153,5
"analyzers.stempel.src.java.org.apache.lucene.analysis.stempel",2,184,7
"analyzers.stempel.src.java.org.egothor",15,2.477,79
"analyzers.stempel.src.java.org.egothor.stemmer",15,2.477,79
"analyzers.stempel.src.resources",n/a,186,n/a
"analyzers.stempel.src.resources.org",n/a,186,n/a
"analyzers.stempel.src.resources.org.apache",n/a,186,n/a
"analyzers.stempel.src.resources.org.apache.lucene",n/a,186,n/a
"analyzers.stempel.src.resources.org.apache.lucene.analysis",n/a,186,n/a
"analyzers.stempel.src.resources.org.apache.lucene.analysis.pl",n/a,186,n/a
"analyzers.stempel.src.test",3,325,16
"analyzers.stempel.src.test.org",3,325,16
"analyzers.stempel.src.test.org.apache",1,49,4
"analyzers.stempel.src.test.org.apache.lucene",1,49,4
"analyzers.stempel.src.test.org.apache.lucene.analysis",1,49,4
"analyzers.stempel.src.test.org.apache.lucene.analysis.pl",1,49,4
"analyzers.stempel.src.test.org.egothor",2,276,12
"analyzers.stempel.src.test.org.egothor.stemmer",2,276,12
"benchmark",197,24.128,991
"benchmark.conf",n/a,1.919,n/a
"benchmark.lib",n/a,358,n/a
"benchmark.scripts",n/a,313,n/a
"benchmark.src",197,20.933,991
"benchmark.src.java",160,16.995,829
"benchmark.src.java.org",160,16.971,829
"benchmark.src.java.org.apache",160,16.971,829
"benchmark.src.java.org.apache.lucene",160,16.971,829
"benchmark.src.java.org.apache.lucene.benchmark",160,16.971,829
"benchmark.src.java.org.apache.lucene.benchmark.byTask",138,15.181,750
"benchmark.src.java.org.apache.lucene.benchmark.byTask.feeds",61,7.466,311
"benchmark.src.java.org.apache.lucene.benchmark.byTask.feeds.demohtml",13,4.045,151
"benchmark.src.java.org.apache.lucene.benchmark.byTask.programmatic",1,104,2
"benchmark.src.java.org.apache.lucene.benchmark.byTask.stats",3,348,29
"benchmark.src.java.org.apache.lucene.benchmark.byTask.tasks",64,4.948,323
"benchmark.src.java.org.apache.lucene.benchmark.byTask.utils",7,1.152,49
"benchmark.src.java.org.apache.lucene.benchmark.quality",18,1.438,67
"benchmark.src.java.org.apache.lucene.benchmark.quality.trec",5,456,14
"benchmark.src.java.org.apache.lucene.benchmark.quality.utils",7,345,18
"benchmark.src.java.org.apache.lucene.benchmark.utils",3,282,12
"benchmark.src.test",37,3.938,162
"benchmark.src.test.conf",1,20,0
"benchmark.src.test.org",36,3.918,162
"benchmark.src.test.org.apache",36,3.918,162
"benchmark.src.test.org.apache.lucene",36,3.918,162
"benchmark.src.test.org.apache.lucene.benchmark",36,3.918,162
"benchmark.src.test.org.apache.lucene.benchmark.byTask",34,2.839,149
"benchmark.src.test.org.apache.lucene.benchmark.byTask.feeds",6,847,44
"benchmark.src.test.org.apache.lucene.benchmark.byTask.feeds.demohtml",1,116,12
"benchmark.src.test.org.apache.lucene.benchmark.byTask.tasks",19,692,48
"benchmark.src.test.org.apache.lucene.benchmark.byTask.tasks.alt",2,80,5
"benchmark.src.test.org.apache.lucene.benchmark.byTask.utils",2,163,15
"benchmark.src.test.org.apache.lucene.benchmark.quality",1,981,4
"demo",3,3.360,8
"demo.src",3,3.313,8
"demo.src.java",2,442,6
"demo.src.java.org",2,418,6
"demo.src.java.org.apache",2,418,6
"demo.src.java.org.apache.lucene",2,418,6
"demo.src.java.org.apache.lucene.demo",2,418,6
"demo.src.test",1,2.871,2
"demo.src.test.org",1,2.871,2
"demo.src.test.org.apache",1,2.871,2
"demo.src.test.org.apache.lucene",1,2.871,2
"demo.src.test.org.apache.lucene.demo",1,2.871,2
"demo.src.test.org.apache.lucene.demo.test-files",n/a,2.822,n/a
"demo.src.test.org.apache.lucene.demo.test-files.docs",n/a,2.822,n/a
"facet",360,36.542,1.834
"facet.src",360,36.471,1.834
"facet.src.examples",16,1.353,32
"facet.src.examples.org",16,1.353,32
"facet.src.examples.org.apache",16,1.353,32
"facet.src.examples.org.apache.lucene",16,1.353,32
"facet.src.examples.org.apache.lucene.facet",16,1.353,32
"facet.src.examples.org.apache.lucene.facet.example",16,1.353,32
"facet.src.examples.org.apache.lucene.facet.example.adaptive",2,140,3
"facet.src.examples.org.apache.lucene.facet.example.association",4,315,6
"facet.src.examples.org.apache.lucene.facet.example.merge",1,90,3
"facet.src.examples.org.apache.lucene.facet.example.multiCL",3,344,8
"facet.src.examples.org.apache.lucene.facet.example.simple",4,392,9
"facet.src.java",229,22.792,1.294
"facet.src.java.org",229,22.767,1.294
"facet.src.java.org.apache",229,22.767,1.294
"facet.src.java.org.apache.lucene",229,22.767,1.294
"facet.src.java.org.apache.lucene.facet",171,16.293,899
"facet.src.java.org.apache.lucene.facet.doc-files",n/a,741,n/a
"facet.src.java.org.apache.lucene.facet.enhancements",12,1.252,59
"facet.src.java.org.apache.lucene.facet.enhancements.association",6,628,34
"facet.src.java.org.apache.lucene.facet.enhancements.params",2,173,9
"facet.src.java.org.apache.lucene.facet.index",29,2.618,146
"facet.src.java.org.apache.lucene.facet.index.attributes",6,467,41
"facet.src.java.org.apache.lucene.facet.index.categorypolicy",6,295,10
"facet.src.java.org.apache.lucene.facet.index.params",5,537,34
"facet.src.java.org.apache.lucene.facet.index.streaming",6,564,22
"facet.src.java.org.apache.lucene.facet.search",76,6.286,368
"facet.src.java.org.apache.lucene.facet.search.aggregator",6,346,26
"facet.src.java.org.apache.lucene.facet.search.aggregator.association",2,144,12
"facet.src.java.org.apache.lucene.facet.search.cache",3,192,10
"facet.src.java.org.apache.lucene.facet.search.params",9,729,51
"facet.src.java.org.apache.lucene.facet.search.params.association",2,138,10
"facet.src.java.org.apache.lucene.facet.search.results",4,554,41
"facet.src.java.org.apache.lucene.facet.search.sampling",13,1.137,53
"facet.src.java.org.apache.lucene.facet.taxonomy",29,4.656,247
"facet.src.java.org.apache.lucene.facet.taxonomy.directory",10,1.776,81
"facet.src.java.org.apache.lucene.facet.taxonomy.writercache",14,1.443,105
"facet.src.java.org.apache.lucene.facet.taxonomy.writercache.cl2o",9,1.021,75
"facet.src.java.org.apache.lucene.facet.taxonomy.writercache.lru",4,295,24
"facet.src.java.org.apache.lucene.facet.util",24,679,75
"facet.src.java.org.apache.lucene.util",58,6.474,395
"facet.src.java.org.apache.lucene.util.collections",36,4.554,298
"facet.src.java.org.apache.lucene.util.encoding",18,1.405,68
"facet.src.test",115,12.326,508
"facet.src.test.org",115,12.326,508
"facet.src.test.org.apache",115,12.326,508
"facet.src.test.org.apache.lucene",115,12.326,508
"facet.src.test.org.apache.lucene.facet",97,8.793,389
"facet.src.test.org.apache.lucene.facet.enhancements",9,596,38
"facet.src.test.org.apache.lucene.facet.enhancements.association",3,142,6
"facet.src.test.org.apache.lucene.facet.enhancements.params",1,54,1
"facet.src.test.org.apache.lucene.facet.example",4,217,7
"facet.src.test.org.apache.lucene.facet.index",17,1.398,46
"facet.src.test.org.apache.lucene.facet.index.attributes",2,145,4
"facet.src.test.org.apache.lucene.facet.index.categorypolicy",2,171,4
"facet.src.test.org.apache.lucene.facet.index.params",3,259,8
"facet.src.test.org.apache.lucene.facet.index.streaming",5,357,11
"facet.src.test.org.apache.lucene.facet.search",38,3.146,138
"facet.src.test.org.apache.lucene.facet.search.association",1,156,5
"facet.src.test.org.apache.lucene.facet.search.params",6,388,25
"facet.src.test.org.apache.lucene.facet.search.sampling",3,147,7
"facet.src.test.org.apache.lucene.facet.taxonomy",19,2.779,116
"facet.src.test.org.apache.lucene.facet.taxonomy.directory",12,754,42
"facet.src.test.org.apache.lucene.facet.taxonomy.writercache",3,169,8
"facet.src.test.org.apache.lucene.facet.taxonomy.writercache.cl2o",3,169,8
"facet.src.test.org.apache.lucene.facet.util",3,206,11
"facet.src.test.org.apache.lucene.util",18,3.533,119
"facet.src.test.org.apache.lucene.util.collections",10,1.961,63
"facet.src.test.org.apache.lucene.util.encoding",2,1.022,15
"grouping",42,4.132,155
"grouping.src",42,4.106,155
"grouping.src.java",33,2.608,124
"grouping.src.java.org",33,2.589,124
"grouping.src.java.org.apache",33,2.589,124
"grouping.src.java.org.apache.lucene",33,2.589,124
"grouping.src.java.org.apache.lucene.search",33,2.589,124
"grouping.src.java.org.apache.lucene.search.grouping",33,2.589,124
"grouping.src.test",9,1.498,31
"grouping.src.test.org",9,1.498,31
"grouping.src.test.org.apache",9,1.498,31
"grouping.src.test.org.apache.lucene",9,1.498,31
"grouping.src.test.org.apache.lucene.search",9,1.498,31
"grouping.src.test.org.apache.lucene.search.grouping",9,1.498,31
"highlighter",115,9.897,604
"highlighter.src",115,9.851,604
"highlighter.src.java",54,5.169,305
"highlighter.src.java.org",54,5.144,305
"highlighter.src.java.org.apache",54,5.144,305
"highlighter.src.java.org.apache.lucene",54,5.144,305
"highlighter.src.java.org.apache.lucene.search",54,5.144,305
"highlighter.src.java.org.apache.lucene.search.highlight",32,3.221,167
"highlighter.src.java.org.apache.lucene.search.vectorhighlight",22,1.923,138
"highlighter.src.test",61,4.682,299
"highlighter.src.test.org",61,4.682,299
"highlighter.src.test.org.apache",61,4.682,299
"highlighter.src.test.org.apache.lucene",61,4.682,299
"highlighter.src.test.org.apache.lucene.search",61,4.682,299
"highlighter.src.test.org.apache.lucene.search.highlight",46,2.432,141
"highlighter.src.test.org.apache.lucene.search.highlight.custom",4,159,12
"highlighter.src.test.org.apache.lucene.search.vectorhighlight",15,2.250,158
"icu",40,16.426,195
"icu.lib",n/a,30,n/a
"icu.src",40,16.259,195
"icu.src.data",n/a,13.084,n/a
"icu.src.data.uax29",n/a,414,n/a
"icu.src.data.utr30",n/a,12.670,n/a
"icu.src.java",19,2.096,108
"icu.src.java.org",19,1.725,108
"icu.src.java.org.apache",19,1.725,108
"icu.src.java.org.apache.lucene",19,1.725,108
"icu.src.java.org.apache.lucene.analysis",16,1.528,103
"icu.src.java.org.apache.lucene.analysis.icu",16,1.528,103
"icu.src.java.org.apache.lucene.analysis.icu.segmentation",10,1.061,74
"icu.src.java.org.apache.lucene.analysis.icu.tokenattributes",2,135,13
"icu.src.java.org.apache.lucene.collation",3,197,5
"icu.src.test",17,790,77
"icu.src.test.org",17,790,77
"icu.src.test.org.apache",17,790,77
"icu.src.test.org.apache.lucene",17,790,77
"icu.src.test.org.apache.lucene.analysis",14,633,66
"icu.src.test.org.apache.lucene.analysis.icu",14,633,66
"icu.src.test.org.apache.lucene.analysis.icu.segmentation",4,382,43
"icu.src.test.org.apache.lucene.collation",3,157,11
"icu.src.tools",4,289,10
"icu.src.tools.java",4,289,10
"icu.src.tools.java.org",4,289,10
"icu.src.tools.java.org.apache",4,289,10
"icu.src.tools.java.org.apache.lucene",4,289,10
"icu.src.tools.java.org.apache.lucene.analysis",4,289,10
"icu.src.tools.java.org.apache.lucene.analysis.icu",4,289,10
"instantiated",33,3.120,192
"instantiated.src",33,3.080,192
"instantiated.src.java",23,2.292,165
"instantiated.src.java.org",23,2.268,165
"instantiated.src.java.org.apache",23,2.268,165
"instantiated.src.java.org.apache.lucene",23,2.268,165
"instantiated.src.java.org.apache.lucene.store",23,2.268,165
"instantiated.src.java.org.apache.lucene.store.instantiated",23,2.268,165
"instantiated.src.java.org.apache.lucene.store.instantiated.doc-files",n/a,48,n/a
"instantiated.src.test",10,788,27
"instantiated.src.test.org",10,788,27
"instantiated.src.test.org.apache",10,788,27
"instantiated.src.test.org.apache.lucene",10,788,27
"instantiated.src.test.org.apache.lucene.store",10,788,27
"instantiated.src.test.org.apache.lucene.store.instantiated",10,788,27
"join",24,2.742,124
"join.src",24,2.705,124
"join.src.java",19,1.532,95
"join.src.java.org",19,1.513,95
"join.src.java.org.apache",19,1.513,95
"join.src.java.org.apache.lucene",19,1.513,95
"join.src.java.org.apache.lucene.search",19,1.513,95
"join.src.java.org.apache.lucene.search.join",19,1.513,95
"join.src.test",5,1.173,29
"join.src.test.org",5,1.173,29
"join.src.test.org.apache",5,1.173,29
"join.src.test.org.apache.lucene",5,1.173,29
"join.src.test.org.apache.lucene.search",5,1.173,29
"memory",13,1.439,100
"memory.src",13,1.394,100
"memory.src.java",10,1.061,85
"memory.src.java.org",10,1.037,85
"memory.src.java.org.apache",10,1.037,85
"memory.src.java.org.apache.lucene",10,1.037,85
"memory.src.java.org.apache.lucene.index",10,1.037,85
"memory.src.java.org.apache.lucene.index.memory",10,1.037,85
"memory.src.test",3,333,15
"memory.src.test.org",3,333,15
"memory.src.test.org.apache",3,333,15
"memory.src.test.org.apache.lucene",3,333,15
"memory.src.test.org.apache.lucene.index",3,333,15
"memory.src.test.org.apache.lucene.index.memory",3,333,15
"misc",51,5.295,245
"misc.src",51,5.251,245
"misc.src.java",33,3.863,177
"misc.src.java.org",33,3.802,177
"misc.src.java.org.apache",33,3.802,177
"misc.src.java.org.apache.lucene",33,3.802,177
"misc.src.java.org.apache.lucene.index",20,1.658,112
"misc.src.java.org.apache.lucene.misc",7,1.227,24
"misc.src.java.org.apache.lucene.misc.doc-files",n/a,660,n/a
"misc.src.java.org.apache.lucene.store",6,917,41
"misc.src.test",18,1.388,68
"misc.src.test.org",18,1.388,68
"misc.src.test.org.apache",18,1.388,68
"misc.src.test.org.apache.lucene",18,1.388,68
"misc.src.test.org.apache.lucene.index",10,788,32
"misc.src.test.org.apache.lucene.misc",8,600,36
"org",926,117.009,6.357
"org.apache",926,117.009,6.357
"org.apache.lucene",926,117.009,6.357
"org.apache.lucene.analysis",89,27.828,722
"org.apache.lucene.analysis.standard",18,17.714,213
"org.apache.lucene.analysis.standard.std31",2,5.400,48
"org.apache.lucene.analysis.standard.std34",1,4.343,24
"org.apache.lucene.analysis.tokenattributes",18,1.253,113
"org.apache.lucene.collation",3,365,5
"org.apache.lucene.document",21,2.373,175
"org.apache.lucene.index",238,31.078,1.926
"org.apache.lucene.queryParser",12,5.419,172
"org.apache.lucene.search",345,26.469,1.880
"org.apache.lucene.search.function",24,1.919,139
"org.apache.lucene.search.payloads",11,875,54
"org.apache.lucene.search.spans",31,2.594,220
"org.apache.lucene.store",51,5.213,379
"org.apache.lucene.util",166,18.224,1.096
"org.apache.lucene.util.fst",36,4.553,230
"org.apache.lucene.util.packed",13,1.182,94
"pruning",16,1.924,79
"pruning.src",16,1.859,79
"pruning.src.java",15,1.524,66
"pruning.src.java.org",15,1.500,66
"pruning.src.java.org.apache",15,1.500,66
"pruning.src.java.org.apache.lucene",15,1.500,66
"pruning.src.java.org.apache.lucene.index",15,1.500,66
"pruning.src.java.org.apache.lucene.index.pruning",12,1.193,49
"pruning.src.test",1,335,13
"pruning.src.test.org",1,335,13
"pruning.src.test.org.apache",1,335,13
"pruning.src.test.org.apache.lucene",1,335,13
"pruning.src.test.org.apache.lucene.index",1,335,13
"queries",40,4.468,266
"queries.lib",n/a,178,n/a
"queries.src",40,4.225,266
"queries.src.java",26,2.909,177
"queries.src.java.org",26,2.885,177
"queries.src.java.org.apache",26,2.885,177
"queries.src.java.org.apache.lucene",26,2.885,177
"queries.src.java.org.apache.lucene.search",26,2.885,177
"queries.src.java.org.apache.lucene.search.regex",7,467,36
"queries.src.java.org.apache.lucene.search.similar",5,1.193,72
"queries.src.test",14,1.316,89
"queries.src.test.org",14,1.316,89
"queries.src.test.org.apache",14,1.316,89
"queries.src.test.org.apache.lucene",14,1.316,89
"queries.src.test.org.apache.lucene.search",14,1.316,89
"queries.src.test.org.apache.lucene.search.regex",3,320,25
"queries.src.test.org.apache.lucene.search.similar",1,132,7
"queryparser",276,28.489,1.645
"queryparser.src",276,28.285,1.645
"queryparser.src.java",212,21.966,1.248
"queryparser.src.java.org",212,21.836,1.248
"queryparser.src.java.org.apache",212,21.836,1.248
"queryparser.src.java.org.apache.lucene",212,21.836,1.248
"queryparser.src.java.org.apache.lucene.messages",5,392,24
"queryparser.src.java.org.apache.lucene.queryParser",207,21.444,1.224
"queryparser.src.java.org.apache.lucene.queryParser.analyzing",1,364,5
"queryparser.src.java.org.apache.lucene.queryParser.complexPhrase",2,386,16
"queryparser.src.java.org.apache.lucene.queryParser.core",60,5.017,359
"queryparser.src.java.org.apache.lucene.queryParser.core.builders",2,246,10
"queryparser.src.java.org.apache.lucene.queryParser.core.config",6,467,19
"queryparser.src.java.org.apache.lucene.queryParser.core.messages",1,74,1
"queryparser.src.java.org.apache.lucene.queryParser.core.nodes",34,2.597,226
"queryparser.src.java.org.apache.lucene.queryParser.core.parser",3,106,2
"queryparser.src.java.org.apache.lucene.queryParser.core.processors",6,741,52
"queryparser.src.java.org.apache.lucene.queryParser.core.util",4,275,15
"queryparser.src.java.org.apache.lucene.queryParser.ext",5,466,19
"queryparser.src.java.org.apache.lucene.queryParser.precedence",3,276,9
"queryparser.src.java.org.apache.lucene.queryParser.precedence.processors",2,194,7
"queryparser.src.java.org.apache.lucene.queryParser.standard",104,11.358,590
"queryparser.src.java.org.apache.lucene.queryParser.standard.builders",21,1.113,43
"queryparser.src.java.org.apache.lucene.queryParser.standard.config",40,2.435,194
"queryparser.src.java.org.apache.lucene.queryParser.standard.nodes",10,874,49
"queryparser.src.java.org.apache.lucene.queryParser.standard.parser",10,3.732,133
"queryparser.src.java.org.apache.lucene.queryParser.standard.processors",18,1.791,78
"queryparser.src.java.org.apache.lucene.queryParser.surround",32,3.577,226
"queryparser.src.java.org.apache.lucene.queryParser.surround.parser",10,2.489,111
"queryparser.src.java.org.apache.lucene.queryParser.surround.query",22,1.068,115
"queryparser.src.resources",n/a,38,n/a
"queryparser.src.resources.org",n/a,38,n/a
"queryparser.src.resources.org.apache",n/a,38,n/a
"queryparser.src.resources.org.apache.lucene",n/a,38,n/a
"queryparser.src.resources.org.apache.lucene.queryParser",n/a,38,n/a
"queryparser.src.resources.org.apache.lucene.queryParser.core",n/a,38,n/a
"queryparser.src.resources.org.apache.lucene.queryParser.core.messages",n/a,38,n/a
"queryparser.src.test",64,6.281,397
"queryparser.src.test.org",64,6.281,397
"queryparser.src.test.org.apache",64,6.281,397
"queryparser.src.test.org.apache.lucene",64,6.281,397
"queryparser.src.test.org.apache.lucene.messages",2,158,7
"queryparser.src.test.org.apache.lucene.queryParser",62,6.123,390
"queryparser.src.test.org.apache.lucene.queryParser.analyzing",2,102,8
"queryparser.src.test.org.apache.lucene.queryParser.complexPhrase",2,122,6
"queryparser.src.test.org.apache.lucene.queryParser.core",3,76,4
"queryparser.src.test.org.apache.lucene.queryParser.core.builders",2,38,2
"queryparser.src.test.org.apache.lucene.queryParser.core.nodes",1,38,2
"queryparser.src.test.org.apache.lucene.queryParser.ext",3,216,14
"queryparser.src.test.org.apache.lucene.queryParser.precedence",3,571,36
"queryparser.src.test.org.apache.lucene.queryParser.spans",10,691,31
"queryparser.src.test.org.apache.lucene.queryParser.standard",30,3.532,197
"queryparser.src.test.org.apache.lucene.queryParser.surround",7,601,90
"queryparser.src.test.org.apache.lucene.queryParser.surround.query",7,601,90
"remote",13,934,57
"remote.src",13,888,57
"remote.src.java",3,222,15
"remote.src.java.org",3,198,15
"remote.src.java.org.apache",3,198,15
"remote.src.java.org.apache.lucene",3,198,15
"remote.src.java.org.apache.lucene.search",3,198,15
"remote.src.test",10,666,42
"remote.src.test.org",10,666,42
"remote.src.test.org.apache",10,666,42
"remote.src.test.org.apache.lucene",10,666,42
"remote.src.test.org.apache.lucene.search",10,666,42
"spatial",48,4.553,288
"spatial.src",48,4.508,288
"spatial.src.java",33,3.433,249
"spatial.src.java.org",33,3.386,249
"spatial.src.java.org.apache",33,3.386,249
"spatial.src.java.org.apache.lucene",33,3.386,249
"spatial.src.java.org.apache.lucene.spatial",33,3.386,249
"spatial.src.java.org.apache.lucene.spatial.geohash",3,249,8
"spatial.src.java.org.apache.lucene.spatial.geometry",14,1.610,157
"spatial.src.java.org.apache.lucene.spatial.geometry.shape",9,1.033,91
"spatial.src.java.org.apache.lucene.spatial.tier",15,1.088,66
"spatial.src.java.org.apache.lucene.spatial.tier.projections",3,248,16
"spatial.src.test",15,1.075,39
"spatial.src.test.org",15,1.075,39
"spatial.src.test.org.apache",15,1.075,39
"spatial.src.test.org.apache.lucene",15,1.075,39
"spatial.src.test.org.apache.lucene.spatial",15,1.075,39
"spatial.src.test.org.apache.lucene.spatial.geohash",1,74,4
"spatial.src.test.org.apache.lucene.spatial.geometry",1,56,3
"spatial.src.test.org.apache.lucene.spatial.tier",12,718,25
"spatial.src.test.org.apache.lucene.spatial.tier.projections",1,68,1
"spellchecker",87,58.398,408
"spellchecker.src",87,58.356,408
"spellchecker.src.java",60,6.028,283
"spellchecker.src.java.org",60,6.004,283
"spellchecker.src.java.org.apache",60,6.004,283
"spellchecker.src.java.org.apache.lucene",60,6.004,283
"spellchecker.src.java.org.apache.lucene.search",60,6.004,283
"spellchecker.src.java.org.apache.lucene.search.spell",19,1.625,73
"spellchecker.src.java.org.apache.lucene.search.suggest",41,4.379,210
"spellchecker.src.java.org.apache.lucene.search.suggest.fst",22,2.273,107
"spellchecker.src.java.org.apache.lucene.search.suggest.jaspell",3,1.010,39
"spellchecker.src.java.org.apache.lucene.search.suggest.tst",3,390,12
"spellchecker.src.test",27,52.328,125
"spellchecker.src.test.org",27,52.328,125
"spellchecker.src.test.org.apache",27,52.328,125
"spellchecker.src.test.org.apache.lucene",27,52.328,125
"spellchecker.src.test.org.apache.lucene.search",27,52.328,125
"spellchecker.src.test.org.apache.lucene.search.spell",8,871,38
"spellchecker.src.test.org.apache.lucene.search.suggest",19,51.457,87
"spellchecker.src.test.org.apache.lucene.search.suggest.fst",8,760,51
"xml-query-parser",43,9.562,153
"xml-query-parser.docs",n/a,3.905,n/a
"xml-query-parser.src",43,4.907,153
"xml-query-parser.src.demo",1,414,3
"xml-query-parser.src.demo.WebContent",n/a,282,n/a
"xml-query-parser.src.demo.WebContent.META-INF",n/a,2,n/a
"xml-query-parser.src.demo.WebContent.WEB-INF",n/a,121,n/a
"xml-query-parser.src.demo.java",1,132,3
"xml-query-parser.src.demo.java.org",1,132,3
"xml-query-parser.src.demo.java.org.apache",1,132,3
"xml-query-parser.src.demo.java.org.apache.lucene",1,132,3
"xml-query-parser.src.demo.java.org.apache.lucene.xmlparser",1,132,3
"xml-query-parser.src.demo.java.org.apache.lucene.xmlparser.webdemo",1,132,3
"xml-query-parser.src.java",38,2.589,108
"xml-query-parser.src.java.org",38,2.565,108
"xml-query-parser.src.java.org.apache",38,2.565,108
"xml-query-parser.src.java.org.apache.lucene",38,2.565,108
"xml-query-parser.src.java.org.apache.lucene.xmlparser",38,2.565,108
"xml-query-parser.src.java.org.apache.lucene.xmlparser.builders",29,1.714,52
"xml-query-parser.src.test",4,1.904,42
"xml-query-parser.src.test.org",4,1.904,42
"xml-query-parser.src.test.org.apache",4,1.904,42
"xml-query-parser.src.test.org.apache.lucene",4,1.904,42
"xml-query-parser.src.test.org.apache.lucene.xmlparser",4,1.904,42
"xml-query-parser.src.test.org.apache.lucene.xmlparser.builders",2,332,13

Project,C,L(J),LOCp,METH
"project",2.996,358.659,565.016,16.199

