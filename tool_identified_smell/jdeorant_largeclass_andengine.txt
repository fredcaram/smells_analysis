org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::int[] mHardwareIDContainer, org.andengine.opengl.util.GLState::java.lang.String mVersion, org.andengine.opengl.util.GLState::java.lang.String mRenderer, org.andengine.opengl.util.GLState::java.lang.String mExtensions, org.andengine.opengl.util.GLState::int mMaximumVertexAttributeCount, org.andengine.opengl.util.GLState::int mMaximumVertexShaderUniformVectorCount, org.andengine.opengl.util.GLState::int mMaximumFragmentShaderUniformVectorCount, org.andengine.opengl.util.GLState::int mMaximumTextureSize, org.andengine.opengl.util.GLState::int mMaximumTextureUnits, org.andengine.opengl.util.GLState::int mCurrentFramebufferID, org.andengine.opengl.util.GLState::deleteFramebuffer(int):void, org.andengine.opengl.util.GLState::int mCurrentSourceBlendMode, org.andengine.opengl.util.GLState::int mCurrentDestinationBlendMode, org.andengine.opengl.util.GLState::blendFunction(int, int):void, org.andengine.opengl.util.GLState::float mLineWidth, org.andengine.opengl.util.GLState::lineWidth(float):void, org.andengine.opengl.util.GLState::generateBuffer():int, org.andengine.opengl.util.GLState::generateFramebuffer():int, org.andengine.opengl.util.GLState::generateTexture():int, org.andengine.opengl.util.GLState::getInteger(int):int, org.andengine.opengl.util.GLState::int mCurrentArrayBufferID, org.andengine.opengl.util.GLState::bindArrayBuffer(int):void, org.andengine.opengl.util.GLState::deleteArrayBuffer(int):void, org.andengine.opengl.util.GLState::int mCurrentIndexBufferID, org.andengine.opengl.util.GLState::bindIndexBuffer(int):void, org.andengine.opengl.util.GLState::deleteIndexBuffer(int):void, org.andengine.opengl.util.GLState::generateArrayBuffer(int, int):int, org.andengine.opengl.util.GLState::generateIndexBuffer(int, int):int, org.andengine.opengl.util.GLState::int mCurrentShaderProgramID, org.andengine.opengl.util.GLState::useProgram(int):void, org.andengine.opengl.util.GLState::deleteProgram(int):void, org.andengine.opengl.util.GLState::int[] mCurrentBoundTextureIDs, org.andengine.opengl.util.GLState::int mCurrentActiveTextureIndex, org.andengine.opengl.util.GLState::bindTexture(int):void, org.andengine.opengl.util.GLState::deleteTexture(int):void, org.andengine.opengl.util.GLState::getActiveTexture():int, org.andengine.opengl.util.GLState::activeTexture(int):void, org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mModelViewGLMatrixStack, org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mProjectionGLMatrixStack, org.andengine.opengl.util.GLState::float[] mModelViewGLMatrix, org.andengine.opengl.util.GLState::getModelViewGLMatrix():float[], org.andengine.opengl.util.GLState::float[] mProjectionGLMatrix, org.andengine.opengl.util.GLState::getProjectionGLMatrix():float[], org.andengine.opengl.util.GLState::resetGLMatrixStacks():void, org.andengine.opengl.util.GLState::float[] mModelViewProjectionGLMatrix, org.andengine.opengl.util.GLState::getModelViewProjectionGLMatrix():float[], org.andengine.opengl.util.GLState::reset(org.andengine.engine.options.RenderOptions, org.andengine.opengl.view.ConfigChooser, javax.microedition.khronos.egl.EGLConfig):void, org.andengine.opengl.util.GLState::boolean mDitherEnabled, org.andengine.opengl.util.GLState::enableDither():boolean, org.andengine.opengl.util.GLState::disableDither():boolean, org.andengine.opengl.util.GLState::setDitherEnabled(boolean):boolean, org.andengine.opengl.util.GLState::boolean mDepthTestEnabled, org.andengine.opengl.util.GLState::enableDepthTest():boolean, org.andengine.opengl.util.GLState::disableDepthTest():boolean, org.andengine.opengl.util.GLState::setDepthTestEnabled(boolean):boolean, org.andengine.opengl.util.GLState::boolean mBlendEnabled, org.andengine.opengl.util.GLState::enableBlend():boolean, org.andengine.opengl.util.GLState::disableBlend():boolean, org.andengine.opengl.util.GLState::setBlendEnabled(boolean):boolean, org.andengine.opengl.util.GLState::boolean mCullingEnabled, org.andengine.opengl.util.GLState::enableCulling():boolean, org.andengine.opengl.util.GLState::disableCulling():boolean, org.andengine.opengl.util.GLState::setCullingEnabled(boolean):boolean]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mModelViewGLMatrixStack, org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mProjectionGLMatrixStack, org.andengine.opengl.util.GLState::float[] mModelViewGLMatrix, org.andengine.opengl.util.GLState::getModelViewGLMatrix():float[], org.andengine.opengl.util.GLState::float[] mProjectionGLMatrix, org.andengine.opengl.util.GLState::getProjectionGLMatrix():float[], org.andengine.opengl.util.GLState::resetGLMatrixStacks():void, org.andengine.opengl.util.GLState::float[] mModelViewProjectionGLMatrix, org.andengine.opengl.util.GLState::getModelViewProjectionGLMatrix():float[]]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mModelViewGLMatrixStack, org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mProjectionGLMatrixStack, org.andengine.opengl.util.GLState::float[] mModelViewGLMatrix, org.andengine.opengl.util.GLState::getModelViewGLMatrix():float[], org.andengine.opengl.util.GLState::float[] mProjectionGLMatrix, org.andengine.opengl.util.GLState::getProjectionGLMatrix():float[], org.andengine.opengl.util.GLState::resetGLMatrixStacks():void]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::boolean mDepthTestEnabled, org.andengine.opengl.util.GLState::enableDepthTest():boolean, org.andengine.opengl.util.GLState::disableDepthTest():boolean, org.andengine.opengl.util.GLState::setDepthTestEnabled(boolean):boolean]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::boolean mDitherEnabled, org.andengine.opengl.util.GLState::enableDither():boolean, org.andengine.opengl.util.GLState::disableDither():boolean, org.andengine.opengl.util.GLState::setDitherEnabled(boolean):boolean]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::boolean mScissorTestEnabled, org.andengine.opengl.util.GLState::enableScissorTest():boolean, org.andengine.opengl.util.GLState::disableScissorTest():boolean, org.andengine.opengl.util.GLState::setScissorTestEnabled(boolean):boolean]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::boolean mBlendEnabled, org.andengine.opengl.util.GLState::enableBlend():boolean, org.andengine.opengl.util.GLState::disableBlend():boolean, org.andengine.opengl.util.GLState::setBlendEnabled(boolean):boolean]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::boolean mCullingEnabled, org.andengine.opengl.util.GLState::enableCulling():boolean, org.andengine.opengl.util.GLState::disableCulling():boolean, org.andengine.opengl.util.GLState::setCullingEnabled(boolean):boolean]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::getFramebufferStatus():int, org.andengine.opengl.util.GLState::checkFramebufferStatus():void, org.andengine.opengl.util.GLState::checkError():void]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::int mCurrentSourceBlendMode, org.andengine.opengl.util.GLState::int mCurrentDestinationBlendMode, org.andengine.opengl.util.GLState::blendFunction(int, int):void]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::int mCurrentShaderProgramID, org.andengine.opengl.util.GLState::useProgram(int):void, org.andengine.opengl.util.GLState::deleteProgram(int):void]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::int[] mHardwareIDContainer, org.andengine.opengl.util.GLState::java.lang.String mVersion, org.andengine.opengl.util.GLState::java.lang.String mRenderer, org.andengine.opengl.util.GLState::java.lang.String mExtensions, org.andengine.opengl.util.GLState::int mMaximumVertexAttributeCount, org.andengine.opengl.util.GLState::int mMaximumVertexShaderUniformVectorCount, org.andengine.opengl.util.GLState::int mMaximumFragmentShaderUniformVectorCount, org.andengine.opengl.util.GLState::int mMaximumTextureSize, org.andengine.opengl.util.GLState::int mMaximumTextureUnits, org.andengine.opengl.util.GLState::int mCurrentFramebufferID, org.andengine.opengl.util.GLState::deleteFramebuffer(int):void, org.andengine.opengl.util.GLState::int mCurrentSourceBlendMode, org.andengine.opengl.util.GLState::int mCurrentDestinationBlendMode, org.andengine.opengl.util.GLState::blendFunction(int, int):void, org.andengine.opengl.util.GLState::float mLineWidth, org.andengine.opengl.util.GLState::lineWidth(float):void, org.andengine.opengl.util.GLState::generateBuffer():int, org.andengine.opengl.util.GLState::generateFramebuffer():int, org.andengine.opengl.util.GLState::generateTexture():int, org.andengine.opengl.util.GLState::getInteger(int):int, org.andengine.opengl.util.GLState::int mCurrentArrayBufferID, org.andengine.opengl.util.GLState::bindArrayBuffer(int):void, org.andengine.opengl.util.GLState::deleteArrayBuffer(int):void, org.andengine.opengl.util.GLState::int mCurrentIndexBufferID, org.andengine.opengl.util.GLState::bindIndexBuffer(int):void, org.andengine.opengl.util.GLState::deleteIndexBuffer(int):void, org.andengine.opengl.util.GLState::generateArrayBuffer(int, int):int, org.andengine.opengl.util.GLState::generateIndexBuffer(int, int):int, org.andengine.opengl.util.GLState::int mCurrentShaderProgramID, org.andengine.opengl.util.GLState::useProgram(int):void, org.andengine.opengl.util.GLState::deleteProgram(int):void, org.andengine.opengl.util.GLState::int[] mCurrentBoundTextureIDs, org.andengine.opengl.util.GLState::int mCurrentActiveTextureIndex, org.andengine.opengl.util.GLState::bindTexture(int):void, org.andengine.opengl.util.GLState::deleteTexture(int):void, org.andengine.opengl.util.GLState::getActiveTexture():int, org.andengine.opengl.util.GLState::activeTexture(int):void, org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mModelViewGLMatrixStack, org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mProjectionGLMatrixStack, org.andengine.opengl.util.GLState::float[] mModelViewGLMatrix, org.andengine.opengl.util.GLState::getModelViewGLMatrix():float[], org.andengine.opengl.util.GLState::float[] mProjectionGLMatrix, org.andengine.opengl.util.GLState::getProjectionGLMatrix():float[], org.andengine.opengl.util.GLState::resetGLMatrixStacks():void, org.andengine.opengl.util.GLState::float[] mModelViewProjectionGLMatrix, org.andengine.opengl.util.GLState::getModelViewProjectionGLMatrix():float[], org.andengine.opengl.util.GLState::reset(org.andengine.engine.options.RenderOptions, org.andengine.opengl.view.ConfigChooser, javax.microedition.khronos.egl.EGLConfig):void, org.andengine.opengl.util.GLState::boolean mDitherEnabled, org.andengine.opengl.util.GLState::enableDither():boolean, org.andengine.opengl.util.GLState::disableDither():boolean, org.andengine.opengl.util.GLState::setDitherEnabled(boolean):boolean, org.andengine.opengl.util.GLState::boolean mDepthTestEnabled, org.andengine.opengl.util.GLState::enableDepthTest():boolean, org.andengine.opengl.util.GLState::disableDepthTest():boolean, org.andengine.opengl.util.GLState::setDepthTestEnabled(boolean):boolean, org.andengine.opengl.util.GLState::boolean mBlendEnabled, org.andengine.opengl.util.GLState::enableBlend():boolean, org.andengine.opengl.util.GLState::disableBlend():boolean, org.andengine.opengl.util.GLState::setBlendEnabled(boolean):boolean]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::int[] mCurrentBoundTextureIDs, org.andengine.opengl.util.GLState::int mCurrentActiveTextureIndex, org.andengine.opengl.util.GLState::bindTexture(int):void, org.andengine.opengl.util.GLState::deleteTexture(int):void, org.andengine.opengl.util.GLState::getActiveTexture():int, org.andengine.opengl.util.GLState::activeTexture(int):void]
org.andengine.opengl.util.GLState	[org.andengine.opengl.util.GLState::int[] mHardwareIDContainer, org.andengine.opengl.util.GLState::java.lang.String mVersion, org.andengine.opengl.util.GLState::java.lang.String mRenderer, org.andengine.opengl.util.GLState::java.lang.String mExtensions, org.andengine.opengl.util.GLState::int mMaximumVertexAttributeCount, org.andengine.opengl.util.GLState::int mMaximumVertexShaderUniformVectorCount, org.andengine.opengl.util.GLState::int mMaximumFragmentShaderUniformVectorCount, org.andengine.opengl.util.GLState::int mMaximumTextureSize, org.andengine.opengl.util.GLState::int mMaximumTextureUnits, org.andengine.opengl.util.GLState::int mCurrentFramebufferID, org.andengine.opengl.util.GLState::deleteFramebuffer(int):void, org.andengine.opengl.util.GLState::int mCurrentSourceBlendMode, org.andengine.opengl.util.GLState::int mCurrentDestinationBlendMode, org.andengine.opengl.util.GLState::blendFunction(int, int):void, org.andengine.opengl.util.GLState::float mLineWidth, org.andengine.opengl.util.GLState::lineWidth(float):void, org.andengine.opengl.util.GLState::generateBuffer():int, org.andengine.opengl.util.GLState::generateFramebuffer():int, org.andengine.opengl.util.GLState::generateTexture():int, org.andengine.opengl.util.GLState::getInteger(int):int, org.andengine.opengl.util.GLState::int mCurrentArrayBufferID, org.andengine.opengl.util.GLState::bindArrayBuffer(int):void, org.andengine.opengl.util.GLState::deleteArrayBuffer(int):void, org.andengine.opengl.util.GLState::int mCurrentIndexBufferID, org.andengine.opengl.util.GLState::bindIndexBuffer(int):void, org.andengine.opengl.util.GLState::deleteIndexBuffer(int):void, org.andengine.opengl.util.GLState::generateArrayBuffer(int, int):int, org.andengine.opengl.util.GLState::generateIndexBuffer(int, int):int, org.andengine.opengl.util.GLState::int mCurrentShaderProgramID, org.andengine.opengl.util.GLState::useProgram(int):void, org.andengine.opengl.util.GLState::deleteProgram(int):void, org.andengine.opengl.util.GLState::int[] mCurrentBoundTextureIDs, org.andengine.opengl.util.GLState::int mCurrentActiveTextureIndex, org.andengine.opengl.util.GLState::bindTexture(int):void, org.andengine.opengl.util.GLState::deleteTexture(int):void, org.andengine.opengl.util.GLState::getActiveTexture():int, org.andengine.opengl.util.GLState::activeTexture(int):void, org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mModelViewGLMatrixStack, org.andengine.opengl.util.GLState::org.andengine.opengl.util.GLMatrixStack mProjectionGLMatrixStack, org.andengine.opengl.util.GLState::float[] mModelViewGLMatrix, org.andengine.opengl.util.GLState::getModelViewGLMatrix():float[], org.andengine.opengl.util.GLState::float[] mProjectionGLMatrix, org.andengine.opengl.util.GLState::getProjectionGLMatrix():float[], org.andengine.opengl.util.GLState::resetGLMatrixStacks():void, org.andengine.opengl.util.GLState::float[] mModelViewProjectionGLMatrix, org.andengine.opengl.util.GLState::getModelViewProjectionGLMatrix():float[], org.andengine.opengl.util.GLState::reset(org.andengine.engine.options.RenderOptions, org.andengine.opengl.view.ConfigChooser, javax.microedition.khronos.egl.EGLConfig):void, org.andengine.opengl.util.GLState::boolean mDitherEnabled, org.andengine.opengl.util.GLState::enableDither():boolean, org.andengine.opengl.util.GLState::disableDither():boolean, org.andengine.opengl.util.GLState::setDitherEnabled(boolean):boolean, org.andengine.opengl.util.GLState::boolean mDepthTestEnabled, org.andengine.opengl.util.GLState::enableDepthTest():boolean, org.andengine.opengl.util.GLState::disableDepthTest():boolean, org.andengine.opengl.util.GLState::setDepthTestEnabled(boolean):boolean]
org.andengine.engine.camera.Camera	[org.andengine.engine.camera.Camera::float mXMin, org.andengine.engine.camera.Camera::float mXMax, org.andengine.engine.camera.Camera::float mYMin, org.andengine.engine.camera.Camera::float mYMax, org.andengine.engine.camera.Camera::float mCameraSceneRotation, org.andengine.engine.camera.Camera::float mZNear, org.andengine.engine.camera.Camera::float mZFar, org.andengine.engine.camera.Camera::setZClippingPlanes(float, float):void, org.andengine.engine.camera.Camera::set(float, float, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertAxisAlignedSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertAxisAlignedSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::setCenter(float, float):void, org.andengine.engine.camera.Camera::onApplySceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::getWidth():float, org.andengine.engine.camera.Camera::getWidthRaw():float, org.andengine.engine.camera.Camera::getCenterX():float, org.andengine.engine.camera.Camera::getHeight():float, org.andengine.engine.camera.Camera::getHeightRaw():float, org.andengine.engine.camera.Camera::getCenterY():float, org.andengine.engine.camera.Camera::applySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplySceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::unapplySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::onApplySceneBackgroundMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::onApplyCameraSceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::isRotated():boolean, org.andengine.engine.camera.Camera::float mRotation, org.andengine.engine.camera.Camera::getCameraSceneCoordinatesFromSceneCoordinates(float, float):float[], org.andengine.engine.camera.Camera::getCameraSceneCoordinatesFromSceneCoordinates(float[]):float[], org.andengine.engine.camera.Camera::getSceneCoordinatesFromCameraSceneCoordinates(float, float):float[], org.andengine.engine.camera.Camera::getSceneCoordinatesFromCameraSceneCoordinates(float[]):float[], org.andengine.engine.camera.Camera::int mSurfaceX, org.andengine.engine.camera.Camera::int mSurfaceY, org.andengine.engine.camera.Camera::int mSurfaceWidth, org.andengine.engine.camera.Camera::int mSurfaceHeight, org.andengine.engine.camera.Camera::setSurfaceSize(int, int, int, int):void, org.andengine.engine.camera.Camera::onSurfaceSizeInitialized(int, int, int, int):void, org.andengine.engine.camera.Camera::onSurfaceSizeChanged(int, int, int, int, int, int, int, int):void, org.andengine.engine.camera.Camera::boolean mResizeOnSurfaceSizeChanged]
org.andengine.engine.camera.Camera	[org.andengine.engine.camera.Camera::float mXMin, org.andengine.engine.camera.Camera::float mXMax, org.andengine.engine.camera.Camera::float mYMin, org.andengine.engine.camera.Camera::float mYMax, org.andengine.engine.camera.Camera::float mCameraSceneRotation, org.andengine.engine.camera.Camera::float mZNear, org.andengine.engine.camera.Camera::float mZFar, org.andengine.engine.camera.Camera::setZClippingPlanes(float, float):void, org.andengine.engine.camera.Camera::set(float, float, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertAxisAlignedSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertAxisAlignedSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::setCenter(float, float):void, org.andengine.engine.camera.Camera::onApplySceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::getWidth():float, org.andengine.engine.camera.Camera::getWidthRaw():float, org.andengine.engine.camera.Camera::getCenterX():float, org.andengine.engine.camera.Camera::getHeight():float, org.andengine.engine.camera.Camera::getHeightRaw():float, org.andengine.engine.camera.Camera::getCenterY():float, org.andengine.engine.camera.Camera::applySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplySceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::unapplySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::onApplySceneBackgroundMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::onApplyCameraSceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::isRotated():boolean, org.andengine.engine.camera.Camera::float mRotation, org.andengine.engine.camera.Camera::getCameraSceneCoordinatesFromSceneCoordinates(float, float):float[], org.andengine.engine.camera.Camera::getCameraSceneCoordinatesFromSceneCoordinates(float[]):float[], org.andengine.engine.camera.Camera::getSceneCoordinatesFromCameraSceneCoordinates(float, float):float[], org.andengine.engine.camera.Camera::getSceneCoordinatesFromCameraSceneCoordinates(float[]):float[]]
org.andengine.engine.camera.Camera	[org.andengine.engine.camera.Camera::float mXMin, org.andengine.engine.camera.Camera::float mXMax, org.andengine.engine.camera.Camera::float mYMin, org.andengine.engine.camera.Camera::float mYMax, org.andengine.engine.camera.Camera::float mCameraSceneRotation, org.andengine.engine.camera.Camera::float mZNear, org.andengine.engine.camera.Camera::float mZFar, org.andengine.engine.camera.Camera::setZClippingPlanes(float, float):void, org.andengine.engine.camera.Camera::set(float, float, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertAxisAlignedSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertAxisAlignedSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::setCenter(float, float):void, org.andengine.engine.camera.Camera::onApplySceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::getWidth():float, org.andengine.engine.camera.Camera::getWidthRaw():float, org.andengine.engine.camera.Camera::getCenterX():float, org.andengine.engine.camera.Camera::getHeight():float, org.andengine.engine.camera.Camera::getHeightRaw():float, org.andengine.engine.camera.Camera::getCenterY():float, org.andengine.engine.camera.Camera::applySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplySceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::unapplySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::onApplySceneBackgroundMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::onApplyCameraSceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::isRotated():boolean, org.andengine.engine.camera.Camera::float mRotation, org.andengine.engine.camera.Camera::getCameraSceneCoordinatesFromSceneCoordinates(float, float):float[], org.andengine.engine.camera.Camera::getCameraSceneCoordinatesFromSceneCoordinates(float[]):float[]]
org.andengine.engine.camera.Camera	[org.andengine.engine.camera.Camera::float mXMin, org.andengine.engine.camera.Camera::float mXMax, org.andengine.engine.camera.Camera::float mYMin, org.andengine.engine.camera.Camera::float mYMax, org.andengine.engine.camera.Camera::float mCameraSceneRotation, org.andengine.engine.camera.Camera::float mZNear, org.andengine.engine.camera.Camera::float mZFar, org.andengine.engine.camera.Camera::setZClippingPlanes(float, float):void, org.andengine.engine.camera.Camera::set(float, float, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertAxisAlignedSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertAxisAlignedSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::setCenter(float, float):void, org.andengine.engine.camera.Camera::onApplySceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::getWidth():float, org.andengine.engine.camera.Camera::getWidthRaw():float, org.andengine.engine.camera.Camera::getCenterX():float, org.andengine.engine.camera.Camera::getHeight():float, org.andengine.engine.camera.Camera::getHeightRaw():float, org.andengine.engine.camera.Camera::getCenterY():float, org.andengine.engine.camera.Camera::applySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplySceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::unapplySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::onApplySceneBackgroundMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::onApplyCameraSceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::isRotated():boolean, org.andengine.engine.camera.Camera::float mRotation]
org.andengine.engine.camera.Camera	[org.andengine.engine.camera.Camera::float mZNear, org.andengine.engine.camera.Camera::float mZFar, org.andengine.engine.camera.Camera::setZClippingPlanes(float, float):void]
org.andengine.engine.camera.Camera	[org.andengine.engine.camera.Camera::org.andengine.engine.handler.UpdateHandlerList mUpdateHandlers, org.andengine.engine.camera.Camera::registerUpdateHandler(org.andengine.engine.handler.IUpdateHandler):void, org.andengine.engine.camera.Camera::allocateUpdateHandlers():void, org.andengine.engine.camera.Camera::unregisterUpdateHandler(org.andengine.engine.handler.IUpdateHandler):boolean, org.andengine.engine.camera.Camera::clearUpdateHandlers():void, org.andengine.engine.camera.Camera::unregisterUpdateHandlers(org.andengine.engine.handler.IUpdateHandler.IUpdateHandlerMatcher):boolean]
org.andengine.engine.camera.Camera	[org.andengine.engine.camera.Camera::float mXMin, org.andengine.engine.camera.Camera::float mXMax, org.andengine.engine.camera.Camera::float mYMin, org.andengine.engine.camera.Camera::float mYMax, org.andengine.engine.camera.Camera::float mCameraSceneRotation, org.andengine.engine.camera.Camera::float mZNear, org.andengine.engine.camera.Camera::float mZFar, org.andengine.engine.camera.Camera::setZClippingPlanes(float, float):void, org.andengine.engine.camera.Camera::set(float, float, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertAxisAlignedSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, float, float):void, org.andengine.engine.camera.Camera::applyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplyCameraSceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertAxisAlignedSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::setCenter(float, float):void, org.andengine.engine.camera.Camera::onApplySceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::getWidth():float, org.andengine.engine.camera.Camera::getWidthRaw():float, org.andengine.engine.camera.Camera::getCenterX():float, org.andengine.engine.camera.Camera::getHeight():float, org.andengine.engine.camera.Camera::getHeightRaw():float, org.andengine.engine.camera.Camera::getCenterY():float, org.andengine.engine.camera.Camera::applySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::unapplySceneRotation(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertSceneToSurfaceTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneRotation(float[]):void, org.andengine.engine.camera.Camera::unapplySceneRotation(float[]):void, org.andengine.engine.camera.Camera::convertSurfaceToSceneTouchEvent(org.andengine.input.touch.TouchEvent, int, int):void, org.andengine.engine.camera.Camera::applySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::unapplySceneToCameraSceneOffset(float[]):void, org.andengine.engine.camera.Camera::onApplySceneBackgroundMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::onApplyCameraSceneMatrix(org.andengine.opengl.util.GLState):void, org.andengine.engine.camera.Camera::isRotated():boolean, org.andengine.engine.camera.Camera::float mRotation, org.andengine.engine.camera.Camera::getCameraSceneCoordinatesFromSceneCoordinates(float, float):float[], org.andengine.engine.camera.Camera::getCameraSceneCoordinatesFromSceneCoordinates(float[]):float[], org.andengine.engine.camera.Camera::getSceneCoordinatesFromCameraSceneCoordinates(float, float):float[], org.andengine.engine.camera.Camera::getSceneCoordinatesFromCameraSceneCoordinates(float[]):float[], org.andengine.engine.camera.Camera::int mSurfaceX, org.andengine.engine.camera.Camera::int mSurfaceY, org.andengine.engine.camera.Camera::int mSurfaceWidth, org.andengine.engine.camera.Camera::int mSurfaceHeight, org.andengine.engine.camera.Camera::setSurfaceSize(int, int, int, int):void, org.andengine.engine.camera.Camera::onSurfaceSizeInitialized(int, int, int, int):void, org.andengine.engine.camera.Camera::onSurfaceSizeChanged(int, int, int, int, int, int, int, int):void, org.andengine.engine.camera.Camera::boolean mResizeOnSurfaceSizeChanged, org.andengine.engine.camera.Camera::convertSceneToCameraSceneTouchEvent(org.andengine.input.touch.TouchEvent):void, org.andengine.engine.camera.Camera::convertCameraSceneToSceneTouchEvent(org.andengine.input.touch.TouchEvent):void]
org.andengine.opengl.view.ConfigChooser	[org.andengine.opengl.view.ConfigChooser::int mRedSize, org.andengine.opengl.view.ConfigChooser::int mGreenSize, org.andengine.opengl.view.ConfigChooser::int mBlueSize, org.andengine.opengl.view.ConfigChooser::int mAlphaSize, org.andengine.opengl.view.ConfigChooser::int mDepthSize, org.andengine.opengl.view.ConfigChooser::int mStencilSize, org.andengine.opengl.view.ConfigChooser::findEGLConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, int[], int, org.andengine.opengl.view.ConfigChooser.ConfigChooserMatcher):javax.microedition.khronos.egl.EGLConfig, org.andengine.opengl.view.ConfigChooser::findEGLConfig(javax.microedition.khronos.egl.EGL10, javax.microedition.khronos.egl.EGLDisplay, javax.microedition.khronos.egl.EGLConfig[], org.andengine.opengl.view.ConfigChooser.ConfigChooserMatcher):javax.microedition.khronos.egl.EGLConfig]
org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions	[org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions::float mInsetLeft, org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions::float mInsetRight, org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions::float mInsetTop, org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions::float mInsetBottom, org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions::setInsetLeft(float):org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions, org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions::setInsetRight(float):org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions, org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions::setInsetTop(float):org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions, org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions::setInsetBottom(float):org.andengine.opengl.texture.atlas.bitmap.source.decorator.BaseBitmapTextureAtlasSourceDecorator.TextureAtlasSourceDecoratorOptions]
org.andengine.util.level.LevelLoader	[org.andengine.util.level.LevelLoader::org.andengine.util.level.IEntityLoader mDefaultEntityLoader, org.andengine.util.level.LevelLoader::loadLevelFromStream(java.io.InputStream):void, org.andengine.util.level.LevelLoader::java.util.HashMap<java.lang.String,org.andengine.util.level.IEntityLoader> mEntityLoaders, org.andengine.util.level.LevelLoader::registerEntityLoader(java.lang.String, org.andengine.util.level.IEntityLoader):void, org.andengine.util.level.LevelLoader::registerEntityLoader(java.lang.String[], org.andengine.util.level.IEntityLoader):void, org.andengine.util.level.LevelLoader::onAfterLoadLevel():void, org.andengine.util.level.LevelLoader::onBeforeLoadLevel():void]
org.andengine.util.level.LevelLoader	[org.andengine.util.level.LevelLoader::java.util.HashMap<java.lang.String,org.andengine.util.level.IEntityLoader> mEntityLoaders, org.andengine.util.level.LevelLoader::registerEntityLoader(java.lang.String, org.andengine.util.level.IEntityLoader):void, org.andengine.util.level.LevelLoader::registerEntityLoader(java.lang.String[], org.andengine.util.level.IEntityLoader):void]
org.andengine.entity.scene.Scene	[org.andengine.entity.scene.Scene::boolean mTouchAreaBindingOnActionDownEnabled, org.andengine.entity.scene.Scene::setTouchAreaBindingOnActionDownEnabled(boolean):void, org.andengine.entity.scene.Scene::android.util.SparseArray<org.andengine.entity.scene.ITouchArea> mTouchAreaBindings, org.andengine.entity.scene.Scene::boolean mTouchAreaBindingOnActionMoveEnabled, org.andengine.entity.scene.Scene::setTouchAreaBindingOnActionMoveEnabled(boolean):void]
org.andengine.entity.scene.Scene	[org.andengine.entity.scene.Scene::boolean mTouchAreaBindingOnActionDownEnabled, org.andengine.entity.scene.Scene::setTouchAreaBindingOnActionDownEnabled(boolean):void, org.andengine.entity.scene.Scene::android.util.SparseArray<org.andengine.entity.scene.ITouchArea> mTouchAreaBindings]
org.andengine.entity.scene.Scene	[org.andengine.entity.scene.Scene::boolean mOnSceneTouchListenerBindingOnActionDownEnabled, org.andengine.entity.scene.Scene::android.util.SparseArray<org.andengine.entity.scene.IOnSceneTouchListener> mOnSceneTouchListenerBindings, org.andengine.entity.scene.Scene::setOnSceneTouchListenerBindingOnActionDownEnabled(boolean):void]
org.andengine.entity.scene.Scene	[org.andengine.entity.scene.Scene::org.andengine.util.adt.list.SmartList<org.andengine.entity.scene.ITouchArea> mTouchAreas, org.andengine.entity.scene.Scene::unregisterTouchArea(org.andengine.entity.scene.ITouchArea):boolean, org.andengine.entity.scene.Scene::clearTouchAreas():void]
org.andengine.entity.scene.Scene	[org.andengine.entity.scene.Scene::boolean mOnAreaTouchTraversalBackToFront, org.andengine.entity.scene.Scene::setOnAreaTouchTraversalBackToFront():void, org.andengine.entity.scene.Scene::setOnAreaTouchTraversalFrontToBack():void]
org.andengine.entity.scene.Scene	[org.andengine.entity.scene.Scene::org.andengine.entity.scene.IOnAreaTouchListener mOnAreaTouchListener, org.andengine.entity.scene.Scene::hasOnAreaTouchListener():boolean, org.andengine.entity.scene.Scene::onAreaTouchEvent(org.andengine.input.touch.TouchEvent, float, float, org.andengine.entity.scene.ITouchArea):java.lang.Boolean]
org.andengine.entity.scene.Scene	[org.andengine.entity.scene.Scene::org.andengine.entity.scene.Scene mParentScene, org.andengine.entity.scene.Scene::back():void, org.andengine.entity.scene.Scene::setChildScene(org.andengine.entity.scene.Scene, boolean, boolean, boolean):void, org.andengine.entity.scene.Scene::boolean mChildSceneModalDraw, org.andengine.entity.scene.Scene::boolean mChildSceneModalUpdate, org.andengine.entity.scene.Scene::boolean mChildSceneModalTouch]
org.andengine.engine.camera.SmoothCamera	[org.andengine.engine.camera.SmoothCamera::float mMaxVelocityX, org.andengine.engine.camera.SmoothCamera::limitToMaxVelocityX(float, float):float, org.andengine.engine.camera.SmoothCamera::setMaxVelocity(float, float):void, org.andengine.engine.camera.SmoothCamera::float mMaxVelocityY, org.andengine.engine.camera.SmoothCamera::limitToMaxVelocityY(float, float):float]
org.andengine.util.texturepack.TexturePackParser	[org.andengine.util.texturepack.TexturePackParser::android.content.res.AssetManager mAssetManager, org.andengine.util.texturepack.TexturePackParser::onGetInputStream(java.lang.String):java.io.InputStream, org.andengine.util.texturepack.TexturePackParser::java.lang.String mAssetBasePath]
org.andengine.util.texturepack.TexturePackParser	[org.andengine.util.texturepack.TexturePackParser::android.content.res.AssetManager mAssetManager, org.andengine.util.texturepack.TexturePackParser::onGetInputStream(java.lang.String):java.io.InputStream, org.andengine.util.texturepack.TexturePackParser::java.lang.String mAssetBasePath, org.andengine.util.texturepack.TexturePackParser::org.andengine.opengl.texture.TextureManager mTextureManager, org.andengine.util.texturepack.TexturePackParser::parseTexture(org.xml.sax.Attributes):org.andengine.opengl.texture.ITexture]
org.andengine.util.texturepack.TexturePackTextureRegionLibrary	[org.andengine.util.texturepack.TexturePackTextureRegionLibrary::java.util.HashMap<java.lang.String,org.andengine.util.texturepack.TexturePackTextureRegion> mSourceMapping, org.andengine.util.texturepack.TexturePackTextureRegionLibrary::get(java.lang.String):org.andengine.util.texturepack.TexturePackTextureRegion, org.andengine.util.texturepack.TexturePackTextureRegionLibrary::get(java.lang.String, boolean):org.andengine.util.texturepack.TexturePackTextureRegion]
org.andengine.util.texturepack.TexturePackTextureRegionLibrary	[org.andengine.util.texturepack.TexturePackTextureRegionLibrary::android.util.SparseArray<org.andengine.util.texturepack.TexturePackTextureRegion> mIDMapping, org.andengine.util.texturepack.TexturePackTextureRegionLibrary::remove(int):void, org.andengine.util.texturepack.TexturePackTextureRegionLibrary::get(int):org.andengine.util.texturepack.TexturePackTextureRegion]
org.andengine.util.texturepack.TexturePackTextureRegionLibrary	[org.andengine.util.texturepack.TexturePackTextureRegionLibrary::android.util.SparseArray<org.andengine.util.texturepack.TexturePackTextureRegion> mIDMapping, org.andengine.util.texturepack.TexturePackTextureRegionLibrary::remove(int):void, org.andengine.util.texturepack.TexturePackTextureRegionLibrary::get(int):org.andengine.util.texturepack.TexturePackTextureRegion, org.andengine.util.texturepack.TexturePackTextureRegionLibrary::put(org.andengine.util.texturepack.TexturePackTextureRegion):void, org.andengine.util.texturepack.TexturePackTextureRegionLibrary::throwOnCollision(org.andengine.util.texturepack.TexturePackTextureRegion):void]
org.andengine.engine.Engine	[org.andengine.engine.Engine::org.andengine.engine.handler.UpdateHandlerList mUpdateHandlers, org.andengine.engine.Engine::unregisterUpdateHandler(org.andengine.engine.handler.IUpdateHandler):void, org.andengine.engine.Engine::clearUpdateHandlers():void]
org.andengine.engine.Engine	[org.andengine.engine.Engine::disableAccelerationSensor(android.content.Context):boolean, org.andengine.engine.Engine::unregisterSelfAsSensorListener(android.hardware.SensorManager, int):void, org.andengine.engine.Engine::disableOrientationSensor(android.content.Context):boolean]
org.andengine.engine.Engine	[org.andengine.engine.Engine::org.andengine.engine.handler.DrawHandlerList mDrawHandlers, org.andengine.engine.Engine::unregisterDrawHandler(org.andengine.engine.handler.IDrawHandler):void, org.andengine.engine.Engine::clearDrawHandlers():void]
org.andengine.engine.Engine	[org.andengine.engine.Engine::android.os.Vibrator mVibrator, org.andengine.engine.Engine::enableVibrator(android.content.Context):boolean, org.andengine.engine.Engine::vibrate(long):void, org.andengine.engine.Engine::vibrate(long[], int):void]
org.andengine.engine.Engine	[org.andengine.engine.Engine::org.andengine.entity.scene.Scene mScene, org.andengine.engine.Engine::getSceneFromSurfaceTouchEvent(org.andengine.input.touch.TouchEvent):org.andengine.entity.scene.Scene, org.andengine.engine.Engine::onUpdateScene(float):void, org.andengine.engine.Engine::onDrawScene(org.andengine.opengl.util.GLState, org.andengine.engine.camera.Camera):void]
org.andengine.engine.Engine	[org.andengine.engine.Engine::org.andengine.input.sensor.acceleration.IAccelerationListener mAccelerationListener, org.andengine.engine.Engine::org.andengine.input.sensor.acceleration.AccelerationData mAccelerationData, org.andengine.engine.Engine::org.andengine.input.sensor.orientation.IOrientationListener mOrientationListener, org.andengine.engine.Engine::org.andengine.input.sensor.orientation.OrientationData mOrientationData, org.andengine.engine.Engine::enableAccelerationSensor(android.content.Context, org.andengine.input.sensor.acceleration.IAccelerationListener, org.andengine.input.sensor.acceleration.AccelerationSensorOptions):boolean, org.andengine.engine.Engine::enableOrientationSensor(android.content.Context, org.andengine.input.sensor.orientation.IOrientationListener, org.andengine.input.sensor.orientation.OrientationSensorOptions):boolean]
org.andengine.entity.modifier.PathModifier.Path	[org.andengine.entity.modifier.PathModifier.Path::int mIndex, org.andengine.entity.modifier.PathModifier.Path::updateLength():void, org.andengine.entity.modifier.PathModifier.Path::boolean mLengthChanged, org.andengine.entity.modifier.PathModifier.Path::float mLength, org.andengine.entity.modifier.PathModifier.Path::getLength():float]
org.andengine.entity.modifier.PathModifier.Path	[org.andengine.entity.modifier.PathModifier.Path::boolean mLengthChanged, org.andengine.entity.modifier.PathModifier.Path::float mLength, org.andengine.entity.modifier.PathModifier.Path::getLength():float]
org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue	[org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue::org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueueNode mHead, org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue::org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueueNode mTail, org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue::isEmpty():boolean, org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue::add(org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueueNode):org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueueNode, org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue::moveToTail(org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueueNode):void, org.andengine.util.adt.cache.IntLRUCache.IntLRUCacheQueue::poll():int]
org.andengine.entity.sprite.ButtonSprite	[org.andengine.entity.sprite.ButtonSprite::boolean mEnabled, org.andengine.entity.sprite.ButtonSprite::org.andengine.entity.sprite.ButtonSprite.State mState, org.andengine.entity.sprite.ButtonSprite::setEnabled(boolean):void, org.andengine.entity.sprite.ButtonSprite::isPressed():boolean]
org.andengine.opengl.texture.render.RenderTexture	[org.andengine.opengl.texture.render.RenderTexture::int mFramebufferObjectID, org.andengine.opengl.texture.render.RenderTexture::boolean mInitialized, org.andengine.opengl.texture.render.RenderTexture::destroy(org.andengine.opengl.util.GLState):void]
org.andengine.util.algorithm.path.Path	[org.andengine.util.algorithm.path.Path::int[] mXs, org.andengine.util.algorithm.path.Path::getDirectionToNextStep(int):org.andengine.util.algorithm.path.Direction, org.andengine.util.algorithm.path.Path::getX(int):int, org.andengine.util.algorithm.path.Path::getDirectionToPreviousStep(int):org.andengine.util.algorithm.path.Direction]
